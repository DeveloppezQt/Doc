<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMqttConnectionProperties Class</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmqttconnectionproperties.xml">QMqttConnectionProperties</db:link> class represents configuration options a <db:link xlink:href="qmqttclient.xml">QMqttClient</db:link> can pass to the server when invoking <db:link xlink:href="qmqttclient.xml#connectToHost">QMqttClient::connectToHost</db:link>().</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMqttConnectionProperties</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += mqtt</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmqttserverconnectionproperties.xml" xlink:role="class">QMqttServerConnectionProperties</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>Connection properties are part of the MQTT 5.0 specification and cannot be used when connecting with a lower protocol level. See <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="authenticationData">
<db:title>QByteArray QMqttConnectionProperties::authenticationData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>authenticationData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray authenticationData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the authentication data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setAuthenticationData">setAuthenticationData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="authenticationMethod">
<db:title>QString QMqttConnectionProperties::authenticationMethod() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>authenticationMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString authenticationMethod() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the authentication method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setAuthenticationMethod">setAuthenticationMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumPacketSize">
<db:title>quint32 QMqttConnectionProperties::maximumPacketSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint32</db:type>
<db:methodname>maximumPacketSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint32 maximumPacketSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum packet size the client can receive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setMaximumPacketSize">setMaximumPacketSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumReceive">
<db:title>quint16 QMqttConnectionProperties::maximumReceive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>maximumReceive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 maximumReceive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum amount of QoS 1 and QoS 2 publications that the client (when obtained from <db:link xlink:href="qmqttclient.xml#connectionProperties">QMqttClient::connectionProperties</db:link>()) or the server (when obtained from <db:link xlink:href="qmqttclient.xml#serverConnectionProperties">QMqttClient::serverConnectionProperties</db:link>()) is willing to process concurrently for this session.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setMaximumReceive">setMaximumReceive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumTopicAlias">
<db:title>quint16 QMqttConnectionProperties::maximumTopicAlias() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>maximumTopicAlias</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 maximumTopicAlias() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum topic alias ID the client can use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setMaximumTopicAlias">setMaximumTopicAlias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestProblemInformation">
<db:title>bool QMqttConnectionProperties::requestProblemInformation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>requestProblemInformation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool requestProblemInformation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the client should receive problem information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setRequestProblemInformation">setRequestProblemInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestResponseInformation">
<db:title>bool QMqttConnectionProperties::requestResponseInformation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>requestResponseInformation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool requestResponseInformation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the client should receive response information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setRequestResponseInformation">setRequestResponseInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionExpiryInterval">
<db:title>quint32 QMqttConnectionProperties::sessionExpiryInterval() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint32</db:type>
<db:methodname>sessionExpiryInterval</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint32 sessionExpiryInterval() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the session expiry interval.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setSessionExpiryInterval">setSessionExpiryInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthenticationData">
<db:title>void QMqttConnectionProperties::setAuthenticationData(const QByteArray &amp;<db:emphasis>authData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAuthenticationData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>authData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAuthenticationData(const QByteArray &amp;authData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the authentication data to <db:code role="parameter">authData</db:code>.</db:para>
<db:para>Authentication data can only be used if an authentication method has been specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#authenticationData">authenticationData</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#authenticationMethod">authenticationMethod</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthenticationMethod">
<db:title>void QMqttConnectionProperties::setAuthenticationMethod(const QString &amp;<db:emphasis>authMethod</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAuthenticationMethod</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>authMethod</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAuthenticationMethod(const QString &amp;authMethod)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the authentication method to <db:code role="parameter">authMethod</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#authenticationMethod">authenticationMethod</db:link>()</db:member>
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#authenticationData">authenticationData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumPacketSize">
<db:title>void QMqttConnectionProperties::setMaximumPacketSize(quint32 <db:emphasis>packetSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumPacketSize</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>packetSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumPacketSize(quint32 packetSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum packet size to <db:code role="parameter">packetSize</db:code>. The maximum packet size specifies the maximum size one packet can contain. This includes the packet header and its properties.</db:para>
<db:para>If no maximum packet size is specified, no limit is imposed beyond the limitations of the protocol itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#maximumPacketSize">maximumPacketSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumReceive">
<db:title>void QMqttConnectionProperties::setMaximumReceive(quint16 <db:emphasis>maximumReceive</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumReceive</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>maximumReceive</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumReceive(quint16 maximumReceive)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum amount of QoS 1 and QoS 2 publications that the client is willing to process concurrently for this session to <db:code role="parameter">maximumReceive</db:code>.</db:para>
<db:para>A maximum receive value of 0 is not allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#maximumReceive">maximumReceive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumTopicAlias">
<db:title>void QMqttConnectionProperties::setMaximumTopicAlias(quint16 <db:emphasis>alias</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumTopicAlias</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>alias</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumTopicAlias(quint16 alias)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum topic alias to <db:code role="parameter">alias</db:code>. The maximum topic alias specifies the highest value that the client will accept from the server. The client uses this value to limit the number of topic aliases it is willing to hold for the connection.</db:para>
<db:para>The default value is 0. 0 indicates that the client does not accept any topic aliases on this connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#maximumTopicAlias">maximumTopicAlias</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequestProblemInformation">
<db:title>void QMqttConnectionProperties::setRequestProblemInformation(bool <db:emphasis>problem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRequestProblemInformation</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>problem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRequestProblemInformation(bool problem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the request problem information to <db:code role="parameter">problem</db:code>. A client uses this to request the server to return additional information in case of failure. Types of failure include connection and message management on the server side.</db:para>
<db:para>The default value is <db:code>false</db:code>, which indicates that the client must not receive any problem information for anything but connection management. The server still may send problem information for connection handling. If the value is <db:code>true</db:code>, the server may return problem information.</db:para>
<db:para>Problem information is available in user properties or reason strings of the property classes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#requestProblemInformation">requestProblemInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequestResponseInformation">
<db:title>void QMqttConnectionProperties::setRequestResponseInformation(bool <db:emphasis>response</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRequestResponseInformation</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>response</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRequestResponseInformation(bool response)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the request response information to <db:code role="parameter">response</db:code>. A client uses this to request the server to return response information after the connection request has been handled.</db:para>
<db:para>The default value is <db:code>false</db:code>, which indicates that the client must not return any response information. If the value is <db:code>true</db:code>, the server may return response information, but is not enforced to do so.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#requestResponseInformation">requestResponseInformation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSessionExpiryInterval">
<db:title>void QMqttConnectionProperties::setSessionExpiryInterval(quint32 <db:emphasis>expiry</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSessionExpiryInterval</db:methodname>
<db:methodparam>
<db:type>quint32</db:type>
<db:parameter>expiry</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSessionExpiryInterval(quint32 expiry)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the session expiry interval to <db:code role="parameter">expiry</db:code>. The session expiry interval specifies the number of seconds a server holds information on the client state after a connection has been closed.</db:para>
<db:para>The default value is 0, which specifies that the session is closed when the network connection ends. If the value is specified as maximum of quint32, then the session does not expire.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#sessionExpiryInterval">sessionExpiryInterval</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserProperties">
<db:title>void QMqttConnectionProperties::setUserProperties(const QMqttUserProperties &amp;<db:emphasis>properties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUserProperties</db:methodname>
<db:methodparam>
<db:type>const QMqttUserProperties &amp;</db:type>
<db:parameter>properties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUserProperties(const QMqttUserProperties &amp;properties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the user properties of the connection to <db:code role="parameter">properties</db:code>.</db:para>
<db:para>The default value is to not send any user information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#userProperties">userProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userProperties">
<db:title>QMqttUserProperties QMqttConnectionProperties::userProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMqttUserProperties</db:type>
<db:methodname>userProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttUserProperties userProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the user properties for the connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmqttconnectionproperties.xml#setUserProperties">setUserProperties</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
