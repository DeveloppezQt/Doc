<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSequentialAnimationGroup Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> class provides a sequential group of animations.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSequentialAnimationGroup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qanimationgroup.xml" xlink:role="class">QAnimationGroup</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSequentialAnimationGroup is part of <db:simplelist><db:member><db:link xlink:href="animation.xml">Animation Framework</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> is a <db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link> that runs its animations in sequence, i.e., it starts one animation after another has finished playing. The animations are played in the order they are added to the group (using <db:link xlink:href="qanimationgroup.xml#addAnimation">addAnimation</db:link>() or <db:link xlink:href="qanimationgroup.xml#insertAnimation">insertAnimation</db:link>()). The animation group finishes when its last animation has finished.</db:para>
<db:para>At each moment there is at most one animation that is active in the group; it is returned by <db:link xlink:href="qsequentialanimationgroup.xml#currentAnimation-prop">currentAnimation</db:link>(). An empty group has no current animation.</db:para>
<db:para>A sequential animation group can be treated as any other animation, i.e., it can be started, stopped, and added to other groups. You can also call <db:link xlink:href="qsequentialanimationgroup.xml#addPause">addPause</db:link>() or <db:link xlink:href="qsequentialanimationgroup.xml#insertPause">insertPause</db:link>() to add a pause to a sequential animation group.</db:para>
<db:programlisting language="cpp">    QSequentialAnimationGroup *group = new QSequentialAnimationGroup;

    group-&amp;gt;addAnimation(anim1);
    group-&amp;gt;addAnimation(anim2);

    group-&amp;gt;start();
</db:programlisting>
<db:para>In this example, anim1 and anim2 are two already set up <db:link xlink:href="qpropertyanimation.xml">QPropertyAnimation</db:link>s.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qanimationgroup.xml">QAnimationGroup</db:link></db:member>
<db:member><db:link xlink:href="qabstractanimation.xml">QAbstractAnimation</db:link></db:member>
<db:member><db:link xlink:href="animation-overview.xml">The Animation Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentAnimation-prop">
<db:title>[read-only] currentAnimation : QAbstractAnimation* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractAnimation*</db:type>
<db:varname>currentAnimation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentAnimation</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentAnimationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the animation in the current time.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractanimation.xml#QAbstractAnimation">QAbstractAnimation</db:link></db:type> *<db:emphasis role="bold">currentAnimation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsequentialanimationgroup.xml#currentAnimationChanged">currentAnimationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractanimation.xml#QAbstractAnimation">QAbstractAnimation</db:link></db:type> *<db:emphasis>current</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSequentialAnimationGroup">
<db:title>QSequentialAnimationGroup::QSequentialAnimationGroup(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSequentialAnimationGroup</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSequentialAnimationGroup(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QSequentialAnimationGroup">
<db:title>[virtual] QSequentialAnimationGroup::~QSequentialAnimationGroup()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSequentialAnimationGroup</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSequentialAnimationGroup()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the animation group. It will also destroy all its animations.</db:para>
</db:section>
<db:section xml:id="addPause">
<db:title>QPauseAnimation *QSequentialAnimationGroup::addPause(int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPauseAnimation *</db:type>
<db:methodname>addPause</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPauseAnimation * addPause(int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a pause of <db:code role="parameter">msecs</db:code> to this animation group. The pause is considered as a special type of animation, thus <db:link xlink:href="qanimationgroup.xml#animationCount">animationCount</db:link> will be increased by one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsequentialanimationgroup.xml#insertPause">insertPause</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#addAnimation">QAnimationGroup::addAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentAnimationChanged">
<db:title>void QSequentialAnimationGroup::currentAnimationChanged(QAbstractAnimation *<db:emphasis>current</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentAnimationChanged</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation *</db:type>
<db:parameter>current</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentAnimation</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentAnimationChanged(QAbstractAnimation *current)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:link xlink:href="qsequentialanimationgroup.xml">QSequentialAnimationGroup</db:link> emits this signal when <db:link xlink:href="qsequentialanimationgroup.xml#currentAnimation-prop">currentAnimation</db:link> has been changed. <db:code role="parameter">current</db:code> is the current animation.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsequentialanimationgroup.xml#currentAnimation-prop">currentAnimation</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsequentialanimationgroup.xml#currentAnimation-prop">currentAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration">
<db:title>[override virtual] int QSequentialAnimationGroup::duration() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>duration</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int duration() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#duration" role="function">QAbstractAnimation::duration() const</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSequentialAnimationGroup::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qanimationgroup.xml#event" role="function">QAnimationGroup::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="insertPause">
<db:title>QPauseAnimation *QSequentialAnimationGroup::insertPause(int <db:emphasis>index</db:emphasis>, int <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPauseAnimation *</db:type>
<db:methodname>insertPause</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPauseAnimation * insertPause(int index, int msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a pause of <db:code role="parameter">msecs</db:code> milliseconds at <db:code role="parameter">index</db:code> in this animation group.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsequentialanimationgroup.xml#addPause">addPause</db:link>()</db:member>
<db:member><db:link xlink:href="qanimationgroup.xml#insertAnimation">QAnimationGroup::insertAnimation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateCurrentTime">
<db:title>[override virtual protected] void QSequentialAnimationGroup::updateCurrentTime(int <db:emphasis>currentTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateCurrentTime</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>currentTime</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateCurrentTime(int currentTime) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#updateCurrentTime" role="function">QAbstractAnimation::updateCurrentTime(int currentTime)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateDirection">
<db:title>[override virtual protected] void QSequentialAnimationGroup::updateDirection(QAbstractAnimation::Direction <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateDirection</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::Direction</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateDirection(QAbstractAnimation::Direction direction) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#updateDirection" role="function">QAbstractAnimation::updateDirection(QAbstractAnimation::Direction direction)</db:link>.</db:para>
</db:section>
<db:section xml:id="updateState">
<db:title>[override virtual protected] void QSequentialAnimationGroup::updateState(QAbstractAnimation::State <db:emphasis>newState</db:emphasis>, QAbstractAnimation::State <db:emphasis>oldState</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateState</db:methodname>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>newState</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractAnimation::State</db:type>
<db:parameter>oldState</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractanimation.xml#updateState" role="function">QAbstractAnimation::updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
