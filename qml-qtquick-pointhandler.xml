<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PointHandler QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Handler for reacting to a single touchpoint.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>SinglePointHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>PointHandler is part of <db:simplelist><db:member>qtquick-input-handlers</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> can be used to show feedback about a touchpoint or the mouse position, or to otherwise react to pointer events.</db:para>
<db:para>When a press event occurs, each instance of <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> chooses a single point which is not yet &quot;taken&quot; at that moment: if the press occurs within the bounds of the <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">PointerHandler::parent</db:link>, and no sibling <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> within the same <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">PointerHandler::parent</db:link> has yet acquired a passive grab on that point, and if the other constraints such as <db:link xlink:href="qml-qtquick-pointhandler.xml#acceptedButtons-prop">acceptedButtons</db:link>, <db:link xlink:href="qml-qtquick-pointhandler.xml#acceptedDevices-prop">acceptedDevices</db:link> etc. are satisfied, it's eligible, and the <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> then acquires a passive grab. In this way, the <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">PointerHandler::parent</db:link> acts like an exclusive group: there can be multiple instances of <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link>, and the set of pressed touchpoints will be distributed among them. Each <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> which has chosen a point to track has its <db:link xlink:href="qml-qtquick-pointhandler.xml#active-prop">active</db:link> property <db:code>true</db:code>. It then continues to track its chosen point until release: the properties of the <db:link xlink:href="qml-point.xml">point</db:link> will be kept up-to-date. Any Item can bind to these properties, and thereby follow the point's movements.</db:para>
<db:para>By being only a passive grabber, it has the ability to keep independent oversight of all movements. The passive grab cannot be stolen or overridden even when other gestures are detected and exclusive grabs occur.</db:para>
<db:para>If your goal is orthogonal surveillance of eventpoints, an older alternative was <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>(), but that has never been a built-in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> feature: it requires some C++ code, such as a <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> subclass. <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> is more efficient than that, because only pointer events will be delivered to it, during the course of normal event delivery in <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>; whereas an event filter needs to filter all QEvents of all types, and thus sets itself up as a potential event delivery bottleneck.</db:para>
<db:para>One possible use case is to add this handler to a transparent Item which is on top of the rest of the scene (by having a high <db:link xlink:href="qml-qtquick-item.xml#z-prop">z</db:link> value), so that when a point is freshly pressed, it will be delivered to that Item and its handlers first, providing the opportunity to take the passive grab as early as possible. Such an item (like a pane of glass over the whole UI) can be a convenient parent for other Items which visualize the kind of reactive feedback which must always be on top; and likewise it can be the parent for popups, popovers, dialogs and so on. If it will be used in that way, it can be helpful for your main.cpp to use <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>() to make the &quot;glass pane&quot; accessible by ID to the entire UI, so that other Items and PointHandlers can be reparented to it.</db:para>
<db:programlisting language="qml">import QtQuick

Window {
    width: 480
    height: 320
    visible: true

    Item {
        id: glassPane
        z: 10000
        anchors.fill: parent

        PointHandler {
            id: handler
            acceptedDevices: PointerDevice.TouchScreen | PointerDevice.TouchPad
            target: Rectangle {
                parent: glassPane
                color: &quot;red&quot;
                visible: handler.active
                x: handler.point.position.x - width / 2
                y: handler.point.position.y - height / 2
                width: 20; height: width; radius: width / 2
            }
        }
    }
}
</db:programlisting>
<db:para>Like all input handlers, a <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> has a <db:link xlink:href="qml-qtquick-pointhandler.xml#target-prop">target</db:link> property, which may be used as a convenient place to put a point-tracking Item; but <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> will not automatically manipulate the <db:code>target</db:code> item in any way. You need to use bindings to make it react to the <db:link xlink:href="qml-point.xml">point</db:link>.</db:para>
<db:note>
<db:para>On macOS, <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> does not react to multiple fingers on the trackpad by default, although it does react to a pressed point (mouse position). That is because macOS can provide either native gesture recognition, or raw touchpoints, but not both. We prefer to use the native gesture event in <db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link>, so we do not want to disable it by enabling touch. However <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> does enable touch, thus disabling native gesture recognition within the entire window; so it's an alternative if you only want to react to all the touchpoints but do not require the smooth native-gesture experience.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link></db:member>
<db:member><db:link xlink:href="qtquick-pointerhandlers-example.xml">Qt Quick Examples - Pointer Handlers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptedButtons-prop">
<db:title>acceptedButtons : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The mouse buttons that can activate this <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link>.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qml-qtquick-mouseevent.xml#button-prop">Qt.LeftButton</db:link>. It can be set to an OR combination of mouse buttons, and will ignore events in which other buttons are pressed or held.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 480; height: 320

    Rectangle {
        color: handler.active ? &quot;tomato&quot; : &quot;wheat&quot;
        x: handler.point.position.x - width / 2
        y: handler.point.position.y - height / 2
        width: 20; height: width; radius: width / 2
    }

    PointHandler {
        id: handler
        acceptedButtons: Qt.MiddleButton | Qt.RightButton
    }
}
</db:programlisting>
<db:note>
<db:para>On a touchscreen, there are no buttons, so this property does not prevent <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> from reacting to touchpoints.</db:para>
</db:note>
</db:section>
<db:section xml:id="acceptedDevices-prop">
<db:title>acceptedDevices : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedDevices</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing devices that can activate this <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link>.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qinputdevice.xml#DeviceType-enum">PointerDevice.AllDevices</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching <db:link xlink:href="qml-qtquick-pointerdevice.xml">devices</db:link>:</db:para>
<db:programlisting language="qml">PointHandler {
    id: handler
    acceptedDevices: PointerDevice.TouchScreen | PointerDevice.TouchPad
    target: Rectangle {
        parent: glassPane
        color: &quot;red&quot;
        visible: handler.active
        x: handler.point.position.x - width / 2
        y: handler.point.position.y - height / 2
        width: 20; height: width; radius: width / 2
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="acceptedModifiers-prop">
<db:title>acceptedModifiers : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedModifiers</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set, <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> requires the given keyboard modifiers to be pressed in order to react to <db:link xlink:href="qml-qtquick-pointerevent.xml">PointerEvents</db:link>, and otherwise ignores them.</db:para>
<db:para>If this property is set to <db:code>Qt.KeyboardModifierMask</db:code> (the default value), then <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> ignores the modifier keys.</db:para>
<db:para>For example, an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> could have two handlers, one of which is enabled only if the required keyboard modifier is pressed:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: feedbackPane
    width: 480; height: 320

    PointHandler {
        id: control
        acceptedModifiers: Qt.ControlModifier
        cursorShape: Qt.PointingHandCursor
        target: Rectangle {
            parent: feedbackPane
            color: control.active ? &quot;indianred&quot; : &quot;khaki&quot;
            x: control.point.position.x - width / 2
            y: control.point.position.y - height / 2
            width: 20; height: width; radius: width / 2
        }
    }

    PointHandler {
        id: shift
        acceptedModifiers: Qt.ShiftModifier | Qt.MetaModifier
        cursorShape: Qt.CrossCursor
        target: Rectangle {
            parent: feedbackPane
            color: shift.active ? &quot;darkslateblue&quot; : &quot;lightseagreen&quot;
            x: shift.point.position.x - width / 2
            y: shift.point.position.y - height / 2
            width: 30; height: width; radius: width / 2
        }
    }
}
</db:programlisting>
<db:para>If you set <db:code>acceptedModifiers</db:code> to an OR combination of modifier keys, it means <db:emphasis>all</db:emphasis> of those modifiers must be pressed to activate the handler.</db:para>
<db:para>The available modifiers are as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoModifier</db:para>
</db:td>
<db:td>
<db:para>No modifier key is allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShiftModifier</db:para>
</db:td>
<db:td>
<db:para>A Shift key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ControlModifier</db:para>
</db:td>
<db:td>
<db:para>A Ctrl key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>AltModifier</db:para>
</db:td>
<db:td>
<db:para>An Alt key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>MetaModifier</db:para>
</db:td>
<db:td>
<db:para>A Meta key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeypadModifier</db:para>
</db:td>
<db:td>
<db:para>A keypad button must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>GroupSwitchModifier</db:para>
</db:td>
<db:td>
<db:para>X11 only (unless activated on Windows by a command line argument). A Mode_switch key on the keyboard must be pressed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>KeyboardModifierMask</db:para>
</db:td>
<db:td>
<db:para>The handler does not care which modifiers are pressed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifier</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="acceptedPointerTypes-prop">
<db:title>acceptedPointerTypes : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>acceptedPointerTypes</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The types of pointing instruments (finger, stylus, eraser, etc.) that can activate this <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link>.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qpointingdevice.xml#PointerType-enum">PointerDevice.AllPointerTypes</db:link>. If you set it to an OR combination of device types, it will ignore events from non-matching <db:link xlink:href="qml-qtquick-pointerdevice.xml">devices</db:link>:</db:para>
<db:programlisting language="qml">import QtQuick

Canvas {
    id: canvas
    width: 800
    height: 600
    antialiasing: true
    renderTarget: Canvas.FramebufferObject
    property var points: []
    onPaint: {
        if (points.length &amp;lt; 2)
            return
        var ctx = canvas.getContext('2d');
        ctx.save()
        ctx.strokeStyle = stylusHandler.active ? &quot;blue&quot; : &quot;white&quot;
        ctx.lineCap = &quot;round&quot;
        ctx.beginPath()
        ctx.moveTo(points[0].x, points[0].y)
        for (var i = 1; i &amp;lt; points.length; i++)
            ctx.lineTo(points[i].x, points[i].y)
        ctx.lineWidth = 3
        ctx.stroke()
        points = points.slice(points.length - 2, 1)
        ctx.restore()
    }

    PointHandler {
        id: stylusHandler
        acceptedPointerTypes: PointerDevice.Pen
        onPointChanged: {
            canvas.points.push(point.position)
            canvas.requestPaint()
        }
    }

    PointHandler {
        id: eraserHandler
        acceptedPointerTypes: PointerDevice.Eraser
        onPointChanged: {
            canvas.points.push(point.position)
            canvas.requestPaint()
        }
    }

    Rectangle {
        width: 10; height: 10
        color: stylusHandler.active ? &quot;green&quot; : eraserHandler.active ? &quot;red&quot; : &quot;beige&quot;
    }
}
</db:programlisting>
<db:para>The <db:link xlink:href="qtquick-pointerhandlers-example.xml">Qt Quick Examples - Pointer Handlers</db:link> includes a more complex example for drawing on a Canvas with a graphics tablet.</db:para>
</db:section>
<db:section xml:id="active-prop">
<db:title>[read-only] active : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>active</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This holds <db:code>true</db:code> whenever the constraints are satisfied and this <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> is reacting. This means that it is keeping its properties up-to-date according to the movements of the <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoints</db:link> that satisfy the constraints.</db:para>
</db:section>
<db:section xml:id="cursorShape-prop">
<db:title>cursorShape : Qt::CursorShape</db:title>
<db:fieldsynopsis>
<db:type>Qt::CursorShape</db:type>
<db:varname>cursorShape</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor shape that will appear whenever the mouse is hovering over the <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">parent</db:link> item while <db:link xlink:href="qml-qtquick-pointhandler.xml#active-prop">active</db:link> is <db:code>true</db:code>.</db:para>
<db:para>The available cursor shapes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.UpArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WaitCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IBeamCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeVerCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeHorCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeBDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeFDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeAllCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BlankCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitVCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitHCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.PointingHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ForbiddenCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WhatsThisCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BusyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.OpenHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ClosedHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragCopyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragMoveCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragLinkCursor</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default value is not set, which allows the <db:link xlink:href="qquickitem.xml#cursor">cursor</db:link> of <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">parent</db:link> item to appear. This property can be reset to the same initial condition by setting it to undefined.</db:para>
<db:note>
<db:para>When this property has not been set, or has been set to <db:code>undefined</db:code>, if you read the value it will return <db:code>Qt.ArrowCursor</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link></db:member>
<db:member><db:link xlink:href="qquickitem.xml#cursor">QQuickItem::cursor</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-hoverhandler.xml#cursorShape-prop">HoverHandler::cursorShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If a <db:link xlink:href="qml-qtquick-pointerhandler.xml">PointerHandler</db:link> is disabled, it will reject all events and no signals will be emitted.</db:para>
</db:section>
<db:section xml:id="grabPermissions-prop">
<db:title>grabPermissions : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>grabPermissions</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the permissions when this handler's logic decides to take over the exclusive grab, or when it is asked to approve grab takeover or cancellation by another handler.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerHandler.TakeOverForbidden</db:para>
</db:td>
<db:td>
<db:para>This handler neither takes from nor gives grab permission to any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from another handler of the same class.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any kind of handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromItems</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.CanTakeOverFromAnything</db:para>
</db:td>
<db:td>
<db:para>This handler can take the exclusive grab from any type of Item or Handler.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfSameType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for another handler of the same class to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByHandlersOfDifferentType</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of handler to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByItems</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any kind of Item to take the grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesCancellation</db:para>
</db:td>
<db:td>
<db:para>This handler will allow its grab to be set to null.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerHandler.ApprovesTakeOverByAnything</db:para>
</db:td>
<db:td>
<db:para>This handler gives permission for any type of Item or Handler to take the grab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>PointerHandler.CanTakeOverFromItems | PointerHandler.CanTakeOverFromHandlersOfDifferentType | PointerHandler.ApprovesTakeOverByAnything</db:code> which allows most takeover scenarios but avoids e.g. two PinchHandlers fighting over the same touchpoints.</db:para>
</db:section>
<db:section xml:id="margin-prop">
<db:title>margin : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>margin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The margin beyond the bounds of the <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">parent</db:link> item within which an <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoint</db:link> can activate this handler.</db:para>
<db:para>The default value is <db:code>0</db:code>.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    width: 480; height: 320

    Rectangle {
        anchors.fill: handlingContainer
        anchors.margins: -handler.margin
        color: &quot;beige&quot;
    }

    Rectangle {
        id: handlingContainer
        width: 200; height: 200
        anchors.centerIn: parent
        border.color: &quot;green&quot;
        color: handler.active ? &quot;lightsteelblue&quot; : &quot;khaki&quot;

        Text {
            text: &quot;X&quot;
            x: handler.point.position.x - width / 2
            y: handler.point.position.y - height / 2
            visible: handler.active
        }

        PointHandler {
            id: handler
            margin: 30
        }
    }

}
</db:programlisting>
</db:section>
<db:section xml:id="parent-prop">
<db:title>parent : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>parent</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> which is the scope of the handler; the Item in which it was declared. The handler will handle events on behalf of this Item, which means a pointer event is relevant if at least one of its <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoints</db:link> occurs within the Item's interior. Initially <db:link xlink:href="qml-qtquick-pointhandler.xml#target-prop">target()</db:link> is the same, but it can be reassigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-pointhandler.xml#target-prop">target</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#parent">QObject::parent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point-prop">
<db:title>[read-only] point : handlerPoint</db:title>
<db:fieldsynopsis>
<db:type>handlerPoint</db:type>
<db:varname>point</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The <db:link xlink:href="qml-qtquick-eventpoint.xml">eventPoint</db:link> currently being handled. When no point is currently being handled, this object is reset to default values (all coordinates are 0).</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>A property that can conveniently hold an Item to be manipulated or to show feedback. Unlike other <db:link xlink:href="qtquickhandlers-index.xml">Pointer Handlers</db:link>, <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> does not do anything with the <db:code>target</db:code> on its own: you usually need to create reactive bindings to properties such as <db:link xlink:href="qml-qtquick-pointhandler.xml#point-prop">SinglePointHandler::point</db:link> and <db:link xlink:href="qml-qtquick-pointhandler.xml#active-prop">PointHandler::active</db:link>. If you declare an Item instance here, you need to explicitly set its <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link>, because <db:link xlink:href="qml-qtquick-pointhandler.xml">PointHandler</db:link> is not an Item.</db:para>
<db:para>By default, it is the same as the <db:link xlink:href="qml-qtquick-pointhandler.xml#parent-prop">parent</db:link>, the Item within which the handler is declared.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled(eventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>If this handler has already grabbed the given <db:code role="parameter">point</db:code>, this signal is emitted when the grab is stolen by a different Pointer Handler or Item.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="grabChanged-signal">
<db:title>grabChanged(PointerDevice::GrabTransition <db:emphasis>transition</db:emphasis>, eventPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:para>This signal is emitted when the grab has changed in some way which is relevant to this handler.</db:para>
<db:para>The <db:code role="parameter">transition</db:code> (verb) tells what happened. The <db:code role="parameter">point</db:code> (object) is the point that was grabbed or ungrabbed.</db:para>
<db:para>Valid values for <db:code role="parameter">transition</db:code> are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PointerDevice.GrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler has taken primary responsibility for handling the <db:code role="parameter">point</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.UngrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler has given up its previous exclusive grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.CancelGrabExclusive</db:para>
</db:td>
<db:td>
<db:para>This handler's exclusive grab has been taken over or cancelled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.GrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler has acquired a passive grab, to monitor the <db:code role="parameter">point</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.UngrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler has given up its previous passive grab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PointerDevice.CancelGrabPassive</db:para>
</db:td>
<db:td>
<db:para>This handler's previous passive grab has terminated abnormally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The corresponding handler is <db:code>onGrabChanged</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
