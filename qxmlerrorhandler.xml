<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlErrorHandler Class</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlerrorhandler.xml">QXmlErrorHandler</db:link> class provides an interface to report errors in XML data.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlErrorHandler</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qxmldefaulthandler.xml" xlink:role="class">QXmlDefaultHandler</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlErrorHandler is part of <db:simplelist><db:member><db:link xlink:href="xml-tools.xml">XML Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If you want your application to report errors to the user or to perform customized error handling, you should subclass this class.</db:para>
<db:para>You can set the error handler with <db:link xlink:href="qxmlreader.xml#setErrorHandler">QXmlReader::setErrorHandler</db:link>().</db:para>
<db:para>Errors can be reported using <db:link xlink:href="qxmlerrorhandler.xml#warning">warning</db:link>(), <db:link xlink:href="qxmlerrorhandler.xml#error">error</db:link>() and <db:link xlink:href="qxmlerrorhandler.xml#fatalError">fatalError</db:link>(), with the error text being reported with <db:link xlink:href="qxmlerrorhandler.xml#errorString">errorString</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmldtdhandler.xml">QXmlDTDHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmldeclhandler.xml">QXmlDeclHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlcontenthandler.xml">QXmlContentHandler</db:link></db:member>
<db:member><db:link xlink:href="qxmlentityresolver.xml">QXmlEntityResolver</db:link></db:member>
<db:member><db:link xlink:href="qxmllexicalhandler.xml">QXmlLexicalHandler</db:link></db:member>
<db:member><db:link xlink:href="xml-sax.xml#introduction-to-sax2">Introduction to SAX2</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QXmlErrorHandler">
<db:title>[virtual noexcept] QXmlErrorHandler::~QXmlErrorHandler()</db:title>
<db:para>Destroys the error handler.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[pure virtual] bool QXmlErrorHandler::error(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>A reader might use this function to report a recoverable error. A recoverable error corresponds to the definiton of &quot;error&quot; in section 1.2 of the XML 1.0 specification. Details of the error are stored in <db:code role="parameter">exception</db:code>.</db:para>
<db:para>The reader must continue to provide normal parsing events after invoking this function.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlerrorhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>[pure virtual] QString QXmlErrorHandler::errorString() const</db:title>
<db:para>The reader calls this function to get an error string if any of the handler functions returns false.</db:para>
</db:section>
<db:section xml:id="fatalError">
<db:title>[pure virtual] bool QXmlErrorHandler::fatalError(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>A reader must use this function to report a non-recoverable error. Details of the error are stored in <db:code role="parameter">exception</db:code>.</db:para>
<db:para>If this function returns true the reader might try to go on parsing and reporting further errors, but no regular parsing events are reported.</db:para>
</db:section>
<db:section xml:id="warning">
<db:title>[pure virtual] bool QXmlErrorHandler::warning(const QXmlParseException &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>A reader might use this function to report a warning. Warnings are conditions that are not errors or fatal errors as defined by the XML 1.0 specification. Details of the warning are stored in <db:code role="parameter">exception</db:code>.</db:para>
<db:para>If this function returns false the reader stops parsing and reports an error. The reader uses the function <db:link xlink:href="qxmlerrorhandler.xml#errorString">errorString</db:link>() to get the error message.</db:para>
</db:section>
</db:section>
</db:article>
