<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCameraZoomControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcamerazoomcontrol.xml">QCameraZoomControl</db:link> class supplies control for optical and digital camera zoom.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCameraZoomControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCameraZoomControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The interface name of <db:link xlink:href="qcamerazoomcontrol.xml">QCameraZoomControl</db:link> is <db:code>org.qt-project.qt.camerazoomcontrol/5.0</db:code> as defined in <db:link xlink:href="qcamerazoomcontrol.xml#QCameraZoomControl_iid">QCameraZoomControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCameraZoomControl">
<db:title>[explicit protected] QCameraZoomControl::QCameraZoomControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCameraZoomControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraZoomControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a camera zoom control object with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCameraZoomControl">
<db:title>[virtual] QCameraZoomControl::~QCameraZoomControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCameraZoomControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCameraZoomControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destruct the camera zoom control object.</db:para>
</db:section>
<db:section xml:id="currentDigitalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::currentDigitalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>currentDigitalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal currentDigitalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current digital zoom value.</db:para>
</db:section>
<db:section xml:id="currentDigitalZoomChanged">
<db:title>void QCameraZoomControl::currentDigitalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentDigitalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentDigitalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the current digital <db:code role="parameter">zoom</db:code> value changed.</db:para>
</db:section>
<db:section xml:id="currentOpticalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::currentOpticalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>currentOpticalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal currentOpticalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the current optical zoom value.</db:para>
</db:section>
<db:section xml:id="currentOpticalZoomChanged">
<db:title>void QCameraZoomControl::currentOpticalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentOpticalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentOpticalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the current optical <db:code role="parameter">zoom</db:code> value changed.</db:para>
</db:section>
<db:section xml:id="maximumDigitalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::maximumDigitalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumDigitalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumDigitalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum digital zoom value, or 1.0 if digital zoom is not supported.</db:para>
</db:section>
<db:section xml:id="maximumDigitalZoomChanged">
<db:title>void QCameraZoomControl::maximumDigitalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maximumDigitalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void maximumDigitalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the maximum supported digital <db:code role="parameter">zoom</db:code> value changed.</db:para>
<db:para>The maximum supported zoom value can depend on other camera settings, like capture mode or resolution.</db:para>
</db:section>
<db:section xml:id="maximumOpticalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::maximumOpticalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>maximumOpticalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal maximumOpticalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum optical zoom value, or 1.0 if optical zoom is not supported.</db:para>
</db:section>
<db:section xml:id="maximumOpticalZoomChanged">
<db:title>void QCameraZoomControl::maximumOpticalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maximumOpticalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void maximumOpticalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the maximum supported optical <db:code role="parameter">zoom</db:code> value changed.</db:para>
<db:para>The maximum supported zoom value can depend on other camera settings, like focusing mode.</db:para>
</db:section>
<db:section xml:id="requestedDigitalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::requestedDigitalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>requestedDigitalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal requestedDigitalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the requested digital zoom value.</db:para>
</db:section>
<db:section xml:id="requestedDigitalZoomChanged">
<db:title>void QCameraZoomControl::requestedDigitalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestedDigitalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestedDigitalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the requested digital <db:code role="parameter">zoom</db:code> value changed.</db:para>
</db:section>
<db:section xml:id="requestedOpticalZoom">
<db:title>[pure virtual] qreal QCameraZoomControl::requestedOpticalZoom() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>requestedOpticalZoom</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal requestedOpticalZoom() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the requested optical zoom value.</db:para>
</db:section>
<db:section xml:id="requestedOpticalZoomChanged">
<db:title>void QCameraZoomControl::requestedOpticalZoomChanged(qreal <db:emphasis>zoom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestedOpticalZoomChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>zoom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestedOpticalZoomChanged(qreal zoom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the requested optical <db:code role="parameter">zoom</db:code> value changed.</db:para>
</db:section>
<db:section xml:id="zoomTo">
<db:title>[pure virtual] void QCameraZoomControl::zoomTo(qreal <db:emphasis>optical</db:emphasis>, qreal <db:emphasis>digital</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>zoomTo</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>optical</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>digital</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void zoomTo(qreal optical, qreal digital) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">optical</db:code> and <db:code role="parameter">digital</db:code> zoom values.</db:para>
<db:para>Zooming can be asynchronous with value changes reported with <db:link xlink:href="qcamerazoomcontrol.xml#currentDigitalZoomChanged">currentDigitalZoomChanged</db:link>() and <db:link xlink:href="qcamerazoomcontrol.xml#currentOpticalZoomChanged">currentOpticalZoomChanged</db:link>() signals.</db:para>
<db:para>The backend should expect and correctly handle frequent zoomTo() calls during zoom animations or slider movements.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QCameraZoomControl_iid">
<db:title>QCameraZoomControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QCameraZoomControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QCameraZoomControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.camerazoomcontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qcamerazoomcontrol.xml">QCameraZoomControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
