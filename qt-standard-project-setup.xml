<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_standard_project_setup</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Setup project-wide defaults to a standard arrangement.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-standard-project-setup"/>
<db:para>Setup project-wide defaults to a standard arrangement.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_standard_project_setup()
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use qt6_standard_project_setup() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>This command simplifies the task of setting up a typical Qt application. It would usually be called immediately after the first find_package(Qt6) call, normally in the top level CMakeLists.txt file and before any targets have been defined. It does the following things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The standard CMake variables CMAKE_AUTOMOC and CMAKE_AUTOUIC are set to true if they are not already defined. This enables all Qt-related autogen features by default for subsequently created targets in the current directory scope and below.</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake's <db:link xlink:href="https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html">GNUInstallDirs</db:link> module is automatically included. This defines appropriate defaults for variables like CMAKE_INSTALL_BINDIR, CMAKE_INSTALL_LIBDIR, and so on.</db:para>
</db:listitem>
<db:listitem>
<db:para>When targeting Windows, if the CMAKE_RUNTIME_OUTPUT_DIRECTORY variable is not already set, it will be set to ${CMAKE_CURRENT_BINARY_DIR}.</db:para>
</db:listitem>
<db:listitem>
<db:para>When target platforms other than Apple or Windows, CMAKE_INSTALL_RPATH will be augmented as described below.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>On platforms that support RPATH (other than Apple platforms), two values are appended to the CMAKE_INSTALL_RPATH variable by this command. $ORIGIN is appended so that libraries will find other libraries they depend on in the same directory as themselves. $ORIGIN/&lt;reldir&gt; is also appended, where &lt;reldir&gt; is the relative path from CMAKE_INSTALL_BINDIR to CMAKE_INSTALL_LIBDIR. This allows executables installed to CMAKE_INSTALL_BINDIR to find any libraries they may depend on installed to CMAKE_INSTALL_LIBDIR. Any duplicates in CMAKE_INSTALL_RPATH are removed. In practice, these two values ensure that executables and libraries will find their link-time dependencies, assuming projects install them to the default locations the <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link> command uses when no destination is explicitly provided.</db:para>
<db:para>The qt_standard_project_setup() command can effectively be disabled by setting the <db:link xlink:href="cmake-variable-qt-no-standard-project-setup.xml">QT_NO_STANDARD_PROJECT_SETUP</db:link> variable to true.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)

set_target_properties(MyApp PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

# App bundles on macOS have an .app suffix
if(APPLE)
    set(executable_path &quot;$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;.app&quot;)
else()
    set(executable_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;&quot;)
endif()

# Helper app, not necessarily built as part of this project.
qt_add_executable(HelperApp helper.cpp)
set(helper_app_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:HelperApp&amp;gt;&quot;)

# The following script must only be executed at install time
set(deploy_script &quot;${CMAKE_CURRENT_BINARY_DIR}/deploy_MyApp.cmake&quot;)

file(GENERATE OUTPUT ${deploy_script} CONTENT &quot;
# Including the file pointed to by QT_DEPLOY_SUPPORT ensures the generated
# deployment script has access to qt_deploy_runtime_dependencies()
include(\&quot;${QT_DEPLOY_SUPPORT}\&quot;)
qt_deploy_runtime_dependencies(
    EXECUTABLE \&quot;${executable_path}\&quot;
    ADDITIONAL_EXECUTABLES \&quot;${helper_app_path}\&quot;
    GENERATE_QT_CONF
    VERBOSE
)&quot;)

# Omitting RUNTIME DESTINATION will install a non-bundle target to CMAKE_INSTALL_BINDIR,
# which coincides with the default value of QT_DEPLOY_BIN_DIR used above, './bin'.
# Installing macOS bundles always requires an explicit BUNDLE DESTINATION option.
install(TARGETS MyApp HelperApp    # Install to CMAKE_INSTALL_PREFIX/bin/MyApp.exe
                                   #                           and ./binHelperApp.exe
        BUNDLE  DESTINATION .      # Install to CMAKE_INSTALL_PREFIX/MyApp.app/Contents/MacOS/MyApp
)
install(SCRIPT ${deploy_script})    # Add its runtime dependencies
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
