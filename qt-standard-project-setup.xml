<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_standard_project_setup</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Setup project-wide defaults to a standard arrangement.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Setup project-wide defaults to a standard arrangement.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_standard_project_setup(
    [REQUIRES &amp;lt;version&amp;gt;]
    [SUPPORTS_UP_TO &amp;lt;version&amp;gt;]
    [I18N_TRANSLATED_LANGUAGES &amp;lt;language...&amp;gt;]
    [I18N_SOURCE_LANGUAGE &amp;lt;language&amp;gt;]
)
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use qt6_standard_project_setup() instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>This command simplifies the task of setting up a typical Qt application. It would usually be called immediately after the first find_package(Qt6) call, normally in the top level CMakeLists.txt file and before any targets have been defined. It does the following things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The standard CMake variables CMAKE_AUTOMOC and CMAKE_AUTOUIC are set to true if they are not already defined. This enables all Qt-related autogen features by default for subsequently created targets in the current directory scope and below.</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake's <db:link xlink:href="https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html">GNUInstallDirs</db:link> module is automatically included. This defines appropriate defaults for variables like CMAKE_INSTALL_BINDIR, CMAKE_INSTALL_LIBDIR, and so on.</db:para>
</db:listitem>
<db:listitem>
<db:para>When targeting Windows, if the CMAKE_RUNTIME_OUTPUT_DIRECTORY variable is not already set, it will be set to ${CMAKE_CURRENT_BINARY_DIR}.</db:para>
</db:listitem>
<db:listitem>
<db:para>When target platforms other than Apple or Windows, CMAKE_INSTALL_RPATH will be augmented as described below.</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake's <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_gbl/USE_FOLDERS.html">USE_FOLDERS</db:link> property is set to ON, and <db:link xlink:href="cmake-global-property-qt-targets-folder.xml">QT_TARGETS_FOLDER</db:link> is set to QtInternalTargets. IDEs that support folders will display Qt-internal targets in this folder.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Since Qt 6.5, it is possible to change the default behavior of Qt's CMake API by opting in to changes from newer Qt versions. If REQUIRES is specified, all suggested changes introduced in Qt up to REQUIRES are enabled, and using an older Qt version will result in an error. If additionally SUPPORTS_UP_TO has been specified, any new changes introduced in versions up to SUPPORTS_UP_TO are also enabled (but using an older Qt version is not an error). This is similar to CMake's policy concept (compare <db:link xlink:href="https://cmake.org/cmake/help/latest/command/cmake_policy.html">cmake_policy</db:link>).</db:para>
<db:para>On platforms that support RPATH (other than Apple platforms), two values are appended to the CMAKE_INSTALL_RPATH variable by this command. $ORIGIN is appended so that libraries will find other libraries they depend on in the same directory as themselves. $ORIGIN/&lt;reldir&gt; is also appended, where &lt;reldir&gt; is the relative path from CMAKE_INSTALL_BINDIR to CMAKE_INSTALL_LIBDIR. This allows executables installed to CMAKE_INSTALL_BINDIR to find any libraries they may depend on installed to CMAKE_INSTALL_LIBDIR. Any duplicates in CMAKE_INSTALL_RPATH are removed. In practice, these two values ensure that executables and libraries will find their link-time dependencies, assuming projects install them to the default locations the <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link> command uses when no destination is explicitly provided.</db:para>
<db:para>To disable folder support for IDEs, set <db:link xlink:href="https://cmake.org/cmake/help/latest/prop_gbl/USE_FOLDERS.html">USE_FOLDERS</db:link> to OFF before or after the call to qt_standard_project_setup.</db:para>
<db:para>The qt_standard_project_setup() command can effectively be disabled by setting the <db:link xlink:href="cmake-variable-qt-no-standard-project-setup.xml">QT_NO_STANDARD_PROJECT_SETUP</db:link> variable to true.</db:para>
</db:section>
<db:section xml:id="internationalization">
<db:title>Internationalization</db:title>
<db:para>Since Qt 6.7, it is possible to specify the languages that are used for project internationalization with the I18N_TRANSLATED_LANGUAGES argument. See <db:link xlink:href="cmake-variable-qt-i18n-languages.xml">QT_I18N_TRANSLATED_LANGUAGES</db:link> for details.</db:para>
<db:para>Use I18N_SOURCE_LANGUAGE to specify the language that translatable strings are written in. By default, en is used. See <db:link xlink:href="cmake-variable-qt-i18n-native-language.xml">QT_I18N_SOURCE_LANGUAGE</db:link> for details.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)

install(TARGETS MyApp
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

qt_generate_deploy_app_script(
    TARGET MyApp
    OUTPUT_SCRIPT deploy_script
    NO_UNSUPPORTED_PLATFORM_ERROR
)
install(SCRIPT ${deploy_script})
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link></db:member>
<db:member><db:link xlink:href="qt-policy.xml">qt_policy</db:link></db:member>
<db:member><db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml#automatic-determination-of-ts-file-paths">qt_add_translations()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
