<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Line Edits Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Line Edits example demonstrates the many ways that QLineEdit can be used, and shows the effects of various properties and validators on the input and output supplied by the user.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;window.h&quot;

Window::Window()
{
    QGroupBox *echoGroup = new QGroupBox(tr(&quot;Echo&quot;));

    QLabel *echoLabel = new QLabel(tr(&quot;Mode:&quot;));
    QComboBox *echoComboBox = new QComboBox;
    echoComboBox-&gt;addItem(tr(&quot;Normal&quot;));
    echoComboBox-&gt;addItem(tr(&quot;Password&quot;));
    echoComboBox-&gt;addItem(tr(&quot;PasswordEchoOnEdit&quot;));
    echoComboBox-&gt;addItem(tr(&quot;No Echo&quot;));

    echoLineEdit = new QLineEdit;
    echoLineEdit-&gt;setPlaceholderText(&quot;Placeholder Text&quot;);
    echoLineEdit-&gt;setFocus();

    QGroupBox *validatorGroup = new QGroupBox(tr(&quot;Validator&quot;));

    QLabel *validatorLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *validatorComboBox = new QComboBox;
    validatorComboBox-&gt;addItem(tr(&quot;No validator&quot;));
    validatorComboBox-&gt;addItem(tr(&quot;Integer validator&quot;));
    validatorComboBox-&gt;addItem(tr(&quot;Double validator&quot;));

    validatorLineEdit = new QLineEdit;
    validatorLineEdit-&gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *alignmentGroup = new QGroupBox(tr(&quot;Alignment&quot;));

    QLabel *alignmentLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *alignmentComboBox = new QComboBox;
    alignmentComboBox-&gt;addItem(tr(&quot;Left&quot;));
    alignmentComboBox-&gt;addItem(tr(&quot;Centered&quot;));
    alignmentComboBox-&gt;addItem(tr(&quot;Right&quot;));

    alignmentLineEdit = new QLineEdit;
    alignmentLineEdit-&gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *inputMaskGroup = new QGroupBox(tr(&quot;Input mask&quot;));

    QLabel *inputMaskLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *inputMaskComboBox = new QComboBox;
    inputMaskComboBox-&gt;addItem(tr(&quot;No mask&quot;));
    inputMaskComboBox-&gt;addItem(tr(&quot;Phone number&quot;));
    inputMaskComboBox-&gt;addItem(tr(&quot;ISO date&quot;));
    inputMaskComboBox-&gt;addItem(tr(&quot;License key&quot;));

    inputMaskLineEdit = new QLineEdit;
    inputMaskLineEdit-&gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    QGroupBox *accessGroup = new QGroupBox(tr(&quot;Access&quot;));

    QLabel *accessLabel = new QLabel(tr(&quot;Read-only:&quot;));
    QComboBox *accessComboBox = new QComboBox;
    accessComboBox-&gt;addItem(tr(&quot;False&quot;));
    accessComboBox-&gt;addItem(tr(&quot;True&quot;));

    accessLineEdit = new QLineEdit;
    accessLineEdit-&gt;setPlaceholderText(&quot;Placeholder Text&quot;);

    connect(echoComboBox, SIGNAL(activated(int)),
            this, SLOT(echoChanged(int)));
    connect(validatorComboBox, SIGNAL(activated(int)),
            this, SLOT(validatorChanged(int)));
    connect(alignmentComboBox, SIGNAL(activated(int)),
            this, SLOT(alignmentChanged(int)));
    connect(inputMaskComboBox, SIGNAL(activated(int)),
            this, SLOT(inputMaskChanged(int)));
    connect(accessComboBox, SIGNAL(activated(int)),
            this, SLOT(accessChanged(int)));

    QGridLayout *echoLayout = new QGridLayout;
    echoLayout-&gt;addWidget(echoLabel, 0, 0);
    echoLayout-&gt;addWidget(echoComboBox, 0, 1);
    echoLayout-&gt;addWidget(echoLineEdit, 1, 0, 1, 2);
    echoGroup-&gt;setLayout(echoLayout);

    QGridLayout *validatorLayout = new QGridLayout;
    validatorLayout-&gt;addWidget(validatorLabel, 0, 0);
    validatorLayout-&gt;addWidget(validatorComboBox, 0, 1);
    validatorLayout-&gt;addWidget(validatorLineEdit, 1, 0, 1, 2);
    validatorGroup-&gt;setLayout(validatorLayout);

    QGridLayout *alignmentLayout = new QGridLayout;
    alignmentLayout-&gt;addWidget(alignmentLabel, 0, 0);
    alignmentLayout-&gt;addWidget(alignmentComboBox, 0, 1);
    alignmentLayout-&gt;addWidget(alignmentLineEdit, 1, 0, 1, 2);
    alignmentGroup-&gt; setLayout(alignmentLayout);

    QGridLayout *inputMaskLayout = new QGridLayout;
    inputMaskLayout-&gt;addWidget(inputMaskLabel, 0, 0);
    inputMaskLayout-&gt;addWidget(inputMaskComboBox, 0, 1);
    inputMaskLayout-&gt;addWidget(inputMaskLineEdit, 1, 0, 1, 2);
    inputMaskGroup-&gt;setLayout(inputMaskLayout);

    QGridLayout *accessLayout = new QGridLayout;
    accessLayout-&gt;addWidget(accessLabel, 0, 0);
    accessLayout-&gt;addWidget(accessComboBox, 0, 1);
    accessLayout-&gt;addWidget(accessLineEdit, 1, 0, 1, 2);
    accessGroup-&gt;setLayout(accessLayout);

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(echoGroup, 0, 0);
    layout-&gt;addWidget(validatorGroup, 1, 0);
    layout-&gt;addWidget(alignmentGroup, 2, 0);
    layout-&gt;addWidget(inputMaskGroup, 0, 1);
    layout-&gt;addWidget(accessGroup, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Line Edits&quot;));
}

void Window::echoChanged(int index)
{
    switch (index) {
    case 0:
        echoLineEdit-&gt;setEchoMode(QLineEdit::Normal);
        break;
    case 1:
        echoLineEdit-&gt;setEchoMode(QLineEdit::Password);
        break;
    case 2:
        echoLineEdit-&gt;setEchoMode(QLineEdit::PasswordEchoOnEdit);
        break;
    case 3:
        echoLineEdit-&gt;setEchoMode(QLineEdit::NoEcho);
    }
}

void Window::validatorChanged(int index)
{
    switch (index) {
    case 0:
        validatorLineEdit-&gt;setValidator(0);
        break;
    case 1:
        validatorLineEdit-&gt;setValidator(new QIntValidator(
            validatorLineEdit));
        break;
    case 2:
        validatorLineEdit-&gt;setValidator(new QDoubleValidator(-999.0,
            999.0, 2, validatorLineEdit));
    }

    validatorLineEdit-&gt;clear();
}

void Window::alignmentChanged(int index)
{
    switch (index) {
    case 0:
        alignmentLineEdit-&gt;setAlignment(Qt::AlignLeft);
        break;
    case 1:
        alignmentLineEdit-&gt;setAlignment(Qt::AlignCenter);
        break;
    case 2:
        alignmentLineEdit-&gt;setAlignment(Qt::AlignRight);
    }
}

void Window::inputMaskChanged(int index)
{
    switch (index) {
    case 0:
        inputMaskLineEdit-&gt;setInputMask(&quot;&quot;);
        break;
    case 1:
        inputMaskLineEdit-&gt;setInputMask(&quot;+99 99 99 99 99;_&quot;);
        break;
    case 2:
        inputMaskLineEdit-&gt;setInputMask(&quot;0000-00-00&quot;);
        inputMaskLineEdit-&gt;setText(&quot;00000000&quot;);
        inputMaskLineEdit-&gt;setCursorPosition(0);
        break;
    case 3:
        inputMaskLineEdit-&gt;setInputMask(&quot;&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&quot;);
    }
}

void Window::accessChanged(int index)
{
    switch (index) {
    case 0:
        accessLineEdit-&gt;setReadOnly(false);
        break;
    case 1:
        accessLineEdit-&gt;setReadOnly(true);
    }
}

</db:programlisting>
</db:article>
