<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DTLS client</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates how to implement client-side DTLS connections.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtCore&amp;gt;
#include &amp;lt;QtNetwork&amp;gt;

#include &quot;addressdialog.h&quot;
#include &quot;association.h&quot;
#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;

#include &amp;lt;utility&amp;gt;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
      ui(new Ui::MainWindow),
      nameTemplate(QStringLiteral(&quot;Alice (clone number %1)&quot;))
{
    ui-&amp;gt;setupUi(this);
    updateUi();
}

MainWindow::~MainWindow()
{
    delete ui;
}


const QString colorizer(QStringLiteral(&quot;&amp;lt;font color=\&quot;%1\&quot;&amp;gt;%2&amp;lt;/font&amp;gt;&amp;lt;br&amp;gt;&quot;));

void MainWindow::addErrorMessage(const QString &amp;amp;message)
{
    ui-&amp;gt;clientMessages-&amp;gt;insertHtml(colorizer.arg(QStringLiteral(&quot;Crimson&quot;), message));
}

void MainWindow::addWarningMessage(const QString &amp;amp;message)
{
    ui-&amp;gt;clientMessages-&amp;gt;insertHtml(colorizer.arg(QStringLiteral(&quot;DarkOrange&quot;), message));
}

void MainWindow::addInfoMessage(const QString &amp;amp;message)
{
    ui-&amp;gt;clientMessages-&amp;gt;insertHtml(colorizer.arg(QStringLiteral(&quot;DarkBlue&quot;), message));
}

void MainWindow::addServerResponse(const QString &amp;amp;clientInfo, const QByteArray &amp;amp;datagram,
                                   const QByteArray &amp;amp;plainText)
{
    static const QString messageColor = QStringLiteral(&quot;DarkMagenta&quot;);
    static const QString formatter = QStringLiteral(&quot;&amp;lt;br&amp;gt;---------------&quot;
                                                    &quot;&amp;lt;br&amp;gt;%1 received a DTLS datagram:&amp;lt;br&amp;gt; %2&quot;
                                                    &quot;&amp;lt;br&amp;gt;As plain text:&amp;lt;br&amp;gt; %3&quot;);

    const QString html = formatter.arg(clientInfo, QString::fromUtf8(datagram.toHex(' ')),
                                       QString::fromUtf8(plainText));
    ui-&amp;gt;serverMessages-&amp;gt;insertHtml(colorizer.arg(messageColor, html));
}


void MainWindow::on_connectButton_clicked()
{
    if (lookupId != -1) {
        QHostInfo::abortHostLookup(lookupId);
        lookupId = -1;
        port = 0;
        updateUi();
        return;
    }

    AddressDialog dialog;
    if (dialog.exec() != QDialog::Accepted)
        return;

    const QString hostName = dialog.remoteName();
    if (hostName.isEmpty())
        return addWarningMessage(tr(&quot;Host name or address required to connect&quot;));

    port = dialog.remotePort();
    QHostAddress remoteAddress;
    if (remoteAddress.setAddress(hostName))
        return startNewConnection(remoteAddress);

    addInfoMessage(tr(&quot;Looking up the host ...&quot;));
    lookupId = QHostInfo::lookupHost(hostName, this, SLOT(lookupFinished(QHostInfo)));
    updateUi();
}

void MainWindow::updateUi()
{
    ui-&amp;gt;connectButton-&amp;gt;setText(lookupId == -1 ? tr(&quot;Connect ...&quot;) : tr(&quot;Cancel lookup&quot;));
    ui-&amp;gt;shutdownButton-&amp;gt;setEnabled(connections.size() != 0);
}

void MainWindow::lookupFinished(const QHostInfo &amp;amp;hostInfo)
{
    if (hostInfo.lookupId() != lookupId)
        return;

    lookupId = -1;
    updateUi();

    if (hostInfo.error() != QHostInfo::NoError) {
        addErrorMessage(hostInfo.errorString());
        return;
    }

    const QList&amp;lt;QHostAddress&amp;gt; foundAddresses = hostInfo.addresses();
    if (foundAddresses.empty()) {
        addWarningMessage(tr(&quot;Host not found&quot;));
        return;
    }

    const auto remoteAddress = foundAddresses.at(0);
    addInfoMessage(tr(&quot;Connecting to: %1&quot;).arg(remoteAddress.toString()));
    startNewConnection(remoteAddress);
}

void MainWindow::startNewConnection(const QHostAddress &amp;amp;address)
{
    AssocPtr newConnection(new DtlsAssociation(address, port, nameTemplate.arg(nextId)));
    connect(newConnection.data(), &amp;amp;DtlsAssociation::errorMessage, this, &amp;amp;MainWindow::addErrorMessage);
    connect(newConnection.data(), &amp;amp;DtlsAssociation::warningMessage, this, &amp;amp;MainWindow::addWarningMessage);
    connect(newConnection.data(), &amp;amp;DtlsAssociation::infoMessage, this, &amp;amp;MainWindow::addInfoMessage);
    connect(newConnection.data(), &amp;amp;DtlsAssociation::serverResponse, this, &amp;amp;MainWindow::addServerResponse);
    connections.push_back(std::move(newConnection));
    connections.back()-&amp;gt;startHandshake();
    updateUi();

    ++nextId;
}

void MainWindow::on_shutdownButton_clicked()
{
    connections.clear();
    updateUi();
}

</db:programlisting>
</db:article>
