<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tree Model Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tree Model Completer example shows how to provide completion facilities for a hierarchical model, using a period as the separator to access Child, GrandChild and GrandGrandChild level objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;
#include &quot;treemodelcompleter.h&quot;
#include &quot;mainwindow.h&quot;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), completer(0), lineEdit(0)
{
    createMenu();

    completer = new TreeModelCompleter(this);
    completer-&amp;gt;setModel(modelFromFile(&quot;:/resources/treemodel.txt&quot;));
    completer-&amp;gt;setSeparator(QLatin1String(&quot;.&quot;));
    QObject::connect(completer, SIGNAL(highlighted(QModelIndex)),
                     this, SLOT(highlight(QModelIndex)));

    QWidget *centralWidget = new QWidget;

    QLabel *modelLabel = new QLabel;
    modelLabel-&amp;gt;setText(tr(&quot;Tree Model&amp;lt;br&amp;gt;(Double click items to edit)&quot;));

    QLabel *modeLabel = new QLabel;
    modeLabel-&amp;gt;setText(tr(&quot;Completion Mode&quot;));
    modeCombo = new QComboBox;
    modeCombo-&amp;gt;addItem(tr(&quot;Inline&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Filtered Popup&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Unfiltered Popup&quot;));
    modeCombo-&amp;gt;setCurrentIndex(1);

    QLabel *caseLabel = new QLabel;
    caseLabel-&amp;gt;setText(tr(&quot;Case Sensitivity&quot;));
    caseCombo = new QComboBox;
    caseCombo-&amp;gt;addItem(tr(&quot;Case Insensitive&quot;));
    caseCombo-&amp;gt;addItem(tr(&quot;Case Sensitive&quot;));
    caseCombo-&amp;gt;setCurrentIndex(0);

    QLabel *separatorLabel = new QLabel;
    separatorLabel-&amp;gt;setText(tr(&quot;Tree Separator&quot;));

    QLineEdit *separatorLineEdit = new QLineEdit;
    separatorLineEdit-&amp;gt;setText(completer-&amp;gt;separator());
    connect(separatorLineEdit, SIGNAL(textChanged(QString)),
            completer, SLOT(setSeparator(QString)));

    QCheckBox *wrapCheckBox = new QCheckBox;
    wrapCheckBox-&amp;gt;setText(tr(&quot;Wrap around completions&quot;));
    wrapCheckBox-&amp;gt;setChecked(completer-&amp;gt;wrapAround());
    connect(wrapCheckBox, SIGNAL(clicked(bool)), completer, SLOT(setWrapAround(bool)));

    contentsLabel = new QLabel;
    contentsLabel-&amp;gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    connect(separatorLineEdit, SIGNAL(textChanged(QString)),
            this, SLOT(updateContentsLabel(QString)));

    treeView = new QTreeView;
    treeView-&amp;gt;setModel(completer-&amp;gt;model());
    treeView-&amp;gt;header()-&amp;gt;hide();
    treeView-&amp;gt;expandAll();

    connect(modeCombo, SIGNAL(activated(int)), this, SLOT(changeMode(int)));
    connect(caseCombo, SIGNAL(activated(int)), this, SLOT(changeCase(int)));

    lineEdit = new QLineEdit;
    lineEdit-&amp;gt;setCompleter(completer);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(modelLabel, 0, 0); layout-&amp;gt;addWidget(treeView, 0, 1);
    layout-&amp;gt;addWidget(modeLabel, 1, 0);  layout-&amp;gt;addWidget(modeCombo, 1, 1);
    layout-&amp;gt;addWidget(caseLabel, 2, 0);  layout-&amp;gt;addWidget(caseCombo, 2, 1);
    layout-&amp;gt;addWidget(separatorLabel, 3, 0); layout-&amp;gt;addWidget(separatorLineEdit, 3, 1);
    layout-&amp;gt;addWidget(wrapCheckBox, 4, 0);
    layout-&amp;gt;addWidget(contentsLabel, 5, 0, 1, 2);
    layout-&amp;gt;addWidget(lineEdit, 6, 0, 1, 2);
    centralWidget-&amp;gt;setLayout(layout);
    setCentralWidget(centralWidget);

    changeCase(caseCombo-&amp;gt;currentIndex());
    changeMode(modeCombo-&amp;gt;currentIndex());

    setWindowTitle(tr(&quot;Tree Model Completer&quot;));
    lineEdit-&amp;gt;setFocus();
}

void MainWindow::createMenu()
{
    QAction *exitAction = new QAction(tr(&quot;Exit&quot;), this);
    QAction *aboutAct = new QAction(tr(&quot;About&quot;), this);
    QAction *aboutQtAct = new QAction(tr(&quot;About Qt&quot;), this);

    connect(exitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

    QMenu* fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&amp;gt;addAction(exitAction);

    QMenu* helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;About&quot;));
    helpMenu-&amp;gt;addAction(aboutAct);
    helpMenu-&amp;gt;addAction(aboutQtAct);
}

void MainWindow::changeMode(int index)
{
    QCompleter::CompletionMode mode;
    if (index == 0)
        mode = QCompleter::InlineCompletion;
    else if (index == 1)
        mode = QCompleter::PopupCompletion;
    else
        mode = QCompleter::UnfilteredPopupCompletion;

    completer-&amp;gt;setCompletionMode(mode);
}

QAbstractItemModel *MainWindow::modelFromFile(const QString&amp;amp; fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly))
        return new QStringListModel(completer);

#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(QCursor(Qt::WaitCursor));
#endif
    QStringList words;

    QStandardItemModel *model = new QStandardItemModel(completer);
    QVector&amp;lt;QStandardItem *&amp;gt; parents(10);
    parents[0] = model-&amp;gt;invisibleRootItem();

    while (!file.atEnd()) {
        QString line = file.readLine();
        QString trimmedLine = line.trimmed();
        if (line.isEmpty() || trimmedLine.isEmpty())
            continue;

        QRegularExpression re(&quot;^\\s+&quot;);
        QRegularExpressionMatch match = re.match(line);
        int nonws = match.capturedStart();
        int level = 0;
        if (nonws == -1) {
            level = 0;
        } else {
            if (line.startsWith(&quot;\t&quot;)) {
                level = match.capturedLength();
            } else {
                level = match.capturedLength()/4;
            }
        }

        if (level+1 &amp;gt;= parents.size())
            parents.resize(parents.size()*2);

        QStandardItem *item = new QStandardItem;
        item-&amp;gt;setText(trimmedLine);
        parents[level]-&amp;gt;appendRow(item);
        parents[level+1] = item;
    }

#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    return model;
}

void MainWindow::highlight(const QModelIndex &amp;amp;index)
{
    QAbstractItemModel *completionModel = completer-&amp;gt;completionModel();
    QAbstractProxyModel *proxy = qobject_cast&amp;lt;QAbstractProxyModel *&amp;gt;(completionModel);
    if (!proxy)
        return;
    QModelIndex sourceIndex = proxy-&amp;gt;mapToSource(index);
    treeView-&amp;gt;selectionModel()-&amp;gt;select(sourceIndex, QItemSelectionModel::ClearAndSelect | QItemSelectionModel::Rows);
    treeView-&amp;gt;scrollTo(sourceIndex);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;This example demonstrates how &quot;
        &quot;to use a QCompleter with a custom tree model.&quot;));
}

void MainWindow::changeCase(int cs)
{
    completer-&amp;gt;setCaseSensitivity(cs ? Qt::CaseSensitive : Qt::CaseInsensitive);
}

void MainWindow::updateContentsLabel(const QString&amp;amp; sep)
{
    contentsLabel-&amp;gt;setText(tr(&quot;Type path from model above with items at each level separated by a '%1'&quot;).arg(sep));
}

</db:programlisting>
</db:article>
