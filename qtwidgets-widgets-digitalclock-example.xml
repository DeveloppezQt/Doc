<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Digital Clock Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Digital Clock example shows how to use QLCDNumber to display a number with LCD-like digits.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:figure>
<db:title>Screenshot of the Digital Clock example</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/digitalclock-example.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>This example also demonstrates how QTimer can be used to update a widget at regular intervals.</db:para>
<db:section xml:id="digitalclock-class-definition">
<db:title>DigitalClock Class Definition</db:title>
<db:para>The <db:code>DigitalClock</db:code> class provides a clock widget showing the time with hours and minutes separated by a blinking colon. We subclass QLCDNumber and implement a private slot called <db:code>showTime()</db:code> to update the clock display:</db:para>
<db:programlisting language="cpp">class DigitalClock : public QLCDNumber
{
    Q_OBJECT

public:
    DigitalClock(QWidget *parent = nullptr);

private slots:
    void showTime();
};
</db:programlisting>
</db:section>
<db:section xml:id="digitalclock-class-implementation">
<db:title>DigitalClock Class Implementation</db:title>
<db:programlisting language="cpp">DigitalClock::DigitalClock(QWidget *parent)
    : QLCDNumber(parent)
{
    setSegmentStyle(Filled);

    QTimer *timer = new QTimer(this);
    connect(timer, &amp;amp;QTimer::timeout, this, &amp;amp;DigitalClock::showTime);
    timer-&amp;gt;start(1000);

    showTime();

    setWindowTitle(tr(&quot;Digital Clock&quot;));
    resize(150, 60);
}
</db:programlisting>
<db:para>In the constructor, we first change the look of the LCD numbers. The QLCDNumber::Filled style produces raised segments filled with the foreground color (typically black). We also set up a one-second timer to keep track of the current time, and we connect its <db:link xlink:href="">timeout()</db:link> signal to the private <db:code>showTime()</db:code> slot so that the display is updated every second. Then, we call the <db:code>showTime()</db:code> slot; without this call, there would be a one-second delay at startup before the time is shown.</db:para>
<db:programlisting language="cpp">void DigitalClock::showTime()
{
    QTime time = QTime::currentTime();
    QString text = time.toString(&quot;hh:mm&quot;);
    if ((time.second() % 2) == 0)
        text[2] = ' ';
    display(text);
}
</db:programlisting>
<db:para>The <db:code>showTime()</db:code> slot is called whenever the clock display needs to be updated.</db:para>
<db:para>The current time is converted into a string with the format &quot;hh:mm&quot;. When QTime::second() is a even number, the colon in the string is replaced with a space. This makes the colon appear and vanish every other second.</db:para>
<db:para>Finally, we call QLCDNumber::display() to update the widget.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/digitalclock?h=5.13">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
