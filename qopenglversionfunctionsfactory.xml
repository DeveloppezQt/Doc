<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLVersionFunctionsFactory Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to OpenGL functions for a specified version and profile.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLVersionFunctionsFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="get">
<db:title>[static] QAbstractOpenGLFunctions *QOpenGLVersionFunctionsFactory::get(const QOpenGLVersionProfile &amp;<db:emphasis>versionProfile</db:emphasis> = QOpenGLVersionProfile(), QOpenGLContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QAbstractOpenGLFunctions *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>const QOpenGLVersionProfile &amp;</db:type>
<db:parameter>versionProfile</db:parameter>
<db:initializer>QOpenGLVersionProfile()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractOpenGLFunctions * get(const QOpenGLVersionProfile &amp;versionProfile, QOpenGLContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to an object that provides access to all functions for the <db:code role="parameter">versionProfile</db:code> of the <db:code role="parameter">context</db:code>. There is no need to call QAbstractOpenGLFunctions::initializeOpenGLFunctions() as long as the <db:code role="parameter">context</db:code> is current. It is also possible to call this function when the <db:code role="parameter">context</db:code> is not current, but in that case it is the caller's responsibility to ensure proper initialization by calling QAbstractOpenGLFunctions::initializeOpenGLFunctions() afterwards.</db:para>
<db:para>Usually one would use the template version of this function to automatically have the result cast to the correct type.</db:para>
</db:section>
<db:section xml:id="get-1">
<db:title>[static] TYPE *QOpenGLVersionFunctionsFactory::get(QOpenGLContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>TYPE *</db:type>
<db:methodname>get</db:methodname>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">TYPE * get(QOpenGLContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qopenglversionfunctionsfactory.xml#get">get</db:link>().</db:para>
<db:para>Returns a pointer to an object that provides access to all functions for the version and profile of this context. There is no need to call QAbstractOpenGLFunctions::initializeOpenGLFunctions() as long as the <db:code role="parameter">context</db:code> is current. It is also possible to call this function when the <db:code role="parameter">context</db:code> is not current, but in that case it is the caller's responsibility to ensure proper initialization by calling QAbstractOpenGLFunctions::initializeOpenGLFunctions() afterwards.</db:para>
<db:para>Usually one would use the template version of this function to automatically have the result cast to the correct type.</db:para>
<db:programlisting language="cpp">auto funcs = QOpenGLVersionFunctionsFactory::get&amp;lt;QOpenGLFunctions_3_3_Core&amp;gt;(context);
if (!funcs) {
    qFatal(&quot;Could not obtain required OpenGL context version&quot;);
}
</db:programlisting>
<db:para>It is possible to request a functions object for a different version and profile than that for which the context was created. To do this either use the template version of this function specifying the desired functions object type as the template parameter or by passing in a <db:link xlink:href="qopenglversionprofile.xml">QOpenGLVersionProfile</db:link> object as an argument to the non-template function.</db:para>
<db:para>Note that requests for function objects of other versions or profiles can fail and in doing so will return <db:code>nullptr</db:code>. Situations in which creation of the functions object can fail are if the request cannot be satisfied due to asking for functions that are not in the version or profile of this context. For example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Requesting a 3.3 core profile functions object would succeed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Requesting a 3.3 compatibility profile functions object would fail. We would fail to resolve the deprecated functions.</db:para>
</db:listitem>
<db:listitem>
<db:para>Requesting a 4.3 core profile functions object would fail. We would fail to resolve the new core functions introduced in versions 4.0-4.3.</db:para>
</db:listitem>
<db:listitem>
<db:para>Requesting a 3.1 functions object would succeed. There is nothing in 3.1 that is not also in 3.3 core.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Note that if creating a functions object via this method that the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> retains ownership of the object. This is to allow the object to be cached and shared.</db:para>
</db:section>
</db:section>
</db:article>
