<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Group Box Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Group Box example shows how to use the different kinds of group boxes in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Group boxes are container widgets that organize buttons into groups, both logically and on screen. They manage the interactions between the user and the application so that you do not have to enforce simple constraints.</db:para>
<db:para>Group boxes are usually used to organize check boxes and radio buttons into exclusive groups.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/groupbox-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Group Boxes example consists of a single Window class that is used to show four group boxes: an exclusive radio button group, a non-exclusive checkbox group, an exclusive radio button group with an enabling checkbox, and a group box with normal push buttons.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The Window class is a subclass of QWidget that is used to display a number of group boxes. The class definition contains functions to construct each group box and populate it with different selections of button widgets:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window(QWidget *parent = nullptr);

private:
    QGroupBox *createFirstExclusiveGroup();
    QGroupBox *createSecondExclusiveGroup();
    QGroupBox *createNonExclusiveGroup();
    QGroupBox *createPushButtonGroup();
};
</db:programlisting>
<db:para>In the example, the widget will be used as a top-level window, so the constructor is defined so that we do not have to specify a parent widget.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The constructor creates a grid layout and fills it with each of the group boxes that are to be displayed:</db:para>
<db:programlisting language="cpp">Window::Window(QWidget *parent)
    : QWidget(parent)
{
    QGridLayout *grid = new QGridLayout;
    grid-&amp;gt;addWidget(createFirstExclusiveGroup(), 0, 0);
    grid-&amp;gt;addWidget(createSecondExclusiveGroup(), 1, 0);
    grid-&amp;gt;addWidget(createNonExclusiveGroup(), 0, 1);
    grid-&amp;gt;addWidget(createPushButtonGroup(), 1, 1);
    setLayout(grid);

    setWindowTitle(tr(&quot;Group Boxes&quot;));
    resize(480, 320);
}
</db:programlisting>
<db:para>The functions used to create each group box each return a <db:link xlink:href="qgroupbox.xml">QGroupBox</db:link> to be inserted into the grid layout.</db:para>
<db:programlisting language="cpp">QGroupBox *Window::createFirstExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;Exclusive Radio Buttons&quot;));

    QRadioButton *radio1 = new QRadioButton(tr(&quot;&amp;amp;Radio button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;R&amp;amp;adio button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Ra&amp;amp;dio button 3&quot;));

    radio1-&amp;gt;setChecked(true);
</db:programlisting>
<db:para>The first group box contains and manages three radio buttons. Since the group box contains only radio buttons, it is exclusive by default, so only one radio button can be checked at any given time. We check the first radio button to ensure that the button group contains one checked button.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&amp;gt;addWidget(radio1);
    vbox-&amp;gt;addWidget(radio2);
    vbox-&amp;gt;addWidget(radio3);
    vbox-&amp;gt;addStretch(1);
    groupBox-&amp;gt;setLayout(vbox);

    return groupBox;
}
</db:programlisting>
<db:para>We use a vertical layout within the group box to present the buttons in the form of a vertical list, and return the group box to the constructor.</db:para>
<db:para>The second group box is itself checkable, providing a convenient way to disable all the buttons inside it. Initially, it is unchecked, so the group box itself must be checked before any of the radio buttons inside can be checked.</db:para>
<db:programlisting language="cpp">QGroupBox *Window::createSecondExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;E&amp;amp;xclusive Radio Buttons&quot;));
    groupBox-&amp;gt;setCheckable(true);
    groupBox-&amp;gt;setChecked(false);
</db:programlisting>
<db:para>The group box contains three exclusive radio buttons, and an independent checkbox. For consistency, one radio button must be checked at all times, so we ensure that the first one is initially checked.</db:para>
<db:programlisting language="cpp">    QRadioButton *radio1 = new QRadioButton(tr(&quot;Rad&amp;amp;io button 1&quot;));
    QRadioButton *radio2 = new QRadioButton(tr(&quot;Radi&amp;amp;o button 2&quot;));
    QRadioButton *radio3 = new QRadioButton(tr(&quot;Radio &amp;amp;button 3&quot;));
    radio1-&amp;gt;setChecked(true);
    QCheckBox *checkBox = new QCheckBox(tr(&quot;Ind&amp;amp;ependent checkbox&quot;));
    checkBox-&amp;gt;setChecked(true);
</db:programlisting>
<db:para>The buttons are arranged in the same way as those in the first group box.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&amp;gt;addWidget(radio1);
    vbox-&amp;gt;addWidget(radio2);
    vbox-&amp;gt;addWidget(radio3);
    vbox-&amp;gt;addWidget(checkBox);
    vbox-&amp;gt;addStretch(1);
    groupBox-&amp;gt;setLayout(vbox);

    return groupBox;
}
</db:programlisting>
<db:para>The third group box is constructed with a &quot;flat&quot; style that is better suited to certain types of dialog.</db:para>
<db:programlisting language="cpp">QGroupBox *Window::createNonExclusiveGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;Non-Exclusive Checkboxes&quot;));
    groupBox-&amp;gt;setFlat(true);
</db:programlisting>
<db:para>This group box contains only checkboxes, so it is non-exclusive by default. This means that each checkbox can be checked independently of the others.</db:para>
<db:programlisting language="cpp">    QCheckBox *checkBox1 = new QCheckBox(tr(&quot;&amp;amp;Checkbox 1&quot;));
    QCheckBox *checkBox2 = new QCheckBox(tr(&quot;C&amp;amp;heckbox 2&quot;));
    checkBox2-&amp;gt;setChecked(true);
    QCheckBox *tristateBox = new QCheckBox(tr(&quot;Tri-&amp;amp;state button&quot;));
    tristateBox-&amp;gt;setTristate(true);
</db:programlisting>
<db:para>Again, we use a vertical layout within the group box to present the buttons in the form of a vertical list.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&amp;gt;addWidget(checkBox1);
    vbox-&amp;gt;addWidget(checkBox2);
    vbox-&amp;gt;addWidget(tristateBox);
    vbox-&amp;gt;addStretch(1);
    groupBox-&amp;gt;setLayout(vbox);

    return groupBox;
}
</db:programlisting>
<db:para>The final group box contains only push buttons and, like the second group box, it is checkable.</db:para>
<db:programlisting language="cpp">QGroupBox *Window::createPushButtonGroup()
{
    QGroupBox *groupBox = new QGroupBox(tr(&quot;&amp;amp;Push Buttons&quot;));
    groupBox-&amp;gt;setCheckable(true);
    groupBox-&amp;gt;setChecked(true);
</db:programlisting>
<db:para>We create a normal button, a toggle button, and a flat push button:</db:para>
<db:programlisting language="cpp">    QPushButton *pushButton = new QPushButton(tr(&quot;&amp;amp;Normal Button&quot;));
    QPushButton *toggleButton = new QPushButton(tr(&quot;&amp;amp;Toggle Button&quot;));
    toggleButton-&amp;gt;setCheckable(true);
    toggleButton-&amp;gt;setChecked(true);
    QPushButton *flatButton = new QPushButton(tr(&quot;&amp;amp;Flat Button&quot;));
    flatButton-&amp;gt;setFlat(true);
</db:programlisting>
<db:para>Push buttons can be used to display popup menus. We create one, and attach a simple menu to it:</db:para>
<db:programlisting language="cpp">    QPushButton *popupButton = new QPushButton(tr(&quot;Pop&amp;amp;up Button&quot;));
    QMenu *menu = new QMenu(this);
    menu-&amp;gt;addAction(tr(&quot;&amp;amp;First Item&quot;));
    menu-&amp;gt;addAction(tr(&quot;&amp;amp;Second Item&quot;));
    menu-&amp;gt;addAction(tr(&quot;&amp;amp;Third Item&quot;));
    menu-&amp;gt;addAction(tr(&quot;F&amp;amp;ourth Item&quot;));
    popupButton-&amp;gt;setMenu(menu);
</db:programlisting>
<db:para>Finally, we lay out the widgets vertically, and return the group box that we created:</db:para>
<db:programlisting language="cpp">    QVBoxLayout *vbox = new QVBoxLayout;
    vbox-&amp;gt;addWidget(pushButton);
    vbox-&amp;gt;addWidget(toggleButton);
    vbox-&amp;gt;addWidget(flatButton);
    vbox-&amp;gt;addWidget(popupButton);
    vbox-&amp;gt;addStretch(1);
    groupBox-&amp;gt;setLayout(vbox);

    return groupBox;
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/groupbox?h=6.0">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
