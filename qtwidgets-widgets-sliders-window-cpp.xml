<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sliders Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Sliders example shows how to use the different types of sliders available in Qt: <db:link xlink:href="qslider.xml">QSlider</db:link>, <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link> and <db:link xlink:href="qdial.xml">QDial</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;slidersgroup.h&quot;
#include &quot;window.h&quot;

Window::Window()
{
    horizontalSliders = new SlidersGroup(Qt::Horizontal, tr(&quot;Horizontal&quot;));
    verticalSliders = new SlidersGroup(Qt::Vertical, tr(&quot;Vertical&quot;));

    stackedWidget = new QStackedWidget;
    stackedWidget-&gt;addWidget(horizontalSliders);
    stackedWidget-&gt;addWidget(verticalSliders);

    createControls(tr(&quot;Controls&quot;));

    connect(horizontalSliders, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setValue(int)));
    connect(verticalSliders, SIGNAL(valueChanged(int)),
            valueSpinBox, SLOT(setValue(int)));
    connect(valueSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setValue(int)));

    QHBoxLayout *layout = new QHBoxLayout;
    layout-&gt;addWidget(controlsGroup);
    layout-&gt;addWidget(stackedWidget);
    setLayout(layout);

    minimumSpinBox-&gt;setValue(0);
    maximumSpinBox-&gt;setValue(20);
    valueSpinBox-&gt;setValue(5);

    setWindowTitle(tr(&quot;Sliders&quot;));
}

void Window::createControls(const QString &amp;title)
{
    controlsGroup = new QGroupBox(title);

    minimumLabel = new QLabel(tr(&quot;Minimum value:&quot;));
    maximumLabel = new QLabel(tr(&quot;Maximum value:&quot;));
    valueLabel = new QLabel(tr(&quot;Current value:&quot;));

    invertedAppearance = new QCheckBox(tr(&quot;Inverted appearance&quot;));
    invertedKeyBindings = new QCheckBox(tr(&quot;Inverted key bindings&quot;));

    minimumSpinBox = new QSpinBox;
    minimumSpinBox-&gt;setRange(-100, 100);
    minimumSpinBox-&gt;setSingleStep(1);

    maximumSpinBox = new QSpinBox;
    maximumSpinBox-&gt;setRange(-100, 100);
    maximumSpinBox-&gt;setSingleStep(1);

    valueSpinBox = new QSpinBox;
    valueSpinBox-&gt;setRange(-100, 100);
    valueSpinBox-&gt;setSingleStep(1);

    orientationCombo = new QComboBox;
    orientationCombo-&gt;addItem(tr(&quot;Horizontal slider-like widgets&quot;));
    orientationCombo-&gt;addItem(tr(&quot;Vertical slider-like widgets&quot;));

    connect(orientationCombo, SIGNAL(activated(int)),
            stackedWidget, SLOT(setCurrentIndex(int)));
    connect(minimumSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setMinimum(int)));
    connect(minimumSpinBox, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setMinimum(int)));
    connect(maximumSpinBox, SIGNAL(valueChanged(int)),
            horizontalSliders, SLOT(setMaximum(int)));
    connect(maximumSpinBox, SIGNAL(valueChanged(int)),
            verticalSliders, SLOT(setMaximum(int)));
    connect(invertedAppearance, SIGNAL(toggled(bool)),
            horizontalSliders, SLOT(invertAppearance(bool)));
    connect(invertedAppearance, SIGNAL(toggled(bool)),
            verticalSliders, SLOT(invertAppearance(bool)));
    connect(invertedKeyBindings, SIGNAL(toggled(bool)),
            horizontalSliders, SLOT(invertKeyBindings(bool)));
    connect(invertedKeyBindings, SIGNAL(toggled(bool)),
            verticalSliders, SLOT(invertKeyBindings(bool)));

    QGridLayout *controlsLayout = new QGridLayout;
    controlsLayout-&gt;addWidget(minimumLabel, 0, 0);
    controlsLayout-&gt;addWidget(maximumLabel, 1, 0);
    controlsLayout-&gt;addWidget(valueLabel, 2, 0);
    controlsLayout-&gt;addWidget(minimumSpinBox, 0, 1);
    controlsLayout-&gt;addWidget(maximumSpinBox, 1, 1);
    controlsLayout-&gt;addWidget(valueSpinBox, 2, 1);
    controlsLayout-&gt;addWidget(invertedAppearance, 0, 2);
    controlsLayout-&gt;addWidget(invertedKeyBindings, 1, 2);
    controlsLayout-&gt;addWidget(orientationCombo, 3, 0, 1, 3);
    controlsGroup-&gt;setLayout(controlsLayout);
}

</db:programlisting>
</db:article>
