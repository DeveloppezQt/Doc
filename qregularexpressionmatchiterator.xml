<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRegularExpressionMatchIterator Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> class provides an iterator on the results of a global match of a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object against a string.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRegularExpressionMatchIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRegularExpressionMatchIterator is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object is a forward only Java-like iterator; it can be obtained by calling the <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>() function. A new <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> will be positioned before the first result. You can then call the <db:link xlink:href="qregularexpressionmatchiterator.xml#hasNext">hasNext</db:link>() function to check if there are more results available; if so, the <db:link xlink:href="qregularexpressionmatchiterator.xml#next">next</db:link>() function will return the next result and advance the iterator.</db:para>
<db:para>Each result is a <db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> object holding all the information for that result (including captured substrings).</db:para>
<db:para>For instance:</db:para>
<db:programlisting language="cpp">// extracts the words
QRegularExpression re(&quot;(\\w+)&quot;);
QString subject(&quot;the quick fox&quot;);
QRegularExpressionMatchIterator i = re.globalMatch(subject);
while (i.hasNext()) {
    QRegularExpressionMatch match = i.next();
    // ...
}
</db:programlisting>
<db:para>Moreover, <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> offers a <db:link xlink:href="qregularexpressionmatchiterator.xml#peekNext">peekNext</db:link>() function to get the next result <db:emphasis>without</db:emphasis> advancing the iterator.</db:para>
<db:para>You can retrieve the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object the subject string was matched against by calling the <db:link xlink:href="qregularexpressionmatchiterator.xml#regularExpression">regularExpression</db:link>() function; the match type and the match options are available as well by calling the <db:link xlink:href="qregularexpressionmatchiterator.xml#matchType">matchType</db:link>() and the <db:link xlink:href="qregularexpressionmatchiterator.xml#matchOptions">matchOptions</db:link>() respectively.</db:para>
<db:para>Please refer to the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> documentation for more information about the Qt regular expression classes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:member>
<db:member><db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRegularExpressionMatchIterator">
<db:title>[since 5.1] QRegularExpressionMatchIterator::QRegularExpressionMatchIterator()</db:title>
<db:para>Constructs an empty, valid <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object. The regular expression is set to a default-constructed one; the match type to <db:link xlink:href="qregularexpression.xml#MatchType-enum">QRegularExpression::NoMatch</db:link> and the match options to <db:link xlink:href="qregularexpression.xml#MatchOption-enum">QRegularExpression::NoMatchOption</db:link>.</db:para>
<db:para>Invoking the <db:link xlink:href="qregularexpressionmatchiterator.xml#hasNext">hasNext</db:link>() member function on the constructed object will return false, as the iterator is not iterating on a valid sequence of matches.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="QRegularExpressionMatchIterator-1">
<db:title>QRegularExpressionMatchIterator::QRegularExpressionMatchIterator(const QRegularExpressionMatchIterator &amp;<db:emphasis>iterator</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object as a copy of <db:code role="parameter">iterator</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QRegularExpressionMatchIterator">
<db:title>[noexcept] QRegularExpressionMatchIterator::~QRegularExpressionMatchIterator()</db:title>
<db:para>Destroys the <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object.</db:para>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QRegularExpressionMatchIterator::hasNext() const</db:title>
<db:para>Returns true if there is at least one match result ahead of the iterator; otherwise it returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QRegularExpressionMatchIterator::isValid() const</db:title>
<db:para>Returns true if the iterator object was obtained as a result from the <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>() function invoked on a valid <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object; returns false if the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> was invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpression.xml#isValid">QRegularExpression::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="matchOptions">
<db:title>QRegularExpression::MatchOptions QRegularExpressionMatchIterator::matchOptions() const</db:title>
<db:para>Returns the match options that were used to get this <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object, that is, the match options that were passed to <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#regularExpression">regularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#matchType">matchType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="matchType">
<db:title>QRegularExpression::MatchType QRegularExpressionMatchIterator::matchType() const</db:title>
<db:para>Returns the match type that was used to get this <db:link xlink:href="qregularexpressionmatchiterator.xml">QRegularExpressionMatchIterator</db:link> object, that is, the match type that was passed to <db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#regularExpression">regularExpression</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#matchOptions">matchOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>QRegularExpressionMatch QRegularExpressionMatchIterator::next()</db:title>
<db:para>Returns the next match result and advances the iterator by one position.</db:para>
<db:note>
<db:para>Calling this function when the iterator is at the end of the result set leads to undefined results.</db:para>
</db:note>
</db:section>
<db:section xml:id="peekNext">
<db:title>QRegularExpressionMatch QRegularExpressionMatchIterator::peekNext() const</db:title>
<db:para>Returns the next match result without moving the iterator.</db:para>
<db:note>
<db:para>Calling this function when the iterator is at the end of the result set leads to undefined results.</db:para>
</db:note>
</db:section>
<db:section xml:id="regularExpression">
<db:title>QRegularExpression QRegularExpressionMatchIterator::regularExpression() const</db:title>
<db:para>Returns the <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> object whose globalMatch() function returned this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#globalMatch">QRegularExpression::globalMatch</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#matchType">matchType</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpressionmatchiterator.xml#matchOptions">matchOptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QRegularExpressionMatchIterator::swap(QRegularExpressionMatchIterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps the iterator <db:code role="parameter">other</db:code> with this iterator object. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default] QRegularExpressionMatchIterator &amp;QRegularExpressionMatchIterator::operator=(QRegularExpressionMatchIterator &amp;&amp;<db:emphasis>iterator</db:emphasis>)</db:title>
<db:para>Move-assigns the <db:code role="parameter">iterator</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QRegularExpressionMatchIterator &amp;QRegularExpressionMatchIterator::operator=(const QRegularExpressionMatchIterator &amp;<db:emphasis>iterator</db:emphasis>)</db:title>
<db:para>Assigns the iterator <db:code role="parameter">iterator</db:code> to this object, and returns a reference to the copy.</db:para>
</db:section>
</db:section>
</db:article>
