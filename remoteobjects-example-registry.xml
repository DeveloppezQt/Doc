<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Example 3: Connections to Remote Nodes using a Registry</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes how the Qt Remote Objects registry establishes connections between nodes. <db:anchor xml:id="qtro-example3"/>
 This example illustrates the use of a <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> to build the node topology. For simple networks, we use a <db:link xlink:href="qurl.xml">QUrl</db:link> to create a direct connection between two nodes. For complex networks, we use a registry, where you use a different <db:link xlink:href="qurl.xml">QUrl</db:link> to point both the host and replica nodes to the registry. For only two nodes, the benefits of using a registry are minimal. But, as the network grows, using a registry means that all nodes only need to connect to the registry via a single <db:link xlink:href="qurl.xml">QUrl</db:link>. In comparison, with direct connections, nodes would have to maintain a list of QUrls for every single node that they link to.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="set-up-the-source">
<db:title>Set up the Source</db:title>
<db:para>The <db:code>simpleswitch.h</db:code> and <db:code>simpleswitch.cpp</db:code> sources from <db:link xlink:href="remoteobjects-example-static-source.xml#qtro-example1">Example</db:link> can be used without modification. The difference is in the way a host node is created and connected to the registry:</db:para>
<db:para><db:code>main.cpp</db:code></db:para>
<db:programlisting language="cpp">#include &amp;lt;QCoreApplication&amp;gt;
#include &quot;simpleswitch.h&quot;

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);

    SimpleSwitch srcSwitch; // create SimpleSwitch

    QRemoteObjectRegistryHost regNode(QUrl(QStringLiteral(&quot;local:registry&quot;))); // create node that hosts registry
    QRemoteObjectHost srcNode(QUrl(QStringLiteral(&quot;local:switch&quot;)), QUrl(QStringLiteral(&quot;local:registry&quot;))); // create node that will host source and connect to registry
    //Note, you can add srcSwitch directly to regNode if desired.
    //We use two Nodes here, as the regNode could easily be in a third process.

    srcNode.enableRemoting(&amp;amp;srcSwitch); // enable remoting of source object

    return a.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="set-up-the-replica">
<db:title>Set up the Replica</db:title>
<db:para>The requestor object used for this example is the dynamic replica client discussed in <db:link xlink:href="remoteobjects-example-dynamic-replica.xml#qtro-example2">Example 2</db:link>.</db:para>
<db:para>The only modification is in <db:code>main.cpp</db:code>: a <db:link xlink:href="qtremoteobjects-registry.xml#registry">Registry</db:link> node is created to acquire a <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link>:</db:para>
<db:programlisting language="cpp">    QRemoteObjectNode repNode(QUrl(QStringLiteral(&quot;local:registry&quot;)));
</db:programlisting>
<db:para>When run together with the source-side example, the output is identical to <db:link xlink:href="remoteobjects-example-static-source.xml#qtro-example1">Example 1</db:link>.</db:para>
</db:section>
</db:article>
