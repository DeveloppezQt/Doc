<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAnimationController Class</db:title>
<db:subtitle>Qt3DAnimation::QAnimationController</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A controller class for animations.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAnimationController</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3danimation)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3danimation)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3danimation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qt3d-animation-animationcontroller.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qt3danimation-qanimationcontroller.xml">Qt3DAnimation::QAnimationController</db:link> class controls the selection and playback of animations. The class can be used to find all animations from <db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link> tree and create <db:link xlink:href="qt3danimation-qanimationgroup.xml">QAnimationGroups</db:link> from the animations with the same name. The user can select which animation group is currently controlled with the animation controller by setting the active animation. The animation position is then propagated to that group after scaling and offsetting the provided position value with the <db:link xlink:href="qt3danimation-qanimationcontroller.xml#positionScale-prop">positionScale</db:link> and <db:link xlink:href="qt3danimation-qanimationcontroller.xml#positionOffset-prop">positionOffset</db:link> values.</db:para>
<db:note>
<db:para>that the animation controller doesn't have internal timer, but instead the user is responsible for updating the position property in timely manner.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeAnimationGroup-prop">
<db:title>activeAnimationGroup : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>activeAnimationGroup</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeAnimationGroup</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveAnimationGroup</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeAnimationGroupChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the currectly active animation group.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">activeAnimationGroup</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveAnimationGroup</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">activeAnimationGroupChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="entity-prop">
<db:title>entity : Qt3DCore::QEntity*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt3DCore::QEntity*</db:type>
<db:varname>entity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">entity</db:synopsisinfo>
<db:synopsisinfo role="setter">setEntity</db:synopsisinfo>
<db:synopsisinfo role="notifier">entityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the entity animations are gathered and grouped from. If the controller already holds animations, they are cleared.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis role="bold">entity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEntity</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>entity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">entityChanged</db:emphasis>(<db:type><db:link xlink:href="qt3dcore-qentity.xml">Qt3DCore::QEntity</db:link></db:type> *<db:emphasis>entity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">position</db:synopsisinfo>
<db:synopsisinfo role="setter">setPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the current position of the animation. When the position is set, it is scaled and offset with <db:link xlink:href="qt3danimation-qanimationcontroller.xml#positionScale-prop">positionScale</db:link>/<db:link xlink:href="qt3danimation-qanimationcontroller.xml#positionOffset-prop">positionOffset</db:link> and propagated to the active animation group.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">position</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPosition</db:emphasis>(<db:type>float</db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="positionOffset-prop">
<db:title>positionOffset : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>positionOffset</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">positionOffset</db:synopsisinfo>
<db:synopsisinfo role="setter">setPositionOffset</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionOffsetChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the position offset of the animation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">positionOffset</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPositionOffset</db:emphasis>(<db:type>float</db:type> <db:emphasis>offset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionOffsetChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>offset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="positionScale-prop">
<db:title>positionScale : float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>positionScale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">positionScale</db:synopsisinfo>
<db:synopsisinfo role="setter">setPositionScale</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionScaleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the position scale of the animation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">positionScale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPositionScale</db:emphasis>(<db:type>float</db:type> <db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">positionScaleChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="recursive-prop">
<db:title>recursive : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>recursive</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">recursive</db:synopsisinfo>
<db:synopsisinfo role="setter">setRecursive</db:synopsisinfo>
<db:synopsisinfo role="notifier">recursiveChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds whether the recursively search the entity tree when gathering animations from the entity. If set to true, the animations are searched also from the child entities of the entity. If set to false, only the entity passed to the controller is searched.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">recursive</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRecursive</db:emphasis>(<db:type>bool</db:type> <db:emphasis>recursive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">recursiveChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>recursive</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAnimationController">
<db:title>QAnimationController::QAnimationController(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAnimationController</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAnimationController(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qt3danimation-qanimationcontroller.xml">QAnimationController</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="addAnimationGroup">
<db:title>void QAnimationController::addAnimationGroup(Qt3DAnimation::QAnimationGroup *<db:emphasis>animationGroup</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAnimationGroup</db:methodname>
<db:methodparam>
<db:type>Qt3DAnimation::QAnimationGroup *</db:type>
<db:parameter>animationGroup</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAnimationGroup(Qt3DAnimation::QAnimationGroup *animationGroup)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the given <db:code role="parameter">animationGroup</db:code> to the controller.</db:para>
</db:section>
<db:section xml:id="animationGroupList">
<db:title>QList&lt;Qt3DAnimation::QAnimationGroup *&gt; QAnimationController::animationGroupList()</db:title>
<db:methodsynopsis>
<db:type>QList&lt;Qt3DAnimation::QAnimationGroup *&gt;</db:type>
<db:methodname>animationGroupList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;Qt3DAnimation::QAnimationGroup *&gt; animationGroupList()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of animation groups the conroller is currently holding.</db:para>
</db:section>
<db:section xml:id="getAnimationIndex">
<db:title>int QAnimationController::getAnimationIndex(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>getAnimationIndex</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int getAnimationIndex(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the animation with <db:code role="parameter">name</db:code>. Returns -1 if no <db:link xlink:href="qml-qt3d-animation-animationgroup.xml">AnimationGroup</db:link> with the given name is found.</db:para>
</db:section>
<db:section xml:id="getGroup">
<db:title>Qt3DAnimation::QAnimationGroup *QAnimationController::getGroup(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt3DAnimation::QAnimationGroup *</db:type>
<db:methodname>getGroup</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt3DAnimation::QAnimationGroup * getGroup(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qml-qt3d-animation-animationgroup.xml">AnimationGroup</db:link> with the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="removeAnimationGroup">
<db:title>void QAnimationController::removeAnimationGroup(Qt3DAnimation::QAnimationGroup *<db:emphasis>animationGroup</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAnimationGroup</db:methodname>
<db:methodparam>
<db:type>Qt3DAnimation::QAnimationGroup *</db:type>
<db:parameter>animationGroup</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAnimationGroup(Qt3DAnimation::QAnimationGroup *animationGroup)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">animationGroup</db:code> from the controller.</db:para>
</db:section>
<db:section xml:id="setAnimationGroups">
<db:title>void QAnimationController::setAnimationGroups(const QList&lt;Qt3DAnimation::QAnimationGroup *&gt; &amp;<db:emphasis>animationGroups</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnimationGroups</db:methodname>
<db:methodparam>
<db:type>const QList&lt;Qt3DAnimation::QAnimationGroup *&gt; &amp;</db:type>
<db:parameter>animationGroups</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnimationGroups(const QList&lt;Qt3DAnimation::QAnimationGroup *&gt; &amp;animationGroups)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">animationGroups</db:code> for the controller. Old groups are cleared.</db:para>
</db:section>
</db:section>
</db:article>
