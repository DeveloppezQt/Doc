<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Paint Devices and Backends</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="paintsystem-drawing.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Drawing and Filling"/></db:extendedlink>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>The Paint System</db:para>
<db:section xml:id="creating-a-paint-device">
<db:title>Creating a Paint Device</db:title>
<db:para>The QPaintDevice class is the base class of objects that can be painted, i.e. QPainter can draw on any QPaintDevice subclass. QPaintDevice's drawing capabilities are among others implemented by QWidget, QImage, QPixmap, QPicture, QPrinter, and QOpenGLPaintDevice.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Widget</db:emphasis></db:para>
<db:para>The QWidget class is the base class of user interface elements in the <db:link xlink:href="">Qt Widgets</db:link> module. It receives mouse, keyboard and other events from the window system, and paints a representation of itself on the screen.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Image</db:emphasis></db:para>
<db:para>The QImage class provides a hardware-independent image representation which is designed and optimized for I/O, and for direct pixel access and manipulation. QImage supports several image formats including monochrome, 8-bit, 32-bit and alpha-blended images.</db:para>
<db:para>One advantage of using QImage as a paint device is that it is possible to guarantee the pixel exactness of any drawing operation in a platform-independent way. Another benefit is that the painting can be performed in another thread than the current GUI thread.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Pixmap</db:emphasis></db:para>
<db:para>The QPixmap class is an off-screen image representation which is designed and optimized for showing images on screen. Unlike QImage, the pixel data in a pixmap is internal and is managed by the underlying window system, i.e. pixels can only be accessed through QPainter functions or by converting the QPixmap to a QImage.</db:para>
<db:para>To optimize drawing with QPixmap, Qt provides the <db:link xlink:href="qpixmapcache.xml">QPixmapCache</db:link> class which can be used to store temporary pixmaps that are expensive to generate without using more storage space than the cache limit.</db:para>
<db:para>Qt also provides the QBitmap convenience class, inheriting QPixmap. QBitmap guarantees monochrome (1-bit depth) pixmaps, and is mainly used for creating custom QCursor and QBrush objects, constructing QRegion objects.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">OpenGL Paint Device</db:emphasis></db:para>
<db:para>As mentioned previously, Qt is offering classes that makes it easy to use OpenGL in Qt applications. For example, the QOpenGLPaintDevice enables the OpenGL API for rendering with QPainter.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Picture</db:emphasis></db:para>
<db:para>The QPicture class is a paint device that records and replays QPainter commands. A picture serializes painter commands to an IO device in a platform-independent format. QPicture is also resolution independent, i.e. a QPicture can be displayed on different devices (for example svg, pdf, ps, printer and screen) looking the same.</db:para>
<db:para>Qt provides the QPicture::load() and QPicture::save() functions as well as streaming operators for loading and saving pictures.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Custom Backends</db:emphasis></db:para>
<db:para>Support for a new backend can be implemented by deriving from the QPaintDevice class and reimplementing the virtual QPaintDevice::paintEngine() function to tell QPainter which paint engine should be used to draw on this particular device. To actually be able to draw on the device, this paint engine must be a custom paint engine created by deriving from the QPaintEngine class.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
