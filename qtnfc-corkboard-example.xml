<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML CorkBoard Example</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML example about displaying NFC Data Exchange Format (NDEF) messages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QML corkboard example displays the contents of NDEF messages read from an NFC Tag. Each newly detected NDEF message is added to the corkboard and can be dragged into an arbitrary position on the board. The corkboard has a <db:emphasis>Personal</db:emphasis> and <db:emphasis>Work</db:emphasis> space. The workspace can be changed by sliding left or right.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/corkboard.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="implementation-details">
<db:title>Implementation details</db:title>
<db:para>In the corkboard example, we use the following .qml files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>corkboards.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>Mode.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The main.cpp holds the application logic to load the main view stored in the corkboards.qml file.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QGuiApplication application(argc, argv);
    QQuickView view;
    view.setSource(QUrl(&quot;qrc:/corkboards.qml&quot;));
    view.setResizeMode(QQuickView::SizeRootObjectToView);
    view.show();
    return application.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="corkboards-qml-details">
<db:title>corkboards.qml details</db:title>
<db:para>There are two basic QML components in this file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtnfc-nearfield.xml">NearField</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The first time the <db:link xlink:href="qml-qtnfc-nearfield.xml">NearField</db:link> QML type is instantiated, the Component.onCompleted handler will start the NFC polling process. The <db:link xlink:href="qml-qtnfc-nearfield.xml">onMessageRecordsChanged</db:link> handler parses NFC Messages that are detected by the <db:link xlink:href="qml-qtnfc-nearfield.xml">NearField</db:link> component and builds up a data model that is passed into the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. Additionally, every time the <db:link xlink:href="qml-qtnfc-nearfield.xml">NearField</db:link> manager stops the polling process, the onPollingChanged handler restarts it.</db:para>
<db:programlisting language="cpp">    NearField {
        property bool requiresManualPolling: false
        orderMatch: false

        onMessageRecordsChanged: {
        ...
        onPollingChanged: {
        ...
        Component.onCompleted: {
        ...
        }
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> component takes a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> as parameter (built from the NFC records). The view of each of the items of the model is defined by the Mode component (its implementation details can be found in the file Mode.qml). The data model consists of a list of corkboards. Each corkboard can display multiple NFC text message records.</db:para>
<db:programlisting language="cpp">    ListView {
        id: listView
        ...
        model: list
        ...
        delegate: Mode {}
    }
</db:programlisting>
</db:section>
<db:section xml:id="mode-qml-details">
<db:title>Mode.qml details</db:title>
<db:para>A corkboard title is displayed for each of the items that form part of the data model:</db:para>
<db:programlisting language="cpp">        Text {
            anchors { horizontalCenter: parent.horizontalCenter; top: parent.top; topMargin: 10}
            text: name;
            font { pixelSize: 30; bold: true }
</db:programlisting>
<db:para>Every text record that was read from an NFC message, is represented by a sticky note with its own position on the display. Initially the position is set randomly. The text on the sticky note is set on a <db:link xlink:href="qml-qtquick-controls2-textfield.xml">TextField</db:link>.</db:para>
<db:programlisting language="cpp">        Repeater {
            model: notes
            Item {
                id: stickyPage

                x: ListView.width * (0.7 * Math.random() + 0.1)
                y: ListView.height * (0.7 * Math.random() + 0.1)
                ...
                Item {
                    id: sticky
                    ...
                    TextEdit {
                        id: myText
                        text: noteText
                        ...
                    }
                    ...
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="corkboard/Mode.qml">corkboard/Mode.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/android/AndroidManifest.xml">corkboard/android/AndroidManifest.xml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/corkboard.pro">corkboard/corkboard.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/corkboard.qrc">corkboard/corkboard.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/corkboards.qml">corkboard/corkboards.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/main.cpp">corkboard/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="corkboard/NfcFlag.png">corkboard/NfcFlag.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/cork.jpg">corkboard/cork.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/icon.png">corkboard/icon.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/note-yellow.png">corkboard/note-yellow.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="corkboard/tack.png">corkboard/tack.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
