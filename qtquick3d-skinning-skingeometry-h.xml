<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Simple Skinning Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to render a simple skinning animation in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2020 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#ifndef SKINGEOMETRY_H
#define SKINGEOMETRY_H

#include &amp;lt;QtQuick3D/qquick3d.h&amp;gt;
#include &amp;lt;QtQuick3D/qquick3dgeometry.h&amp;gt;

#include &amp;lt;QVector3D&amp;gt;
#include &amp;lt;QtCore/QList&amp;gt;

class SkinGeometry : public QQuick3DGeometry
{
    Q_OBJECT
    QML_NAMED_ELEMENT(SkinGeometry)
    Q_PROPERTY(QList&amp;lt;QVector3D&amp;gt; positions READ positions WRITE setPositions NOTIFY positionsChanged)
    Q_PROPERTY(QList&amp;lt;qint32&amp;gt; joints READ joints WRITE setJoints NOTIFY jointsChanged)
    Q_PROPERTY(QList&amp;lt;float&amp;gt; weights READ weights WRITE setWeights NOTIFY weightsChanged)
    Q_PROPERTY(QList&amp;lt;quint32&amp;gt; indexes READ indexes WRITE setIndexes NOTIFY indexesChanged)

public:
    SkinGeometry(QQuick3DObject *parent = nullptr);

    QList&amp;lt;QVector3D&amp;gt; positions() const;
    QList&amp;lt;qint32&amp;gt; joints() const;
    QList&amp;lt;float&amp;gt; weights() const;
    QList&amp;lt;quint32&amp;gt; indexes() const;

public Q_SLOTS:
    void setPositions(const QList&amp;lt;QVector3D&amp;gt; &amp;amp;positions);
    void setJoints(const QList&amp;lt;qint32&amp;gt; &amp;amp;joints);
    void setWeights(const QList&amp;lt;float&amp;gt; &amp;amp;weights);
    void setIndexes(const QList&amp;lt;quint32&amp;gt; &amp;amp;indexes);

Q_SIGNALS:
    void positionsChanged();
    void jointsChanged();
    void weightsChanged();
    void indexesChanged();

protected:
    QSSGRenderGraphObject *updateSpatialNode(QSSGRenderGraphObject *node) override;

private:
    QList&amp;lt;QVector3D&amp;gt; m_positions;
    QList&amp;lt;qint32&amp;gt; m_joints;
    QList&amp;lt;float&amp;gt; m_weights;
    QList&amp;lt;quint32&amp;gt; m_indexes;

    bool m_vertexDirty = false;
    bool m_indexDirty = false;

    QByteArray m_vertexBuffer;
    QByteArray m_indexBuffer;
};

#endif // SKINGEOMETRY_H

</db:programlisting>
</db:article>
