<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick I18N</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Generating translation files (TS and QM) for a Qt Quick application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-i18n-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When you run the example application, the QML runtime automatically loads a translation from the <db:code>i18n</db:code> subdirectory of the directory that contains the main .qml file, based on the system language.</db:para>
<db:section xml:id="marking-text-as-translatable">
<db:title>Marking Text as Translatable</db:title>
<db:para>In the <db:code>qml-i18n.qml</db:code> file, use the <db:code>qsTr</db:code> command to mark UI text as translatable:</db:para>
<db:programlisting language="cpp">        Text {
            text: qsTr(&quot;Hello&quot;)
</db:programlisting>
</db:section>
<db:section xml:id="enabling-translation">
<db:title>Enabling Translation</db:title>
<db:para>In the <db:code>main.cpp</db:code> file, use <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> to automatically load translation files from a subdirectory called <db:code>i18n</db:code> in the directory that contains the main QML file:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QQmlApplicationEngine&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    QQmlApplicationEngine engine;
</db:programlisting>
<db:para>The translation file names in the <db:code>i18n</db:code> subdirectory must have the prefix <db:code>qml_</db:code>. For example, <db:code>qml_en_AU.ts</db:code>.</db:para>
</db:section>
<db:section xml:id="creating-translation-files">
<db:title>Creating Translation Files</db:title>
<db:para>Add the <db:code>LinguistTools</db:code> module as a value of the <db:code>find_package</db:code> command in the <db:code>CMakeLists.txt</db:code> file:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Gui Quick Qml LinguistTools)
</db:programlisting>
<db:para>Define the translation files to generate in the <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml">qt_add_translations</db:link> command:</db:para>
<db:programlisting language="cpp">qt_add_translations(qmli18n
    RESOURCE_PREFIX /qt/qml/translated/i18n
    TS_FILE_BASE qml
    TS_FILE_DIR i18n
)
</db:programlisting>
<db:para>Build the application to generate TS and QM files.</db:para>
<db:note>
<db:para>On Android, make sure to include the QM files as resources.</db:para>
</db:note>
</db:section>
<db:section xml:id="adding-translations">
<db:title>Adding Translations</db:title>
<db:para>To create translations for new languages, copy <db:emphasis>i18n/base.ts</db:emphasis> to <db:emphasis>i18n/qml_&lt;lang&gt;.ts</db:emphasis>. You can use <db:link xlink:href="qtlinguist-index.xml">Qt Linguist</db:link> to translate the strings.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/qml/qml-i18n?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
