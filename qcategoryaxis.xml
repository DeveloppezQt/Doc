<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCategoryAxis Class</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link> class places named ranges on the axis.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCategoryAxis</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtcharts-categoryaxis.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvalueaxis.xml" xlink:role="class">QValueAxis</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class can be used to explain the underlying data by adding labeled categories. Unlike <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link>, <db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link> allows the widths of the category ranges to be specified freely.</db:para>
<db:para>Example code on how to use <db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link>:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/api_category_axis.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">QChartView *chartView = new QChartView;
QLineSeries *series = new QLineSeries;
// ...
chartView-&amp;gt;chart()-&amp;gt;addSeries(series);

QCategoryAxis *axisY = new QCategoryAxis;
axisY-&amp;gt;setMin(0);
axisY-&amp;gt;setMax(52);
axisY-&amp;gt;setStartValue(15);
axisY-&amp;gt;append(&quot;First&quot;, 20);
axisY-&amp;gt;append(&quot;Second&quot;, 37);
axisY-&amp;gt;append(&quot;Third&quot;, 52);
chartView-&amp;gt;chart()-&amp;gt;setAxisY(axisY, series);
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AxisLabelsPosition-enum">
<db:title>enum QCategoryAxis::AxisLabelsPosition</db:title>
<db:enumsynopsis>
<db:enumname>AxisLabelsPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>AxisLabelsPositionCenter</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AxisLabelsPositionOnValue</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the position of the category labels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link></db:emphasis>::AxisLabelsPositionCenter</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>Labels are centered to category.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml">QCategoryAxis</db:link></db:emphasis>::AxisLabelsPositionOnValue</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Labels are positioned to the high end limit of the category.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="categoriesLabels-prop">
<db:title>[read-only] categoriesLabels : const QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>categoriesLabels</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">categoriesLabels</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the category labels as a string list.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml#categoriesLabels">categoriesLabels</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of categories.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="labelsPosition-prop">
<db:title>labelsPosition : AxisLabelsPosition</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>AxisLabelsPosition</db:type>
<db:varname>labelsPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">labelsPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setLabelsPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">labelsPositionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the position of the category labels. The labels in the beginning and in the end of the axes may overlap other axes' labels when positioned on value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qcategoryaxis.xml#AxisLabelsPosition-enum">QCategoryAxis::AxisLabelsPosition</db:link></db:type> <db:emphasis role="bold">labelsPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLabelsPosition</db:emphasis>(<db:type><db:link xlink:href="qcategoryaxis.xml#AxisLabelsPosition-enum">QCategoryAxis::AxisLabelsPosition</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">labelsPositionChanged</db:emphasis>(<db:type><db:link xlink:href="qcategoryaxis.xml#AxisLabelsPosition-enum">QCategoryAxis::AxisLabelsPosition</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="startValue-prop">
<db:title>startValue : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>startValue</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">startValue</db:synopsisinfo>
<db:synopsisinfo role="setter">setStartValue</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the low end of the first category on the axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml#startValue">startValue</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>categoryLabel</db:emphasis> = QString()) const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qcategoryaxis.xml#setStartValue">setStartValue</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCategoryAxis">
<db:title>[explicit] QCategoryAxis::QCategoryAxis(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QCategoryAxis</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCategoryAxis(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an axis object that is a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QCategoryAxis">
<db:title>[virtual] QCategoryAxis::~QCategoryAxis()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCategoryAxis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCategoryAxis()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QCategoryAxis::append(const QString &amp;<db:emphasis>categoryLabel</db:emphasis>, qreal <db:emphasis>categoryEndValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryLabel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>categoryEndValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QString &amp;categoryLabel, qreal categoryEndValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a new category to the axis with the label <db:code role="parameter">categoryLabel</db:code>. A category label has to be unique. <db:code role="parameter">categoryEndValue</db:code> specifies the high end limit of the category. It has to be greater than the high end limit of the previous category. Otherwise the method returns without adding a new category.</db:para>
</db:section>
<db:section xml:id="categoriesChanged">
<db:title>void QCategoryAxis::categoriesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoriesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoriesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the categories of the axis change.</db:para>
</db:section>
<db:section xml:id="categoriesLabels">
<db:title>QStringList QCategoryAxis::categoriesLabels()</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>categoriesLabels</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categoriesLabels</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList categoriesLabels()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of the categories' labels.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcategoryaxis.xml#categoriesLabels-prop">categoriesLabels</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="count">
<db:title>int QCategoryAxis::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of categories.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcategoryaxis.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="endValue">
<db:title>qreal QCategoryAxis::endValue(const QString &amp;<db:emphasis>categoryLabel</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>endValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryLabel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal endValue(const QString &amp;categoryLabel) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the high end limit of the category specified by <db:code role="parameter">categoryLabel</db:code>.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QCategoryAxis::remove(const QString &amp;<db:emphasis>categoryLabel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryLabel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QString &amp;categoryLabel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes a category specified by the label <db:code role="parameter">categoryLabel</db:code> from the axis.</db:para>
</db:section>
<db:section xml:id="replaceLabel">
<db:title>void QCategoryAxis::replaceLabel(const QString &amp;<db:emphasis>oldLabel</db:emphasis>, const QString &amp;<db:emphasis>newLabel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replaceLabel</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>oldLabel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newLabel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replaceLabel(const QString &amp;oldLabel, const QString &amp;newLabel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces an existing category label specified by <db:code role="parameter">oldLabel</db:code> with <db:code role="parameter">newLabel</db:code>. If the old label does not exist, the method returns without making any changes.</db:para>
</db:section>
<db:section xml:id="setStartValue">
<db:title>void QCategoryAxis::setStartValue(qreal <db:emphasis>min</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStartValue</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">startValue</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStartValue(qreal min)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">min</db:code> to be the low end limit of the first category on the axis. If categories have already been added to the axis, the passed value must be less than the high end value of the already defined first category range. Otherwise nothing is done.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qcategoryaxis.xml#startValue-prop">startValue</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcategoryaxis.xml#startValue">startValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startValue">
<db:title>qreal QCategoryAxis::startValue(const QString &amp;<db:emphasis>categoryLabel</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>startValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>categoryLabel</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">startValue</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal startValue(const QString &amp;categoryLabel) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the low end limit of the category specified by <db:code role="parameter">categoryLabel</db:code>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qcategoryaxis.xml#startValue-prop">startValue</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcategoryaxis.xml#setStartValue">setStartValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] QAbstractAxis::AxisType QCategoryAxis::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractAxis::AxisType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAxis::AxisType type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qvalueaxis.xml#type" role="function">QValueAxis::type() const</db:link>.</db:para>
<db:para>Returns the type of the axis.</db:para>
</db:section>
</db:section>
</db:article>
