<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QShortcut Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qshortcut.xml">QShortcut</db:link> class is used to create keyboard shortcuts.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QShortcut</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QShortcut is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qshortcut.xml">QShortcut</db:link> class provides a way of connecting keyboard shortcuts to Qt's <db:link xlink:href="signalsandslots.xml#signals-and-slots">signals and slots</db:link> mechanism, so that objects can be informed when a shortcut is executed. The shortcut can be set up to contain all the key presses necessary to describe a keyboard shortcut, including the states of modifier keys such as <db:guilabel>Shift</db:guilabel>, <db:guilabel>Ctrl</db:guilabel>, and <db:guilabel>Alt</db:guilabel>.</db:para>
<db:anchor xml:id="mnemonic"/>
<db:para>On certain widgets, using '&amp;' in front of a character will automatically create a mnemonic (a shortcut) for that character, e.g. &quot;E&amp;xit&quot; will create the shortcut <db:guilabel>Alt+X</db:guilabel> (use '&amp;&amp;' to display an actual ampersand). The widget might consume and perform an action on a given shortcut. On X11 the ampersand will not be shown and the character will be underlined. On Windows, shortcuts are normally not displayed until the user presses the <db:guilabel>Alt</db:guilabel> key, but this is a setting the user can change. On Mac, shortcuts are disabled by default. Call qt_set_sequence_auto_mnemonic() to enable them. However, because mnemonic shortcuts do not fit in with Aqua's guidelines, Qt will not show the shortcut character underlined.</db:para>
<db:para>For applications that use menus, it may be more convenient to use the convenience functions provided in the <db:link xlink:href="qmenu.xml">QMenu</db:link> class to assign keyboard shortcuts to menu items as they are created. Alternatively, shortcuts may be associated with other types of actions in the <db:link xlink:href="qaction.xml">QAction</db:link> class.</db:para>
<db:para>The simplest way to create a shortcut for a particular widget is to construct the shortcut with a key sequence. For example:</db:para>
<db:programlisting language="cpp">shortcut = new QShortcut(QKeySequence(tr(&quot;Ctrl+O&quot;, &quot;File|Open&quot;)),
                         parent);
</db:programlisting>
<db:para>When the user types the <db:link xlink:href="qkeysequence.xml">key sequence</db:link> for a given shortcut, the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal is emitted. (In the case of ambiguity, the <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal is emitted.) A shortcut is &quot;listened for&quot; by Qt's event loop when the shortcut's parent widget is receiving events.</db:para>
<db:para>A shortcut's key sequence can be set with setKey() and retrieved with key(). A shortcut can be enabled or disabled with setEnabled(), and can have &quot;What's This?&quot; help text set with setWhatsThis().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link></db:member>
<db:member><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QShortcut">
<db:title>[explicit] QShortcut::QShortcut(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> object for the <db:code role="parameter">parent</db:code> widget. Since no shortcut key sequence is specified, the shortcut will not emit any signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setKey()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QShortcut-1">
<db:title>QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis>, const char *<db:emphasis>member</db:emphasis> = 0, const char *<db:emphasis>ambiguousMember</db:emphasis> = 0, Qt::ShortcutContext <db:emphasis>context</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:para>Constructs a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> object for the <db:code role="parameter">parent</db:code> widget. The shortcut operates on its parent, listening for <db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link>s that match the <db:code role="parameter">key</db:code> sequence. Depending on the ambiguity of the event, the shortcut will call the <db:code role="parameter">member</db:code> function, or the <db:code role="parameter">ambiguousMember</db:code> function, if the key press was in the shortcut's <db:code role="parameter">context</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QShortcut">
<db:title>[virtual noexcept] QShortcut::~QShortcut()</db:title>
<db:para>Destroys the shortcut.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>void QShortcut::activated()</db:title>
<db:para>This signal is emitted when the user types the shortcut's key sequence.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activatedAmbiguously">
<db:title>void QShortcut::activatedAmbiguously()</db:title>
<db:para>When a key sequence is being typed at the keyboard, it is said to be ambiguous as long as it matches the start of more than one shortcut.</db:para>
<db:para>When a shortcut's key sequence is completed, activatedAmbiguously() is emitted if the key sequence is still ambiguous (i.e., it is the start of one or more other shortcuts). The <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal is not emitted in this case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#activated">activated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>int QShortcut::id() const</db:title>
<db:para>Returns the shortcut's ID.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcutevent.xml#shortcutId">QShortcutEvent::shortcutId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QWidget *QShortcut::parentWidget() const</db:title>
<db:para>Returns the shortcut's parent widget.</db:para>
</db:section>
</db:section>
</db:article>
