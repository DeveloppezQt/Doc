<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QShortcut Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qshortcut.xml">QShortcut</db:link> class is used to create keyboard shortcuts.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QShortcut</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QShortcut is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qshortcut.xml">QShortcut</db:link> class provides a way of connecting keyboard shortcuts to Qt's <db:link xlink:href="signalsandslots.xml">signals and slots</db:link> mechanism, so that objects can be informed when a shortcut is executed. The shortcut can be set up to contain all the key presses necessary to describe a keyboard shortcut, including the states of modifier keys such as <db:guilabel>Shift</db:guilabel>, <db:guilabel>Ctrl</db:guilabel>, and <db:guilabel>Alt</db:guilabel>.</db:para>
<db:anchor xml:id="mnemonic"/>
<db:para>In widget applications, certain widgets can use '&amp;' in front of a character. This will automatically create a mnemonic (a shortcut) for that character, e.g. &quot;E&amp;xit&quot; will create the shortcut <db:guilabel>Alt+X</db:guilabel> (use '&amp;&amp;' to display an actual ampersand). The widget might consume and perform an action on a given shortcut. On X11 the ampersand will not be shown and the character will be underlined. On Windows, shortcuts are normally not displayed until the user presses the <db:guilabel>Alt</db:guilabel> key, but this is a setting the user can change. On Mac, shortcuts are disabled by default. Call <db:link xlink:href="qkeysequence.xml#qt_set_sequence_auto_mnemonic">qt_set_sequence_auto_mnemonic</db:link>() to enable them. However, because mnemonic shortcuts do not fit in with Aqua's guidelines, Qt will not show the shortcut character underlined.</db:para>
<db:para>For applications that use menus, it may be more convenient to use the convenience functions provided in the <db:link xlink:href="qmenu.xml">QMenu</db:link> class to assign keyboard shortcuts to menu items as they are created. Alternatively, shortcuts may be associated with other types of actions in the <db:link xlink:href="qaction.xml">QAction</db:link> class.</db:para>
<db:para>The simplest way to create a shortcut for a particular widget is to construct the shortcut with a key sequence. For example:</db:para>
<db:programlisting language="cpp">shortcut = new QShortcut(QKeySequence(tr(&quot;Ctrl+O&quot;, &quot;File|Open&quot;)),
                         parent);
</db:programlisting>
<db:para>When the user types the <db:link xlink:href="qkeysequence.xml">key sequence</db:link> for a given shortcut, the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal is emitted. (In the case of ambiguity, the <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal is emitted.) A shortcut is &quot;listened for&quot; by Qt's event loop when the shortcut's parent widget is receiving events.</db:para>
<db:para>A shortcut's key sequence can be set with <db:link xlink:href="qshortcut.xml#key-prop">setKey</db:link>() and retrieved with <db:link xlink:href="qshortcut.xml#key-prop">key</db:link>(). A shortcut can be enabled or disabled with <db:link xlink:href="qshortcut.xml#enabled-prop">setEnabled</db:link>(), and can have &quot;What's This?&quot; help text set with <db:link xlink:href="qshortcut.xml#setWhatsThis">setWhatsThis</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link></db:member>
<db:member><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoRepeat-prop">
<db:title>autoRepeat : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoRepeat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRepeat</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRepeat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the shortcut can auto repeat</db:para>
<db:para>If true, the shortcut will auto repeat when the keyboard shortcut combination is held down, provided that keyboard auto repeat is enabled on the system. The default value is true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoRepeat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRepeat</db:emphasis>(<db:type>bool</db:type> <db:emphasis>on</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="context-prop">
<db:title>context : Qt::ShortcutContext</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ShortcutContext</db:type>
<db:varname>context</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">context</db:synopsisinfo>
<db:synopsisinfo role="setter">setContext</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the context in which the shortcut is valid</db:para>
<db:para>A shortcut's context decides in which circumstances a shortcut is allowed to be triggered. The normal context is <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WindowShortcut</db:link>, which allows the shortcut to trigger if the parent (the widget containing the shortcut) is a subwidget of the active top-level window.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::WindowShortcut</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link></db:type> <db:emphasis role="bold">context</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setContext</db:emphasis>(<db:type><db:link xlink:href="qt.xml#ShortcutContext-enum">Qt::ShortcutContext</db:link></db:type> <db:emphasis>context</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the shortcut is enabled</db:para>
<db:para>An enabled shortcut emits the <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() or <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal when a <db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link> occurs that matches the shortcut's <db:link xlink:href="qshortcut.xml#key-prop">key</db:link>() sequence.</db:para>
<db:para>If the application is in <db:code>WhatsThis</db:code> mode the shortcut will not emit the signals, but will show the &quot;What's This?&quot; text instead.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#whatsThis">whatsThis</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key-prop">
<db:title>key : QKeySequence</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QKeySequence</db:type>
<db:varname>key</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">key</db:synopsisinfo>
<db:synopsisinfo role="setter">setKey</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the shortcut's primary key sequence</db:para>
<db:para>This is a key sequence with an optional combination of Shift, Ctrl, and Alt. The key sequence may be supplied in a number of ways:</db:para>
<db:programlisting language="cpp">setKey(0);                  // no signal emitted
setKey(QKeySequence());     // no signal emitted
setKey(0x3b1);              // Greek letter alpha
setKey(Qt::Key_D);              // 'd', e.g. to delete
setKey('q');                // 'q', e.g. to quit
setKey(Qt::CTRL | Qt::Key_P);       // Ctrl+P, e.g. to print document
setKey(&quot;Ctrl+P&quot;);           // Ctrl+P, e.g. to print document
</db:programlisting>
<db:para>By default, this property contains an empty key sequence.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> <db:emphasis role="bold">key</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setKey</db:emphasis>(const <db:type><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:type> &amp;<db:emphasis>key</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QShortcut">
<db:title>[explicit] QShortcut::QShortcut(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> object for the <db:code role="parameter">parent</db:code>, which should be a <db:link xlink:href="qwindow.xml">QWindow</db:link> or a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>Since no shortcut key sequence is specified, the shortcut will not emit any signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#key-prop">setKey</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QShortcut-1">
<db:title>[explicit] QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const char *<db:emphasis>member</db:emphasis> = nullptr, const char *<db:emphasis>ambiguousMember</db:emphasis> = nullptr, Qt::ShortcutContext <db:emphasis>context</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>const QKeySequence &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>ambiguousMember</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>context</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(const QKeySequence &amp;key, QObject *parent, const char *member, const char *ambiguousMember, Qt::ShortcutContext context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> object for the <db:code role="parameter">parent</db:code>, which should be a <db:link xlink:href="qwindow.xml">QWindow</db:link> or a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>The shortcut operates on its parent, listening for <db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link>s that match the <db:code role="parameter">key</db:code> sequence. Depending on the ambiguity of the event, the shortcut will call the <db:code role="parameter">member</db:code> function, or the <db:code role="parameter">ambiguousMember</db:code> function, if the key press was in the shortcut's <db:code role="parameter">context</db:code>.</db:para>
</db:section>
<db:section xml:id="QShortcut-2">
<db:title>[explicit, since 6.0] QShortcut::QShortcut(QKeySequence::StandardKey <db:emphasis>standardKey</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const char *<db:emphasis>member</db:emphasis> = nullptr, const char *<db:emphasis>ambiguousMember</db:emphasis> = nullptr, Qt::ShortcutContext <db:emphasis>context</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>standardKey</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>member</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>ambiguousMember</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>context</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QKeySequence::StandardKey standardKey, QObject *parent, const char *member, const char *ambiguousMember, Qt::ShortcutContext context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> object for the <db:code role="parameter">parent</db:code>, which should be a <db:link xlink:href="qwindow.xml">QWindow</db:link> or a <db:link xlink:href="qwidget.xml">QWidget</db:link>.</db:para>
<db:para>The shortcut operates on its parent, listening for <db:link xlink:href="qshortcutevent.xml">QShortcutEvent</db:link>s that match the <db:code role="parameter">standardKey</db:code>. Depending on the ambiguity of the event, the shortcut will call the <db:code role="parameter">member</db:code> function, or the <db:code role="parameter">ambiguousMember</db:code> function, if the key press was in the shortcut's <db:code role="parameter">context</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QShortcut-3">
<db:title>QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>const QKeySequence &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(const QKeySequence &amp;key, QObject *parent, Functor functor, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code>.</db:para>
</db:section>
<db:section xml:id="QShortcut-4">
<db:title>QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>const QKeySequence &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(const QKeySequence &amp;key, QObject *parent, const QObject *context, Functor functor, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a pointer to a member function of the <db:code role="parameter">context</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> will not be called.</db:para>
</db:section>
<db:section xml:id="QShortcut-5">
<db:title>QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, FunctorAmbiguous <db:emphasis>functorAmbiguous</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>const QKeySequence &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>FunctorAmbiguous</db:type>
<db:parameter>functorAmbiguous</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(const QKeySequence &amp;key, QObject *parent, const QObject *context, Functor functor, FunctorAmbiguous functorAmbiguous, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code> and <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal to the <db:code role="parameter">functorAmbiguous</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> and <db:code role="parameter">functorAmbiguous</db:code> can be a pointer to a member function of the <db:code role="parameter">context</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> and <db:code role="parameter">functorAmbiguous</db:code> will not be called.</db:para>
</db:section>
<db:section xml:id="QShortcut-6">
<db:title>QShortcut::QShortcut(const QKeySequence &amp;<db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context1</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, const QObject *<db:emphasis>context2</db:emphasis>, FunctorAmbiguous <db:emphasis>functorAmbiguous</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>const QKeySequence &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>FunctorAmbiguous</db:type>
<db:parameter>functorAmbiguous</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(const QKeySequence &amp;key, QObject *parent, const QObject *context1, Functor functor, const QObject *context2, FunctorAmbiguous functorAmbiguous, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code> and <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal to the <db:code role="parameter">functorAmbiguous</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a pointer to a member function of the <db:code role="parameter">context1</db:code> object. The <db:code role="parameter">functorAmbiguous</db:code> can be a pointer to a member function of the <db:code role="parameter">context2</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context1</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> will not be called. If the <db:code role="parameter">context2</db:code> object is destroyed, the <db:code role="parameter">functorAmbiguous</db:code> will not be called.</db:para>
</db:section>
<db:section xml:id="QShortcut-7">
<db:title>[since 6.0] QShortcut::QShortcut(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QKeySequence::StandardKey key, QObject *parent, Functor functor, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QShortcut-8">
<db:title>[since 6.0] QShortcut::QShortcut(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QKeySequence::StandardKey key, QObject *parent, const QObject *context, Functor functor, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a pointer to a member function of the <db:code role="parameter">context</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> will not be called.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QShortcut-9">
<db:title>[since 6.0] QShortcut::QShortcut(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, FunctorAmbiguous <db:emphasis>functorAmbiguous</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>FunctorAmbiguous</db:type>
<db:parameter>functorAmbiguous</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QKeySequence::StandardKey key, QObject *parent, const QObject *context, Functor functor, FunctorAmbiguous functorAmbiguous, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code> and <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal to the <db:code role="parameter">functorAmbiguous</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> and <db:code role="parameter">functorAmbiguous</db:code> can be a pointer to a member function of the <db:code role="parameter">context</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> and <db:code role="parameter">functorAmbiguous</db:code> will not be called.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="QShortcut-10">
<db:title>[since 6.0] QShortcut::QShortcut(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>, const QObject *<db:emphasis>context1</db:emphasis>, Functor <db:emphasis>functor</db:emphasis>, const QObject *<db:emphasis>context2</db:emphasis>, FunctorAmbiguous <db:emphasis>functorAmbiguous</db:emphasis>, Qt::ShortcutContext <db:emphasis>shortcutContext</db:emphasis> = Qt::WindowShortcut)</db:title>
<db:constructorsynopsis>
<db:methodname>QShortcut</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>functor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>context2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>FunctorAmbiguous</db:type>
<db:parameter>functorAmbiguous</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ShortcutContext</db:type>
<db:parameter>shortcutContext</db:parameter>
<db:initializer>Qt::WindowShortcut</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QShortcut(QKeySequence::StandardKey key, QObject *parent, const QObject *context1, Functor functor, const QObject *context2, FunctorAmbiguous functorAmbiguous, Qt::ShortcutContext shortcutContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a <db:link xlink:href="qshortcut.xml">QShortcut</db:link> convenience constructor which connects the shortcut's <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal to the <db:code role="parameter">functor</db:code> and <db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>() signal to the <db:code role="parameter">functorAmbiguous</db:code>.</db:para>
<db:para>The <db:code role="parameter">functor</db:code> can be a pointer to a member function of the <db:code role="parameter">context1</db:code> object. The <db:code role="parameter">functorAmbiguous</db:code> can be a pointer to a member function of the <db:code role="parameter">context2</db:code> object.</db:para>
<db:para>If the <db:code role="parameter">context1</db:code> object is destroyed, the <db:code role="parameter">functor</db:code> will not be called. If the <db:code role="parameter">context2</db:code> object is destroyed, the <db:code role="parameter">functorAmbiguous</db:code> will not be called.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="dtor.QShortcut">
<db:title>[virtual] QShortcut::~QShortcut()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QShortcut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QShortcut()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the shortcut.</db:para>
</db:section>
<db:section xml:id="activated">
<db:title>void QShortcut::activated()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activated()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user types the shortcut's key sequence.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#activatedAmbiguously">activatedAmbiguously</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activatedAmbiguously">
<db:title>void QShortcut::activatedAmbiguously()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activatedAmbiguously</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activatedAmbiguously()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When a key sequence is being typed at the keyboard, it is said to be ambiguous as long as it matches the start of more than one shortcut.</db:para>
<db:para>When a shortcut's key sequence is completed, activatedAmbiguously() is emitted if the key sequence is still ambiguous (i.e., it is the start of one or more other shortcuts). The <db:link xlink:href="qshortcut.xml#activated">activated</db:link>() signal is not emitted in this case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#activated">activated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>[since 6.0] QList&lt;QKeySequence&gt; QShortcut::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QKeySequence&gt;</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QKeySequence&gt; keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of key sequences which trigger this shortcut.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#key-prop">key</db:link></db:member>
<db:member><db:link xlink:href="qshortcut.xml#setKeys">setKeys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parentWidget">
<db:title>QWidget *QShortcut::parentWidget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>parentWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * parentWidget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the shortcut's parent widget.</db:para>
</db:section>
<db:section xml:id="setKeys">
<db:title>[since 6.0] void QShortcut::setKeys(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setKeys</db:methodname>
<db:methodparam>
<db:type>QKeySequence::StandardKey</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setKeys(QKeySequence::StandardKey key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the triggers to those matching the standard key <db:code role="parameter">key</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#key-prop">key</db:link></db:member>
<db:member><db:link xlink:href="qshortcut.xml#keys">keys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKeys-1">
<db:title>[since 6.0] void QShortcut::setKeys(const QList&lt;QKeySequence&gt; &amp;<db:emphasis>keys</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setKeys</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QKeySequence&gt; &amp;</db:type>
<db:parameter>keys</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setKeys(const QList&lt;QKeySequence&gt; &amp;keys)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">keys</db:code> as the list of key sequences that trigger the shortcut.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#key-prop">key</db:link></db:member>
<db:member><db:link xlink:href="qshortcut.xml#keys">keys</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWhatsThis">
<db:title>void QShortcut::setWhatsThis(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWhatsThis</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWhatsThis(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the shortcut's &quot;What's This?&quot; help <db:code role="parameter">text</db:code>.</db:para>
<db:para>The text will be shown when a widget application is in &quot;What's This?&quot; mode and the user types the shortcut <db:link xlink:href="qshortcut.xml#key-prop">key</db:link>() sequence.</db:para>
<db:para>To set &quot;What's This?&quot; help on a menu item (with or without a shortcut key), set the help on the item's action.</db:para>
<db:para>By default, the help text is an empty string.</db:para>
<db:para>This function has no effect in applications that don't use widgets.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#whatsThis">whatsThis</db:link>()</db:member>
<db:member><db:link xlink:href="qwhatsthis.xml#inWhatsThisMode">QWhatsThis::inWhatsThisMode</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#whatsThis-prop">QAction::setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="whatsThis">
<db:title>QString QShortcut::whatsThis() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>whatsThis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString whatsThis() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the shortcut's &quot;What's This?&quot; help text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcut.xml#setWhatsThis">setWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QShortcut</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qshortcut.xml">QShortcut</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="id">
<db:title>int QShortcut::id() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>id</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int id() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the primary key binding's ID.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qshortcutevent.xml#shortcutId">QShortcutEvent::shortcutId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
