<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothServer Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link> class uses the RFCOMM or L2cap protocol to communicate with a Bluetooth device.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link> is used to implement Bluetooth services over RFCOMM or L2cap.</db:para>
<db:para>Start listening for incoming connections with <db:link xlink:href="qbluetoothserver.xml#listen">listen</db:link>(). Wait till the <db:link xlink:href="qbluetoothserver.xml#newConnection">newConnection</db:link>() signal is emitted when a new connection is established, and call <db:link xlink:href="qbluetoothserver.xml#nextPendingConnection">nextPendingConnection</db:link>() to get a <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link> for the new connection.</db:para>
<db:para>To enable other devices to find your service, create a <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> with the applicable attributes for your service and register it using <db:link xlink:href="qbluetoothserviceinfo.xml#registerService">QBluetoothServiceInfo::registerService</db:link>(). Call <db:link xlink:href="qbluetoothserver.xml#serverPort">serverPort</db:link>() to get the channel number that is being used.</db:para>
<db:para>If the <db:link xlink:href="qbluetoothserviceinfo.xml#Protocol-enum">QBluetoothServiceInfo::Protocol</db:link> is not supported by a platform, <db:link xlink:href="qbluetoothserver.xml#listen">listen</db:link>() will return <db:code>false</db:code>. Android and WinRT only support RFCOMM for example.</db:para>
<db:para>On iOS, this class cannot be used because the platform does not expose an API which may permit access to <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link> related features.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link></db:member>
<db:member><db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothServer::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PoweredOffError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InputOutputError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServiceAlreadyRegisteredError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedProtocolError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MissingPermissionsError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes Bluetooth server error types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An unknown error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::PoweredOffError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Bluetooth adapter is powered off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::InputOutputError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An input output error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::ServiceAlreadyRegisteredError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The service or port was already registered</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::UnsupportedProtocolError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qbluetoothserviceinfo.xml#Protocol-enum">Protocol</db:link> is not supported on this platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link></db:emphasis>::MissingPermissionsError (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The operating system requests permissions which were not granted by the user.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothServer">
<db:title>[explicit] QBluetoothServer::QBluetoothServer(QBluetoothServiceInfo::Protocol <db:emphasis>serverType</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBluetoothServer</db:methodname>
<db:methodparam>
<db:type>QBluetoothServiceInfo::Protocol</db:type>
<db:parameter>serverType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothServer(QBluetoothServiceInfo::Protocol serverType, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a bluetooth server with <db:code role="parameter">parent</db:code> and <db:code role="parameter">serverType</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBluetoothServer">
<db:title>[virtual] QBluetoothServer::~QBluetoothServer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBluetoothServer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBluetoothServer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the bluetooth server.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>void QBluetoothServer::close()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Closes and resets the listening socket. Any already established <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link> continues to operate and must be separately <db:link xlink:href="qbluetoothsocket.xml#close">closed</db:link>.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QBluetoothServer::Error QBluetoothServer::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothServer::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothServer::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error of the <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link>.</db:para>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 6.2] void QBluetoothServer::errorOccurred(QBluetoothServer::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QBluetoothServer::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QBluetoothServer::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an <db:code role="parameter">error</db:code> occurs.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserver.xml#Error-enum">QBluetoothServer::Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPendingConnections">
<db:title>bool QBluetoothServer::hasPendingConnections() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasPendingConnections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasPendingConnections() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if a connection is pending, otherwise false.</db:para>
</db:section>
<db:section xml:id="isListening">
<db:title>bool QBluetoothServer::isListening() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isListening</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isListening() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the server is listening for incoming connections, otherwise false.</db:para>
</db:section>
<db:section xml:id="listen">
<db:title>bool QBluetoothServer::listen(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis> = QBluetoothAddress(), quint16 <db:emphasis>port</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>listen</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
<db:initializer>QBluetoothAddress()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>port</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool listen(const QBluetoothAddress &amp;address, quint16 port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start listening for incoming connections to <db:code role="parameter">address</db:code> on <db:code role="parameter">port</db:code>. <db:code role="parameter">address</db:code> must be a local Bluetooth adapter address and <db:code role="parameter">port</db:code> must be larger than zero and not be taken already by another Bluetooth server object. It is recommended to avoid setting a port number to enable the system to automatically choose a port.</db:para>
<db:para>Returns <db:code>true</db:code> if the operation succeeded and the server is listening for incoming connections, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the server object is already listening for incoming connections this function always returns <db:code>false</db:code>. <db:link xlink:href="qbluetoothserver.xml#close">close</db:link>() should be called before calling this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#isListening">isListening</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserver.xml#newConnection">newConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listen-1">
<db:title>QBluetoothServiceInfo QBluetoothServer::listen(const QBluetoothUuid &amp;<db:emphasis>uuid</db:emphasis>, const QString &amp;<db:emphasis>serviceName</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QBluetoothServiceInfo</db:type>
<db:methodname>listen</db:methodname>
<db:methodparam>
<db:type>const QBluetoothUuid &amp;</db:type>
<db:parameter>uuid</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>serviceName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothServiceInfo listen(const QBluetoothUuid &amp;uuid, const QString &amp;serviceName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function for registering an SPP service with <db:code role="parameter">uuid</db:code> and <db:code role="parameter">serviceName</db:code>. Because this function already registers the service, the <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> object which is returned can not be changed any more. To shutdown the server later on it is required to call <db:link xlink:href="qbluetoothserviceinfo.xml#unregisterService">QBluetoothServiceInfo::unregisterService</db:link>() and <db:link xlink:href="qbluetoothserver.xml#close">close</db:link>() on this server object.</db:para>
<db:para>Returns a registered <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link> instance if successful otherwise an invalid <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link>. This function always assumes that the default Bluetooth adapter should be used.</db:para>
<db:para>If the server object is already listening for incoming connections this function returns an invalid <db:link xlink:href="qbluetoothserviceinfo.xml">QBluetoothServiceInfo</db:link>.</db:para>
<db:para>For an RFCOMM server this function is equivalent to following code snippet.</db:para>
<db:programlisting language="cpp">    QBluetoothServiceInfo serviceInfo;
    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceName, serviceName);
    QBluetoothServiceInfo::Sequence browseSequence;
    browseSequence &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::ServiceClassUuid::PublicBrowseGroup));
    serviceInfo.setAttribute(QBluetoothServiceInfo::BrowseGroupList,
                             browseSequence);

    QBluetoothServiceInfo::Sequence profileSequence;
    QBluetoothServiceInfo::Sequence classId;
    classId &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::ServiceClassUuid::SerialPort));
    classId &amp;lt;&amp;lt; QVariant::fromValue(quint16(0x100));
    profileSequence.append(QVariant::fromValue(classId));
    serviceInfo.setAttribute(QBluetoothServiceInfo::BluetoothProfileDescriptorList,
                             profileSequence);

    classId.clear();
    //Android requires custom uuid to be set as service class
    classId &amp;lt;&amp;lt; QVariant::fromValue(uuid);
    classId &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::ServiceClassUuid::SerialPort));
    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceClassIds, classId);
    serviceInfo.setServiceUuid(uuid);

    QBluetoothServiceInfo::Sequence protocolDescriptorList;
    QBluetoothServiceInfo::Sequence protocol;
    protocol &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::ProtocolUuid::L2cap));
    if (d-&amp;gt;serverType == QBluetoothServiceInfo::L2capProtocol)
        protocol &amp;lt;&amp;lt; QVariant::fromValue(serverPort());
    protocolDescriptorList.append(QVariant::fromValue(protocol));
    protocol.clear();
    protocol &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::ProtocolUuid::Rfcomm))
             &amp;lt;&amp;lt; QVariant::fromValue(quint8(serverPort()));
    protocolDescriptorList.append(QVariant::fromValue(protocol));
    serviceInfo.setAttribute(QBluetoothServiceInfo::ProtocolDescriptorList,
                             protocolDescriptorList);
    bool result = serviceInfo.registerService();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#isListening">isListening</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserver.xml#newConnection">newConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserver.xml#listen">listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxPendingConnections">
<db:title>int QBluetoothServer::maxPendingConnections() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maxPendingConnections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maxPendingConnections() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of pending connections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#setMaxPendingConnections">setMaxPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newConnection">
<db:title>void QBluetoothServer::newConnection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>newConnection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void newConnection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a new connection is available.</db:para>
<db:para>The connected slot should call <db:link xlink:href="qbluetoothserver.xml#nextPendingConnection">nextPendingConnection</db:link>() to get a <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link> object to send and receive data over the connection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#nextPendingConnection">nextPendingConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothserver.xml#hasPendingConnections">hasPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextPendingConnection">
<db:title>QBluetoothSocket *QBluetoothServer::nextPendingConnection()</db:title>
<db:methodsynopsis>
<db:type>QBluetoothSocket *</db:type>
<db:methodname>nextPendingConnection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothSocket * nextPendingConnection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link> for the next pending connection. It is the callers responsibility to delete the pointer.</db:para>
</db:section>
<db:section xml:id="securityFlags">
<db:title>QBluetooth::SecurityFlags QBluetoothServer::securityFlags() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetooth::SecurityFlags</db:type>
<db:methodname>securityFlags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetooth::SecurityFlags securityFlags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Bluetooth security flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#setSecurityFlags">setSecurityFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serverAddress">
<db:title>QBluetoothAddress QBluetoothServer::serverAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothAddress</db:type>
<db:methodname>serverAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothAddress serverAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the server address.</db:para>
</db:section>
<db:section xml:id="serverPort">
<db:title>quint16 QBluetoothServer::serverPort() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>serverPort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 serverPort() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the server port number.</db:para>
</db:section>
<db:section xml:id="serverType">
<db:title>QBluetoothServiceInfo::Protocol QBluetoothServer::serverType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothServiceInfo::Protocol</db:type>
<db:methodname>serverType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothServiceInfo::Protocol serverType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the <db:link xlink:href="qbluetoothserver.xml">QBluetoothServer</db:link>.</db:para>
</db:section>
<db:section xml:id="setMaxPendingConnections">
<db:title>void QBluetoothServer::setMaxPendingConnections(int <db:emphasis>numConnections</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaxPendingConnections</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>numConnections</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaxPendingConnections(int numConnections)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum number of pending connections to <db:code role="parameter">numConnections</db:code>. If the number of pending sockets exceeds this limit new sockets will be rejected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#maxPendingConnections">maxPendingConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSecurityFlags">
<db:title>void QBluetoothServer::setSecurityFlags(QBluetooth::SecurityFlags <db:emphasis>security</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSecurityFlags</db:methodname>
<db:methodparam>
<db:type>QBluetooth::SecurityFlags</db:type>
<db:parameter>security</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSecurityFlags(QBluetooth::SecurityFlags security)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the Bluetooth security flags to <db:code role="parameter">security</db:code>. This function must be called before calling <db:link xlink:href="qbluetoothserver.xml#listen">listen</db:link>(). The Bluetooth link will always be encrypted when using Bluetooth 2.1 devices as encryption is mandatory.</db:para>
<db:para>Android only supports two levels of security (secure and non-secure). If this flag is set to <db:link xlink:href="qbluetooth.xml#Security-enum">QBluetooth::Security::NoSecurity</db:link> the server object will not employ any authentication or encryption. Any other security flag combination will trigger a secure Bluetooth connection.</db:para>
<db:para>On macOS, security flags are not supported and will be ignored.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothserver.xml#securityFlags">securityFlags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
