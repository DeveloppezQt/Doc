<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MQTT Subscriptions Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating a application that communicates with an MQTT broker.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;subscriptionwindow.h&quot;
#include &quot;ui_subscriptionwindow.h&quot;

SubscriptionWindow::SubscriptionWindow(QMqttSubscription *sub, QWidget *parent) :
    QWidget(parent),
    ui(new Ui::SubscriptionWindow),
    m_sub(sub)
{
    ui-&amp;gt;setupUi(this);

    ui-&amp;gt;labelSub-&amp;gt;setText(m_sub-&amp;gt;topic().filter());
    ui-&amp;gt;labelQoS-&amp;gt;setText(QString::number(m_sub-&amp;gt;qos()));
    updateStatus(m_sub-&amp;gt;state());
    connect(m_sub, &amp;amp;QMqttSubscription::messageReceived, this, &amp;amp;SubscriptionWindow::updateMessage);
    connect(m_sub, &amp;amp;QMqttSubscription::stateChanged, this, &amp;amp;SubscriptionWindow::updateStatus);
    connect(m_sub, &amp;amp;QMqttSubscription::qosChanged, [this](quint8 qos) {
        ui-&amp;gt;labelQoS-&amp;gt;setText(QString::number(qos));
    });
    connect(ui-&amp;gt;pushButton, &amp;amp;QAbstractButton::clicked, m_sub, &amp;amp;QMqttSubscription::unsubscribe);
}

SubscriptionWindow::~SubscriptionWindow()
{
    m_sub-&amp;gt;unsubscribe();
    delete ui;
}

void SubscriptionWindow::updateMessage(const QMqttMessage &amp;amp;msg)
{
    ui-&amp;gt;listWidget-&amp;gt;addItem(msg.payload());
}

void SubscriptionWindow::updateStatus(QMqttSubscription::SubscriptionState state)
{
    switch (state) {
    case QMqttSubscription::Unsubscribed:
        ui-&amp;gt;labelStatus-&amp;gt;setText(QLatin1String(&quot;Unsubscribed&quot;));
        break;
    case QMqttSubscription::SubscriptionPending:
        ui-&amp;gt;labelStatus-&amp;gt;setText(QLatin1String(&quot;Pending&quot;));
        break;
    case QMqttSubscription::Subscribed:
        ui-&amp;gt;labelStatus-&amp;gt;setText(QLatin1String(&quot;Subscribed&quot;));
        break;
    case QMqttSubscription::Error:
        ui-&amp;gt;labelStatus-&amp;gt;setText(QLatin1String(&quot;Error&quot;));
        break;
    default:
        ui-&amp;gt;labelStatus-&amp;gt;setText(QLatin1String(&quot;--Unknown--&quot;));
        break;
    }
}

</db:programlisting>
</db:article>
