<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>What's New in Qt 6.3</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the new features in Qt 6.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="new-and-restored-modules-in-qt-6-3">
<db:title>New and Restored Modules in Qt 6.3</db:title>
<db:para>Qt 6.3 adds the following module:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Language Server: implements the <db:link xlink:href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/">Language Server Protocol Specification</db:link> and the <db:link xlink:href="https://www.jsonrpc.org/specification">JsonRpc 2.0</db:link> protocol. The module does not contain a public API.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt 6.3 reintroduces the following modules that were not present in Qt 6.2. All listed modules were ported to Qt 6 and the CMake build system.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtpdf-index.xml">Qt PDF</db:link> (in Technical Preview)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A more detailed list of changes to each module can be found in <db:link xlink:href="modulechanges.xml">Changes to Qt Modules in Qt 6</db:link>.</db:para>
</db:section>
<db:section xml:id="new-features-in-qt-6-3">
<db:title>New Features in Qt 6.3</db:title>
<db:section xml:id="qt-core-module">
<db:title>Qt Core Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qtfuture.xml#whenAll">QtFuture::whenAll</db:link>() and <db:link xlink:href="qtfuture.xml#whenAny">QtFuture::whenAny</db:link>() functions for combining multiple futures.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qdir.xml#mkdir">QDir::mkdir</db:link>() and <db:link xlink:href="qfile.xml#open">QFile::open</db:link>() overloads accepting a permission argument.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml">QMetaType</db:link> can now convert any <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;T&gt; to <db:link xlink:href="qfuture.xml">QFuture</db:link>&lt;void&gt;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qdiriterator.xml#nextFileInfo">QDirIterator::nextFileInfo</db:link>(), to advance and get full file information.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocale.xml">QLocale</db:link>'s mappings of language codes to and from Language values now have overloads specifying which ISO 639 code types to consider.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qregularexpressionmatch.xml">QRegularExpressionMatch</db:link> now has <db:link xlink:href="qregularexpressionmatch.xml#hasCaptured">hasCaptured</db:link>() methods to test whether a given group was captured at all.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> gained a new enum and constructor that allows you to choose whether the process environment shall be inherited from the parent process when a respective <db:link xlink:href="qprocess.xml">QProcess</db:link> is launched.</db:para>
<db:warning>
<db:para>In older Qt versions, the default behavior was to inherit, although the documentation said it won't. Qt 6.3 changes the behavior of the default constructor to actually match the documentation. That is, launching a <db:link xlink:href="qprocess.xml">QProcess</db:link> with a <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> created by <db:link xlink:href="qprocessenvironment.xml#QProcessEnvironment">QProcessEnvironment</db:link>() will be launched in an empty environment. Use <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link>(<db:link xlink:href="qprocessenvironment.xml#Initialization-enum">QProcessEnvironment::InheritFromParent</db:link>) to revert to the old behavior.</db:para>
</db:warning>
<db:para>Also, added method <db:link xlink:href="qprocessenvironment.xml#inheritsFromParent">inheritsFromParent</db:link>() to test for an instance constructed the new way.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvarlengtharray.xml">QVarLengthArray</db:link> now has <db:link xlink:href="qvarlengtharray.xml#emplace">emplace</db:link>() and <db:link xlink:href="qvarlengtharray.xml#emplace_back">emplace_back</db:link>() methods.</db:para>
</db:listitem>
<db:listitem>
<db:para>Time formats used by <db:link xlink:href="qlocale.xml">QLocale</db:link>, <db:link xlink:href="qtime.xml">QTime</db:link> and <db:link xlink:href="qdatetime.xml">QDateTime</db:link>'s parsing and serialization now recognize 'aP' and 'Ap' format specifiers to obtain an AM/PM indicator, using the locale-appropriate case for the indicator, where previously the author of a time format had to pick a case that might conflict with the user's locale. For <db:link xlink:href="qtime.xml">QTime</db:link> and <db:link xlink:href="qdatetime.xml">QDateTime</db:link> the locale is always C, whose indicators are uppercase. For <db:link xlink:href="qlocale.xml">QLocale</db:link>, the case will now match that of amText() or pmText(). Previously, 'aP' would have been read as a lower-case indicator followed by a 'P' and 'Ap' as an upper-case indicator followed by a 'p'. The 'P' or 'p' will now be treated as part of the format specifier: if the prior behavior is desired, either use 'APp' or 'apP' as format specifier or quote the 'p' or 'P' in the format. The prior 'a', 'ap', 'A' and 'AP' specifiers are otherwise unaffected.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdebug.xml">QDebug</db:link> can now stream <db:link xlink:href="qvarlengtharray.xml">QVarLengthArray</db:link> objects.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#findChildren">QObject::findChildren</db:link>() now has an overload taking no name.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added overloads and method names to <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> for greater compatibility with std::counting_semaphore and std::chrono.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> now has rvalue constructors taking <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcbormap.xml#fromJsonObject">QCborMap::fromJsonObject</db:link>() and <db:link xlink:href="qcborarray.xml#fromJsonArray">QCborArray::fromJsonArray</db:link>() now have rvalue overloads.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qbytearrayview.xml#trimmed">QByteArrayView::trimmed</db:link>() to elide leading and trailing space.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added number-parsing methods to <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added isValidUtf8() methods to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>, and <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qcryptographichash.xml#resultView">QCryptographicHash::resultView</db:link>() to provide a view over <db:link xlink:href="qcryptographichash.xml#result">result</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>QStringBuilder now supports <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="quuid.xml">QUuid</db:link> can now be constructed from <db:link xlink:href="qanystringview.xml">QAnyStringView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocale.xml">QLocale</db:link> now has a constructor taking a <db:link xlink:href="qstringview.xml">QStringView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qbytearraylist.xml#join">QByteArrayList::join</db:link>() now has an overload taking <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcryptographichash.xml#addData-2">QCryptographicHash::addData</db:link>() now has an overload taking <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtswap-proxy.xml#qSwap">qSwap</db:link>() is now constexpr.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added new public CMake API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>for setting up project-wide defaults: <db:link xlink:href="qt-standard-project-setup.xml">qt_standard_project_setup()</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>for deploying applications: <db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for generating a qt.conf file at installation time: <db:link xlink:href="qt-deploy-qt-conf.xml">qt_deploy_qt_conf()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for deploying runtime dependencies at installation time: <db:link xlink:href="qt-deploy-runtime-dependencies.xml">qt_deploy_runtime_dependencies()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for performing platform-specific tasks associated with a Qt project: <db:link xlink:href="qt-finalize-project.xml">qt_finalize_project()</db:link> (in Technical Preview)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-gui-module">
<db:title>Qt GUI Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Calling <db:link xlink:href="qguiapplication.xml#layoutDirection-prop">QGuiApplication::setLayoutDirection</db:link>() with a non-auto value now disables the auto-detection based on installed translators.</db:para>
</db:listitem>
<db:listitem>
<db:para>URL handlers passed to <db:link xlink:href="qdesktopservices.xml#setUrlHandler">QDesktopServices::setUrlHandler</db:link>() must now be removed by calling <db:link xlink:href="qdesktopservices.xml#unsetUrlHandler">unsetUrlHandler</db:link>() before they are destroyed. Relying on the handler's destructor to implicitly unset them is deprecated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> now enables all Vulkan 1.0 features that are reported as supported by the physical device.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-module">
<db:title>Qt Quick Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New item added: <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>All <db:link xlink:href="qtquickhandlers-index.xml">pointer handlers</db:link> have settable parent properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-hoverhandler.xml">HoverHandler</db:link> and <db:link xlink:href="qml-qtquick-wheelhandler.xml">WheelHandler</db:link> have a blocking property to control whether the hover and wheel events respectively propagate to items and handlers behind the handler's parent.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> now has one more <db:link xlink:href="qml-qtquick-taphandler.xml#gesturePolicy-prop">gesturePolicy</db:link> value: DragWithinBounds; it is similar to WithinBounds, except that even if the user drags while holding the point pressed, <db:link xlink:href="qml-qtquick-taphandler.xml#timeHeld-prop">timeHeld</db:link> is not reset during dragging, and the <db:link xlink:href="qml-qtquick-taphandler.xml#longPressed-signal">longPressed</db:link> signal is emitted regardless of the drag threshold, if the user holds it that long. This is useful for implementing press-drag-release components such as menus (like the pie menu in the pointer handlers example) while using timeHeld to directly drive an &quot;opening&quot; animation.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/piemenu.gif"/>
</db:imageobject>
</db:mediaobject>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml#clipRect">QQuickItem::clipRect</db:link>() now provides the region visible in the <db:link xlink:href="qquickitem.xml#viewportItem">viewport</db:link> (the parent <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> or <db:link xlink:href="qml-qtquick-window.xml">Window</db:link>), and can be used to limit scene graph node vertices as an optimization in custom items, at the cost of having <db:link xlink:href="qquickitem.xml#updatePaintNode">updatePaintNode</db:link>() called more often. See docs about the new <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemObservesViewport</db:link> and <db:link xlink:href="qquickitem.xml#Flag-enum">QQuickItem::ItemIsViewport</db:link> flags.</db:para>
</db:listitem>
<db:listitem>
<db:para>To save memory and startup time, <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> now avoid generating scene graph nodes for large portions of text that are invisible because of falling outside the viewport (<db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> or <db:link xlink:href="qml-qtquick-window.xml">Window</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-text.xml">Text</db:link> now renders horizontal rules from HTML or Markdown.</db:para>
</db:listitem>
<db:listitem>
<db:para>In <db:link xlink:href="qml-qtquick-text.xml">Text</db:link>, horizontal rules and underline/overline/strikethrough lines can be colored by CSS rules included in HTML source.</db:para>
<db:programlisting language="qml">import QtQuick

Text {
    textFormat: Text.RichText
    wrapMode: Text.WordWrap
    width: 440
    font.pointSize: 12
    text: `&amp;lt;p&amp;gt;&amp;lt;u style=&quot;color: green;&quot;&amp;gt;green with underline&amp;lt;/u&amp;gt;
              &amp;lt;span style=&quot;text-decoration: underline; text-decoration-color: green;&quot;&amp;gt;
                green underline&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
           &amp;lt;p&amp;gt;&amp;lt;s style=&quot;background-color: lightgrey;&quot;&amp;gt;plain strikethrough&amp;lt;/s&amp;gt;
              &amp;lt;span style=&quot;text-decoration: line-through; text-decoration-color: orange;&quot;&amp;gt;
                orange strikethrough&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
           &amp;lt;p&amp;gt;&amp;lt;span style=&quot;text-decoration: overline;&quot;&amp;gt;plain overline&amp;lt;/span&amp;gt;
              &amp;lt;span style=&quot;text-decoration: overline; text-decoration-color: red;&quot;&amp;gt;
                red overline&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;`
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml#dumpItemTree">QQuickItem::dumpItemTree</db:link>() has been added; it can be called from C++ (similar to <db:link xlink:href="qobject.xml#dumpObjectTree">QObject::dumpObjectTree</db:link>()) or from QML, to show the <db:link xlink:href="qtlogging.xml#qDebug">qDebug</db:link>-operator output for an item and all its children, indented to show the tree structure.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> <db:link xlink:href="qml-qtquick-taphandler.xml#tapped-signal">tapped</db:link>, <db:link xlink:href="qml-qtquick-taphandler.xml#singleTapped-signal">singleTapped</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml#doubleTapped-signal">doubleTapped</db:link> signals now have two arguments: the <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> instance, and the button being tapped. If you need a signal handler, you should write an explicit function to receive those arguments:</db:para>
<db:programlisting language="qml">onTapped: function(point, button) { ... }
onDoubleTapped: (point, button)=&amp;gt; ...
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> <db:link xlink:href="qml-qtquick-draghandler.xml#activeTranslation-prop">activeTranslation</db:link> now holds the amount of movement since the drag gesture began. <db:link xlink:href="qml-qtquick-draghandler.xml#persistentTranslation-prop">persistentTranslation</db:link> holds the accumulated sum of movement that has occurred during subsequent drag gestures, and can be reset to arbitrary values between gestures.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-controls-module">
<db:title>Qt Quick Controls Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New controls added: <db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link>, <db:link xlink:href="qml-qtquick-controls-calendar.xml">Calendar</db:link>, <db:link xlink:href="qml-qtquick-controls-calendarmodel.xml">CalendarModel</db:link>, <db:link xlink:href="qml-qtquick-controls-dayofweekrow.xml">DayOfWeekRow</db:link>, <db:link xlink:href="qml-qtquick-controls-monthgrid.xml">MonthGrid</db:link>, <db:link xlink:href="qml-qtquick-controls-weeknumbercolumn.xml">WeekNumberColumn</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-dialogs-module">
<db:title>Qt Quick Dialogs Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick-dialogs-folderdialog.xml">FolderDialog</db:link> and <db:link xlink:href="qml-qtquick-dialogs-messagedialog.xml">MessageDialog</db:link>. These are native dialogs on platforms that support it, and non-native Qt Quick dialogs on other platforms.</db:para>
<db:para>The non-native dialogs support all of the non-native styles: Basic, Fusion, Imagine, Material and Universal.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-widgets-module">
<db:title>Qt Widgets Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtoolbar.xml">QToolBar</db:link> now supports scrolling with a kinetic wheel or track pad.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Several new <db:link xlink:href="qstyle.xml">QStyle</db:link> enum values are available to allow styles to customize additional look and feel aspects of a widget-based UI:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstyle.xml#PixelMetric-enum">PM_LineEditIconMargin</db:link> to customize the margin around an icon in a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyle.xml#StyleHint-enum">SH_Table_AlwaysDrawLeftTopGridLines</db:link> to control whether the left and top grid lines are always painted, also when the headers are hidden.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyle.xml#StyleHint-enum">SH_SpinBox_SelectOnStep</db:link> to control whether changing the value using the up/down buttons should select the text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstyle.xml#StandardPixmap-enum">SP_TabCloseButton</db:link> to specify an icon for the close button in the tab of a <db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-network-module">
<db:title>Qt Network Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> learned transportMedium. A property that returns the transport medium of the primary network interface.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qnetworkinformation.xml">QNetworkInformation</db:link> also learned isMetered. A property that returns whether the network is metered.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-qml-module">
<db:title>Qt QML Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added tech preview QML type compiler (qmltc) that compiles QML type structure to C++.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added several new warnings to qmllint which now uses compiler infrastructure.</db:para>
</db:listitem>
<db:listitem>
<db:para>The header only qmlintegration module allows to mark types for registration in a QML module, without adding a dependency to qtdeclarative. Those can then be added to a QML module via the new <db:link xlink:href="qt-generate-foreign-qml-types.xml#qt6-generate-foreign-qml-types">qt_generate_foreign_qml_types()</db:link> CMake API.</db:para>
</db:listitem>
<db:listitem>
<db:para>qmlcachegen compiles suitable functions and expressions to C++ now, for improved performance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added new public CMake API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>for registering a target's foreign types in a QML module: <db:link xlink:href="qt-generate-foreign-qml-types.xml">qt_generate_foreign_qml_types()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for compiling QML code into C++: <db:link xlink:href="qt-target-compile-qml-to-cpp.xml">qt_target_compile_qml_to_cpp()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for deploying QML applications: <db:link xlink:href="qt-generate-deploy-qml-app-script.xml">qt_generate_deploy_qml_app_script()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for deploying the runtime components of QML modules at installation time: <db:link xlink:href="qt-deploy-qml-imports.xml">qt_deploy_qml_imports()</db:link> (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para>for querying information about a QML module: <db:link xlink:href="qt-query-qml-module.xml">qt_query_qml_module()</db:link> (in Technical Preview)</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-3d-module">
<db:title>Qt Quick 3D Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml">ReflectionProbe</db:link>, making it possible for models to show reflections.</db:para>
</db:listitem>
<db:listitem>
<db:para>Particles3D: New ParticleCustomShape3D element which loads emitting shapes from custom CBOR binary files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Particles3D: Sprite particles now have support for the 3D environment lights.</db:para>
</db:listitem>
<db:listitem>
<db:para>Particles3D: New DynamicBurst element for declarative dynamic emitting and for emitting at trail start/end times.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-resourceloader.xml">ResourceLoader</db:link> component for explicit setting of resource lifetimes (in Technical Preview)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>: Added support for ClearCoat, Transmission, and Refraction.</db:para>
</db:listitem>
<db:listitem>
<db:para>glTF2: Importers now support the following additional extensions: KHR_materials_clearcoat, KHR_materials_ior, KHR_materials_transmission, KHR_materials_volume</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-webengine-module">
<db:title>Qt WebEngine Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Now builds with Python 3 instead of Python 2</db:para>
</db:listitem>
<db:listitem>
<db:para>Added API for replacing QML touch selection menu</db:para>
</db:listitem>
<db:listitem>
<db:para>Added new public CMake API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>for converting Hunspell dictionaries to the Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> .bdic binary format: <db:link xlink:href="qt-add-webengine-dictionary.xml">qt_add_webengine_dictionary()</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-data-visualization-module">
<db:title>Qt Data Visualization Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added a new <db:link xlink:href="qsurface3dseries.xml#wireframeColor-prop">wireframeColor</db:link> property to set the wireframe color for a <db:link xlink:href="qsurface3dseries.xml">QSurface3DSeries</db:link> in <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added a new <db:link xlink:href="qbar3dseries.xml#rowColors-prop">rowColors</db:link> property to set different colors for rows of bars in <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added a new <db:link xlink:href="q3dbars.xml#barSeriesMargin-prop">barSeriesMargin</db:link> property to set the margin for individual bars in <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added a <db:link xlink:href="qabstract3dgraph.xml#hasSeries">hasSeries</db:link> function to check whether a series is already added in <db:link xlink:href="qabstract3dgraph.xml">QAbstract3DGraph</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for 16-bit height maps.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-positioning-module">
<db:title>Qt Positioning Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>New <db:link xlink:href="qgeopositioninfo.xml#Attribute-enum">DirectionAccuracy</db:link> attribute is added for Android and iOS platforms. It represents the accuracy of the provided bearing.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-bluetooth-module">
<db:title>Qt Bluetooth Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Extended the Windows implementation of <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link>. It reports the adapter state correctly, and allows to toggle its state. Support for connected/disconnected devices tracking is still missing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extended <db:link xlink:href="qbluetoothdeviceinfo.xml">QBluetoothDeviceInfo</db:link> API to expose Bluetooth Low Energy service data as published during the advertisement.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-wayland-compositor-module">
<db:title>Qt Wayland Compositor Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added an API to create custom shell extensions. For instructions on usage, see <db:link xlink:href="qtwaylandcompositor-custom-shell-example.xml">the example</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added a <db:link xlink:href="qtwaylandcompositor-qtshell-example.xml">Qt Shell</db:link> which supports all windowing system features available in Qt.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for the <db:link xlink:href="qml-qtwayland-compositor-presentationtime-presentationtime.xml">presentation-time</db:link> protocol.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for multiple input method protocols in the same server, in order to support clients from different sources.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="platform-changes">
<db:title>Platform Changes</db:title>
<db:section xml:id="technology-preview-platforms">
<db:title>Technology Preview Platforms</db:title>
<db:section xml:id="webassembly">
<db:title>WebAssembly</db:title>
<db:para>Several improvements have been made for Qt for WebAssembly. See the platform documentation at <db:link xlink:href="wasm.xml">Qt for WebAssembly</db:link> for details.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Added support for copy/paste of images and html text to the system clipboard.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added SIMD support. Note that enabling SIMD requires building Qt from source.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for calling <db:link xlink:href="qeventloop.xml#exec">QEventLoop::exec</db:link>() and <db:link xlink:href="qthread.xml#exec">QThread::exec</db:link>() on secondary threads.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for calling <db:link xlink:href="qeventloop.xml#exec">QEventLoop::exec</db:link>() and <db:link xlink:href="qdialog.xml#exec">QDialog::exec</db:link>() on the main thread using <db:link xlink:href="https://emscripten.org/docs/porting/asyncify.html">Emscripten Asyncify</db:link>. Note that enabling asyncify requires building Qt from source.</db:para>
</db:listitem>
<db:listitem>
<db:para>Drag-and-drop now works for asyncify-enabled builds.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for tunneling TCP and UDP sockets over WebSockets, using Emscriptens <db:link xlink:href="https://emscripten.org/docs/porting/networking.html">Emulated POSIX TCP Sockets over WebSockets</db:link>. This support is limited to async sockets on the main thread.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="windows-on-arm">
<db:title>Windows on ARM</db:title>
<db:para>Windows on ARM64 remains in Technology Preview as problems with optimized builds of Qt could not be resolved yet.</db:para>
</db:section>
</db:section>
<db:section xml:id="mobile-platforms">
<db:title>Mobile Platforms</db:title>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qtdoc-demos-hangman-example.xml">In-App purchasing demo</db:link> and Qt 3D: Planets QML Example had android specific improvements.</db:para>
</db:listitem>
<db:listitem>
<db:para>Updated Gradle to 7.2.0 and the Android Gradle Plugin (AGP) to 7.0.2 (requires JDK 11 or above).</db:para>
</db:listitem>
<db:listitem>
<db:para>Added missing _make_aab target for CMake Android projects.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added multi-ABI build for CMake, see <db:link xlink:href="cmake-target-property-qt-android-abis.xml">QT_ANDROID_ABIS</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>QML modules are now staged to a common directory named &quot;android-qml&quot; under the user's build folder. This acts as a common import path for <db:link xlink:href="android-deploy-qt-tool.xml">The androiddeployqt Tool</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QML Test Bench now works for Android builds.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="ios">
<db:title>iOS</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>CMake-based projects now generate a default launch screen.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="embedded-platforms">
<db:title>Embedded Platforms</db:title>
<db:section xml:id="boot-to-qt">
<db:title>Boot to Qt</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Boot to Qt stack was updated to use Yocto 3.4 (honister).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt PDF and Qt Language Server were included in Boot to Qt stack.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="other">
<db:title>Other</db:title>
<db:section xml:id="wayland">
<db:title>Wayland</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Implemented support for DataDeviceV3 protocol.</db:para>
</db:listitem>
<db:listitem>
<db:para>Upgraded wl_seat support to version 7.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for selecting input method protocol, if the server supports multiple interfaces. This can be done by setting QT_WAYLAND_TEXT_INPUT_PROTOCOL to the name of the protocol.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
<db:section xml:id="list-of-api-changes">
<db:title>List of API Changes</db:title>
<db:para>These pages contain an overview of API changes in Qt 6.3:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="newclasses63.xml">New Classes and Functions in Qt 6.3</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteclasses.xml">Obsolete Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="additions-to-all-qt-6-releases">
<db:title>Additions to All Qt 6 Releases</db:title>
<db:variablelist role="whatsnewqt6">
<db:varlistentry>
<db:term><db:link xlink:href="newclasses60.xml" xlink:role="page">New Classes and Functions in Qt 6.0</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.0.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses61.xml" xlink:role="page">New Classes and Functions in Qt 6.1</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.1.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses62.xml" xlink:role="page">New Classes and Functions in Qt 6.2</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.2.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses63.xml" xlink:role="page">New Classes and Functions in Qt 6.3</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.3.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses64.xml" xlink:role="page">New Classes and Functions in Qt 6.4</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.4.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses65.xml" xlink:role="page">New Classes and Functions in Qt 6.5</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.5.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses66.xml" xlink:role="page">New Classes and Functions in Qt 6.6</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.6.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="newclasses67.xml" xlink:role="page">New Classes and Functions in Qt 6.7</db:link></db:term>
<db:listitem>
<db:para>A list of new APIs in Qt 6.7.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew60.xml" xlink:role="page">What's New in Qt 6.0</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.0.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew61.xml" xlink:role="page">What's New in Qt 6.1</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.1.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew62.xml" xlink:role="page">What's New in Qt 6.2</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.2.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew63.xml" xlink:role="page">What's New in Qt 6.3</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.3.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew64.xml" xlink:role="page">What's New in Qt 6.4</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.4.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew65.xml" xlink:role="page">What's New in Qt 6.5</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.5.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew66.xml" xlink:role="page">What's New in Qt 6.6</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.6.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="whatsnew67.xml" xlink:role="page">What's New in Qt 6.7</db:link></db:term>
<db:listitem>
<db:para>Lists the new features in Qt 6.7.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
