<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusTcpServer Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodbustcpserver.xml">QModbusTcpServer</db:link> class represents a Modbus server that uses a TCP server for its communication with the Modbus client.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusTcpServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmodbusserver.xml" xlink:role="class">QModbusServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Communication via Modbus requires the interaction between a single Modbus client instance and single Modbus server. This class provides the Modbus server implementation via a TCP server.</db:para>
<db:para>Modbus TCP networks can have multiple servers. Servers are read/written by a client device represented by <db:link xlink:href="qmodbustcpclient.xml">QModbusTcpClient</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusTcpServer">
<db:title>[explicit] QModbusTcpServer::QModbusTcpServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QModbusTcpServer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusTcpServer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmodbustcpserver.xml">QModbusTcpServer</db:link> with the specified <db:code role="parameter">parent</db:code>. The <db:link xlink:href="qmodbusserver.xml#serverAddress">serverAddress</db:link> preset is <db:code>255</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QModbusTcpServer">
<db:title>[virtual] QModbusTcpServer::~QModbusTcpServer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QModbusTcpServer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QModbusTcpServer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmodbustcpserver.xml">QModbusTcpServer</db:link> instance.</db:para>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual protected] void QModbusTcpServer::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusdevice.xml#close" role="function">QModbusDevice::close()</db:link>.</db:para>
</db:section>
<db:section xml:id="installConnectionObserver">
<db:title>void QModbusTcpServer::installConnectionObserver(QModbusTcpConnectionObserver *<db:emphasis>observer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>installConnectionObserver</db:methodname>
<db:methodparam>
<db:type>QModbusTcpConnectionObserver *</db:type>
<db:parameter>observer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void installConnectionObserver(QModbusTcpConnectionObserver *observer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs an <db:code role="parameter">observer</db:code> that can be used to obtain notifications when a new TCP client connects to this server instance. In addition, the <db:code role="parameter">observer</db:code> can be used to reject the incoming TCP connection.</db:para>
<db:para><db:link xlink:href="qmodbustcpserver.xml">QModbusTcpServer</db:link> takes ownership of the given <db:code role="parameter">observer</db:code>. Any previously set observer will be deleted. The observer can be uninstalled by calling this function with <db:code>nullptr</db:code> as parameter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbustcpconnectionobserver.xml">QModbusTcpConnectionObserver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modbusClientDisconnected">
<db:title>void QModbusTcpServer::modbusClientDisconnected(QTcpSocket *<db:emphasis>modbusClient</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>modbusClientDisconnected</db:methodname>
<db:methodparam>
<db:type>QTcpSocket *</db:type>
<db:parameter>modbusClient</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void modbusClientDisconnected(QTcpSocket *modbusClient)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a current TCP based <db:code role="parameter">modbusClient</db:code> disconnects from this Modbus TCP server. Note that there might be several TCP clients connected at the same time.</db:para>
<db:para>Notifications on incoming new connections can be received by installing a <db:link xlink:href="qmodbustcpconnectionobserver.xml">QModbusTcpConnectionObserver</db:link> via <db:link xlink:href="qmodbustcpserver.xml#installConnectionObserver">installConnectionObserver</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbustcpserver.xml#installConnectionObserver">installConnectionObserver</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual protected] bool QModbusTcpServer::open()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open() override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusdevice.xml#open" role="function">QModbusDevice::open()</db:link>.</db:para>
</db:section>
<db:section xml:id="processRequest">
<db:title>[override virtual protected] QModbusResponse QModbusTcpServer::processRequest(const QModbusPdu &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QModbusResponse</db:type>
<db:methodname>processRequest</db:methodname>
<db:methodparam>
<db:type>const QModbusPdu &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusResponse processRequest(const QModbusPdu &amp;request) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmodbusserver.xml#processRequest" role="function">QModbusServer::processRequest(const QModbusPdu &amp;request)</db:link>.</db:para>
<db:para>Processes the Modbus client request specified by <db:code role="parameter">request</db:code> and returns a Modbus response.</db:para>
<db:para>The following Modbus function codes are filtered out as they are serial line only according to the Modbus Application Protocol Specification 1.1b:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::ReadExceptionStatus</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::Diagnostics</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::GetCommEventCounter</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::GetCommEventLog</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmodbuspdu.xml#FunctionCode-enum">QModbusRequest::ReportServerId</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A request to the TCP server will be answered with a Modbus exception response with the exception code QModbusExceptionResponse::IllegalFunction.</db:para>
</db:section>
</db:section>
</db:article>
