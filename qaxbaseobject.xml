<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxBaseObject Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qaxbaseobject.xml">QAxBaseObject</db:link> provides static properties and signals for <db:link xlink:href="qaxobject.xml">QAxObject</db:link>.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxBaseObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS AxContainer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::AxContainer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxobjectinterface.xml" xlink:role="class">QAxObjectInterface</db:link> and </db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaxobject.xml" xlink:role="class">QAxObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="classContext-prop">
<db:title>classContext : const ulong</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ulong</db:type>
<db:varname>classContext</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the context the ActiveX control will run in (default CLSCTX_SERVER).</db:para>
<db:para>The property affects the &quot;dwClsContext&quot; argument when calling CoCreateInstance. This can be used to control in-proc vs. out-of-proc startup for controls supporting both alternatives. Also, it can be used to modify/reduce control permissions when used with CLSCTX_ENABLE_CLOAKING and an impersonation token.</db:para>
<db:para>Note that it must be set before <db:link xlink:href="qaxobjectinterface.xml#setControl">setControl</db:link>() to have any effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbasewidget.xml#control-prop">QAxBaseWidget::control</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="control-prop">
<db:title>control : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>control</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the name of the COM object wrapped by this <db:link xlink:href="qaxbaseobject.xml">QAxBaseObject</db:link> object.</db:para>
<db:para>Setting this property initializes the COM object. Any COM object previously set is shut down.</db:para>
<db:para>The most efficient way to set this property is by using the registered component's UUID, e.g.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbasewidget.xml#control-prop">QAxBaseWidget::control</db:link></db:member>
<db:member><db:link xlink:href="qaxbasewidget.xml#classContext-prop">QAxBaseWidget::classContext</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="exception">
<db:title>void QAxBaseObject::exception(int <db:emphasis>code</db:emphasis>, const QString &amp;<db:emphasis>source</db:emphasis>, const QString &amp;<db:emphasis>desc</db:emphasis>, const QString &amp;<db:emphasis>help</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>exception</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>desc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>help</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void exception(int code, const QString &amp;source, const QString &amp;desc, const QString &amp;help)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the COM object throws an exception while called using the OLE automation interface IDispatch. <db:code role="parameter">code</db:code>, <db:code role="parameter">source</db:code>, <db:code role="parameter">desc</db:code> and <db:code role="parameter">help</db:code> provide information about the exception as provided by the COM server and can be used to provide useful feedback to the end user. <db:code role="parameter">help</db:code> includes the help file, and the help context ID in brackets, e.g. &quot;filename [id]&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbasewidget.xml#exception">QAxBaseWidget::exception</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="propertyChanged">
<db:title>void QAxBaseObject::propertyChanged(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>propertyChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void propertyChanged(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the COM object supports property notification, this signal gets emitted when the property called <db:code role="parameter">name</db:code> is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbasewidget.xml#propertyChanged">QAxBaseWidget::propertyChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signal">
<db:title>void QAxBaseObject::signal(const QString &amp;<db:emphasis>name</db:emphasis>, int <db:emphasis>argc</db:emphasis>, void *<db:emphasis>argv</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>signal</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>argc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>argv</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void signal(const QString &amp;name, int argc, void *argv)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This generic signal gets emitted when the COM object issues the event <db:code role="parameter">name</db:code>. <db:code role="parameter">argc</db:code> is the number of parameters provided by the event (DISPPARAMS.cArgs), and <db:code role="parameter">argv</db:code> is the pointer to the parameter values (DISPPARAMS.rgvarg). Note that the order of parameter values is turned around, ie. the last element of the array is the first parameter in the function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxbasewidget.xml#signal">QAxBaseWidget::signal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
