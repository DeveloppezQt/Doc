<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Video Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Transforming video and camera viewfinder content.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Mobility Components.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.0

Scene {
    id: root
    property string contentType: &quot;video&quot;

    Content {
        id: content
        anchors.centerIn: parent
        width: parent.contentWidth
        contentType: &quot;video&quot;
        source: parent.source1
        volume: parent.volume
        onInitialized: {
            if (!dummy)
                metadata.createObject(root)
        }
        onVideoFramePainted: root.videoFramePainted()
    }

    Component {
        id: metadata
        Column {
            anchors.fill: parent
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Title:&quot; + content.contentItem().metaData.title
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Size:&quot; + content.contentItem().metaData.size
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Resolution:&quot; + content.contentItem().metaData.resolution
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Media type:&quot; + content.contentItem().metaData.mediaType
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Video codec:&quot; + content.contentItem().metaData.videoCodec
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Video bit rate:&quot; + content.contentItem().metaData.videoBitRate
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Video frame rate:&quot; +content.contentItem().metaData.videoFrameRate
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Audio codec:&quot; + content.contentItem().metaData.audioCodec
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Audio bit rate:&quot; + content.contentItem().metaData.audioBitRate
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Date:&quot; + content.contentItem().metaData.date
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Description:&quot; + content.contentItem().metaData.description
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Copyright:&quot; + content.contentItem().metaData.copyright
            }
            Text {
                color: &quot;#e0e0e0&quot;
                text: &quot;Seekable:&quot; + content.contentItem().metaData.seekable
            }
        }
    }

    Component.onCompleted: root.content = content
}

</db:programlisting>
</db:article>
