<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Animation QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Is the base of all QML animations.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.13</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-anchoranimation.xml" xlink:role="">AnchorAnimation</db:link>, <db:link xlink:href="qml-qtquick-animator.xml" xlink:role="">Animator</db:link>, <db:link xlink:href="qml-qtquick-parallelanimation.xml" xlink:role="">ParallelAnimation</db:link>, <db:link xlink:href="qml-qtquick-parentanimation.xml" xlink:role="">ParentAnimation</db:link>, <db:link xlink:href="qml-qtquick-pathanimation.xml" xlink:role="">PathAnimation</db:link>, <db:link xlink:href="qml-qtquick-pauseanimation.xml" xlink:role="">PauseAnimation</db:link>, <db:link xlink:href="qml-qtquick-propertyaction.xml" xlink:role="">PropertyAction</db:link>, <db:link xlink:href="qml-qtquick-propertyanimation.xml" xlink:role="">PropertyAnimation</db:link>, <db:link xlink:href="qml-qtquick-scriptaction.xml" xlink:role="">ScriptAction</db:link>, and <db:link xlink:href="qml-qtquick-sequentialanimation.xml" xlink:role="">SequentialAnimation</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Animation is part of <db:simplelist><db:member>qtquick-transitions-animations</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Animation type cannot be used directly in a QML file. It exists to provide a set of common properties and methods, available across all the other animation types that inherit from it. Attempting to use the Animation type directly will result in an error.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alwaysRunToEnd-prop">
<db:title>alwaysRunToEnd : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>alwaysRunToEnd</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the animation should run to completion when it is stopped.</db:para>
<db:para>If this true the animation will complete its current iteration when it is stopped - either by setting the running property to false, or by calling the stop() method. The complete() method is not effected by this value.</db:para>
<db:para>This behavior is most useful when the loops property is set, as the animation will finish playing normally but not restart.</db:para>
<db:para>By default, the alwaysRunToEnd property is not set.</db:para>
<db:note>
<db:para>alwaysRunToEnd has no effect on animations in a Transition.</db:para>
</db:note>
</db:section>
<db:section xml:id="loops-prop">
<db:title>loops : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>loops</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of times the animation should play.</db:para>
<db:para>By default, loops is 1: the animation will play through once and then stop.</db:para>
<db:para>If set to Animation.Infinite, the animation will continuously repeat until it is explicitly stopped - either by setting the running property to false, or by calling the stop() method.</db:para>
<db:para>In the following example, the rectangle will spin indefinitely.</db:para>
<db:programlisting language="cpp">Rectangle {
    width: 100; height: 100; color: &quot;green&quot;
    RotationAnimation on rotation {
        loops: Animation.Infinite
        from: 0
        to: 360
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="paused-prop">
<db:title>paused : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>paused</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the animation is currently paused.</db:para>
<db:para>The paused property can be set to declaratively control whether or not an animation is paused.</db:para>
<db:para>Animations can also be paused and resumed imperatively from JavaScript using the pause() and resume() methods.</db:para>
<db:para>By default, animations are not paused.</db:para>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the animation is currently running.</db:para>
<db:para>The running property can be set to declaratively control whether or not an animation is running. The following example will animate a rectangle whenever the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is pressed.</db:para>
<db:programlisting language="cpp">Rectangle {
    width: 100; height: 100
    NumberAnimation on x {
        running: myMouse.pressed
        from: 0; to: 100
    }
    MouseArea { id: myMouse }
}
</db:programlisting>
<db:para>Likewise, the running property can be read to determine if the animation is running. In the following example the Text item will indicate whether or not the animation is running.</db:para>
<db:programlisting language="cpp">NumberAnimation { id: myAnimation }
Text { text: myAnimation.running ? &quot;Animation is running&quot; : &quot;Animation is not running&quot; }
</db:programlisting>
<db:para>Animations can also be started and stopped imperatively from JavaScript using the start() and stop() methods.</db:para>
<db:para>By default, animations are not running. Though, when the animations are assigned to properties, as property value sources using the <db:emphasis>on</db:emphasis> syntax, they are set to running by default.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="finished-signal">
<db:title>[since 5.12] finished()</db:title>
<db:para>This signal is emitted when the animation has finished naturally.</db:para>
<db:para>It is not emitted when <db:link xlink:href="qml-qtquick-animation.xml#running-prop">running</db:link> is set to false, nor for animations whose <db:link xlink:href="qml-qtquick-animation.xml#loops-prop">loops</db:link> property is set to Animation.Infinite.</db:para>
<db:para>In addition, it is only emitted for top-level, standalone animations. It will not be emitted for animations in a Behavior or Transition, or animations that are part of an animation group.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-animation.xml#alwaysRunToEnd-prop">alwaysRunToEnd</db:link> is true, this signal will not be emitted until the animation has completed its current iteration.</db:para>
<db:para>The corresponding handler is onFinished.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onFinished</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-animation.xml#stopped-signal">stopped</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-animation.xml#started-signal">started</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-animation.xml#running-prop">running</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="started-signal">
<db:title>started()</db:title>
<db:para>This signal is emitted when the animation begins.</db:para>
<db:para>It is only triggered for top-level, standalone animations. It will not be triggered for animations in a Behavior or Transition, or animations that are part of an animation group.</db:para>
<db:para>The corresponding handler is onStarted.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onStarted</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="stopped-signal">
<db:title>stopped()</db:title>
<db:para>This signal is emitted when the animation ends.</db:para>
<db:para>The animation may have been stopped manually, or may have run to completion.</db:para>
<db:para>It is only triggered for top-level, standalone animations. It will not be triggered for animations in a Behavior or Transition, or animations that are part of an animation group.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-animation.xml#alwaysRunToEnd-prop">alwaysRunToEnd</db:link> is true, this signal will not be emitted until the animation has completed its current iteration.</db:para>
<db:para>The corresponding handler is onStopped.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onStopped</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="complete-method">
<db:title>complete()</db:title>
<db:para>Stops the animation, jumping to the final property values</db:para>
<db:para>If the animation is not running, calling this method has no effect. The running property will be false following a call to complete().</db:para>
<db:para>Unlike stop(), complete() immediately fast-forwards the animation to its end. In the following example,</db:para>
<db:programlisting language="cpp">Rectangle {
    NumberAnimation on x { from: 0; to: 100; duration: 500 }
}
</db:programlisting>
<db:para>calling stop() at time 250ms will result in the x property having a value of 50, while calling complete() will set the x property to 100, exactly as though the animation had played the whole way through.</db:para>
</db:section>
<db:section xml:id="pause-method">
<db:title>pause()</db:title>
<db:para>Pauses the animation</db:para>
<db:para>If the animation is already paused or not running, calling this method has no effect. The paused property will be true following a call to pause().</db:para>
</db:section>
<db:section xml:id="restart-method">
<db:title>restart()</db:title>
<db:para>Restarts the animation</db:para>
<db:para>This is a convenience method, and is equivalent to calling stop() and then start().</db:para>
</db:section>
<db:section xml:id="resume-method">
<db:title>resume()</db:title>
<db:para>Resumes a paused animation</db:para>
<db:para>If the animation is not paused or not running, calling this method has no effect. The paused property will be false following a call to resume().</db:para>
</db:section>
<db:section xml:id="start-method">
<db:title>start()</db:title>
<db:para>Starts the animation</db:para>
<db:para>If the animation is already running, calling this method has no effect. The running property will be true following a call to start().</db:para>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops the animation</db:para>
<db:para>If the animation is not running, calling this method has no effect. Both the running and paused properties will be false following a call to stop().</db:para>
<db:para>Normally stop() stops the animation immediately, and the animation has no further influence on property values. In this example animation</db:para>
<db:programlisting language="cpp">Rectangle {
    NumberAnimation on x { from: 0; to: 100; duration: 500 }
}
</db:programlisting>
<db:para>was stopped at time 250ms, the x property will have a value of 50.</db:para>
<db:para>However, if the alwaysRunToEnd property is set, the animation will continue running until it completes and then stop. The running property will still become false immediately.</db:para>
</db:section>
</db:section>
</db:article>
