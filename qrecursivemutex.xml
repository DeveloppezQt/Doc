<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRecursiveMutex Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> class provides access serialization between threads.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRecursiveMutex</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRecursiveMutex is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> class is a mutex, like <db:link xlink:href="qmutex.xml">QMutex</db:link>, with which it is API-compatible. It differs from <db:link xlink:href="qmutex.xml">QMutex</db:link> by accepting <db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>() calls from the same thread any number of times. <db:link xlink:href="qmutex.xml">QMutex</db:link> would deadlock in this situation.</db:para>
<db:para><db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> is much more expensive to construct and operate on, so use a plain <db:link xlink:href="qmutex.xml">QMutex</db:link> whenever you can. Sometimes, one public function, however, calls another public function, and they both need to lock the same mutex. In this case, you have two options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Factor the code that needs mutex protection into private functions, which assume that the mutex is held when they are called, and lock a plain <db:link xlink:href="qmutex.xml">QMutex</db:link> in the public functions before you call the private implementation ones.</db:para>
</db:listitem>
<db:listitem>
<db:para>Or use a recursive mutex, so it doesn't matter that the first public function has already locked the mutex when the second one wishes to do so.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
<db:member><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link></db:member>
<db:member><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link></db:member>
<db:member><db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRecursiveMutex-2">
<db:title>[constexpr] QRecursiveMutex::QRecursiveMutex()</db:title>
<db:constructorsynopsis>
<db:methodname>QRecursiveMutex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QRecursiveMutex()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new recursive mutex. The mutex is created in an unlocked state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QRecursiveMutex">
<db:title>QRecursiveMutex::~QRecursiveMutex()</db:title>
<db:destructorsynopsis>
<db:methodname>~QRecursiveMutex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRecursiveMutex()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the mutex.</db:para>
<db:warning>
<db:para>Destroying a locked mutex may result in undefined behavior.</db:para>
</db:warning>
</db:section>
<db:section xml:id="lock">
<db:title>void QRecursiveMutex::lock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Locks the mutex. If another thread has locked the mutex then this call will block until that thread has unlocked it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread is allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLock">
<db:title>bool QRecursiveMutex::tryLock(int <db:emphasis>timeout</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLock</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLock(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for the mutex to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>(), i.e. this function will wait forever until mutex can be locked if <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread is allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="try_lock">
<db:title>bool QRecursiveMutex::try_lock()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false.</db:para>
<db:para>This function is provided for compatibility with the Standard Library concept Lockable. It is equivalent to <db:link xlink:href="qrecursivemutex.xml#tryLock">tryLock</db:link>().</db:para>
</db:section>
<db:section xml:id="try_lock_for">
<db:title>bool QRecursiveMutex::try_lock_for(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock_for</db:methodname>
<db:methodparam>
<db:type>std::chrono::duration&lt;Rep, Period&gt;</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock_for(std::chrono::duration&lt;Rep, Period&gt; duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait for at least <db:code role="parameter">duration</db:code> for the mutex to become available.</db:para>
<db:para>Note: Passing a negative duration as the <db:code role="parameter">duration</db:code> is equivalent to calling <db:link xlink:href="qrecursivemutex.xml#try_lock">try_lock</db:link>(). This behavior differs from <db:link xlink:href="qrecursivemutex.xml#tryLock">tryLock</db:link>().</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread is allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="try_lock_until">
<db:title>bool QRecursiveMutex::try_lock_until(std::chrono::time_point&lt;Clock, Duration&gt; <db:emphasis>timePoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock_until</db:methodname>
<db:methodparam>
<db:type>std::chrono::time_point&lt;Clock, Duration&gt;</db:type>
<db:parameter>timePoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock_until(std::chrono::time_point&lt;Clock, Duration&gt; timePoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait at least until <db:code role="parameter">timePoint</db:code> for the mutex to become available.</db:para>
<db:para>Note: Passing a <db:code role="parameter">timePoint</db:code> which has already passed is equivalent to calling <db:link xlink:href="qrecursivemutex.xml#try_lock">try_lock</db:link>(). This behavior differs from <db:link xlink:href="qrecursivemutex.xml#tryLock">tryLock</db:link>().</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread is allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qrecursivemutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QRecursiveMutex::unlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unlocks the mutex. Attempting to unlock a mutex in a different thread to the one that locked it results in an error. Unlocking a mutex that is not locked results in undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml#lock">lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
