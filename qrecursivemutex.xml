<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRecursiveMutex Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> class provides access serialization between threads.</db:para>
<db:para>This class was introduced in Qt 5.14.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRecursiveMutex</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.14</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmutex.xml" xlink:role="class">QMutex</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRecursiveMutex is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> class is a mutex, like <db:link xlink:href="qmutex.xml">QMutex</db:link>, with which it is API-compatible. It differs from <db:link xlink:href="qmutex.xml">QMutex</db:link> by accepting <db:link xlink:href="qmutex.xml#lock">lock</db:link>() calls from the same thread any number of times. <db:link xlink:href="qmutex.xml">QMutex</db:link> would deadlock in this situation.</db:para>
<db:para><db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link> is much more expensive to construct and operate on, so use a plain <db:link xlink:href="qmutex.xml">QMutex</db:link> whenever you can. Sometimes, one public function, however, calls another public function, and they both need to lock the same mutex. In this case, you have two options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Factor the code that needs mutex protection into private functions, which assume that the mutex is held when they are called, and lock a plain <db:link xlink:href="qmutex.xml">QMutex</db:link> in the public functions before you call the private implementation ones.</db:para>
</db:listitem>
<db:listitem>
<db:para>Or use a recursive mutex, so it doesn't matter that the first public function has already locked the mutex when the second one wishes to do so.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
<db:member>QReadWriteLock</db:member>
<db:member>QSemaphore</db:member>
<db:member>QWaitCondition</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
