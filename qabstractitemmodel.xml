<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractItemModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class provides the abstract interface for item model classes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractItemModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractlistmodel.xml" xlink:role="class">QAbstractListModel</db:link> and <db:link xlink:href="qabstracttablemodel.xml" xlink:role="class">QAbstractTableModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractItemModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class defines the standard interface that item models must use to be able to interoperate with other components in the model/view architecture. It is not supposed to be instantiated directly. Instead, you should subclass it to create new models.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class is one of the <db:link xlink:href="">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="">model/view framework</db:link>. It can be used as the underlying data model for the item view elements in QML or the item view classes in the Qt Widgets module.</db:para>
<db:para>If you need a model to use with an item view such as QML's List View element or the C++ widgets QListView or QTableView, you should consider subclassing <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> or <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> instead of this class.</db:para>
<db:para>The underlying data model is exposed to views and delegates as a hierarchy of tables. If you do not make use of the hierarchy, then the model is a simple table of rows and columns. Each item has a unique index specified by a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelindex-no-parent.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Every item of data that can be accessed via a model has an associated model index. You can obtain this model index using the <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>() function. Each index may have a <db:link xlink:href="qabstractitemmodel.xml#sibling">sibling</db:link>() index; child items have a <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() index.</db:para>
<db:para>Each item has a number of data elements associated with it and they can be retrieved by specifying a role (see <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>) to the model's <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function. Data for all available roles can be obtained at the same time using the <db:link xlink:href="qabstractitemmodel.xml#itemData">itemData</db:link>() function.</db:para>
<db:para>Data for each role is set using a particular <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>. Data for individual roles are set individually with setData(), or they can be set for all roles with setItemData().</db:para>
<db:para>Items can be queried with <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlag</db:link>) to see if they can be selected, dragged, or manipulated in other ways.</db:para>
<db:para>If an item has child objects, <db:link xlink:href="qabstractitemmodel.xml#hasChildren">hasChildren</db:link>() returns true for the corresponding index.</db:para>
<db:para>The model has a <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and a <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>() for each level of the hierarchy. Rows and columns can be inserted and removed with <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>().</db:para>
<db:para>The model emits signals to indicate changes. For example, dataChanged() is emitted whenever items of data made available by the model are changed. Changes to the headers supplied by the model cause <db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>() to be emitted. If the structure of the underlying data changes, the model can emit <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link>() to indicate to any attached views that they should redisplay any items shown, taking the new structure into account.</db:para>
<db:para>The items available through the model can be searched for particular data using the match() function.</db:para>
<db:para>To sort the model, you can use <db:link xlink:href="qabstractitemmodel.xml#sort">sort</db:link>().</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="">Model Subclassing Reference</db:link>.</db:para>
</db:note>
<db:para>When subclassing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, at the very least you must implement <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(). These functions are used in all read-only models, and form the basis of editable models.</db:para>
<db:para>You can also reimplement <db:link xlink:href="qabstractitemmodel.xml#hasChildren">hasChildren</db:link>() to provide special behavior for models where the implementation of <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() is expensive. This makes it possible for models to restrict the amount of data requested by views, and can be used as a way to implement lazy population of model data.</db:para>
<db:para>To enable editing in your model, you must also implement setData(), and reimplement <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() to ensure that ItemIsEditable is returned. You can also reimplement <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>() and setHeaderData() to control the way the headers for your model are presented.</db:para>
<db:para>The dataChanged() and <db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>() signals must be emitted explicitly when reimplementing the setData() and setHeaderData() functions, respectively.</db:para>
<db:para>Custom models need to create model indexes for other components to use. To do this, call <db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>() with suitable row and column numbers for the item, and an identifier for it, either as a pointer or as an integer value. The combination of these values must be unique for each item. Custom models typically use these unique identifiers in other reimplemented functions to retrieve item data and access information about the item's parents and children. See the <db:link xlink:href="">Simple Tree Model Example</db:link> for more information about unique identifiers.</db:para>
<db:para>It is not necessary to support every role defined in <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>. Depending on the type of data contained within a model, it may only be useful to implement the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function to return valid information for some of the more common roles. Most models provide at least a textual representation of item data for the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>, and well-behaved models should also provide valid information for the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ToolTipRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::WhatsThisRole</db:link>. Supporting these roles enables models to be used with standard Qt views. However, for some models that handle highly-specialized data, it may be appropriate to provide data only for user-defined roles.</db:para>
<db:para>Models that provide interfaces to resizable data structures can provide implementations of <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(),and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>(). When implementing these functions, it is important to notify any connected views about changes to the model's dimensions both <db:emphasis>before</db:emphasis> and <db:emphasis>after</db:emphasis> they occur:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() <db:emphasis>before</db:emphasis> inserting new rows into the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>() <db:emphasis>before</db:emphasis> inserting new columns into the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>() <db:emphasis>before</db:emphasis> the rows are removed from the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>() <db:emphasis>before</db:emphasis> the columns are removed from the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>private</db:emphasis> signals that these functions emit give attached components the chance to take action before any data becomes unavailable. The encapsulation of the insert and remove operations with these begin and end functions also enables the model to manage <db:link xlink:href="qpersistentmodelindex.xml">persistent model indexes</db:link> correctly. <db:emphasis role="bold">If you want selections to be handled properly, you must ensure that you call these functions.</db:emphasis> If you insert or remove an item with children, you do not need to call these functions for the child items. In other words, the parent item will take care of its child items.</db:para>
<db:para>To create models that populate incrementally, you can reimplement <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#canFetchMore">canFetchMore</db:link>(). If the reimplementation of <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() adds rows to the model, <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() must be called.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Model Classes</db:link></db:member>
<db:member><db:link xlink:href="">Model Subclassing Reference</db:link></db:member>
<db:member><db:link xlink:href="qmodelindex.xml">QModelIndex</db:link></db:member>
<db:member>QAbstractItemView</db:member>
<db:member><db:link xlink:href="">Using drag and drop with item views</db:link></db:member>
<db:member><db:link xlink:href="">Simple DOM Model Example</db:link></db:member>
<db:member><db:link xlink:href="">Simple Tree Model Example</db:link></db:member>
<db:member><db:link xlink:href="">Editable Tree Model Example</db:link></db:member>
<db:member><db:link xlink:href="">Fetch More Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="LayoutChangeHint-enum">
<db:title>enum QAbstractItemModel::LayoutChangeHint</db:title>
<db:para>This enum describes the way the model changes layout.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::NoLayoutChangeHint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No hint is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::VerticalSortHint</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Rows are being sorted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::HorizontalSortHint</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Columns are being sorted.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that VerticalSortHint and HorizontalSortHint carry the meaning that items are being moved within the same parent, not moved to a different parent in the model, and not filtered out or in.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractItemModel">
<db:title>[explicit] QAbstractItemModel::QAbstractItemModel(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs an abstract item model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractItemModel">
<db:title>[virtual noexcept] QAbstractItemModel::~QAbstractItemModel()</db:title>
<db:para>Destroys the abstract item model.</db:para>
</db:section>
<db:section xml:id="beginInsertColumns">
<db:title>[protected] void QAbstractItemModel::beginInsertColumns(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>Begins a column insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent into which the new columns are inserted; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the column numbers of the new columns will have after they have been inserted.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-insert-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Inserting columns</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last column numbers for the span of columns you want to insert into an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we insert three columns before column 4, so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginInsertColumns(parent, 4, 6);
</db:programlisting>
<db:para>This inserts the three new columns as columns 4, 5, and 6.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-append-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Appending columns</db:para>
</db:td>
<db:td>
<db:para>To append columns, insert them after the last column.</db:para>
<db:para>For example, as shown in the diagram, we append three columns to a collection of six existing columns (ending in column 5), so <db:code role="parameter">first</db:code> is 6 and <db:code role="parameter">last</db:code> is 8:</db:para>
<db:programlisting language="cpp">beginInsertColumns(parent, 6, 8);
</db:programlisting>
<db:para>This appends the two new columns as columns 6, 7, and 8.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#columnsAboutToBeInserted">columnsAboutToBeInserted</db:link>() signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginInsertRows">
<db:title>[protected] void QAbstractItemModel::beginInsertRows(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>Begins a row insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent into which the new rows are inserted; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the row numbers that the new rows will have after they have been inserted.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-insert-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Inserting rows</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows you want to insert into an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we insert three rows before row 2, so <db:code role="parameter">first</db:code> is 2 and <db:code role="parameter">last</db:code> is 4:</db:para>
<db:programlisting language="cpp">beginInsertRows(parent, 2, 4);
</db:programlisting>
<db:para>This inserts the three new rows as rows 2, 3, and 4.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-append-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Appending rows</db:para>
</db:td>
<db:td>
<db:para>To append rows, insert them after the last row.</db:para>
<db:para>For example, as shown in the diagram, we append two rows to a collection of 4 existing rows (ending in row 3), so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 5:</db:para>
<db:programlisting language="cpp">beginInsertRows(parent, 4, 5);
</db:programlisting>
<db:para>This appends the two new rows as rows 4 and 5.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#rowsAboutToBeInserted">rowsAboutToBeInserted</db:link>() signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMoveColumns">
<db:title>[protected, since 4.6] bool QAbstractItemModel::beginMoveColumns(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceFirst</db:emphasis>, int <db:emphasis>sourceLast</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>Begins a column move operation.</db:para>
<db:para>When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using <db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link> and <db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link> is an alternative to emitting <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link> and <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link> directly along with <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>.</db:para>
<db:para>The <db:code role="parameter">sourceParent</db:code> index corresponds to the parent from which the columns are moved; <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are the first and last column numbers of the columns to be moved. The <db:code role="parameter">destinationParent</db:code> index corresponds to the parent into which those columns are moved. The <db:code role="parameter">destinationChild</db:code> is the column to which the columns will be moved. That is, the index at column <db:code role="parameter">sourceFirst</db:code> in <db:code role="parameter">sourceParent</db:code> will become column <db:code role="parameter">destinationChild</db:code> in <db:code role="parameter">destinationParent</db:code>, followed by all other columns up to <db:code role="parameter">sourceLast</db:code>.</db:para>
<db:para>However, when moving columns down in the same parent (<db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are equal), the columns will be placed before the <db:code role="parameter">destinationChild</db:code> index. That is, if you wish to move columns 0 and 1 so they will become columns 1 and 2, <db:code role="parameter">destinationChild</db:code> should be 3. In this case, the new index for the source column i (which is between <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code>) is equal to (destinationChild-sourceLast-1+i).</db:para>
<db:para>Note that if <db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are the same, you must ensure that the <db:code role="parameter">destinationChild</db:code> is not within the range of <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> + 1. You must also ensure that you do not attempt to move a column to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveColumns">endMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMoveRows">
<db:title>[protected, since 4.6] bool QAbstractItemModel::beginMoveRows(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceFirst</db:emphasis>, int <db:emphasis>sourceLast</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>Begins a row move operation.</db:para>
<db:para>When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using beginMoveRows and <db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link> is an alternative to emitting <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link> and <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link> directly along with <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>.</db:para>
<db:para>The <db:code role="parameter">sourceParent</db:code> index corresponds to the parent from which the rows are moved; <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are the first and last row numbers of the rows to be moved. The <db:code role="parameter">destinationParent</db:code> index corresponds to the parent into which those rows are moved. The <db:code role="parameter">destinationChild</db:code> is the row to which the rows will be moved. That is, the index at row <db:code role="parameter">sourceFirst</db:code> in <db:code role="parameter">sourceParent</db:code> will become row <db:code role="parameter">destinationChild</db:code> in <db:code role="parameter">destinationParent</db:code>, followed by all other rows up to <db:code role="parameter">sourceLast</db:code>.</db:para>
<db:para>However, when moving rows down in the same parent (<db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are equal), the rows will be placed before the <db:code role="parameter">destinationChild</db:code> index. That is, if you wish to move rows 0 and 1 so they will become rows 1 and 2, <db:code role="parameter">destinationChild</db:code> should be 3. In this case, the new index for the source row i (which is between <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code>) is equal to (destinationChild-sourceLast-1+i).</db:para>
<db:para>Note that if <db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are the same, you must ensure that the <db:code role="parameter">destinationChild</db:code> is not within the range of <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> + 1. You must also ensure that you do not attempt to move a row to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-1.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows to another parent</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows in the source parent you want to move in the model. Also specify the row in the destination parent to move the span to.</db:para>
<db:para>For example, as shown in the diagram, we move three rows from row 2 to 4 in the source, so <db:code role="parameter">sourceFirst</db:code> is 2 and <db:code role="parameter">sourceLast</db:code> is 4. We move those items to above row 2 in the destination, so <db:code role="parameter">destinationChild</db:code> is 2.</db:para>
<db:programlisting language="cpp">beginMoveRows(sourceParent, 2, 4, destinationParent, 2);
</db:programlisting>
<db:para>This moves the three rows rows 2, 3, and 4 in the source to become 2, 3 and 4 in the destination. Other affected siblings are displaced accordingly.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-2.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows to append to another parent</db:para>
</db:td>
<db:td>
<db:para>To append rows to another parent, move them to after the last row.</db:para>
<db:para>For example, as shown in the diagram, we move three rows to a collection of 6 existing rows (ending in row 5), so <db:code role="parameter">destinationChild</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginMoveRows(sourceParent, 2, 4, destinationParent, 6);
</db:programlisting>
<db:para>This moves the target rows to the end of the target parent as 6, 7 and 8.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-3.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows in the same parent up</db:para>
</db:td>
<db:td>
<db:para>To move rows within the same parent, specify the row to move them to.</db:para>
<db:para>For example, as shown in the diagram, we move one item from row 2 to row 0, so <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are 2 and <db:code role="parameter">destinationChild</db:code> is 0.</db:para>
<db:programlisting language="cpp">beginMoveRows(parent, 2, 2, parent, 0);
</db:programlisting>
<db:para>Note that other rows may be displaced accordingly. Note also that when moving items within the same parent you should not attempt invalid or no-op moves. In the above example, item 2 is at row 2 before the move, so it can not be moved to row 2 (where it is already) or row 3 (no-op as row 3 means above row 3, where it is already)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-4.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows in the same parent down</db:para>
</db:td>
<db:td>
<db:para>To move rows within the same parent, specify the row to move them to.</db:para>
<db:para>For example, as shown in the diagram, we move one item from row 2 to row 4, so <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are 2 and <db:code role="parameter">destinationChild</db:code> is 4.</db:para>
<db:programlisting language="cpp">beginMoveRows(parent, 2, 2, parent, 4);
</db:programlisting>
<db:para>Note that other rows may be displaced accordingly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginRemoveColumns">
<db:title>[protected] void QAbstractItemModel::beginRemoveColumns(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>Begins a column removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent from which the new columns are removed; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the column numbers of the first and last columns to be removed.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-remove-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Removing columns</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last column numbers for the span of columns you want to remove from an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we remove the three columns from column 4 to column 6, so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginRemoveColumns(parent, 4, 6);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#columnsAboutToBeRemoved">columnsAboutToBeRemoved</db:link>() signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginRemoveRows">
<db:title>[protected] void QAbstractItemModel::beginRemoveRows(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>Begins a row removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent from which the new rows are removed; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the row numbers of the rows to be removed.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-remove-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Removing rows</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows you want to remove from an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we remove the two rows from row 2 to row 3, so <db:code role="parameter">first</db:code> is 2 and <db:code role="parameter">last</db:code> is 3:</db:para>
<db:programlisting language="cpp">beginRemoveRows(parent, 2, 3);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#rowsAboutToBeRemoved">rowsAboutToBeRemoved</db:link>() signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginResetModel">
<db:title>[protected, since 4.6] void QAbstractItemModel::beginResetModel()</db:title>
<db:para>Begins a model reset operation.</db:para>
<db:para>A reset operation resets the model to its current state in any attached views.</db:para>
<db:note>
<db:para>Any views attached to this model will be reset as well.</db:para>
</db:note>
<db:para>When a model is reset it means that any previous data reported from the model is now invalid and has to be queried for again. This also means that the current item and any selected items will become invalid.</db:para>
<db:para>When a model radically changes its data it can sometimes be easier to just call this function rather than emit dataChanged() to inform other components when the underlying data source, or its structure, has changed.</db:para>
<db:para>You must call this function before resetting any internal data structures in your model or proxy model.</db:para>
<db:para>This function emits the signal <db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buddy">
<db:title>[virtual] QModelIndex QAbstractItemModel::buddy(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a model index for the buddy of the item represented by <db:code role="parameter">index</db:code>. When the user wants to edit an item, the view will call this function to check whether another item in the model should be edited instead. Then, the view will construct a delegate using the model index returned by the buddy item.</db:para>
<db:para>The default implementation of this function has each item as its own buddy.</db:para>
</db:section>
<db:section xml:id="canDropMimeData">
<db:title>[virtual] bool QAbstractItemModel::canDropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if a model can accept a drop of the <db:code role="parameter">data</db:code>. This default implementation only checks if <db:code role="parameter">data</db:code> has at least one format in the list of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() and if <db:code role="parameter">action</db:code> is among the model's <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>().</db:para>
<db:para>Reimplement this function in your custom model, if you want to test whether the <db:code role="parameter">data</db:code> can be dropped at <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>, <db:code role="parameter">parent</db:code> with <db:code role="parameter">action</db:code>. If you don't need that test, it is not necessary to reimplement this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[virtual] bool QAbstractItemModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if there is more data available for <db:code role="parameter">parent</db:code>; otherwise returns false.</db:para>
<db:para>The default implementation always returns false.</db:para>
<db:para>If canFetchMore() returns true, the <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() function should be called. This is the behavior of QAbstractItemView, for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changePersistentIndex">
<db:title>[protected] void QAbstractItemModel::changePersistentIndex(const QModelIndex &amp;<db:emphasis>from</db:emphasis>, const QModelIndex &amp;<db:emphasis>to</db:emphasis>)</db:title>
<db:para>Changes the <db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link> that is equal to the given <db:code role="parameter">from</db:code> model index to the given <db:code role="parameter">to</db:code> model index.</db:para>
<db:para>If no persistent model index equal to the given <db:code role="parameter">from</db:code> model index was found, nothing is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#persistentIndexList">persistentIndexList</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndexList">changePersistentIndexList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changePersistentIndexList">
<db:title>[protected, since 4.1] void QAbstractItemModel::changePersistentIndexList(const QModelIndexList &amp;<db:emphasis>from</db:emphasis>, const QModelIndexList &amp;<db:emphasis>to</db:emphasis>)</db:title>
<db:para>Changes the {<db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link>}es that are equal to the indexes in the given <db:code role="parameter">from</db:code> model index list to the given <db:code role="parameter">to</db:code> model index list.</db:para>
<db:para>If no persistent model indexes equal to the indexes in the given <db:code role="parameter">from</db:code> model index list are found, nothing is changed.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#persistentIndexList">persistentIndexList</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>[pure virtual] int QAbstractItemModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Returns the number of columns for the children of the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>In most subclasses, the number of columns is independent of the <db:code role="parameter">parent</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">int DomModel::columnCount(const QModelIndex &amp;/*parent*/) const
{
    return 3;
}
</db:programlisting>
<db:note>
<db:para>When implementing a table based model, columnCount() should return 0 when the parent is valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeInserted">
<db:title>void QAbstractItemModel::columnsAboutToBeInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted just before columns are inserted into the model. The new items will be positioned between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeMoved">
<db:title>[since 4.6] void QAbstractItemModel::columnsAboutToBeMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationColumn</db:emphasis>)</db:title>
<db:para>This signal is emitted just before columns are moved within the model. The items that will be moved are those between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item. They will be moved to <db:code role="parameter">destinationParent</db:code> starting at the column <db:code role="parameter">destinationColumn</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeRemoved">
<db:title>void QAbstractItemModel::columnsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted just before columns are removed from the model. The items to be removed are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsInserted">
<db:title>void QAbstractItemModel::columnsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted after columns have been inserted into the model. The new items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsMoved">
<db:title>[since 4.6] void QAbstractItemModel::columnsMoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>, const QModelIndex &amp;<db:emphasis>destination</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:para>This signal is emitted after columns have been moved within the model. The items between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item have been moved to <db:code role="parameter">destination</db:code> starting at the column <db:code role="parameter">column</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsRemoved">
<db:title>void QAbstractItemModel::columnsRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted after columns have been removed from the model. The removed items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createIndex">
<db:title>[protected] QModelIndex QAbstractItemModel::createIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, quintptr <db:emphasis>id</db:emphasis>) const</db:title>
<db:para>Creates a model index for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with the internal identifier, <db:code role="parameter">id</db:code>.</db:para>
<db:para>This function provides a consistent interface that model subclasses must use to create model indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#internalId">QModelIndex::internalId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createIndex-1">
<db:title>[protected] QModelIndex QAbstractItemModel::createIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, void *<db:emphasis>ptr</db:emphasis> = 0) const</db:title>
<db:para>Creates a model index for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with the internal pointer <db:code role="parameter">ptr</db:code>.</db:para>
<db:para>When using a QSortFilterProxyModel, its indexes have their own internal pointer. It is not advisable to access this internal pointer outside of the model. Use the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function instead.</db:para>
<db:para>This function provides a consistent interface that model subclasses must use to create model indexes.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>int QAbstractItemModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Returns the data stored under the given <db:code role="parameter">role</db:code> for the item referred to by the <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>If you do not have a value to return, return an <db:emphasis role="bold">invalid</db:emphasis> <db:link xlink:href="qvariant.xml">QVariant</db:link> instead of returning 0.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="">setData()</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[virtual] bool QAbstractItemModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code>.</db:para>
<db:para>Returns true if the data and action were handled by the model; otherwise returns false.</db:para>
<db:para>The specified <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code> and <db:code role="parameter">parent</db:code> indicate the location of an item in the model where the operation ended. It is the responsibility of the model to complete the action at the correct location.</db:para>
<db:para>For instance, a drop action on an item in a QTreeView can result in new items either being inserted as children of the item specified by <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>, and <db:code role="parameter">parent</db:code>, or as siblings of the item.</db:para>
<db:para>When <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> are -1 it means that the dropped data should be considered as dropped directly on <db:code role="parameter">parent</db:code>. Usually this will mean appending the data as child items of <db:code role="parameter">parent</db:code>. If <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> are greater than or equal zero, it means that the drop occurred just before the specified <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> in the specified <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() member is called to get the list of acceptable MIME types. This default implementation assumes the default implementation of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>(), which returns a single default MIME type. If you reimplement <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() in your custom model to return multiple MIME types, you must reimplement this function to make use of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#canDropMimeData">canDropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endInsertColumns">
<db:title>[protected] void QAbstractItemModel::endInsertColumns()</db:title>
<db:para>Ends a column insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endInsertRows">
<db:title>[protected] void QAbstractItemModel::endInsertRows()</db:title>
<db:para>Ends a row insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMoveColumns">
<db:title>[protected, since 4.6] void QAbstractItemModel::endMoveColumns()</db:title>
<db:para>Ends a column move operation.</db:para>
<db:para>When implementing a subclass, you must call this function <db:emphasis>after</db:emphasis> moving data within the model's underlying data store.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveColumns">beginMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMoveRows">
<db:title>[protected, since 4.6] void QAbstractItemModel::endMoveRows()</db:title>
<db:para>Ends a row move operation.</db:para>
<db:para>When implementing a subclass, you must call this function <db:emphasis>after</db:emphasis> moving data within the model's underlying data store.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endRemoveColumns">
<db:title>[protected] void QAbstractItemModel::endRemoveColumns()</db:title>
<db:para>Ends a column removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endRemoveRows">
<db:title>[protected] void QAbstractItemModel::endRemoveRows()</db:title>
<db:para>Ends a row removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endResetModel">
<db:title>[protected, since 4.6] void QAbstractItemModel::endResetModel()</db:title>
<db:para>Completes a model reset operation.</db:para>
<db:para>You must call this function after resetting any internal data structure in your model or proxy model.</db:para>
<db:para>This function emits the signal <db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[virtual] void QAbstractItemModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Fetches any available data for the items with the parent specified by the <db:code role="parameter">parent</db:code> index.</db:para>
<db:para>Reimplement this if you are populating your model incrementally.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#canFetchMore">canFetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[virtual] Qt::ItemFlags QAbstractItemModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the item flags for the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The base class implementation returns a combination of flags that enables the item (ItemIsEnabled) and allows it to be selected (ItemIsSelectable).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[virtual] bool QAbstractItemModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Returns true if <db:code role="parameter">parent</db:code> has any children; otherwise returns false.</db:para>
<db:para>Use <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() on the parent to find out the number of children.</db:para>
<db:para>Note that it is undefined behavior to report that a particular index hasChildren with this method if the same index has the flag <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemNeverHasChildren</db:link> set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasIndex">
<db:title>bool QAbstractItemModel::hasIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Returns true if the model returns a valid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> for <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with <db:code role="parameter">parent</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>int QAbstractItemModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Returns the data for the given <db:code role="parameter">role</db:code> and <db:code role="parameter">section</db:code> in the header with the specified <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>For horizontal headers, the section number corresponds to the column number. Similarly, for vertical headers, the section number corresponds to the row number.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="">setHeaderData()</db:link></db:member>
<db:member>QHeaderView</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="headerDataChanged">
<db:title>void QAbstractItemModel::headerDataChanged(Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a header is changed. The <db:code role="parameter">orientation</db:code> indicates whether the horizontal or vertical header has changed. The sections in the header from the <db:code role="parameter">first</db:code> to the <db:code role="parameter">last</db:code> need to be updated.</db:para>
<db:para>When reimplementing the setHeaderData() function, this signal must be emitted explicitly.</db:para>
<db:para>If you are changing the number of columns or rows you do not need to emit this signal, but use the begin/end functions (refer to the section on subclassing in the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class description for details).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>()</db:member>
<db:member><db:link xlink:href="">setHeaderData()</db:link></db:member>
<db:member><db:link xlink:href="">dataChanged()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[pure virtual] QModelIndex QAbstractItemModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Returns the index of the item in the model specified by the given <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code> and <db:code role="parameter">parent</db:code> index.</db:para>
<db:para>When reimplementing this function in a subclass, call <db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>() to generate model indexes that other components can use to refer to items in your model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumn">
<db:title>bool QAbstractItemModel::insertColumn(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Inserts a single column before the given <db:code role="parameter">column</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the column is inserted; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[virtual] bool QAbstractItemModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>On models that support this, inserts <db:code role="parameter">count</db:code> new columns into the model before the given <db:code role="parameter">column</db:code>. The items in each new column will be children of the item represented by the <db:code role="parameter">parent</db:code> model index.</db:para>
<db:para>If <db:code role="parameter">column</db:code> is 0, the columns are prepended to any existing columns.</db:para>
<db:para>If <db:code role="parameter">column</db:code> is <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), the columns are appended to any existing columns.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> has no children, a single row with <db:code role="parameter">count</db:code> columns is inserted.</db:para>
<db:para>Returns true if the columns were successfully inserted; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow">
<db:title>bool QAbstractItemModel::insertRow(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Inserts a single row before the given <db:code role="parameter">row</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:note>
<db:para>This function calls the virtual method <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>.</db:para>
</db:note>
<db:para>Returns true if the row is inserted; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRows">
<db:title>[virtual] bool QAbstractItemModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:note>
<db:para>The base class implementation of this function does nothing and returns false.</db:para>
</db:note>
<db:para>On models that support this, inserts <db:code role="parameter">count</db:code> rows into the model before the given <db:code role="parameter">row</db:code>. Items in the new row will be children of the item represented by the <db:code role="parameter">parent</db:code> model index.</db:para>
<db:para>If <db:code role="parameter">row</db:code> is 0, the rows are prepended to any existing rows in the parent.</db:para>
<db:para>If <db:code role="parameter">row</db:code> is <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), the rows are appended to any existing rows in the parent.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> has no children, a single column with <db:code role="parameter">count</db:code> rows is inserted.</db:para>
<db:para>Returns true if the rows were successfully inserted; otherwise returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data. In either case, you will need to call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() to notify other components that the model has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemData">
<db:title>int QAbstractItemModel::itemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns a map with values for all predefined roles in the model for the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Reimplement this function if you want to extend the default behavior of this function to include custom roles in the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutAboutToBeChanged">
<db:title>[since 5.0] void QAbstractItemModel::layoutAboutToBeChanged(const QList&lt;QPersistentModelIndex&gt; &amp;<db:emphasis>parents</db:emphasis> = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint <db:emphasis>hint</db:emphasis> = QAbstractItemModel::NoLayoutChangeHint)</db:title>
<db:para>This signal is emitted just before the layout of a model is changed. Components connected to this signal use it to adapt to changes in the model's layout.</db:para>
<db:para>Subclasses should update any persistent model indexes after emitting layoutAboutToBeChanged().</db:para>
<db:para>The optional <db:code role="parameter">parents</db:code> parameter is used to give a more specific notification about what parts of the layout of the model are changing. An empty list indicates a change to the layout of the entire model. The order of elements in the <db:code role="parameter">parents</db:code> list is not significant. The optional <db:code role="parameter">hint</db:code> parameter is used to give a hint about what is happening while the model is relayouting.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutChanged">
<db:title>[since 5.0] void QAbstractItemModel::layoutChanged(const QList&lt;QPersistentModelIndex&gt; &amp;<db:emphasis>parents</db:emphasis> = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint <db:emphasis>hint</db:emphasis> = QAbstractItemModel::NoLayoutChangeHint)</db:title>
<db:para>This signal is emitted whenever the layout of items exposed by the model has changed; for example, when the model has been sorted. When this signal is received by a view, it should update the layout of items to reflect this change.</db:para>
<db:para>When subclassing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> or QAbstractProxyModel, ensure that you emit <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link>() before changing the order of items or altering the structure of the data you expose to views, and emit layoutChanged() after changing the layout.</db:para>
<db:para>The optional <db:code role="parameter">parents</db:code> parameter is used to give a more specific notification about what parts of the layout of the model are changing. An empty list indicates a change to the layout of the entire model. The order of elements in the <db:code role="parameter">parents</db:code> list is not significant. The optional <db:code role="parameter">hint</db:code> parameter is used to give a hint about what is happening while the model is relayouting.</db:para>
<db:para>Subclasses should update any persistent model indexes before emitting layoutChanged(). In other words, when the structure changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>emit <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Remember the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> that will change</db:para>
</db:listitem>
<db:listitem>
<db:para>Update your internal data</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>emit layoutChanged</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link>()</db:member>
<db:member><db:link xlink:href="">dataChanged()</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeData">
<db:title>[virtual] QMimeData *QAbstractItemModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Returns an object that contains serialized items of data corresponding to the list of <db:code role="parameter">indexes</db:code> specified. The format used to describe the encoded data is obtained from the <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() function. This default implementation uses the default MIME type returned by the default implementation of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>(). If you reimplement <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() in your custom model to return more MIME types, reimplement this function to make use of them.</db:para>
<db:para>If the list of <db:code role="parameter">indexes</db:code> is empty, or there are no supported MIME types, 0 is returned rather than a serialized empty list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[virtual] QStringList QAbstractItemModel::mimeTypes() const</db:title>
<db:para>Returns the list of allowed MIME types. By default, the built-in models and views use an internal MIME type: application/x-qabstractitemmodeldatalist.</db:para>
<db:para>When implementing drag and drop support in a custom model, if you will return data in formats other than the default internal MIME type, reimplement this function to return your list of MIME types.</db:para>
<db:para>If you reimplement this function in your custom model, you must also reimplement the member functions that call it: <db:link xlink:href="qabstractitemmodel.xml#mimeData">mimeData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#mimeData">mimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelAboutToBeReset">
<db:title>[since 4.2] void QAbstractItemModel::modelAboutToBeReset()</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qtextstream.xml#reset-1">reset</db:link>() is called, before the model's internal state (e.g. persistent model indexes) has been invalidated.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelReset">
<db:title>[since 4.1] void QAbstractItemModel::modelReset()</db:title>
<db:para>This signal is emitted when <db:link xlink:href="qtextstream.xml#reset-1">reset</db:link>() or <db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>() is called, after the model's internal state (e.g. persistent model indexes) has been invalidated.</db:para>
<db:para>Note that if a model is reset it should be considered that all information previously retrieved from it is invalid. This includes but is not limited to the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>(), data retrieved through <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveColumn">
<db:title>bool QAbstractItemModel::moveColumn(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceColumn</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>On models that support this, moves <db:code role="parameter">sourceColumn</db:code> from <db:code role="parameter">sourceParent</db:code> to <db:code role="parameter">destinationChild</db:code> under <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the columns were successfully moved; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveColumns">moveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveRow">moveRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveColumns">
<db:title>[virtual] bool QAbstractItemModel::moveColumns(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceColumn</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>On models that support this, moves <db:code role="parameter">count</db:code> columns starting with the given <db:code role="parameter">sourceColumn</db:code> under parent <db:code role="parameter">sourceParent</db:code> to column <db:code role="parameter">destinationChild</db:code> under parent <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the columns were successfully moved; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support moving. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveColumns">beginMoveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveColumns">endMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRow">
<db:title>bool QAbstractItemModel::moveRow(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>On models that support this, moves <db:code role="parameter">sourceRow</db:code> from <db:code role="parameter">sourceParent</db:code> to <db:code role="parameter">destinationChild</db:code> under <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the rows were successfully moved; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveRows">moveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveColumn">moveColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRows">
<db:title>[virtual] bool QAbstractItemModel::moveRows(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:para>On models that support this, moves <db:code role="parameter">count</db:code> rows starting with the given <db:code role="parameter">sourceRow</db:code> under parent <db:code role="parameter">sourceParent</db:code> to row <db:code role="parameter">destinationChild</db:code> under parent <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the rows were successfully moved; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support moving. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>[pure virtual] QModelIndex QAbstractItemModel::parent(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the parent of the model item with the given <db:code role="parameter">index</db:code>. If the item has no parent, an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> is returned.</db:para>
<db:para>A common convention used in models that expose tree data structures is that only items in the first column have children. For that case, when reimplementing this function in a subclass the column of the returned <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> would be 0.</db:para>
<db:para>When reimplementing this function in a subclass, be careful to avoid calling <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> member functions, such as <db:link xlink:href="qmodelindex.xml#parent">QModelIndex::parent</db:link>(), since indexes belonging to your model will simply call your implementation, leading to infinite recursion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistentIndexList">
<db:title>[protected, since 4.2] QModelIndexList QAbstractItemModel::persistentIndexList() const</db:title>
<db:para>Returns the list of indexes stored as persistent indexes in the model.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="removeColumn">
<db:title>bool QAbstractItemModel::removeColumn(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Removes the given <db:code role="parameter">column</db:code> from the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the column is removed; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[virtual] bool QAbstractItemModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>On models that support this, removes <db:code role="parameter">count</db:code> columns starting with the given <db:code role="parameter">column</db:code> under parent <db:code role="parameter">parent</db:code> from the model.</db:para>
<db:para>Returns true if the columns were successfully removed; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow">
<db:title>bool QAbstractItemModel::removeRow(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>Removes the given <db:code role="parameter">row</db:code> from the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the row is removed; otherwise returns false.</db:para>
<db:para>This is a convenience function that calls <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(). The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation of <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRows">
<db:title>[virtual] bool QAbstractItemModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para>On models that support this, removes <db:code role="parameter">count</db:code> rows starting with the given <db:code role="parameter">row</db:code> under parent <db:code role="parameter">parent</db:code> from the model.</db:para>
<db:para>Returns true if the rows were successfully removed; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revert">
<db:title>[virtual] void QAbstractItemModel::revert()</db:title>
<db:para>Lets the model know that it should discard cached information. This function is typically used for row editing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">submit()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="roleNames">
<db:title>[virtual, since 4.6] QHash&lt;int, QByteArray&gt; QAbstractItemModel::roleNames() const</db:title>
<db:para>Returns the model's role names.</db:para>
<db:para>The default role names set by Qt are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Role</db:para>
</db:th>
<db:th>
<db:para>QML Role Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link></db:para>
</db:td>
<db:td>
<db:para>display</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DecorationRole</db:link></db:para>
</db:td>
<db:td>
<db:para>decoration</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link></db:para>
</db:td>
<db:td>
<db:para>edit</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ToolTipRole</db:link></db:para>
</db:td>
<db:td>
<db:para>toolTip</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::StatusTipRole</db:link></db:para>
</db:td>
<db:td>
<db:para>statusTip</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::WhatsThisRole</db:link></db:para>
</db:td>
<db:td>
<db:para>whatsThis</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This function was introduced in Qt 4.6.</db:para>
</db:section>
<db:section xml:id="rowCount">
<db:title>[pure virtual] int QAbstractItemModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Returns the number of rows under the given <db:code role="parameter">parent</db:code>. When the parent is valid it means that rowCount is returning the number of children of parent.</db:para>
<db:note>
<db:para>When implementing a table based model, rowCount() should return 0 when the parent is valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeInserted">
<db:title>void QAbstractItemModel::rowsAboutToBeInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:para>This signal is emitted just before rows are inserted into the model. The new items will be positioned between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeMoved">
<db:title>[since 4.6] void QAbstractItemModel::rowsAboutToBeMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationRow</db:emphasis>)</db:title>
<db:para>This signal is emitted just before rows are moved within the model. The items that will be moved are those between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item. They will be moved to <db:code role="parameter">destinationParent</db:code> starting at the row <db:code role="parameter">destinationRow</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeRemoved">
<db:title>void QAbstractItemModel::rowsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted just before rows are removed from the model. The items that will be removed are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>void QAbstractItemModel::rowsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted after rows have been inserted into the model. The new items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsMoved">
<db:title>[since 4.6] void QAbstractItemModel::rowsMoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>, const QModelIndex &amp;<db:emphasis>destination</db:emphasis>, int <db:emphasis>row</db:emphasis>)</db:title>
<db:para>This signal is emitted after rows have been moved within the model. The items between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item have been moved to <db:code role="parameter">destination</db:code> starting at the row <db:code role="parameter">row</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsRemoved">
<db:title>void QAbstractItemModel::rowsRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:para>This signal is emitted after rows have been removed from the model. The removed items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[virtual] QModelIndex QAbstractItemModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the sibling at <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> for the item at <db:code role="parameter">index</db:code>, or an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> if there is no sibling at that location.</db:para>
<db:para>sibling() is just a convenience function that finds the item's parent, and uses it to retrieve the index of the child item in the specified <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:para>This method can optionally be overridden for implementation-specific optimization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#row">QModelIndex::row</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#column">QModelIndex::column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sort">
<db:title>[virtual] void QAbstractItemModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Sorts the model by <db:code role="parameter">column</db:code> in the given <db:code role="parameter">order</db:code>.</db:para>
<db:para>The base class implementation does nothing.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>int QAbstractItemModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the row and column span of the item represented by <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>Currently, span is not used.</db:para>
</db:note>
</db:section>
<db:section xml:id="supportedDragActions">
<db:title>[virtual] Qt::DropActions QAbstractItemModel::supportedDragActions() const</db:title>
<db:para>Returns the actions supported by the data in this model.</db:para>
<db:para>The default implementation returns <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>(). Reimplement this function if you wish to support additional actions.</db:para>
<db:para>supportedDragActions() is used by QAbstractItemView::startDrag() as the default values when a drag occurs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
<db:member><db:link xlink:href="">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[virtual, since 4.2] Qt::DropActions QAbstractItemModel::supportedDropActions() const</db:title>
<db:para>Returns the drop actions supported by this model.</db:para>
<db:para>The default implementation returns <db:link xlink:href="qt.xml#DropAction-enum">Qt::CopyAction</db:link>. Reimplement this function if you wish to support additional actions. You must also reimplement the <db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>() function to handle the additional operations.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
<db:member><db:link xlink:href="">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
