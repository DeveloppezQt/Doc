<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractItemModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class provides the abstract interface for item model classes.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractItemModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodelreplica.xml" xlink:role="class">QAbstractItemModelReplica</db:link>, <db:link xlink:href="qabstractlistmodel.xml" xlink:role="class">QAbstractListModel</db:link>, <db:link xlink:href="qabstractproxymodel.xml" xlink:role="class">QAbstractProxyModel</db:link>, <db:link xlink:href="qabstracttablemodel.xml" xlink:role="class">QAbstractTableModel</db:link>, <db:link xlink:href="qconcatenatetablesproxymodel.xml" xlink:role="class">QConcatenateTablesProxyModel</db:link>, <db:link xlink:href="qfilesystemmodel.xml" xlink:role="class">QFileSystemModel</db:link>, <db:link xlink:href="qhelpcontentmodel.xml" xlink:role="class">QHelpContentModel</db:link>, <db:link xlink:href="qpdfbookmarkmodel.xml" xlink:role="class">QPdfBookmarkModel</db:link>, and <db:link xlink:href="qstandarditemmodel.xml" xlink:role="class">QStandardItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractItemModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class defines the standard interface that item models must use to be able to interoperate with other components in the model/view architecture. It is not supposed to be instantiated directly. Instead, you should subclass it to create new models.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>. It can be used as the underlying data model for the item view elements in QML or the item view classes in the Qt Widgets module.</db:para>
<db:para>If you need a model to use with an item view such as QML's List View element or the C++ widgets <db:link xlink:href="qlistview.xml">QListView</db:link> or <db:link xlink:href="qtableview.xml">QTableView</db:link>, you should consider subclassing <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> or <db:link xlink:href="qabstracttablemodel.xml">QAbstractTableModel</db:link> instead of this class.</db:para>
<db:para>The underlying data model is exposed to views and delegates as a hierarchy of tables. If you do not make use of the hierarchy, then the model is a simple table of rows and columns. Each item has a unique index specified by a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelindex-no-parent.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Every item of data that can be accessed via a model has an associated model index. You can obtain this model index using the <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>() function. Each index may have a <db:link xlink:href="qabstractitemmodel.xml#sibling">sibling</db:link>() index; child items have a <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() index.</db:para>
<db:para>Each item has a number of data elements associated with it and they can be retrieved by specifying a role (see <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>) to the model's <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function. Data for all available roles can be obtained at the same time using the <db:link xlink:href="qabstractitemmodel.xml#itemData">itemData</db:link>() function.</db:para>
<db:para>Data for each role is set using a particular <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>. Data for individual roles are set individually with <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>(), or they can be set for all roles with <db:link xlink:href="qabstractitemmodel.xml#setItemData">setItemData</db:link>().</db:para>
<db:para>Items can be queried with <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() (see <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlag</db:link>) to see if they can be selected, dragged, or manipulated in other ways.</db:para>
<db:para>If an item has child objects, <db:link xlink:href="qabstractitemmodel.xml#hasChildren">hasChildren</db:link>() returns true for the corresponding index.</db:para>
<db:para>The model has a <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and a <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>() for each level of the hierarchy. Rows and columns can be inserted and removed with <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>().</db:para>
<db:para>The model emits signals to indicate changes. For example, <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() is emitted whenever items of data made available by the model are changed. Changes to the headers supplied by the model cause <db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>() to be emitted. If the structure of the underlying data changes, the model can emit <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link>() to indicate to any attached views that they should redisplay any items shown, taking the new structure into account.</db:para>
<db:para>The items available through the model can be searched for particular data using the <db:link xlink:href="qabstractitemmodel.xml#match">match</db:link>() function.</db:para>
<db:para>To sort the model, you can use <db:link xlink:href="qabstractitemmodel.xml#sort">sort</db:link>().</db:para>
<db:section xml:id="subclassing">
<db:title>Subclassing</db:title>
<db:note>
<db:para>Some general guidelines for subclassing models are available in the <db:link xlink:href="model-view-programming.xml#model-subclassing-reference">Model Subclassing Reference</db:link>.</db:para>
</db:note>
<db:para>When subclassing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, at the very least you must implement <db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(). These functions are used in all read-only models, and form the basis of editable models.</db:para>
<db:para>You can also reimplement <db:link xlink:href="qabstractitemmodel.xml#hasChildren">hasChildren</db:link>() to provide special behavior for models where the implementation of <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() is expensive. This makes it possible for models to restrict the amount of data requested by views, and can be used as a way to implement lazy population of model data.</db:para>
<db:para>To enable editing in your model, you must also implement <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>(), and reimplement <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>() to ensure that ItemIsEditable is returned. You can also reimplement <db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>() to control the way the headers for your model are presented.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>() signals must be emitted explicitly when reimplementing the <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>() functions, respectively.</db:para>
<db:para>Custom models need to create model indexes for other components to use. To do this, call <db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>() with suitable row and column numbers for the item, and an identifier for it, either as a pointer or as an integer value. The combination of these values must be unique for each item. Custom models typically use these unique identifiers in other reimplemented functions to retrieve item data and access information about the item's parents and children. See the <db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml">Simple Tree Model Example</db:link> for more information about unique identifiers.</db:para>
<db:para>It is not necessary to support every role defined in <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>. Depending on the type of data contained within a model, it may only be useful to implement the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function to return valid information for some of the more common roles. Most models provide at least a textual representation of item data for the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link>, and well-behaved models should also provide valid information for the <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ToolTipRole</db:link> and <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::WhatsThisRole</db:link>. Supporting these roles enables models to be used with standard Qt views. However, for some models that handle highly-specialized data, it may be appropriate to provide data only for user-defined roles.</db:para>
<db:para>Models that provide interfaces to resizable data structures can provide implementations of <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>(),and <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>(). When implementing these functions, it is important to notify any connected views about changes to the model's dimensions both <db:emphasis>before</db:emphasis> and <db:emphasis>after</db:emphasis> they occur:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() <db:emphasis>before</db:emphasis> inserting new rows into the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>() <db:emphasis>before</db:emphasis> inserting new columns into the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>() <db:emphasis>before</db:emphasis> the rows are removed from the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>A <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() implementation must call <db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>() <db:emphasis>before</db:emphasis> the columns are removed from the data structure, and <db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>() <db:emphasis>immediately afterwards</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>private</db:emphasis> signals that these functions emit give attached components the chance to take action before any data becomes unavailable. The encapsulation of the insert and remove operations with these begin and end functions also enables the model to manage <db:link xlink:href="qpersistentmodelindex.xml">persistent model indexes</db:link> correctly. <db:emphasis role="bold">If you want selections to be handled properly, you must ensure that you call these functions.</db:emphasis> If you insert or remove an item with children, you do not need to call these functions for the child items. In other words, the parent item will take care of its child items.</db:para>
<db:para>To create models that populate incrementally, you can reimplement <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#canFetchMore">canFetchMore</db:link>(). If the reimplementation of <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() adds rows to the model, <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() must be called.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml#model-classes">Model Classes</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#model-subclassing-reference">Model Subclassing Reference</db:link></db:member>
<db:member><db:link xlink:href="qmodelindex.xml">QModelIndex</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-simpletreemodel-example.xml">Simple Tree Model Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-editabletreemodel-example.xml">Editable Tree Model Example</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-fetchmore-example.xml">Fetch More Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CheckIndexOption-enum">
<db:title>enum QAbstractItemModel::CheckIndexOption</db:title>
<db:bridgehead renderas="sect2">flags QAbstractItemModel::CheckIndexOptions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>CheckIndexOption</db:enumname>
<db:enumitem>
<db:enumidentifier>NoOption</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IndexIsValid</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DoNotUseParent</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ParentIsInvalid</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QAbstractItemModel::CheckIndexOptions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum can be used to control the checks performed by <db:link xlink:href="qabstractitemmodel.xml#checkIndex">QAbstractItemModel::checkIndex</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::<db:emphasis role="bold">CheckIndexOption</db:emphasis>::NoOption</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No check options are specified.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::<db:emphasis role="bold">CheckIndexOption</db:emphasis>::IndexIsValid</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The model index passed to <db:link xlink:href="qabstractitemmodel.xml#checkIndex">QAbstractItemModel::checkIndex</db:link>() is checked to be a valid model index.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::<db:emphasis role="bold">CheckIndexOption</db:emphasis>::DoNotUseParent</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Does not perform any check involving the usage of the parent of the index passed to <db:link xlink:href="qabstractitemmodel.xml#checkIndex">QAbstractItemModel::checkIndex</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::<db:emphasis role="bold">CheckIndexOption</db:emphasis>::ParentIsInvalid</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The parent of the model index passed to <db:link xlink:href="qabstractitemmodel.xml#checkIndex">QAbstractItemModel::checkIndex</db:link>() is checked to be an invalid model index. If both this option and DoNotUseParent are specified, then this option is ignored.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CheckIndexOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CheckIndexOption&gt;. </db:code>It stores an OR combination of <db:code>CheckIndexOption</db:code> values.</db:para>
</db:section>
<db:section xml:id="LayoutChangeHint-enum">
<db:title>enum QAbstractItemModel::LayoutChangeHint</db:title>
<db:enumsynopsis>
<db:enumname>LayoutChangeHint</db:enumname>
<db:enumitem>
<db:enumidentifier>NoLayoutChangeHint</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VerticalSortHint</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HorizontalSortHint</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the way the model changes layout.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::NoLayoutChangeHint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No hint is available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::VerticalSortHint</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Rows are being sorted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:emphasis>::HorizontalSortHint</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Columns are being sorted.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that VerticalSortHint and HorizontalSortHint carry the meaning that items are being moved within the same parent, not moved to a different parent in the model, and not filtered out or in.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractItemModel">
<db:title>[explicit] QAbstractItemModel::QAbstractItemModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractItemModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractItemModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract item model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractItemModel">
<db:title>[virtual] QAbstractItemModel::~QAbstractItemModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractItemModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractItemModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the abstract item model.</db:para>
</db:section>
<db:section xml:id="beginInsertColumns">
<db:title>[protected] void QAbstractItemModel::beginInsertColumns(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginInsertColumns</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginInsertColumns(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a column insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent into which the new columns are inserted; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the column numbers of the new columns will have after they have been inserted.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-insert-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Inserting columns</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last column numbers for the span of columns you want to insert into an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we insert three columns before column 4, so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginInsertColumns(parent, 4, 6);
</db:programlisting>
<db:para>This inserts the three new columns as columns 4, 5, and 6.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-append-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Appending columns</db:para>
</db:td>
<db:td>
<db:para>To append columns, insert them after the last column.</db:para>
<db:para>For example, as shown in the diagram, we append three columns to a collection of six existing columns (ending in column 5), so <db:code role="parameter">first</db:code> is 6 and <db:code role="parameter">last</db:code> is 8:</db:para>
<db:programlisting language="cpp">beginInsertColumns(parent, 6, 8);
</db:programlisting>
<db:para>This appends the two new columns as columns 6, 7, and 8.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#columnsAboutToBeInserted">columnsAboutToBeInserted</db:link>() signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginInsertRows">
<db:title>[protected] void QAbstractItemModel::beginInsertRows(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginInsertRows</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginInsertRows(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a row insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent into which the new rows are inserted; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the row numbers that the new rows will have after they have been inserted.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-insert-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Inserting rows</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows you want to insert into an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we insert three rows before row 2, so <db:code role="parameter">first</db:code> is 2 and <db:code role="parameter">last</db:code> is 4:</db:para>
<db:programlisting language="cpp">beginInsertRows(parent, 2, 4);
</db:programlisting>
<db:para>This inserts the three new rows as rows 2, 3, and 4.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-append-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Appending rows</db:para>
</db:td>
<db:td>
<db:para>To append rows, insert them after the last row.</db:para>
<db:para>For example, as shown in the diagram, we append two rows to a collection of 4 existing rows (ending in row 3), so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 5:</db:para>
<db:programlisting language="cpp">beginInsertRows(parent, 4, 5);
</db:programlisting>
<db:para>This appends the two new rows as rows 4 and 5.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#rowsAboutToBeInserted">rowsAboutToBeInserted</db:link>() signal which connected views (or proxies) must handle before the data is inserted. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMoveColumns">
<db:title>[protected] bool QAbstractItemModel::beginMoveColumns(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceFirst</db:emphasis>, int <db:emphasis>sourceLast</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>beginMoveColumns</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceFirst</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceLast</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool beginMoveColumns(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a column move operation.</db:para>
<db:para>When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using beginMoveColumns and <db:link xlink:href="qabstractitemmodel.xml#endMoveColumns">endMoveColumns</db:link> is an alternative to emitting <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link> and <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link> directly along with <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>.</db:para>
<db:para>The <db:code role="parameter">sourceParent</db:code> index corresponds to the parent from which the columns are moved; <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are the first and last column numbers of the columns to be moved. The <db:code role="parameter">destinationParent</db:code> index corresponds to the parent into which those columns are moved. The <db:code role="parameter">destinationChild</db:code> is the column to which the columns will be moved. That is, the index at column <db:code role="parameter">sourceFirst</db:code> in <db:code role="parameter">sourceParent</db:code> will become column <db:code role="parameter">destinationChild</db:code> in <db:code role="parameter">destinationParent</db:code>, followed by all other columns up to <db:code role="parameter">sourceLast</db:code>.</db:para>
<db:para>However, when moving columns down in the same parent (<db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are equal), the columns will be placed before the <db:code role="parameter">destinationChild</db:code> index. That is, if you wish to move columns 0 and 1 so they will become columns 1 and 2, <db:code role="parameter">destinationChild</db:code> should be 3. In this case, the new index for the source column i (which is between <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code>) is equal to (destinationChild-sourceLast-1+i).</db:para>
<db:para>Note that if <db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are the same, you must ensure that the <db:code role="parameter">destinationChild</db:code> is not within the range of <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> + 1. You must also ensure that you do not attempt to move a column to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveColumns">endMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginMoveRows">
<db:title>[protected] bool QAbstractItemModel::beginMoveRows(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceFirst</db:emphasis>, int <db:emphasis>sourceLast</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>beginMoveRows</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceFirst</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceLast</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool beginMoveRows(const QModelIndex &amp;sourceParent, int sourceFirst, int sourceLast, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a row move operation.</db:para>
<db:para>When reimplementing a subclass, this method simplifies moving entities in your model. This method is responsible for moving persistent indexes in the model, which you would otherwise be required to do yourself. Using beginMoveRows and <db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link> is an alternative to emitting <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link> and <db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link> directly along with <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>.</db:para>
<db:para>The <db:code role="parameter">sourceParent</db:code> index corresponds to the parent from which the rows are moved; <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are the first and last row numbers of the rows to be moved. The <db:code role="parameter">destinationParent</db:code> index corresponds to the parent into which those rows are moved. The <db:code role="parameter">destinationChild</db:code> is the row to which the rows will be moved. That is, the index at row <db:code role="parameter">sourceFirst</db:code> in <db:code role="parameter">sourceParent</db:code> will become row <db:code role="parameter">destinationChild</db:code> in <db:code role="parameter">destinationParent</db:code>, followed by all other rows up to <db:code role="parameter">sourceLast</db:code>.</db:para>
<db:para>However, when moving rows down in the same parent (<db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are equal), the rows will be placed before the <db:code role="parameter">destinationChild</db:code> index. That is, if you wish to move rows 0 and 1 so they will become rows 1 and 2, <db:code role="parameter">destinationChild</db:code> should be 3. In this case, the new index for the source row i (which is between <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code>) is equal to (destinationChild-sourceLast-1+i).</db:para>
<db:para>Note that if <db:code role="parameter">sourceParent</db:code> and <db:code role="parameter">destinationParent</db:code> are the same, you must ensure that the <db:code role="parameter">destinationChild</db:code> is not within the range of <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> + 1. You must also ensure that you do not attempt to move a row to one of its own children or ancestors. This method returns false if either condition is true, in which case you should abort your move operation.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-1.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows to another parent</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows in the source parent you want to move in the model. Also specify the row in the destination parent to move the span to.</db:para>
<db:para>For example, as shown in the diagram, we move three rows from row 2 to 4 in the source, so <db:code role="parameter">sourceFirst</db:code> is 2 and <db:code role="parameter">sourceLast</db:code> is 4. We move those items to above row 2 in the destination, so <db:code role="parameter">destinationChild</db:code> is 2.</db:para>
<db:programlisting language="cpp">beginMoveRows(sourceParent, 2, 4, destinationParent, 2);
</db:programlisting>
<db:para>This moves the three rows rows 2, 3, and 4 in the source to become 2, 3 and 4 in the destination. Other affected siblings are displaced accordingly.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-2.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows to append to another parent</db:para>
</db:td>
<db:td>
<db:para>To append rows to another parent, move them to after the last row.</db:para>
<db:para>For example, as shown in the diagram, we move three rows to a collection of 6 existing rows (ending in row 5), so <db:code role="parameter">destinationChild</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginMoveRows(sourceParent, 2, 4, destinationParent, 6);
</db:programlisting>
<db:para>This moves the target rows to the end of the target parent as 6, 7 and 8.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-3.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows in the same parent up</db:para>
</db:td>
<db:td>
<db:para>To move rows within the same parent, specify the row to move them to.</db:para>
<db:para>For example, as shown in the diagram, we move one item from row 2 to row 0, so <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are 2 and <db:code role="parameter">destinationChild</db:code> is 0.</db:para>
<db:programlisting language="cpp">beginMoveRows(parent, 2, 2, parent, 0);
</db:programlisting>
<db:para>Note that other rows may be displaced accordingly. Note also that when moving items within the same parent you should not attempt invalid or no-op moves. In the above example, item 2 is at row 2 before the move, so it cannot be moved to row 2 (where it is already) or row 3 (no-op as row 3 means above row 3, where it is already)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-move-rows-4.png"/>
</db:imageobject>
</db:inlinemediaobject> Moving rows in the same parent down</db:para>
</db:td>
<db:td>
<db:para>To move rows within the same parent, specify the row to move them to.</db:para>
<db:para>For example, as shown in the diagram, we move one item from row 2 to row 4, so <db:code role="parameter">sourceFirst</db:code> and <db:code role="parameter">sourceLast</db:code> are 2 and <db:code role="parameter">destinationChild</db:code> is 4.</db:para>
<db:programlisting language="cpp">beginMoveRows(parent, 2, 2, parent, 4);
</db:programlisting>
<db:para>Note that other rows may be displaced accordingly.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginRemoveColumns">
<db:title>[protected] void QAbstractItemModel::beginRemoveColumns(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginRemoveColumns</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginRemoveColumns(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a column removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent from which the new columns are removed; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the column numbers of the first and last columns to be removed.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-remove-columns.png"/>
</db:imageobject>
</db:inlinemediaobject> Removing columns</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last column numbers for the span of columns you want to remove from an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we remove the three columns from column 4 to column 6, so <db:code role="parameter">first</db:code> is 4 and <db:code role="parameter">last</db:code> is 6:</db:para>
<db:programlisting language="cpp">beginRemoveColumns(parent, 4, 6);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#columnsAboutToBeRemoved">columnsAboutToBeRemoved</db:link>() signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginRemoveRows">
<db:title>[protected] void QAbstractItemModel::beginRemoveRows(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginRemoveRows</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginRemoveRows(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a row removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() in a subclass, you must call this function <db:emphasis>before</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> index corresponds to the parent from which the new rows are removed; <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> are the row numbers of the rows to be removed.</db:para>
<db:informaltable style="generic" width="80%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/modelview-begin-remove-rows.png"/>
</db:imageobject>
</db:inlinemediaobject> Removing rows</db:para>
</db:td>
<db:td>
<db:para>Specify the first and last row numbers for the span of rows you want to remove from an item in a model.</db:para>
<db:para>For example, as shown in the diagram, we remove the two rows from row 2 to row 3, so <db:code role="parameter">first</db:code> is 2 and <db:code role="parameter">last</db:code> is 3:</db:para>
<db:programlisting language="cpp">beginRemoveRows(parent, 2, 3);
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>This function emits the <db:link xlink:href="qabstractitemmodel.xml#rowsAboutToBeRemoved">rowsAboutToBeRemoved</db:link>() signal which connected views (or proxies) must handle before the data is removed. Otherwise, the views may end up in an invalid state.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="beginResetModel">
<db:title>[protected] void QAbstractItemModel::beginResetModel()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>beginResetModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void beginResetModel()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Begins a model reset operation.</db:para>
<db:para>A reset operation resets the model to its current state in any attached views.</db:para>
<db:note>
<db:para>Any views attached to this model will be reset as well.</db:para>
</db:note>
<db:para>When a model is reset it means that any previous data reported from the model is now invalid and has to be queried for again. This also means that the current item and any selected items will become invalid.</db:para>
<db:para>When a model radically changes its data it can sometimes be easier to just call this function rather than emit <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() to inform other components when the underlying data source, or its structure, has changed.</db:para>
<db:para>You must call this function before resetting any internal data structures in your model or proxy model.</db:para>
<db:para>This function emits the signal <db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="buddy">
<db:title>[virtual] QModelIndex QAbstractItemModel::buddy(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>buddy</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex buddy(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a model index for the buddy of the item represented by <db:code role="parameter">index</db:code>. When the user wants to edit an item, the view will call this function to check whether another item in the model should be edited instead. Then, the view will construct a delegate using the model index returned by the buddy item.</db:para>
<db:para>The default implementation of this function has each item as its own buddy.</db:para>
</db:section>
<db:section xml:id="canDropMimeData">
<db:title>[virtual] bool QAbstractItemModel::canDropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canDropMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canDropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if a model can accept a drop of the <db:code role="parameter">data</db:code>. This default implementation only checks if <db:code role="parameter">data</db:code> has at least one format in the list of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() and if <db:code role="parameter">action</db:code> is among the model's <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>().</db:para>
<db:para>Reimplement this function in your custom model, if you want to test whether the <db:code role="parameter">data</db:code> can be dropped at <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>, <db:code role="parameter">parent</db:code> with <db:code role="parameter">action</db:code>. If you don't need that test, it is not necessary to reimplement this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[virtual] bool QAbstractItemModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canFetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canFetchMore(const QModelIndex &amp;parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if there is more data available for <db:code role="parameter">parent</db:code>; otherwise returns false.</db:para>
<db:para>The default implementation always returns false.</db:para>
<db:para>If canFetchMore() returns true, the <db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>() function should be called. This is the behavior of <db:link xlink:href="qabstractitemview.xml">QAbstractItemView</db:link>, for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#fetchMore">fetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changePersistentIndex">
<db:title>[protected] void QAbstractItemModel::changePersistentIndex(const QModelIndex &amp;<db:emphasis>from</db:emphasis>, const QModelIndex &amp;<db:emphasis>to</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>changePersistentIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changePersistentIndex(const QModelIndex &amp;from, const QModelIndex &amp;to)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the <db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link> that is equal to the given <db:code role="parameter">from</db:code> model index to the given <db:code role="parameter">to</db:code> model index.</db:para>
<db:para>If no persistent model index equal to the given <db:code role="parameter">from</db:code> model index was found, nothing is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#persistentIndexList">persistentIndexList</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndexList">changePersistentIndexList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changePersistentIndexList">
<db:title>[protected] void QAbstractItemModel::changePersistentIndexList(const QModelIndexList &amp;<db:emphasis>from</db:emphasis>, const QModelIndexList &amp;<db:emphasis>to</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>changePersistentIndexList</db:methodname>
<db:methodparam>
<db:type>const QModelIndexList &amp;</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndexList &amp;</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changePersistentIndexList(const QModelIndexList &amp;from, const QModelIndexList &amp;to)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the {<db:link xlink:href="qpersistentmodelindex.xml">QPersistentModelIndex</db:link>}es that are equal to the indexes in the given <db:code role="parameter">from</db:code> model index list to the given <db:code role="parameter">to</db:code> model index list.</db:para>
<db:para>If no persistent model indexes equal to the indexes in the given <db:code role="parameter">from</db:code> model index list are found, nothing is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#persistentIndexList">persistentIndexList</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checkIndex">
<db:title>bool QAbstractItemModel::checkIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QAbstractItemModel::CheckIndexOptions <db:emphasis>options</db:emphasis> = CheckIndexOption::NoOption) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>checkIndex</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemModel::CheckIndexOptions</db:type>
<db:parameter>options</db:parameter>
<db:initializer>CheckIndexOption::NoOption</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool checkIndex(const QModelIndex &amp;index, QAbstractItemModel::CheckIndexOptions options) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function checks whether <db:code role="parameter">index</db:code> is a legal model index for this model. A legal model index is either an invalid model index, or a valid model index for which all the following holds:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the index' model is this;</db:para>
</db:listitem>
<db:listitem>
<db:para>the index' row is greater or equal than zero;</db:para>
</db:listitem>
<db:listitem>
<db:para>the index' row is less than the row count for the index' parent;</db:para>
</db:listitem>
<db:listitem>
<db:para>the index' column is greater or equal than zero;</db:para>
</db:listitem>
<db:listitem>
<db:para>the index' column is less than the column count for the index' parent.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">options</db:code> argument may change some of these checks. If <db:code role="parameter">options</db:code> contains IndexIsValid, then <db:code role="parameter">index</db:code> must be a valid index; this is useful when reimplementing functions such as <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() or <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>(), which expect valid indexes.</db:para>
<db:para>If <db:code role="parameter">options</db:code> contains DoNotUseParent, then the checks that would call <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() are omitted; this allows calling this function from a <db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>() reimplementation (otherwise, this would result in endless recursion and a crash).</db:para>
<db:para>If <db:code role="parameter">options</db:code> does not contain DoNotUseParent, and it contains ParentIsInvalid, then an additional check is performed: the parent index is checked for not being valid. This is useful when implementing flat models such as lists or tables, where no model index should have a valid parent index.</db:para>
<db:para>This function returns true if all the checks succeeded, and false otherwise. This allows to use the function in <db:link xlink:href="qtassert-proxy.xml#Q_ASSERT">Q_ASSERT</db:link> and similar other debugging mechanisms. If some check failed, a warning message will be printed in the qt.core.qabstractitemmodel.checkindex logging category, containing some information that may be useful for debugging the failure.</db:para>
<db:note>
<db:para>This function is a debugging helper for implementing your own item models. When developing complex models, as well as when building complicated model hierarchies (e.g. using proxy models), it is useful to call this function in order to catch bugs relative to illegal model indices (as defined above) accidentally passed to some <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> API.</db:para>
</db:note>
<db:warning>
<db:para>Note that it's undefined behavior to pass illegal indices to item models, so applications must refrain from doing so, and not rely on any &quot;defensive&quot; programming that item models could employ to handle illegal indexes gracefully.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml">QModelIndex</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearItemData">
<db:title>[virtual, since 6.0] bool QAbstractItemModel::clearItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>clearItemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clearItemData(const QModelIndex &amp;index)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the data stored in all the roles for the given <db:code role="parameter">index</db:code>. Returns true if successful; otherwise returns false. The <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal should be emitted if the data was successfully removed. The base class implementation returns false</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#itemData">itemData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setItemData">setItemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnCount">
<db:title>[pure virtual] int QAbstractItemModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount(const QModelIndex &amp;parent) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns for the children of the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>In most subclasses, the number of columns is independent of the <db:code role="parameter">parent</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:note>
<db:para>When implementing a table based model, columnCount() should return 0 when the parent is valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeInserted">
<db:title>void QAbstractItemModel::columnsAboutToBeInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsAboutToBeInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsAboutToBeInserted(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before columns are inserted into the model. The new items will be positioned between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeMoved">
<db:title>void QAbstractItemModel::columnsAboutToBeMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationColumn</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsAboutToBeMoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceStart</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceEnd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationColumn</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsAboutToBeMoved(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationColumn)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before columns are moved within the model. The items that will be moved are those between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item. They will be moved to <db:code role="parameter">destinationParent</db:code> starting at the column <db:code role="parameter">destinationColumn</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsAboutToBeRemoved">
<db:title>void QAbstractItemModel::columnsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsAboutToBeRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsAboutToBeRemoved(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before columns are removed from the model. The items to be removed are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsInserted">
<db:title>void QAbstractItemModel::columnsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsInserted(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after columns have been inserted into the model. The new items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsMoved">
<db:title>void QAbstractItemModel::columnsMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationColumn</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsMoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceStart</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceEnd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationColumn</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsMoved(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationColumn)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after columns have been moved within the model. The items between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item have been moved to <db:code role="parameter">destinationParent</db:code> starting at the column <db:code role="parameter">destinationColumn</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnsRemoved">
<db:title>void QAbstractItemModel::columnsRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>columnsRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void columnsRemoved(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after columns have been removed from the model. The removed items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createIndex">
<db:title>[protected] QModelIndex QAbstractItemModel::createIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const void *<db:emphasis>ptr</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const void *</db:type>
<db:parameter>ptr</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex createIndex(int row, int column, const void *ptr) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a model index for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with the internal pointer <db:code role="parameter">ptr</db:code>.</db:para>
<db:para>When using a <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link>, its indexes have their own internal pointer. It is not advisable to access this internal pointer outside of the model. Use the <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() function instead.</db:para>
<db:para>This function provides a consistent interface that model subclasses must use to create model indexes.</db:para>
</db:section>
<db:section xml:id="createIndex-1">
<db:title>[protected] QModelIndex QAbstractItemModel::createIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, quintptr <db:emphasis>id</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quintptr</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex createIndex(int row, int column, quintptr id) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a model index for the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with the internal identifier, <db:code role="parameter">id</db:code>.</db:para>
<db:para>This function provides a consistent interface that model subclasses must use to create model indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelindex.xml#internalId">QModelIndex::internalId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[pure virtual] QVariant QAbstractItemModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;index, int role) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data stored under the given <db:code role="parameter">role</db:code> for the item referred to by the <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>If you do not have a value to return, return an <db:emphasis role="bold">invalid</db:emphasis> (default-constructed) <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataChanged">
<db:title>void QAbstractItemModel::dataChanged(const QModelIndex &amp;<db:emphasis>topLeft</db:emphasis>, const QModelIndex &amp;<db:emphasis>bottomRight</db:emphasis>, const QList&lt;int&gt; &amp;<db:emphasis>roles</db:emphasis> = QList&lt;int&gt;())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataChanged</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>topLeft</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>bottomRight</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;int&gt; &amp;</db:type>
<db:parameter>roles</db:parameter>
<db:initializer>QList&lt;int&gt;()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataChanged(const QModelIndex &amp;topLeft, const QModelIndex &amp;bottomRight, const QList&lt;int&gt; &amp;roles)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the data in an existing item changes.</db:para>
<db:para>If the items are of the same parent, the affected ones are those between <db:code role="parameter">topLeft</db:code> and <db:code role="parameter">bottomRight</db:code> inclusive. If the items do not have the same parent, the behavior is undefined.</db:para>
<db:para>When reimplementing the <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() function, this signal must be emitted explicitly.</db:para>
<db:para>The optional <db:code role="parameter">roles</db:code> argument can be used to specify which data roles have actually been modified. An empty vector in the roles argument means that all roles should be considered modified. The order of elements in the roles argument does not have any relevance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[virtual] bool QAbstractItemModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>dropMimeData</db:methodname>
<db:methodparam>
<db:type>const QMimeData *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DropAction</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code>.</db:para>
<db:para>Returns true if the data and action were handled by the model; otherwise returns false.</db:para>
<db:para>The specified <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code> and <db:code role="parameter">parent</db:code> indicate the location of an item in the model where the operation ended. It is the responsibility of the model to complete the action at the correct location.</db:para>
<db:para>For instance, a drop action on an item in a <db:link xlink:href="qtreeview.xml">QTreeView</db:link> can result in new items either being inserted as children of the item specified by <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>, and <db:code role="parameter">parent</db:code>, or as siblings of the item.</db:para>
<db:para>When <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> are -1 it means that the dropped data should be considered as dropped directly on <db:code role="parameter">parent</db:code>. Usually this will mean appending the data as child items of <db:code role="parameter">parent</db:code>. If <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> are greater than or equal zero, it means that the drop occurred just before the specified <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> in the specified <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() member is called to get the list of acceptable MIME types. This default implementation assumes the default implementation of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>(), which returns a single default MIME type. If you reimplement <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() in your custom model to return multiple MIME types, you must reimplement this function to make use of them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#canDropMimeData">canDropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endInsertColumns">
<db:title>[protected] void QAbstractItemModel::endInsertColumns()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endInsertColumns</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endInsertColumns()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a column insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endInsertRows">
<db:title>[protected] void QAbstractItemModel::endInsertRows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endInsertRows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endInsertRows()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a row insertion operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> inserting data into the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMoveColumns">
<db:title>[protected] void QAbstractItemModel::endMoveColumns()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endMoveColumns</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMoveColumns()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a column move operation.</db:para>
<db:para>When implementing a subclass, you must call this function <db:emphasis>after</db:emphasis> moving data within the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveColumns">beginMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endMoveRows">
<db:title>[protected] void QAbstractItemModel::endMoveRows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endMoveRows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endMoveRows()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a row move operation.</db:para>
<db:para>When implementing a subclass, you must call this function <db:emphasis>after</db:emphasis> moving data within the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endRemoveColumns">
<db:title>[protected] void QAbstractItemModel::endRemoveColumns()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endRemoveColumns</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endRemoveColumns()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a column removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endRemoveRows">
<db:title>[protected] void QAbstractItemModel::endRemoveRows()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endRemoveRows</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endRemoveRows()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Ends a row removal operation.</db:para>
<db:para>When reimplementing <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() in a subclass, you must call this function <db:emphasis>after</db:emphasis> removing data from the model's underlying data store.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endResetModel">
<db:title>[protected] void QAbstractItemModel::endResetModel()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>endResetModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void endResetModel()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Completes a model reset operation.</db:para>
<db:para>You must call this function after resetting any internal data structure in your model or proxy model.</db:para>
<db:para>This function emits the signal <db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[virtual] void QAbstractItemModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>fetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fetchMore(const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fetches any available data for the items with the parent specified by the <db:code role="parameter">parent</db:code> index.</db:para>
<db:para>Reimplement this if you are populating your model incrementally.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#canFetchMore">canFetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[virtual] Qt::ItemFlags QAbstractItemModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::ItemFlags</db:type>
<db:methodname>flags</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::ItemFlags flags(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the item flags for the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The base class implementation returns a combination of flags that enables the item (ItemIsEnabled) and allows it to be selected (ItemIsSelectable).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[virtual] bool QAbstractItemModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasChildren</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasChildren(const QModelIndex &amp;parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">parent</db:code> has any children; otherwise returns false.</db:para>
<db:para>Use <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() on the parent to find out the number of children.</db:para>
<db:para>Note that it is undefined behavior to report that a particular index hasChildren with this method if the same index has the flag <db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemNeverHasChildren</db:link> set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#parent">parent</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasIndex">
<db:title>bool QAbstractItemModel::hasIndex(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasIndex(int row, int column, const QModelIndex &amp;parent) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the model returns a valid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> for <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> with <db:code role="parameter">parent</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[virtual] QVariant QAbstractItemModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>headerData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant headerData(int section, Qt::Orientation orientation, int role) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data for the given <db:code role="parameter">role</db:code> and <db:code role="parameter">section</db:code> in the header with the specified <db:code role="parameter">orientation</db:code>.</db:para>
<db:para>For horizontal headers, the section number corresponds to the column number. Similarly, for vertical headers, the section number corresponds to the row number.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="headerDataChanged">
<db:title>void QAbstractItemModel::headerDataChanged(Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>headerDataChanged</db:methodname>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void headerDataChanged(Qt::Orientation orientation, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a header is changed. The <db:code role="parameter">orientation</db:code> indicates whether the horizontal or vertical header has changed. The sections in the header from the <db:code role="parameter">first</db:code> to the <db:code role="parameter">last</db:code> need to be updated.</db:para>
<db:para>When reimplementing the <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>() function, this signal must be emitted explicitly.</db:para>
<db:para>If you are changing the number of columns or rows you do not need to emit this signal, but use the begin/end functions (refer to the section on subclassing in the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class description for details).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[pure virtual] QModelIndex QAbstractItemModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>index</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex index(int row, int column, const QModelIndex &amp;parent) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the item in the model specified by the given <db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code> and <db:code role="parameter">parent</db:code> index.</db:para>
<db:para>When reimplementing this function in a subclass, call <db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>() to generate model indexes that other components can use to refer to items in your model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumn">
<db:title>bool QAbstractItemModel::insertColumn(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumn(int column, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a single column before the given <db:code role="parameter">column</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the column is inserted; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRow">insertRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[virtual] bool QAbstractItemModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumns(int column, int count, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, inserts <db:code role="parameter">count</db:code> new columns into the model before the given <db:code role="parameter">column</db:code>. The items in each new column will be children of the item represented by the <db:code role="parameter">parent</db:code> model index.</db:para>
<db:para>If <db:code role="parameter">column</db:code> is 0, the columns are prepended to any existing columns.</db:para>
<db:para>If <db:code role="parameter">column</db:code> is <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), the columns are appended to any existing columns.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> has no children, a single row with <db:code role="parameter">count</db:code> columns is inserted.</db:para>
<db:para>Returns true if the columns were successfully inserted; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertColumns">beginInsertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertColumns">endInsertColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRow">
<db:title>bool QAbstractItemModel::insertRow(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>insertRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRow(int row, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a single row before the given <db:code role="parameter">row</db:code> in the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:note>
<db:para>This function calls the virtual method <db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>.</db:para>
</db:note>
<db:para>Returns true if the row is inserted; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertRows">
<db:title>[virtual] bool QAbstractItemModel::insertRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertRows(int row, int count, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:note>
<db:para>The base class implementation of this function does nothing and returns false.</db:para>
</db:note>
<db:para>On models that support this, inserts <db:code role="parameter">count</db:code> rows into the model before the given <db:code role="parameter">row</db:code>. Items in the new row will be children of the item represented by the <db:code role="parameter">parent</db:code> model index.</db:para>
<db:para>If <db:code role="parameter">row</db:code> is 0, the rows are prepended to any existing rows in the parent.</db:para>
<db:para>If <db:code role="parameter">row</db:code> is <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), the rows are appended to any existing rows in the parent.</db:para>
<db:para>If <db:code role="parameter">parent</db:code> has no children, a single column with <db:code role="parameter">count</db:code> rows is inserted.</db:para>
<db:para>Returns true if the rows were successfully inserted; otherwise returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support insertions. Alternatively, you can provide your own API for altering the data. In either case, you will need to call <db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>() to notify other components that the model has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endInsertRows">endInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemData">
<db:title>[virtual] QMap&lt;int, QVariant&gt; QAbstractItemModel::itemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;int, QVariant&gt;</db:type>
<db:methodname>itemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;int, QVariant&gt; itemData(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map with values for all predefined roles in the model for the item at the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>Reimplement this function if you want to extend the default behavior of this function to include custom roles in the map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#setItemData">setItemData</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutAboutToBeChanged">
<db:title>void QAbstractItemModel::layoutAboutToBeChanged(const QList&lt;QPersistentModelIndex&gt; &amp;<db:emphasis>parents</db:emphasis> = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint <db:emphasis>hint</db:emphasis> = QAbstractItemModel::NoLayoutChangeHint)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>layoutAboutToBeChanged</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPersistentModelIndex&gt; &amp;</db:type>
<db:parameter>parents</db:parameter>
<db:initializer>QList&lt;QPersistentModelIndex&gt;()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemModel::LayoutChangeHint</db:type>
<db:parameter>hint</db:parameter>
<db:initializer>QAbstractItemModel::NoLayoutChangeHint</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void layoutAboutToBeChanged(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before the layout of a model is changed. Components connected to this signal use it to adapt to changes in the model's layout.</db:para>
<db:para>Subclasses should update any persistent model indexes after emitting layoutAboutToBeChanged().</db:para>
<db:para>The optional <db:code role="parameter">parents</db:code> parameter is used to give a more specific notification about what parts of the layout of the model are changing. An empty list indicates a change to the layout of the entire model. The order of elements in the <db:code role="parameter">parents</db:code> list is not significant. The optional <db:code role="parameter">hint</db:code> parameter is used to give a hint about what is happening while the model is relayouting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#layoutChanged">layoutChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutChanged">
<db:title>void QAbstractItemModel::layoutChanged(const QList&lt;QPersistentModelIndex&gt; &amp;<db:emphasis>parents</db:emphasis> = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint <db:emphasis>hint</db:emphasis> = QAbstractItemModel::NoLayoutChangeHint)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>layoutChanged</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QPersistentModelIndex&gt; &amp;</db:type>
<db:parameter>parents</db:parameter>
<db:initializer>QList&lt;QPersistentModelIndex&gt;()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QAbstractItemModel::LayoutChangeHint</db:type>
<db:parameter>hint</db:parameter>
<db:initializer>QAbstractItemModel::NoLayoutChangeHint</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void layoutChanged(const QList&lt;QPersistentModelIndex&gt; &amp;parents, QAbstractItemModel::LayoutChangeHint hint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the layout of items exposed by the model has changed; for example, when the model has been sorted. When this signal is received by a view, it should update the layout of items to reflect this change.</db:para>
<db:para>When subclassing <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> or <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link>, ensure that you emit <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link>() before changing the order of items or altering the structure of the data you expose to views, and emit layoutChanged() after changing the layout.</db:para>
<db:para>The optional <db:code role="parameter">parents</db:code> parameter is used to give a more specific notification about what parts of the layout of the model are changing. An empty list indicates a change to the layout of the entire model. The order of elements in the <db:code role="parameter">parents</db:code> list is not significant. The optional <db:code role="parameter">hint</db:code> parameter is used to give a hint about what is happening while the model is relayouting.</db:para>
<db:para>Subclasses should update any persistent model indexes before emitting layoutChanged(). In other words, when the structure changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>emit <db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Remember the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> that will change</db:para>
</db:listitem>
<db:listitem>
<db:para>Update your internal data</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>emit layoutChanged</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#layoutAboutToBeChanged">layoutAboutToBeChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#changePersistentIndex">changePersistentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="match">
<db:title>[virtual] QModelIndexList QAbstractItemModel::match(const QModelIndex &amp;<db:emphasis>start</db:emphasis>, int <db:emphasis>role</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>hits</db:emphasis> = 1, Qt::MatchFlags <db:emphasis>flags</db:emphasis> = Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndexList</db:type>
<db:methodname>match</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hits</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::MatchFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndexList match(const QModelIndex &amp;start, int role, const QVariant &amp;value, int hits, Qt::MatchFlags flags) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of indexes for the items in the column of the <db:code role="parameter">start</db:code> index where data stored under the given <db:code role="parameter">role</db:code> matches the specified <db:code role="parameter">value</db:code>. The way the search is performed is defined by the <db:code role="parameter">flags</db:code> given. The list that is returned may be empty. Note also that the order of results in the list may not correspond to the order in the model, if for example a proxy model is used. The order of the results cannot be relied upon.</db:para>
<db:para>The search begins from the <db:code role="parameter">start</db:code> index, and continues until the number of matching data items equals <db:code role="parameter">hits</db:code>, the search reaches the last row, or the search reaches <db:code role="parameter">start</db:code> again - depending on whether MatchWrap is specified in <db:code role="parameter">flags</db:code>. If you want to search for all matching items, use <db:code role="parameter">hits</db:code> = -1.</db:para>
<db:para>By default, this function will perform a wrapping, string-based comparison on all items, searching for items that begin with the search term specified by <db:code role="parameter">value</db:code>.</db:para>
<db:note>
<db:para>The default implementation of this function only searches columns. Reimplement this function to include a different search behavior.</db:para>
</db:note>
</db:section>
<db:section xml:id="mimeData">
<db:title>[virtual] QMimeData *QAbstractItemModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMimeData *</db:type>
<db:methodname>mimeData</db:methodname>
<db:methodparam>
<db:type>const QModelIndexList &amp;</db:type>
<db:parameter>indexes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeData * mimeData(const QModelIndexList &amp;indexes) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an object that contains serialized items of data corresponding to the list of <db:code role="parameter">indexes</db:code> specified. The format used to describe the encoded data is obtained from the <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() function. This default implementation uses the default MIME type returned by the default implementation of <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>(). If you reimplement <db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>() in your custom model to return more MIME types, reimplement this function to make use of them.</db:para>
<db:para>If the list of <db:code role="parameter">indexes</db:code> is empty, or there are no supported MIME types, nullptr is returned rather than a serialized empty list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#mimeTypes">mimeTypes</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[virtual] QStringList QAbstractItemModel::mimeTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>mimeTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList mimeTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of allowed MIME types. By default, the built-in models and views use an internal MIME type: application/x-qabstractitemmodeldatalist.</db:para>
<db:para>When implementing drag and drop support in a custom model, if you will return data in formats other than the default internal MIME type, reimplement this function to return your list of MIME types.</db:para>
<db:para>If you reimplement this function in your custom model, you must also reimplement the member functions that call it: <db:link xlink:href="qabstractitemmodel.xml#mimeData">mimeData</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#mimeData">mimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelAboutToBeReset">
<db:title>void QAbstractItemModel::modelAboutToBeReset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>modelAboutToBeReset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void modelAboutToBeReset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>() is called, before the model's internal state (e.g. persistent model indexes) has been invalidated.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginResetModel">beginResetModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelReset">
<db:title>void QAbstractItemModel::modelReset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>modelReset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void modelReset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>() is called, after the model's internal state (e.g. persistent model indexes) has been invalidated.</db:para>
<db:para>Note that if a model is reset it should be considered that all information previously retrieved from it is invalid. This includes but is not limited to the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>() and <db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#flags">flags</db:link>(), data retrieved through <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>().</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#endResetModel">endResetModel</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveColumn">
<db:title>bool QAbstractItemModel::moveColumn(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceColumn</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>moveColumn</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceColumn</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveColumn(const QModelIndex &amp;sourceParent, int sourceColumn, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, moves <db:code role="parameter">sourceColumn</db:code> from <db:code role="parameter">sourceParent</db:code> to <db:code role="parameter">destinationChild</db:code> under <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the columns were successfully moved; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveColumns">moveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveRow">moveRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveColumns">
<db:title>[virtual] bool QAbstractItemModel::moveColumns(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceColumn</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>moveColumns</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceColumn</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveColumns(const QModelIndex &amp;sourceParent, int sourceColumn, int count, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, moves <db:code role="parameter">count</db:code> columns starting with the given <db:code role="parameter">sourceColumn</db:code> under parent <db:code role="parameter">sourceParent</db:code> to column <db:code role="parameter">destinationChild</db:code> under parent <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the columns were successfully moved; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support moving. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveColumns">beginMoveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveColumns">endMoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRow">
<db:title>bool QAbstractItemModel::moveRow(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>moveRow</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceRow</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveRow(const QModelIndex &amp;sourceParent, int sourceRow, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, moves <db:code role="parameter">sourceRow</db:code> from <db:code role="parameter">sourceParent</db:code> to <db:code role="parameter">destinationChild</db:code> under <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the rows were successfully moved; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveRows">moveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#moveColumn">moveColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveRows">
<db:title>[virtual] bool QAbstractItemModel::moveRows(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceRow</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationChild</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>moveRows</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceRow</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationChild</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool moveRows(const QModelIndex &amp;sourceParent, int sourceRow, int count, const QModelIndex &amp;destinationParent, int destinationChild)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, moves <db:code role="parameter">count</db:code> rows starting with the given <db:code role="parameter">sourceRow</db:code> under parent <db:code role="parameter">sourceParent</db:code> to row <db:code role="parameter">destinationChild</db:code> under parent <db:code role="parameter">destinationParent</db:code>.</db:para>
<db:para>Returns true if the rows were successfully moved; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support moving. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endMoveRows">endMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="multiData">
<db:title>[virtual, since 6.0] void QAbstractItemModel::multiData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QModelRoleDataSpan <db:emphasis>roleDataSpan</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>multiData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QModelRoleDataSpan</db:type>
<db:parameter>roleDataSpan</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void multiData(const QModelIndex &amp;index, QModelRoleDataSpan roleDataSpan) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills the <db:code role="parameter">roleDataSpan</db:code> with the requested data for the given <db:code role="parameter">index</db:code>.</db:para>
<db:para>The default implementation will call simply <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() for each role in the span. A subclass can reimplement this function to provide data to views more efficiently:</db:para>
<db:programlisting language="cpp">void MyModel::multiData(const QModelIndex &amp;amp;index, QModelRoleDataSpan roleDataSpan) const
{
    for (QModelRoleData &amp;amp;roleData : roleDataSpan) {
        int role = roleData.role();

        // ... obtain the data for index and role ...

        roleData.setData(result);
    }
}
</db:programlisting>
<db:para>In the snippet above, index is the same for the entire call. This means that accessing to the necessary data structures in order to retrieve the information for index can be done only once (hoisting the relevant code out of the loop).</db:para>
<db:para>The usage of <db:link xlink:href="qmodelroledata.xml#setData">QModelRoleData::setData</db:link>(), or similarly <db:link xlink:href="qvariant.xml#setValue">QVariant::setValue</db:link>(), is encouraged over constructing a <db:link xlink:href="qvariant.xml">QVariant</db:link> separately and using a plain assignment operator; this is because the former allow to re-use the memory already allocated for the <db:link xlink:href="qvariant.xml">QVariant</db:link> object stored inside a <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link>, while the latter always allocates the new variant and then destroys the old one.</db:para>
<db:para>Note that views may call multiData() with spans that have been used in previous calls, and therefore may already contain some data. Therefore, it is imperative that if the model cannot return the data for a given role, then it must clear the data in the corresponding <db:link xlink:href="qmodelroledata.xml">QModelRoleData</db:link> object. This can be done by calling <db:link xlink:href="qmodelroledata.xml#clearData">QModelRoleData::clearData</db:link>(), or similarly by setting a default constructed <db:link xlink:href="qvariant.xml">QVariant</db:link>, and so on. Failure to clear the data will result in the view believing that the &quot;old&quot; data is meant to be used for the corresponding role.</db:para>
<db:para>Finally, in order to avoid code duplication, a subclass may also decide to reimplement <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() in terms of multiData(), by supplying a span of just one element:</db:para>
<db:programlisting language="cpp">QVariant MyModel::data(const QModelIndex &amp;amp;index, int role) const
{
    QModelRoleData roleData(role);
    multiData(index, roleData);
    return roleData.data();
}
</db:programlisting>
<db:note>
<db:para>Models are not allowed to modify the roles in the span, or to rearrange the span elements. Doing so results in undefined behavior.</db:para>
</db:note>
<db:note>
<db:para>It is illegal to pass an invalid model index to this function.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodelroledataspan.xml">QModelRoleDataSpan</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>[pure virtual] QModelIndex QAbstractItemModel::parent(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>parent</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex parent(const QModelIndex &amp;index) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the parent of the model item with the given <db:code role="parameter">index</db:code>. If the item has no parent, an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> is returned.</db:para>
<db:para>A common convention used in models that expose tree data structures is that only items in the first column have children. For that case, when reimplementing this function in a subclass the column of the returned <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> would be 0.</db:para>
<db:para>When reimplementing this function in a subclass, be careful to avoid calling <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> member functions, such as <db:link xlink:href="qmodelindex.xml#parent">QModelIndex::parent</db:link>(), since indexes belonging to your model will simply call your implementation, leading to infinite recursion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#createIndex">createIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="persistentIndexList">
<db:title>[protected] QModelIndexList QAbstractItemModel::persistentIndexList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModelIndexList</db:type>
<db:methodname>persistentIndexList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndexList persistentIndexList() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of indexes stored as persistent indexes in the model.</db:para>
</db:section>
<db:section xml:id="removeColumn">
<db:title>bool QAbstractItemModel::removeColumn(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeColumn</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumn(int column, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">column</db:code> from the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the column is removed; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumn">insertColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[virtual] bool QAbstractItemModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumns(int column, int count, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, removes <db:code role="parameter">count</db:code> columns starting with the given <db:code role="parameter">column</db:code> under parent <db:code role="parameter">parent</db:code> from the model.</db:para>
<db:para>Returns true if the columns were successfully removed; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveColumns">beginRemoveColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveColumns">endRemoveColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRow">
<db:title>bool QAbstractItemModel::removeRow(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeRow</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeRow(int row, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the given <db:code role="parameter">row</db:code> from the child items of the <db:code role="parameter">parent</db:code> specified.</db:para>
<db:para>Returns true if the row is removed; otherwise returns false.</db:para>
<db:para>This is a convenience function that calls <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>(). The <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation of <db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>() does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumn">removeColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRow">insertRow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeRows">
<db:title>[virtual] bool QAbstractItemModel::removeRows(int <db:emphasis>row</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeRows</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeRows(int row, int count, const QModelIndex &amp;parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>On models that support this, removes <db:code role="parameter">count</db:code> rows starting with the given <db:code role="parameter">row</db:code> under parent <db:code role="parameter">parent</db:code> from the model.</db:para>
<db:para>Returns true if the rows were successfully removed; otherwise returns false.</db:para>
<db:para>The base class implementation does nothing and returns false.</db:para>
<db:para>If you implement your own model, you can reimplement this function if you want to support removing. Alternatively, you can provide your own API for altering the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRow">removeRow</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeColumns">removeColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#endRemoveRows">endRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetInternalData">
<db:title>[virtual protected] void QAbstractItemModel::resetInternalData()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resetInternalData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetInternalData()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called just after the internal data of a model is cleared while it is being reset.</db:para>
<db:para>This slot is provided the convenience of subclasses of concrete proxy models, such as subclasses of <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> which maintain extra data.</db:para>
<db:programlisting language="cpp">class CustomDataProxy : public QSortFilterProxyModel
{
    Q_OBJECT
public:
    CustomDataProxy(QObject *parent)
      : QSortFilterProxyModel(parent)
    {
    }

    ...

    QVariant data(const QModelIndex &amp;amp;index, int role) override
    {
        if (role != Qt::BackgroundRole)
            return QSortFilterProxyModel::data(index, role);

        if (m_customData.contains(index.row()))
            return m_customData.value(index.row());
        return QSortFilterProxyModel::data(index, role);
    }

private slots:
    void resetInternalData()
    {
        m_customData.clear();
    }

private:
  QHash&amp;lt;int, QVariant&amp;gt; m_customData;
};
</db:programlisting>
<db:note>
<db:para>Due to a mistake, this slot is missing in Qt 5.0.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelAboutToBeReset">modelAboutToBeReset</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#modelReset">modelReset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revert">
<db:title>[virtual] void QAbstractItemModel::revert()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>revert</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void revert()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lets the model know that it should discard cached information. This function is typically used for row editing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#submit">submit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="roleNames">
<db:title>[virtual] QHash&lt;int, QByteArray&gt; QAbstractItemModel::roleNames() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;int, QByteArray&gt;</db:type>
<db:methodname>roleNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;int, QByteArray&gt; roleNames() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the model's role names.</db:para>
<db:para>The default role names set by Qt are:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Role</db:para>
</db:th>
<db:th>
<db:para>QML Role Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link></db:para>
</db:td>
<db:td>
<db:para>display</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DecorationRole</db:link></db:para>
</db:td>
<db:td>
<db:para>decoration</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::EditRole</db:link></db:para>
</db:td>
<db:td>
<db:para>edit</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ToolTipRole</db:link></db:para>
</db:td>
<db:td>
<db:para>toolTip</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::StatusTipRole</db:link></db:para>
</db:td>
<db:td>
<db:para>statusTip</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::WhatsThisRole</db:link></db:para>
</db:td>
<db:td>
<db:para>whatsThis</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="rowCount">
<db:title>[pure virtual] int QAbstractItemModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount(const QModelIndex &amp;parent) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rows under the given <db:code role="parameter">parent</db:code>. When the parent is valid it means that rowCount is returning the number of children of parent.</db:para>
<db:note>
<db:para>When implementing a table based model, rowCount() should return 0 when the parent is valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#columnCount">columnCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeInserted">
<db:title>void QAbstractItemModel::rowsAboutToBeInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>start</db:emphasis>, int <db:emphasis>end</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsAboutToBeInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>end</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsAboutToBeInserted(const QModelIndex &amp;parent, int start, int end)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before rows are inserted into the model. The new items will be positioned between <db:code role="parameter">start</db:code> and <db:code role="parameter">end</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeMoved">
<db:title>void QAbstractItemModel::rowsAboutToBeMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationRow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsAboutToBeMoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceStart</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceEnd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationRow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsAboutToBeMoved(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationRow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before rows are moved within the model. The items that will be moved are those between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item. They will be moved to <db:code role="parameter">destinationParent</db:code> starting at the row <db:code role="parameter">destinationRow</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsAboutToBeRemoved">
<db:title>void QAbstractItemModel::rowsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsAboutToBeRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsAboutToBeRemoved(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted just before rows are removed from the model. The items that will be removed are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsInserted">
<db:title>void QAbstractItemModel::rowsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsInserted(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after rows have been inserted into the model. The new items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#insertRows">insertRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginInsertRows">beginInsertRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsMoved">
<db:title>void QAbstractItemModel::rowsMoved(const QModelIndex &amp;<db:emphasis>sourceParent</db:emphasis>, int <db:emphasis>sourceStart</db:emphasis>, int <db:emphasis>sourceEnd</db:emphasis>, const QModelIndex &amp;<db:emphasis>destinationParent</db:emphasis>, int <db:emphasis>destinationRow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsMoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>sourceParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceStart</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sourceEnd</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>destinationParent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>destinationRow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsMoved(const QModelIndex &amp;sourceParent, int sourceStart, int sourceEnd, const QModelIndex &amp;destinationParent, int destinationRow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after rows have been moved within the model. The items between <db:code role="parameter">sourceStart</db:code> and <db:code role="parameter">sourceEnd</db:code> inclusive, under the given <db:code role="parameter">sourceParent</db:code> item have been moved to <db:code role="parameter">destinationParent</db:code> starting at the row <db:code role="parameter">destinationRow</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">beginMoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowsRemoved">
<db:title>void QAbstractItemModel::rowsRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>first</db:emphasis>, int <db:emphasis>last</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rowsRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>last</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rowsRemoved(const QModelIndex &amp;parent, int first, int last)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after rows have been removed from the model. The removed items are those between <db:code role="parameter">first</db:code> and <db:code role="parameter">last</db:code> inclusive, under the given <db:code role="parameter">parent</db:code> item.</db:para>
<db:note>
<db:para>Components connected to this signal use it to adapt to changes in the model's dimensions. It can only be emitted by the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> implementation, and cannot be explicitly emitted in subclass code.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#removeRows">removeRows</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#beginRemoveRows">beginRemoveRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] bool QAbstractItemModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">role</db:code> data for the item at <db:code role="parameter">index</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:para>The <db:link xlink:href="qabstractitemmodel.xml#dataChanged">dataChanged</db:link>() signal should be emitted if the data was successfully set.</db:para>
<db:para>The base class implementation returns false. This function and <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>() must be reimplemented for editable models.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[virtual] bool QAbstractItemModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setHeaderData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data for the given <db:code role="parameter">role</db:code> and <db:code role="parameter">section</db:code> in the header with the specified <db:code role="parameter">orientation</db:code> to the <db:code role="parameter">value</db:code> supplied.</db:para>
<db:para>Returns true if the header's data was updated; otherwise returns false.</db:para>
<db:para>When reimplementing this function, the <db:link xlink:href="qabstractitemmodel.xml#headerDataChanged">headerDataChanged</db:link>() signal must be emitted explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#headerData">headerData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemData">
<db:title>[virtual] bool QAbstractItemModel::setItemData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QMap&lt;int, QVariant&gt; &amp;<db:emphasis>roles</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setItemData</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMap&lt;int, QVariant&gt; &amp;</db:type>
<db:parameter>roles</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setItemData(const QModelIndex &amp;index, const QMap&lt;int, QVariant&gt; &amp;roles)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the role data for the item at <db:code role="parameter">index</db:code> to the associated value in <db:code role="parameter">roles</db:code>, for every <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link>.</db:para>
<db:para>Returns true if successful; otherwise returns false.</db:para>
<db:para>Roles that are not in <db:code role="parameter">roles</db:code> will not be modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml#itemData">itemData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sibling">
<db:title>[virtual] QModelIndex QAbstractItemModel::sibling(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>sibling</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex sibling(int row, int column, const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sibling at <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> for the item at <db:code role="parameter">index</db:code>, or an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> if there is no sibling at that location.</db:para>
<db:para>sibling() is just a convenience function that finds the item's parent, and uses it to retrieve the index of the child item in the specified <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
<db:para>This method can optionally be overridden for implementation-specific optimization.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#index">index</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#row">QModelIndex::row</db:link>()</db:member>
<db:member><db:link xlink:href="qmodelindex.xml#column">QModelIndex::column</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sort">
<db:title>[virtual] void QAbstractItemModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>sort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
<db:initializer>Qt::AscendingOrder</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sort(int column, Qt::SortOrder order)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sorts the model by <db:code role="parameter">column</db:code> in the given <db:code role="parameter">order</db:code>.</db:para>
<db:para>The base class implementation does nothing.</db:para>
</db:section>
<db:section xml:id="span">
<db:title>[virtual] QSize QAbstractItemModel::span(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>span</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize span(const QModelIndex &amp;index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the row and column span of the item represented by <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>Currently, span is not used.</db:para>
</db:note>
</db:section>
<db:section xml:id="submit">
<db:title>[virtual] bool QAbstractItemModel::submit()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>submit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool submit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lets the model know that it should submit cached information to permanent storage. This function is typically used for row editing.</db:para>
<db:para>Returns true if there is no error; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#revert">revert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDragActions">
<db:title>[virtual] Qt::DropActions QAbstractItemModel::supportedDragActions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::DropActions</db:type>
<db:methodname>supportedDragActions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropActions supportedDragActions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the actions supported by the data in this model.</db:para>
<db:para>The default implementation returns <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions">supportedDropActions</db:link>(). Reimplement this function if you wish to support additional actions.</db:para>
<db:para>supportedDragActions() is used by <db:link xlink:href="qabstractitemview.xml#startDrag">QAbstractItemView::startDrag</db:link>() as the default values when a drag occurs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[virtual] Qt::DropActions QAbstractItemModel::supportedDropActions() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::DropActions</db:type>
<db:methodname>supportedDropActions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::DropActions supportedDropActions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the drop actions supported by this model.</db:para>
<db:para>The default implementation returns <db:link xlink:href="qt.xml#DropAction-enum">Qt::CopyAction</db:link>. Reimplement this function if you wish to support additional actions. You must also reimplement the <db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>() function to handle the additional operations.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml#dropMimeData">dropMimeData</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#using-drag-and-drop-with-item-views">Using drag and drop with item views</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
