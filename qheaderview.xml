<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHeaderView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> class provides a header row or header column for item views.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHeaderView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHeaderView is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> displays the headers used in item views such as the <db:link xlink:href="qtableview.xml">QTableView</db:link> and <db:link xlink:href="qtreeview.xml">QTreeView</db:link> classes. It takes the place of Qt3's <db:code>QHeader</db:code> class previously used for the same purpose, but uses the Qt's model/view architecture for consistency with the item view classes.</db:para>
<db:para>The <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para>The header gets the data for each section from the model using the <db:link xlink:href="qabstractitemmodel.xml#headerData">QAbstractItemModel::headerData</db:link>() function. You can set the data by using <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">QAbstractItemModel::setHeaderData</db:link>().</db:para>
<db:para>Each header has an <db:link xlink:href="qheaderview.xml#orientation">orientation</db:link>() and a number of sections, given by the <db:link xlink:href="qheaderview.xml#count">count</db:link>() function. A section refers to a part of the header - either a row or a column, depending on the orientation.</db:para>
<db:para>Sections can be moved and resized using <db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>() and <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(); they can also be hidden and shown with <db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>() and <db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>().</db:para>
<db:para>Each section of a header is described by a section ID, specified by its section(), and can be located at a particular <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>() in the header. A section can have a sort indicator set with <db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>(); this indicates whether the items in the associated item view will be sorted in the order given by the section.</db:para>
<db:para>For a horizontal header the section is equivalent to a column in the model, and for a vertical header the section is equivalent to a row in the model.</db:para>
<db:section xml:id="moving-header-sections">
<db:title>Moving Header Sections</db:title>
<db:para>A header can be fixed in place, or made movable with <db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>(). It can be made clickable with <db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>(), and has resizing behavior in accordance with <db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>().</db:para>
<db:note>
<db:para>Double-clicking on a header to resize a section only applies for visible rows.</db:para>
</db:note>
<db:para>A header will emit <db:link xlink:href="qheaderview.xml#sectionMoved">sectionMoved</db:link>() if the user moves a section, <db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>() if the user resizes a section, and <db:link xlink:href="qheaderview.xml#sectionClicked">sectionClicked</db:link>() as well as <db:link xlink:href="qheaderview.xml#sectionHandleDoubleClicked">sectionHandleDoubleClicked</db:link>() in response to mouse clicks. A header will also emit <db:link xlink:href="qheaderview.xml#sectionCountChanged">sectionCountChanged</db:link>().</db:para>
<db:para>You can identify a section using the <db:link xlink:href="qheaderview.xml#logicalIndex">logicalIndex</db:link>() and <db:link xlink:href="qheaderview.xml#logicalIndexAt">logicalIndexAt</db:link>() functions, or by its index position, using the <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>() and <db:link xlink:href="qheaderview.xml#visualIndexAt">visualIndexAt</db:link>() functions. The visual index will change if a section is moved, but the logical index will not change.</db:para>
</db:section>
<db:section xml:id="appearance">
<db:title>Appearance</db:title>
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> and <db:link xlink:href="qtableview.xml">QTableView</db:link> create default headers. If you want the headers to be visible, you can use <db:link xlink:href="qwidget.xml#visible-prop">setVisible</db:link>().</db:para>
<db:para>Not all <db:link xlink:href="qt.xml#ItemDataRole-enum">ItemDataRole</db:link>s will have an effect on a <db:link xlink:href="qheaderview.xml">QHeaderView</db:link>. If you need to draw other roles, you can subclass <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> and reimplement <db:link xlink:href="qheaderview.xml#paintEvent">paintEvent</db:link>(). <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> respects the following item data roles, unless they are in conflict with the style (which can happen for styles that follow the desktop theme):</db:para>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">TextAlignmentRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">DisplayRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">FontRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">DecorationRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">ForegroundRole</db:link>, and <db:link xlink:href="qt.xml#ItemDataRole-enum">BackgroundRole</db:link>.</db:para>
<db:note>
<db:para>Each header renders the data for each section itself, and does not rely on a delegate. As a result, calling a header's <db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>() function will have no effect.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml">QListView</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml">QTableView</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QHeaderView::ResizeMode</db:title>
<db:enumsynopsis>
<db:enumname>ResizeMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Interactive</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Stretch</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fixed</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResizeToContents</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Custom</db:enumidentifier>
<db:enumvalue>Fixed</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The resize mode specifies the behavior of the header sections. It can be set on the entire header view or on individual sections using <db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Interactive</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The user can resize the section. The section can also be resized programmatically using <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(). The section size defaults to <db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link>. (See also <db:link xlink:href="qheaderview.xml#cascadingSectionResizes-prop">cascadingSectionResizes</db:link>.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Fixed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user cannot resize the section. The section can only be resized programmatically using <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(). The section size defaults to <db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Stretch</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will automatically resize the section to fill the available space. The size cannot be changed by the user or programmatically.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::ResizeToContents</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will automatically resize the section to its optimal size based on the contents of the entire column or row. The size cannot be changed by the user or programmatically. (This value was introduced in 4.2)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following values are obsolete:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>Fixed</db:code></db:td>
<db:td>
<db:para>Use Fixed instead.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#stretchLastSection-prop">stretchLastSection</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#minimumSectionSize-prop">minimumSectionSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cascadingSectionResizes-prop">
<db:title>cascadingSectionResizes : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>cascadingSectionResizes</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cascadingSectionResizes</db:synopsisinfo>
<db:synopsisinfo role="setter">setCascadingSectionResizes</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether interactive resizing will be cascaded to the following sections once the section being resized by the user has reached its minimum size</db:para>
<db:para>This property only affects sections that have <db:link xlink:href="qheaderview.xml#ResizeMode-enum">Interactive</db:link> as their resize mode.</db:para>
<db:para>The default value is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">cascadingSectionResizes</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCascadingSectionResizes</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="defaultAlignment-prop">
<db:title>defaultAlignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>defaultAlignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultAlignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default alignment of the text in each header section</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">defaultAlignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="defaultSectionSize-prop">
<db:title>defaultSectionSize : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>defaultSectionSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">defaultSectionSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setDefaultSectionSize</db:synopsisinfo>
<db:synopsisinfo role="resetter">resetDefaultSectionSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the default size of the header sections before resizing.</db:para>
<db:para>This property only affects sections that have <db:link xlink:href="qheaderview.xml#ResizeMode-enum">Interactive</db:link> or <db:link xlink:href="qheaderview.xml#ResizeMode-enum">Fixed</db:link> as their resize mode.</db:para>
<db:para>By default, the value of this property is style dependent. Thus, when the style changes, this property updates from it. Calling setDefaultSectionSize() stops the updates, calling resetDefaultSectionSize() will restore default behavior.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">defaultSectionSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultSectionSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resetDefaultSectionSize</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#minimumSectionSize-prop">minimumSectionSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="firstSectionMovable-prop">
<db:title>firstSectionMovable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>firstSectionMovable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFirstSectionMovable</db:synopsisinfo>
<db:synopsisinfo role="setter">setFirstSectionMovable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the first column can be moved by the user</db:para>
<db:para>This property controls whether the first column can be moved by the user. In a <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, the first column holds the tree structure and is therefore non-movable by default, even after <db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>(true).</db:para>
<db:para>It can be made movable again, for instance in the case of flat lists without a tree structure, by calling this method. In such a scenario, it is recommended to call <db:link xlink:href="qtreeview.xml#rootIsDecorated-prop">QTreeView::setRootIsDecorated</db:link>(false) as well.</db:para>
<db:programlisting language="cpp">treeView-&amp;gt;setRootIsDecorated(false);
treeView-&amp;gt;header()-&amp;gt;setFirstSectionMovable(true);
</db:programlisting>
<db:para>Setting it to true has no effect unless <db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>(true) is called as well.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFirstSectionMovable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFirstSectionMovable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>movable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highlightSections-prop">
<db:title>highlightSections : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>highlightSections</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">highlightSections</db:synopsisinfo>
<db:synopsisinfo role="setter">setHighlightSections</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the sections containing selected items are highlighted</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">highlightSections</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setHighlightSections</db:emphasis>(<db:type>bool</db:type> <db:emphasis>highlight</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maximumSectionSize-prop">
<db:title>maximumSectionSize : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maximumSectionSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maximumSectionSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaximumSectionSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum size of the header sections.</db:para>
<db:para>The maximum section size is the largest section size allowed. The default value for this property is 1048575, which is also the largest possible size for a section. Setting maximum to -1 will reset the value to the largest section size.</db:para>
<db:para>With exception of stretch this property is honored by all <db:link xlink:href="qheaderview.xml#ResizeMode-enum">resize modes</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximumSectionSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximumSectionSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSectionSize-prop">
<db:title>minimumSectionSize : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>minimumSectionSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">minimumSectionSize</db:synopsisinfo>
<db:synopsisinfo role="setter">setMinimumSectionSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum size of the header sections.</db:para>
<db:para>The minimum section size is the smallest section size allowed. If the minimum section size is set to -1, <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will use the <db:link xlink:href="qwidget.xml#fontMetrics">font metrics</db:link> size.</db:para>
<db:para>This property is honored by all <db:link xlink:href="qheaderview.xml#ResizeMode-enum">resize modes</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimumSectionSize</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimumSectionSize</db:emphasis>(<db:type>int</db:type> <db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showSortIndicator-prop">
<db:title>showSortIndicator : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>showSortIndicator</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSortIndicatorShown</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortIndicatorShown</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the sort indicator is shown</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSortIndicatorShown</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortIndicatorShown</db:emphasis>(<db:type>bool</db:type> <db:emphasis>show</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorClearable-prop">
<db:title>[since 6.1] sortIndicatorClearable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>sortIndicatorClearable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSortIndicatorClearable</db:synopsisinfo>
<db:synopsisinfo role="setter">setSortIndicatorClearable</db:synopsisinfo>
<db:synopsisinfo role="notifier">sortIndicatorClearableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the sort indicator can be cleared by clicking on a section multiple times</db:para>
<db:para>This property controls whether the user is able to remove the sorting indicator on a given section by clicking on the section multiple times. Normally, clicking on a section will simply change the sorting order for that section. By setting this property to true, the sorting indicator will be cleared after alternating to ascending and descending; this will typically restore the original sorting of a model.</db:para>
<db:para>Setting this property to true has no effect unless <db:link xlink:href="qheaderview.xml#sectionsClickable">sectionsClickable</db:link>() is also true (which is the default for certain views, for instance <db:link xlink:href="qtableview.xml">QTableView</db:link>, or is automatically set when making a view sortable, for instance by calling <db:link xlink:href="qtreeview.xml#sortingEnabled-prop">QTreeView::setSortingEnabled</db:link>).</db:para>
<db:para>This property was introduced in Qt 6.1.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSortIndicatorClearable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSortIndicatorClearable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>clearable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sortIndicatorClearableChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>clearable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="stretchLastSection-prop">
<db:title>stretchLastSection : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>stretchLastSection</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">stretchLastSection</db:synopsisinfo>
<db:synopsisinfo role="setter">setStretchLastSection</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the last visible section in the header takes up all the available space</db:para>
<db:para>The default value is false.</db:para>
<db:note>
<db:para>The horizontal headers provided by <db:link xlink:href="qtreeview.xml">QTreeView</db:link> are configured with this property set to true, ensuring that the view does not waste any of the space assigned to it for its header. If this value is set to true, this property will override the resize mode set on the last section in the header.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">stretchLastSection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setStretchLastSection</db:emphasis>(<db:type>bool</db:type> <db:emphasis>stretch</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHeaderView">
<db:title>[explicit] QHeaderView::QHeaderView(Qt::Orientation <db:emphasis>orientation</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QHeaderView</db:methodname>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QHeaderView(Qt::Orientation orientation, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new generic header with the given <db:code role="parameter">orientation</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHeaderView">
<db:title>[virtual] QHeaderView::~QHeaderView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QHeaderView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHeaderView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the header.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QHeaderView::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of sections in the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionCountChanged">sectionCountChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[override virtual protected] void QHeaderView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>old</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>currentChanged</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>current</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>old</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;old) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#currentChanged" role="function">QAbstractItemView::currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QHeaderView::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#event" role="function">QAbstractItemView::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="geometriesChanged">
<db:title>void QHeaderView::geometriesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>geometriesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void geometriesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the header's geometries have changed.</db:para>
</db:section>
<db:section xml:id="headerDataChanged">
<db:title>void QHeaderView::headerDataChanged(Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>headerDataChanged</db:methodname>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalFirst</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalLast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the changed header sections with the given <db:code role="parameter">orientation</db:code>, from <db:code role="parameter">logicalFirst</db:code> to <db:code role="parameter">logicalLast</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="hiddenSectionCount">
<db:title>int QHeaderView::hiddenSectionCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hiddenSectionCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hiddenSectionCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of sections in the header that has been hidden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideSection">
<db:title>void QHeaderView::hideSection(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hideSection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideSection(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Hides the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[override virtual protected] int QHeaderView::horizontalOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>horizontalOffset</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int horizontalOffset() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#horizontalOffset" role="function">QAbstractItemView::horizontalOffset() const</db:link>.</db:para>
<db:para>Returns the horizontal offset of the header. This is 0 for vertical headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QHeaderView::initStyleOption(QStyleOptionHeader *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionHeader *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionHeader *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qheaderview.xml">QHeaderView</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionheader.xml">QStyleOptionHeader</db:link>, but do not want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#initStyleOptionForIndex">initStyleOptionForIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOptionForIndex">
<db:title>[virtual protected, since 6.0] void QHeaderView::initStyleOptionForIndex(QStyleOptionHeader *<db:emphasis>option</db:emphasis>, int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOptionForIndex</db:methodname>
<db:methodparam>
<db:type>QStyleOptionHeader *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOptionForIndex(QStyleOptionHeader *option, int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the style <db:code role="parameter">option</db:code> from the specified <db:code role="parameter">logicalIndex</db:code>. This function is called by the default implementation of <db:link xlink:href="qheaderview.xml#paintSection">paintSection</db:link> after <db:link xlink:href="qheaderview.xml#initStyleOption">initStyleOption</db:link> has been called.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#paintSection">paintSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#initStyleOption">initStyleOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSectionHidden">
<db:title>bool QHeaderView::isSectionHidden(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSectionHidden</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSectionHidden(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the section specified by <db:code role="parameter">logicalIndex</db:code> is explicitly hidden from the user; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QHeaderView::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length along the orientation of the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sizeHint">sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndex">
<db:title>int QHeaderView::logicalIndex(int <db:emphasis>visualIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>visualIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalIndex(int visualIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the logicalIndex for the section at the given <db:code role="parameter">visualIndex</db:code> position, or -1 if <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> &lt; 0 or <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> &gt;= <db:link xlink:href="qheaderview.xml#count">QHeaderView::count</db:link>().</db:para>
<db:para>Note that the <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> is not affected by hidden sections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndexAt">
<db:title>int QHeaderView::logicalIndexAt(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalIndexAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalIndexAt(int position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the section that covers the given <db:code role="parameter">position</db:code> in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#visualIndexAt">visualIndexAt</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndexAt-1">
<db:title>int QHeaderView::logicalIndexAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalIndexAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalIndexAt(int x, int y) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the logical index of the section at the given coordinate. If the header is horizontal <db:code role="parameter">x</db:code> will be used, otherwise <db:code role="parameter">y</db:code> will be used to find the logical index.</db:para>
</db:section>
<db:section xml:id="logicalIndexAt-2">
<db:title>int QHeaderView::logicalIndexAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>logicalIndexAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int logicalIndexAt(const QPoint &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the logical index of the section at the position given in <db:code role="parameter">pos</db:code>. If the header is horizontal the x-coordinate will be used, otherwise the y-coordinate will be used to find the logical index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QHeaderView::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseDoubleClickEvent" role="function">QAbstractItemView::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QHeaderView::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseMoveEvent" role="function">QAbstractItemView::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QHeaderView::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mousePressEvent" role="function">QAbstractItemView::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QHeaderView::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseReleaseEvent" role="function">QAbstractItemView::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveSection">
<db:title>void QHeaderView::moveSection(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>moveSection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>to</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void moveSection(int from, int to)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the section at visual index <db:code role="parameter">from</db:code> to occupy visual index <db:code role="parameter">to</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsMoved">sectionsMoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offset">
<db:title>int QHeaderView::offset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>offset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int offset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the offset of the header: this is the header's left-most (or top-most for vertical headers) visible pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation">
<db:title>Qt::Orientation QHeaderView::orientation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientation</db:type>
<db:methodname>orientation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientation orientation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the orientation of the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QHeaderView::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintSection">
<db:title>[virtual protected] void QHeaderView::paintSection(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>paintSection</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintSection(QPainter *painter, const QRect &amp;rect, int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Paints the section specified by the given <db:code role="parameter">logicalIndex</db:code>, using the given <db:code role="parameter">painter</db:code> and <db:code role="parameter">rect</db:code>.</db:para>
<db:para>Normally, you do not have to call this function.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>[override virtual] void QHeaderView::reset()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#reset" role="function">QAbstractItemView::reset()</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeContentsPrecision">
<db:title>int QHeaderView::resizeContentsPrecision() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>resizeContentsPrecision</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int resizeContentsPrecision() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns how precise <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will calculate on <db:link xlink:href="qheaderview.xml#ResizeMode-enum">ResizeToContents</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setResizeContentsPrecision">setResizeContentsPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeSection">
<db:title>void QHeaderView::resizeSection(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resizeSection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeSection(int logicalIndex, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the section specified by <db:code role="parameter">logicalIndex</db:code> to <db:code role="parameter">size</db:code> measured in pixels. The size parameter must be a value larger or equal to zero. A size equal to zero is however not recommended. In that situation <db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link> should be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionSize">sectionSize</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeSections">
<db:title>void QHeaderView::resizeSections(QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resizeSections</db:methodname>
<db:methodparam>
<db:type>QHeaderView::ResizeMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeSections(QHeaderView::ResizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the sections according to the given <db:code role="parameter">mode</db:code>, ignoring the current resize mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeSections-1">
<db:title>[protected] void QHeaderView::resizeSections()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resizeSections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeSections()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resizes the sections according to their size hints. Normally, you do not have to call this function.</db:para>
</db:section>
<db:section xml:id="restoreState">
<db:title>bool QHeaderView::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>restoreState</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool restoreState(const QByteArray &amp;state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Restores the <db:code role="parameter">state</db:code> of this header view. This function returns <db:code>true</db:code> if the state was restored; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#saveState">saveState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveState">
<db:title>QByteArray QHeaderView::saveState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>saveState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray saveState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Saves the current state of this header view.</db:para>
<db:para>To restore the saved state, pass the return value to <db:link xlink:href="qheaderview.xml#restoreState">restoreState</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#restoreState">restoreState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionClicked">
<db:title>void QHeaderView::sectionClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionClicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionClicked(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>Note that the <db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link> signal will also be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionCountChanged">
<db:title>void QHeaderView::sectionCountChanged(int <db:emphasis>oldCount</db:emphasis>, int <db:emphasis>newCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionCountChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>oldCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionCountChanged(int oldCount, int newCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of sections changes, i.e., when sections are added or deleted. The original count is specified by <db:code role="parameter">oldCount</db:code>, and the new count by <db:code role="parameter">newCount</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#headerDataChanged">headerDataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionDoubleClicked">
<db:title>void QHeaderView::sectionDoubleClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionDoubleClicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionDoubleClicked(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is double-clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionEntered">
<db:title>void QHeaderView::sectionEntered(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionEntered</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionEntered(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the cursor moves over the section and the left mouse button is pressed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionHandleDoubleClicked">
<db:title>void QHeaderView::sectionHandleDoubleClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionHandleDoubleClicked</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionHandleDoubleClicked(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is double-clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionMoved">
<db:title>void QHeaderView::sectionMoved(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>oldVisualIndex</db:emphasis>, int <db:emphasis>newVisualIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionMoved</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>oldVisualIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newVisualIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionMoved(int logicalIndex, int oldVisualIndex, int newVisualIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is moved. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>, the old index by <db:code role="parameter">oldVisualIndex</db:code>, and the new index position by <db:code role="parameter">newVisualIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionPosition">
<db:title>int QHeaderView::sectionPosition(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sectionPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sectionPosition(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the section position of the given <db:code role="parameter">logicalIndex</db:code>, or -1 if the section is hidden. The position is measured in pixels from the first visible item's top-left corner to the top-left corner of the item with <db:code role="parameter">logicalIndex</db:code>. The measurement is along the x-axis for horizontal headers and along the y-axis for vertical headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionViewportPosition">sectionViewportPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionPressed">
<db:title>void QHeaderView::sectionPressed(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionPressed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionPressed(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is pressed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionResizeMode">
<db:title>QHeaderView::ResizeMode QHeaderView::sectionResizeMode(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHeaderView::ResizeMode</db:type>
<db:methodname>sectionResizeMode</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHeaderView::ResizeMode sectionResizeMode(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resize mode that applies to the section specified by the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionResized">
<db:title>void QHeaderView::sectionResized(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>oldSize</db:emphasis>, int <db:emphasis>newSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionResized</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>oldSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionResized(int logicalIndex, int oldSize, int newSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a section is resized. The section's logical number is specified by <db:code role="parameter">logicalIndex</db:code>, the old size by <db:code role="parameter">oldSize</db:code>, and the new size by <db:code role="parameter">newSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSize">
<db:title>int QHeaderView::sectionSize(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sectionSize</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sectionSize(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width (or height for vertical headers) of the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSizeFromContents">
<db:title>[virtual protected] QSize QHeaderView::sectionSizeFromContents(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sectionSizeFromContents</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sectionSizeFromContents(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the contents of the section specified by the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSizeHint">
<db:title>int QHeaderView::sectionSizeHint(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sectionSizeHint</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sectionSizeHint(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a suitable size hint for the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::SizeHintRole</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sizeHint">sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#defaultSectionSize-prop">defaultSectionSize</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#minimumSectionSize-prop">minimumSectionSize</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#maximumSectionSize-prop">maximumSectionSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionViewportPosition">
<db:title>int QHeaderView::sectionViewportPosition(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sectionViewportPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sectionViewportPosition(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the section viewport position of the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>If the section is hidden, the return value is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsAboutToBeRemoved">
<db:title>[protected] void QHeaderView::sectionsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionsAboutToBeRemoved</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalFirst</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalLast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionsAboutToBeRemoved(const QModelIndex &amp;parent, int logicalFirst, int logicalLast)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when sections are removed from the <db:code role="parameter">parent</db:code>. <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> signify where the sections were removed.</db:para>
<db:para>If only one section is removed, <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> will be the same.</db:para>
</db:section>
<db:section xml:id="sectionsClickable">
<db:title>bool QHeaderView::sectionsClickable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>sectionsClickable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sectionsClickable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the header is clickable; otherwise returns <db:code>false</db:code>. A clickable header could be set up to allow the user to change the representation of the data in the view related to the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsHidden">
<db:title>bool QHeaderView::sectionsHidden() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>sectionsHidden</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sectionsHidden() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if sections in the header has been hidden; otherwise returns false;</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsInserted">
<db:title>[protected] void QHeaderView::sectionsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sectionsInserted</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalFirst</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalLast</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sectionsInserted(const QModelIndex &amp;parent, int logicalFirst, int logicalLast)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This slot is called when sections are inserted into the <db:code role="parameter">parent</db:code>. <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> indices signify where the new sections were inserted.</db:para>
<db:para>If only one section is inserted, <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> will be the same.</db:para>
</db:section>
<db:section xml:id="sectionsMovable">
<db:title>bool QHeaderView::sectionsMovable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>sectionsMovable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sectionsMovable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the header can be moved by the user; otherwise returns false.</db:para>
<db:para>By default, sections are movable in <db:link xlink:href="qtreeview.xml">QTreeView</db:link> (except for the first one), and not movable in <db:link xlink:href="qtableview.xml">QTableView</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsMoved">
<db:title>bool QHeaderView::sectionsMoved() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>sectionsMoved</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sectionsMoved() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if sections in the header has been moved; otherwise returns false;</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[override virtual] void QHeaderView::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setModel</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>model</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setModel(QAbstractItemModel *model) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setModel" role="function">QAbstractItemView::setModel(QAbstractItemModel *model)</db:link>.</db:para>
</db:section>
<db:section xml:id="setOffset">
<db:title>void QHeaderView::setOffset(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOffset</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOffset(int offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the header's offset to <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetToLastSection">
<db:title>void QHeaderView::setOffsetToLastSection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOffsetToLastSection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOffsetToLastSection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the offset to make the last section visible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setOffsetToSectionPosition">setOffsetToSectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetToSectionPosition">
<db:title>void QHeaderView::setOffsetToSectionPosition(int <db:emphasis>visualSectionNumber</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOffsetToSectionPosition</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>visualSectionNumber</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOffsetToSectionPosition(int visualSectionNumber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the offset to the start of the section at the given <db:code role="parameter">visualSectionNumber</db:code>. <db:code role="parameter">visualSectionNumber</db:code> is the actual visible section when hiddenSections are not considered. That is not always the same as <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResizeContentsPrecision">
<db:title>void QHeaderView::setResizeContentsPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setResizeContentsPrecision</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>precision</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResizeContentsPrecision(int precision)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets how precise <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> should calculate the size when <db:link xlink:href="qheaderview.xml#ResizeMode-enum">ResizeToContents</db:link> is used. A low value will provide a less accurate but fast auto resize while a higher value will provide a more accurate resize that however can be slow.</db:para>
<db:para>The number <db:code role="parameter">precision</db:code> specifies how many sections that should be consider when calculating the preferred size.</db:para>
<db:para>The default value is 1000 meaning that a horizontal column with auto-resize will look at maximum 1000 rows on calculating when doing an auto resize.</db:para>
<db:para>Special value 0 means that it will look at only the visible area. Special value -1 will imply looking at all elements.</db:para>
<db:para>This value is used in <db:link xlink:href="qtableview.xml#sizeHintForColumn">QTableView::sizeHintForColumn</db:link>(), <db:link xlink:href="qtableview.xml#sizeHintForRow">QTableView::sizeHintForRow</db:link>() and <db:link xlink:href="qtreeview.xml#sizeHintForColumn">QTreeView::sizeHintForColumn</db:link>(). Reimplementing these functions can make this function not having an effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">resizeContentsPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeSections-1">resizeSections</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForColumn">QTableView::sizeHintForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForRow">QTableView::sizeHintForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtreeview.xml#sizeHintForColumn">QTreeView::sizeHintForColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionHidden">
<db:title>void QHeaderView::setSectionHidden(int <db:emphasis>logicalIndex</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSectionHidden</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>hide</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSectionHidden(int logicalIndex, bool hide)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">hide</db:code> is true the section specified by <db:code role="parameter">logicalIndex</db:code> is hidden; otherwise the section is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionResizeMode">
<db:title>void QHeaderView::setSectionResizeMode(QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSectionResizeMode</db:methodname>
<db:methodparam>
<db:type>QHeaderView::ResizeMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSectionResizeMode(QHeaderView::ResizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the constraints on how the header can be resized to those described by the given <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionResizeMode">sectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionResizeMode-1">
<db:title>void QHeaderView::setSectionResizeMode(int <db:emphasis>logicalIndex</db:emphasis>, QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSectionResizeMode</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHeaderView::ResizeMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSectionResizeMode(int logicalIndex, QHeaderView::ResizeMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the constraints on how the section specified by <db:code role="parameter">logicalIndex</db:code> in the header can be resized to those described by the given <db:code role="parameter">mode</db:code>. The logical index should exist at the time this function is called.</db:para>
<db:note>
<db:para>This setting will be ignored for the last section if the <db:link xlink:href="qheaderview.xml#stretchLastSection-prop">stretchLastSection</db:link> property is set to true. This is the default for the horizontal headers provided by <db:link xlink:href="qtreeview.xml">QTreeView</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#stretchLastSection-prop">setStretchLastSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionsClickable">
<db:title>void QHeaderView::setSectionsClickable(bool <db:emphasis>clickable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSectionsClickable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>clickable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSectionsClickable(bool clickable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">clickable</db:code> is true, the header will respond to single clicks.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsClickable">sectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionClicked">sectionClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#showSortIndicator-prop">setSortIndicatorShown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionsMovable">
<db:title>void QHeaderView::setSectionsMovable(bool <db:emphasis>movable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSectionsMovable</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>movable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSectionsMovable(bool movable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">movable</db:code> is true, the header sections may be moved by the user; otherwise they are fixed in place.</db:para>
<db:para>When used in combination with <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, the first column is not movable (since it contains the tree structure), by default. You can make it movable with <db:link xlink:href="qheaderview.xml#firstSectionMovable-prop">setFirstSectionMovable</db:link>(true).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsMovable">sectionsMovable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionMoved">sectionMoved</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#firstSectionMovable-prop">setFirstSectionMovable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[override virtual protected] void QHeaderView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setSelection</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QItemSelectionModel::SelectionFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelection" role="function">QAbstractItemView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</db:link>.</db:para>
<db:para>Selects the items in the given <db:code role="parameter">rect</db:code> according to the specified <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The base class implementation does nothing.</db:para>
</db:section>
<db:section xml:id="setSortIndicator">
<db:title>void QHeaderView::setSortIndicator(int <db:emphasis>logicalIndex</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSortIndicator</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSortIndicator(int logicalIndex, Qt::SortOrder order)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sort indicator for the section specified by the given <db:code role="parameter">logicalIndex</db:code> in the direction specified by <db:code role="parameter">order</db:code>, and removes the sort indicator from any other section that was showing it.</db:para>
<db:para><db:code role="parameter">logicalIndex</db:code> may be -1, in which case no sort indicator will be shown and the model will return to its natural, unsorted order. Note that not all models support this and may even crash in this case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorSection">sortIndicatorSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorOrder">sortIndicatorOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QHeaderView::setVisible(bool <db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVisible</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVisible(bool v) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#visible-prop" role="property">QWidget::visible</db:link>.</db:para>
</db:section>
<db:section xml:id="showSection">
<db:title>void QHeaderView::showSection(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>showSection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showSection(int logicalIndex)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Shows the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QHeaderView::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
<db:para>Returns a suitable size hint for this header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionSizeHint">sectionSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorChanged">
<db:title>void QHeaderView::sortIndicatorChanged(int <db:emphasis>logicalIndex</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sortIndicatorChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::SortOrder</db:type>
<db:parameter>order</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sortIndicatorChanged(int logicalIndex, Qt::SortOrder order)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the section containing the sort indicator or the order indicated is changed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code> and the sort order is specified by <db:code role="parameter">order</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorOrder">
<db:title>Qt::SortOrder QHeaderView::sortIndicatorOrder() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::SortOrder</db:type>
<db:methodname>sortIndicatorOrder</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::SortOrder sortIndicatorOrder() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the order for the sort indicator. If no section has a sort indicator the return value of this function is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorSection">sortIndicatorSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorSection">
<db:title>int QHeaderView::sortIndicatorSection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>sortIndicatorSection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sortIndicatorSection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the logical index of the section that has a sort indicator. By default this is section 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorOrder">sortIndicatorOrder</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#showSortIndicator-prop">setSortIndicatorShown</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stretchSectionCount">
<db:title>int QHeaderView::stretchSectionCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>stretchSectionCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int stretchSectionCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of sections that are set to resize mode stretch. In views, this can be used to see if the headerview needs to resize the sections when the view's geometry changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#stretchLastSection-prop">stretchLastSection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swapSections">
<db:title>void QHeaderView::swapSections(int <db:emphasis>first</db:emphasis>, int <db:emphasis>second</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swapSections</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>first</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>second</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swapSections(int first, int second)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the section at visual index <db:code role="parameter">first</db:code> with the section at visual index <db:code role="parameter">second</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[override virtual protected] int QHeaderView::verticalOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>verticalOffset</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int verticalOffset() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#verticalOffset" role="function">QAbstractItemView::verticalOffset() const</db:link>.</db:para>
<db:para>Returns the vertical offset of the header. This is 0 for horizontal headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QHeaderView::viewportEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>viewportEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool viewportEvent(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#viewportEvent" role="function">QAbstractItemView::viewportEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="visualIndex">
<db:title>int QHeaderView::visualIndex(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>visualIndex</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>logicalIndex</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int visualIndex(int logicalIndex) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visual index position of the section specified by the given <db:code role="parameter">logicalIndex</db:code>, or -1 otherwise.</db:para>
<db:para>Hidden sections still have valid visual indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#logicalIndex">logicalIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualIndexAt">
<db:title>int QHeaderView::visualIndexAt(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>visualIndexAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int visualIndexAt(int position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the visual index of the section that covers the given <db:code role="parameter">position</db:code> in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#logicalIndexAt">logicalIndexAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
