<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QHeaderView Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> class provides a header row or header column for item views.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHeaderView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemview.xml" xlink:role="class">QAbstractItemView</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHeaderView is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> displays the headers used in item views such as the <db:link xlink:href="qtableview.xml">QTableView</db:link> and <db:link xlink:href="qtreeview.xml">QTreeView</db:link> classes. It takes the place of Qt3's <db:code>QHeader</db:code> class previously used for the same purpose, but uses the Qt's model/view architecture for consistency with the item view classes.</db:para>
<db:para>The <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para>The header gets the data for each section from the model using the <db:link xlink:href="qabstractitemmodel.xml#headerData">QAbstractItemModel::headerData</db:link>() function. You can set the data by using <db:link xlink:href="qabstractitemmodel.xml#setHeaderData">QAbstractItemModel::setHeaderData</db:link>().</db:para>
<db:para>Each header has an <db:link xlink:href="qheaderview.xml#orientation">orientation</db:link>() and a number of sections, given by the <db:link xlink:href="qheaderview.xml#count">count</db:link>() function. A section refers to a part of the header - either a row or a column, depending on the orientation.</db:para>
<db:para>Sections can be moved and resized using <db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>() and <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(); they can also be hidden and shown with <db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>() and <db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>().</db:para>
<db:para>Each section of a header is described by a section ID, specified by its section(), and can be located at a particular <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>() in the header. A section can have a sort indicator set with <db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>(); this indicates whether the items in the associated item view will be sorted in the order given by the section.</db:para>
<db:para>For a horizontal header the section is equivalent to a column in the model, and for a vertical header the section is equivalent to a row in the model.</db:para>
<db:section xml:id="moving-header-sections">
<db:title>Moving Header Sections</db:title>
<db:para>A header can be fixed in place, or made movable with <db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>(). It can be made clickable with <db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>(), and has resizing behavior in accordance with <db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:para>
<db:note>
<db:para>Double-clicking on a header to resize a section only applies for visible rows.</db:para>
</db:note>
<db:para>A header will emit <db:link xlink:href="qheaderview.xml#sectionMoved">sectionMoved</db:link>() if the user moves a section, <db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>() if the user resizes a section, and <db:link xlink:href="qheaderview.xml#sectionClicked">sectionClicked</db:link>() as well as <db:link xlink:href="qheaderview.xml#sectionHandleDoubleClicked">sectionHandleDoubleClicked</db:link>() in response to mouse clicks. A header will also emit <db:link xlink:href="qheaderview.xml#sectionCountChanged">sectionCountChanged</db:link>().</db:para>
<db:para>You can identify a section using the <db:link xlink:href="qheaderview.xml#logicalIndex">logicalIndex</db:link>() and <db:link xlink:href="qheaderview.xml#logicalIndexAt">logicalIndexAt</db:link>() functions, or by its index position, using the <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>() and <db:link xlink:href="qheaderview.xml#visualIndexAt">visualIndexAt</db:link>() functions. The visual index will change if a section is moved, but the logical index will not change.</db:para>
</db:section>
<db:section xml:id="appearance">
<db:title>Appearance</db:title>
<db:para><db:link xlink:href="qtablewidget.xml">QTableWidget</db:link> and <db:link xlink:href="qtableview.xml">QTableView</db:link> create default headers. If you want the headers to be visible, you can use <db:link xlink:href="">setVisible()</db:link>.</db:para>
<db:para>Not all <db:link xlink:href="qt.xml#ItemDataRole-enum">ItemDataRole</db:link>s will have an effect on a <db:link xlink:href="qheaderview.xml">QHeaderView</db:link>. If you need to draw other roles, you can subclass <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> and reimplement <db:link xlink:href="qheaderview.xml#paintEvent">paintEvent</db:link>(). <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> respects the following item data roles: <db:link xlink:href="qt.xml#ItemDataRole-enum">TextAlignmentRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">DisplayRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">FontRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">DecorationRole</db:link>, <db:link xlink:href="qt.xml#ItemDataRole-enum">ForegroundRole</db:link>, and <db:link xlink:href="qt.xml#ItemDataRole-enum">BackgroundRole</db:link>.</db:para>
<db:note>
<db:para>Each header renders the data for each section itself, and does not rely on a delegate. As a result, calling a header's <db:link xlink:href="qabstractitemview.xml#setItemDelegate">setItemDelegate</db:link>() function will have no effect.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qlistview.xml">QListView</db:link></db:member>
<db:member><db:link xlink:href="qtableview.xml">QTableView</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QHeaderView::ResizeMode</db:title>
<db:para>The resize mode specifies the behavior of the header sections. It can be set on the entire header view or on individual sections using <db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Interactive</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The user can resize the section. The section can also be resized programmatically using <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(). The section size defaults to defaultSectionSize. (See also cascadingSectionResizes.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Fixed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The user cannot resize the section. The section can only be resized programmatically using <db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>(). The section size defaults to defaultSectionSize.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Stretch</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will automatically resize the section to fill the available space. The size cannot be changed by the user or programmatically.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::ResizeToContents</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will automatically resize the section to its optimal size based on the contents of the entire column or row. The size cannot be changed by the user or programmatically. (This value was introduced in 4.2)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following values are obsolete:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qheaderview.xml">QHeaderView</db:link></db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>Fixed</db:code></db:td>
<db:td>
<db:para>Use Fixed instead.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setResizeMode()</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member>stretchLastSection</db:member>
<db:member>minimumSectionSize</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHeaderView">
<db:title>[explicit] QHeaderView::QHeaderView(Qt::Orientation <db:emphasis>orientation</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a new generic header with the given <db:code role="parameter">orientation</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHeaderView">
<db:title>[virtual noexcept] QHeaderView::~QHeaderView()</db:title>
<db:para>Destroys the header.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QHeaderView::count() const</db:title>
<db:para>Returns the number of sections in the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionCountChanged">sectionCountChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentChanged">
<db:title>[override virtual protected] void QHeaderView::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>old</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#currentChanged" role="function">QAbstractItemView::currentChanged(const QModelIndex &amp;current, const QModelIndex &amp;previous)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QHeaderView::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#event" role="function">QAbstractItemView::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="geometriesChanged">
<db:title>[since 4.2] void QHeaderView::geometriesChanged()</db:title>
<db:para>This signal is emitted when the header's geometries have changed.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="headerDataChanged">
<db:title>void QHeaderView::headerDataChanged(Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:para>Updates the changed header sections with the given <db:code role="parameter">orientation</db:code>, from <db:code role="parameter">logicalFirst</db:code> to <db:code role="parameter">logicalLast</db:code> inclusive.</db:para>
</db:section>
<db:section xml:id="hiddenSectionCount">
<db:title>[since 4.1] int QHeaderView::hiddenSectionCount() const</db:title>
<db:para>Returns the number of sections in the header that has been hidden.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hideSection">
<db:title>void QHeaderView::hideSection(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>Hides the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="horizontalOffset">
<db:title>[override virtual protected] int QHeaderView::horizontalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#horizontalOffset" role="function">QAbstractItemView::horizontalOffset() const</db:link>.</db:para>
<db:para>Returns the horizontal offset of the header. This is 0 for vertical headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QHeaderView::initStyleOption(QStyleOptionHeader *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qheaderview.xml">QHeaderView</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionheader.xml">QStyleOptionHeader</db:link>, but do not want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSectionHidden">
<db:title>bool QHeaderView::isSectionHidden(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the section specified by <db:code role="parameter">logicalIndex</db:code> is explicitly hidden from the user; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#showSection">showSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QHeaderView::length() const</db:title>
<db:para>Returns the length along the orientation of the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sizeHint">sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndex">
<db:title>int QHeaderView::logicalIndex(int <db:emphasis>visualIndex</db:emphasis>) const</db:title>
<db:para>Returns the logicalIndex for the section at the given <db:code role="parameter">visualIndex</db:code> position, or -1 if <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> &lt; 0 or <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> &gt;= <db:link xlink:href="qheaderview.xml#count">QHeaderView::count</db:link>().</db:para>
<db:para>Note that the <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link> is not affected by hidden sections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndexAt">
<db:title>int QHeaderView::logicalIndexAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Returns the logical index of the section at the position given in <db:code role="parameter">pos</db:code>. If the header is horizontal the x-coordinate will be used, otherwise the y-coordinate will be used to find the logical index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndexAt-1">
<db:title>int QHeaderView::logicalIndexAt(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the section that covers the given <db:code role="parameter">position</db:code> in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#visualIndexAt">visualIndexAt</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalIndexAt-2">
<db:title>int QHeaderView::logicalIndexAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>) const</db:title>
<db:para>Returns the logical index of the section at the given coordinate. If the header is horizontal <db:code role="parameter">x</db:code> will be used, otherwise <db:code role="parameter">y</db:code> will be used to find the logical index.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QHeaderView::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseDoubleClickEvent" role="function">QAbstractItemView::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QHeaderView::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseMoveEvent" role="function">QAbstractItemView::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QHeaderView::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mousePressEvent" role="function">QAbstractItemView::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QHeaderView::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#mouseReleaseEvent" role="function">QAbstractItemView::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveSection">
<db:title>void QHeaderView::moveSection(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves the section at visual index <db:code role="parameter">from</db:code> to occupy visual index <db:code role="parameter">to</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsMoved">sectionsMoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offset">
<db:title>int QHeaderView::offset() const</db:title>
<db:para>Returns the offset of the header: this is the header's left-most (or top-most for vertical headers) visible pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation">
<db:title>Qt::Orientation QHeaderView::orientation() const</db:title>
<db:para>Returns the orientation of the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QHeaderView::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#paintEvent" role="function">QAbstractScrollArea::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintSection">
<db:title>[virtual protected] void QHeaderView::paintSection(QPainter *<db:emphasis>painter</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>, int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Paints the section specified by the given <db:code role="parameter">logicalIndex</db:code>, using the given <db:code role="parameter">painter</db:code> and <db:code role="parameter">rect</db:code>.</db:para>
<db:para>Normally, you do not have to call this function.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>[override virtual] void QHeaderView::reset()</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#reset" role="function">QAbstractItemView::reset()</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeContentsPrecision">
<db:title>[since 5.2] int QHeaderView::resizeContentsPrecision() const</db:title>
<db:para>Returns how precise <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> will calculate on <db:link xlink:href="qheaderview.xml#ResizeMode-enum">ResizeToContents</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setResizeContentsPrecision">setResizeContentsPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeSection">
<db:title>void QHeaderView::resizeSection(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Resizes the section specified by <db:code role="parameter">logicalIndex</db:code> to <db:code role="parameter">size</db:code> measured in pixels. The size parameter must be a value larger or equal to zero. A size equal to zero is however not recommended. In that situation <db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link> should be used instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
<db:member><db:link xlink:href="">resizeMode()</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionSize">sectionSize</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeSections">
<db:title>[protected] void QHeaderView::resizeSections()</db:title>
<db:para>Resizes the sections according to their size hints. Normally, you do not have to call this function.</db:para>
</db:section>
<db:section xml:id="resizeSections-1">
<db:title>void QHeaderView::resizeSections(QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Resizes the sections according to the given <db:code role="parameter">mode</db:code>, ignoring the current resize mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">resizeMode()</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="restoreState">
<db:title>[since 4.3] bool QHeaderView::restoreState(const QByteArray &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:para>Restores the <db:code role="parameter">state</db:code> of this header view. This function returns <db:code>true</db:code> if the state was restored; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#saveState">saveState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saveState">
<db:title>[since 4.3] QByteArray QHeaderView::saveState() const</db:title>
<db:para>Saves the current state of this header view.</db:para>
<db:para>To restore the saved state, pass the return value to <db:link xlink:href="qheaderview.xml#restoreState">restoreState</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#restoreState">restoreState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionClicked">
<db:title>void QHeaderView::sectionClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>Note that the <db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link> signal will also be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionCountChanged">
<db:title>void QHeaderView::sectionCountChanged(int <db:emphasis>oldCount</db:emphasis>, int <db:emphasis>newCount</db:emphasis>)</db:title>
<db:para>This signal is emitted when the number of sections changes, i.e., when sections are added or deleted. The original count is specified by <db:code role="parameter">oldCount</db:code>, and the new count by <db:code role="parameter">newCount</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#count">count</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#headerDataChanged">headerDataChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionDoubleClicked">
<db:title>void QHeaderView::sectionDoubleClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is double-clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionEntered">
<db:title>[since 4.3] void QHeaderView::sectionEntered(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when the cursor moves over the section and the left mouse button is pressed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionHandleDoubleClicked">
<db:title>void QHeaderView::sectionHandleDoubleClicked(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is double-clicked. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionMoved">
<db:title>void QHeaderView::sectionMoved(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>oldVisualIndex</db:emphasis>, int <db:emphasis>newVisualIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is moved. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>, the old index by <db:code role="parameter">oldVisualIndex</db:code>, and the new index position by <db:code role="parameter">newVisualIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionPosition">
<db:title>int QHeaderView::sectionPosition(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the section position of the given <db:code role="parameter">logicalIndex</db:code>, or -1 if the section is hidden. The position is measured in pixels from the first visible item's top-left corner to the top-left corner of the item with <db:code role="parameter">logicalIndex</db:code>. The measurement is along the x-axis for horizontal headers and along the y-axis for vertical headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionViewportPosition">sectionViewportPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionPressed">
<db:title>void QHeaderView::sectionPressed(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is pressed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionResizeMode">
<db:title>[since 5.0] QHeaderView::ResizeMode QHeaderView::sectionResizeMode(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the resize mode that applies to the section specified by the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionResized">
<db:title>void QHeaderView::sectionResized(int <db:emphasis>logicalIndex</db:emphasis>, int <db:emphasis>oldSize</db:emphasis>, int <db:emphasis>newSize</db:emphasis>)</db:title>
<db:para>This signal is emitted when a section is resized. The section's logical number is specified by <db:code role="parameter">logicalIndex</db:code>, the old size by <db:code role="parameter">oldSize</db:code>, and the new size by <db:code role="parameter">newSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#resizeSection">resizeSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSize">
<db:title>int QHeaderView::sectionSize(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the width (or height for vertical headers) of the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="">defaultSectionSize()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSizeFromContents">
<db:title>[virtual protected] QSize QHeaderView::sectionSizeFromContents(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the size of the contents of the section specified by the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">defaultSectionSize()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionSizeHint">
<db:title>int QHeaderView::sectionSizeHint(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns a suitable size hint for the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::SizeHintRole</db:link></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sizeHint">sizeHint</db:link>()</db:member>
<db:member><db:link xlink:href="">defaultSectionSize()</db:link></db:member>
<db:member><db:link xlink:href="">minimumSectionSize()</db:link></db:member>
<db:member><db:link xlink:href="">maximumSectionSize()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionViewportPosition">
<db:title>int QHeaderView::sectionViewportPosition(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the section viewport position of the given <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:para>If the section is hidden, the return value is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsAboutToBeRemoved">
<db:title>[protected] void QHeaderView::sectionsAboutToBeRemoved(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:para>This slot is called when sections are removed from the <db:code role="parameter">parent</db:code>. <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> signify where the sections were removed.</db:para>
<db:para>If only one section is removed, <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> will be the same.</db:para>
</db:section>
<db:section xml:id="sectionsClickable">
<db:title>[since 5.0] bool QHeaderView::sectionsClickable() const</db:title>
<db:para>Returns <db:code>true</db:code> if the header is clickable; otherwise returns <db:code>false</db:code>. A clickable header could be set up to allow the user to change the representation of the data in the view related to the header.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsClickable">setSectionsClickable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsHidden">
<db:title>[since 4.1] bool QHeaderView::sectionsHidden() const</db:title>
<db:para>Returns <db:code>true</db:code> if sections in the header has been hidden; otherwise returns false;</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsInserted">
<db:title>[protected] void QHeaderView::sectionsInserted(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, int <db:emphasis>logicalFirst</db:emphasis>, int <db:emphasis>logicalLast</db:emphasis>)</db:title>
<db:para>This slot is called when sections are inserted into the <db:code role="parameter">parent</db:code>. <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> indices signify where the new sections were inserted.</db:para>
<db:para>If only one section is inserted, <db:code role="parameter">logicalFirst</db:code> and <db:code role="parameter">logicalLast</db:code> will be the same.</db:para>
</db:section>
<db:section xml:id="sectionsMovable">
<db:title>[since 5.0] bool QHeaderView::sectionsMovable() const</db:title>
<db:para>Returns <db:code>true</db:code> if the header can be moved by the user; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSectionsMovable">setSectionsMovable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sectionsMoved">
<db:title>bool QHeaderView::sectionsMoved() const</db:title>
<db:para>Returns <db:code>true</db:code> if sections in the header has been moved; otherwise returns false;</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[override virtual] void QHeaderView::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setModel" role="function">QAbstractItemView::setModel(QAbstractItemModel *model)</db:link>.</db:para>
</db:section>
<db:section xml:id="setOffset">
<db:title>void QHeaderView::setOffset(int <db:emphasis>offset</db:emphasis>)</db:title>
<db:para>Sets the header's offset to <db:code role="parameter">offset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetToLastSection">
<db:title>[since 4.2] void QHeaderView::setOffsetToLastSection()</db:title>
<db:para>Sets the offset to make the last section visible.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setOffsetToSectionPosition">setOffsetToSectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetToSectionPosition">
<db:title>[since 4.2] void QHeaderView::setOffsetToSectionPosition(int <db:emphasis>visualSectionNumber</db:emphasis>)</db:title>
<db:para>Sets the offset to the start of the section at the given <db:code role="parameter">visualSectionNumber</db:code>. <db:code role="parameter">visualSectionNumber</db:code> is the actual visible section when hiddenSections are not considered. That is not always the same as <db:link xlink:href="qheaderview.xml#visualIndex">visualIndex</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPosition">sectionPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResizeContentsPrecision">
<db:title>[since 5.2] void QHeaderView::setResizeContentsPrecision(int <db:emphasis>precision</db:emphasis>)</db:title>
<db:para>Sets how precise <db:link xlink:href="qheaderview.xml">QHeaderView</db:link> should calculate the size when <db:link xlink:href="qheaderview.xml#ResizeMode-enum">ResizeToContents</db:link> is used. A low value will provide a less accurate but fast auto resize while a higher value will provide a more accurate resize that however can be slow.</db:para>
<db:para>The number <db:code role="parameter">precision</db:code> specifies how many sections that should be consider when calculating the preferred size.</db:para>
<db:para>The default value is 1000 meaning that a horizontal column with auto-resize will look at maximum 1000 rows on calculating when doing an auto resize.</db:para>
<db:para>Special value 0 means that it will look at only the visible area. Special value -1 will imply looking at all elements.</db:para>
<db:para>This value is used in <db:link xlink:href="qtableview.xml#sizeHintForColumn">QTableView::sizeHintForColumn</db:link>(), <db:link xlink:href="qtableview.xml#sizeHintForRow">QTableView::sizeHintForRow</db:link>() and <db:link xlink:href="qtreeview.xml#sizeHintForColumn">QTreeView::sizeHintForColumn</db:link>(). Reimplementing these functions can make this function not having an effect.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">resizeContentsPrecision</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionResizeMode">setSectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeSections">resizeSections</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForColumn">QTableView::sizeHintForColumn</db:link>()</db:member>
<db:member><db:link xlink:href="qtableview.xml#sizeHintForRow">QTableView::sizeHintForRow</db:link>()</db:member>
<db:member><db:link xlink:href="qtreeview.xml#sizeHintForColumn">QTreeView::sizeHintForColumn</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionHidden">
<db:title>void QHeaderView::setSectionHidden(int <db:emphasis>logicalIndex</db:emphasis>, bool <db:emphasis>hide</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">hide</db:code> is true the section specified by <db:code role="parameter">logicalIndex</db:code> is hidden; otherwise the section is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionResizeMode">
<db:title>[since 5.0] void QHeaderView::setSectionResizeMode(QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the constraints on how the header can be resized to those described by the given <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionResizeMode">sectionResizeMode</db:link>()</db:member>
<db:member><db:link xlink:href="">resizeMode()</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionResized">sectionResized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionResizeMode-1">
<db:title>[since 5.0] void QHeaderView::setSectionResizeMode(int <db:emphasis>logicalIndex</db:emphasis>, QHeaderView::ResizeMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the constraints on how the section specified by <db:code role="parameter">logicalIndex</db:code> in the header can be resized to those described by the given <db:code role="parameter">mode</db:code>. The logical index should exist at the time this function is called.</db:para>
<db:note>
<db:para>This setting will be ignored for the last section if the stretchLastSection property is set to true. This is the default for the horizontal headers provided by <db:link xlink:href="qtreeview.xml">QTreeView</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setStretchLastSection()</db:link></db:member>
<db:member><db:link xlink:href="qheaderview.xml#resizeContentsPrecision">resizeContentsPrecision</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionsClickable">
<db:title>[since 5.0] void QHeaderView::setSectionsClickable(bool <db:emphasis>clickable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">clickable</db:code> is true, the header will respond to single clicks.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsClickable">sectionsClickable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionClicked">sectionClicked</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionPressed">sectionPressed</db:link>()</db:member>
<db:member><db:link xlink:href="">setSortIndicatorShown()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSectionsMovable">
<db:title>[since 5.0] void QHeaderView::setSectionsMovable(bool <db:emphasis>movable</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">movable</db:code> is true, the header may be moved by the user; otherwise it is fixed in place.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionsMovable">sectionsMovable</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sectionMoved">sectionMoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[override virtual protected] void QHeaderView::setSelection(const QRect &amp;<db:emphasis>rect</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#setSelection" role="function">QAbstractItemView::setSelection(const QRect &amp;rect, QItemSelectionModel::SelectionFlags flags)</db:link>.</db:para>
<db:para>Selects the items in the given <db:code role="parameter">rect</db:code> according to the specified <db:code role="parameter">flags</db:code>.</db:para>
<db:para>The base class implementation does nothing.</db:para>
</db:section>
<db:section xml:id="setSortIndicator">
<db:title>void QHeaderView::setSortIndicator(int <db:emphasis>logicalIndex</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:para>Sets the sort indicator for the section specified by the given <db:code role="parameter">logicalIndex</db:code> in the direction specified by <db:code role="parameter">order</db:code>, and removes the sort indicator from any other section that was showing it.</db:para>
<db:para><db:code role="parameter">logicalIndex</db:code> may be -1, in which case no sort indicator will be shown and the model will return to its natural, unsorted order. Note that not all models support this and may even crash in this case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorSection">sortIndicatorSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorOrder">sortIndicatorOrder</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QHeaderView::setVisible(bool <db:emphasis>v</db:emphasis>)</db:title>
</db:section>
<db:section xml:id="showSection">
<db:title>void QHeaderView::showSection(int <db:emphasis>logicalIndex</db:emphasis>)</db:title>
<db:para>Shows the section specified by <db:code role="parameter">logicalIndex</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#hideSection">hideSection</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#isSectionHidden">isSectionHidden</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#hiddenSectionCount">hiddenSectionCount</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#setSectionHidden">setSectionHidden</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QHeaderView::sizeHint() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
<db:para>Returns a suitable size hint for this header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#sectionSizeHint">sectionSizeHint</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorChanged">
<db:title>[since 4.3] void QHeaderView::sortIndicatorChanged(int <db:emphasis>logicalIndex</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis>)</db:title>
<db:para>This signal is emitted when the section containing the sort indicator or the order indicated is changed. The section's logical index is specified by <db:code role="parameter">logicalIndex</db:code> and the sort order is specified by <db:code role="parameter">order</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorOrder">
<db:title>Qt::SortOrder QHeaderView::sortIndicatorOrder() const</db:title>
<db:para>Returns the order for the sort indicator. If no section has a sort indicator the return value of this function is undefined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorSection">sortIndicatorSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sortIndicatorSection">
<db:title>int QHeaderView::sortIndicatorSection() const</db:title>
<db:para>Returns the logical index of the section that has a sort indicator. By default this is section 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#setSortIndicator">setSortIndicator</db:link>()</db:member>
<db:member><db:link xlink:href="qheaderview.xml#sortIndicatorOrder">sortIndicatorOrder</db:link>()</db:member>
<db:member><db:link xlink:href="">setSortIndicatorShown()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stretchSectionCount">
<db:title>[since 4.1] int QHeaderView::stretchSectionCount() const</db:title>
<db:para>Returns the number of sections that are set to resize mode stretch. In views, this can be used to see if the headerview needs to resize the sections when the view's geometry changes.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>stretchLastSection</db:member>
<db:member><db:link xlink:href="">resizeMode()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swapSections">
<db:title>[since 4.2] void QHeaderView::swapSections(int <db:emphasis>first</db:emphasis>, int <db:emphasis>second</db:emphasis>)</db:title>
<db:para>Swaps the section at visual index <db:code role="parameter">first</db:code> with the section at visual index <db:code role="parameter">second</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#moveSection">moveSection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="verticalOffset">
<db:title>[override virtual protected] int QHeaderView::verticalOffset() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#verticalOffset" role="function">QAbstractItemView::verticalOffset() const</db:link>.</db:para>
<db:para>Returns the vertical offset of the header. This is 0 for horizontal headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#offset">offset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportEvent">
<db:title>[override virtual protected] bool QHeaderView::viewportEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemview.xml#viewportEvent" role="function">QAbstractItemView::viewportEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="visualIndex">
<db:title>int QHeaderView::visualIndex(int <db:emphasis>logicalIndex</db:emphasis>) const</db:title>
<db:para>Returns the visual index position of the section specified by the given <db:code role="parameter">logicalIndex</db:code>, or -1 otherwise.</db:para>
<db:para>Hidden sections still have valid visual indexes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#logicalIndex">logicalIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="visualIndexAt">
<db:title>int QHeaderView::visualIndexAt(int <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the visual index of the section that covers the given <db:code role="parameter">position</db:code> in the viewport.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qheaderview.xml#logicalIndexAt">logicalIndexAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
