<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Gamepad</db:title>
<db:productname>QtGamepad</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Gamepad Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A cross-platform library to facilitate the use of gamepad hardware in Qt and Qt Quick applications.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Gamepad is an add-on library that enables Qt applications to support the use of gamepad hardware and in some cases remote control equipment. The module provides both QML and C++ interfaces. The primary target audience are embedded devices with fullscreen user interfaces, and mobile applications targeting TV-like form factors.</db:para>
<db:para>The currently supported platforms are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Windows (Win32 desktop, via XInput 1.3 &amp; 1.4)</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux (evdev)</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux (SDL2)</db:para>
</db:listitem>
<db:listitem>
<db:para>Android</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS, iOS, tvOS (including the tvOS remote)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This module provides classes that can:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Read input events from game controllers (Button and Axis events),</db:para>
</db:listitem>
<db:listitem>
<db:para>expose these events both to C++ and Qt Quick (QML),</db:para>
</db:listitem>
<db:listitem>
<db:para>provide basic gamepad layout configurability, and</db:para>
</db:listitem>
<db:listitem>
<db:para>provide optional key and mouse event generation upon gamepad button presses.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The API is designed with XBox and similar controllers in mind. Joysticks are not in scope for this module. A number of third-party gamepads may be supported as well, however, some of these may need custom configuration steps in order to map the button/trigger codes the device or driver in question provides onto what <db:link xlink:href="qtgamepad-qmlmodule.xml">QtGamepad</db:link> expects. The can be done by the <db:link xlink:href="qtgamepad-configurebuttons-example.xml">configureButtons</db:link> example that can also save the generated layout persistently for use by other applications.</db:para>
</db:note>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>Before you start using the APIs provided by this module, ensure that the gamepad is detected by your development environment.</db:para>
<db:section xml:id="linux">
<db:title>Linux</db:title>
<db:para>On standard Linux distributions such as Ubuntu, gamepads such as XBox or PlayStation controllers are detected out-of-the-box. To check if the gamepad is detected, <db:code>grep</db:code> the <db:code>dmesg</db:code> logs using:</db:para>
<db:programlisting language="cpp" role="bad">dmesg | grep &quot;&amp;lt;gamepad-make&amp;gt;&quot;
</db:programlisting>
<db:para>If you do not see the entries for the gamepad you are using, check if the <db:code>joystick</db:code> package is installed. If not, install the package and <db:code>grep</db:code> the <db:code>dmesg</db:code> logs again.</db:para>
<db:para>It is strongly recommended to verify that the gamepad's input device is present, and is sending events, via the <db:code>lsinput</db:code> and <db:code>evtest</db:code> utilities.</db:para>
<db:para>PlayStation controllers will likely need the help of an additional tool like <db:link xlink:href="https://github.com/xboxdrv/xboxdrv">xboxdrv</db:link>. Once installed, and having a PS3 controller connected via USB, the following will ensure correct operation with <db:link xlink:href="qtgamepad-qmlmodule.xml">QtGamepad</db:link>:</db:para>
<db:programlisting language="cpp" role="bad">sudo xboxdrv --detach-kernel-driver --mimic-xpad -s
</db:programlisting>
<db:para>Qt Gamepad uses a plugin-based, multi-backend architecture. This means that on some platforms, like Linux, there are multiple backends available. In case of Linux, the choices are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>evdev</db:code> - a backend reading events directly from the evdev input device</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>sdl2</db:code> - a backend using the Gamepad module of SDL2. This plugin is only built when SDL2 is present at build time, and therefore will typically be missing from the pre-built Qt packages. This backend likely has broader support for various hardware, at the expense of an additional third-party dependency.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To force a given backend, set the <db:code>QT_GAMEPAD</db:code> environment variable to the name of the desired backend.</db:para>
<db:para>The availability of gamepad devices is monitored via <db:code>libudev</db:code>, assuming Qt was built with libudev support enabled. This means that connecting wired gamepads or wireless dongles is possible also while an application is running.</db:para>
<db:note>
<db:para>wireless dongles may report one or more input devices even when no actual controllers have been connected to them. Qt Gamepad will interpret this as having connected gamepads present.</db:para>
</db:note>
<db:para>With the <db:code>evdev</db:code> backend, to explicitly specify the input device to use, set the environment variable <db:code>QT_GAMEPAD_DEVICE</db:code> to the desired /dev/input/event* node. This should not be needed normally, but can be useful in case multiple gamepads are connected and only one of them is interesting to the application.</db:para>
</db:section>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>The Windows Plug-n-Play service automatically installs the necessary drivers when the gamepad is connected through a USB port for the first time. Once the drivers are installed, select <db:guilabel>Control Panel &gt; Device and Printers</db:guilabel> and check if the gamepad is listed under the <db:guilabel>Devices</db:guilabel> section.</db:para>
<db:para>To test whether gamepad input is detected, select <db:guilabel>Gamepad Controller Settings</db:guilabel> from the context menu, select <db:guilabel>Properties &gt; Test</db:guilabel>, and start testing. You can also run the <db:link xlink:href="qtgamepad-quickgamepad-example.xml">quickGamepad</db:link> example to test.</db:para>
</db:section>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:para>The Android backend uses the <db:code>InputDevice</db:code> API.</db:para>
</db:section>
<db:section xml:id="macos-ios-tvos">
<db:title>macOS, iOS, tvOS</db:title>
<db:para>This backend uses the <db:code>GCController</db:code> API.</db:para>
<db:para>Besides game controllers, it also supports the tvOS remote (microGamepad). The mapping for this is the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>X button</db:code> - play/pause</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>A button</db:code> - pressing the touch area</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>left thumbstick</db:code> - the touch area</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="troubleshooting">
<db:title>Troubleshooting</db:title>
<db:para>Some backends (<db:code>evdev</db:code> on Linux and <db:code>xinput</db:code> on Windows) and the plugin loader utilize the logging category <db:code>qt.gamepad</db:code>. Enabling this will print useful information on the debug output.</db:para>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>The <db:link xlink:href="qtgamepad-examples.xml">examples</db:link> demonstrate how to handle input from a gamepad using the QML and C++ APIs.</db:para>
</db:section>
<db:section xml:id="api-reference">
<db:title>API Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtgamepad-qmlmodule.xml">Qt Gamepad QML Types</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgamepad-module.xml">Qt Gamepad C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
