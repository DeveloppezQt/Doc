<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Test Reference Documentation</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>unit testing framework for QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para><db:link xlink:href="qttest-qmlmodule.xml">Qt Quick Test</db:link> is a unit test framework for QML applications. Test cases are written as JavaScript functions within a <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> type:</db:para>
<db:programlisting language="cpp">import QtQuick 2.3
import QtTest 1.0

TestCase {
    name: &quot;MathTests&quot;

    function test_math() {
        compare(2 + 2, 4, &quot;2 + 2 = 4&quot;)
    }

    function test_fail() {
        compare(2 + 2, 5, &quot;2 + 2 = 5&quot;)
    }
}
</db:programlisting>
<db:para>Functions whose names start with test_ are treated as test cases to be executed. See the documentation for the <db:link xlink:href="qml-qttest-testcase.xml">TestCase</db:link> and <db:link xlink:href="qml-qttest-signalspy.xml">SignalSpy</db:link> types for more information on writing test cases.</db:para>
</db:section>
<db:section xml:id="running-tests">
<db:title>Running Tests</db:title>
<db:para>Test cases are launched by a C++ harness that consists of the following code:</db:para>
<db:programlisting language="cpp">#include &lt;QtQuickTest/quicktest.h&gt;
QUICK_TEST_MAIN(example)
</db:programlisting>
<db:para>Where &quot;example&quot; is the identifier to use to uniquely identify this set of tests. You should add CONFIG += qmltestcase. for example:</db:para>
<db:programlisting language="cpp">TEMPLATE = app
TARGET = tst_example
CONFIG += warn_on qmltestcase
SOURCES += tst_example.cpp
</db:programlisting>
<db:para>The test harness scans the specified source directory recursively for &quot;tst_*.qml&quot; files. If QUICK_TEST_SOURCE_DIR is not defined, then the current directory will be scanned when the harness is run. Other *.qml files may appear for auxillary QML components that are used by the test.</db:para>
<db:para>The -input command-line option can be set at runtime to run test cases from a different directory. This may be needed to run tests on a target device where the compiled-in directory name refers to a host. For example:</db:para>
<db:programlisting language="cpp">tst_example -input /mnt/SDCard/qmltests
</db:programlisting>
<db:para>It is also possible to run a single file using the -input option. For example:</db:para>
<db:programlisting language="cpp">tst_example -input data/test.qml
</db:programlisting>
<db:programlisting language="cpp">tst_example -input &lt;full_path&gt;/test.qml
</db:programlisting>
<db:note>
<db:para>Specifying the full path to the qml test file is for example needed for shadow builds.</db:para>
</db:note>
<db:para>If your test case needs QML imports, then you can add them as -import options to the test program command-line.</db:para>
<db:para>If IMPORTPATH is specified in your .pro file, each import path added to IMPORTPATH will be passed as a command-line argument when the test is run using &quot;make check&quot;:</db:para>
<db:programlisting language="cpp">IMPORTPATH += $$PWD/../imports/my_module1 $$PWD/../imports/my_module2
</db:programlisting>
<db:para>The -functions command-line option will return a list of the current tests functions. It is possible to run a single test function using the name of the test function as an argument. For example:</db:para>
<db:programlisting language="cpp">tst_example Test_Name::function1
</db:programlisting>
<db:para>The -help command-line option will return all the options available.</db:para>
<db:programlisting language="cpp">tst_example -help
</db:programlisting>
</db:section>
</db:article>
