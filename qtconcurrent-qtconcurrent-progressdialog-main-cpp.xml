<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtConcurrent Progress Dialog Example</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to monitor the progress of the active processes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;
#include &amp;lt;QtConcurrent&amp;gt;

#include &amp;lt;functional&amp;gt;

using namespace QtConcurrent;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    const int iterations = 20;

    // Prepare the vector.
    QVector&amp;lt;int&amp;gt; vector;
    for (int i = 0; i &amp;lt; iterations; ++i)
        vector.append(i);

    // Create a progress dialog.
    QProgressDialog dialog;
    dialog.setLabelText(QString(&quot;Progressing using %1 thread(s)...&quot;).arg(QThread::idealThreadCount()));

    // Create a QFutureWatcher and connect signals and slots.
    QFutureWatcher&amp;lt;void&amp;gt; futureWatcher;
    QObject::connect(&amp;amp;futureWatcher, &amp;amp;QFutureWatcher&amp;lt;void&amp;gt;::finished, &amp;amp;dialog, &amp;amp;QProgressDialog::reset);
    QObject::connect(&amp;amp;dialog, &amp;amp;QProgressDialog::canceled, &amp;amp;futureWatcher, &amp;amp;QFutureWatcher&amp;lt;void&amp;gt;::cancel);
    QObject::connect(&amp;amp;futureWatcher,  &amp;amp;QFutureWatcher&amp;lt;void&amp;gt;::progressRangeChanged, &amp;amp;dialog, &amp;amp;QProgressDialog::setRange);
    QObject::connect(&amp;amp;futureWatcher, &amp;amp;QFutureWatcher&amp;lt;void&amp;gt;::progressValueChanged,  &amp;amp;dialog, &amp;amp;QProgressDialog::setValue);

    // Our function to compute
    std::function&amp;lt;void(int&amp;amp;)&amp;gt; spin = [](int &amp;amp;iteration) {
        const int work = 1000 * 1000 * 40;
        volatile int v = 0;
        for (int j = 0; j &amp;lt; work; ++j)
            ++v;

        qDebug() &amp;lt;&amp;lt; &quot;iteration&quot; &amp;lt;&amp;lt; iteration &amp;lt;&amp;lt; &quot;in thread&quot; &amp;lt;&amp;lt; QThread::currentThreadId();
    };

    // Start the computation.
    futureWatcher.setFuture(QtConcurrent::map(vector, spin));

    // Display the dialog and start the event loop.
    dialog.exec();

    futureWatcher.waitForFinished();

    // Query the future to check if was canceled.
    qDebug() &amp;lt;&amp;lt; &quot;Canceled?&quot; &amp;lt;&amp;lt; futureWatcher.future().isCanceled();
}

</db:programlisting>
</db:article>
