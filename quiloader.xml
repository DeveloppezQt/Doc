<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUiLoader Class</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class enables standalone applications to dynamically create user interfaces at run-time using the information stored in UI files or specified in plugin paths.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUiLoader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += uitools</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In addition, you can customize or create your own user interface by deriving your own loader class.</db:para>
<db:para>If you have a custom component or an application that embeds <db:emphasis>Qt Designer</db:emphasis>, you can also use the <db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link> class provided by the <db:link xlink:href="qtdesigner-module.xml">QtDesigner</db:link> module to create user interfaces from UI files.</db:para>
<db:para>The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class provides a collection of functions allowing you to create widgets based on the information stored in UI files (created with <db:emphasis>Qt Designer</db:emphasis>) or available in the specified plugin paths. The specified plugin paths can be retrieved using the <db:link xlink:href="quiloader.xml#pluginPaths">pluginPaths</db:link>() function. Similarly, the contents of a UI file can be retrieved using the <db:link xlink:href="quiloader.xml#load">load</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
{
    QUiLoader loader;
    QFile file(&quot;:/forms/myform.ui&quot;);
    file.open(QFile::ReadOnly);
    QWidget *myWidget = loader.load(&amp;file, this);
    file.close();

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addWidget(myWidget);
    setLayout(layout);
}
</db:programlisting>
<db:para>By including the user interface in the form's resources (<db:code>myform.qrc</db:code>), we ensure that it will be present at run-time:</db:para>
<db:programlisting language="cpp">&lt;!DOCTYPE RCC&gt;&lt;RCC version=&quot;1.0&quot;&gt;
&lt;qresource prefix=&quot;/forms&quot;&gt;
&lt;file&gt;myform.ui&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;

</db:programlisting>
<db:para>The <db:link xlink:href="quiloader.xml#availableWidgets">availableWidgets</db:link>() function returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link> with the class names of the widgets available in the specified plugin paths. To create these widgets, simply use the <db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">QWidget *loadCustomWidget(QWidget *parent)
{
    QUiLoader loader;
    QWidget *myWidget;

    QStringList availableWidgets = loader.availableWidgets();

    if (availableWidgets.contains(&quot;AnalogClock&quot;))
        myWidget = loader.createWidget(&quot;AnalogClock&quot;, parent);

    return myWidget;
}
</db:programlisting>
<db:para>To make a custom widget available to the loader, you can use the <db:link xlink:href="quiloader.xml#addPluginPath">addPluginPath</db:link>() function; to remove all available widgets, you can call the <db:link xlink:href="quiloader.xml#clearPluginPaths">clearPluginPaths</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="quiloader.xml#createAction">createAction</db:link>(), <db:link xlink:href="quiloader.xml#createActionGroup">createActionGroup</db:link>(), <db:link xlink:href="quiloader.xml#createLayout">createLayout</db:link>(), and <db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>() functions are used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it has to create an action, action group, layout, or widget respectively. For that reason, you can subclass the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class and reimplement these functions to intervene the process of constructing a user interface. For example, you might want to have a list of the actions created when loading a form or creating a custom widget.</db:para>
<db:para>For a complete example using the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class, see the <db:link xlink:href="qtdesigner-calculatorbuilder-example.xml">Calculator Builder Example</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtuitools-index.xml">Qt UI Tools</db:link></db:member>
<db:member><db:link xlink:href="qformbuilder.xml">QFormBuilder</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QUiLoader">
<db:title>[explicit] QUiLoader::QUiLoader(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a form loader with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QUiLoader">
<db:title>[virtual noexcept] QUiLoader::~QUiLoader()</db:title>
<db:para>Destroys the loader.</db:para>
</db:section>
<db:section xml:id="addPluginPath">
<db:title>void QUiLoader::addPluginPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">path</db:code> to the list of paths in which the loader will search when locating plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#pluginPaths">pluginPaths</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#clearPluginPaths">clearPluginPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableLayouts">
<db:title>[since 4.5] QStringList QUiLoader::availableLayouts() const</db:title>
<db:para>Returns a list naming all available layouts that can be built using the <db:link xlink:href="quiloader.xml#createLayout">createLayout</db:link>() function</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#createLayout">createLayout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableWidgets">
<db:title>QStringList QUiLoader::availableWidgets() const</db:title>
<db:para>Returns a list naming all available widgets that can be built using the <db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>() function, i.e all the widgets specified within the given plugin paths.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#pluginPaths">pluginPaths</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPluginPaths">
<db:title>void QUiLoader::clearPluginPaths()</db:title>
<db:para>Clears the list of paths in which the loader will search when locating plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#addPluginPath">addPluginPath</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#pluginPaths">pluginPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createAction">
<db:title>[virtual] QAction *QUiLoader::createAction(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:para>Creates a new action with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">name</db:code>.</db:para>
<db:para>The function is also used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it creates a widget. Hence, you can subclass <db:link xlink:href="quiloader.xml">QUiLoader</db:link> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:link xlink:href="quiloader.xml">QUiLoader</db:link>'s version first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#createActionGroup">createActionGroup</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createActionGroup">
<db:title>[virtual] QActionGroup *QUiLoader::createActionGroup(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:para>Creates a new action group with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">name</db:code>.</db:para>
<db:para>The function is also used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it creates a widget. Hence, you can subclass <db:link xlink:href="quiloader.xml">QUiLoader</db:link> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:link xlink:href="quiloader.xml">QUiLoader</db:link>'s version first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#createAction">createAction</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createLayout">
<db:title>[virtual] QLayout *QUiLoader::createLayout(const QString &amp;<db:emphasis>className</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:para>Creates a new layout with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">name</db:code> using the class specified by <db:code role="parameter">className</db:code>.</db:para>
<db:para>The function is also used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it creates a widget. Hence, you can subclass <db:link xlink:href="quiloader.xml">QUiLoader</db:link> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:link xlink:href="quiloader.xml">QUiLoader</db:link>'s version first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createWidget">
<db:title>[virtual] QWidget *QUiLoader::createWidget(const QString &amp;<db:emphasis>className</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR, const QString &amp;<db:emphasis>name</db:emphasis> = QString())</db:title>
<db:para>Creates a new widget with the given <db:code role="parameter">parent</db:code> and <db:code role="parameter">name</db:code> using the class specified by <db:code role="parameter">className</db:code>. You can use this function to create any of the widgets returned by the <db:link xlink:href="quiloader.xml#availableWidgets">availableWidgets</db:link>() function.</db:para>
<db:para>The function is also used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it creates a widget. Hence, you can subclass <db:link xlink:href="quiloader.xml">QUiLoader</db:link> and reimplement this function to intervene process of constructing a user interface or widget. However, in your implementation, ensure that you call <db:link xlink:href="quiloader.xml">QUiLoader</db:link>'s version first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#availableWidgets">availableWidgets</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[since 5.0] QString QUiLoader::errorString() const</db:title>
<db:para>Returns a human-readable description of the last error occurred in <db:link xlink:href="quiloader.xml#load">load</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLanguageChangeEnabled">
<db:title>[since 4.5] bool QUiLoader::isLanguageChangeEnabled() const</db:title>
<db:para>Returns true if dynamic retranslation on language change is enabled; returns false otherwise.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#setLanguageChangeEnabled">setLanguageChangeEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load">
<db:title>QWidget *QUiLoader::load(QIODevice *<db:emphasis>device</db:emphasis>, QWidget *<db:emphasis>parentWidget</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Loads a form from the given <db:code role="parameter">device</db:code> and creates a new widget with the given <db:code role="parameter">parentWidget</db:code> to hold its contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#createWidget">createWidget</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pluginPaths">
<db:title>QStringList QUiLoader::pluginPaths() const</db:title>
<db:para>Returns a list naming the paths in which the loader will search when locating custom widget plugins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#addPluginPath">addPluginPath</db:link>()</db:member>
<db:member><db:link xlink:href="quiloader.xml#clearPluginPaths">clearPluginPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLanguageChangeEnabled">
<db:title>[since 4.5] void QUiLoader::setLanguageChangeEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true, user interfaces loaded by this loader will automatically retranslate themselves upon receiving a language change event. Otherwise, the user interfaces will not be retranslated.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#isLanguageChangeEnabled">isLanguageChangeEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWorkingDirectory">
<db:title>void QUiLoader::setWorkingDirectory(const QDir &amp;<db:emphasis>dir</db:emphasis>)</db:title>
<db:para>Sets the working directory of the loader to <db:code role="parameter">dir</db:code>. The loader will look for other resources, such as icons and resource files, in paths relative to this directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#workingDirectory">workingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="workingDirectory">
<db:title>QDir QUiLoader::workingDirectory() const</db:title>
<db:para>Returns the working directory of the loader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="quiloader.xml#setWorkingDirectory">setWorkingDirectory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
