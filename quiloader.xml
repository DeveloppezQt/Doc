<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QUiLoader Class</db:title>
<db:productname>QtUiTools</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt UI Tools Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class enables standalone applications to dynamically create user interfaces at run-time using the information stored in UI files or specified in plugin paths.</db:para>
<db:para>This class was introduced in Qt 4.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QUiLoader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += uitools</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In addition, you can customize or create your own user interface by deriving your own loader class.</db:para>
<db:para>If you have a custom component or an application that embeds <db:emphasis>Qt Designer</db:emphasis>, you can also use the QFormBuilder class provided by the <db:link xlink:href="qtdesigner-module.xml">QtDesigner</db:link> module to create user interfaces from UI files.</db:para>
<db:para>The <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class provides a collection of functions allowing you to create widgets based on the information stored in UI files (created with <db:emphasis>Qt Designer</db:emphasis>) or available in the specified plugin paths. The specified plugin paths can be retrieved using the pluginPaths() function. Similarly, the contents of a UI file can be retrieved using the load() function. For example:</db:para>
<db:programlisting language="cpp">MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent)
{
    QUiLoader loader;
    QFile file(&quot;:/forms/myform.ui&quot;);
    file.open(QFile::ReadOnly);
    QWidget *myWidget = loader.load(&amp;amp;file, this);
    file.close();

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(myWidget);
    setLayout(layout);
}
</db:programlisting>
<db:para>By including the user interface in the form's resources (<db:code>myform.qrc</db:code>), we ensure that it will be present at run-time:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource prefix=&quot;/forms&quot;&amp;gt;
&amp;lt;file&amp;gt;myform.ui&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
<db:para>The availableWidgets() function returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link> with the class names of the widgets available in the specified plugin paths. To create these widgets, simply use the createWidget() function. For example:</db:para>
<db:programlisting language="cpp">QWidget *loadCustomWidget(QWidget *parent)
{
    QUiLoader loader;
    QWidget *myWidget;

    QStringList availableWidgets = loader.availableWidgets();

    if (availableWidgets.contains(&quot;AnalogClock&quot;))
        myWidget = loader.createWidget(&quot;AnalogClock&quot;, parent);

    return myWidget;
}
</db:programlisting>
<db:para>To make a custom widget available to the loader, you can use the addPluginPath() function; to remove all available widgets, you can call the clearPluginPaths() function.</db:para>
<db:para>The createAction(), createActionGroup(), createLayout(), and createWidget() functions are used internally by the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class whenever it has to create an action, action group, layout, or widget respectively. For that reason, you can subclass the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class and reimplement these functions to intervene the process of constructing a user interface. For example, you might want to have a list of the actions created when loading a form or creating a custom widget.</db:para>
<db:para>For a complete example using the <db:link xlink:href="quiloader.xml">QUiLoader</db:link> class, see the <db:link xlink:href="qtdesigner-calculatorbuilder-example.xml">Calculator Builder Example</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtuitools-index.xml">Qt UI Tools</db:link></db:member>
<db:member>QFormBuilder</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
