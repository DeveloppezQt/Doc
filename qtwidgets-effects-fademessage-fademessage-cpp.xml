<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Fade Message Effect Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to apply effects on items in the view.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;fademessage.h&quot;

#include &lt;QtWidgets&gt;

FadeMessage::FadeMessage(QWidget *parent): QGraphicsView(parent)
{
    setScene(&amp;m_scene);
    setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);

    setupScene();

    m_animation = new QPropertyAnimation(m_effect, &quot;strength&quot;, this);
    m_animation-&gt;setDuration(500);
    m_animation-&gt;setEasingCurve(QEasingCurve::InOutSine);
    m_animation-&gt;setStartValue(0);
    m_animation-&gt;setEndValue(1);

    setRenderHint(QPainter::Antialiasing, true);
    setFrameStyle(QFrame::NoFrame);
}

void FadeMessage::togglePopup()
{
    if (m_message-&gt;isVisible()) {
        m_message-&gt;setVisible(false);
        m_animation-&gt;setDirection(QAbstractAnimation::Backward);
    } else {
        m_message-&gt;setVisible(true);
        m_animation-&gt;setDirection(QAbstractAnimation::Forward);
    }
    m_animation-&gt;start();
}

void FadeMessage::setupScene()
{
    QGraphicsRectItem *parent = m_scene.addRect(0, 0, 800, 600);
    parent-&gt;setPen(Qt::NoPen);
    parent-&gt;setZValue(0);

    QGraphicsPixmapItem *bg = m_scene.addPixmap(QPixmap(&quot;:/background.jpg&quot;));
    bg-&gt;setParentItem(parent);
    bg-&gt;setZValue(-1);

    for (int i = 1; i &lt; 5; ++i)
        for (int j = 2; j &lt; 5; ++j) {
            QGraphicsRectItem *item = m_scene.addRect(i * 50, (j - 1) * 50, 38, 38);
            item-&gt;setParentItem(parent);
            item-&gt;setZValue(1);
            int hue = 12 * (i * 5 + j);
            item-&gt;setBrush(QColor::fromHsv(hue, 128, 128));
        }

    QFont font;
    font.setPointSize(font.pointSize() * 2);
    font.setBold(true);
    QFontMetrics fontMetrics(font);
    int fh = fontMetrics.height();

    QString sceneText = &quot;Qt Everywhere!&quot;;
    int sceneTextWidth = fontMetrics.width(sceneText);

    QGraphicsRectItem *block = m_scene.addRect(50, 300, sceneTextWidth, fh + 3);
    block-&gt;setPen(Qt::NoPen);
    block-&gt;setBrush(QColor(102, 153, 51));

    QGraphicsTextItem *text = m_scene.addText(sceneText, font);
    text-&gt;setDefaultTextColor(Qt::white);
    text-&gt;setPos(50, 300);
    block-&gt;setZValue(2);
    block-&gt;hide();

    text-&gt;setParentItem(block);
    m_message = block;

    m_effect = new QGraphicsColorizeEffect;
    m_effect-&gt;setColor(QColor(122, 193, 66));
    m_effect-&gt;setStrength(0);
    m_effect-&gt;setEnabled(true);
    parent-&gt;setGraphicsEffect(m_effect);

    QPushButton *press = new QPushButton;
    press-&gt;setText(tr(&quot;Press me&quot;));
    connect(press, SIGNAL(clicked()), SLOT(togglePopup()));
    m_scene.addWidget(press);

    press-&gt;move(300, 500);
}

</db:programlisting>
</db:article>
