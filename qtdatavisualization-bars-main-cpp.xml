<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bars Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Q3DBars in a widget application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;graphmodifier.h&quot;

#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QWidget&gt;
#include &lt;QtWidgets/QHBoxLayout&gt;
#include &lt;QtWidgets/QVBoxLayout&gt;
#include &lt;QtWidgets/QPushButton&gt;
#include &lt;QtWidgets/QCheckBox&gt;
#include &lt;QtWidgets/QSlider&gt;
#include &lt;QtWidgets/QFontComboBox&gt;
#include &lt;QtWidgets/QLabel&gt;
#include &lt;QtWidgets/QMessageBox&gt;
#include &lt;QtGui/QScreen&gt;
#include &lt;QtGui/QFontDatabase&gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DBars *widgetgraph = new Q3DBars();
    QWidget *container = QWidget::createWindowContainer(widgetgraph);

    if (!widgetgraph-&gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = widgetgraph-&gt;screen()-&gt;size();
    container-&gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.5));
    container-&gt;setMaximumSize(screenSize);
    container-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&gt;addWidget(container, 1);
    hLayout-&gt;addLayout(vLayout);

    widget-&gt;setWindowTitle(QStringLiteral(&quot;Average temperatures in Oulu and Helsinki, Finland (2006-2013)&quot;));

    QComboBox *themeList = new QComboBox(widget);
    themeList-&gt;addItem(QStringLiteral(&quot;Qt&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Primary Colors&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Digia&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Stone Moss&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Army Blue&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Retro&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Ebony&quot;));
    themeList-&gt;addItem(QStringLiteral(&quot;Isabelle&quot;));
    themeList-&gt;setCurrentIndex(0);

    QPushButton *labelButton = new QPushButton(widget);
    labelButton-&gt;setText(QStringLiteral(&quot;Change label style&quot;));

    QCheckBox *smoothCheckBox = new QCheckBox(widget);
    smoothCheckBox-&gt;setText(QStringLiteral(&quot;Smooth bars&quot;));
    smoothCheckBox-&gt;setChecked(false);

    QComboBox *barStyleList = new QComboBox(widget);
    barStyleList-&gt;addItem(QStringLiteral(&quot;Bar&quot;), int(QAbstract3DSeries::MeshBar));
    barStyleList-&gt;addItem(QStringLiteral(&quot;Pyramid&quot;), int(QAbstract3DSeries::MeshPyramid));
    barStyleList-&gt;addItem(QStringLiteral(&quot;Cone&quot;), int(QAbstract3DSeries::MeshCone));
    barStyleList-&gt;addItem(QStringLiteral(&quot;Cylinder&quot;), int(QAbstract3DSeries::MeshCylinder));
    barStyleList-&gt;addItem(QStringLiteral(&quot;Bevel bar&quot;), int(QAbstract3DSeries::MeshBevelBar));
    barStyleList-&gt;addItem(QStringLiteral(&quot;Sphere&quot;), int(QAbstract3DSeries::MeshSphere));
    barStyleList-&gt;setCurrentIndex(4);

    QPushButton *cameraButton = new QPushButton(widget);
    cameraButton-&gt;setText(QStringLiteral(&quot;Change camera preset&quot;));

    QPushButton *zoomToSelectedButton = new QPushButton(widget);
    zoomToSelectedButton-&gt;setText(QStringLiteral(&quot;Zoom to selected bar&quot;));

    QComboBox *selectionModeList = new QComboBox(widget);
    selectionModeList-&gt;addItem(QStringLiteral(&quot;None&quot;),
                               int(QAbstract3DGraph::SelectionNone));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Bar&quot;),
                               int(QAbstract3DGraph::SelectionItem));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Row&quot;),
                               int(QAbstract3DGraph::SelectionRow));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Bar and Row&quot;),
                               int(QAbstract3DGraph::SelectionItemAndRow));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Column&quot;),
                               int(QAbstract3DGraph::SelectionColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Bar and Column&quot;),
                               int(QAbstract3DGraph::SelectionItemAndColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Row and Column&quot;),
                               int(QAbstract3DGraph::SelectionRowAndColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Bar, Row and Column&quot;),
                               int(QAbstract3DGraph::SelectionItemRowAndColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Slice into Row&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionRow));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Slice into Row and Item&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionItemAndRow));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Slice into Column&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Slice into Column and Item&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionItemAndColumn));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Multi: Bar, Row, Col&quot;),
                               int(QAbstract3DGraph::SelectionItemRowAndColumn
                                   | QAbstract3DGraph::SelectionMultiSeries));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Multi, Slice: Row, Item&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionItemAndRow
                                   | QAbstract3DGraph::SelectionMultiSeries));
    selectionModeList-&gt;addItem(QStringLiteral(&quot;Multi, Slice: Col, Item&quot;),
                               int(QAbstract3DGraph::SelectionSlice | QAbstract3DGraph::SelectionItemAndColumn
                                   | QAbstract3DGraph::SelectionMultiSeries));
    selectionModeList-&gt;setCurrentIndex(1);

    QCheckBox *backgroundCheckBox = new QCheckBox(widget);
    backgroundCheckBox-&gt;setText(QStringLiteral(&quot;Show background&quot;));
    backgroundCheckBox-&gt;setChecked(false);

    QCheckBox *gridCheckBox = new QCheckBox(widget);
    gridCheckBox-&gt;setText(QStringLiteral(&quot;Show grid&quot;));
    gridCheckBox-&gt;setChecked(true);

    QCheckBox *seriesCheckBox = new QCheckBox(widget);
    seriesCheckBox-&gt;setText(QStringLiteral(&quot;Show second series&quot;));
    seriesCheckBox-&gt;setChecked(false);

    QCheckBox *reverseValueAxisCheckBox = new QCheckBox(widget);
    reverseValueAxisCheckBox-&gt;setText(QStringLiteral(&quot;Reverse value axis&quot;));
    reverseValueAxisCheckBox-&gt;setChecked(false);

    QCheckBox *reflectionCheckBox = new QCheckBox(widget);
    reflectionCheckBox-&gt;setText(QStringLiteral(&quot;Show reflections&quot;));
    reflectionCheckBox-&gt;setChecked(false);

    QSlider *rotationSliderX = new QSlider(Qt::Horizontal, widget);
    rotationSliderX-&gt;setTickInterval(30);
    rotationSliderX-&gt;setTickPosition(QSlider::TicksBelow);
    rotationSliderX-&gt;setMinimum(-180);
    rotationSliderX-&gt;setValue(0);
    rotationSliderX-&gt;setMaximum(180);
    QSlider *rotationSliderY = new QSlider(Qt::Horizontal, widget);
    rotationSliderY-&gt;setTickInterval(15);
    rotationSliderY-&gt;setTickPosition(QSlider::TicksAbove);
    rotationSliderY-&gt;setMinimum(-90);
    rotationSliderY-&gt;setValue(0);
    rotationSliderY-&gt;setMaximum(90);

    QSlider *fontSizeSlider = new QSlider(Qt::Horizontal, widget);
    fontSizeSlider-&gt;setTickInterval(10);
    fontSizeSlider-&gt;setTickPosition(QSlider::TicksBelow);
    fontSizeSlider-&gt;setMinimum(1);
    fontSizeSlider-&gt;setValue(30);
    fontSizeSlider-&gt;setMaximum(100);

    QFontComboBox *fontList = new QFontComboBox(widget);
    fontList-&gt;setCurrentFont(QFont(&quot;Times New Roman&quot;));

    QComboBox *shadowQuality = new QComboBox(widget);
    shadowQuality-&gt;addItem(QStringLiteral(&quot;None&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;Low&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;Medium&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;High&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;Low Soft&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;Medium Soft&quot;));
    shadowQuality-&gt;addItem(QStringLiteral(&quot;High Soft&quot;));
    shadowQuality-&gt;setCurrentIndex(5);

    QComboBox *rangeList = new QComboBox(widget);
    rangeList-&gt;addItem(QStringLiteral(&quot;2006&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2007&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2008&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2009&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2010&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2011&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2012&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;2013&quot;));
    rangeList-&gt;addItem(QStringLiteral(&quot;All&quot;));
    rangeList-&gt;setCurrentIndex(8);

    QCheckBox *axisTitlesVisibleCB = new QCheckBox(widget);
    axisTitlesVisibleCB-&gt;setText(QStringLiteral(&quot;Axis titles visible&quot;));
    axisTitlesVisibleCB-&gt;setChecked(true);

    QCheckBox *axisTitlesFixedCB = new QCheckBox(widget);
    axisTitlesFixedCB-&gt;setText(QStringLiteral(&quot;Axis titles fixed&quot;));
    axisTitlesFixedCB-&gt;setChecked(true);

    QSlider *axisLabelRotationSlider = new QSlider(Qt::Horizontal, widget);
    axisLabelRotationSlider-&gt;setTickInterval(10);
    axisLabelRotationSlider-&gt;setTickPosition(QSlider::TicksBelow);
    axisLabelRotationSlider-&gt;setMinimum(0);
    axisLabelRotationSlider-&gt;setValue(30);
    axisLabelRotationSlider-&gt;setMaximum(90);

    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Rotate horizontally&quot;)));
    vLayout-&gt;addWidget(rotationSliderX, 0, Qt::AlignTop);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Rotate vertically&quot;)));
    vLayout-&gt;addWidget(rotationSliderY, 0, Qt::AlignTop);
    vLayout-&gt;addWidget(labelButton, 0, Qt::AlignTop);
    vLayout-&gt;addWidget(cameraButton, 0, Qt::AlignTop);
    vLayout-&gt;addWidget(zoomToSelectedButton, 0, Qt::AlignTop);
    vLayout-&gt;addWidget(backgroundCheckBox);
    vLayout-&gt;addWidget(gridCheckBox);
    vLayout-&gt;addWidget(smoothCheckBox);
    vLayout-&gt;addWidget(reflectionCheckBox);
    vLayout-&gt;addWidget(seriesCheckBox);
    vLayout-&gt;addWidget(reverseValueAxisCheckBox);
    vLayout-&gt;addWidget(axisTitlesVisibleCB);
    vLayout-&gt;addWidget(axisTitlesFixedCB);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Show year&quot;)));
    vLayout-&gt;addWidget(rangeList);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Change bar style&quot;)));
    vLayout-&gt;addWidget(barStyleList);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Change selection mode&quot;)));
    vLayout-&gt;addWidget(selectionModeList);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Change theme&quot;)));
    vLayout-&gt;addWidget(themeList);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Adjust shadow quality&quot;)));
    vLayout-&gt;addWidget(shadowQuality);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Change font&quot;)));
    vLayout-&gt;addWidget(fontList);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Adjust font size&quot;)));
    vLayout-&gt;addWidget(fontSizeSlider);
    vLayout-&gt;addWidget(new QLabel(QStringLiteral(&quot;Axis label rotation&quot;)));
    vLayout-&gt;addWidget(axisLabelRotationSlider, 1, Qt::AlignTop);

    GraphModifier *modifier = new GraphModifier(widgetgraph);

    QObject::connect(rotationSliderX, &amp;QSlider::valueChanged, modifier, &amp;GraphModifier::rotateX);
    QObject::connect(rotationSliderY, &amp;QSlider::valueChanged, modifier, &amp;GraphModifier::rotateY);

    QObject::connect(labelButton, &amp;QPushButton::clicked, modifier,
                     &amp;GraphModifier::changeLabelBackground);
    QObject::connect(cameraButton, &amp;QPushButton::clicked, modifier,
                     &amp;GraphModifier::changePresetCamera);
    QObject::connect(zoomToSelectedButton, &amp;QPushButton::clicked, modifier,
                     &amp;GraphModifier::zoomToSelectedBar);

    QObject::connect(backgroundCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setBackgroundEnabled);
    QObject::connect(gridCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setGridEnabled);
    QObject::connect(smoothCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setSmoothBars);
    QObject::connect(seriesCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setSeriesVisibility);
    QObject::connect(reverseValueAxisCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setReverseValueAxis);
    QObject::connect(reflectionCheckBox, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setReflection);

    QObject::connect(modifier, &amp;GraphModifier::backgroundEnabledChanged,
                     backgroundCheckBox, &amp;QCheckBox::setChecked);
    QObject::connect(modifier, &amp;GraphModifier::gridEnabledChanged,
                     gridCheckBox, &amp;QCheckBox::setChecked);

    QObject::connect(rangeList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeRange(int)));

    QObject::connect(barStyleList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeStyle(int)));

    QObject::connect(selectionModeList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeSelectionMode(int)));

    QObject::connect(themeList, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeTheme(int)));

    QObject::connect(shadowQuality, SIGNAL(currentIndexChanged(int)), modifier,
                     SLOT(changeShadowQuality(int)));

    QObject::connect(modifier, &amp;GraphModifier::shadowQualityChanged, shadowQuality,
                     &amp;QComboBox::setCurrentIndex);
    QObject::connect(widgetgraph, &amp;Q3DBars::shadowQualityChanged, modifier,
                     &amp;GraphModifier::shadowQualityUpdatedByVisual);

    QObject::connect(fontSizeSlider, &amp;QSlider::valueChanged, modifier,
                     &amp;GraphModifier::changeFontSize);
    QObject::connect(fontList, &amp;QFontComboBox::currentFontChanged, modifier,
                     &amp;GraphModifier::changeFont);

    QObject::connect(modifier, &amp;GraphModifier::fontSizeChanged, fontSizeSlider,
                     &amp;QSlider::setValue);
    QObject::connect(modifier, &amp;GraphModifier::fontChanged, fontList,
                     &amp;QFontComboBox::setCurrentFont);

    QObject::connect(axisTitlesVisibleCB, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setAxisTitleVisibility);
    QObject::connect(axisTitlesFixedCB, &amp;QCheckBox::stateChanged, modifier,
                     &amp;GraphModifier::setAxisTitleFixed);
    QObject::connect(axisLabelRotationSlider, &amp;QSlider::valueChanged, modifier,
                     &amp;GraphModifier::changeLabelRotation);
    widget-&gt;show();
    return app.exec();
}

</db:programlisting>
</db:article>
