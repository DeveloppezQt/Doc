<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using SocketCAN Backend</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of how to use the SocketCAN backend.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The SocketCAN backend encapsulates the Linux sockets API for accessing the CAN devices. This API is a set of open source CAN drivers and a networking stack contributed by Volkswagen Research to the Linux kernel.</db:para>
<db:section xml:id="creating-can-bus-devices">
<db:title>Creating CAN Bus Devices</db:title>
<db:para>At first it is necessary to check that <db:link xlink:href="qcanbus.xml">QCanBus</db:link> provides the desired backend:</db:para>
<db:programlisting language="cpp">foreach (const QByteArray &amp;backend, QCanBus::instance()-&gt;plugins()) {
    if (backend == &quot;socketcan&quot;) {
        // were found
        break;
    }
}
</db:programlisting>
<db:para>Where <db:emphasis>socketcan</db:emphasis> is the backend name.</db:para>
<db:para>Next, a connection to a specific interface can be established:</db:para>
<db:programlisting language="cpp">QCanBusDevice *device = QCanBus::instance()-&gt;createDevice(&quot;socketcan&quot;, QStringLiteral(&quot;can0&quot;));
device-&gt;connectDevice();
</db:programlisting>
<db:para>Where <db:emphasis>can0</db:emphasis> is the active CAN interface name. CAN interfaces act like regular network interfaces on Linux systems and can be discovered using <db:code>ifconfig</db:code>.</db:para>
<db:para>The device is now open for writing and reading CAN frames:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame;
frame.setFrameId(8);
QByteArray payload(&quot;A36E&quot;);
frame.setPayload(payload);
device-&gt;writeFrame(frame);
</db:programlisting>
<db:para>The reading can be done using the <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() method. The <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal is emitted when a new frame is available for reading:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame = device-&gt;readFrame();
</db:programlisting>
<db:para>SocketCAN supports the following configurations that can be controlled through <db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">setConfigurationParameter</db:link>():</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Configuration parameter key</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::LoopbackKey</db:link></db:para>
</db:td>
<db:td>
<db:para>To meet the multiple-user needs, the local loopback is enabled by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::ReceiveOwnKey</db:link></db:para>
</db:td>
<db:td>
<db:para>The reception of the CAN frames on the same socket that was sending the CAN frame is disabled by default.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::ErrorFilterKey</db:link></db:para>
</db:td>
<db:td>
<db:para>A CAN interface driver can generate so called <db:emphasis>Error Message Frames</db:emphasis> that can optionally be passed to the user application in the same way as other CAN frames. The possible errors are divided into different error classes that may be filtered using the appropriate error mask. The values for the error mask are defined in <db:code>linux/can/error.h</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::RawFilterKey</db:link></db:para>
</db:td>
<db:td>
<db:para>This configuration can contain multiple filters of type <db:link xlink:href="qcanbusdevice-filter.xml">QCanBusDevice::Filter</db:link>. By default, the connection is configured to accept any CAN bus message.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::BitRateKey</db:link></db:para>
</db:td>
<db:td>
<db:para>This configuration is not supported by the socketcan backend. However it is possible to set the rate when configuring the CAN network interface using the <db:code>ip link</db:code> command.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::CanFdKey</db:link></db:para>
</db:td>
<db:td>
<db:para>This configuration option determines whether CANFD frames may be sent or received. By default, this option is disabled. It controls controls the CAN_RAW_FD_FRAMES option of the CAN socket.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QList&lt;QCanBusDevice::Filter&gt; list;
QCanBusDevice::Filter f;

// only accept odd numbered frame id of type remote request
// frame can utilize extended or base format
f.frameId = 0x1;
f.frameIdMask = 0x1;
f.format = QCanBusDevice::Filter::MatchBaseAndExtendedFormat;
f.type = QCanBusFrame::RemoteRequestFrame;
list.append(f);

device-&gt;setConfigurationParameter(QCanBusDevice::RawFilterKey, QVariant::fromValue(list));
device-&gt;setConfigurationParameter(QCanBusDevice::ErrorFilterKey,
                                  QVariant::fromValue(QCanBusFrame::FrameErrors(QCanBusFrame::AnyError)));
</db:programlisting>
<db:para>Extended frame format and flexible data-rate are supported in SocketCAN.</db:para>
</db:section>
</db:article>
