<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Getting Started</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-overview.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Overview"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-project-files.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Creating Project Files"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This tutorial teaches you the basics of qmake. The other topics in this manual contain more detailed information about using qmake.</db:para>
<db:section xml:id="starting-off-simple">
<db:title>Starting Off Simple</db:title>
<db:para>Let's assume that you have just finished a basic implementation of your application, and you have created the following files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>hello.cpp</db:para>
</db:listitem>
<db:listitem>
<db:para>hello.h</db:para>
</db:listitem>
<db:listitem>
<db:para>main.cpp</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You will find these files in the <db:code>examples/qmake/tutorial</db:code> directory of the Qt distribution. The only other thing you know about the setup of the application is that it's written in Qt. First, using your favorite plain text editor, create a file called <db:code>hello.pro</db:code> in <db:code>examples/qmake/tutorial</db:code>. The first thing you need to do is add the lines that tell qmake about the source and header files that are part of your development project.</db:para>
<db:para>We'll add the source files to the project file first. To do this you need to use the <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link> variable. Just start a new line with <db:code>SOURCES +=</db:code> and put hello.cpp after it. You should have something like this:</db:para>
<db:programlisting language="cpp">SOURCES += hello.cpp
</db:programlisting>
<db:para>We repeat this for each source file in the project, until we end up with the following:</db:para>
<db:programlisting language="cpp">SOURCES += hello.cpp
SOURCES += main.cpp
</db:programlisting>
<db:para>If you prefer to use a Make-like syntax, with all the files listed in one go you can use the newline escaping like this:</db:para>
<db:programlisting language="cpp">SOURCES = hello.cpp \
          main.cpp
</db:programlisting>
<db:para>Now that the source files are listed in the project file, the header files must be added. These are added in exactly the same way as source files, except that the variable name we use is <db:link xlink:href="qmake-variable-reference.xml#headers">HEADERS</db:link>.</db:para>
<db:para>Once you have done this, your project file should look something like this:</db:para>
<db:programlisting language="cpp">HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
</db:programlisting>
<db:para>The target name is set automatically. It is the same as the project filename, but with the suffix appropriate for the platform. For example, if the project file is called <db:code>hello.pro</db:code>, the target will be <db:code>hello.exe</db:code> on Windows and <db:code>hello</db:code> on Unix. If you want to use a different name you can set it in the project file:</db:para>
<db:programlisting language="cpp">TARGET = helloworld
</db:programlisting>
<db:para>The finished project file should look like this:</db:para>
<db:programlisting language="cpp">HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
</db:programlisting>
<db:para>You can now use qmake to generate a Makefile for your application. On the command line, in your project directory, type the following:</db:para>
<db:programlisting language="cpp">qmake -o Makefile hello.pro
</db:programlisting>
<db:para>Then type <db:code>make</db:code> or <db:code>nmake</db:code> depending on the compiler you use.</db:para>
<db:para>For Visual Studio users, qmake can also generate Visual Studio project files. For example:</db:para>
<db:programlisting language="cpp">qmake -tp vc hello.pro
</db:programlisting>
</db:section>
<db:section xml:id="making-an-application-debuggable">
<db:title>Making an Application Debuggable</db:title>
<db:para>The release version of an application does not contain any debugging symbols or other debugging information. During development, it is useful to produce a debugging version of the application that has the relevant information. This is easily achieved by adding <db:code>debug</db:code> to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable in the project file.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">CONFIG += debug
HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
</db:programlisting>
<db:para>Use qmake as before to generate a Makefile. You will now obtain useful information about your application when running it in a debugging environment.</db:para>
</db:section>
<db:section xml:id="adding-platform-specific-source-files">
<db:title>Adding Platform-Specific Source Files</db:title>
<db:para>After a few hours of coding, you might have made a start on the platform-specific part of your application, and decided to keep the platform-dependent code separate. So you now have two new files to include into your project file: <db:code>hellowin.cpp</db:code> and <db:code>hellounix.cpp</db:code>. We cannot just add these to the <db:code>SOURCES</db:code> variable since that would place both files in the Makefile. So, what we need to do here is to use a scope which will be processed depending on which platform we are building for.</db:para>
<db:para>A simple scope that adds the platform-dependent file for Windows looks like this:</db:para>
<db:programlisting language="cpp">win32 {
    SOURCES += hellowin.cpp
}
</db:programlisting>
<db:para>When building for Windows, qmake adds <db:code>hellowin.cpp</db:code> to the list of source files. When building for any other platform, qmake simply ignores it. Now all that is left to be done is to create a scope for the Unix-specific file.</db:para>
<db:para>When you have done that, your project file should look something like this:</db:para>
<db:programlisting language="cpp">CONFIG += debug
HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
win32 {
    SOURCES += hellowin.cpp
}
unix {
    SOURCES += hellounix.cpp
}
</db:programlisting>
<db:para>Use qmake as before to generate a Makefile.</db:para>
</db:section>
<db:section xml:id="stopping-qmake-if-a-file-does-not-exist">
<db:title>Stopping qmake If a File Does Not Exist</db:title>
<db:para>You may not want to create a Makefile if a certain file does not exist. We can check if a file exists by using the <db:link xlink:href="qmake-test-function-reference.xml#exists-filename">exists()</db:link> function. We can stop qmake from processing by using the <db:link xlink:href="qmake-test-function-reference.xml#error-string">error()</db:link> function. This works in the same way as scopes do. Simply replace the scope condition with the function. A check for a file called main.cpp looks like this:</db:para>
<db:programlisting language="cpp">!exists( main.cpp ) {
    error( &quot;No main.cpp file found&quot; )
}
</db:programlisting>
<db:para>The <db:code>!</db:code> symbol is used to negate the test. That is, <db:code>exists( main.cpp )</db:code> is true if the file exists, and <db:code>!exists( main.cpp )</db:code> is true if the file does not exist.</db:para>
<db:programlisting language="cpp">CONFIG += debug
HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
win32 {
    SOURCES += hellowin.cpp
}
unix {
    SOURCES += hellounix.cpp
}
!exists( main.cpp ) {
    error( &quot;No main.cpp file found&quot; )
}
</db:programlisting>
<db:para>Use qmake as before to generate a makefile. If you rename <db:code>main.cpp</db:code> temporarily, you will see the message and qmake will stop processing.</db:para>
</db:section>
<db:section xml:id="checking-for-more-than-one-condition">
<db:title>Checking for More than One Condition</db:title>
<db:para>Suppose you use Windows and you want to be able to see statement output with <db:code>qDebug()</db:code> when you run your application on the command line. To see the output, you must build your application with the appropriate console setting. We can easily put <db:code>console</db:code> on the <db:code>CONFIG</db:code> line to include this setting in the Makefile on Windows. However, let's say that we only want to add the <db:code>CONFIG</db:code> line when we are running on Windows <db:emphasis>and</db:emphasis> when <db:code>debug</db:code> is already on the <db:code>CONFIG</db:code> line. This requires using two nested scopes. First create one scope, then create the other inside it. Put the settings to be processed inside the second scope, like this:</db:para>
<db:programlisting language="cpp">win32 {
    debug {
        CONFIG += console
    }
}
</db:programlisting>
<db:para>Nested scopes can be joined together using colons, so the final project file looks like this:</db:para>
<db:programlisting language="cpp">CONFIG += debug
HEADERS += hello.h
SOURCES += hello.cpp
SOURCES += main.cpp
win32 {
    SOURCES += hellowin.cpp
}
unix {
    SOURCES += hellounix.cpp
}
!exists( main.cpp ) {
    error( &quot;No main.cpp file found&quot; )
}
win32:debug {
    CONFIG += console
}
</db:programlisting>
<db:para>That's it! You have now completed the tutorial for qmake, and are ready to write project files for your development projects.</db:para>
</db:section>
</db:article>
