<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Dynamic View Ordering Tutorial 3 - Moving Dragged Items</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-dynamicview-dynamicview2-example.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Dynamic View Ordering Tutorial 2 - Dragging View Items"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-dynamicview-dynamicview4-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Dynamic View Ordering Tutorial 4 - Sorting Items"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QML Dynamic View Ordering Tutorial</db:para>
<db:para>The next step in our application to move items within the list as they're dragged so that we can re-order the list. To achieve this we introduce three new types to our application; <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>, <db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link> and <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link>.</db:para>
<db:programlisting language="qml">Rectangle {
    id: root

    width: 300; height: 400

    Component {
        id: dragDelegate

        MouseArea {
            id: dragArea

            property bool held: false

            anchors { left: parent.left; right: parent.right }
            height: content.height

            drag.target: held ? content : undefined
            drag.axis: Drag.YAxis

            onPressAndHold: held = true
            onReleased: held = false

            Rectangle {
                id: content
                Drag.active: dragArea.held
                Drag.source: dragArea
                Drag.hotSpot.x: width / 2
                Drag.hotSpot.y: height / 2
            }
            DropArea {
                anchors { fill: parent; margins: 10 }

                onEntered: {
                    visualModel.items.move(
                            drag.source.DelegateModel.itemsIndex,
                            dragArea.DelegateModel.itemsIndex)
                }
            }
        }
    }
}
</db:programlisting>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:para>In order to re-order the view we need to determine when one item has been dragged over another. With the Drag attached property we can generate events that are sent to the scene graph whenever the item it is attached to moves.</db:para>
<db:programlisting language="qml">                Drag.active: dragArea.held
                Drag.source: dragArea
                Drag.hotSpot.x: width / 2
                Drag.hotSpot.y: height / 2
</db:programlisting>
<db:para>Drag events are only sent while the active property is true, so in this example the first event would be sent when the delegate was held with additional event sents when dragging. The <db:link xlink:href="qml-qtquick-drag.xml#hotSpot-attached-prop">hotSpot</db:link> property specifies the relative position of the drag events within the dragged item, the center of the item in this instance.</db:para>
<db:para>Then we use a <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link> in each view item to determine when the hot spot of the dragged item intersects another item, when a drag enters one of these DropAreas we can move the dragged item to the index of the item it was dragged over.</db:para>
<db:programlisting language="qml">            DropArea {
                anchors { fill: parent; margins: 10 }

                onEntered: {
                    visualModel.items.move(
                            drag.source.DelegateModel.itemsIndex,
                            dragArea.DelegateModel.itemsIndex)
                }
            }
</db:programlisting>
<db:para>To move the items within the view we use a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>. The <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> type is used by the view types to instantiate delegate items from model data and when constructed explicitly can be used to filter and re-order the model items provided to <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>. The <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#items-prop">items</db:link> property of <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> provides access to the view's items and allows us to change the visible order without modifying the source model. To determine the current visible index of the items we use <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#itemsIndex-attached-prop">itemsIndex</db:link> {itemsIndex} property on the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> attached property of the delegate item.</db:para>
<db:para>To utilize a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> with a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> we bind it to the <db:link xlink:href="qml-qtquick-listview.xml#model-prop">model</db:link> property of the view and bind the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#model-attached-prop">model</db:link> and <db:link xlink:href="qml-qtqml-models-delegatemodel.xml#delegate-prop">delegate</db:link> to the <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>.</db:para>
<db:programlisting language="qml">    DelegateModel {
        id: visualModel

        model: PetsModel {}
        delegate: dragDelegate
    }

    ListView {
        id: view

        anchors { fill: parent; margins: 2 }

        model: visualModel

        spacing: 4
        cacheBuffer: 50
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview3/PetsModel.qml">tutorials/dynamicview/dynamicview3/PetsModel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview3/dynamicview.qml">tutorials/dynamicview/dynamicview3/dynamicview.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview3/dynamicview3.qmlproject">tutorials/dynamicview/dynamicview3/dynamicview3.qmlproject</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
