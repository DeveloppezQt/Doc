<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Implicit Sharing</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Reference counting for fast copying.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Many C++ classes in Qt use implicit data sharing to maximize resource usage and minimize copying. Implicitly shared classes are both safe and efficient when passed as arguments, because only a pointer to the data is passed around, and the data is copied only if and when a function writes to it, i.e., <db:emphasis>copy-on-write</db:emphasis>.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>A shared class consists of a pointer to a shared data block that contains a reference count and the data.</db:para>
<db:para>When a shared object is created, it sets the reference count to 1. The reference count is incremented whenever a new object references the shared data, and decremented when the object dereferences the shared data. The shared data is deleted when the reference count becomes zero.</db:para>
<db:anchor xml:id="deep-copy"/>
<db:anchor xml:id="shallow-copy"/>
<db:para>When dealing with shared objects, there are two ways of copying an object. We usually speak about <db:emphasis>deep</db:emphasis> and <db:emphasis>shallow</db:emphasis> copies. A deep copy implies duplicating an object. A shallow copy is a reference copy, i.e. just a pointer to a shared data block. Making a deep copy can be expensive in terms of memory and CPU. Making a shallow copy is very fast, because it only involves setting a pointer and incrementing the reference count.</db:para>
<db:para>Object assignment (with operator=()) for implicitly shared objects is implemented using shallow copies.</db:para>
<db:para>The benefit of sharing is that a program does not need to duplicate data unnecessarily, which results in lower memory use and less copying of data. Objects can easily be assigned, sent as function arguments, and returned from functions.</db:para>
<db:para>Implicit sharing mostly takes place behind the scenes; the programmer rarely needs to worry about it. However, Qt's container iterators have different behavior than those from the STL. Read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
<db:para>In multithreaded applications, implicit sharing takes place, as explained in <db:link xlink:href="threads-modules.xml#threads-and-implicitly-shared-classes">Threads and Implicitly Shared Classes</db:link>.</db:para>
<db:para>When implementing your own implicitly shared classes, use the <db:link xlink:href="qshareddata.xml">QSharedData</db:link> and <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> classes.</db:para>
</db:section>
<db:section xml:id="implicit-sharing-in-detail">
<db:title>Implicit Sharing in Detail</db:title>
<db:para>Implicit sharing automatically detaches the object from a shared block if the object is about to change and the reference count is greater than one. (This is often called <db:emphasis>copy-on-write</db:emphasis> or <db:emphasis>value semantics</db:emphasis>.)</db:para>
<db:para>An implicitly shared class has control of its internal data. In any member functions that modify its data, it automatically detaches before modifying the data. Notice, however, the special case with container iterators; see <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
<db:para>The <db:link xlink:href="qpen.xml">QPen</db:link> class, which uses implicit sharing, detaches from the shared data in all member functions that change the internal data.</db:para>
<db:para>Code fragment:</db:para>
<db:programlisting language="cpp">void QPen::setStyle(Qt::PenStyle style)
{
    detach();           // detach from common data
    d-&amp;gt;style = style;   // set the style member
}

void QPen::detach()
{
    if (d-&amp;gt;ref != 1) {
        ...             // perform a deep copy
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="list-of-classes">
<db:title>List of Classes</db:title>
<db:para>The classes listed below automatically detach from common data if an object is about to be changed. The programmer will not even notice that the objects are shared. Thus you should treat separate instances of them as separate objects. They will always behave as separate objects but with the added benefit of sharing data whenever possible. For this reason, you can pass instances of these classes as arguments to functions by value without concern for the copying overhead.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QPixmap p1, p2;
p1.load(&quot;image.bmp&quot;);
p2 = p1;                        // p1 and p2 share data

QPainter paint;
paint.begin(&amp;amp;p2);               // cuts p2 loose from p1
paint.drawText(0,50, &quot;Hi&quot;);
paint.end();
</db:programlisting>
<db:para>In this example, p1 and p2 share data until <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() is called for p2, because painting a pixmap will modify it.</db:para>
<db:warning>
<db:para>Be careful with copying an implicitly shared container (<db:link xlink:href="qmap.xml">QMap</db:link>, <db:link xlink:href="qvector.xml">QVector</db:link>, etc.) while you use <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link>. See <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:anchor xml:id="implicitly-shared-classes"/>
<db:variablelist role="shared">
<db:varlistentry>
<db:term><db:link xlink:href="qbitarray.xml" xlink:role="class">QBitArray</db:link></db:term>
<db:listitem>
<db:para>The QBitArray class provides an array of bits.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearray.xml" xlink:role="class">QByteArray</db:link></db:term>
<db:listitem>
<db:para>The QByteArray class provides an array of bytes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearraylist.xml" xlink:role="class">QByteArrayList</db:link></db:term>
<db:listitem>
<db:para>The QByteArrayList class provides a list of byte arrays.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcache.xml" xlink:role="class">QCache</db:link></db:term>
<db:listitem>
<db:para>The QCache class is a template class that provides a cache.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollator.xml" xlink:role="class">QCollator</db:link></db:term>
<db:listitem>
<db:para>The QCollator class compares strings according to a localized collation algorithm.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollatorsortkey.xml" xlink:role="class">QCollatorSortKey</db:link></db:term>
<db:listitem>
<db:para>The QCollatorSortKey class can be used to speed up string collation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcommandlineoption.xml" xlink:role="class">QCommandLineOption</db:link></db:term>
<db:listitem>
<db:para>The QCommandLineOption class defines a possible command-line option.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcontiguouscache.xml" xlink:role="class">QContiguousCache</db:link></db:term>
<db:listitem>
<db:para>The QContiguousCache class is a template class that provides a contiguous cache.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdatetime.xml" xlink:role="class">QDateTime</db:link></db:term>
<db:listitem>
<db:para>The QDateTime class provides date and time functions.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdebug.xml" xlink:role="class">QDebug</db:link></db:term>
<db:listitem>
<db:para>The QDebug class provides an output stream for debugging information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qdir.xml" xlink:role="class">QDir</db:link></db:term>
<db:listitem>
<db:para>The QDir class provides access to directory structures and their contents.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfileinfo.xml" xlink:role="class">QFileInfo</db:link></db:term>
<db:listitem>
<db:para>The QFileInfo class provides system-independent file information.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qhash.xml" xlink:role="class">QHash</db:link></db:term>
<db:listitem>
<db:para>The QHash class is a template class that provides a hash-table-based dictionary.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonarray.xml" xlink:role="class">QJsonArray</db:link></db:term>
<db:listitem>
<db:para>The QJsonArray class encapsulates a JSON array.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsondocument.xml" xlink:role="class">QJsonDocument</db:link></db:term>
<db:listitem>
<db:para>The QJsonDocument class provides a way to read and write JSON documents.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonobject.xml" xlink:role="class">QJsonObject</db:link></db:term>
<db:listitem>
<db:para>The QJsonObject class encapsulates a JSON object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonparseerror.xml" xlink:role="class">QJsonParseError</db:link></db:term>
<db:listitem>
<db:para>The QJsonParseError class is used to report errors during JSON parsing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qjsonvalue.xml" xlink:role="class">QJsonValue</db:link></db:term>
<db:listitem>
<db:para>The QJsonValue class encapsulates a value in JSON.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlinkedlist.xml" xlink:role="class">QLinkedList</db:link></db:term>
<db:listitem>
<db:para>The QLinkedList class is a template class that provides linked lists.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:term>
<db:listitem>
<db:para>The QList class is a template class that provides lists.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocale.xml" xlink:role="class">QLocale</db:link></db:term>
<db:listitem>
<db:para>The QLocale class converts between numbers and their string representations in various languages.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmap.xml" xlink:role="class">QMap</db:link></db:term>
<db:listitem>
<db:para>The QMap class is a template class that provides a red-black-tree-based dictionary.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmimetype.xml" xlink:role="class">QMimeType</db:link></db:term>
<db:listitem>
<db:para>The QMimeType class describes types of file or data, represented by a MIME type string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmultihash.xml" xlink:role="class">QMultiHash</db:link></db:term>
<db:listitem>
<db:para>The QMultiHash class is a convenience QHash subclass that provides multi-valued hashes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmultimap.xml" xlink:role="class">QMultiMap</db:link></db:term>
<db:listitem>
<db:para>The QMultiMap class is a convenience QMap subclass that provides multi-valued maps.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qpersistentmodelindex.xml" xlink:role="class">QPersistentModelIndex</db:link></db:term>
<db:listitem>
<db:para>The QPersistentModelIndex class is used to locate data in a data model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qprocessenvironment.xml" xlink:role="class">QProcessEnvironment</db:link></db:term>
<db:listitem>
<db:para>The QProcessEnvironment class holds the environment variables that can be passed to a program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qqueue.xml" xlink:role="class">QQueue</db:link></db:term>
<db:listitem>
<db:para>The QQueue class is a generic container that provides a queue.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qregexp.xml" xlink:role="class">QRegExp</db:link></db:term>
<db:listitem>
<db:para>The QRegExp class provides pattern matching using regular expressions.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qregularexpression.xml" xlink:role="class">QRegularExpression</db:link></db:term>
<db:listitem>
<db:para>The QRegularExpression class provides pattern matching using regular expressions.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qregularexpressionmatch.xml" xlink:role="class">QRegularExpressionMatch</db:link></db:term>
<db:listitem>
<db:para>The QRegularExpressionMatch class provides the results of a matching a QRegularExpression against a string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qregularexpressionmatchiterator.xml" xlink:role="class">QRegularExpressionMatchIterator</db:link></db:term>
<db:listitem>
<db:para>The QRegularExpressionMatchIterator class provides an iterator on the results of a global match of a QRegularExpression object against a string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qset.xml" xlink:role="class">QSet</db:link></db:term>
<db:listitem>
<db:para>The QSet class is a template class that provides a hash-table-based set.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstack.xml" xlink:role="class">QStack</db:link></db:term>
<db:listitem>
<db:para>The QStack class is a template class that provides a stack.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstorageinfo.xml" xlink:role="class">QStorageInfo</db:link></db:term>
<db:listitem>
<db:para>Provides information about currently mounted storage and drives.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstring.xml" xlink:role="class">QString</db:link></db:term>
<db:listitem>
<db:para>The QString class provides a Unicode character string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringlist.xml" xlink:role="class">QStringList</db:link></db:term>
<db:listitem>
<db:para>The QStringList class provides a list of strings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextboundaryfinder.xml" xlink:role="class">QTextBoundaryFinder</db:link></db:term>
<db:listitem>
<db:para>The QTextBoundaryFinder class provides a way of finding Unicode text boundaries in a string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qurl.xml" xlink:role="class">QUrl</db:link></db:term>
<db:listitem>
<db:para>The QUrl class provides a convenient interface for working with URLs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qurlquery.xml" xlink:role="class">QUrlQuery</db:link></db:term>
<db:listitem>
<db:para>The QUrlQuery class provides a way to manipulate a key-value pairs in a URL's query.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvariant.xml" xlink:role="class">QVariant</db:link></db:term>
<db:listitem>
<db:para>The QVariant class acts like a union for the most common Qt data types.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvector.xml" xlink:role="class">QVector</db:link></db:term>
<db:listitem>
<db:para>The QVector class is a template class that provides a dynamic array.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
