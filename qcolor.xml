<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QColor Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcolor.xml">QColor</db:link> class provides colors based on RGB, HSV or CMYK values.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QColor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QColor is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>appearance</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A color is normally specified in terms of RGB (red, green, and blue) components, but it is also possible to specify it in terms of HSV (hue, saturation, and value) and CMYK (cyan, magenta, yellow and black) components. In addition a color can be specified using a color name. The color name can be any of the SVG 1.0 color names.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>RGB</db:para>
</db:th>
<db:th>
<db:para>HSV</db:para>
</db:th>
<db:th>
<db:para>CMYK</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-rgb.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-hsv.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-cmyk.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qcolor.xml">QColor</db:link> constructor creates the color based on RGB values. To create a <db:link xlink:href="qcolor.xml">QColor</db:link> based on either HSV or CMYK values, use the <db:link xlink:href="qcolor.xml#toHsv">toHsv</db:link>() and <db:link xlink:href="qcolor.xml#toCmyk">toCmyk</db:link>() functions respectively. These functions return a copy of the color using the desired format. In addition the static <db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>(), <db:link xlink:href="qcolor.xml#fromHsv">fromHsv</db:link>() and <db:link xlink:href="qcolor.xml#fromCmyk">fromCmyk</db:link>() functions create colors from the specified values. Alternatively, a color can be converted to any of the three formats using the <db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>() function (returning a copy of the color in the desired format), or any of the <db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>(), <db:link xlink:href="qcolor.xml#setHsv">setHsv</db:link>() and <db:link xlink:href="qcolor.xml#setCmyk">setCmyk</db:link>() functions altering <db:emphasis>this</db:emphasis> color's format. The <db:link xlink:href="qcolor.xml#spec">spec</db:link>() function tells how the color was specified.</db:para>
<db:para>A color can be set by passing an RGB string (such as &quot;#112233&quot;), or an ARGB string (such as &quot;#ff112233&quot;) or a color name (such as &quot;blue&quot;), to the <db:link xlink:href="qcolor.xml#fromString">fromString</db:link>() function. The color names are taken from the SVG 1.0 color names. The <db:link xlink:href="qcolor.xml#name">name</db:link>() function returns the name of the color in the format &quot;#RRGGBB&quot;. Colors can also be set using <db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>(), <db:link xlink:href="qcolor.xml#setHsv">setHsv</db:link>() and <db:link xlink:href="qcolor.xml#setCmyk">setCmyk</db:link>(). To get a lighter or darker color use the <db:link xlink:href="qcolor.xml#lighter">lighter</db:link>() and <db:link xlink:href="qcolor.xml#darker">darker</db:link>() functions respectively.</db:para>
<db:para>The <db:link xlink:href="qcolor.xml#isValid">isValid</db:link>() function indicates whether a <db:link xlink:href="qcolor.xml">QColor</db:link> is legal at all. For example, a RGB color with RGB values out of range is illegal. For performance reasons, <db:link xlink:href="qcolor.xml">QColor</db:link> mostly disregards illegal colors, and for that reason, the result of using an invalid color is undefined.</db:para>
<db:para>The color components can be retrieved individually, e.g with <db:link xlink:href="qcolor.xml#red">red</db:link>(), <db:link xlink:href="qcolor.xml#hue">hue</db:link>() and <db:link xlink:href="qcolor.xml#cyan">cyan</db:link>(). The values of the color components can also be retrieved in one go using the <db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>(), <db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>() and <db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>() functions. Using the RGB color model, the color components can in addition be accessed with <db:link xlink:href="qcolor.xml#rgb">rgb</db:link>().</db:para>
<db:para>There are several related non-members: <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> is a typdef for an unsigned int representing the RGB value triplet (r, g, b). Note that it also can hold a value for the alpha-channel (for more information, see the <db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link> section). The <db:link xlink:href="qcolor.xml#qRed">qRed</db:link>(), <db:link xlink:href="qcolor.xml#qBlue">qBlue</db:link>() and <db:link xlink:href="qcolor.xml#qGreen">qGreen</db:link>() functions return the respective component of the given <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> value, while the <db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>() and <db:link xlink:href="qcolor.xml#qRgba">qRgba</db:link>() functions create and return the <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> triplet based on the given component values. Finally, the <db:link xlink:href="qcolor.xml#qAlpha">qAlpha</db:link>() function returns the alpha component of the provided <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link>, and the <db:link xlink:href="qcolor.xml#qGray">qGray</db:link>() function calculates and return a gray value based on the given value.</db:para>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> is platform and device independent. The <db:link xlink:href="qcolormap.xml">QColormap</db:link> class maps the color to the hardware.</db:para>
<db:para>For more information about painting in general, see the <db:link xlink:href="paintsystem.xml">Paint System</db:link> documentation.</db:para>
<db:section xml:id="integer-vs-floating-point-precision">
<db:title>Integer vs. Floating Point Precision</db:title>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> supports floating point precision and provides floating point versions of all the color components functions, e.g. <db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>(), <db:link xlink:href="qcolor.xml#hueF">hueF</db:link>() and <db:link xlink:href="qcolor.xml#fromCmykF">fromCmykF</db:link>(). Note that since the components are stored using 16-bit integers, there might be minor deviations between the values set using, for example, <db:link xlink:href="qcolor.xml#setRgbF">setRgbF</db:link>() and the values returned by the <db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>() function due to rounding.</db:para>
<db:para>While the integer based functions take values in the range 0-255 (except <db:link xlink:href="qcolor.xml#hue">hue</db:link>() which must have values within the range 0-359), the floating point functions accept values in the range 0.0 - 1.0.</db:para>
</db:section>
<db:section xml:id="alpha-blended-drawing">
<db:title>Alpha-Blended Drawing</db:title>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link> also support alpha-blended outlining and filling. The alpha channel of a color specifies the transparency effect, 0 represents a fully transparent color, while 255 represents a fully opaque color. For example:</db:para>
<db:programlisting language="cpp">// Specify semi-transparent red
painter.setBrush(QColor(255, 0, 0, 127));
painter.drawRect(0, 0, width() / 2, height());

// Specify semi-transparent blue
painter.setBrush(QColor(0, 0, 255, 127));
painter.drawRect(0, 0, width(), height() / 2);
</db:programlisting>
<db:para>The code above produces the following output:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/alphafill.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The alpha channel of a color can be retrieved and set using the <db:link xlink:href="qcolor.xml#alpha">alpha</db:link>() and <db:link xlink:href="qcolor.xml#setAlpha">setAlpha</db:link>() functions if its value is an integer, and <db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>() and <db:link xlink:href="qcolor.xml#setAlphaF">setAlphaF</db:link>() if its value is float. By default, the alpha-channel is set to 255 (opaque). To retrieve and set <db:emphasis>all</db:emphasis> the RGB color components (including the alpha-channel) in one go, use the <db:link xlink:href="qcolor.xml#rgba">rgba</db:link>() and <db:link xlink:href="qcolor.xml#setRgba">setRgba</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="predefined-colors">
<db:title>Predefined Colors</db:title>
<db:para>There are 20 predefined <db:link xlink:href="qcolor.xml">QColor</db:link> objects in the <db:code>QColorConstants</db:code> namespace, including black, white, primary and secondary colors, darker versions of these colors, and three shades of gray. Furthermore, the <db:code>QColorConstants::Svg</db:code> namespace defines <db:link xlink:href="qcolor.xml">QColor</db:link> objects for the standard <db:link xlink:href="https://www.w3.org/TR/SVG11/types.html#ColorKeywords">SVG color keyword names</db:link>.</db:para>
<db:mediaobject>
<db:alt>Qt Colors</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qt-colors.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>QColorConstants::Color0</db:code>, <db:code>QColorConstants::Color1</db:code> and <db:code>QColorConstants::Transparent</db:code> colors are used for special purposes.</db:para>
<db:para><db:code>QColorConstants::Color0</db:code> (zero pixel value) and <db:code>QColorConstants::Color1</db:code> (non-zero pixel value) are special colors for drawing in QBitmaps. Painting with <db:code>QColorConstants::Color0</db:code> sets the bitmap bits to 0 (transparent; i.e., background), and painting with c{QColorConstants::Color1} sets the bits to 1 (opaque; i.e., foreground).</db:para>
<db:para><db:code>QColorConstants::Transparent</db:code> is used to indicate a transparent pixel. When painting with this value, a pixel value will be used that is appropriate for the underlying pixel format in use.</db:para>
<db:para>For historical reasons, the 20 predefined colors are also available in the <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link> enumeration.</db:para>
<db:para>Finally, <db:link xlink:href="qcolor.xml">QColor</db:link> recognizes a variety of color names (as strings); the static <db:link xlink:href="qcolor.xml#colorNames">colorNames</db:link>() function returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link> color names that <db:link xlink:href="qcolor.xml">QColor</db:link> knows about.</db:para>
</db:section>
<db:section xml:id="the-extended-rgb-color-model">
<db:title>The Extended RGB Color Model</db:title>
<db:para>The extended RGB color model, also known as the scRGB color space, is the same the RGB color model except it allows values under 0.0, and over 1.0. This makes it possible to represent colors that would otherwise be outside the range of the RGB colorspace but still use the same values for colors inside the RGB colorspace.</db:para>
</db:section>
<db:section xml:id="the-hsv-color-model">
<db:title>The HSV Color Model</db:title>
<db:para>The RGB model is hardware-oriented. Its representation is close to what most monitors show. In contrast, HSV represents color in a way more suited to the human perception of color. For example, the relationships &quot;stronger than&quot;, &quot;darker than&quot;, and &quot;the opposite of&quot; are easily expressed in HSV but are much harder to express in RGB.</db:para>
<db:para>HSV, like RGB, has three components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>H, for hue, is in the range 0 to 359 if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0 (degrees), green is 120, and blue is 240.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-hue.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:listitem>
<db:listitem>
<db:para>S, for saturation, is in the range 0 to 255, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 255.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-saturation.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:listitem>
<db:listitem>
<db:para>V, for value, is in the range 0 to 255 and represents lightness or brightness of the color. 0 is black; 255 is as far from black as possible.</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qcolor-value.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Here are some examples: pure red is H=0, S=255, V=255; a dark red, moving slightly towards the magenta, could be H=350 (equivalent to -10), S=255, V=180; a grayish light red could have H about 0 (say 350-359 or 0-10), S about 50-100, and S=255.</db:para>
<db:para>Qt returns a hue value of -1 for achromatic colors. If you pass a hue value that is too large, Qt forces it into range. Hue 360 or 720 is treated as 0; hue 540 is treated as 180.</db:para>
<db:para>In addition to the standard HSV model, Qt provides an alpha-channel to feature <db:link xlink:href="qcolor.xml#alpha-blended-drawing">alpha-blended drawing</db:link>.</db:para>
</db:section>
<db:section xml:id="the-hsl-color-model">
<db:title>The HSL Color Model</db:title>
<db:para>HSL is similar to HSV, however instead of the Value parameter, HSL specifies a Lightness parameter which maps somewhat differently to the brightness of the color.</db:para>
<db:para>Similarly, the HSL saturation value is not in general the same as the HSV saturation value for the same color. <db:link xlink:href="qcolor.xml#hslSaturation">hslSaturation</db:link>() provides the color's HSL saturation value, while <db:link xlink:href="qcolor.xml#saturation">saturation</db:link>() and <db:link xlink:href="qcolor.xml#hsvSaturation">hsvSaturation</db:link>() provides the HSV saturation value.</db:para>
<db:para>The hue value is defined to be the same in HSL and HSV.</db:para>
</db:section>
<db:section xml:id="the-cmyk-color-model">
<db:title>The CMYK Color Model</db:title>
<db:para>While the RGB and HSV color models are used for display on computer monitors, the CMYK model is used in the four-color printing process of printing presses and some hard-copy devices.</db:para>
<db:para>CMYK has four components, all in the range 0-255: cyan (C), magenta (M), yellow (Y) and black (K). Cyan, magenta and yellow are called subtractive colors; the CMYK color model creates color by starting with a white surface and then subtracting color by applying the appropriate components. While combining cyan, magenta and yellow gives the color black, subtracting one or more will yield any other color. When combined in various percentages, these three colors can create the entire spectrum of colors.</db:para>
<db:para>Mixing 100 percent of cyan, magenta and yellow <db:emphasis>does</db:emphasis> produce black, but the result is unsatisfactory since it wastes ink, increases drying time, and gives a muddy colour when printing. For that reason, black is added in professional printing to provide a solid black tone; hence the term 'four color process'.</db:para>
<db:para>In addition to the standard CMYK model, Qt provides an alpha-channel to feature <db:link xlink:href="qcolor.xml#alpha-blended-drawing">alpha-blended drawing</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpalette.xml">QPalette</db:link></db:member>
<db:member><db:link xlink:href="qbrush.xml">QBrush</db:link></db:member>
<db:member><db:link xlink:href="qcolorconstants.xml">QColorConstants</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="NameFormat-enum">
<db:title>enum QColor::NameFormat</db:title>
<db:enumsynopsis>
<db:enumname>NameFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>HexRgb</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HexArgb</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>How to format the output of the <db:link xlink:href="qcolor.xml#name">name</db:link>() function</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::HexRgb</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>#RRGGBB A &quot;#&quot; character followed by three two-digit hexadecimal numbers (i.e. <db:code>#RRGGBB</db:code>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::HexArgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>#AARRGGBB A &quot;#&quot; character followed by four two-digit hexadecimal numbers (i.e. <db:code>#AARRGGBB</db:code>).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Spec-enum">
<db:title>enum QColor::Spec</db:title>
<db:enumsynopsis>
<db:enumname>Spec</db:enumname>
<db:enumitem>
<db:enumidentifier>Invalid</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Rgb</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Hsv</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cmyk</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Hsl</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExtendedRgb</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The type of color specified, either RGB, extended RGB, HSV, CMYK or HSL.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::Rgb</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::Hsv</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::Cmyk</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::Hsl</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::ExtendedRgb</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcolor.xml">QColor</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#spec">spec</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QColor">
<db:title>[constexpr] QColor::QColor()</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid color with the RGB value (0, 0, 0). An invalid color is a color that is not properly set up for the underlying window system.</db:para>
<db:para>The alpha value of an invalid color is unspecified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-1">
<db:title>QColor::QColor(Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a new color with a color value of <db:code role="parameter">color</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#predefined-colors">Predefined Colors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-2">
<db:title>[constexpr] QColor::QColor(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(int r, int g, int b, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a color with the RGB value <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>, and the alpha-channel (transparency) value of <db:code role="parameter">a</db:code>.</db:para>
<db:para>The color is left invalid if any of the arguments are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRgba">setRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-3">
<db:title>QColor::QColor(QRgb <db:emphasis>color</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(QRgb color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a color with the value <db:code role="parameter">color</db:code>. The alpha component is ignored and set to solid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-4">
<db:title>[since 5.6] QColor::QColor(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a color with the value <db:code role="parameter">rgba64</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgba64">fromRgba64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-5">
<db:title>QColor::QColor(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a named color in the same way as setNamedColor() using the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>The color is left invalid if the <db:code role="parameter">name</db:code> cannot be parsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setNamedColor" role="deprecated">setNamedColor</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-7">
<db:title>QColor::QColor(const char *<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(const char *name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a named color in the same way as setNamedColor() using the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setNamedColor" role="deprecated">setNamedColor</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QColor-8">
<db:title>[since 5.8] QColor::QColor(QLatin1StringView <db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QColor</db:methodname>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor(QLatin1StringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a named color in the same way as setNamedColor() using the given <db:code role="parameter">name</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setNamedColor" role="deprecated">setNamedColor</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alpha">
<db:title>int QColor::alpha() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>alpha</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int alpha() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alpha color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setAlpha">setAlpha</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alphaF">
<db:title>float QColor::alphaF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>alphaF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float alphaF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alpha color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setAlphaF">setAlphaF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha">alpha</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="black">
<db:title>int QColor::black() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>black</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int black() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the black color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#blackF">blackF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blackF">
<db:title>float QColor::blackF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>blackF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float blackF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the black color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#black">black</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmykF">getCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blue">
<db:title>int QColor::blue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>blue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int blue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the blue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setBlue">setBlue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blueF">blueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="blueF">
<db:title>float QColor::blueF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>blueF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float blueF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the blue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setBlueF">setBlueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blue">blue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="colorNames">
<db:title>[static] QStringList QColor::colorNames()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>colorNames</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList colorNames()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link> containing the color names Qt knows about.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#predefined-colors">Predefined Colors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="convertTo">
<db:title>QColor QColor::convertTo(QColor::Spec <db:emphasis>colorSpec</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>convertTo</db:methodname>
<db:methodparam>
<db:type>QColor::Spec</db:type>
<db:parameter>colorSpec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor convertTo(QColor::Spec colorSpec) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a copy of <db:emphasis>this</db:emphasis> color in the format specified by <db:code role="parameter">colorSpec</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#spec">spec</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toCmyk">toCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toHsv">toHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cyan">
<db:title>int QColor::cyan() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>cyan</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int cyan() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cyan color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#cyanF">cyanF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cyanF">
<db:title>float QColor::cyanF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>cyanF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float cyanF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cyan color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#cyan">cyan</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmykF">getCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="darker">
<db:title>QColor QColor::darker(int <db:emphasis>factor</db:emphasis> = 200) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>darker</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>factor</db:parameter>
<db:initializer>200</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor darker(int factor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a darker (or lighter) color, but does not change this object.</db:para>
<db:para>If the <db:code role="parameter">factor</db:code> is greater than 100, this functions returns a darker color. Setting <db:code role="parameter">factor</db:code> to 300 returns a color that has one-third the brightness. If the <db:code role="parameter">factor</db:code> is less than 100, the return color is lighter, but we recommend using the <db:link xlink:href="qcolor.xml#lighter">lighter</db:link>() function for this purpose. If the <db:code role="parameter">factor</db:code> is 0 or negative, the return value is unspecified.</db:para>
<db:para>The function converts the current color to HSV, divides the value (V) component by <db:code role="parameter">factor</db:code> and converts the color back to it's original color spec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#lighter">lighter</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCmyk">
<db:title>[static] QColor QColor::fromCmyk(int <db:emphasis>c</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>k</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromCmyk</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromCmyk(int c, int m, int y, int k, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the given CMYK color values: <db:code role="parameter">c</db:code> (cyan), <db:code role="parameter">m</db:code> (magenta), <db:code role="parameter">y</db:code> (yellow), <db:code role="parameter">k</db:code> (black), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toCmyk">toCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromCmykF">fromCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCmykF">
<db:title>[static] QColor QColor::fromCmykF(float <db:emphasis>c</db:emphasis>, float <db:emphasis>m</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>k</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromCmykF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromCmykF(float c, float m, float y, float k, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the given CMYK color values: <db:code role="parameter">c</db:code> (cyan), <db:code role="parameter">m</db:code> (magenta), <db:code role="parameter">y</db:code> (yellow), <db:code role="parameter">k</db:code> (black), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toCmyk">toCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromCmyk">fromCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHsl">
<db:title>[static] QColor QColor::fromHsl(int <db:emphasis>h</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>l</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromHsl</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromHsl(int h, int s, int l, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the HSV color values, <db:code role="parameter">h</db:code> (hue), <db:code role="parameter">s</db:code> (saturation), <db:code role="parameter">l</db:code> (lightness), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>The value of <db:code role="parameter">s</db:code>, <db:code role="parameter">l</db:code>, and <db:code role="parameter">a</db:code> must all be in the range 0-255; the value of <db:code role="parameter">h</db:code> must be in the range 0-359.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toHsl">toHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromHslF">fromHslF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHslF">
<db:title>[static] QColor QColor::fromHslF(float <db:emphasis>h</db:emphasis>, float <db:emphasis>s</db:emphasis>, float <db:emphasis>l</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromHslF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromHslF(float h, float s, float l, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the HSV color values, <db:code role="parameter">h</db:code> (hue), <db:code role="parameter">s</db:code> (saturation), <db:code role="parameter">l</db:code> (lightness), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toHsl">toHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromHsl">fromHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHsv">
<db:title>[static] QColor QColor::fromHsv(int <db:emphasis>h</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>v</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromHsv</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromHsv(int h, int s, int v, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the HSV color values, <db:code role="parameter">h</db:code> (hue), <db:code role="parameter">s</db:code> (saturation), <db:code role="parameter">v</db:code> (value), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>The value of <db:code role="parameter">s</db:code>, <db:code role="parameter">v</db:code>, and <db:code role="parameter">a</db:code> must all be in the range 0-255; the value of <db:code role="parameter">h</db:code> must be in the range 0-359.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toHsv">toHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromHsvF">fromHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHsvF">
<db:title>[static] QColor QColor::fromHsvF(float <db:emphasis>h</db:emphasis>, float <db:emphasis>s</db:emphasis>, float <db:emphasis>v</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromHsvF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromHsvF(float h, float s, float v, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the HSV color values, <db:code role="parameter">h</db:code> (hue), <db:code role="parameter">s</db:code> (saturation), <db:code role="parameter">v</db:code> (value), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toHsv">toHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromHsv">fromHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgb">
<db:title>[static] QColor QColor::fromRgb(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgb</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgb(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the given <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> value <db:code role="parameter">rgb</db:code>.</db:para>
<db:para>The alpha component of <db:code role="parameter">rgb</db:code> is ignored (i.e. it is automatically set to 255), use the <db:link xlink:href="qcolor.xml#fromRgba">fromRgba</db:link>() function to include the alpha-channel specified by the given <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgba">fromRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgbF">fromRgbF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgb-1">
<db:title>[static] QColor QColor::fromRgb(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgb</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgb(int r, int g, int b, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the RGB color values, <db:code role="parameter">r</db:code> (red), <db:code role="parameter">g</db:code> (green), <db:code role="parameter">b</db:code> (blue), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgba64">fromRgba64</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgbF">fromRgbF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgba64">
<db:title>[static, since 5.6] QColor QColor::fromRgba64(ushort <db:emphasis>r</db:emphasis>, ushort <db:emphasis>g</db:emphasis>, ushort <db:emphasis>b</db:emphasis>, ushort <db:emphasis>a</db:emphasis> = USHRT_MAX)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgba64</db:methodname>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>ushort</db:type>
<db:parameter>a</db:parameter>
<db:initializer>USHRT_MAX</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgba64(ushort r, ushort g, ushort b, ushort a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the RGBA64 color values, <db:code role="parameter">r</db:code> (red), <db:code role="parameter">g</db:code> (green), <db:code role="parameter">b</db:code> (blue), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgbF">fromRgbF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgba64-1">
<db:title>[static, since 5.6] QColor QColor::fromRgba64(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgba64</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgba64(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the given <db:link xlink:href="qrgba64.xml">QRgba64</db:link> value <db:code role="parameter">rgba64</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgbF">fromRgbF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgbF">
<db:title>[static] QColor QColor::fromRgbF(float <db:emphasis>r</db:emphasis>, float <db:emphasis>g</db:emphasis>, float <db:emphasis>b</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgbF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgbF(float r, float g, float b, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the RGB color values, <db:code role="parameter">r</db:code> (red), <db:code role="parameter">g</db:code> (green), <db:code role="parameter">b</db:code> (blue), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>The alpha value must be in the range 0.0-1.0. If any of the other values are outside the range of 0.0-1.0 the color model will be set as <db:code>ExtendedRgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgba64">fromRgba64</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRgba">
<db:title>[static] QColor QColor::fromRgba(QRgb <db:emphasis>rgba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromRgba</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromRgba(QRgb rgba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Static convenience function that returns a <db:link xlink:href="qcolor.xml">QColor</db:link> constructed from the given <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> value <db:code role="parameter">rgba</db:code>.</db:para>
<db:para>Unlike the <db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>() function, the alpha-channel specified by the given <db:link xlink:href="qcolor.xml#QRgb-typedef">QRgb</db:link> value is included.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#fromRgba64">fromRgba64</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static, since 6.4] QColor QColor::fromString(QAnyStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QColor</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor fromString(QAnyStringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an RGB <db:link xlink:href="qcolor.xml">QColor</db:link> parsed from <db:code role="parameter">name</db:code>, which may be in one of these formats:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>#RGB (each of R, G, and B is a single hex digit)</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRGGBB</db:para>
</db:listitem>
<db:listitem>
<db:para>#AARRGGBB (Since 5.2)</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRRGGGBBB</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRRRGGGGBBBB</db:para>
</db:listitem>
<db:listitem>
<db:para>A name from the list of colors defined in the list of <db:link xlink:href="https://www.w3.org/TR/SVG11/types.html#ColorKeywords">SVG color keyword names</db:link> provided by the World Wide Web Consortium; for example, &quot;steelblue&quot; or &quot;gainsboro&quot;. These color names work on all platforms. Note that these color names are <db:emphasis>not</db:emphasis> the same as defined by the <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link> enums, e.g. &quot;green&quot; and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::green</db:link> does not refer to the same color.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>transparent</db:code> - representing the absence of a color.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns an invalid color if <db:code role="parameter">name</db:code> cannot be parsed.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#isValidColorName">isValidColorName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getCmyk">
<db:title>void QColor::getCmyk(int *<db:emphasis>c</db:emphasis>, int *<db:emphasis>m</db:emphasis>, int *<db:emphasis>y</db:emphasis>, int *<db:emphasis>k</db:emphasis>, int *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getCmyk</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getCmyk(int *c, int *m, int *y, int *k, int *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">c</db:code>, <db:code role="parameter">m</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">k</db:code>, and <db:code role="parameter">a</db:code>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#cyan">cyan</db:link>(), <db:link xlink:href="qcolor.xml#magenta">magenta</db:link>(), <db:link xlink:href="qcolor.xml#yellow">yellow</db:link>(), <db:link xlink:href="qcolor.xml#black">black</db:link>() and <db:link xlink:href="qcolor.xml#alpha">alpha</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setCmyk">setCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getCmykF">
<db:title>void QColor::getCmykF(float *<db:emphasis>c</db:emphasis>, float *<db:emphasis>m</db:emphasis>, float *<db:emphasis>y</db:emphasis>, float *<db:emphasis>k</db:emphasis>, float *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getCmykF</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getCmykF(float *c, float *m, float *y, float *k, float *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">c</db:code>, <db:code role="parameter">m</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">k</db:code>, and <db:code role="parameter">a</db:code>, to the cyan, magenta, yellow, black, and alpha-channel (transparency) components of the color's CMYK value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#cyanF">cyanF</db:link>(), <db:link xlink:href="qcolor.xml#magentaF">magentaF</db:link>(), <db:link xlink:href="qcolor.xml#yellowF">yellowF</db:link>(), <db:link xlink:href="qcolor.xml#blackF">blackF</db:link>() and <db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setCmykF">setCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getHsl">
<db:title>void QColor::getHsl(int *<db:emphasis>h</db:emphasis>, int *<db:emphasis>s</db:emphasis>, int *<db:emphasis>l</db:emphasis>, int *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getHsl</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getHsl(int *h, int *s, int *l, int *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">h</db:code>, <db:code role="parameter">s</db:code>, <db:code role="parameter">l</db:code>, and <db:code role="parameter">a</db:code>, to the hue, saturation, lightness, and alpha-channel (transparency) components of the color's HSL value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#hslHue">hslHue</db:link>(), <db:link xlink:href="qcolor.xml#hslSaturation">hslSaturation</db:link>(), <db:link xlink:href="qcolor.xml#lightness">lightness</db:link>() and <db:link xlink:href="qcolor.xml#alpha">alpha</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHslF">getHslF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHsl">setHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getHslF">
<db:title>void QColor::getHslF(float *<db:emphasis>h</db:emphasis>, float *<db:emphasis>s</db:emphasis>, float *<db:emphasis>l</db:emphasis>, float *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getHslF</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getHslF(float *h, float *s, float *l, float *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">h</db:code>, <db:code role="parameter">s</db:code>, <db:code role="parameter">l</db:code>, and <db:code role="parameter">a</db:code>, to the hue, saturation, lightness, and alpha-channel (transparency) components of the color's HSL value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#hslHueF">hslHueF</db:link>(), <db:link xlink:href="qcolor.xml#hslSaturationF">hslSaturationF</db:link>(), <db:link xlink:href="qcolor.xml#lightnessF">lightnessF</db:link>() and <db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHsl">getHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHslF">setHslF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getHsv">
<db:title>void QColor::getHsv(int *<db:emphasis>h</db:emphasis>, int *<db:emphasis>s</db:emphasis>, int *<db:emphasis>v</db:emphasis>, int *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getHsv</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getHsv(int *h, int *s, int *v, int *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">h</db:code>, <db:code role="parameter">s</db:code>, <db:code role="parameter">v</db:code>, and <db:code role="parameter">a</db:code>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#hue">hue</db:link>(), <db:link xlink:href="qcolor.xml#saturation">saturation</db:link>(), <db:link xlink:href="qcolor.xml#value">value</db:link>() and <db:link xlink:href="qcolor.xml#alpha">alpha</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setHsv">setHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getHsvF">
<db:title>void QColor::getHsvF(float *<db:emphasis>h</db:emphasis>, float *<db:emphasis>s</db:emphasis>, float *<db:emphasis>v</db:emphasis>, float *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getHsvF</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getHsvF(float *h, float *s, float *v, float *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">h</db:code>, <db:code role="parameter">s</db:code>, <db:code role="parameter">v</db:code>, and <db:code role="parameter">a</db:code>, to the hue, saturation, value, and alpha-channel (transparency) components of the color's HSV value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#hueF">hueF</db:link>(), <db:link xlink:href="qcolor.xml#saturationF">saturationF</db:link>(), <db:link xlink:href="qcolor.xml#valueF">valueF</db:link>() and <db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setHsv">setHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getRgb">
<db:title>void QColor::getRgb(int *<db:emphasis>r</db:emphasis>, int *<db:emphasis>g</db:emphasis>, int *<db:emphasis>b</db:emphasis>, int *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getRgb</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getRgb(int *r, int *g, int *b, int *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>, and <db:code role="parameter">a</db:code>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#red">red</db:link>(), <db:link xlink:href="qcolor.xml#green">green</db:link>(), <db:link xlink:href="qcolor.xml#blue">blue</db:link>() and <db:link xlink:href="qcolor.xml#alpha">alpha</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getRgbF">
<db:title>void QColor::getRgbF(float *<db:emphasis>r</db:emphasis>, float *<db:emphasis>g</db:emphasis>, float *<db:emphasis>b</db:emphasis>, float *<db:emphasis>a</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>getRgbF</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>a</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void getRgbF(float *r, float *g, float *b, float *a) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents pointed to by <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>, and <db:code role="parameter">a</db:code>, to the red, green, blue, and alpha-channel (transparency) components of the color's RGB value.</db:para>
<db:para>These components can be retrieved individually using the <db:link xlink:href="qcolor.xml#redF">redF</db:link>(), <db:link xlink:href="qcolor.xml#greenF">greenF</db:link>(), <db:link xlink:href="qcolor.xml#blueF">blueF</db:link>() and <db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>() functions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="green">
<db:title>int QColor::green() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>green</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int green() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the green color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setGreen">setGreen</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#greenF">greenF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="greenF">
<db:title>float QColor::greenF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>greenF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float greenF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the green color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setGreenF">setGreenF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#green">green</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hslHue">
<db:title>int QColor::hslHue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hslHue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hslHue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSL hue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hslHueF">hslHueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hsvHue">hsvHue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsl">getHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hslHueF">
<db:title>float QColor::hslHueF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>hslHueF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float hslHueF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSL hue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hslHue">hslHue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hsvHueF">hsvHueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHslF">getHslF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hslSaturation">
<db:title>int QColor::hslSaturation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hslSaturation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hslSaturation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSL saturation color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hslSaturationF">hslSaturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hsvSaturation">hsvSaturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsl">getHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hslSaturationF">
<db:title>float QColor::hslSaturationF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>hslSaturationF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float hslSaturationF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSL saturation color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hslSaturation">hslSaturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hsvSaturationF">hsvSaturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHslF">getHslF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hsvHue">
<db:title>int QColor::hsvHue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hsvHue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hsvHue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV hue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hueF">hueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslHue">hslHue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hsvHueF">
<db:title>float QColor::hsvHueF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>hsvHueF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float hsvHueF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hue color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hue">hue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslHueF">hslHueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hsvSaturation">
<db:title>int QColor::hsvSaturation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hsvSaturation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hsvSaturation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV saturation color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#saturationF">saturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslSaturation">hslSaturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hsvSaturationF">
<db:title>float QColor::hsvSaturationF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>hsvSaturationF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float hsvSaturationF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV saturation color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#saturation">saturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslSaturationF">hslSaturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hue">
<db:title>int QColor::hue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV hue color component of this color.</db:para>
<db:para>The color is implicitly converted to HSV.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hsvHue">hsvHue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslHue">hslHue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hueF">hueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hueF">
<db:title>float QColor::hueF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>hueF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float hueF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV hue color component of this color.</db:para>
<db:para>The color is implicitly converted to HSV.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hsvHueF">hsvHueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslHueF">hslHueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hue">hue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QColor::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the color is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isValidColorName">
<db:title>[static, since 6.4] bool QColor::isValidColorName(QAnyStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidColorName</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidColorName(QAnyStringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">name</db:code> is a valid color name and can be used to construct a valid <db:link xlink:href="qcolor.xml">QColor</db:link> object, otherwise returns false.</db:para>
<db:para>It uses the same algorithm used in <db:link xlink:href="qcolor.xml#fromString">fromString</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lighter">
<db:title>QColor QColor::lighter(int <db:emphasis>factor</db:emphasis> = 150) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>lighter</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>factor</db:parameter>
<db:initializer>150</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor lighter(int factor) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a lighter (or darker) color, but does not change this object.</db:para>
<db:para>If the <db:code role="parameter">factor</db:code> is greater than 100, this functions returns a lighter color. Setting <db:code role="parameter">factor</db:code> to 150 returns a color that is 50% brighter. If the <db:code role="parameter">factor</db:code> is less than 100, the return color is darker, but we recommend using the <db:link xlink:href="qcolor.xml#darker">darker</db:link>() function for this purpose. If the <db:code role="parameter">factor</db:code> is 0 or negative, the return value is unspecified.</db:para>
<db:para>The function converts the current color to HSV, multiplies the value (V) component by <db:code role="parameter">factor</db:code> and converts the color back to it's original color spec.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#darker">darker</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightness">
<db:title>int QColor::lightness() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lightness</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lightness() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the lightness color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#lightnessF">lightnessF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsl">getHsl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightnessF">
<db:title>float QColor::lightnessF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>lightnessF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float lightnessF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the lightness color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHslF">getHslF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="magenta">
<db:title>int QColor::magenta() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>magenta</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int magenta() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the magenta color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#magentaF">magentaF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="magentaF">
<db:title>float QColor::magentaF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>magentaF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float magentaF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the magenta color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#magenta">magenta</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmykF">getCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[since 5.2] QString QColor::name(QColor::NameFormat <db:emphasis>format</db:emphasis> = HexRgb) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:methodparam>
<db:type>QColor::NameFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>HexRgb</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name(QColor::NameFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the color in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#NameFormat-enum">NameFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="red">
<db:title>int QColor::red() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>red</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int red() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the red color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRed">setRed</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#redF">redF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redF">
<db:title>float QColor::redF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>redF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float redF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the red color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRedF">setRedF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#red">red</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rgb">
<db:title>QRgb QColor::rgb() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRgb</db:type>
<db:methodname>rgb</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb rgb() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the RGB value of the color. The alpha value is opaque.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgba">rgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rgba64">
<db:title>[since 5.6] QRgba64 QColor::rgba64() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRgba64</db:type>
<db:methodname>rgba64</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgba64 rgba64() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the RGB64 value of the color, including its alpha.</db:para>
<db:para>For an invalid color, the alpha value of the returned color is unspecified.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRgba64">setRgba64</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgba">rgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rgba">
<db:title>QRgb QColor::rgba() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRgb</db:type>
<db:methodname>rgba</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb rgba() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the RGB value of the color, including its alpha.</db:para>
<db:para>For an invalid color, the alpha value of the returned color is unspecified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRgba">setRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgba64">rgba64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saturation">
<db:title>int QColor::saturation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>saturation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int saturation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV saturation color component of this color.</db:para>
<db:para>The color is implicitly converted to HSV.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hsvSaturation">hsvSaturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslSaturation">hslSaturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#saturationF">saturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="saturationF">
<db:title>float QColor::saturationF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>saturationF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float saturationF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HSV saturation color component of this color.</db:para>
<db:para>The color is implicitly converted to HSV.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#hsvSaturationF">hsvSaturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#hslSaturationF">hslSaturationF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#saturation">saturation</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlpha">
<db:title>void QColor::setAlpha(int <db:emphasis>alpha</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlpha</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>alpha</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlpha(int alpha)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alpha of this color to <db:code role="parameter">alpha</db:code>. Integer alpha is specified in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#alpha">alpha</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlphaF">
<db:title>void QColor::setAlphaF(float <db:emphasis>alpha</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlphaF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>alpha</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlphaF(float alpha)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the alpha of this color to <db:code role="parameter">alpha</db:code>. float alpha is specified in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#alphaF">alphaF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha">alpha</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlue">
<db:title>void QColor::setBlue(int <db:emphasis>blue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>blue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlue(int blue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the blue color component of this color to <db:code role="parameter">blue</db:code>. Integer components are specified in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#blue">blue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blueF">blueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBlueF">
<db:title>void QColor::setBlueF(float <db:emphasis>blue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBlueF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>blue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBlueF(float blue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the blue color component of this color to <db:code role="parameter">blue</db:code>. If <db:code role="parameter">blue</db:code> lies outside the 0.0-1.0 range, the color model will be changed to <db:code>ExtendedRgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#blueF">blueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blue">blue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgbF">setRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCmyk">
<db:title>void QColor::setCmyk(int <db:emphasis>c</db:emphasis>, int <db:emphasis>m</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>k</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCmyk</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCmyk(int c, int m, int y, int k, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color to CMYK values, <db:code role="parameter">c</db:code> (cyan), <db:code role="parameter">m</db:code> (magenta), <db:code role="parameter">y</db:code> (yellow), <db:code role="parameter">k</db:code> (black), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setCmykF">setCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCmykF">
<db:title>void QColor::setCmykF(float <db:emphasis>c</db:emphasis>, float <db:emphasis>m</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>k</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCmykF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>k</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCmykF(float c, float m, float y, float k, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the color to CMYK values, <db:code role="parameter">c</db:code> (cyan), <db:code role="parameter">m</db:code> (magenta), <db:code role="parameter">y</db:code> (yellow), <db:code role="parameter">k</db:code> (black), and <db:code role="parameter">a</db:code> (alpha-channel, i.e. transparency).</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getCmykF">getCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setCmyk">setCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGreen">
<db:title>void QColor::setGreen(int <db:emphasis>green</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGreen</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>green</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGreen(int green)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the green color component of this color to <db:code role="parameter">green</db:code>. Integer components are specified in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#green">green</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#greenF">greenF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGreenF">
<db:title>void QColor::setGreenF(float <db:emphasis>green</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setGreenF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>green</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGreenF(float green)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the green color component of this color to <db:code role="parameter">green</db:code>. If <db:code role="parameter">green</db:code> lies outside the 0.0-1.0 range, the color model will be changed to <db:code>ExtendedRgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#greenF">greenF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#green">green</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgbF">setRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHsl">
<db:title>void QColor::setHsl(int <db:emphasis>h</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>l</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHsl</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHsl(int h, int s, int l, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a HSL color value; <db:code role="parameter">h</db:code> is the hue, <db:code role="parameter">s</db:code> is the saturation, <db:code role="parameter">l</db:code> is the lightness and <db:code role="parameter">a</db:code> is the alpha component of the HSL color.</db:para>
<db:para>The saturation, value and alpha-channel values must be in the range 0-255, and the hue value must be greater than -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHsl">getHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHslF">setHslF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHslF">
<db:title>void QColor::setHslF(float <db:emphasis>h</db:emphasis>, float <db:emphasis>s</db:emphasis>, float <db:emphasis>l</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHslF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>l</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHslF(float h, float s, float l, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a HSL color lightness; <db:code role="parameter">h</db:code> is the hue, <db:code role="parameter">s</db:code> is the saturation, <db:code role="parameter">l</db:code> is the lightness and <db:code role="parameter">a</db:code> is the alpha component of the HSL color.</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHslF">getHslF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHsl">setHsl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHsv">
<db:title>void QColor::setHsv(int <db:emphasis>h</db:emphasis>, int <db:emphasis>s</db:emphasis>, int <db:emphasis>v</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHsv</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHsv(int h, int s, int v, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a HSV color value; <db:code role="parameter">h</db:code> is the hue, <db:code role="parameter">s</db:code> is the saturation, <db:code role="parameter">v</db:code> is the value and <db:code role="parameter">a</db:code> is the alpha component of the HSV color.</db:para>
<db:para>The saturation, value and alpha-channel values must be in the range 0-255, and the hue value must be greater than -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHsvF">setHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHsvF">
<db:title>void QColor::setHsvF(float <db:emphasis>h</db:emphasis>, float <db:emphasis>s</db:emphasis>, float <db:emphasis>v</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHsvF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>h</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHsvF(float h, float s, float v, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a HSV color value; <db:code role="parameter">h</db:code> is the hue, <db:code role="parameter">s</db:code> is the saturation, <db:code role="parameter">v</db:code> is the value and <db:code role="parameter">a</db:code> is the alpha component of the HSV color.</db:para>
<db:para>All the values must be in the range 0.0-1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setHsv">setHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRed">
<db:title>void QColor::setRed(int <db:emphasis>red</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>red</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRed(int red)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the red color component of this color to <db:code role="parameter">red</db:code>. Integer components are specified in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#red">red</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#redF">redF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRedF">
<db:title>void QColor::setRedF(float <db:emphasis>red</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRedF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>red</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRedF(float red)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the red color component of this color to <db:code role="parameter">red</db:code>. If <db:code role="parameter">red</db:code> lies outside the 0.0-1.0 range, the color model will be changed to <db:code>ExtendedRgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#redF">redF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#red">red</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgbF">setRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRgb">
<db:title>void QColor::setRgb(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>, int <db:emphasis>a</db:emphasis> = 255)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgb</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
<db:initializer>255</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgb(int r, int g, int b, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the RGB value to <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code> and the alpha value to <db:code role="parameter">a</db:code>.</db:para>
<db:para>All the values must be in the range 0-255.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgb">getRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgbF">setRgbF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRgb-1">
<db:title>void QColor::setRgb(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgb</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgb(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the RGB value to <db:code role="parameter">rgb</db:code>. The alpha value is set to opaque.</db:para>
</db:section>
<db:section xml:id="setRgba64">
<db:title>[since 5.6] void QColor::setRgba64(QRgba64 <db:emphasis>rgba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgba64</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgba64(QRgba64 rgba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the RGB64 value to <db:code role="parameter">rgba</db:code>, including its alpha.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setRgba">setRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgba64">rgba64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRgbF">
<db:title>void QColor::setRgbF(float <db:emphasis>r</db:emphasis>, float <db:emphasis>g</db:emphasis>, float <db:emphasis>b</db:emphasis>, float <db:emphasis>a</db:emphasis> = 1.0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgbF</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>a</db:parameter>
<db:initializer>1.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgbF(float r, float g, float b, float a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the color channels of this color to <db:code role="parameter">r</db:code> (red), <db:code role="parameter">g</db:code> (green), <db:code role="parameter">b</db:code> (blue) and <db:code role="parameter">a</db:code> (alpha, transparency).</db:para>
<db:para>The alpha value must be in the range 0.0-1.0. If any of the other values are outside the range of 0.0-1.0 the color model will be set as <db:code>ExtendedRgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getRgbF">getRgbF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgb">setRgb</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRgba">
<db:title>void QColor::setRgba(QRgb <db:emphasis>rgba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRgba</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRgba(QRgb rgba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the RGB value to <db:code role="parameter">rgba</db:code>, including its alpha.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#rgba">rgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgb">rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#setRgba64">setRgba64</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="spec">
<db:title>QColor::Spec QColor::spec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor::Spec</db:type>
<db:methodname>spec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor::Spec spec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns how the color was specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#Spec-enum">Spec</db:link></db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCmyk">
<db:title>QColor QColor::toCmyk() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>toCmyk</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor toCmyk() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a CMYK <db:link xlink:href="qcolor.xml">QColor</db:link> based on this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromCmyk">fromCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toExtendedRgb">
<db:title>[since 5.14] QColor QColor::toExtendedRgb() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>toExtendedRgb</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor toExtendedRgb() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create and returns an extended RGB <db:link xlink:href="qcolor.xml">QColor</db:link> based on this color.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#toRgb">toRgb</db:link></db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHsl">
<db:title>QColor QColor::toHsl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>toHsl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor toHsl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns an HSL <db:link xlink:href="qcolor.xml">QColor</db:link> based on this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromHsl">fromHsl</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsl-color-model">The HSL Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHsv">
<db:title>QColor QColor::toHsv() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>toHsv</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor toHsv() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns an HSV <db:link xlink:href="qcolor.xml">QColor</db:link> based on this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromHsv">fromHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toRgb">
<db:title>QColor QColor::toRgb() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QColor</db:type>
<db:methodname>toRgb</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor toRgb() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create and returns an RGB <db:link xlink:href="qcolor.xml">QColor</db:link> based on this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#fromRgb">fromRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#convertTo">convertTo</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>int QColor::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#valueF">valueF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsv">getHsv</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueF">
<db:title>float QColor::valueF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>valueF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float valueF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getHsvF">getHsvF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-hsv-color-model">The HSV Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yellow">
<db:title>int QColor::yellow() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>yellow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int yellow() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the yellow color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#yellowF">yellowF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmyk">getCmyk</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yellowF">
<db:title>float QColor::yellowF() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>yellowF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">float yellowF() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the yellow color component of this color.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#yellow">yellow</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#getCmykF">getCmykF</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#the-cmyk-color-model">The CMYK Color Model</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QColor::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the color as a <db:link xlink:href="qvariant.xml">QVariant</db:link></db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QColor::operator!=(const QColor &amp;<db:emphasis>color</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QColor &amp;color) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this color has different color specification or component values from <db:code role="parameter">color</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qcolor.xml#Spec-enum">ExtendedRgb</db:link> and Rgb specifications are considered matching in this context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#spec">spec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QColor &amp;QColor::operator=(Qt::GlobalColor <db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QColor &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>Qt::GlobalColor</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor &amp; operator=(Qt::GlobalColor color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Assigns a copy of <db:code role="parameter">color</db:code> and returns a reference to this color.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QColor::operator==(const QColor &amp;<db:emphasis>color</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QColor &amp;color) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this color has the same color specification and component values as <db:code role="parameter">color</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qcolor.xml#Spec-enum">ExtendedRgb</db:link> and Rgb specifications are considered matching in this context.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#spec">spec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QRgb-typedef">
<db:title>QRgb</db:title>
<db:typedefsynopsis>
<db:typedefname>QRgb</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>An ARGB quadruplet on the format #AARRGGBB, equivalent to an unsigned int.</db:para>
<db:para>The type also holds a value for the alpha-channel. The default alpha channel is <db:code>ff</db:code>, i.e opaque. For more information, see the <db:link xlink:href="qcolor.xml#alpha-blended-drawing">Alpha-Blended Drawing</db:link> section.</db:para>
<db:para>Here are some examples of how QRgb values can be created:</db:para>
<db:programlisting language="cpp">const QRgb rgb1 = 0x88112233;
const QRgb rgb2 = QColor(&quot;red&quot;).rgb();
const QRgb rgb3 = qRgb(qRed(rgb1), qGreen(rgb2), qBlue(rgb2));
const QRgb rgb4 = qRgba(qRed(rgb1), qGreen(rgb2), qBlue(rgb2), qAlpha(rgb1));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qRgba">qRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgb">QColor::rgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#rgba">QColor::rgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qAlpha">
<db:title>[constexpr] int qAlpha(QRgb <db:emphasis>rgba</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qAlpha</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgba</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qAlpha(QRgb rgba)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alpha component of the ARGB quadruplet <db:code role="parameter">rgba</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha">QColor::alpha</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qAlpha-1">
<db:title>[constexpr, since 5.6] uint qAlpha(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qAlpha</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qAlpha(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the alpha component of <db:code role="parameter">rgba64</db:code> as an 8-bit value.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#alpha8">QRgba64::alpha8</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#alpha">QColor::alpha</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qBlue">
<db:title>[constexpr] int qBlue(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qBlue</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qBlue(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the blue component of the ARGB quadruplet <db:code role="parameter">rgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blue">QColor::blue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qBlue-1">
<db:title>[constexpr, since 5.6] uint qBlue(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qBlue</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qBlue(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the blue component of <db:code role="parameter">rgba64</db:code> as an 8-bit value.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#blue8">QRgba64::blue8</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#blue">QColor::blue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qGray">
<db:title>[constexpr] int qGray(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qGray</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qGray(int r, int g, int b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a gray value (0 to 255) from the (<db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>) triplet.</db:para>
<db:para>The gray value is calculated using the formula (<db:code role="parameter">r</db:code> * 11 + <db:code role="parameter">g</db:code> * 16 + <db:code role="parameter">b</db:code> * 5)/32.</db:para>
</db:section>
<db:section xml:id="qGray-1">
<db:title>[constexpr] int qGray(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qGray</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int qGray(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a gray value (0 to 255) from the given ARGB quadruplet <db:code role="parameter">rgb</db:code>.</db:para>
<db:para>The gray value is calculated using the formula (R * 11 + G * 16 + B * 5)/32; the alpha-channel is ignored.</db:para>
</db:section>
<db:section xml:id="qGreen">
<db:title>[constexpr] int qGreen(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qGreen</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qGreen(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the green component of the ARGB quadruplet <db:code role="parameter">rgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#green">QColor::green</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qGreen-1">
<db:title>[constexpr, since 5.6] uint qGreen(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qGreen</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qGreen(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the green component of <db:code role="parameter">rgba64</db:code> as an 8-bit value.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#green8">QRgba64::green8</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#green">QColor::green</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPremultiply">
<db:title>[constexpr, since 5.3] QRgb qPremultiply(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgb</db:type>
<db:methodname>qPremultiply</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb qPremultiply(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts an unpremultiplied ARGB quadruplet <db:code role="parameter">rgb</db:code> into a premultiplied ARGB quadruplet.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qUnpremultiply">qUnpremultiply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPremultiply-1">
<db:title>[constexpr, since 5.6] QRgba64 qPremultiply(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgba64</db:type>
<db:methodname>qPremultiply</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgba64 qPremultiply(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts an unpremultiplied <db:link xlink:href="qrgba64.xml">QRgba64</db:link> quadruplet <db:code role="parameter">rgba64</db:code> into a premultiplied <db:link xlink:href="qrgba64.xml">QRgba64</db:link> quadruplet.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#premultiplied">QRgba64::premultiplied</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qUnpremultiply">qUnpremultiply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRed">
<db:title>[constexpr] int qRed(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qRed</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qRed(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the red component of the ARGB quadruplet <db:code role="parameter">rgb</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#red">QColor::red</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRed-1">
<db:title>[constexpr, since 5.6] uint qRed(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>qRed</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">uint qRed(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the red component of <db:code role="parameter">rgba64</db:code> as an 8-bit value.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#red8">QRgba64::red8</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#red">QColor::red</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRgb">
<db:title>[constexpr] QRgb qRgb(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgb</db:type>
<db:methodname>qRgb</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb qRgb(int r, int g, int b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ARGB quadruplet (255, <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgba">qRgba</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qRed">qRed</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qGreen">qGreen</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qBlue">qBlue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qAlpha">qAlpha</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRgba64">
<db:title>[constexpr, since 5.6] QRgba64 qRgba64(quint16 <db:emphasis>r</db:emphasis>, quint16 <db:emphasis>g</db:emphasis>, quint16 <db:emphasis>b</db:emphasis>, quint16 <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgba64</db:type>
<db:methodname>qRgba64</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgba64 qRgba64(quint16 r, quint16 g, quint16 b, quint16 a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qrgba64.xml">QRgba64</db:link> quadruplet (<db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>, <db:code role="parameter">a</db:code>).</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgba">qRgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRgba64-1">
<db:title>[constexpr, since 5.6] QRgba64 qRgba64(quint64 <db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgba64</db:type>
<db:methodname>qRgba64</db:methodname>
<db:methodparam>
<db:type>quint64</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgba64 qRgba64(quint64 c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code role="parameter">c</db:code> as a <db:link xlink:href="qrgba64.xml">QRgba64</db:link> struct.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgba">qRgba</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qRgba">
<db:title>[constexpr] QRgb qRgba(int <db:emphasis>r</db:emphasis>, int <db:emphasis>g</db:emphasis>, int <db:emphasis>b</db:emphasis>, int <db:emphasis>a</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgb</db:type>
<db:methodname>qRgba</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>g</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb qRgba(int r, int g, int b, int a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the ARGB quadruplet (<db:code role="parameter">a</db:code>, <db:code role="parameter">r</db:code>, <db:code role="parameter">g</db:code>, <db:code role="parameter">b</db:code>).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qRgb">qRgb</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qRed">qRed</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qGreen">qGreen</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qBlue">qBlue</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qAlpha">qAlpha</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qUnpremultiply">
<db:title>[since 5.3] QRgb qUnpremultiply(QRgb <db:emphasis>rgb</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgb</db:type>
<db:methodname>qUnpremultiply</db:methodname>
<db:methodparam>
<db:type>QRgb</db:type>
<db:parameter>rgb</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgb qUnpremultiply(QRgb rgb)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts a premultiplied ARGB quadruplet <db:code role="parameter">rgb</db:code> into an unpremultiplied ARGB quadruplet.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#qPremultiply">qPremultiply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qUnpremultiply-1">
<db:title>[constexpr, since 5.6] QRgba64 qUnpremultiply(QRgba64 <db:emphasis>rgba64</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRgba64</db:type>
<db:methodname>qUnpremultiply</db:methodname>
<db:methodparam>
<db:type>QRgba64</db:type>
<db:parameter>rgba64</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QRgba64 qUnpremultiply(QRgba64 rgba64)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts a premultiplied <db:link xlink:href="qrgba64.xml">QRgba64</db:link> quadruplet <db:code role="parameter">rgba64</db:code> into an unpremultiplied <db:link xlink:href="qrgba64.xml">QRgba64</db:link> quadruplet.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrgba64.xml#unpremultiplied">QRgba64::unpremultiplied</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#qPremultiply">qPremultiply</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the <db:code role="parameter">color</db:code> to the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the <db:code role="parameter">color</db:code> from the <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QColor</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qcolor.xml">QColor</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="isValidColor">
<db:title>[static] bool QColor::isValidColor(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidColor</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidColor(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#isValidColorName">isValidColorName</db:link>() instead.</db:para>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">name</db:code> is a valid color name and can be used to construct a valid <db:link xlink:href="qcolor.xml">QColor</db:link> object, otherwise returns false.</db:para>
<db:para>It uses the same algorithm used in <db:link xlink:href="qcolor.xml#setNamedColor">setNamedColor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#setNamedColor">setNamedColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValidColor-1">
<db:title>[static, since 5.10] bool QColor::isValidColor(QStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidColor</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidColor(QStringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#isValidColorName">isValidColorName</db:link>() instead.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="isValidColor-2">
<db:title>[static, since 5.8] bool QColor::isValidColor(QLatin1StringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValidColor</db:methodname>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValidColor(QLatin1StringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#isValidColorName">isValidColorName</db:link>() instead.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="setNamedColor">
<db:title>void QColor::setNamedColor(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNamedColor</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNamedColor(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#fromString">fromString</db:link>() instead.</db:para>
<db:para>Sets the RGB value of this <db:link xlink:href="qcolor.xml">QColor</db:link> to <db:code role="parameter">name</db:code>, which may be in one of these formats:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>#RGB (each of R, G, and B is a single hex digit)</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRGGBB</db:para>
</db:listitem>
<db:listitem>
<db:para>#AARRGGBB (Since 5.2)</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRRGGGBBB</db:para>
</db:listitem>
<db:listitem>
<db:para>#RRRRGGGGBBBB</db:para>
</db:listitem>
<db:listitem>
<db:para>A name from the list of colors defined in the list of <db:link xlink:href="https://www.w3.org/TR/SVG11/types.html#ColorKeywords">SVG color keyword names</db:link> provided by the World Wide Web Consortium; for example, &quot;steelblue&quot; or &quot;gainsboro&quot;. These color names work on all platforms. Note that these color names are <db:emphasis>not</db:emphasis> the same as defined by the <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link> enums, e.g. &quot;green&quot; and <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::green</db:link> does not refer to the same color.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>transparent</db:code> - representing the absence of a color.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The color is invalid if <db:code role="parameter">name</db:code> cannot be parsed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcolor.xml#QColor">QColor</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qcolor.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNamedColor-1">
<db:title>[since 5.10] void QColor::setNamedColor(QStringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNamedColor</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNamedColor(QStringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#fromString">fromString</db:link>() instead.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="setNamedColor-2">
<db:title>[since 5.8] void QColor::setNamedColor(QLatin1StringView <db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNamedColor</db:methodname>
<db:methodparam>
<db:type>QLatin1StringView</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNamedColor(QLatin1StringView name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use <db:link xlink:href="qcolor.xml#fromString">fromString</db:link>() instead.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
