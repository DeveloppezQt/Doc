<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Secure Socket Client Example</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to communicate over an encrypted (SSL) connection.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;certificateinfo.h&quot;
#include &quot;ui_certificateinfo.h&quot;

CertificateInfo::CertificateInfo(QWidget *parent)
    : QDialog(parent)
{
    form = new Ui_CertificateInfo;
    form-&amp;gt;setupUi(this);

    connect(form-&amp;gt;certificationPathView, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;CertificateInfo::updateCertificateInfo);
}

CertificateInfo::~CertificateInfo()
{
    delete form;
}

void CertificateInfo::setCertificateChain(const QList&amp;lt;QSslCertificate&amp;gt; &amp;amp;chain)
{
    certificateChain = chain;

    form-&amp;gt;certificationPathView-&amp;gt;clear();
    for (int i = 0; i &amp;lt; certificateChain.size(); ++i) {
        const QSslCertificate &amp;amp;cert = certificateChain.at(i);
        form-&amp;gt;certificationPathView-&amp;gt;addItem(tr(&quot;%1%2 (%3)&quot;).arg(!i ? QString() : tr(&quot;Issued by: &quot;))
                                             .arg(cert.subjectInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
                                             .arg(cert.subjectInfo(QSslCertificate::CommonName).join(QLatin1Char(' '))));
    }
    form-&amp;gt;certificationPathView-&amp;gt;setCurrentIndex(0);
}

void CertificateInfo::updateCertificateInfo(int index)
{
    form-&amp;gt;certificateInfoView-&amp;gt;clear();
    if (index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; certificateChain.size()) {
        const QSslCertificate &amp;amp;cert = certificateChain.at(index);
        QStringList lines;
        lines &amp;lt;&amp;lt; tr(&quot;Organization: %1&quot;).arg(cert.subjectInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Subunit: %1&quot;).arg(cert.subjectInfo(QSslCertificate::OrganizationalUnitName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Country: %1&quot;).arg(cert.subjectInfo(QSslCertificate::CountryName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Locality: %1&quot;).arg(cert.subjectInfo(QSslCertificate::LocalityName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;State/Province: %1&quot;).arg(cert.subjectInfo(QSslCertificate::StateOrProvinceName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Common Name: %1&quot;).arg(cert.subjectInfo(QSslCertificate::CommonName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; QString()
              &amp;lt;&amp;lt; tr(&quot;Issuer Organization: %1&quot;).arg(cert.issuerInfo(QSslCertificate::Organization).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Issuer Unit Name: %1&quot;).arg(cert.issuerInfo(QSslCertificate::OrganizationalUnitName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Issuer Country: %1&quot;).arg(cert.issuerInfo(QSslCertificate::CountryName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Issuer Locality: %1&quot;).arg(cert.issuerInfo(QSslCertificate::LocalityName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Issuer State/Province: %1&quot;).arg(cert.issuerInfo(QSslCertificate::StateOrProvinceName).join(QLatin1Char(' ')))
              &amp;lt;&amp;lt; tr(&quot;Issuer Common Name: %1&quot;).arg(cert.issuerInfo(QSslCertificate::CommonName).join(QLatin1Char(' ')));
        for (const auto &amp;amp;line : lines)
            form-&amp;gt;certificateInfoView-&amp;gt;addItem(line);
    }
}

</db:programlisting>
</db:article>
