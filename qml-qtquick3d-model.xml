<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Model QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lets you load a 3D model data.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Node</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Model item makes it possible to load a mesh and modify how its shaded, by adding materials to it. For a model to be renderable, it needs at least a mesh and a material.</db:para>
<db:section xml:id="mesh-format-and-built-in-primitives">
<db:title>Mesh format and built-in primitives</db:title>
<db:para>The model can load static meshes from storage or one of the built-in primitive types. The mesh format used is a run-time format that's native to the engine, but additional formats are supported through the asset import tool <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link>.</db:para>
<db:para>The built-in primitives can be loaded by setting the <db:code>source</db:code> property to one of these values: <db:code>#Rectangle, #Sphere, #Cube, #Cylinder or #Cone</db:code>.</db:para>
<db:programlisting language="qml">Model {
    source: &quot;#Sphere&quot;
}
</db:programlisting>
<db:section xml:id="custom-geometry">
<db:title>Custom geometry</db:title>
<db:para>In addition to using static meshes, it is possible to implement a <db:link xlink:href="qquick3dgeometry.xml">custom geometry</db:link> provider that provides the model with custom vertex data at run-time. See the <db:link xlink:href="qtquick3d-customgeometry-example.xml">Custom Geometry Example</db:link> for an example on how to create and use a custom material with your model.</db:para>
</db:section>
</db:section>
<db:section xml:id="materials">
<db:title>Materials</db:title>
<db:para>A model can consist of several sub-meshes, each of which can have its own material. The sub-mesh uses a material from the <db:link xlink:href="qml-qtquick3d-model.xml#materials">materials</db:link> list, corresponding to its index. If the number of materials is less than the sub-meshes, the last material in the list is used for subsequent sub-meshes. This is demonstrated in the <db:link xlink:href="qtquick3d-submeshes-example.xml">Sub-mesh example</db:link>.</db:para>
<db:para>There are currently three different materials that can be used with the model item, the <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>, the <db:link xlink:href="qml-qtquick3d-defaultmaterial.xml">DefaultMaterial</db:link>, and the <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link>.</db:para>
</db:section>
<db:section xml:id="picking">
<db:title>Picking</db:title>
<db:para>Picking is the process of sending a ray through the scene from some starting position to find which model(s) intersects with the ray. In <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link> the ray is normally sent from the view using 2D coordinates resulting from a touch or mouse event. If a model was hit by the ray a <db:link xlink:href="qml-qtquick3d-pickresult.xml">PickResult</db:link> will be returned with a handle to the model and information about where the ray hit the model. For models that use <db:link xlink:href="qquick3dgeometry.xml">custom geometry</db:link> the picking is less accurate then for static mesh data, as picking is only done against the models <db:link xlink:href="qml-qtquick3d-bounds.xml">bounding volume</db:link>. If the ray goes through more then one model, the closest <db:link xlink:href="qml-qtquick3d-model.xml#pickable-prop">pickable</db:link> model is selected.</db:para>
<db:para>Note that models are not <db:link xlink:href="qml-qtquick3d-model.xml#pickable-prop">pickable</db:link> by default, so to be able to <db:link xlink:href="qml-qtquick3d-view3d.xml#pick-method">pick</db:link> a model in the scene, the model will need to make it self discoverable by setting the <db:link xlink:href="qml-qtquick3d-model.xml#pickable-prop">pickable</db:link> property to true. Visit the <db:link xlink:href="qtquick3d-picking-example.xml">Qt Quick 3D - Picking example</db:link> to see how picking can be enabled.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bakedLightmap-prop">
<db:title>bakedLightmap : BakedLightmap</db:title>
<db:fieldsynopsis>
<db:type>BakedLightmap</db:type>
<db:varname>bakedLightmap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to a valid, enabled <db:link xlink:href="qml-qtquick3d-bakedlightmap.xml">BakedLightmap</db:link> object, the model will get a lightmap generated when baking lighting, the lightmap is then stored persistently. When rendering, the model will load and use the associated lightmap. The default value is null.</db:para>
<db:note>
<db:para>When the intention is to generate a persistently stored lightmap for a Model, both bakedLightmap and <db:link xlink:href="qml-qtquick3d-model.xml#usedInBakedLighting-prop">usedInBakedLighting</db:link> must be set on it, in order to indicate that the Model not only participates in the lightmapped scene, but also wants a full lightmap to be baked and stored.</db:para>
</db:note>
<db:para>For more information on how to bake lightmaps, see the <db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link> documentation.</db:para>
<db:para>This property is relevant both when baking and when using lightmaps. A consistent state between the baking run and the subsequent runs that use the generated data is essential. For example, changing the lightmap key will make it impossible to load the previously generated data. An exception is enabled, which can be used to dynamically toggle the usage of lightmaps (outside of the baking run), but be aware that the rendered results will depend on the Lights' <db:link xlink:href="qml-qtquick3d-light.xml#bakeMode-prop">bakeMode</db:link> settings in the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#usedInBakedLighting-prop">usedInBakedLighting</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bounds-prop">
<db:title>[read-only] bounds : Bounds</db:title>
<db:fieldsynopsis>
<db:type>Bounds</db:type>
<db:varname>bounds</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The bounds of the model descibes the extents of the bounding volume around the model.</db:para>
<db:note>
<db:para>The bounds might not be immediately available if the model needs to be loaded first.</db:para>
</db:note>
</db:section>
<db:section xml:id="castsReflections-prop">
<db:title>[since 6.4] castsReflections : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>castsReflections</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to <db:code>true</db:code>, the model is rendered by reflection probes and can be seen in the reflections.</db:para>
<db:para>This property was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="castsShadows-prop">
<db:title>castsShadows : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>castsShadows</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is <db:code>true</db:code>, the geometry of this model is used when rendering to the shadow maps, and is also generating shadows in baked lighting.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="depthBias-prop">
<db:title>depthBias : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>depthBias</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the depth bias of the model. Depth bias is added to the object distance from camera when sorting objects. This can be used to force rendering order between objects close to each other, that might otherwise be rendered in different order in different frames. Negative values cause the sorting value to move closer to the camera while positive values move it further from the camera.</db:para>
</db:section>
<db:section xml:id="geometry-prop">
<db:title>geometry : Geometry</db:title>
<db:fieldsynopsis>
<db:type>Geometry</db:type>
<db:varname>geometry</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Specify a custom geometry for the model. The <db:link xlink:href="qml-qtquick3d-model.xml#source-prop">Model::source</db:link> must be empty when custom geometry is used.</db:para>
</db:section>
<db:section xml:id="instanceRoot-prop">
<db:title>instanceRoot : QtQuick3D::Node</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Node</db:type>
<db:varname>instanceRoot</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the origin of the instance’s coordinate system.</db:para>
<db:para>See the <db:link xlink:href="quick3d-instancing.xml#transforms-and-instancing">overview documentation</db:link> for a detailed explanation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#instancing-prop">instancing</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-instancing.xml">Instancing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instancing-prop">
<db:title>instancing : QtQuick3D::Instancing</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Instancing</db:type>
<db:varname>instancing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set, the model will not be rendered normally. Instead, a number of instances of the model will be rendered, as defined by the instance table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-instancing.xml">Instancing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inverseBindPoses-prop">
<db:title>inverseBindPoses : List&lt;matrix4x4&gt;</db:title>
<db:fieldsynopsis>
<db:type>List&lt;matrix4x4&gt;</db:type>
<db:varname>inverseBindPoses</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a list of Inverse Bind Pose matrixes used for the skeletal animation. Each inverseBindPose matrix means the inverse of the global transform of the repective <db:link xlink:href="qml-qtquick3d-joint.xml#index-prop">Joint::index</db:link> in <db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">skeleton</db:link>, which will be used initially.</db:para>
<db:note>
<db:para>This property is only used if the <db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">Model::skeleton</db:link> is valid.</db:para>
</db:note>
<db:note>
<db:para>If some of the matrices are not set, identity values will be used.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">Joint::index</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightmapBaseResolution-prop">
<db:title>lightmapBaseResolution : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>lightmapBaseResolution</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Defines the approximate size of the lightmap for this model. The default value is 1024, indicating 1024x1024 as the base size. The actual size of the lightmap texture is likely to be different, often bigger, depending on the mesh.</db:para>
<db:para>For simpler, smaller meshes, or when it is known that using a bigger lightmap is unnecessary, the value can be set to something smaller, for example, 512 or 256.</db:para>
<db:para>The minimum value is 128.</db:para>
<db:para>This setting applies both to persistently stored and for intermediate, partial lightmaps. When baking lightmaps, all models that have <db:link xlink:href="qml-qtquick3d-model.xml#usedInBakedLighting-prop">usedInBakedLighting</db:link> enabled are part of the path-traced scene. Thus all of them need to have lightmap UV unwrapping performed and the rasterization steps necessary to compute direct lighting which then can be taken into account for indirect light bounces in the scene. However, for models that just contribute to, but do not store a lightmap the default value is often sufficient. Fine-tuning is more relevant for models that store and then use the generated lightmaps.</db:para>
<db:para>This property is relevant only when baking lightmaps. It has no effect afterwards, when using the generated lightmaps during rendering.</db:para>
<db:para>Models that have lightmap UV data pre-generated during asset import time (e.g. via the balsam tool) will ignore this property because the lightmap UV unwrapping and the lightmap size hint evaluation have already been done, and will not be performed again during lightmap baking.</db:para>
</db:section>
<db:section xml:id="materials-prop">
<db:title>materials : List&lt;QtQuick3D::Material&gt;</db:title>
<db:fieldsynopsis>
<db:type>List&lt;QtQuick3D::Material&gt;</db:type>
<db:varname>materials</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a list of materials used to render the provided geometry. To render anything, there must be at least one material. Normally there should be one material for each sub-mesh included in the source geometry.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-submeshes-example.xml">Qt Quick 3D - Sub-mesh Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="morphTargets-prop">
<db:title>morphTargets : List&lt;QtQuick3D::MorphTarget&gt;</db:title>
<db:fieldsynopsis>
<db:type>List&lt;QtQuick3D::MorphTarget&gt;</db:type>
<db:varname>morphTargets</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a list of <db:link xlink:href="qml-qtquick3d-morphtarget.xml">MorphTarget</db:link>s used to render the provided geometry. Meshes should have at least one attribute among positions, normals, tangent, bitangent for the morph targets. Quick3D supports maximum 8 morph targets and remains will be ignored.</db:para>
<db:note>
<db:para>First 2 morph targets can have maximum 4 attributes among position, normal, tangent, and binormal.</db:para>
</db:note>
<db:note>
<db:para>3rd and 4th morph targets can have maximum 2 attributes among position, and normal.</db:para>
</db:note>
<db:note>
<db:para>Remaining morph targets can have only the position attribute.</db:para>
</db:note>
<db:note>
<db:para>This property is not used when the model is shaded by <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-morphtarget.xml">MorphTarget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pickable-prop">
<db:title>pickable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>pickable</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls whether the model is pickable or not. Set this property to <db:code>true</db:code> to make the model pickable. Models are not pickable by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#pick-method">View3D::pick</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="receivesReflections-prop">
<db:title>receivesReflections : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>receivesReflections</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to <db:code>true</db:code>, the model's materials take reflections contribution from a reflection probe. If the model is inside more than one reflection probe at the same time, the nearest reflection probe is taken into account.</db:para>
</db:section>
<db:section xml:id="receivesShadows-prop">
<db:title>receivesShadows : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>receivesShadows</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to <db:code>true</db:code>, the model's materials take shadow contribution from shadow casting lights into account.</db:para>
<db:note>
<db:para>When lightmapping is enabled for this model, fully baked lights with <db:link xlink:href="qml-qtquick3d-light.xml#bakeMode-prop">Light::bakeMode</db:link> set to Light.BakeModeAll will always generate (baked) shadows on the model, regardless of the value of this property.</db:para>
</db:note>
<db:para>The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="skeleton-prop">
<db:title>skeleton : Skeleton</db:title>
<db:fieldsynopsis>
<db:type>Skeleton</db:type>
<db:varname>skeleton</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Contains the skeleton for the model. The Skeleton is used together with <db:link xlink:href="qml-qtquick3d-model.xml#inverseBindPoses-prop">inverseBindPoses</db:link> for <db:link xlink:href="quick3d-vertex-skinning.xml">skinning</db:link>.</db:para>
<db:note>
<db:para>Meshes of the model must have both joints and weights attributes.</db:para>
</db:note>
<db:note>
<db:para>If this property is set, skinning animation is enabled. It means that <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> is transformed based on <db:link xlink:href="qml-qtquick3d-skeleton.xml">Skeleton</db:link> ignoring Model's global transformation.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#inverseBindPoses-prop">Model::inverseBindPoses</db:link></db:member>
<db:member><db:link xlink:href="qtquick3d-skinning-example.xml">Qt Quick 3D - Simple Skinning Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="skin-prop">
<db:title>skin : Skin</db:title>
<db:fieldsynopsis>
<db:type>Skin</db:type>
<db:varname>skin</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Contains the skeleton for the model. The Skeleton is used for <db:link xlink:href="quick3d-vertex-skinning.xml">skinning</db:link>.</db:para>
<db:note>
<db:para>Meshes of the model must have both joints and weights attributes.</db:para>
</db:note>
<db:note>
<db:para>If this property is set, skinning animation is enabled. This means the <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link> will be transformed based on <db:link xlink:href="qml-qtquick3d-skin.xml#joints-prop">Skin::joints</db:link> and the Model's global transformation will be ignored.</db:para>
</db:note>
<db:note>
<db:para>If a model has both a skeleton and a skin, then the skin will be used.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">Qt Quick 3D - Simple Skinning Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : url</db:title>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the location of the mesh file containing the geometry of this Model or one of the built-in primitive meshes listed below as described in <db:link xlink:href="qml-qtquick3d-model.xml#mesh-format-and-built-in-primitives">Mesh format and built-in primitives</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>&quot;#Rectangle&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;#Sphere&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;#Cube&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;#Cone&quot;</db:para>
</db:listitem>
<db:listitem>
<db:para>&quot;#Cylinder&quot;</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="usedInBakedLighting-prop">
<db:title>usedInBakedLighting : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>usedInBakedLighting</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to <db:code>true</db:code>, the model contributes to baked lighting, such as lightmaps, for example in form of casting shadows or indirect light. This setting is independent of controlling lightmap generation for the model, use <db:link xlink:href="qml-qtquick3d-model.xml#bakedLightmap-prop">bakedLightmap</db:link> for that.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The default value is false, because designers and developers must always evaluate on a per-model basis if the object is suitable to take part in baked lighting.</db:para>
</db:note>
<db:warning>
<db:para>Models with dynamically changing properties, for example, animated position, rotation, or other properties, are not suitable for participating in baked lighting.</db:para>
</db:warning>
<db:para>For more information on how to bake lightmaps, see the <db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link> documentation.</db:para>
<db:para>This property is relevant only when baking lightmaps. It has no effect afterwards, when using the generated lightmaps during rendering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-light.xml#bakeMode-prop">Light::bakeMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#bakedLightmap-prop">bakedLightmap</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link></db:member>
<db:member><db:link xlink:href="quick3d-lightmap.xml">Lightmaps and Global Illumination</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
