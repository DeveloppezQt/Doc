<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMessageAuthenticationCode Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> class provides a way to generate hash-based message authentication codes.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMessageAuthenticationCode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMessageAuthenticationCode is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> supports all cryptographic hashes which are supported by <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link>.</db:para>
<db:para>To generate message authentication code, pass hash algorithm <db:link xlink:href="qcryptographichash.xml#Algorithm-enum">QCryptographicHash::Algorithm</db:link> to constructor, then set key and message by <db:link xlink:href="qmessageauthenticationcode.xml#setKey">setKey</db:link>() and <db:link xlink:href="qmessageauthenticationcode.xml#addData">addData</db:link>() functions. Result can be acquired by <db:link xlink:href="qmessageauthenticationcode.xml#result">result</db:link>() function.</db:para>
<db:programlisting language="cpp">    QByteArray key = &quot;key&quot;;
    QByteArray message = &quot;The quick brown fox jumps over the lazy dog&quot;;
    ...
    QMessageAuthenticationCode code(QCryptographicHash::Sha1);
    code.setKey(key);
    code.addData(message);
    code.result().toHex();      // returns &quot;de7c9b85b8b78aa6bc8a7a36f70a90701c9db4d9&quot;
</db:programlisting>
<db:para>Alternatively, this effect can be achieved by providing message, key and method to <db:link xlink:href="qmessageauthenticationcode.xml#hash">hash</db:link>() method.</db:para>
<db:programlisting language="cpp">    QMessageAuthenticationCode::hash(message, key, QCryptographicHash::Sha1).toHex();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMessageAuthenticationCode">
<db:title>[explicit] QMessageAuthenticationCode::QMessageAuthenticationCode(QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>, const QByteArray &amp;<db:emphasis>key</db:emphasis> = QByteArray())</db:title>
<db:para>Constructs an object that can be used to create a cryptographic hash from data using method <db:code role="parameter">method</db:code> and key <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMessageAuthenticationCode">
<db:title>[noexcept] QMessageAuthenticationCode::~QMessageAuthenticationCode()</db:title>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="addData">
<db:title>bool QMessageAuthenticationCode::addData(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Reads the data from the open <db:link xlink:href="qiodevice.xml">QIODevice</db:link> <db:code role="parameter">device</db:code> until it ends and adds it to message. Returns true if reading was successful.</db:para>
<db:note>
<db:para><db:code role="parameter">device</db:code> must be already opened.</db:para>
</db:note>
</db:section>
<db:section xml:id="addData-1">
<db:title>void QMessageAuthenticationCode::addData(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Adds the first <db:code role="parameter">length</db:code> chars of <db:code role="parameter">data</db:code> to the message.</db:para>
</db:section>
<db:section xml:id="addData-2">
<db:title>void QMessageAuthenticationCode::addData(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>This function overloads <db:link xlink:href="qmessageauthenticationcode.xml#addData">addData</db:link>().</db:para>
</db:section>
<db:section xml:id="hash">
<db:title>[static] QByteArray QMessageAuthenticationCode::hash(const QByteArray &amp;<db:emphasis>message</db:emphasis>, const QByteArray &amp;<db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:para>Returns the authentication code for the message <db:code role="parameter">message</db:code> using the key <db:code role="parameter">key</db:code> and the method <db:code role="parameter">method</db:code>.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QMessageAuthenticationCode::reset()</db:title>
<db:para>Resets message data. Calling this method doesn't affect the key.</db:para>
</db:section>
<db:section xml:id="result">
<db:title>QByteArray QMessageAuthenticationCode::result() const</db:title>
<db:para>Returns the final authentication code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbytearray.xml#toHex">QByteArray::toHex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKey">
<db:title>void QMessageAuthenticationCode::setKey(const QByteArray &amp;<db:emphasis>key</db:emphasis>)</db:title>
<db:para>Sets secret <db:code role="parameter">key</db:code>. Calling this method automatically resets the object state.</db:para>
</db:section>
</db:section>
</db:article>
