<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMessageAuthenticationCode Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> class provides a way to generate hash-based message authentication codes.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMessageAuthenticationCode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMessageAuthenticationCode is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Use the <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> class to generate hash-based message authentication codes (HMACs). The class supports all cryptographic hash algorithms from <db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link> (see also <db:link xlink:href="qcryptographichash.xml#Algorithm-enum">QCryptographicHash::Algorithm</db:link>).</db:para>
<db:para>To generate a message authentication code, pass a suitable hash algorithm and secret key to the constructor. Then process the message data by calling <db:link xlink:href="qmessageauthenticationcode.xml#addData">addData</db:link>() one or more times. After the full message has been processed, get the final authentication code via the <db:link xlink:href="qmessageauthenticationcode.xml#result">result</db:link>() function:</db:para>
<db:programlisting language="cpp">    QByteArray key = &quot;key&quot;;
    QByteArray message = &quot;The quick brown fox jumps over the lazy dog&quot;;
    ...
    QMessageAuthenticationCode code(QCryptographicHash::Sha256, key);
    code.addData(message);
    code.result().toHex(); // returns &quot;f7bc83f430538424b13298e6aa6fb143ef4d59a14946175997479dbc2d1a3cd8&quot;
</db:programlisting>
<db:para>For simple cases like above, you can also use the static <db:link xlink:href="qmessageauthenticationcode.xml#hash">hash</db:link>() function:</db:para>
<db:programlisting language="cpp">    QMessageAuthenticationCode::hash(message, key, QCryptographicHash::Sha256).toHex();
</db:programlisting>
<db:note>
<db:para>The cryptographic strength of the HMAC depends upon the size of the secret key, and the security of the underlying hash function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcryptographichash.xml">QCryptographicHash</db:link></db:member>
<db:member><db:link xlink:href="qcryptographichash.xml#Algorithm-enum">QCryptographicHash::Algorithm</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="hashInto">
<db:title>[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;char&gt; <db:emphasis>buffer</db:emphasis>, QByteArrayView <db:emphasis>message</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="hashInto-1">[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;char&gt; <db:emphasis>buffer</db:emphasis>, QSpan&lt;const QByteArrayView&gt; <db:emphasis>messageParts</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="hashInto-2">[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;std::byte&gt; <db:emphasis>buffer</db:emphasis>, QByteArrayView <db:emphasis>message</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="hashInto-3">[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;std::byte&gt; <db:emphasis>buffer</db:emphasis>, QSpan&lt;const QByteArrayView&gt; <db:emphasis>messageParts</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="hashInto-4">[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;uchar&gt; <db:emphasis>buffer</db:emphasis>, QByteArrayView <db:emphasis>message</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="hashInto-5">[static noexcept, since 6.8] QByteArrayView QMessageAuthenticationCode::hashInto(QSpan&lt;uchar&gt; <db:emphasis>buffer</db:emphasis>, QSpan&lt;const QByteArrayView&gt; <db:emphasis>messageParts</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:bridgehead>
<db:para>Returns the authentication code for the message (<db:code role="parameter">message</db:code> or, for the <db:link xlink:href="qspan.xml">QSpan</db:link> overloads, the concatenation of <db:code role="parameter">messageParts</db:code>) using the key <db:code role="parameter">key</db:code> and the method <db:code role="parameter">method</db:code>.</db:para>
<db:para>The return value will be a sub-span of <db:code role="parameter">buffer</db:code>, unless <db:code role="parameter">buffer</db:code> is of insufficient size, in which case a null <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link> is returned.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#hash">hash</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMessageAuthenticationCode-1">
<db:title>[explicit] QMessageAuthenticationCode::QMessageAuthenticationCode(QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis> = {})</db:title>
<db:para>Constructs an object that can be used to create a cryptographic hash from data using method <db:code role="parameter">method</db:code> and key <db:code role="parameter">key</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.6, this function took its arguments as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. If you experience compile errors, it's because your code is passing objects that are implicitly convertible to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, but not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. Wrap the corresponding argument in QByteArray{~~~} to make the cast explicit. This is backwards-compatible with old Qt versions.</db:para>
</db:note>
</db:section>
<db:section xml:id="QMessageAuthenticationCode">
<db:title>[noexcept, since 6.6] QMessageAuthenticationCode::QMessageAuthenticationCode(QMessageAuthenticationCode &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a new <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new object.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="dtor.QMessageAuthenticationCode">
<db:title>[noexcept] QMessageAuthenticationCode::~QMessageAuthenticationCode()</db:title>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="addData">
<db:title>[noexcept] void QMessageAuthenticationCode::addData(QByteArrayView <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">data</db:code> to the message.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.6, this function took its arguments as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. If you experience compile errors, it's because your code is passing objects that are implicitly convertible to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, but not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. Wrap the corresponding argument in QByteArray{~~~} to make the cast explicit. This is backwards-compatible with old Qt versions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#resultView">resultView</db:link>()</db:member>
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addData-1">
<db:title>bool QMessageAuthenticationCode::addData(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Reads the data from the open <db:link xlink:href="qiodevice.xml">QIODevice</db:link> <db:code role="parameter">device</db:code> until it ends and adds it to message. Returns true if reading was successful.</db:para>
<db:note>
<db:para><db:code role="parameter">device</db:code> must be already opened.</db:para>
</db:note>
</db:section>
<db:section xml:id="addData-2">
<db:title>void QMessageAuthenticationCode::addData(const char *<db:emphasis>data</db:emphasis>, qsizetype <db:emphasis>length</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the first <db:code role="parameter">length</db:code> chars of <db:code role="parameter">data</db:code> to the message.</db:para>
</db:section>
<db:section xml:id="hash">
<db:title>[static] QByteArray QMessageAuthenticationCode::hash(QByteArrayView <db:emphasis>message</db:emphasis>, QByteArrayView <db:emphasis>key</db:emphasis>, QCryptographicHash::Algorithm <db:emphasis>method</db:emphasis>)</db:title>
<db:para>Returns the authentication code for the message <db:code role="parameter">message</db:code> using the key <db:code role="parameter">key</db:code> and the method <db:code role="parameter">method</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.6, this function took its arguments as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. If you experience compile errors, it's because your code is passing objects that are implicitly convertible to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, but not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. Wrap the corresponding argument in QByteArray{~~~} to make the cast explicit. This is backwards-compatible with old Qt versions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#hashInto">hashInto</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[noexcept] void QMessageAuthenticationCode::reset()</db:title>
<db:para>Resets message data. Calling this function doesn't affect the key.</db:para>
</db:section>
<db:section xml:id="result">
<db:title>QByteArray QMessageAuthenticationCode::result() const</db:title>
<db:para>Returns the final authentication code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#resultView">resultView</db:link>()</db:member>
<db:member><db:link xlink:href="qbytearray.xml#toHex">QByteArray::toHex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resultView">
<db:title>[noexcept, since 6.6] QByteArrayView QMessageAuthenticationCode::resultView() const</db:title>
<db:para>Returns the final hash value.</db:para>
<db:para>Note that the returned view remains valid only as long as the <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> object is not modified by other means.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmessageauthenticationcode.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setKey">
<db:title>[noexcept] void QMessageAuthenticationCode::setKey(QByteArrayView <db:emphasis>key</db:emphasis>)</db:title>
<db:para>Sets secret <db:code role="parameter">key</db:code>. Calling this function automatically resets the object state.</db:para>
<db:para>For optimal performance, call this function only to <db:emphasis>change</db:emphasis> the active key, not to set an <db:emphasis>initial</db:emphasis> key, as in</db:para>
<db:programlisting language="cpp">QMessageAuthenticationCode mac(method);
mac.setKey(key); // does extra work
use(mac);
</db:programlisting>
<db:para>Prefer to pass initial keys as the constructor argument:</db:para>
<db:programlisting language="cpp">QMessageAuthenticationCode mac(method, key); // OK, optimal
use(mac);
</db:programlisting>
<db:para>You can use std::optional to delay construction of a <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> until you know the key:</db:para>
<db:programlisting language="cpp">std::optional&lt;QMessageAuthenticationCode&gt; mac;
~~~
key = ~~~;
mac.emplace(method, key);
use(*mac);
</db:programlisting>
<db:note>
<db:para>In Qt versions prior to 6.6, this function took its arguments as <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. If you experience compile errors, it's because your code is passing objects that are implicitly convertible to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, but not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>. Wrap the corresponding argument in QByteArray{~~~} to make the cast explicit. This is backwards-compatible with old Qt versions.</db:para>
</db:note>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 6.6] void QMessageAuthenticationCode::swap(QMessageAuthenticationCode &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this message authentication code with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept, since 6.6] QMessageAuthenticationCode &amp;QMessageAuthenticationCode::operator=(QMessageAuthenticationCode &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qmessageauthenticationcode.xml">QMessageAuthenticationCode</db:link> instance.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new object.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
</db:section>
</db:article>
