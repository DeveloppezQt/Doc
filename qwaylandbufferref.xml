<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandBufferRef Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> class holds the reference to a surface buffer.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandBufferRef</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class can be used to reference a surface buffer. As long as a reference to the buffer exists, it is owned by the compositor and the client cannot modify it.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandBufferRef">
<db:title>QWaylandBufferRef::QWaylandBufferRef()</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandBufferRef</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandBufferRef()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null buffer ref.</db:para>
</db:section>
<db:section xml:id="QWaylandBufferRef-1">
<db:title>QWaylandBufferRef::QWaylandBufferRef(const QWaylandBufferRef &amp;<db:emphasis>ref</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandBufferRef</db:methodname>
<db:methodparam>
<db:type>const QWaylandBufferRef &amp;</db:type>
<db:parameter>ref</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandBufferRef(const QWaylandBufferRef &amp;ref)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new reference to the buffer referenced by <db:code role="parameter">ref</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWaylandBufferRef">
<db:title>QWaylandBufferRef::~QWaylandBufferRef()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWaylandBufferRef</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWaylandBufferRef()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Dereferences the buffer.</db:para>
</db:section>
<db:section xml:id="hasBuffer">
<db:title>bool QWaylandBufferRef::hasBuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasBuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasBuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> references a buffer. Otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandbufferref.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qwaylandbufferref.xml#hasContent">hasContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasContent">
<db:title>bool QWaylandBufferRef::hasContent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasContent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasContent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> references a buffer that has content. Otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandbufferref.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qwaylandbufferref.xml#hasBuffer">hasBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="image">
<db:title>int QWaylandBufferRef::image() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>image</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int image() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an image with the contents of the buffer.</db:para>
</db:section>
<db:section xml:id="isDestroyed">
<db:title>bool QWaylandBufferRef::isDestroyed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDestroyed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDestroyed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> references a buffer that has been destroyed. Otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QWaylandBufferRef::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> does not reference a buffer. Otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandbufferref.xml#hasBuffer">hasBuffer</db:link>()</db:member>
<db:member><db:link xlink:href="qwaylandbufferref.xml#hasContent">hasContent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSharedMemory">
<db:title>bool QWaylandBufferRef::isSharedMemory() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSharedMemory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSharedMemory() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the buffer is a shared memory buffer. Otherwise returns false.</db:para>
</db:section>
<db:section xml:id="origin">
<db:title>int QWaylandBufferRef::origin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>origin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int origin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the origin of the buffer. If the buffer referenced is null, QWaylandSurface::OriginBottomLeft is returned.</db:para>
</db:section>
<db:section xml:id="size">
<db:title>int QWaylandBufferRef::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the buffer. If the buffer referenced is null, an invalid QSize() is returned.</db:para>
</db:section>
<db:section xml:id="wl_buffer">
<db:title>struct wl_resource *QWaylandBufferRef::wl_buffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>struct wl_resource *</db:type>
<db:methodname>wl_buffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">struct wl_resource * wl_buffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Wayland resource for the buffer.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QWaylandBufferRef::operator!=(const QWaylandBufferRef &amp;<db:emphasis>ref</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QWaylandBufferRef &amp;</db:type>
<db:parameter>ref</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QWaylandBufferRef &amp;ref)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns false if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> references the same buffer as <db:code role="parameter">ref</db:code>. Otherwise returns true.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QWaylandBufferRef &amp;QWaylandBufferRef::operator=(const QWaylandBufferRef &amp;<db:emphasis>ref</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QWaylandBufferRef &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QWaylandBufferRef &amp;</db:type>
<db:parameter>ref</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandBufferRef &amp; operator=(const QWaylandBufferRef &amp;ref)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">ref</db:code> to this buffer and adds a reference to it. The previously referenced buffer is dereferenced.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QWaylandBufferRef::operator==(const QWaylandBufferRef &amp;<db:emphasis>ref</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QWaylandBufferRef &amp;</db:type>
<db:parameter>ref</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QWaylandBufferRef &amp;ref)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qwaylandbufferref.xml">QWaylandBufferRef</db:link> references the same buffer as <db:code role="parameter">ref</db:code>. Otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
