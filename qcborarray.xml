<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCborArray Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcborarray.xml">QCborArray</db:link> class is used to hold an array of CBOR elements.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCborArray</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QCborArray is part of <db:simplelist><db:member><db:link xlink:href="cbor.xml">CBOR Support in Qt</db:link></db:member><db:member>qtserialization</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class can be used to hold one sequential container in CBOR (an array). CBOR is the Concise Binary Object Representation, a very compact form of binary data encoding that is a superset of JSON. It was created by the IETF Constrained RESTful Environments (CoRE) WG, which has used it in many new RFCs. It is meant to be used alongside the <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc7252">CoAP protocol</db:link>.</db:para>
<db:para><db:link xlink:href="qcborarray.xml">QCborArray</db:link> is very similar to <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> and <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and its API is almost identical to those two classes. It can also be converted to and from those two, though there may be loss of information in some conversions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborvalue.xml">QCborValue</db:link></db:member>
<db:member><db:link xlink:href="qcbormap.xml">QCborMap</db:link></db:member>
<db:member><db:link xlink:href="qjsonarray.xml">QJsonArray</db:link></db:member>
<db:member><db:link xlink:href="qlist.xml">QList</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-cbordump-example.xml">Parsing and displaying CBOR data</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-convert-example.xml">Serialization Converter</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-savegame-example.xml">Saving and Loading a Game</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>QCborArray::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym to <db:link xlink:href="qcborarray-constiterator.xml">QCborArray::ConstIterator</db:link>.</db:para>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>QCborArray::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to const QCborValue *, for compatibility with generic algorithms.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>QCborArray::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to const QCborValue &amp;, for compatibility with generic algorithms.</db:para>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>QCborArray::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to qsizetype.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>QCborArray::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym to <db:link xlink:href="qcborarray-iterator.xml">QCborArray::Iterator</db:link>.</db:para>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>QCborArray::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to QCborValue *, for compatibility with generic algorithms.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>QCborArray::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to QCborValue &amp;, for compatibility with generic algorithms.</db:para>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>QCborArray::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A typedef to qsizetype.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>QCborArray::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The type of values that can be held in a <db:link xlink:href="qcborarray.xml">QCborArray</db:link>: that is, <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="insert-1">
<db:title>void QCborArray::insert(qsizetype <db:emphasis>i</db:emphasis>, QCborValue &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="insert">void QCborArray::insert(qsizetype <db:emphasis>i</db:emphasis>, const QCborValue &amp;<db:emphasis>value</db:emphasis>)</db:bridgehead>
<db:para>Inserts <db:code role="parameter">value</db:code> into the array at position <db:code role="parameter">i</db:code> in this array. If <db:code role="parameter">i</db:code> is -1, the entry is appended to the array. Pads the array with invalid entries if <db:code role="parameter">i</db:code> is greater than the prior size of the array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#extract">extract</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extract">
<db:title>QCborValue QCborArray::extract(QCborArray::ConstIterator <db:emphasis>it</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="extract-1">QCborValue QCborArray::extract(QCborArray::Iterator <db:emphasis>it</db:emphasis>)</db:bridgehead>
<db:para>Extracts a value from the array at the position indicated by iterator <db:code role="parameter">it</db:code> and returns the value so extracted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#erase">erase</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepend-1">
<db:title>void QCborArray::prepend(QCborValue &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="prepend">void QCborArray::prepend(const QCborValue &amp;<db:emphasis>value</db:emphasis>)</db:bridgehead>
<db:para>Prepends <db:code role="parameter">value</db:code> into the array before any other elements it may already contain.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="append-1">
<db:title>void QCborArray::append(QCborValue &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="append">void QCborArray::append(const QCborValue &amp;<db:emphasis>value</db:emphasis>)</db:bridgehead>
<db:para>Appends <db:code role="parameter">value</db:code> into the array after all other elements it may already contain.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-3">
<db:title>QCborArray::iterator QCborArray::insert(QCborArray::const_iterator <db:emphasis>before</db:emphasis>, const QCborValue &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="insert-2">QCborArray::iterator QCborArray::insert(QCborArray::iterator <db:emphasis>before</db:emphasis>, const QCborValue &amp;<db:emphasis>value</db:emphasis>)</db:bridgehead>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts <db:code role="parameter">value</db:code> into this array before element <db:code role="parameter">before</db:code> and returns an array iterator pointing to the just-inserted element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#erase">erase</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="erase-1">
<db:title>QCborArray::iterator QCborArray::erase(QCborArray::const_iterator <db:emphasis>it</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="erase">QCborArray::iterator QCborArray::erase(QCborArray::iterator <db:emphasis>it</db:emphasis>)</db:bridgehead>
<db:para>Removes the element pointed to by the array iterator <db:code role="parameter">it</db:code> from this array, then returns an iterator to the next element (the one that took the same position in the array that <db:code role="parameter">it</db:code> used to occupy).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeFirst">takeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeLast">takeLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QCborArray">
<db:title>QCborArray::QCborArray()</db:title>
<db:constructorsynopsis>
<db:methodname>QCborArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qcborarray.xml">QCborArray</db:link>.</db:para>
</db:section>
<db:section xml:id="QCborArray-2">
<db:title>QCborArray::QCborArray(std::initializer_list&lt;QCborValue&gt; <db:emphasis>args</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCborArray</db:methodname>
<db:methodparam>
<db:type>std::initializer_list&lt;QCborValue&gt;</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray(std::initializer_list&lt;QCborValue&gt; args)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Initializes this <db:link xlink:href="qcborarray.xml">QCborArray</db:link> from the C++ brace-enclosed list found in <db:code role="parameter">args</db:code>, as in the following example:</db:para>
<db:programlisting language="cpp">QCborArray a = { null, 0, 1, 1.5, 2, &quot;Hello&quot;, QByteArray(&quot;World&quot;) };
</db:programlisting>
</db:section>
<db:section xml:id="QCborArray-1">
<db:title>QCborArray::QCborArray(const QCborArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCborArray</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray(const QCborArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Copies the contents of <db:code role="parameter">other</db:code> into this object.</db:para>
</db:section>
<db:section xml:id="dtor.QCborArray">
<db:title>QCborArray::~QCborArray()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCborArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCborArray()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and frees any associated resources.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>QCborValue QCborArray::at(qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValue</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue at(qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> element at position <db:code role="parameter">i</db:code> in the array.</db:para>
<db:para>If the array is smaller than <db:code role="parameter">i</db:code> elements, this function returns a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> containing an undefined value. For that reason, it is not possible with this function to tell apart the situation where the array is not large enough from the case where the array starts with an undefined value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QCborArray::iterator QCborArray::begin()</db:title>
<db:methodsynopsis>
<db:type>QCborArray::iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::iterator begin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to the first item in this array. If the array is empty, then this function returns the same as <db:link xlink:href="qcborarray.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin-1">
<db:title>QCborArray::const_iterator QCborArray::begin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator begin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to the first item in this array. If the array is empty, then this function returns the same as <db:link xlink:href="qcborarray.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cbegin">
<db:title>QCborArray::const_iterator QCborArray::cbegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>cbegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator cbegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to the first item in this array. If the array is empty, then this function returns the same as <db:link xlink:href="qcborarray.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>QCborArray::const_iterator QCborArray::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to just after the last element in this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QCborArray::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Empties this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compare">
<db:title>int QCborArray::compare(const QCborArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>compare</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int compare(const QCborArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this array and <db:code role="parameter">other</db:code>, comparing each element in sequence, and returns an integer that indicates whether this array should be sorted before (if the result is negative) or after <db:code role="parameter">other</db:code> (if the result is positive). If this function returns 0, the two arrays are equal and contain the same elements.</db:para>
<db:para>For more information on CBOR sorting order, see <db:link xlink:href="qcborvalue.xml#compare">QCborValue::compare</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborvalue.xml#compare">QCborValue::compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#compare">QCborMap::compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constBegin">
<db:title>QCborArray::const_iterator QCborArray::constBegin() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>constBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator constBegin() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to the first item in this array. If the array is empty, then this function returns the same as <db:link xlink:href="qcborarray.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constEnd">
<db:title>QCborArray::const_iterator QCborArray::constEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>constEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator constEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to just after the last element in this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QCborArray::contains(const QCborValue &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QCborValue &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this array contains an element that is equal to <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="empty">
<db:title>bool QCborArray::empty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>empty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool empty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synonym for <db:link xlink:href="qcborarray.xml#isEmpty">isEmpty</db:link>(). This function is provided for compatibility with generic code that uses the Standard Library API.</db:para>
<db:para>Returns true if this array is empty (<db:link xlink:href="qcborarray.xml#size">size</db:link>() == 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>QCborArray::iterator QCborArray::end()</db:title>
<db:methodsynopsis>
<db:type>QCborArray::iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::iterator end()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to just after the last element in this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end-1">
<db:title>QCborArray::const_iterator QCborArray::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray::const_iterator</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray::const_iterator end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an array iterator pointing to just after the last element in this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#constBegin">constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#constEnd">constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first">
<db:title>QCborValue QCborArray::first() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValue</db:type>
<db:methodname>first</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue first() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> of this array.</db:para>
<db:para>If the array is empty, this function returns a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> containing an undefined value. For that reason, it is not possible with this function to tell apart the situation where the array is not large enough from the case where the array ends with an undefined value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="first-1">
<db:title>QCborValueRef QCborArray::first()</db:title>
<db:methodsynopsis>
<db:type>QCborValueRef</db:type>
<db:methodname>first</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef first()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the first <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> of this array. The array must not be empty.</db:para>
<db:para>QCborValueRef has the exact same API as <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>, with one important difference: if you assign new values to it, this array will be updated with that new value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJsonArray">
<db:title>[static] QCborArray QCborArray::fromJsonArray(const QJsonArray &amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCborArray</db:type>
<db:methodname>fromJsonArray</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray fromJsonArray(const QJsonArray &amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts all JSON items found in the <db:code role="parameter">array</db:code> array to CBOR using QCborValue::fromJson(), and returns the CBOR array composed of those elements.</db:para>
<db:para>This conversion is lossless, as the CBOR type system is a superset of JSON's. Moreover, the array returned by this function can be converted back to the original <db:code role="parameter">array</db:code> by using <db:link xlink:href="qcborarray.xml#toJsonArray">toJsonArray</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#toJsonArray">toJsonArray</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#toVariantList">toVariantList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#fromJsonValue">QCborValue::fromJsonValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#fromJsonObject">QCborMap::fromJsonObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromJsonArray-1">
<db:title>[static, since 6.3] QCborArray QCborArray::fromJsonArray(QJsonArray &amp;&amp;<db:emphasis>array</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCborArray</db:type>
<db:methodname>fromJsonArray</db:methodname>
<db:methodparam>
<db:type>QJsonArray &amp;&amp;</db:type>
<db:parameter>array</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray fromJsonArray(QJsonArray &amp;&amp;array)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
</db:section>
<db:section xml:id="fromStringList">
<db:title>[static] QCborArray QCborArray::fromStringList(const QStringList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCborArray</db:type>
<db:methodname>fromStringList</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray fromStringList(const QStringList &amp;list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qcborarray.xml">QCborArray</db:link> containing all the strings found in the <db:code role="parameter">list</db:code> list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#fromVariantList">fromVariantList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#fromJsonArray">fromJsonArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVariantList">
<db:title>[static] QCborArray QCborArray::fromVariantList(const QVariantList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QCborArray</db:type>
<db:methodname>fromVariantList</db:methodname>
<db:methodparam>
<db:type>const QVariantList &amp;</db:type>
<db:parameter>list</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray fromVariantList(const QVariantList &amp;list)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts all the items in the <db:code role="parameter">list</db:code> to CBOR using <db:link xlink:href="qcborvalue.xml#fromVariant">QCborValue::fromVariant</db:link>() and returns the array composed of those elements.</db:para>
<db:para>Conversion from <db:link xlink:href="qvariant.xml">QVariant</db:link> is not completely lossless. Please see the documentation in <db:link xlink:href="qcborvalue.xml#fromVariant">QCborValue::fromVariant</db:link>() for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#toVariantList">toVariantList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#fromStringList">fromStringList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#fromJsonArray">fromJsonArray</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#fromVariantMap">QCborMap::fromVariantMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QCborArray::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qcborarray.xml">QCborArray</db:link> is empty (that is if <db:link xlink:href="qcborarray.xml#size">size</db:link>() is 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last">
<db:title>QCborValue QCborArray::last() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValue</db:type>
<db:methodname>last</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue last() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> of this array.</db:para>
<db:para>If the array is empty, this function returns a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> containing an undefined value. For that reason, it is not possible with this function to tell apart the situation where the array is not large enough from the case where the array ends with an undefined value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="last-1">
<db:title>QCborValueRef QCborArray::last()</db:title>
<db:methodsynopsis>
<db:type>QCborValueRef</db:type>
<db:methodname>last</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef last()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the last <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> of this array. The array must not be empty.</db:para>
<db:para>QCborValueRef has the exact same API as <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>, with one important difference: if you assign new values to it, this array will be updated with that new value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pop_back">
<db:title>void QCborArray::pop_back()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pop_back</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pop_back()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synonym for <db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>(). This function is provided for compatibility with generic code that uses the Standard Library API.</db:para>
<db:para>Removes the last element of this array. The array must not be empty before the removal</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeLast">takeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#pop_front">pop_front</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#push_back">push_back</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pop_front">
<db:title>void QCborArray::pop_front()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pop_front</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pop_front()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synonym for <db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>(). This function is provided for compatibility with generic code that uses the Standard Library API.</db:para>
<db:para>Removes the first element of this array. The array must not be empty before the removal</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeFirst">takeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#pop_back">pop_back</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#push_front">push_front</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push_back">
<db:title>void QCborArray::push_back(const QCborValue &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_back</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_back(const QCborValue &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synonym for <db:link xlink:href="qcborarray.xml#append">append</db:link>(). This function is provided for compatibility with generic code that uses the Standard Library API.</db:para>
<db:para>Appends the element <db:code role="parameter">t</db:code> to this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#push_front">push_front</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#pop_back">pop_back</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="push_front">
<db:title>void QCborArray::push_front(const QCborValue &amp;<db:emphasis>t</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>push_front</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void push_front(const QCborValue &amp;t)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Synonym for <db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>(). This function is provided for compatibility with generic code that uses the Standard Library API.</db:para>
<db:para>Prepends the element <db:code role="parameter">t</db:code> to this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#push_back">push_back</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#pop_front">pop_front</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAt">
<db:title>void QCborArray::removeAt(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeAt</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeAt(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the item at position <db:code role="parameter">i</db:code> from the array. The array must have more than <db:code role="parameter">i</db:code> elements before the removal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeFirst">
<db:title>void QCborArray::removeFirst()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeFirst</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeFirst()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the first item in the array, making the second element become the first. The array must not be empty before this call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeFirst">takeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeLast">
<db:title>void QCborArray::removeLast()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeLast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeLast()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last item in the array. The array must not be empty before this call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeLast">takeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qsizetype QCborArray::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QCborArray::swap(QCborArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QCborArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the contents of this object and <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="takeAt">
<db:title>QCborValue QCborArray::takeAt(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborValue</db:type>
<db:methodname>takeAt</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue takeAt(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the item at position <db:code role="parameter">i</db:code> from the array and returns it. The array must have more than <db:code role="parameter">i</db:code> elements before the removal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeFirst">
<db:title>QCborValue QCborArray::takeFirst()</db:title>
<db:methodsynopsis>
<db:type>QCborValue</db:type>
<db:methodname>takeFirst</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue takeFirst()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the first item in the array and returns it, making the second element become the first. The array must not be empty before this call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeLast">
<db:title>QCborValue QCborArray::takeLast()</db:title>
<db:methodsynopsis>
<db:type>QCborValue</db:type>
<db:methodname>takeLast</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue takeLast()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last item in the array and returns it. The array must not be empty before this call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeLast">removeLast</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeFirst">removeFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-5b-5d">operator[]</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCborValue">
<db:title>QCborValue QCborArray::toCborValue() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValue</db:type>
<db:methodname>toCborValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue toCborValue() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Explicitly construcuts a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> object that represents this array. This function is usually not necessary since <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> has a constructor for <db:link xlink:href="qcborarray.xml">QCborArray</db:link>, so the conversion is implicit.</db:para>
<db:para>Converting <db:link xlink:href="qcborarray.xml">QCborArray</db:link> to <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> allows it to be used in any context where QCborValues can be used, including as items in QCborArrays and as keys and mapped types in <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. Converting an array to <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> allows access to <db:link xlink:href="qcborvalue.xml#toCbor">QCborValue::toCbor</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborvalue.xml#QCborValue-12">QCborValue::QCborValue</db:link>(const QCborArray &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toJsonArray">
<db:title>QJsonArray QCborArray::toJsonArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonArray</db:type>
<db:methodname>toJsonArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonArray toJsonArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Recursively converts every <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> element in this array to JSON using <db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>() and returns the corresponding <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> composed of those elements.</db:para>
<db:para>Please note that CBOR contains a richer and wider type set than JSON, so some information may be lost in this conversion. For more details on what conversions are applied, see <db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#fromJsonArray">fromJsonArray</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#toJsonObject">QCborMap::toJsonObject</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#toVariantList">toVariantList</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toVariantList">
<db:title>QVariantList QCborArray::toVariantList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantList</db:type>
<db:methodname>toVariantList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantList toVariantList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Recursively converts each <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> in this array using <db:link xlink:href="qcborvalue.xml#toVariant">QCborValue::toVariant</db:link>() and returns the <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> composed of the converted items.</db:para>
<db:para>Conversion to <db:link xlink:href="qvariant.xml">QVariant</db:link> is not completely lossless. Please see the documentation in <db:link xlink:href="qcborvalue.xml#toVariant">QCborValue::toVariant</db:link>() for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#fromVariantList">fromVariantList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#fromStringList">fromStringList</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#toJsonArray">toJsonArray</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#toVariant">QCborValue::toVariant</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#toVariantMap">QCborMap::toVariantMap</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QCborArray::operator!=(const QCborArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QCborArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this array and <db:code role="parameter">other</db:code>, comparing each element in sequence, and returns true if the two arrays' contents are different, false otherwise.</db:para>
<db:para>For more information on CBOR equality in Qt, see, <db:link xlink:href="qcborvalue.xml#compare">QCborValue::compare</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#operator-eq-eq">QCborValue::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#operator-eq-eq">QCborMap::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-lt">operator&lt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QCborArray QCborArray::operator+(const QCborValue &amp;<db:emphasis>v</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborArray</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray operator+(const QCborValue &amp;v) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qcborarray.xml">QCborArray</db:link> containing the same elements as this array, plus <db:code role="parameter">v</db:code> appended as the last element.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-lt-lt">operator&lt;&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QCborArray &amp;QCborArray::operator+=(const QCborValue &amp;<db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborArray &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray &amp; operator+=(const QCborValue &amp;v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">v</db:code> to this array and returns a reference to this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-lt-lt">operator&lt;&lt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QCborArray::operator&lt;(const QCborArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QCborArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this array and <db:code role="parameter">other</db:code>, comparing each element in sequence, and returns true if this array should be sorted before <db:code role="parameter">other</db:code>, false otherwise.</db:para>
<db:para>For more information on CBOR sorting order, see <db:link xlink:href="qcborvalue.xml#compare">QCborValue::compare</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#operator-eq-eq">QCborValue::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#operator-eq-eq">QCborMap::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-eq-eq">operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QCborArray &amp;QCborArray::operator&lt;&lt;(const QCborValue &amp;<db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborArray &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QCborValue &amp;</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray &amp; operator&lt;&lt;(const QCborValue &amp;v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">v</db:code> to this array and returns a reference to this array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCborArray &amp;QCborArray::operator=(const QCborArray &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborArray &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborArray &amp; operator=(const QCborArray &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces the contents of this array with that found in <db:code role="parameter">other</db:code>, then returns a reference to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QCborArray::operator==(const QCborArray &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QCborArray &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QCborArray &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this array and <db:code role="parameter">other</db:code>, comparing each element in sequence, and returns true if both arrays contains the same elements, false otherwise.</db:para>
<db:para>For more information on CBOR equality in Qt, see, <db:link xlink:href="qcborvalue.xml#compare">QCborValue::compare</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#compare">compare</db:link>()</db:member>
<db:member><db:link xlink:href="qcborvalue.xml#operator-eq-eq">QCborValue::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#operator-eq-eq">QCborMap::operator==</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#operator-lt">operator&lt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>const QCborValue QCborArray::operator[](qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QCborValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QCborValue operator[](qsizetype i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> element at position <db:code role="parameter">i</db:code> in the array.</db:para>
<db:para>If the array is smaller than <db:code role="parameter">i</db:code> elements, this function returns a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> containing an undefined value. For that reason, it is not possible with this function to tell apart the situation where the array is not large enough from the case where the array contains an undefined value at position <db:code role="parameter">i</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>QCborValueRef QCborArray::operator[](qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCborValueRef</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef operator[](qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> element at position <db:code role="parameter">i</db:code> in the array. Indices beyond the end of the array will grow the array, filling with undefined entries, until it has an entry at the specified index.</db:para>
<db:para>QCborValueRef has the exact same API as <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>, with one important difference: if you assign new values to it, this array will be updated with that new value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcborarray.xml#at">at</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#first">first</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#last">last</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#prepend">prepend</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qcborarray.xml#takeAt">takeAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
