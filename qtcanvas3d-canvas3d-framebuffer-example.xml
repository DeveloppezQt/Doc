<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Framebuffer Example</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>QtCanvas3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Render into a framebuffer and use it as a texture.</db:para>
<db:para>This documentation was introduced in QtCanvas3D 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Framebuffer Example shows how to render into a framebuffer, create a texture of it, and apply the texture to an object in normal on-screen rendering.</db:para>
<db:para>The example has a moving and rotating cube, which has another textured cube drawn into it via the framebuffer object. The cube in the framebuffer can be rotated using Sliders from <db:link xlink:href="">Qt Quick Controls</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/framebuffer-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="preparing-the-framebuffer">
<db:title>Preparing the Framebuffer</db:title>
<db:para>We first define the variables we need for the render-to-texture framebuffer:</db:para>
<db:programlisting language="cpp">var rttFramebuffer;
var rttTexture;
var rttWidth = 512;
var rttHeight = 512;
</db:programlisting>
<db:para>Then, in the <db:code>initGL</db:code> function, we create the framebuffer object:</db:para>
<db:programlisting language="cpp">// Create the framebuffer object
rttFramebuffer = gl.createFramebuffer();
rttFramebuffer.name = &quot;OffscreenRenderTarget&quot;;
gl.bindFramebuffer(gl.FRAMEBUFFER, rttFramebuffer);
</db:programlisting>
</db:section>
<db:section xml:id="creating-the-texture">
<db:title>Creating the Texture</db:title>
<db:para>After the creation of the framebuffer, we create the texture:</db:para>
<db:programlisting language="cpp">// Create the texture
rttTexture = gl.createTexture();
rttTexture.name = &quot;OffscreenRenderTargetTexture&quot;;
gl.bindTexture(gl.TEXTURE_2D, rttTexture);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
gl.texImage2D(gl.TEXTURE_2D, 0,
              gl.RGBA, rttWidth, rttHeight,
              0, gl.RGBA, gl.UNSIGNED_BYTE,
              null);
gl.generateMipmap(gl.TEXTURE_2D);
</db:programlisting>
<db:para>Then we need to bind the texture as a color attachment, create and bind a render buffer, and bind the depth attachment:</db:para>
<db:programlisting language="cpp">// Bind the texture as color attachment, create and bind a depth buffer
gl.framebufferTexture2D(gl.FRAMEBUFFER,
                        gl.COLOR_ATTACHMENT0,
                        gl.TEXTURE_2D, rttTexture, 0);
var renderbuffer = gl.createRenderbuffer();
gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
gl.renderbufferStorage(gl.RENDERBUFFER,
                       gl.DEPTH_COMPONENT16,
                       rttWidth, rttHeight);
gl.framebufferRenderbuffer(gl.FRAMEBUFFER,
                           gl.DEPTH_ATTACHMENT,
                           gl.RENDERBUFFER, renderbuffer);
</db:programlisting>
</db:section>
<db:section xml:id="rendering-into-the-framebuffer">
<db:title>Rendering into the Framebuffer</db:title>
<db:para>In <db:code>renderGL</db:code> function, we first need to draw the scene into the framebuffer. We start by binding the framebuffer object and setting a viewport:</db:para>
<db:programlisting language="cpp">// bind the FBO and setup viewport
gl.bindFramebuffer(gl.FRAMEBUFFER, rttFramebuffer);
gl.viewport(0, 0, rttWidth, rttHeight);
</db:programlisting>
<db:para>Then, we need to bind the loaded texture we want to use in rendering into the framebuffer object:</db:para>
<db:programlisting language="cpp">// Bind the loaded texture
gl.bindTexture(gl.TEXTURE_2D, cubeTexture);
</db:programlisting>
<db:para>And then we can draw the textured cube into the framebuffer:</db:para>
<db:programlisting language="cpp">// Draw the cube to the FBO
gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_SHORT, 0);
</db:programlisting>
</db:section>
<db:section xml:id="using-the-framebuffer-as-a-texture">
<db:title>Using the Framebuffer as a Texture</db:title>
<db:para>First, we bind the render-to-texture right after drawing, and generate mipmaps:</db:para>
<db:programlisting language="cpp">// Bind the render-to-texture and generate mipmaps
gl.bindTexture(gl.TEXTURE_2D, rttTexture);
gl.generateMipmap(gl.TEXTURE_2D);
</db:programlisting>
<db:para>Then we need to bind the default framebuffer (screen), and set up the viewport:</db:para>
<db:programlisting language="cpp">// Bind default framebuffer and setup viewport accordingly
gl.bindFramebuffer(gl.FRAMEBUFFER, 0);
gl.viewport(0, 0,
            canvas.width * canvas.devicePixelRatio,
            canvas.height * canvas.devicePixelRatio);
</db:programlisting>
<db:para>And finally, we draw the on-screen view:</db:para>
<db:programlisting language="cpp">// Draw the on-screen cube
gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_SHORT, 0);
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/framebuffer.pro">canvas3d/framebuffer/framebuffer.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/framebuffer.qrc">canvas3d/framebuffer/framebuffer.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/main.cpp">canvas3d/framebuffer/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/qml/framebuffer/framebuffer.js">canvas3d/framebuffer/qml/framebuffer/framebuffer.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/qml/framebuffer/main.qml">canvas3d/framebuffer/qml/framebuffer/main.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="canvas3d/framebuffer/qml/framebuffer/qtlogo.png">canvas3d/framebuffer/qml/framebuffer/qtlogo.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
