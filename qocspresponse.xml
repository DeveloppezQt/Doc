<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOcspResponse Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This class represents Online Certificate Status Protocol response.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOcspResponse</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOcspResponse is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link> class represents the revocation status of a server's certificate, received by the client-side socket during the TLS handshake. <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> must be configured with OCSP stapling enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
<db:member><db:link xlink:href="qsslsocket.xml#ocspResponses">QSslSocket::ocspResponses</db:link>()</db:member>
<db:member><db:link xlink:href="qocspresponse.xml#certificateStatus">certificateStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qocspresponse.xml#revocationReason">revocationReason</db:link>()</db:member>
<db:member><db:link xlink:href="qocspresponse.xml#responder">responder</db:link>()</db:member>
<db:member><db:link xlink:href="qocspresponse.xml#subject">subject</db:link>()</db:member>
<db:member><db:link xlink:href="qocspresponse.xml#QOcspCertificateStatus-enum">QOcspCertificateStatus</db:link></db:member>
<db:member><db:link xlink:href="qocspresponse.xml#QOcspRevocationReason-enum">QOcspRevocationReason</db:link></db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#setOcspStaplingEnabled">QSslConfiguration::setOcspStaplingEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#ocspStaplingEnabled">QSslConfiguration::ocspStaplingEnabled</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#peerCertificate">QSslConfiguration::peerCertificate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOcspResponse">
<db:title>QOcspResponse::QOcspResponse()</db:title>
<db:para>Creates a new response with status <db:link xlink:href="qocspresponse.xml#QOcspCertificateStatus-enum">QOcspCertificateStatus::Unknown</db:link> and revocation reason <db:link xlink:href="qocspresponse.xml#QOcspRevocationReason-enum">QOcspRevocationReason::None</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qocspresponse.xml#QOcspCertificateStatus-enum">QOcspCertificateStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOcspResponse-2">
<db:title>QOcspResponse::QOcspResponse(const QOcspResponse &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy-constructs a <db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link> instance.</db:para>
</db:section>
<db:section xml:id="QOcspResponse-1">
<db:title>[noexcept] QOcspResponse::QOcspResponse(QOcspResponse &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link> instance.</db:para>
</db:section>
<db:section xml:id="dtor.QOcspResponse">
<db:title>[noexcept] QOcspResponse::~QOcspResponse()</db:title>
<db:para>Destroys the response.</db:para>
</db:section>
<db:section xml:id="certificateStatus">
<db:title>QOcspCertificateStatus QOcspResponse::certificateStatus() const</db:title>
<db:para>Returns the certificate status.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qocspresponse.xml#QOcspCertificateStatus-enum">QOcspCertificateStatus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="responder">
<db:title>class QSslCertificate QOcspResponse::responder() const</db:title>
<db:para>This function returns a certificate used to sign OCSP response.</db:para>
</db:section>
<db:section xml:id="revocationReason">
<db:title>QOcspRevocationReason QOcspResponse::revocationReason() const</db:title>
<db:para>Returns the reason for revocation.</db:para>
</db:section>
<db:section xml:id="subject">
<db:title>QSslCertificate QOcspResponse::subject() const</db:title>
<db:para>This function returns a certificate, for which this response was issued.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QOcspResponse::swap(QOcspResponse &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this response with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QOcspResponse &amp;QOcspResponse::operator=(QOcspResponse &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link> instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QOcspResponse &amp;QOcspResponse::operator=(const QOcspResponse &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy-assigns <db:code role="parameter">other</db:code> and returns a reference to this response.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QOcspCertificateStatus-enum">
<db:title>enum QOcspCertificateStatus</db:title>
<db:para>Describes the Online Certificate Status</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspCertificateStatus</db:emphasis>::Good</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The certificate is not revoked, but this does not necessarily mean that the certificate was ever issued or that the time at which the response was produced is within the certificate's validity interval.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspCertificateStatus</db:emphasis>::Revoked</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This state indicates that the certificate has been revoked (either permanently or temporarily - on hold).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspCertificateStatus</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This state indicates that the responder doesn't know about the certificate being requested.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qocspresponse.xml#QOcspRevocationReason-enum">QOcspRevocationReason</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QOcspRevocationReason-enum">
<db:title>enum QOcspRevocationReason</db:title>
<db:para>Describes the reason for revocation</db:para>
<db:para>This enumeration describes revocation reasons, defined in <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc5280#section-5.3.1">RFC 5280, section 5.3.1</db:link></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::Unspecified</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::KeyCompromise</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::CACompromise</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::AffiliationChanged</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::Superseded</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::CessationOfOperation</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::CertificateHold</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qocspresponse.xml">QOcspResponse</db:link></db:emphasis>::<db:emphasis role="bold">QOcspRevocationReason</db:emphasis>::RemoveFromCRL</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QOcspResponse &amp;<db:emphasis>lhs</db:emphasis>, const QOcspResponse &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are responses for different certificates, or signed by different responders, or have different revocation reasons, or different certificate statuses.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QOcspResponse &amp;<db:emphasis>lhs</db:emphasis>, const QOcspResponse &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are the responses for the same certificate, signed by the same responder, have the same revocation reason and the same certificate status.</db:para>
</db:section>
</db:section>
</db:article>
