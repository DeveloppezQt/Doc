<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Zoom Line Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create your own custom zooming effect.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The example shows how to create your own custom zooming effect with <db:link xlink:href="qrubberband.xml">QRubberBand</db:link> by using a mouse and how to use touch gestures for paning and zooming.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_zoomlinechart1.png"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_zoomlinechart2.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="customizing-zooming-effects">
<db:title>Customizing Zooming Effects</db:title>
<db:para>Let's first create a line series with some example data.</db:para>
<db:programlisting language="cpp">    QLineSeries *series = new QLineSeries();
    for (int i = 0; i &amp;lt; 500; i++) {
        QPointF p((qreal) i, qSin(M_PI / 50 * i) * 100);
        p.ry() += QRandomGenerator::global()-&amp;gt;bounded(20);
        *series &amp;lt;&amp;lt; p;
    }
</db:programlisting>
<db:para>Then we create a custom chart view by deriving from <db:link xlink:href="qchartview.xml">QChartView</db:link>:</db:para>
<db:programlisting language="cpp">class ChartView : public QChartView
</db:programlisting>
<db:para>We override mouse and key event handling</db:para>
<db:programlisting language="cpp">protected:
    bool viewportEvent(QEvent *event);
    void mousePressEvent(QMouseEvent *event);
    void mouseMoveEvent(QMouseEvent *event);
    void mouseReleaseEvent(QMouseEvent *event);
    void keyPressEvent(QKeyEvent *event);
</db:programlisting>
<db:para>Then we implement a custom logic for mouse and key events. For example pressing the '+' key will zoom in and pressing the '-' key will zoom out.</db:para>
<db:programlisting language="cpp">void ChartView::keyPressEvent(QKeyEvent *event)
{
    switch (event-&amp;gt;key()) {
    case Qt::Key_Plus:
        chart()-&amp;gt;zoomIn();
        break;
    case Qt::Key_Minus:
        chart()-&amp;gt;zoomOut();
        break;
</db:programlisting>
<db:para>We also create our own <db:link xlink:href="qchart.xml">QChart</db:link>:</db:para>
<db:programlisting language="cpp">class Chart : public QChart
</db:programlisting>
<db:para>Where we can handle the gestures:</db:para>
<db:programlisting language="cpp">bool Chart::sceneEvent(QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::Gesture)
        return gestureEvent(static_cast&amp;lt;QGestureEvent *&amp;gt;(event));
    return QChart::event(event);
}

bool Chart::gestureEvent(QGestureEvent *event)
{
    if (QGesture *gesture = event-&amp;gt;gesture(Qt::PanGesture)) {
        QPanGesture *pan = static_cast&amp;lt;QPanGesture *&amp;gt;(gesture);
        QChart::scroll(-(pan-&amp;gt;delta().x()), pan-&amp;gt;delta().y());
    }

    if (QGesture *gesture = event-&amp;gt;gesture(Qt::PinchGesture)) {
        QPinchGesture *pinch = static_cast&amp;lt;QPinchGesture *&amp;gt;(gesture);
        if (pinch-&amp;gt;changeFlags() &amp;amp; QPinchGesture::ScaleFactorChanged)
            QChart::zoom(pinch-&amp;gt;scaleFactor());
    }

    return true;
}
</db:programlisting>
<db:para>Note that you will need to call grabGesture() to both <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and <db:link xlink:href="qchart.xml">QChart</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/zoomlinechart?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
