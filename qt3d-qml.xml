<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D QML Types</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>QML Types for the Qt 3D module.</db:para>
<db:para>This documentation was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt 3D core QML types are imported with</db:para>
<db:programlisting language="qml">import Qt3D.Core 2.1
</db:programlisting>
<db:para>Other modules import functionality for collision detection, rendering, input, and animation. The complete list of Qt 3D import statements:</db:para>
<db:programlisting language="qml">import Qt3D.Core 2.1
import Qt3D.Render 2.1
import Qt3D.Input 2.1
import Qt3D.Logic 2.1
import Qt3D.Extras 2.1
import Qt3D.Animation 2.1
import QtQuick.Scene2D 2.1
import QtQuick.Scene3D 2.1
</db:programlisting>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:section xml:id="qt-3d-core-module">
<db:title>Qt 3D Core Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Core">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-abstractskeleton.xml" xlink:role="">AbstractSkeleton</db:link></db:term>
<db:listitem>
<db:para>A skeleton contains the joints for a skinned mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-armature.xml" xlink:role="">Armature</db:link></db:term>
<db:listitem>
<db:para>Used to calculate skinning transform matrices and set them on shaders.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-attribute.xml" xlink:role="">Attribute</db:link></db:term>
<db:listitem>
<db:para>Defines an attribute and how data should be read from a Buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-boundingvolume.xml" xlink:role="">BoundingVolume</db:link></db:term>
<db:listitem>
<db:para>can be used to override an entity's bounding volume.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-buffer.xml" xlink:role="">Buffer</db:link></db:term>
<db:listitem>
<db:para>Provides a data store for raw data to later be used as vertices or uniforms.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-component3d.xml" xlink:role="">Component3D</db:link></db:term>
<db:listitem>
<db:para>Provides the base type for creating Qt 3D components.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-coresettings.xml" xlink:role="">CoreSettings</db:link></db:term>
<db:listitem>
<db:para>The CoreSettings class holds settings related to core data handling process.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-entity.xml" xlink:role="">Entity</db:link></db:term>
<db:listitem>
<db:para>Entity is a Node subclass that can aggregate several Component3D instances that will specify its behavior.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-entityloader.xml" xlink:role="">EntityLoader</db:link></db:term>
<db:listitem>
<db:para>Provides a way to dynamically load an Entity subtree.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-geometry.xml" xlink:role="">Geometry</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-geometryview.xml" xlink:role="">GeometryView</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-joint.xml" xlink:role="">Joint</db:link></db:term>
<db:listitem>
<db:para>Used to transforms parts of skinned meshes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-node.xml" xlink:role="">Node</db:link></db:term>
<db:listitem>
<db:para>A base QML type that other types inherit. It cannot be directly created.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-nodeinstantiator.xml" xlink:role="">NodeInstantiator</db:link></db:term>
<db:listitem>
<db:para>Dynamically creates nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-quaternionanimation.xml" xlink:role="">QuaternionAnimation</db:link></db:term>
<db:listitem>
<db:para>A PropertyAnimation for quaternions.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-skeleton.xml" xlink:role="">Skeleton</db:link></db:term>
<db:listitem>
<db:para>Holds the data for a skeleton to be used with skinned meshes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-skeletonloader.xml" xlink:role="">SkeletonLoader</db:link></db:term>
<db:listitem>
<db:para>Used to load a skeleton of joints from file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-core-transform.xml" xlink:role="">Transform</db:link></db:term>
<db:listitem>
<db:para>Used to perform transforms on meshes.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-input-module">
<db:title>Qt 3D Input Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Input">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-abstractactioninput.xml" xlink:role="">AbstractActionInput</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the abstract Qt3DInput::QAbstractActionInput C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-abstractaxisinput.xml" xlink:role="">AbstractAxisInput</db:link></db:term>
<db:listitem>
<db:para>QML frontend for abstract QAbstractAxisInput C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-abstractphysicaldevice.xml" xlink:role="">AbstractPhysicalDevice</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the abstract Qt3DInput::QAbstractPhysicalDevice C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-action.xml" xlink:role="">Action</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QAction C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-actioninput.xml" xlink:role="">ActionInput</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QActionInput C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-analogaxisinput.xml" xlink:role="">AnalogAxisInput</db:link></db:term>
<db:listitem>
<db:para>QML frontend for QAnalogAxisInput C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-axis.xml" xlink:role="">Axis</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QAxis C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-axisaccumulator.xml" xlink:role="">AxisAccumulator</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QAxisAccumulator C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-axissetting.xml" xlink:role="">AxisSetting</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QAxisSetting C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-buttonaxisinput.xml" xlink:role="">ButtonAxisInput</db:link></db:term>
<db:listitem>
<db:para>QML frontend for QButtonAxisInput C++ class. The axis value is controlled by buttons rather than a traditional analog input such as a joystick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-inputchord.xml" xlink:role="">InputChord</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QInputChord C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-inputsequence.xml" xlink:role="">InputSequence</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QInputSequence C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-inputsettings.xml" xlink:role="">InputSettings</db:link></db:term>
<db:listitem>
<db:para>InputSettings holds the pointer to an input event source object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-keyevent.xml" xlink:role="">KeyEvent</db:link></db:term>
<db:listitem>
<db:para>QML frontend for QKeyEvent C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-keyboarddevice.xml" xlink:role="">KeyboardDevice</db:link></db:term>
<db:listitem>
<db:para>QML frontend for QKeyboardDevice C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-keyboardhandler.xml" xlink:role="">KeyboardHandler</db:link></db:term>
<db:listitem>
<db:para>QML frontend for QKeyboardHandler C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-logicaldevice.xml" xlink:role="">LogicalDevice</db:link></db:term>
<db:listitem>
<db:para>QML frontend for the Qt3DInput::QLogicalDevice C++ class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-mousedevice.xml" xlink:role="">MouseDevice</db:link></db:term>
<db:listitem>
<db:para>Delegates mouse events to the attached MouseHandler objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-mouseevent.xml" xlink:role="">MouseEvent</db:link></db:term>
<db:listitem>
<db:para>Provides parameters that describe a mouse event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-mousehandler.xml" xlink:role="">MouseHandler</db:link></db:term>
<db:listitem>
<db:para>Provides mouse event notification.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-input-wheelevent.xml" xlink:role="">WheelEvent</db:link></db:term>
<db:listitem>
<db:para>Contains parameters that describe a mouse wheel event.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-logic-module">
<db:title>Qt 3D Logic Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Logic">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-logic-frameaction.xml" xlink:role="">FrameAction</db:link></db:term>
<db:listitem>
<db:para>Provides a way to have a synchronous function executed each frame.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-render-module">
<db:title>Qt 3D Render Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Render">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstractraycaster.xml" xlink:role="">AbstractRayCaster</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for ray casting in 3d scenes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstracttexture.xml" xlink:role="">AbstractTexture</db:link></db:term>
<db:listitem>
<db:para>A base class to be used to provide textures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-abstracttextureimage.xml" xlink:role="">AbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-alphacoverage.xml" xlink:role="">AlphaCoverage</db:link></db:term>
<db:listitem>
<db:para>Enable alpha-to-coverage multisampling mode.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-alphatest.xml" xlink:role="">AlphaTest</db:link></db:term>
<db:listitem>
<db:para>The AlphaTest class specify alpha reference test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequation.xml" xlink:role="">BlendEquation</db:link></db:term>
<db:listitem>
<db:para>The BlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blendequationarguments.xml" xlink:role="">BlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-blitframebuffer.xml" xlink:role="">BlitFramebuffer</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to transfer a rectangle of pixel values from one region of a render target to another.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-buffercapture.xml" xlink:role="">BufferCapture</db:link></db:term>
<db:listitem>
<db:para>Exchanges buffer data between GPU and CPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-camera.xml" xlink:role="">Camera</db:link></db:term>
<db:listitem>
<db:para>Defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameralens.xml" xlink:role="">CameraLens</db:link></db:term>
<db:listitem>
<db:para>Provides the projection matrix that is used to define a Camera for 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cameraselector.xml" xlink:role="">CameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clearbuffers.xml" xlink:role="">ClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-clipplane.xml" xlink:role="">ClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-colormask.xml" xlink:role="">ColorMask</db:link></db:term>
<db:listitem>
<db:para>Allows specifying which color components should be written to the currently bound frame buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-computecommand.xml" xlink:role="">ComputeCommand</db:link></db:term>
<db:listitem>
<db:para>Component to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-cullface.xml" xlink:role="">CullFace</db:link></db:term>
<db:listitem>
<db:para>The CullFace type specifies whether front or back face culling is enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-debugoverlay.xml" xlink:role="">DebugOverlay</db:link></db:term>
<db:listitem>
<db:para>Enables a visual overlay with scene details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-depthrange.xml" xlink:role="">DepthRange</db:link></db:term>
<db:listitem>
<db:para>Enables remapping depth values written into the depth buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-depthtest.xml" xlink:role="">DepthTest</db:link></db:term>
<db:listitem>
<db:para>The DepthTest type tests the fragment shader's depth value against the depth of a sample being written to.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-directionallight.xml" xlink:role="">DirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-dispatchcompute.xml" xlink:role="">DispatchCompute</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-dithering.xml" xlink:role="">Dithering</db:link></db:term>
<db:listitem>
<db:para>Enable dithering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-effect.xml" xlink:role="">Effect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-environmentlight.xml" xlink:role="">EnvironmentLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate an environment light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-filterkey.xml" xlink:role="">FilterKey</db:link></db:term>
<db:listitem>
<db:para>Stores filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-framegraphnode.xml" xlink:role="">FrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-frontface.xml" xlink:role="">FrontFace</db:link></db:term>
<db:listitem>
<db:para>The FrontFace type defines front and back facing polygons.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-frustumculling.xml" xlink:role="">FrustumCulling</db:link></db:term>
<db:listitem>
<db:para>Enable frustum culling for the FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-geometryrenderer.xml" xlink:role="">GeometryRenderer</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-graphicsapifilter.xml" xlink:role="">GraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>For OpenGL identifies the API required for the attached technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layer.xml" xlink:role="">Layer</db:link></db:term>
<db:listitem>
<db:para>Layer provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-layerfilter.xml" xlink:role="">LayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetail.xml" xlink:role="">LevelOfDetail</db:link></db:term>
<db:listitem>
<db:para>LevelOfDetail provides a way of controlling the complexity of rendered entities based on their size on the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailboundingsphere.xml" xlink:role="">LevelOfDetailBoundingSphere</db:link></db:term>
<db:listitem>
<db:para>The LevelOfDetailBoundingSphere QML type provides a simple spherical volume, defined by its center and radius.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailloader.xml" xlink:role="">LevelOfDetailLoader</db:link></db:term>
<db:listitem>
<db:para>An entity loader that changes depending on distance to camera or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-levelofdetailswitch.xml" xlink:role="">LevelOfDetailSwitch</db:link></db:term>
<db:listitem>
<db:para>Provides a way of enabling child entities based on distance or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-light.xml" xlink:role="">Light</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-linewidth.xml" xlink:role="">LineWidth</db:link></db:term>
<db:listitem>
<db:para>Specifies the width of rasterized lines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-material.xml" xlink:role="">Material</db:link></db:term>
<db:listitem>
<db:para>Non-creatable abstract base for materials.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-memorybarrier.xml" xlink:role="">MemoryBarrier</db:link></db:term>
<db:listitem>
<db:para>Class to place a memory barrier.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-mesh.xml" xlink:role="">Mesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh loader.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-multisampleantialiasing.xml" xlink:role="">MultiSampleAntiAliasing</db:link></db:term>
<db:listitem>
<db:para>Enable multisample antialiasing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nodepthmask.xml" xlink:role="">NoDepthMask</db:link></db:term>
<db:listitem>
<db:para>Disable depth write.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nodraw.xml" xlink:role="">NoDraw</db:link></db:term>
<db:listitem>
<db:para>When a NoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-nopicking.xml" xlink:role="">NoPicking</db:link></db:term>
<db:listitem>
<db:para>When a NoPicking node is present in a FrameGraph branch, this prevents the render aspect from performing picking selection for the given branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-objectpicker.xml" xlink:role="">ObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The ObjectPicker class instantiates a component that can be used to interact with an Entity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-parameter.xml" xlink:role="">Parameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair. This maps to a shader uniform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickevent.xml" xlink:role="">PickEvent</db:link></db:term>
<db:listitem>
<db:para>PickEvent holds information when an object is picked. This is received as a parameter in most of the QObjectPicker component signals when picking succeeds.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-picklineevent.xml" xlink:role="">PickLineEvent</db:link></db:term>
<db:listitem>
<db:para>PickLineEvent holds information when a segment of a line is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickpointevent.xml" xlink:role="">PickPointEvent</db:link></db:term>
<db:listitem>
<db:para>PickPointEvent holds information when a segment of a point cloud is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-picktriangleevent.xml" xlink:role="">PickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>PickTriangleEvent holds information when a triangle is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickingproxy.xml" xlink:role="">PickingProxy</db:link></db:term>
<db:listitem>
<db:para>Can be used to provide an alternate GeometryView used only for picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pickingsettings.xml" xlink:role="">PickingSettings</db:link></db:term>
<db:listitem>
<db:para>The PickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointlight.xml" xlink:role="">PointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-pointsize.xml" xlink:role="">PointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-polygonoffset.xml" xlink:role="">PolygonOffset</db:link></db:term>
<db:listitem>
<db:para>The PolygonOffset type sets the scale and steps to calculate depth values for polygon offsets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-proximityfilter.xml" xlink:role="">ProximityFilter</db:link></db:term>
<db:listitem>
<db:para>Select entities which are within a distance threshold of a target entity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rastermode.xml" xlink:role="">RasterMode</db:link></db:term>
<db:listitem>
<db:para>The RasterMode render state allows to control the type of rasterization to be performed.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-raycaster.xml" xlink:role="">RayCaster</db:link></db:term>
<db:listitem>
<db:para>used to perform ray casting tests in 3d world coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapabilities.xml" xlink:role="">RenderCapabilities</db:link></db:term>
<db:listitem>
<db:para>The QRenderCapabilities class holds settings related to available rendering engines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapture.xml" xlink:role="">RenderCapture</db:link></db:term>
<db:listitem>
<db:para>Capture rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendercapturereply.xml" xlink:role="">RenderCaptureReply</db:link></db:term>
<db:listitem>
<db:para>Receives render capture result.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderpass.xml" xlink:role="">RenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderpassfilter.xml" xlink:role="">RenderPassFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersettings.xml" xlink:role="">RenderSettings</db:link></db:term>
<db:listitem>
<db:para>The RenderSettings type holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderstate.xml" xlink:role="">RenderState</db:link></db:term>
<db:listitem>
<db:para>An abstract base type for all render states.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-renderstateset.xml" xlink:role="">RenderStateSet</db:link></db:term>
<db:listitem>
<db:para>The RenderStateSet FrameGraph node offers a way of specifying a set of RenderState objects to be applied during the execution of a framegraph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendersurfaceselector.xml" xlink:role="">RenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertarget.xml" xlink:role="">RenderTarget</db:link></db:term>
<db:listitem>
<db:para>The RenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertargetoutput.xml" xlink:role="">RenderTargetOutput</db:link></db:term>
<db:listitem>
<db:para>The RenderTargetOutput type allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-rendertargetselector.xml" xlink:role="">RenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying a render target.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sceneloader.xml" xlink:role="">SceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-scissortest.xml" xlink:role="">ScissorTest</db:link></db:term>
<db:listitem>
<db:para>The ScissorTest type discards fragments that fall outside of a certain rectangular portion of the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-screenraycaster.xml" xlink:role="">ScreenRayCaster</db:link></db:term>
<db:listitem>
<db:para>Performe ray casting test based on screen coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-seamlesscubemap.xml" xlink:role="">SeamlessCubemap</db:link></db:term>
<db:listitem>
<db:para>Enables seamless cubemap texture filtering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderimage.xml" xlink:role="">ShaderImage</db:link></db:term>
<db:listitem>
<db:para>Provides Image access to shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderprogram.xml" xlink:role="">ShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-shaderprogrambuilder.xml" xlink:role="">ShaderProgramBuilder</db:link></db:term>
<db:listitem>
<db:para>Generates a Shader Program content from loaded graphs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sharedgltexture.xml" xlink:role="">SharedGLTexture</db:link></db:term>
<db:listitem>
<db:para>Allows to use a textureId from a separate OpenGL context in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-sortpolicy.xml" xlink:role="">SortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-spotlight.xml" xlink:role="">SpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stencilmask.xml" xlink:role="">StencilMask</db:link></db:term>
<db:listitem>
<db:para>The StencilMask type controls the front and back writing of individual bits in the stencil planes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciloperation.xml" xlink:role="">StencilOperation</db:link></db:term>
<db:listitem>
<db:para>The StencilOperation type specifies stencil operation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciloperationarguments.xml" xlink:role="">StencilOperationArguments</db:link></db:term>
<db:listitem>
<db:para>The StencilOperationArguments type sets the actions to be taken when stencil and depth tests fail.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciltest.xml" xlink:role="">StencilTest</db:link></db:term>
<db:listitem>
<db:para>The StencilTest type specifies arguments for the stecil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-stenciltestarguments.xml" xlink:role="">StencilTestArguments</db:link></db:term>
<db:listitem>
<db:para>The StencilTestArguments type specifies arguments for stencil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-subtreeenabler.xml" xlink:role="">SubtreeEnabler</db:link></db:term>
<db:listitem>
<db:para>Enables or disables entire subtrees of frame graph nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-technique.xml" xlink:role="">Technique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-techniquefilter.xml" xlink:role="">TechniqueFilter</db:link></db:term>
<db:listitem>
<db:para>A FrameGraphNode used to select used Techniques.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture1d.xml" xlink:role="">Texture1D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target1D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture1darray.xml" xlink:role="">Texture1DArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target1DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2d.xml" xlink:role="">Texture2D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2darray.xml" xlink:role="">Texture2DArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2dmultisample.xml" xlink:role="">Texture2DMultisample</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DMultisample target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture2dmultisamplearray.xml" xlink:role="">Texture2DMultisampleArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target2DMultisampleArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texture3d.xml" xlink:role="">Texture3D</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a Target3D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturebuffer.xml" xlink:role="">TextureBuffer</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetBuffer target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturecubemap.xml" xlink:role="">TextureCubeMap</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetCubeMap target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturecubemaparray.xml" xlink:role="">TextureCubeMapArray</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetCubeMapArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-textureimage.xml" xlink:role="">TextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-textureloader.xml" xlink:role="">TextureLoader</db:link></db:term>
<db:listitem>
<db:para>Handles the texture loading and setting the texture's properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-texturerectangle.xml" xlink:role="">TextureRectangle</db:link></db:term>
<db:listitem>
<db:para>An AbstractTexture with a TargetRectangle target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-render-viewport.xml" xlink:role="">Viewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-extras-module">
<db:title>Qt 3D Extras Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Extras">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-conegeometry.xml" xlink:role="">ConeGeometry</db:link></db:term>
<db:listitem>
<db:para>ConeGeometry allows creation of a cone in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-conegeometryview.xml" xlink:role="">ConeGeometryView</db:link></db:term>
<db:listitem>
<db:para>A conical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-conemesh.xml" xlink:role="">ConeMesh</db:link></db:term>
<db:listitem>
<db:para>A conical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cuboidgeometry.xml" xlink:role="">CuboidGeometry</db:link></db:term>
<db:listitem>
<db:para>CuboidGeometry allows creation of a cuboid in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cuboidgeometryview.xml" xlink:role="">CuboidGeometryView</db:link></db:term>
<db:listitem>
<db:para>A cuboid mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cuboidmesh.xml" xlink:role="">CuboidMesh</db:link></db:term>
<db:listitem>
<db:para>A cuboid mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cylindergeometry.xml" xlink:role="">CylinderGeometry</db:link></db:term>
<db:listitem>
<db:para>CylinderGeometry allows creation of a cylinder in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cylindergeometryview.xml" xlink:role="">CylinderGeometryView</db:link></db:term>
<db:listitem>
<db:para>A cylindrical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-cylindermesh.xml" xlink:role="">CylinderMesh</db:link></db:term>
<db:listitem>
<db:para>A cylindrical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-diffusespecularmaterial.xml" xlink:role="">DiffuseSpecularMaterial</db:link></db:term>
<db:listitem>
<db:para>The DiffuseSpecularMaterial class provides a default implementation of the phong lighting effect.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-extrudedtextgeometry.xml" xlink:role="">ExtrudedTextGeometry</db:link></db:term>
<db:listitem>
<db:para>ExtrudedTextGeometry allows creation of a 3D text in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-extrudedtextmesh.xml" xlink:role="">ExtrudedTextMesh</db:link></db:term>
<db:listitem>
<db:para>A 3D extruded Text mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-firstpersoncameracontroller.xml" xlink:role="">FirstPersonCameraController</db:link></db:term>
<db:listitem>
<db:para>The FirstPersonCameraController allows controlling the scene camera from the first person perspective.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-forwardrenderer.xml" xlink:role="">ForwardRenderer</db:link></db:term>
<db:listitem>
<db:para>The ForwardRenderer provides a default FrameGraph implementation of a forward renderer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-goochmaterial.xml" xlink:role="">GoochMaterial</db:link></db:term>
<db:listitem>
<db:para>The GoochMaterial provides a material that implements the Gooch shading model, popular in CAD and CAM applications.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-metalroughmaterial.xml" xlink:role="">MetalRoughMaterial</db:link></db:term>
<db:listitem>
<db:para>This material uses an effect with a single render pass approach and performs per fragment lighting. Techniques are provided for OpenGL 3 and OpenGL ES 3.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-orbitcameracontroller.xml" xlink:role="">OrbitCameraController</db:link></db:term>
<db:listitem>
<db:para>The OrbitCameraController class allows controlling the scene camera along orbital path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-pervertexcolormaterial.xml" xlink:role="">PerVertexColorMaterial</db:link></db:term>
<db:listitem>
<db:para>The PerVertexColorMaterial class provides a default implementation for rendering the color properties set for each vertex.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-planegeometry.xml" xlink:role="">PlaneGeometry</db:link></db:term>
<db:listitem>
<db:para>PlaneGeometry allows creation of a plane in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-planegeometryview.xml" xlink:role="">PlaneGeometryView</db:link></db:term>
<db:listitem>
<db:para>A square planar mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-planemesh.xml" xlink:role="">PlaneMesh</db:link></db:term>
<db:listitem>
<db:para>A square planar mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-skyboxentity.xml" xlink:role="">SkyboxEntity</db:link></db:term>
<db:listitem>
<db:para>SkyboxEntity is a convenience Entity subclass that can be used to insert a skybox in a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-spheregeometry.xml" xlink:role="">SphereGeometry</db:link></db:term>
<db:listitem>
<db:para>SphereGeometry allows creation of a sphere in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-spheregeometryview.xml" xlink:role="">SphereGeometryView</db:link></db:term>
<db:listitem>
<db:para>A spherical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-spheremesh.xml" xlink:role="">SphereMesh</db:link></db:term>
<db:listitem>
<db:para>A spherical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-text2dentity.xml" xlink:role="">Text2DEntity</db:link></db:term>
<db:listitem>
<db:para>Text2DEntity allows creation of a 2D text in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-torusgeometry.xml" xlink:role="">TorusGeometry</db:link></db:term>
<db:listitem>
<db:para>TorusGeometry allows creation of a torus in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-torusgeometryview.xml" xlink:role="">TorusGeometryView</db:link></db:term>
<db:listitem>
<db:para>A toroidal mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-extras-torusmesh.xml" xlink:role="">TorusMesh</db:link></db:term>
<db:listitem>
<db:para>A toroidal mesh.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-animation-module">
<db:title>Qt 3D Animation Module</db:title>
<db:variablelist role="qmltypesbymodule Qt3D.Animation">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-abstractanimation.xml" xlink:role="">AbstractAnimation</db:link></db:term>
<db:listitem>
<db:para>An abstract base type for Qt3D animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-abstractclipanimator.xml" xlink:role="">AbstractClipAnimator</db:link></db:term>
<db:listitem>
<db:para>AbstractClipAnimator is the base class for types providing animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-abstractclipblendnode.xml" xlink:role="">AbstractClipBlendNode</db:link></db:term>
<db:listitem>
<db:para>AbstractClipBlendNode is the base class for types used to construct animation blend trees.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-additiveclipblend.xml" xlink:role="">AdditiveClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs an additive blend of two animation clips based on an additive factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-animationcontroller.xml" xlink:role="">AnimationController</db:link></db:term>
<db:listitem>
<db:para>A controller type for animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-animationgroup.xml" xlink:role="">AnimationGroup</db:link></db:term>
<db:listitem>
<db:para>A type grouping animations together.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-blendedclipanimator.xml" xlink:role="">BlendedClipAnimator</db:link></db:term>
<db:listitem>
<db:para>BlendedClipAnimator is a component providing animation playback capabilities of a tree of blend nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-clipanimator.xml" xlink:role="">ClipAnimator</db:link></db:term>
<db:listitem>
<db:para>ClipAnimator is a component providing simple animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-clipblendvalue.xml" xlink:role="">ClipBlendValue</db:link></db:term>
<db:listitem>
<db:para>Type used for including a clip in a blend tree.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-keyframeanimation.xml" xlink:role="">KeyframeAnimation</db:link></db:term>
<db:listitem>
<db:para>A type implementing simple keyframe animation to a Transform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-lerpclipblend.xml" xlink:role="">LerpClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs a linear interpolation of two animation clips based on a normalized factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-morphtarget.xml" xlink:role="">MorphTarget</db:link></db:term>
<db:listitem>
<db:para>A type providing morph targets to blend-shape animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-morphinganimation.xml" xlink:role="">MorphingAnimation</db:link></db:term>
<db:listitem>
<db:para>A type implementing blend-shape morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qt3d-animation-vertexblendanimation.xml" xlink:role="">VertexBlendAnimation</db:link></db:term>
<db:listitem>
<db:para>A type implementing vertex-blend morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-scene2d-module">
<db:title>Qt 3D Scene2D Module</db:title>
<db:variablelist role="qmltypesbymodule QtQuick.Scene2D">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-scene2d-scene2d.xml" xlink:role="">Scene2D</db:link></db:term>
<db:listitem>
<db:para>This type enables rendering qml into a texture, which then can be used as a part of 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-scene3d-module">
<db:title>Qt 3D Scene3D Module</db:title>
<db:variablelist role="qmltypesbymodule QtQuick.Scene3D">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-scene3d-scene3d.xml" xlink:role="">Scene3D</db:link></db:term>
<db:listitem>
<db:para>The Scene3D type is used to integrate a Qt3D scene into a QtQuick 2 scene.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
