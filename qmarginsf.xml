<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMarginsF Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> class defines the four margins of a rectangle.</db:para>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
<db:para>This class is <db:emphasis role="bold">equality-comparable</db:emphasis> with <db:link xlink:href="qmargins.xml">QMargins</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMarginsF</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMarginsF is part of <db:simplelist><db:member>painting</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> defines a set of four margins; left, top, right, and bottom, that describe the finite size of the borders surrounding a rectangle.</db:para>
<db:para>The <db:link xlink:href="qmarginsf.xml#isNull">isNull</db:link>() function returns true only if all margins are very close to zero.</db:para>
<db:para><db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> objects can be streamed as well as compared.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMarginsF">
<db:title>[constexpr noexcept] QMarginsF::QMarginsF()</db:title>
<db:para>Constructs a margins object with all margins set to 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMarginsF-1">
<db:title>[constexpr noexcept] QMarginsF::QMarginsF(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Constructs margins copied from the given <db:code role="parameter">margins</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmargins.xml#toMarginsF">QMargins::toMarginsF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QMarginsF-2">
<db:title>[constexpr noexcept] QMarginsF::QMarginsF(qreal <db:emphasis>left</db:emphasis>, qreal <db:emphasis>top</db:emphasis>, qreal <db:emphasis>right</db:emphasis>, qreal <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>Constructs margins with the given <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code>. All parameters must be finite.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#setLeft">setLeft</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#setRight">setRight</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#setTop">setTop</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#setBottom">setBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bottom">
<db:title>[constexpr noexcept] qreal QMarginsF::bottom() const</db:title>
<db:para>Returns the bottom margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#setBottom">setBottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr noexcept] bool QMarginsF::isNull() const</db:title>
<db:para>Returns true if all margins are very close to 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnumeric.xml#qFuzzyIsNull">qFuzzyIsNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="left">
<db:title>[constexpr noexcept] qreal QMarginsF::left() const</db:title>
<db:para>Returns the left margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#setLeft">setLeft</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="right">
<db:title>[constexpr noexcept] qreal QMarginsF::right() const</db:title>
<db:para>Returns the right margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#setRight">setRight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBottom">
<db:title>[constexpr noexcept] void QMarginsF::setBottom(qreal <db:emphasis>abottom</db:emphasis>)</db:title>
<db:para>Sets the bottom margin to <db:code role="parameter">abottom</db:code> (which must be finite).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#bottom">bottom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLeft">
<db:title>[constexpr noexcept] void QMarginsF::setLeft(qreal <db:emphasis>aleft</db:emphasis>)</db:title>
<db:para>Sets the left margin to <db:code role="parameter">aleft</db:code> (which must be finite).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#left">left</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRight">
<db:title>[constexpr noexcept] void QMarginsF::setRight(qreal <db:emphasis>aright</db:emphasis>)</db:title>
<db:para>Sets the right margin to <db:code role="parameter">aright</db:code> (which must be finite).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#right">right</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTop">
<db:title>[constexpr noexcept] void QMarginsF::setTop(qreal <db:emphasis>atop</db:emphasis>)</db:title>
<db:para>Sets the top margin to <db:code role="parameter">atop</db:code> (which must be finite).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#top">top</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toMargins">
<db:title>[constexpr noexcept] QMargins QMarginsF::toMargins() const</db:title>
<db:para>Returns an integer-based copy of this margins object.</db:para>
<db:para>Note that the components in the returned margins will be rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#QMarginsF">QMarginsF</db:link>()</db:member>
<db:member><db:link xlink:href="qmargins.xml#toMarginsF">QMargins::toMarginsF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="top">
<db:title>[constexpr noexcept] qreal QMarginsF::top() const</db:title>
<db:para>Returns the top margin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#setTop">setTop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>[constexpr noexcept] QMarginsF &amp;QMarginsF::operator*=(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies each component of this object by the given finite <db:code role="parameter">factor</db:code> and returns a reference to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2f-eq">operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[constexpr noexcept] QMarginsF &amp;QMarginsF::operator+=(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Add each component of <db:code role="parameter">margins</db:code> to the respective component of this object and returns a reference to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq-1">
<db:title>[constexpr noexcept] QMarginsF &amp;QMarginsF::operator+=(qreal <db:emphasis>addend</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds the given finite <db:code role="parameter">addend</db:code> to each component of this object and returns a reference to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[constexpr noexcept] QMarginsF &amp;QMarginsF::operator-=(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Subtract each component of <db:code role="parameter">margins</db:code> from the respective component of this object and returns a reference to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq-1">
<db:title>[constexpr noexcept] QMarginsF &amp;QMarginsF::operator-=(qreal <db:emphasis>subtrahend</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Subtracts the given finite <db:code role="parameter">subtrahend</db:code> from each component of this object and returns a reference to it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>[constexpr] QMarginsF &amp;QMarginsF::operator/=(qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>Divides each component of this object by <db:code role="parameter">divisor</db:code> and returns a reference to this object.</db:para>
<db:para>The <db:code role="parameter">divisor</db:code> must not be either zero or NaN.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2a-eq">operator*=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFuzzyCompare">
<db:title>[constexpr noexcept, since 6.8] bool qFuzzyCompare(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is approximately equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="qFuzzyIsNull">
<db:title>[constexpr noexcept, since 6.8] bool qFuzzyIsNull(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Returns true if all components of margsins <db:code role="parameter">margins</db:code> are approximately equal to zero; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr noexcept] bool operator!=(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are sufficiently different; otherwise returns false.</db:para>
<db:warning>
<db:para>This function does not check for strict inequality; instead, it uses a fuzzy comparison to compare the margins.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#qFuzzyCompare">qFuzzyCompare</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>[constexpr noexcept] QMarginsF operator*(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, qreal <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by multiplying each component of the given <db:code role="parameter">lhs</db:code> margins by finite factor <db:code role="parameter">rhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2a-eq">QMarginsF::operator*=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator-2f-eq">QMarginsF::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-1">
<db:title>[constexpr noexcept] QMarginsF operator*(qreal <db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by multiplying each component of the given <db:code role="parameter">lhs</db:code> margins by finite factor <db:code role="parameter">rhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2a-eq">QMarginsF::operator*=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator-2f-eq">QMarginsF::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>[constexpr noexcept] QMarginsF operator+(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Returns a QMargin object that is formed from all components of <db:code role="parameter">margins</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>[constexpr noexcept] QMarginsF operator+(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is the sum of the given margins, <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>; each component is added separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2">
<db:title>[constexpr noexcept] QMarginsF operator+(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, qreal <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by adding <db:code role="parameter">rhs</db:code> (which must be finite) to each component of <db:code role="parameter">lhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-3">
<db:title>[constexpr noexcept] QMarginsF operator+(qreal <db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by adding <db:code role="parameter">lhs</db:code> (which must be finite) to each component of <db:code role="parameter">rhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>[constexpr noexcept] QMarginsF operator-(const QMarginsF &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Returns a QMargin object that is formed by negating all components of <db:code role="parameter">margins</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--1">
<db:title>[constexpr noexcept] QMarginsF operator-(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by subtracting <db:code role="parameter">rhs</db:code> from <db:code role="parameter">lhs</db:code>; each component is subtracted separately.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--2">
<db:title>[constexpr noexcept] QMarginsF operator-(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, qreal <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by subtracting <db:code role="parameter">rhs</db:code> (which must be finite) from each component of <db:code role="parameter">lhs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2f-2">
<db:title>[constexpr] QMarginsF operator/(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, qreal <db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed by dividing the components of the given <db:code role="parameter">lhs</db:code> margins by the given <db:code role="parameter">rhs</db:code> divisor.</db:para>
<db:para>The divisor must not be either zero or NaN.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2a-eq">QMarginsF::operator*=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator-2f-eq">QMarginsF::operator/=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-14">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QMarginsF &amp;<db:emphasis>m</db:emphasis>)</db:title>
<db:para>Writes margin <db:code role="parameter">m</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr noexcept] bool operator==(const QMarginsF &amp;<db:emphasis>lhs</db:emphasis>, const QMarginsF &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are approximately equal; otherwise returns false.</db:para>
<db:warning>
<db:para>This function does not check for strict equality; instead, it uses a fuzzy comparison to compare the margins.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#qFuzzyCompare">qFuzzyCompare</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-13">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QMarginsF &amp;<db:emphasis>m</db:emphasis>)</db:title>
<db:para>Reads a margin from the given <db:code role="parameter">stream</db:code> into margin <db:code role="parameter">m</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-7c-921">
<db:title>[constexpr noexcept, since 6.0] QMarginsF operator|(const QMarginsF &amp;<db:emphasis>m1</db:emphasis>, const QMarginsF &amp;<db:emphasis>m2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a <db:link xlink:href="qmarginsf.xml">QMarginsF</db:link> object that is formed from the maximum of each component of <db:code role="parameter">m2</db:code> and <db:code role="parameter">m1</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmarginsf.xml#operator-2b-eq">QMarginsF::operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qmarginsf.xml#operator--eq">QMarginsF::operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
