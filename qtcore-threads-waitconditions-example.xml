<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wait Conditions Example</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates multi-thread programming using Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The producer writes data to the buffer until it reaches the end of the buffer, at which point it restarts from the beginning, overwriting existing data. The consumer thread reads the data as it is produced and writes it to standard error.</db:para>
<db:para>Wait conditions make it possible to have a higher level of concurrency than what is possible with mutexes alone. If accesses to the buffer were simply guarded by a <db:link xlink:href="qmutex.xml">QMutex</db:link>, the consumer thread couldn't access the buffer at the same time as the producer thread. Yet, there is no harm in having both threads working on <db:emphasis>different parts</db:emphasis> of the buffer at the same time.</db:para>
<db:para>The example comprises two classes: Producer and Consumer. Both inherit from <db:link xlink:href="qthread.xml">QThread</db:link>. The circular buffer used for communicating between these two classes and the synchronization tools that protect it are global variables.</db:para>
<db:para>An alternative to using <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> and <db:link xlink:href="qmutex.xml">QMutex</db:link> to solve the producer-consumer problem is to use <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link>. This is what the <db:link xlink:href="qtcore-threads-semaphores-example.xml">Semaphores Example</db:link> does.</db:para>
<db:section xml:id="global-variables">
<db:title>Global Variables</db:title>
<db:para>Let's start by reviewing the circular buffer and the associated synchronization tools:</db:para>
<db:programlisting language="cpp">const int DataSize = 100000;

const int BufferSize = 8192;
char buffer[BufferSize];

QWaitCondition bufferNotEmpty;
QWaitCondition bufferNotFull;
QMutex mutex;
int numUsedBytes = 0;
</db:programlisting>
<db:para>DataSize is the amount of data that the producer will generate. To keep the example as simple as possible, we make it a constant. BufferSize is the size of the circular buffer. It is less than DataSize, meaning that at some point the producer will reach the end of the buffer and restart from the beginning.</db:para>
<db:para>To synchronize the producer and the consumer, we need two wait conditions and one mutex. The bufferNotEmpty condition is signalled when the producer has generated some data, telling the consumer that it can start reading it. The bufferNotFull condition is signalled when the consumer has read some data, telling the producer that it can generate more. The numUsedBytes is the number of bytes in the buffer that contain data.</db:para>
<db:para>Together, the wait conditions, the mutex, and the numUsedBytes counter ensure that the producer is never more than BufferSize bytes ahead of the consumer, and that the consumer never reads data that the producer hasn't generated yet.</db:para>
</db:section>
<db:section xml:id="producer-class">
<db:title>Producer Class</db:title>
<db:para>Let's review the code for the Producer class:</db:para>
<db:programlisting language="cpp">class Producer : public QThread
{
public:
    Producer(QObject *parent = NULL) : QThread(parent)
    {
    }

    void run() override
    {
        qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));

        for (int i = 0; i &lt; DataSize; ++i) {
            mutex.lock();
            if (numUsedBytes == BufferSize)
                bufferNotFull.wait(&amp;mutex);
            mutex.unlock();

            buffer[i % BufferSize] = &quot;ACGT&quot;[(int)qrand() % 4];

            mutex.lock();
            ++numUsedBytes;
            bufferNotEmpty.wakeAll();
            mutex.unlock();
        }
    }
};
</db:programlisting>
<db:para>The producer generates DataSize bytes of data. Before it writes a byte to the circular buffer, it must first check whether the buffer is full (i.e., numUsedBytes equals BufferSize). If the buffer is full, the thread waits on the bufferNotFull condition.</db:para>
<db:para>At the end, the producer increments numUsedBytes and signalls that the condition bufferNotEmpty is true, since numUsedBytes is necessarily greater than 0.</db:para>
<db:para>We guard all accesses to the numUsedBytes variable with a mutex. In addition, the <db:link xlink:href="qwaitcondition.xml#wait">QWaitCondition::wait</db:link>() function accepts a mutex as its argument. This mutex is unlocked before the thread is put to sleep and locked when the thread wakes up. Furthermore, the transition from the locked state to the wait state is atomic, to prevent race conditions from occurring.</db:para>
</db:section>
<db:section xml:id="consumer-class">
<db:title>Consumer Class</db:title>
<db:para>Let's turn to the Consumer class:</db:para>
<db:programlisting language="cpp">class Consumer : public QThread
{
    Q_OBJECT
public:
    Consumer(QObject *parent = NULL) : QThread(parent)
    {
    }

    void run() override
    {
        for (int i = 0; i &lt; DataSize; ++i) {
            mutex.lock();
            if (numUsedBytes == 0)
                bufferNotEmpty.wait(&amp;mutex);
            mutex.unlock();

            fprintf(stderr, &quot;%c&quot;, buffer[i % BufferSize]);

            mutex.lock();
            --numUsedBytes;
            bufferNotFull.wakeAll();
            mutex.unlock();
        }
        fprintf(stderr, &quot;\n&quot;);
    }

signals:
    void stringConsumed(const QString &amp;text);
};
</db:programlisting>
<db:para>The code is very similar to the producer. Before we read the byte, we check whether the buffer is empty (numUsedBytes is 0) instead of whether it's full and wait on the bufferNotEmpty condition if it's empty. After we've read the byte, we decrement numUsedBytes (instead of incrementing it), and we signal the bufferNotFull condition (instead of the bufferNotEmpty condition).</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() Function</db:title>
<db:para>In main(), we create the two threads and call <db:link xlink:href="qthread.xml#wait">QThread::wait</db:link>() to ensure that both threads get time to finish before we exit:</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);
    Producer producer;
    Consumer consumer;
    producer.start();
    consumer.start();
    producer.wait();
    consumer.wait();
    return 0;
}
</db:programlisting>
<db:para>So what happens when we run the program? Initially, the producer thread is the only one that can do anything; the consumer is blocked waiting for the bufferNotEmpty condition to be signalled (numUsedBytes is 0). Once the producer has put one byte in the buffer, numUsedBytes is BufferSize - 1 and the bufferNotEmpty condition is signalled. At that point, two things can happen: Either the consumer thread takes over and reads that byte, or the producer gets to produce a second byte.</db:para>
<db:para>The producer-consumer model presented in this example makes it possible to write highly concurrent multithreaded applications. On a multiprocessor machine, the program is potentially up to twice as fast as the equivalent mutex-based program, since the two threads can be active at the same time on different parts of the buffer.</db:para>
<db:para>Be aware though that these benefits aren't always realized. Locking and unlocking a <db:link xlink:href="qmutex.xml">QMutex</db:link> has a cost. In practice, it would probably be worthwhile to divide the buffer into chunks and to operate on chunks instead of individual bytes. The buffer size is also a parameter that must be selected carefully, based on experimentation.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="threads/waitconditions/waitconditions.cpp">threads/waitconditions/waitconditions.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads/waitconditions/waitconditions.pro">threads/waitconditions/waitconditions.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
