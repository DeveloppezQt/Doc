<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBarCategoryAxis Class</db:title>
<db:productname>QtGraphs</db:productname>
<db:edition>Qt Graphs | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Graphs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> class adds categories to a graph's axes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBarCategoryAxis</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Graphs)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Graphs)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += graphs</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtgraphs-barcategoryaxis.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractaxis.xml" xlink:role="class">QAbstractAxis</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBarCategoryAxis is part of <db:simplelist><db:member><db:link xlink:href="graphs-2d.xml">Qt Graphs C++ Classes for 2D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> can be set up to show an axis line with tick marks, grid lines, and shades. Categories are drawn between the ticks.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="categories-prop">
<db:title>categories : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>categories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">categories</db:synopsisinfo>
<db:synopsisinfo role="setter">setCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">categoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the categories of an axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#categories">categories</db:link></db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#setCategories">setCategories</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>categories</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#categoriesChanged">categoriesChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">count</db:synopsisinfo>
<db:synopsisinfo role="notifier">countChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of categories of an axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#count">count</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#countChanged">countChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="max-prop">
<db:title>max : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>max</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">max</db:synopsisinfo>
<db:synopsisinfo role="setter">setMax</db:synopsisinfo>
<db:synopsisinfo role="notifier">maxChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum value on the axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#max">max</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#setMax">setMax</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#maxChanged">maxChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>max</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="min-prop">
<db:title>min : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>min</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">min</db:synopsisinfo>
<db:synopsisinfo role="setter">setMin</db:synopsisinfo>
<db:synopsisinfo role="notifier">minChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum value on the axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#min">min</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#setMin">setMin</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qbarcategoryaxis.xml#minChanged">minChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>min</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBarCategoryAxis">
<db:title>[explicit] QBarCategoryAxis::QBarCategoryAxis(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBarCategoryAxis</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBarCategoryAxis(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an axis object that is the child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QBarCategoryAxis">
<db:title>[virtual] QBarCategoryAxis::~QBarCategoryAxis()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBarCategoryAxis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBarCategoryAxis()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the axis object.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QBarCategoryAxis::append(const QStringList &amp;<db:emphasis>categories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>categories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QStringList &amp;categories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">categories</db:code> to an axis. The maximum value on the axis will be changed to match the last category in <db:code role="parameter">categories</db:code>. If no categories were previously defined, the minimum value on the axis will also be changed to match the first category in <db:code role="parameter">categories</db:code>.</db:para>
<db:para>A category has to be a valid <db:link xlink:href="qstring.xml">QString</db:link> and it cannot be duplicated. Duplicated categories will not be appended.</db:para>
</db:section>
<db:section xml:id="append-1">
<db:title>void QBarCategoryAxis::append(const QString &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>append</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void append(const QString &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">category</db:code> to an axis. The maximum value on the axis will be changed to match the last <db:code role="parameter">category</db:code>. If no categories were previously defined, the minimum value on the axis will also be changed to match <db:code role="parameter">category</db:code>.</db:para>
<db:para>A category has to be a valid <db:link xlink:href="qstring.xml">QString</db:link> and it cannot be duplicated. Duplicated categories will not be appended.</db:para>
</db:section>
<db:section xml:id="at">
<db:title>QString QBarCategoryAxis::at(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>at</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString at(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the category at <db:code role="parameter">index</db:code>. The index must be valid.</db:para>
</db:section>
<db:section xml:id="categories">
<db:title>QStringList QBarCategoryAxis::categories()</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>categories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categories</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList categories()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns categories.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qbarcategoryaxis.xml#categories-prop">categories</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#setCategories">setCategories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="categoriesChanged">
<db:title>void QBarCategoryAxis::categoriesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>categoriesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categories</db:synopsisinfo>
<db:synopsisinfo role="signature">void categoriesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the categories of the axis change.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qbarcategoryaxis.xml#categories-prop">categories</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="clear">
<db:title>void QBarCategoryAxis::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all categories. Sets the maximum and minimum values of the axis range to QString::null.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QBarCategoryAxis::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of categories.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qbarcategoryaxis.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="countChanged">
<db:title>void QBarCategoryAxis::countChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>countChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">count</db:synopsisinfo>
<db:synopsisinfo role="signature">void countChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of categories of an axis changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qbarcategoryaxis.xml#count-prop">count</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="insert">
<db:title>void QBarCategoryAxis::insert(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(int index, const QString &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">category</db:code> to the axis at <db:code role="parameter">index</db:code>. <db:code role="parameter">category</db:code> has to be a valid <db:link xlink:href="qstring.xml">QString</db:link> and it cannot be duplicated. If <db:code role="parameter">category</db:code> is prepended or appended to other categories, the minimum and maximum values on the axis are updated accordingly.</db:para>
</db:section>
<db:section xml:id="max">
<db:title>QString QBarCategoryAxis::max() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>max</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">max</db:synopsisinfo>
<db:synopsisinfo role="signature">QString max() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum category.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qbarcategoryaxis.xml#max-prop">max</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#setMax">setMax</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxChanged">
<db:title>void QBarCategoryAxis::maxChanged(const QString &amp;<db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>maxChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">max</db:synopsisinfo>
<db:synopsisinfo role="signature">void maxChanged(const QString &amp;max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">max</db:code> value of the axis changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qbarcategoryaxis.xml#max-prop">max</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="min">
<db:title>QString QBarCategoryAxis::min() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>min</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">min</db:synopsisinfo>
<db:synopsisinfo role="signature">QString min() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum category.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qbarcategoryaxis.xml#min-prop">min</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#setMin">setMin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minChanged">
<db:title>void QBarCategoryAxis::minChanged(const QString &amp;<db:emphasis>min</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>minChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">min</db:synopsisinfo>
<db:synopsisinfo role="signature">void minChanged(const QString &amp;min)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:code role="parameter">min</db:code> value of the axis changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qbarcategoryaxis.xml#min-prop">min</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="rangeChanged">
<db:title>void QBarCategoryAxis::rangeChanged(const QString &amp;<db:emphasis>min</db:emphasis>, const QString &amp;<db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>rangeChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void rangeChanged(const QString &amp;min, const QString &amp;max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:code role="parameter">min</db:code> or <db:code role="parameter">max</db:code> value of the axis changes.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QBarCategoryAxis::remove(const QString &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QString &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes <db:code role="parameter">category</db:code> from the axis. Removing a category that currently sets the maximum or minimum value on the axis will affect the axis range.</db:para>
</db:section>
<db:section xml:id="replace">
<db:title>void QBarCategoryAxis::replace(const QString &amp;<db:emphasis>oldCategory</db:emphasis>, const QString &amp;<db:emphasis>newCategory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>replace</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>oldCategory</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newCategory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void replace(const QString &amp;oldCategory, const QString &amp;newCategory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces <db:code role="parameter">oldCategory</db:code> with <db:code role="parameter">newCategory</db:code>. If <db:code role="parameter">oldCategory</db:code> does not exist on the axis, nothing is done. <db:code role="parameter">newCategory</db:code> has to be a valid <db:link xlink:href="qstring.xml">QString</db:link> and it cannot be duplicated. If the minimum or maximum category is replaced, the minimum and maximum values on the axis are updated accordingly.</db:para>
</db:section>
<db:section xml:id="setCategories">
<db:title>void QBarCategoryAxis::setCategories(const QStringList &amp;<db:emphasis>categories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCategories</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>categories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">categories</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCategories(const QStringList &amp;categories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">categories</db:code> and discards the old ones. The axis range is adjusted to match the first and last category in <db:code role="parameter">categories</db:code>.</db:para>
<db:para>A category has to be a valid <db:link xlink:href="qstring.xml">QString</db:link> and it cannot be duplicated.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qbarcategoryaxis.xml#categories-prop">categories</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#categories">categories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMax">
<db:title>void QBarCategoryAxis::setMax(const QString &amp;<db:emphasis>max</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMax</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>max</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">max</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMax(const QString &amp;max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum category to <db:code role="parameter">max</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qbarcategoryaxis.xml#max-prop">max</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#max">max</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMin">
<db:title>void QBarCategoryAxis::setMin(const QString &amp;<db:emphasis>min</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMin</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>min</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">min</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMin(const QString &amp;min)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the minimum category to <db:code role="parameter">min</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qbarcategoryaxis.xml#min-prop">min</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbarcategoryaxis.xml#min">min</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QBarCategoryAxis::setRange(const QString &amp;<db:emphasis>minCategory</db:emphasis>, const QString &amp;<db:emphasis>maxCategory</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>minCategory</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>maxCategory</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(const QString &amp;minCategory, const QString &amp;maxCategory)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the axis range from <db:code role="parameter">minCategory</db:code> to <db:code role="parameter">maxCategory</db:code>.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] QAbstractAxis::AxisType QBarCategoryAxis::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QAbstractAxis::AxisType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractAxis::AxisType type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractaxis.xml#type" role="function">QAbstractAxis::type() const</db:link>.</db:para>
<db:para>Returns the type of the axis.</db:para>
</db:section>
</db:section>
</db:article>
