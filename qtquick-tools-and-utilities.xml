<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Tools and Utilities</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the tools and utilities that enhance developer experience.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt offers several tools and utilities to enable a rich developer experience, especially for Qt Quick developers. The following sections provide a brief introduction to those tools and utilities, and provide links to further information about them.</db:para>
<db:section xml:id="qt-creator">
<db:title>Qt Creator</db:title>
<db:para>The <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> IDE is the key tool that enhances the overall developer experience of working with Qt and Qt Quick. Its editing, formatting, profiling and debugging features for Qt Quick make working with Qt Quick easier.</db:para>
</db:section>
<db:section xml:id="qt-design-studio">
<db:title>Qt Design Studio</db:title>
<db:para><db:link xlink:href="https://doc.qt.io/qtdesignstudio/index.html">Qt Design Studio</db:link> enables designing Qt Quick-based UIs using simple drag-n-drop gestures that most designers are familiar with. It offers UI elements from the Qt Quick and Qt Quick Controls modules, as well as integration for custom UI elements.</db:para>
</db:section>
<db:section xml:id="qml-debugger">
<db:title>QML Debugger</db:title>
<db:para>The <db:link xlink:href="https://doc.qt.io/qtcreator/creator-debugging-qml.html">QML Debugger</db:link> is a very useful utility that enables:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>debugging JavaScript functions,</db:para>
</db:listitem>
<db:listitem>
<db:para>executing JavaScript expressions,</db:para>
</db:listitem>
<db:listitem>
<db:para>and inspecting QML properties.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The QML debugger is part of both <db:emphasis>Qt Creator</db:emphasis> and <db:emphasis>Qt Design Studio</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="qml-profiler">
<db:title>QML Profiler</db:title>
<db:para>The <db:link xlink:href="https://doc.qt.io/qtcreator/creator-qml-performance-monitor.html">QML Profiler</db:link> enables you to get necessary diagnostic information, allowing you to analyze the application code for performance issues. For example, too much JavaScript in each frame, long-running C++ functions, and so on.</db:para>
<db:para>The profiler is part of both <db:emphasis>Qt Creator</db:emphasis> and <db:emphasis>Qt Design Studio</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="qmllive">
<db:title>QmlLive</db:title>
<db:para><db:link xlink:href="https://doc.qt.io/QtQmlLive">QmlLive</db:link> is a 3rd party tool that offers a QML runtime capable of rendering changes to the code in realtime. It avoids the need to rebuild the application after every code change and install it on the target device. You can also extend it to build a custom runtime that suits your needs.</db:para>
</db:section>
<db:section xml:id="gammaray">
<db:title>GammaRay</db:title>
<db:para><db:link xlink:href="https://doc.qt.io/GammaRay">GammaRay</db:link> is a useful utility that provides diagnostic information about your application. It is similar to the QML Profiler described in the earlier section, but offers a lot more. For example, the number of items or QObjects created, function calls made, time taken by each function call, property value introspection at runtime, and so on. Such information is very handy, especially while debugging QML applications.</db:para>
</db:section>
<db:section xml:id="squish">
<db:title>Squish</db:title>
<db:para><db:link xlink:href="https://www.qt.io/product/testing-tools#squish">Squish</db:link> is a well-known testing tool that automates UI testing by recording your actions or running scripts. Once the tests are setup, UI tests are a lot easier to run.</db:para>
</db:section>
<db:section xml:id="qmllint">
<db:title>qmllint</db:title>
<db:para><db:link xlink:href="qtquick-tool-qmllint.xml">qmllint</db:link> is a tool shipped with Qt, that verifies the syntatic validity of QML files. It also warns about some QML anti-patterns. If you want to disable a specific warning type, you can find the appropriate flag for doing so by passing <db:code>--help</db:code> on the command line.</db:para>
</db:section>
<db:section xml:id="qmlformat">
<db:title>qmlformat</db:title>
<db:para><db:emphasis>qmlformat</db:emphasis> is a tool that automatically formats QML files in accordance with the <db:link xlink:href="">QML Coding Conventions</db:link>.</db:para>
<db:para>The tool groups all properties, functions, and signals together, instead of retaining the order you specified.</db:para>
<db:para>Imports will also be sorted in alphabetical order. This can be disabled by specifying the <db:code>-n</db:code> flag.</db:para>
<db:para>By default, qmlformat writes the formatted version of the file to stdout. If you wish to have your file updated in-place specify the <db:code>-i</db:code> flag.</db:para>
<db:para>You may also change tab widths and line ending types among other settings, either via command line options or by using a settings file.</db:para>
</db:section>
<db:section xml:id="qmltc">
<db:title>qmltc</db:title>
<db:para><db:link xlink:href="qtqml-tool-qmltc.xml">qmltc</db:link> is a tool that compiles QML types to C++ classes. Its generated output acts as an alternative to the <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>-based object creation.</db:para>
<db:para>Once enabled through <db:link xlink:href="qt-target-compile-qml-to-cpp.xml">CMake</db:link>, <db:code>qmltc</db:code> runs ahead of time during your project build phase.</db:para>
<db:para>To make use of the compiled C++, you <db:emphasis>must</db:emphasis> modify your application-side C++ code (in particular, the way you instantiate QML objects from C++).</db:para>
<db:para>See the full documentation page of <db:link xlink:href="qtqml-tool-qmltc.xml">qmltc</db:link> for details.</db:para>
</db:section>
</db:article>
