<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Tools and Utilities</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the tools and utilities that enhance developer experience.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt offers several tools and utilities to enable a rich developer experience, especially for Qt Quick developers. The following sections provide a brief introduction to those tools and utilities, and provide links to further information about them.</db:para>
<db:section xml:id="qt-quick-designer">
<db:title>Qt Quick Designer</db:title>
<db:para>The Qt Quick Designer enables designing Qt Quick-based UIs using simple drag-n-drop gestures that most designers are familiar with. It offers UI elements from the Qt Quick and Qt Quick Controls modules, as well as integration for custom UI elements.</db:para>
<db:para>The following is a list of example applications that use UIs created by the Qt Quick Designer:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-contactlist-example.xml">Qt Quick Controls - Contact List</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-flatstyle-example.xml">Qt Quick Controls - Flat Style</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="qml-debugger-and-profiler">
<db:title>QML Debugger and Profiler</db:title>
<db:para>Being a declarative language, a piece of QML code provides minimal details about the entities defined. In such a scenario, the QML debugger is a very useful utility that enables:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>debugging JavaScript functions,</db:para>
</db:listitem>
<db:listitem>
<db:para>executing JavaScript expressions,</db:para>
</db:listitem>
<db:listitem>
<db:para>and inspecting QML properties.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Besides this, a QML profiler enables you to get necessary diagnostic information, allowing you to analyze the application code for performance issues. For example, too much JavaScript in each frame, long-running C++ functions, and so on.</db:para>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-debugging-qml.html">QML Debugger</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/qtcreator/creator-qml-performance-monitor.html">QML Profiler</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qmllive-gammaray-and-squish">
<db:title>QmlLive, GammaRay, and Squish</db:title>
<db:para>QmlLive is a 3rd party tool that offers a QML runtime capable of rendering changes to the code in realtime. It avoids the need to rebuild the application after every code change and install it on the target device. You can also extend it to build a custom runtime that suits your needs.</db:para>
<db:para>GammaRay is a useful utility that provides diagnostic information about your application. It is similar to the QML Profiler described in the earlier section, but offers a lot more. For example, the number of items or QObjects created, function calls made, time taken by each function call, property value introspection at runtime, and so on. Such information is very handy, especially while debugging QML applications.</db:para>
<db:para>Squish is a well-known testing tool that automates UI testing by recording your actions or running scripts. Once the tests are setup, UI tests are a lot easier to run.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/QtQmlLive">QmlLive</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://doc.qt.io/GammaRay">GammaRay</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://www.froglogic.com/squish/gui-testing">Squish</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qt-creator">
<db:title>Qt Creator</db:title>
<db:para>The Qt Creator IDE is the key tool that enhances the overall developer experience of working with Qt Quick. Its auto-completion and debugging features make working with Qt Quick easier. Besides this, most of the tools and utilities mentioned in the earlier sections are integrated into it, with the possibility of integrating 3rd party tools such as QmlLive and GammaRay.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator Manual</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qmllint">
<db:title>qmllint</db:title>
<db:para><db:emphasis>qmllint</db:emphasis> is a tool shipped with Qt, that verifies the syntatic validity of QML files. It also warns about some QML anti-patterns. If you want to disable a specific warning type, you can find the appropriate flag for doing so by passing <db:code>--help</db:code> on the command line.</db:para>
<db:para>qmllint warns about</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Unqualified accesses of properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>Usage of signal handlers without a matching signal.</db:para>
</db:listitem>
<db:listitem>
<db:para>Usage of with statements in QML.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In order for qmllint to work properly, it requires type information. That information is provided by qmltypes files. qmltypes files in the current directory, as well as those for Qt's built-in types, are discovered automatically. For qmltypes files from libraries that reside outside of the current directory, you can provide their path via the -I flag.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-modules-qmldir.xml#type-description-files">qmltypes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="qmlformat">
<db:title>qmlformat</db:title>
<db:para><db:emphasis>qmlformat</db:emphasis> is a tool that automatically formats QML files in accordance with the <db:link xlink:href="qml-codingconventions.xml">QML Coding Conventions</db:link>.</db:para>
<db:para>The tool groups all properties, functions, and signals together, instead of retaining the order you specified.</db:para>
<db:para>Imports will also be sorted in alphabetical order. This can be disabled by specifying the <db:code>-n</db:code> flag.</db:para>
<db:para>By default, qmlformat writes the formatted version of the file to stdout. If you wish to have your file updated in-place specify the <db:code>-i</db:code> flag.</db:para>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-codingconventions.xml">QML Coding Conventions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
