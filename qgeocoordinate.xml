<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoCoordinate Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> class defines a geographical position on the surface of the Earth.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoCoordinate</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoCoordinate is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> is defined by latitude, longitude, and optionally, altitude.</db:para>
<db:para>Use <db:link xlink:href="qgeocoordinate.xml#type">type</db:link>() to determine whether a coordinate is a 2D coordinate (has latitude and longitude only) or 3D coordinate (has latitude, longitude and altitude). Use <db:link xlink:href="qgeocoordinate.xml#distanceTo">distanceTo</db:link>() and <db:link xlink:href="qgeocoordinate.xml#azimuthTo">azimuthTo</db:link>() to calculate the distance and bearing between coordinates.</db:para>
<db:para>The coordinate values should be specified using the WGS84 datum. For more information on geographical terms see this article on <db:link xlink:href="http://en.wikipedia.org/wiki/Geographic_coordinate_system">coordinates</db:link> and another on <db:link xlink:href="http://en.wikipedia.org/wiki/Geodetic_system">geodetic systems</db:link> including WGS84.</db:para>
<db:para>Azimuth in this context is equivalent to a compass bearing based on true north.</db:para>
<db:para>This class is a <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> since Qt 5.5. It can be <db:link xlink:href="positioning-cpp-qml.xml#cpp-value-integration-positioning">directly used from C++ and QML</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CoordinateFormat-enum">
<db:title>enum QGeoCoordinate::CoordinateFormat</db:title>
<db:enumsynopsis>
<db:enumname>CoordinateFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>Degrees</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DegreesWithHemisphere</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DegreesMinutes</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DegreesMinutesWithHemisphere</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DegreesMinutesSeconds</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DegreesMinutesSecondsWithHemisphere</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the possible formatting options for <db:link xlink:href="qgeocoordinate.xml#toString">toString</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::Degrees</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in decimal degrees format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::DegreesWithHemisphere</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in decimal degrees format, using 'N', 'S', 'E' or 'W' to indicate the hemispheres of the coordinates.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::DegreesMinutes</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in degrees-minutes format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::DegreesMinutesWithHemisphere</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in degrees-minutes format, using 'N', 'S', 'E' or 'W' to indicate the hemispheres of the coordinates.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::DegreesMinutesSeconds</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in degrees-minutes-seconds format.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::DegreesMinutesSecondsWithHemisphere</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Returns a string representation of the coordinates in degrees-minutes-seconds format, using 'N', 'S', 'E' or 'W' to indicate the hemispheres of the coordinates.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="CoordinateType-enum">
<db:title>enum QGeoCoordinate::CoordinateType</db:title>
<db:enumsynopsis>
<db:enumname>CoordinateType</db:enumname>
<db:enumitem>
<db:enumidentifier>InvalidCoordinate</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Coordinate2D</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Coordinate3D</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the types of a coordinate.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::InvalidCoordinate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An invalid coordinate. A coordinate is invalid if its latitude or longitude values are invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::Coordinate2D</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A coordinate with valid latitude and longitude values.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:emphasis>::Coordinate3D</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A coordinate with valid latitude and longitude values, and also an altitude value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="altitude-prop">
<db:title>[since 5.5] altitude : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>altitude</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">altitude</db:synopsisinfo>
<db:synopsisinfo role="setter">setAltitude</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the altitude in meters above sea level.</db:para>
<db:para>The property is undefined (<db:link xlink:href="qtglobal.xml#qQNaN">qQNaN</db:link>()) if the altitude has not been set.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#altitude">altitude</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#setAltitude">setAltitude</db:link></db:emphasis>(<db:type>double</db:type> <db:emphasis>altitude</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="isValid-prop">
<db:title>[read-only, since 5.5] isValid : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>isValid</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isValid</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validity of this geo coordinate.</db:para>
<db:para>The geo coordinate is valid if the <db:link xlink:href="qgeocoordinate.xml#longitude">longitude</db:link> and <db:link xlink:href="qgeocoordinate.xml#latitude">latitude</db:link> properties have been set to valid values.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#isValid">isValid</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="latitude-prop">
<db:title>[since 5.5] latitude : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>latitude</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">latitude</db:synopsisinfo>
<db:synopsisinfo role="setter">setLatitude</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the latitude in decimal degrees.</db:para>
<db:para>The property is undefined (<db:link xlink:href="qtglobal.xml#qQNaN">qQNaN</db:link>()) if the latitude has not been set. A positive latitude indicates the Northern Hemisphere, and a negative latitude indicates the Southern Hemisphere. When setting the latitude the new value should be in the <db:link xlink:href="http://en.wikipedia.org/wiki/World_Geodetic_System">WGS84</db:link> datum format.</db:para>
<db:para>To be valid, the latitude must be between -90 to 90 inclusive.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#latitude">latitude</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#setLatitude">setLatitude</db:link></db:emphasis>(<db:type>double</db:type> <db:emphasis>latitude</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="longitude-prop">
<db:title>[since 5.5] longitude : double</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>double</db:type>
<db:varname>longitude</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">longitude</db:synopsisinfo>
<db:synopsisinfo role="setter">setLongitude</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the longitude in decimal degrees.</db:para>
<db:para>The property is undefined (<db:link xlink:href="qtglobal.xml#qQNaN">qQNaN</db:link>()) if the longitude has not been set. A positive longitude indicates the Eastern Hemisphere, and a negative longitude indicates the Western Hemisphere. When setting the longitude the new value should be in the <db:link xlink:href="http://en.wikipedia.org/wiki/World_Geodetic_System">WGS84</db:link> datum format.</db:para>
<db:para>To be valid, the longitude must be between -180 to 180 inclusive.</db:para>
<db:para>While this property is introduced in Qt 5.5, the related accessor functions exist since the first version of this class.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>double</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#longitude">longitude</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qgeocoordinate.xml#setLongitude">setLongitude</db:link></db:emphasis>(<db:type>double</db:type> <db:emphasis>longitude</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoCoordinate::operator!=(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if latitude, longitude, or altitude of this coordinate are not identical to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoCoordinate">
<db:title>QGeoCoordinate::QGeoCoordinate()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCoordinate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a coordinate. The coordinate will be invalid until <db:link xlink:href="qgeocoordinate.xml#setLatitude">setLatitude</db:link>() and <db:link xlink:href="qgeocoordinate.xml#setLongitude">setLongitude</db:link>() have been called.</db:para>
</db:section>
<db:section xml:id="QGeoCoordinate-1">
<db:title>QGeoCoordinate::QGeoCoordinate(double <db:emphasis>latitude</db:emphasis>, double <db:emphasis>longitude</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCoordinate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>latitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>longitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate(double latitude, double longitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a coordinate with the given <db:code role="parameter">latitude</db:code> and <db:code role="parameter">longitude</db:code>.</db:para>
<db:para>If the latitude is not between -90 to 90 inclusive, or the longitude is not between -180 to 180 inclusive, none of the values are set and the <db:link xlink:href="qgeocoordinate.xml#type">type</db:link>() will be <db:link xlink:href="qgeocoordinate.xml#CoordinateType-enum">QGeoCoordinate::InvalidCoordinate</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGeoCoordinate-2">
<db:title>QGeoCoordinate::QGeoCoordinate(double <db:emphasis>latitude</db:emphasis>, double <db:emphasis>longitude</db:emphasis>, double <db:emphasis>altitude</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCoordinate</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>latitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>longitude</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>altitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate(double latitude, double longitude, double altitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a coordinate with the given <db:code role="parameter">latitude</db:code>, <db:code role="parameter">longitude</db:code> and <db:code role="parameter">altitude</db:code>.</db:para>
<db:para>If the latitude is not between -90 to 90 inclusive, or the longitude is not between -180 to 180 inclusive, none of the values are set and the <db:link xlink:href="qgeocoordinate.xml#type">type</db:link>() will be <db:link xlink:href="qgeocoordinate.xml#CoordinateType-enum">QGeoCoordinate::InvalidCoordinate</db:link>.</db:para>
<db:para>Note that <db:code role="parameter">altitude</db:code> specifies the meters above sea level.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGeoCoordinate-3">
<db:title>QGeoCoordinate::QGeoCoordinate(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoCoordinate</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate(const QGeoCoordinate &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a coordinate from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoCoordinate">
<db:title>QGeoCoordinate::~QGeoCoordinate()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoCoordinate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoCoordinate()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the coordinate object.</db:para>
</db:section>
<db:section xml:id="altitude">
<db:title>double QGeoCoordinate::altitude() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>altitude</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">altitude</db:synopsisinfo>
<db:synopsisinfo role="signature">double altitude() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the altitude (meters above sea level).</db:para>
<db:para>The return value is undefined if the altitude has not been set.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocoordinate.xml#altitude-prop">altitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#setAltitude">setAltitude</db:link>()</db:member>
<db:member><db:link xlink:href="qgeocoordinate.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="atDistanceAndAzimuth">
<db:title>QGeoCoordinate QGeoCoordinate::atDistanceAndAzimuth(qreal <db:emphasis>distance</db:emphasis>, qreal <db:emphasis>azimuth</db:emphasis>, qreal <db:emphasis>distanceUp</db:emphasis> = 0.0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate</db:type>
<db:methodname>atDistanceAndAzimuth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>distance</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>azimuth</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>distanceUp</db:parameter>
<db:initializer>0.0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate atDistanceAndAzimuth(qreal distance, qreal azimuth, qreal distanceUp) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the coordinate that is reached by traveling <db:code role="parameter">distance</db:code> meters from the current coordinate at <db:code role="parameter">azimuth</db:code> (or bearing) along a great-circle. There is an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
<db:para>The altitude will have <db:code role="parameter">distanceUp</db:code> added to it.</db:para>
<db:para>Returns an invalid coordinate if this coordinate is invalid.</db:para>
</db:section>
<db:section xml:id="azimuthTo">
<db:title>qreal QGeoCoordinate::azimuthTo(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>azimuthTo</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal azimuthTo(const QGeoCoordinate &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the azimuth (or bearing) in degrees from this coordinate to the coordinate specified by <db:code role="parameter">other</db:code>. Altitude is not used in the calculation.</db:para>
<db:para>The bearing returned is the bearing from the origin to <db:code role="parameter">other</db:code> along the great-circle between the two coordinates. There is an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
<db:para>Returns 0 if the type of this coordinate or the type of <db:code role="parameter">other</db:code> is <db:link xlink:href="qgeocoordinate.xml#CoordinateType-enum">QGeoCoordinate::InvalidCoordinate</db:link>.</db:para>
</db:section>
<db:section xml:id="distanceTo">
<db:title>qreal QGeoCoordinate::distanceTo(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>distanceTo</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal distanceTo(const QGeoCoordinate &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the distance (in meters) from this coordinate to the coordinate specified by <db:code role="parameter">other</db:code>. Altitude is not used in the calculation.</db:para>
<db:para>This calculation returns the great-circle distance between the two coordinates, with an assumption that the Earth is spherical for the purpose of this calculation.</db:para>
<db:para>Returns 0 if the type of this coordinate or the type of <db:code role="parameter">other</db:code> is <db:link xlink:href="qgeocoordinate.xml#CoordinateType-enum">QGeoCoordinate::InvalidCoordinate</db:link>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QGeoCoordinate::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">isValid</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qgeocoordinate.xml#longitude">longitude</db:link> and <db:link xlink:href="qgeocoordinate.xml#latitude">latitude</db:link> are valid.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocoordinate.xml#isValid-prop">isValid</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="latitude">
<db:title>double QGeoCoordinate::latitude() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>latitude</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">latitude</db:synopsisinfo>
<db:synopsisinfo role="signature">double latitude() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the latitude, in decimal degrees. The return value is undefined if the latitude has not been set.</db:para>
<db:para>A positive latitude indicates the Northern Hemisphere, and a negative latitude indicates the Southern Hemisphere.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocoordinate.xml#latitude-prop">latitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#setLatitude">setLatitude</db:link>()</db:member>
<db:member><db:link xlink:href="qgeocoordinate.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="longitude">
<db:title>double QGeoCoordinate::longitude() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>longitude</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">longitude</db:synopsisinfo>
<db:synopsisinfo role="signature">double longitude() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the longitude, in decimal degrees. The return value is undefined if the longitude has not been set.</db:para>
<db:para>A positive longitude indicates the Eastern Hemisphere, and a negative longitude indicates the Western Hemisphere.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qgeocoordinate.xml#longitude-prop">longitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#setLongitude">setLongitude</db:link>()</db:member>
<db:member><db:link xlink:href="qgeocoordinate.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAltitude">
<db:title>void QGeoCoordinate::setAltitude(double <db:emphasis>altitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAltitude</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>altitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">altitude</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAltitude(double altitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the altitude (meters above sea level) to <db:code role="parameter">altitude</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgeocoordinate.xml#altitude-prop">altitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#altitude">altitude</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLatitude">
<db:title>void QGeoCoordinate::setLatitude(double <db:emphasis>latitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLatitude</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>latitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">latitude</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLatitude(double latitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the latitude (in decimal degrees) to <db:code role="parameter">latitude</db:code>. The value should be in the WGS84 datum.</db:para>
<db:para>To be valid, the latitude must be between -90 to 90 inclusive.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgeocoordinate.xml#latitude-prop">latitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#latitude">latitude</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLongitude">
<db:title>void QGeoCoordinate::setLongitude(double <db:emphasis>longitude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLongitude</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>longitude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">longitude</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLongitude(double longitude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the longitude (in decimal degrees) to <db:code role="parameter">longitude</db:code>. The value should be in the WGS84 datum.</db:para>
<db:para>To be valid, the longitude must be between -180 to 180 inclusive.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qgeocoordinate.xml#longitude-prop">longitude</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeocoordinate.xml#longitude">longitude</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QGeoCoordinate::toString(QGeoCoordinate::CoordinateFormat <db:emphasis>format</db:emphasis> = DegreesMinutesSecondsWithHemisphere) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>QGeoCoordinate::CoordinateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>DegreesMinutesSecondsWithHemisphere</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(QGeoCoordinate::CoordinateFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this coordinate as a string in the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>For example, if this coordinate has a latitude of -27.46758, a longitude of 153.027892 and an altitude of 28.1, these are the strings returned depending on <db:code role="parameter">format</db:code>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:code role="parameter">format</db:code> value</db:para>
</db:th>
<db:th>
<db:para>Returned string</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">Degrees</db:link></db:para>
</db:td>
<db:td>
<db:para>-27.46758°, 153.02789°, 28.1m</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">DegreesWithHemisphere</db:link></db:para>
</db:td>
<db:td>
<db:para>27.46758° S, 153.02789° E, 28.1m</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">DegreesMinutes</db:link></db:para>
</db:td>
<db:td>
<db:para>-27° 28.054', 153° 1.673', 28.1m</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">DegreesMinutesWithHemisphere</db:link></db:para>
</db:td>
<db:td>
<db:para>27° 28.054 S', 153° 1.673' E, 28.1m</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">DegreesMinutesSeconds</db:link></db:para>
</db:td>
<db:td>
<db:para>-27° 28' 3.2&quot;, 153° 1' 40.4&quot;, 28.1m</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qgeocoordinate.xml#CoordinateFormat-enum">DegreesMinutesSecondsWithHemisphere</db:link></db:para>
</db:td>
<db:td>
<db:para>27° 28' 3.2&quot; S, 153° 1' 40.4&quot; E, 28.1m</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The altitude field is omitted if no altitude is set.</db:para>
<db:para>If the coordinate is invalid, an empty string is returned.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QGeoCoordinate::CoordinateType QGeoCoordinate::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCoordinate::CoordinateType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate::CoordinateType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this coordinate.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoCoordinate &amp;QGeoCoordinate::operator=(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoCoordinate &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCoordinate &amp; operator=(const QGeoCoordinate &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this coordinate and returns a reference to this coordinate.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoCoordinate::operator==(const QGeoCoordinate &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGeoCoordinate &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the latitude, longitude and altitude of this coordinate are the same as those of <db:code role="parameter">other</db:code>.</db:para>
<db:para>The longitude will be ignored if the latitude is +/- 90 degrees.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">coordinate</db:code> to the specified <db:code role="parameter">stream</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QGeoCoordinate &amp;<db:emphasis>coordinate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoCoordinate &amp;</db:type>
<db:parameter>coordinate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QGeoCoordinate &amp;coordinate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a coordinate from the specified <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">coordinate</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
