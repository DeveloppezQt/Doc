<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QNetworkRequest Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> class holds a request to be sent with <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkRequest is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> is part of the Network Access API and is the class holding the information necessary to send a request over the network. It contains a URL and some ancillary information that can be used to modify the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Attribute-enum">
<db:title>[since 4.7] enum QNetworkRequest::Attribute</db:title>
<db:para>Attribute codes for the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> and <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>.</db:para>
<db:para>Attributes are extra meta-data that are used to control the behavior of the request and to pass further information from the reply back to the application. Attributes are also extensible, allowing custom implementations to pass custom values.</db:para>
<db:para>The following table explains what the default attribute codes are, the <db:link xlink:href="qvariant.xml">QVariant</db:link> types associated, the default value if said attribute is missing and whether it's used in requests or replies.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpStatusCodeAttribute</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (no default) Indicates the HTTP status code received from the HTTP server (like 200, 304, 404, 401, etc.). If the connection was not HTTP-based, this attribute will not be present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpReasonPhraseAttribute</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QByteArray</db:link> (no default) Indicates the HTTP reason phrase as received from the HTTP server (like &quot;Ok&quot;, &quot;Found&quot;, &quot;Not Found&quot;, &quot;Access Denied&quot;, etc.) This is the human-readable representation of the status code (see above). If the connection was not HTTP-based, this attribute will not be present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::RedirectionTargetAttribute</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QUrl</db:link> (no default) If present, it indicates that the server is redirecting the request to a different URL. The Network Access API does not by default follow redirections: it's up to the application to determine if the requested redirection should be allowed, according to its security policies. The returned URL might be relative. Use <db:link xlink:href="qurl.xml#resolved">QUrl::resolved</db:link>() to create an absolute URL out of it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ConnectionEncryptedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the data was obtained through an encrypted (secure) connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CacheLoadControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#CacheLoadControl-enum">QNetworkRequest::PreferNetwork</db:link>) Controls how the cache should be accessed. The possible values are those of <db:link xlink:href="qnetworkrequest.xml#CacheLoadControl-enum">QNetworkRequest::CacheLoadControl</db:link>. Note that the default <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> implementation does not support caching. However, this attribute may be used by certain backends to modify their requests (for example, for caching proxies).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CacheSaveControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: true) Controls if the data obtained should be saved to cache for future uses. If the value is false, the data obtained will not be automatically cached. If true, data may be cached, provided it is cacheable (what is cacheable depends on the protocol being used).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::SourceIsFromCacheAttribute</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the data was obtained from cache or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::DoNotBufferUploadDataAttribute</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> code is allowed to buffer the upload data, e.g. when doing a HTTP POST. When using this flag with sequential upload data, the <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">ContentLengthHeader</db:link> header must be set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpPipeliningAllowedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> code is allowed to use HTTP pipelining with this request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpPipeliningWasUsedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> Indicates whether the HTTP pipelining was used for receiving this reply.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CustomVerbAttribute</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QByteArray</db:link> Holds the value for the custom HTTP verb to send (destined for usage of other verbs than GET, POST, PUT and DELETE). This verb is set when calling <db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">QNetworkAccessManager::sendCustomRequest</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieLoadControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to send 'Cookie' headers in the request. This attribute is set to false by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieSaveControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to save 'Cookie' headers received from the server in reply to the request. This attribute is set to false by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AuthenticationReuseAttribute</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to use cached authorization credentials in the request, if available. If this is set to <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Manual</db:link> and the authentication mechanism is 'Basic' or 'Digest', Qt will not send an an 'Authorization' HTTP header with any cached credentials it may have for the request's URL. This attribute is set to <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Manual</db:link> by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::BackgroundRequestAttribute</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates that this is a background transfer, rather than a user initiated transfer. Depending on the platform, background transfers may be subject to different policies. The <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> ConnectInBackground property will be set according to this attribute.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::User</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>Special type. Additional information can be passed in QVariants with types ranging from User to UserMax. The default implementation of Network Access will ignore any request attributes in this range and it will not produce any attributes in this range in replies. The range is reserved for extensions of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::UserMax</db:code></db:para>
</db:td>
<db:td><db:code>32767</db:code></db:td>
<db:td>
<db:para>Special type. See User.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="CacheLoadControl-enum">
<db:title>enum QNetworkRequest::CacheLoadControl</db:title>
<db:para>Controls the caching mechanism of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AlwaysNetwork</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>always load from network and do not check if the cache has a valid entry (similar to the &quot;Reload&quot; feature in browsers); in addition, force intermediate caches to re-validate.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::PreferNetwork</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>default value; load from the network if the cached entry is older than the network entry. This will never return stale data from the cache, but revalidate resources that have become stale.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::PreferCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>load from cache if available, otherwise load from network. Note that this can return possibly stale (but not expired) items from cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AlwaysCache</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>only load from cache, indicating error if the item was not cached (i.e., off-line mode)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="KnownHeaders-enum">
<db:title>enum QNetworkRequest::KnownHeaders</db:title>
<db:para>List of known header types that <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> parses. Each known header is also represented in raw form with its full HTTP name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentDispositionHeader</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Disposition header and contains a string containing the disposition type (for instance, attachment) and a parameter (for instance, filename).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentTypeHeader</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Type header and contains a string containing the media (MIME) type and any auxiliary data (for instance, charset).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentLengthHeader</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Length header and contains the length in bytes of the data transmitted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LocationHeader</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Location header and contains a URL representing the actual location of the data, including the destination URL in case of redirections.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LastModifiedHeader</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Last-Modified header and contains a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> representing the last modification date of the contents.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieHeader</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Cookie header and contains a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>&gt; representing the cookies to be sent back to the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::SetCookieHeader</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Set-Cookie header and contains a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>&gt; representing the cookies sent by the server to be stored locally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::UserAgentHeader</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The User-Agent header sent by HTTP clients.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ServerHeader</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The Server header received by HTTP clients.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="LoadControl-enum">
<db:title>[since 4.7] enum QNetworkRequest::LoadControl</db:title>
<db:para>Indicates if an aspect of the request's loading mechanism has been manually overridden, e.g. by Qt WebKit.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Automatic</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>default value: indicates default behaviour.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Manual</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>indicates behaviour has been manually overridden.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.7.</db:para>
</db:section>
<db:section xml:id="Priority-enum">
<db:title>[since 4.7] enum QNetworkRequest::Priority</db:title>
<db:para>This enum lists the possible network request priorities.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HighPriority</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>High priority</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::NormalPriority</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Normal priority</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LowPriority</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Low priority</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.7.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkRequest-1">
<db:title>[explicit] QNetworkRequest::QNetworkRequest(const QUrl &amp;<db:emphasis>url</db:emphasis> = QUrl())</db:title>
<db:para>Constructs a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> object with <db:code role="parameter">url</db:code> as the URL to be requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkRequest">
<db:title>QNetworkRequest::QNetworkRequest(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkRequest">
<db:title>[noexcept] QNetworkRequest::~QNetworkRequest()</db:title>
<db:para>Disposes of the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> object.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>QVariant QNetworkRequest::attribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:para>Returns the attribute associated with the code <db:code role="parameter">code</db:code>. If the attribute has not been set, it returns <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:para>Note: this function does not apply the defaults listed in <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasRawHeader">
<db:title>bool QNetworkRequest::hasRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:para>Returns true if the raw header <db:code role="parameter">headerName</db:code> is present in this network request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="header">
<db:title>QVariant QNetworkRequest::header(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>) const</db:title>
<db:para>Returns the value of the known network header <db:code role="parameter">header</db:code> if it is present in this request. If it is not present, returns QVariant() (i.e., an invalid variant).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="originatingObject">
<db:title>[since 4.6] QObject *QNetworkRequest::originatingObject() const</db:title>
<db:para>Returns a reference to the object that initiated this network request; returns 0 if not set or the object has been destroyed.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setOriginatingObject">setOriginatingObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="priority">
<db:title>[since 4.7] QNetworkRequest::Priority QNetworkRequest::priority() const</db:title>
<db:para>Return the priority of this request.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setPriority">setPriority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeader">
<db:title>QByteArray QNetworkRequest::rawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:para>Returns the raw form of header <db:code role="parameter">headerName</db:code>. If no such header is present, an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned, which may be indistinguishable from a header that is present but has no content (use <db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>() to find out if the header exists or not).</db:para>
<db:para>Raw headers can be set with <db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>() or with <db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeaderList">
<db:title>QList&lt;QByteArray&gt; QNetworkRequest::rawHeaderList() const</db:title>
<db:para>Returns a list of all raw headers that are set in this network request. The list is in the order that the headers were set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>void QNetworkRequest::setAttribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute associated with code <db:code role="parameter">code</db:code> to be value <db:code role="parameter">value</db:code>. If the attribute is already set, the previous value is discarded. In special, if <db:code role="parameter">value</db:code> is an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>, the attribute is unset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeader">
<db:title>void QNetworkRequest::setHeader(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value of the known header <db:code role="parameter">header</db:code> to be <db:code role="parameter">value</db:code>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOriginatingObject">
<db:title>[since 4.6] void QNetworkRequest::setOriginatingObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Allows setting a reference to the <db:code role="parameter">object</db:code> initiating the request.</db:para>
<db:para>For example Qt WebKit sets the originating object to the QWebFrame that initiated the request.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#originatingObject">originatingObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPriority">
<db:title>[since 4.7] void QNetworkRequest::setPriority(QNetworkRequest::Priority <db:emphasis>priority</db:emphasis>)</db:title>
<db:para>Set the priority of this request to <db:code role="parameter">priority</db:code>.</db:para>
<db:note>
<db:para>The <db:code role="parameter">priority</db:code> is only a hint to the network access manager. It can use it or not. Currently it is used for HTTP to decide which request should be sent first to a server.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#priority">priority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawHeader">
<db:title>void QNetworkRequest::setRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>, const QByteArray &amp;<db:emphasis>headerValue</db:emphasis>)</db:title>
<db:para>Sets the header <db:code role="parameter">headerName</db:code> to be of value <db:code role="parameter">headerValue</db:code>. If <db:code role="parameter">headerName</db:code> corresponds to a known header (see <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">QNetworkRequest::KnownHeaders</db:link>), the raw format will be parsed and the corresponding &quot;cooked&quot; header will be set as well.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">request.setRawHeader(&quot;Last-Modified&quot;, &quot;Sun, 06 Nov 1994 08:49:37 GMT&quot;);
</db:programlisting>
<db:para>will also set the known header <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">LastModifiedHeader</db:link> to be the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object of the parsed date.</db:para>
<db:para>Note: setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (&quot;,&quot;) and set one single raw header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QNetworkRequest::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>Sets this network request's SSL configuration to be <db:code role="parameter">config</db:code>. The settings that apply are the private key, the local certificate, the SSL protocol (SSLv2, SSLv3, TLSv1.0 where applicable), the CA certificates and the ciphers that the SSL backend is allowed to use.</db:para>
<db:para>By default, no SSL configuration is set, which allows the backends to choose freely what configuration is best for them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#defaultConfiguration">QSslConfiguration::defaultConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrl">
<db:title>void QNetworkRequest::setUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the URL this network request is referring to be <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QNetworkRequest::sslConfiguration() const</db:title>
<db:para>Returns this network request's SSL configuration. By default, no SSL settings are specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QNetworkRequest::swap(QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this network request with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QNetworkRequest::url() const</db:title>
<db:para>Returns the URL this network request is referring to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkRequest::operator!=(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns false if this object is not the same as <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNetworkRequest &amp;QNetworkRequest::operator=(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkRequest::operator==(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this object is the same as <db:code role="parameter">other</db:code> (i.e., if they have the same URL, same headers and same meta-data settings).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
