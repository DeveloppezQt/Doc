<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkRequest Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> class holds a request to be sent with <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkRequest is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> is part of the Network Access API and is the class holding the information necessary to send a request over the network. It contains a URL and some ancillary information that can be used to modify the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Attribute-enum">
<db:title>enum QNetworkRequest::Attribute</db:title>
<db:enumsynopsis>
<db:enumname>Attribute</db:enumname>
<db:enumitem>
<db:enumidentifier>HttpStatusCodeAttribute</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HttpReasonPhraseAttribute</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RedirectionTargetAttribute</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionEncryptedAttribute</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CacheLoadControlAttribute</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CacheSaveControlAttribute</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SourceIsFromCacheAttribute</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DoNotBufferUploadDataAttribute</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HttpPipeliningAllowedAttribute</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HttpPipeliningWasUsedAttribute</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CustomVerbAttribute</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CookieLoadControlAttribute</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AuthenticationReuseAttribute</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CookieSaveControlAttribute</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MaximumDownloadBufferSizeAttribute</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DownloadBufferAttribute</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SynchronousRequestAttribute</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BackgroundRequestAttribute</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EmitAllUploadProgressSignalsAttribute</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Http2AllowedAttribute</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Http2WasUsedAttribute</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OriginalContentLengthAttribute</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RedirectPolicyAttribute</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Http2DirectAttribute</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceTypeAttribute</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AutoDeleteReplyOnFinishAttribute</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>User</db:enumidentifier>
<db:enumvalue>1000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserMax</db:enumidentifier>
<db:enumvalue>32767</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Attribute codes for the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> and <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link>.</db:para>
<db:para>Attributes are extra meta-data that are used to control the behavior of the request and to pass further information from the reply back to the application. Attributes are also extensible, allowing custom implementations to pass custom values.</db:para>
<db:para>The following table explains what the default attribute codes are, the <db:link xlink:href="qvariant.xml">QVariant</db:link> types associated, the default value if said attribute is missing and whether it's used in requests or replies.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpStatusCodeAttribute</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (no default) Indicates the HTTP status code received from the HTTP server (like 200, 304, 404, 401, etc.). If the connection was not HTTP-based, this attribute will not be present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpReasonPhraseAttribute</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QByteArray</db:link> (no default) Indicates the HTTP reason phrase as received from the HTTP server (like &quot;Ok&quot;, &quot;Found&quot;, &quot;Not Found&quot;, &quot;Access Denied&quot;, etc.) This is the human-readable representation of the status code (see above). If the connection was not HTTP-based, this attribute will not be present.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::RedirectionTargetAttribute</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QUrl</db:link> (no default) If present, it indicates that the server is redirecting the request to a different URL. The Network Access API does follow redirections by default, but if <db:link xlink:href="qnetworkrequest.xml#RedirectPolicy-enum">QNetworkRequest::ManualRedirectPolicy</db:link> is enabled and the redirect was not handled in redirected() then this attribute will be present. The returned URL might be relative. Use <db:link xlink:href="qurl.xml#resolved">QUrl::resolved</db:link>() to create an absolute URL out of it.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ConnectionEncryptedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the data was obtained through an encrypted (secure) connection.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CacheLoadControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#CacheLoadControl-enum">QNetworkRequest::PreferNetwork</db:link>) Controls how the cache should be accessed. The possible values are those of <db:link xlink:href="qnetworkrequest.xml#CacheLoadControl-enum">QNetworkRequest::CacheLoadControl</db:link>. Note that the default <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> implementation does not support caching. However, this attribute may be used by certain backends to modify their requests (for example, for caching proxies).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CacheSaveControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: true) Controls if the data obtained should be saved to cache for future uses. If the value is false, the data obtained will not be automatically cached. If true, data may be cached, provided it is cacheable (what is cacheable depends on the protocol being used).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::SourceIsFromCacheAttribute</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the data was obtained from cache or not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::DoNotBufferUploadDataAttribute</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> code is allowed to buffer the upload data, e.g. when doing a HTTP POST. When using this flag with sequential upload data, the <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">ContentLengthHeader</db:link> header must be set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpPipeliningAllowedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> code is allowed to use HTTP pipelining with this request.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HttpPipeliningWasUsedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> Indicates whether the HTTP pipelining was used for receiving this reply.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CustomVerbAttribute</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QByteArray</db:link> Holds the value for the custom HTTP verb to send (destined for usage of other verbs than GET, POST, PUT and DELETE). This verb is set when calling <db:link xlink:href="qnetworkaccessmanager.xml#sendCustomRequest">QNetworkAccessManager::sendCustomRequest</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieLoadControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to send 'Cookie' headers in the request. This attribute is set to false by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieSaveControlAttribute</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to save 'Cookie' headers received from the server in reply to the request. This attribute is set to false by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AuthenticationReuseAttribute</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> (default: <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Automatic</db:link>) Indicates whether to use cached authorization credentials in the request, if available. If this is set to <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Manual</db:link> and the authentication mechanism is 'Basic' or 'Digest', Qt will not send an an 'Authorization' HTTP header with any cached credentials it may have for the request's URL. This attribute is set to <db:link xlink:href="qnetworkrequest.xml#LoadControl-enum">QNetworkRequest::Manual</db:link> by Qt WebKit when creating a cross-origin XMLHttpRequest where withCredentials has not been set explicitly to true by the Javascript that created the request. See <db:link xlink:href="http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag">here</db:link> for more information. (This value was introduced in 4.7.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::BackgroundRequestAttribute</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates that this is a background transfer, rather than a user initiated transfer. Depending on the platform, background transfers may be subject to different policies.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Http2AllowedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: true) Indicates whether the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> code is allowed to use HTTP/2 with this request. This applies to SSL requests or 'cleartext' HTTP/2.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Http2WasUsedAttribute</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Replies only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether HTTP/2 was used for receiving this reply. (This value was introduced in 5.9.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::EmitAllUploadProgressSignalsAttribute</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) Indicates whether all upload signals should be emitted. By default, the uploadProgress signal is emitted only in 100 millisecond intervals. (This value was introduced in 5.5.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::OriginalContentLengthAttribute</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Replies only, type <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link> Holds the original content-length attribute before being invalidated and removed from the header when the data is compressed and the request was marked to be decompressed automatically. (This value was introduced in 5.9.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::RedirectPolicyAttribute</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link>, should be one of the <db:link xlink:href="qnetworkrequest.xml#RedirectPolicy-enum">QNetworkRequest::RedirectPolicy</db:link> values (default: <db:link xlink:href="qnetworkrequest.xml#RedirectPolicy-enum">NoLessSafeRedirectPolicy</db:link>). (This value was introduced in 5.9.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Http2DirectAttribute</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) If set, this attribute will force <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to use HTTP/2 protocol without initial HTTP/2 protocol negotiation. Use of this attribute implies prior knowledge that a particular server supports HTTP/2. The attribute works with SSL or 'cleartext' HTTP/2. If a server turns out to not support HTTP/2, when HTTP/2 direct was specified, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> gives up, without attempting to fall back to HTTP/1.1. If both Http2AllowedAttribute and Http2DirectAttribute are set, Http2DirectAttribute takes priority. (This value was introduced in 5.11.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AutoDeleteReplyOnFinishAttribute</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Requests only, type: <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link> (default: false) If set, this attribute will make <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> delete the <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> after having emitted &quot;finished&quot;. (This value was introduced in 5.14.)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::User</db:code></db:para>
</db:td>
<db:td><db:code>1000</db:code></db:td>
<db:td>
<db:para>Special type. Additional information can be passed in QVariants with types ranging from User to UserMax. The default implementation of Network Access will ignore any request attributes in this range and it will not produce any attributes in this range in replies. The range is reserved for extensions of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::UserMax</db:code></db:para>
</db:td>
<db:td><db:code>32767</db:code></db:td>
<db:td>
<db:para>Special type. See User.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="CacheLoadControl-enum">
<db:title>enum QNetworkRequest::CacheLoadControl</db:title>
<db:enumsynopsis>
<db:enumname>CacheLoadControl</db:enumname>
<db:enumitem>
<db:enumidentifier>AlwaysNetwork</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreferNetwork</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreferCache</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlwaysCache</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Controls the caching mechanism of <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AlwaysNetwork</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>always load from network and do not check if the cache has a valid entry (similar to the &quot;Reload&quot; feature in browsers); in addition, force intermediate caches to re-validate.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::PreferNetwork</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>default value; load from the network if the cached entry is older than the network entry. This will never return stale data from the cache, but revalidate resources that have become stale.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::PreferCache</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>load from cache if available, otherwise load from network. Note that this can return possibly stale (but not expired) items from cache.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::AlwaysCache</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>only load from cache, indicating error if the item was not cached (i.e., off-line mode)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="KnownHeaders-enum">
<db:title>enum QNetworkRequest::KnownHeaders</db:title>
<db:enumsynopsis>
<db:enumname>KnownHeaders</db:enumname>
<db:enumitem>
<db:enumidentifier>ContentTypeHeader</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContentLengthHeader</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocationHeader</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastModifiedHeader</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CookieHeader</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SetCookieHeader</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ContentDispositionHeader</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserAgentHeader</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServerHeader</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IfModifiedSinceHeader</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ETagHeader</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IfMatchHeader</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IfNoneMatchHeader</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>List of known header types that <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> parses. Each known header is also represented in raw form with its full HTTP name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentDispositionHeader</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Disposition header and contains a string containing the disposition type (for instance, attachment) and a parameter (for instance, filename).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentTypeHeader</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Type header and contains a string containing the media (MIME) type and any auxiliary data (for instance, charset).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ContentLengthHeader</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Content-Length header and contains the length in bytes of the data transmitted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LocationHeader</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Location header and contains a URL representing the actual location of the data, including the destination URL in case of redirections.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LastModifiedHeader</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Last-Modified header and contains a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> representing the last modification date of the contents.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::IfModifiedSinceHeader</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP If-Modified-Since header and contains a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. It is usually added to a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>. The server shall send a 304 (Not Modified) response if the resource has not changed since this time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ETagHeader</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP ETag header and contains a <db:link xlink:href="qstring.xml">QString</db:link> representing the last modification state of the contents.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::IfMatchHeader</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP If-Match header and contains a <db:link xlink:href="qstringlist.xml">QStringList</db:link>. It is usually added to a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>. The server shall send a 412 (Precondition Failed) response if the resource does not match.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::IfNoneMatchHeader</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP If-None-Match header and contains a <db:link xlink:href="qstringlist.xml">QStringList</db:link>. It is usually added to a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>. The server shall send a 304 (Not Modified) response if the resource does match.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::CookieHeader</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Cookie header and contains a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>&gt; representing the cookies to be sent back to the server.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::SetCookieHeader</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Corresponds to the HTTP Set-Cookie header and contains a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qnetworkcookie.xml">QNetworkCookie</db:link>&gt; representing the cookies sent by the server to be stored locally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::UserAgentHeader</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The User-Agent header sent by HTTP clients.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ServerHeader</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The Server header received by HTTP clients.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="LoadControl-enum">
<db:title>enum QNetworkRequest::LoadControl</db:title>
<db:enumsynopsis>
<db:enumname>LoadControl</db:enumname>
<db:enumitem>
<db:enumidentifier>Automatic</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Manual</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates if an aspect of the request's loading mechanism has been manually overridden, e.g. by Qt WebKit.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Automatic</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>default value: indicates default behaviour.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::Manual</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>indicates behaviour has been manually overridden.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Priority-enum">
<db:title>enum QNetworkRequest::Priority</db:title>
<db:enumsynopsis>
<db:enumname>Priority</db:enumname>
<db:enumitem>
<db:enumidentifier>HighPriority</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NormalPriority</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LowPriority</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum lists the possible network request priorities.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::HighPriority</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>High priority</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::NormalPriority</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Normal priority</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::LowPriority</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Low priority</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="RedirectPolicy-enum">
<db:title>[since 5.9] enum QNetworkRequest::RedirectPolicy</db:title>
<db:enumsynopsis>
<db:enumname>RedirectPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>ManualRedirectPolicy</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoLessSafeRedirectPolicy</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SameOriginRedirectPolicy</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserVerifiedRedirectPolicy</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Indicates whether the Network Access API should automatically follow a HTTP redirect response or not.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::ManualRedirectPolicy</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Not following any redirects.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::NoLessSafeRedirectPolicy</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Default value: Only &quot;http&quot;-&gt;&quot;http&quot;, &quot;http&quot; -&gt; &quot;https&quot; or &quot;https&quot; -&gt; &quot;https&quot; redirects are allowed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::SameOriginRedirectPolicy</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Require the same protocol, host and port. Note, http://example.com and http://example.com:80 will fail with this policy (implicit/explicit ports are considered to be a mismatch).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::UserVerifiedRedirectPolicy</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Client decides whether to follow each redirect by handling the redirected() signal, emitting redirectAllowed() on the <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object to allow the redirect or aborting/finishing it to reject the redirect. This can be used, for example, to ask the user whether to accept the redirect, or to decide based on some app-specific configuration.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="TransferTimeoutConstant-enum">
<db:title>[since 5.15] enum QNetworkRequest::TransferTimeoutConstant</db:title>
<db:enumsynopsis>
<db:enumname>TransferTimeoutConstant</db:enumname>
<db:enumitem>
<db:enumidentifier>DefaultTransferTimeoutConstant</db:enumidentifier>
<db:enumvalue>30000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>A constant that can be used for enabling transfer timeouts with a preset value.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:emphasis>::DefaultTransferTimeoutConstant</db:code></db:para>
</db:td>
<db:td><db:code>30000</db:code></db:td>
<db:td>
<db:para>The transfer timeout in milliseconds. Used if setTimeout() is called without an argument.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.15.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkRequest">
<db:title>QNetworkRequest::QNetworkRequest()</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> object with no URL to be requested. Use <db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>() to set one.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkRequest-1">
<db:title>[explicit] QNetworkRequest::QNetworkRequest(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkRequest</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkRequest(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> object with <db:code role="parameter">url</db:code> as the URL to be requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkRequest-2">
<db:title>QNetworkRequest::QNetworkRequest(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QNetworkRequest</db:methodname>
<db:methodparam>
<db:type>const QNetworkRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkRequest(const QNetworkRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkRequest">
<db:title>QNetworkRequest::~QNetworkRequest()</db:title>
<db:destructorsynopsis>
<db:methodname>~QNetworkRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNetworkRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Disposes of the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> object.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>QVariant QNetworkRequest::attribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis> = QVariant()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>attribute</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::Attribute</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>QVariant()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant attribute(QNetworkRequest::Attribute code, const QVariant &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute associated with the code <db:code role="parameter">code</db:code>. If the attribute has not been set, it returns <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:note>
<db:para>This function does not apply the defaults listed in <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasRawHeader">
<db:title>bool QNetworkRequest::hasRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasRawHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasRawHeader(const QByteArray &amp;headerName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the raw header <db:code role="parameter">headerName</db:code> is present in this network request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="header">
<db:title>QVariant QNetworkRequest::header(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>header</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::KnownHeaders</db:type>
<db:parameter>header</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant header(QNetworkRequest::KnownHeaders header) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the known network header <db:code role="parameter">header</db:code> if it is present in this request. If it is not present, returns QVariant() (i.e., an invalid variant).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="http2Configuration">
<db:title>[since 5.14] QHttp2Configuration QNetworkRequest::http2Configuration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHttp2Configuration</db:type>
<db:methodname>http2Configuration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttp2Configuration http2Configuration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current parameters that <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> is using for this request and its underlying HTTP/2 connection. This is either a configuration previously set by an application or a default configuration.</db:para>
<db:para>The default values that <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> is using are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Window size for connection-level flowcontrol is 2147483647 octets</db:para>
</db:listitem>
<db:listitem>
<db:para>Window size for stream-level flowcontrol is 21474836 octets</db:para>
</db:listitem>
<db:listitem>
<db:para>Max frame size is 16384</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, server push is disabled, Huffman compression and string indexing are enabled.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setHttp2Configuration">setHttp2Configuration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximumRedirectsAllowed">
<db:title>[since 5.6] int QNetworkRequest::maximumRedirectsAllowed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>maximumRedirectsAllowed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int maximumRedirectsAllowed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum number of redirects allowed to be followed for this request.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setMaximumRedirectsAllowed">setMaximumRedirectsAllowed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="originatingObject">
<db:title>QObject *QNetworkRequest::originatingObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>originatingObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * originatingObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the object that initiated this network request; returns <db:code>nullptr</db:code> if not set or the object has been destroyed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setOriginatingObject">setOriginatingObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peerVerifyName">
<db:title>[since 5.13] QString QNetworkRequest::peerVerifyName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>peerVerifyName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString peerVerifyName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the host name set for the certificate validation, as set by <db:link xlink:href="qnetworkrequest.xml#setPeerVerifyName">setPeerVerifyName</db:link>. By default this returns a null string.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setPeerVerifyName">setPeerVerifyName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="priority">
<db:title>QNetworkRequest::Priority QNetworkRequest::priority() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkRequest::Priority</db:type>
<db:methodname>priority</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkRequest::Priority priority() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the priority of this request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setPriority">setPriority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeader">
<db:title>QByteArray QNetworkRequest::rawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>rawHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray rawHeader(const QByteArray &amp;headerName) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the raw form of header <db:code role="parameter">headerName</db:code>. If no such header is present, an empty <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned, which may be indistinguishable from a header that is present but has no content (use <db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>() to find out if the header exists or not).</db:para>
<db:para>Raw headers can be set with <db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>() or with <db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeaderList">
<db:title>QList&lt;QByteArray&gt; QNetworkRequest::rawHeaderList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>rawHeaderList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; rawHeaderList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all raw headers that are set in this network request. The list is in the order that the headers were set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>void QNetworkRequest::setAttribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAttribute</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::Attribute</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAttribute(QNetworkRequest::Attribute code, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the attribute associated with code <db:code role="parameter">code</db:code> to be value <db:code role="parameter">value</db:code>. If the attribute is already set, the previous value is discarded. In special, if <db:code role="parameter">value</db:code> is an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>, the attribute is unset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeader">
<db:title>void QNetworkRequest::setHeader(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::KnownHeaders</db:type>
<db:parameter>header</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value of the known header <db:code role="parameter">header</db:code> to be <db:code role="parameter">value</db:code>, overriding any previously set headers. This operation also sets the equivalent raw HTTP header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">setRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#header">header</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHttp2Configuration">
<db:title>[since 5.14] void QNetworkRequest::setHttp2Configuration(const QHttp2Configuration &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHttp2Configuration</db:methodname>
<db:methodparam>
<db:type>const QHttp2Configuration &amp;</db:type>
<db:parameter>configuration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHttp2Configuration(const QHttp2Configuration &amp;configuration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets request's HTTP/2 parameters from <db:code role="parameter">configuration</db:code>.</db:para>
<db:note>
<db:para>The configuration must be set prior to making a request.</db:para>
</db:note>
<db:note>
<db:para>HTTP/2 multiplexes several streams in a single HTTP/2 connection. This implies that <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will use the configuration found in the first request from a series of requests sent to the same host.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#http2Configuration">http2Configuration</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
<db:member><db:link xlink:href="qhttp2configuration.xml">QHttp2Configuration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMaximumRedirectsAllowed">
<db:title>[since 5.6] void QNetworkRequest::setMaximumRedirectsAllowed(int <db:emphasis>maxRedirectsAllowed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMaximumRedirectsAllowed</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>maxRedirectsAllowed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMaximumRedirectsAllowed(int maxRedirectsAllowed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the maximum number of redirects allowed to be followed for this request to <db:code role="parameter">maxRedirectsAllowed</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#maximumRedirectsAllowed">maximumRedirectsAllowed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOriginatingObject">
<db:title>void QNetworkRequest::setOriginatingObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOriginatingObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOriginatingObject(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Allows setting a reference to the <db:code role="parameter">object</db:code> initiating the request.</db:para>
<db:para>For example Qt WebKit sets the originating object to the QWebFrame that initiated the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#originatingObject">originatingObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPeerVerifyName">
<db:title>[since 5.13] void QNetworkRequest::setPeerVerifyName(const QString &amp;<db:emphasis>peerName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPeerVerifyName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>peerName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPeerVerifyName(const QString &amp;peerName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">peerName</db:code> as host name for the certificate validation, instead of the one used for the TCP connection.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#peerVerifyName">peerVerifyName</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPriority">
<db:title>void QNetworkRequest::setPriority(QNetworkRequest::Priority <db:emphasis>priority</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPriority</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest::Priority</db:type>
<db:parameter>priority</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPriority(QNetworkRequest::Priority priority)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the priority of this request to <db:code role="parameter">priority</db:code>.</db:para>
<db:note>
<db:para>The <db:code role="parameter">priority</db:code> is only a hint to the network access manager. It can use it or not. Currently it is used for HTTP to decide which request should be sent first to a server.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#priority">priority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawHeader">
<db:title>void QNetworkRequest::setRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>, const QByteArray &amp;<db:emphasis>headerValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRawHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>headerValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRawHeader(const QByteArray &amp;headerName, const QByteArray &amp;headerValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the header <db:code role="parameter">headerName</db:code> to be of value <db:code role="parameter">headerValue</db:code>. If <db:code role="parameter">headerName</db:code> corresponds to a known header (see <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">QNetworkRequest::KnownHeaders</db:link>), the raw format will be parsed and the corresponding &quot;cooked&quot; header will be set as well.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">request.setRawHeader(QByteArray(&quot;Last-Modified&quot;), QByteArray(&quot;Sun, 06 Nov 1994 08:49:37 GMT&quot;));
</db:programlisting>
<db:para>will also set the known header <db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">LastModifiedHeader</db:link> to be the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object of the parsed date.</db:para>
<db:note>
<db:para>Setting the same header twice overrides the previous setting. To accomplish the behaviour of multiple HTTP headers of the same name, you should concatenate the two values, separating them with a comma (&quot;,&quot;) and set one single raw header.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#KnownHeaders-enum">KnownHeaders</db:link></db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#rawHeader">rawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QNetworkRequest::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSslConfiguration</db:methodname>
<db:methodparam>
<db:type>const QSslConfiguration &amp;</db:type>
<db:parameter>config</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSslConfiguration(const QSslConfiguration &amp;config)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this network request's SSL configuration to be <db:code role="parameter">config</db:code>. The settings that apply are the private key, the local certificate, the SSL protocol (SSLv2, SSLv3, TLSv1.0 where applicable), the CA certificates and the ciphers that the SSL backend is allowed to use.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#defaultConfiguration">QSslConfiguration::defaultConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferTimeout">
<db:title>[since 5.15] void QNetworkRequest::setTransferTimeout(int <db:emphasis>timeout</db:emphasis> = DefaultTransferTimeoutConstant)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTransferTimeout</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
<db:initializer>DefaultTransferTimeoutConstant</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTransferTimeout(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">timeout</db:code> as the transfer timeout in milliseconds.</db:para>
<db:para>Transfers are aborted if no bytes are transferred before the timeout expires. Zero means no timer is set. If no argument is provided, the timeout is <db:link xlink:href="qnetworkrequest.xml#TransferTimeoutConstant-enum">QNetworkRequest::DefaultTransferTimeoutConstant</db:link>. If this function is not called, the timeout is disabled and has the value zero.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#transferTimeout">transferTimeout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrl">
<db:title>void QNetworkRequest::setUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUrl</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUrl(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the URL this network request is referring to be <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QNetworkRequest::sslConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSslConfiguration</db:type>
<db:methodname>sslConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslConfiguration sslConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this network request's SSL configuration. By default this is the same as <db:link xlink:href="qsslconfiguration.xml#defaultConfiguration">QSslConfiguration::defaultConfiguration</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#defaultConfiguration">QSslConfiguration::defaultConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QNetworkRequest::swap(QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QNetworkRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QNetworkRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this network request with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="transferTimeout">
<db:title>[since 5.15] int QNetworkRequest::transferTimeout() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>transferTimeout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int transferTimeout() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the timeout used for transfers, in milliseconds.</db:para>
<db:para>This timeout is zero if <db:link xlink:href="qnetworkrequest.xml#setTransferTimeout">setTransferTimeout</db:link> hasn't been called, which means that the timeout is not used.</db:para>
<db:para>This function was introduced in Qt 5.15.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setTransferTimeout">setTransferTimeout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QNetworkRequest::url() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>url</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl url() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the URL this network request is referring to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#setUrl">setUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QNetworkRequest::operator!=(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QNetworkRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QNetworkRequest &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>false</db:code> if this object is not the same as <db:code role="parameter">other</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QNetworkRequest &amp;QNetworkRequest::operator=(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNetworkRequest &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QNetworkRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkRequest &amp; operator=(const QNetworkRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code></db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QNetworkRequest::operator==(const QNetworkRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QNetworkRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QNetworkRequest &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this object is the same as <db:code role="parameter">other</db:code> (i.e., if they have the same URL, same headers and same meta-data settings).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
