<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerFormWindowInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> class allows you to query and manipulate form windows appearing in Qt Designer's workspace.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerFormWindowInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Designer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Designer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> provides information about the associated form window as well as allowing its properties to be altered. The interface is not intended to be instantiated directly, but to provide access to <db:emphasis>Qt Designer</db:emphasis>'s current form windows controlled by <db:emphasis>Qt Designer</db:emphasis>'s <db:link xlink:href="qdesignerformwindowmanagerinterface.xml">form window manager</db:link>.</db:para>
<db:para>If you are looking for the form window containing a specific widget, you can use the static <db:link xlink:href="qdesignerformwindowinterface.xml#findFormWindow">QDesignerFormWindowInterface::findFormWindow</db:link>() function:</db:para>
<db:programlisting language="cpp">    auto *formWindow = QDesignerFormWindowInterface::findFormWindow(myWidget);
</db:programlisting>
<db:para>But in addition, you can access any of the current form windows through <db:emphasis>Qt Designer</db:emphasis>'s form window manager: Use the <db:link xlink:href="qdesignerformeditorinterface.xml#formWindowManager">QDesignerFormEditorInterface::formWindowManager</db:link>() function to retrieve an interface to the manager. Once you have this interface, you have access to all of <db:emphasis>Qt Designer</db:emphasis>'s current form windows through the <db:link xlink:href="qdesignerformwindowmanagerinterface.xml#formWindow">QDesignerFormWindowManagerInterface::formWindow</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">    QList&amp;lt;QDesignerFormWindowInterface *&amp;gt; forms;

    auto *manager = formEditor-&amp;gt;formWindowManager();

    for (int i = 0; i &amp;lt; manager-&amp;gt;formWindowCount(); ++i)
        forms.append(manager-&amp;gt;formWindow(i));
</db:programlisting>
<db:para>The pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter. When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> class to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>Once you have the form window, you can query its properties. For example, a plain custom widget plugin is managed by <db:emphasis>Qt Designer</db:emphasis> only at its top level, i.e. none of its child widgets can be resized in <db:emphasis>Qt Designer</db:emphasis>'s workspace. But <db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link> provides you with functions that enables you to control whether a widget should be managed by <db:emphasis>Qt Designer</db:emphasis>, or not:</db:para>
<db:programlisting language="cpp">        if (formWindow-&amp;gt;isManaged(myWidget))
            formWindow-&amp;gt;manageWidget(myWidget-&amp;gt;childWidget);
</db:programlisting>
<db:para>The complete list of functions concerning widget management is: <db:link xlink:href="qdesignerformwindowinterface.xml#isManaged">isManaged</db:link>(), <db:link xlink:href="qdesignerformwindowinterface.xml#manageWidget">manageWidget</db:link>() and <db:link xlink:href="qdesignerformwindowinterface.xml#unmanageWidget">unmanageWidget</db:link>(). There is also several associated signals: <db:link xlink:href="qdesignerformwindowinterface.xml#widgetManaged">widgetManaged</db:link>(), <db:link xlink:href="qdesignerformwindowinterface.xml#widgetRemoved">widgetRemoved</db:link>(), <db:link xlink:href="qdesignerformwindowinterface.xml#aboutToUnmanageWidget">aboutToUnmanageWidget</db:link>() and <db:link xlink:href="qdesignerformwindowinterface.xml#widgetUnmanaged">widgetUnmanaged</db:link>().</db:para>
<db:para>In addition to controlling the management of widgets, you can control the current selection in the form window using the <db:link xlink:href="qdesignerformwindowinterface.xml#selectWidget">selectWidget</db:link>(), <db:link xlink:href="qdesignerformwindowinterface.xml#clearSelection">clearSelection</db:link>() and <db:link xlink:href="qdesignerformwindowinterface.xml#emitSelectionChanged">emitSelectionChanged</db:link>() functions, and the <db:link xlink:href="qdesignerformwindowinterface.xml#selectionChanged">selectionChanged</db:link>() signal.</db:para>
<db:para>You can also retrieve information about where the form is stored using <db:link xlink:href="qdesignerformwindowinterface.xml#absoluteDir">absoluteDir</db:link>(), its include files using <db:link xlink:href="qdesignerformwindowinterface.xml#includeHints">includeHints</db:link>(), and its layout and pixmap functions using <db:link xlink:href="qdesignerformwindowinterface.xml#layoutDefault">layoutDefault</db:link>(), <db:link xlink:href="qdesignerformwindowinterface.xml#layoutFunction">layoutFunction</db:link>() and <db:link xlink:href="qdesignerformwindowinterface.xml#pixmapFunction">pixmapFunction</db:link>(). You can find out whether the form window has been modified (but not saved) or not, using the <db:link xlink:href="qdesignerformwindowinterface.xml#isDirty">isDirty</db:link>() function. You can retrieve its <db:link xlink:href="qdesignerformwindowinterface.xml#author">author</db:link>(), its <db:link xlink:href="qdesignerformwindowinterface.xml#contents">contents</db:link>(), its <db:link xlink:href="qdesignerformwindowinterface.xml#fileName">fileName</db:link>(), associated <db:link xlink:href="qdesignerformwindowinterface.xml#comment">comment</db:link>() and <db:link xlink:href="qdesignerformwindowinterface.xml#exportMacro">exportMacro</db:link>(), its mainContainer(), its <db:link xlink:href="qdesignerformwindowinterface.xml#features">features</db:link>(), its <db:link xlink:href="qdesignerformwindowinterface.xml#grid">grid</db:link>() and its <db:link xlink:href="qdesignerformwindowinterface.xml#resourceFiles">resourceFiles</db:link>().</db:para>
<db:para>The interface provides you with functions and slots allowing you to alter most of this information as well. The exception is the directory storing the form window. Finally, there is several signals associated with changes to the information mentioned above and to the form window in general.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowcursorinterface.xml">QDesignerFormWindowCursorInterface</db:link></db:member>
<db:member><db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link></db:member>
<db:member><db:link xlink:href="qdesignerformwindowmanagerinterface.xml">QDesignerFormWindowManagerInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FeatureFlag-enum">
<db:title>enum QDesignerFormWindowInterface::FeatureFlag</db:title>
<db:bridgehead renderas="sect2">flags QDesignerFormWindowInterface::Feature</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FeatureFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>EditFeature</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>GridFeature</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TabOrderFeature</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DefaultFeature</db:enumidentifier>
<db:enumvalue>EditFeature | GridFeature</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QDesignerFormWindowInterface::Feature</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the features that are available and can be controlled by the form window interface. These values are used when querying the form window to determine which features it supports:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::EditFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Form editing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::GridFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Grid display and snap-to-grid facilities for editing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::TabOrderFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Tab order management</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::DefaultFeature</db:code></db:para>
</db:td>
<db:td><db:code>EditFeature | GridFeature</db:code></db:td>
<db:td>
<db:para>Support for default features (form editing and grid)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Feature</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FeatureFlag&gt;. </db:code>It stores an OR combination of <db:code>FeatureFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#hasFeature">hasFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#features">features</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ResourceFileSaveMode-enum">
<db:title>[since 5.0] enum QDesignerFormWindowInterface::ResourceFileSaveMode</db:title>
<db:enumsynopsis>
<db:enumname>ResourceFileSaveMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SaveAllResourceFiles</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SaveOnlyUsedResourceFiles</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DontSaveResourceFiles</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes how resource files are saved.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::SaveAllResourceFiles</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Save all resource files.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::SaveOnlyUsedResourceFiles</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Save resource files used by form.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdesignerformwindowinterface.xml">QDesignerFormWindowInterface</db:link></db:emphasis>::DontSaveResourceFiles</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Do not save resource files.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDesignerFormWindowInterface">
<db:title>[explicit] QDesignerFormWindowInterface::QDesignerFormWindowInterface(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = {})</db:title>
<db:constructorsynopsis>
<db:methodname>QDesignerFormWindowInterface</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowInterface(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a form window interface with the given <db:code role="parameter">parent</db:code> and the specified window <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QDesignerFormWindowInterface">
<db:title>[virtual] QDesignerFormWindowInterface::~QDesignerFormWindowInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerFormWindowInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerFormWindowInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the form window interface.</db:para>
</db:section>
<db:section xml:id="aboutToUnmanageWidget">
<db:title>void QDesignerFormWindowInterface::aboutToUnmanageWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>aboutToUnmanageWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void aboutToUnmanageWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget on the form is about to become unmanaged. When this signal is emitted, the specified <db:code role="parameter">widget</db:code> is still managed, and a <db:link xlink:href="qdesignerformwindowinterface.xml#widgetUnmanaged">widgetUnmanaged</db:link>() signal will follow, indicating when it is no longer managed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#unmanageWidget">unmanageWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#isManaged">isManaged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="absoluteDir">
<db:title>[pure virtual] QDir QDesignerFormWindowInterface::absoluteDir() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDir</db:type>
<db:methodname>absoluteDir</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDir absoluteDir() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the absolute location of the directory containing the form shown in the form window.</db:para>
</db:section>
<db:section xml:id="activateResourceFilePaths">
<db:title>[since 5.0] void QDesignerFormWindowInterface::activateResourceFilePaths(const QStringList &amp;<db:emphasis>paths</db:emphasis>, int *<db:emphasis>errorCount</db:emphasis> = nullptr, QString *<db:emphasis>errorMessages</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activateResourceFilePaths</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>errorCount</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorMessages</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activateResourceFilePaths(const QStringList &amp;paths, int *errorCount, QString *errorMessages)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Activates the resource (.qrc) file paths <db:code role="parameter">paths</db:code>, returning the count of errors in <db:code role="parameter">errorCount</db:code> and error message in <db:code role="parameter">errorMessages</db:code>. <db:emphasis>Qt Designer</db:emphasis> loads the resources using the <db:link xlink:href="qresource.xml">QResource</db:link> class, making them available for form editing.</db:para>
<db:para>In IDE integrations, a list of the project's resource (.qrc) file can be activated, making them available to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#activeResourceFilePaths">activeResourceFilePaths</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml">QResource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activated">
<db:title>void QDesignerFormWindowInterface::activated(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>activated</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void activated(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget is activated on the form. The activated widget is specified by <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="activeResourceFilePaths">
<db:title>[since 5.0] QStringList QDesignerFormWindowInterface::activeResourceFilePaths() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>activeResourceFilePaths</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList activeResourceFilePaths() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the active resource (.qrc) file paths currently loaded in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#activateResourceFilePaths">activateResourceFilePaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addResourceFile">
<db:title>[pure virtual] void QDesignerFormWindowInterface::addResourceFile(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>addResourceFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addResourceFile(const QString &amp;path) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the resource file at the given <db:code role="parameter">path</db:code> to those used by the form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFiles">resourceFiles</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFilesChanged">resourceFilesChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="author">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::author() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>author</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString author() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns details of the author or creator of the form currently being displayed in the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setAuthor">setAuthor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changed">
<db:title>void QDesignerFormWindowInterface::changed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>changed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a form is changed.</db:para>
</db:section>
<db:section xml:id="checkContents">
<db:title>[pure virtual, since 5.0] QStringList QDesignerFormWindowInterface::checkContents() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>checkContents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList checkContents() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs checks on the current form and returns a list of richtext warnings about potential issues (for example, top level spacers on unlaid-out forms).</db:para>
<db:para>IDE integrations can call this before handling starting a save operation.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="clearSelection">
<db:title>[pure virtual] void QDesignerFormWindowInterface::clearSelection(bool <db:emphasis>update</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clearSelection</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>update</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearSelection(bool update) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the current selection in the form window. If <db:code role="parameter">update</db:code> is true, the <db:link xlink:href="qdesignerformwindowinterface.xml#emitSelectionChanged">emitSelectionChanged</db:link>() function is called, emitting the <db:link xlink:href="qdesignerformwindowinterface.xml#selectionChanged">selectionChanged</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#selectWidget">selectWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::comment() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>comment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString comment() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns comments about the form currently being displayed in the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setComment">setComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contents">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::contents() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>contents</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString contents() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns details of the contents of the form currently being displayed in the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setContents">setContents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="core">
<db:title>[virtual] QDesignerFormEditorInterface *QDesignerFormWindowInterface::core() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDesignerFormEditorInterface *</db:type>
<db:methodname>core</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormEditorInterface * core() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object.</db:para>
</db:section>
<db:section xml:id="cursor">
<db:title>[pure virtual] QDesignerFormWindowCursorInterface *QDesignerFormWindowInterface::cursor() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDesignerFormWindowCursorInterface *</db:type>
<db:methodname>cursor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowCursorInterface * cursor() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor interface used by the form window.</db:para>
</db:section>
<db:section xml:id="emitSelectionChanged">
<db:title>[pure virtual] void QDesignerFormWindowInterface::emitSelectionChanged()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>emitSelectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void emitSelectionChanged() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Emits the <db:link xlink:href="qdesignerformwindowinterface.xml#selectionChanged">selectionChanged</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#selectWidget">selectWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exportMacro">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::exportMacro() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>exportMacro</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString exportMacro() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the export macro associated with the form currently being displayed in the window. The export macro is used when the form is compiled to create a widget plugin.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setExportMacro">setExportMacro</db:link>()</db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="featureChanged">
<db:title>void QDesignerFormWindowInterface::featureChanged(QDesignerFormWindowInterface::Feature <db:emphasis>feature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>featureChanged</db:methodname>
<db:methodparam>
<db:type>QDesignerFormWindowInterface::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void featureChanged(QDesignerFormWindowInterface::Feature feature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a feature changes in the form. The new feature is specified by <db:code role="parameter">feature</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setFeatures">setFeatures</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="features">
<db:title>[pure virtual] QDesignerFormWindowInterface::Feature QDesignerFormWindowInterface::features() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDesignerFormWindowInterface::Feature</db:type>
<db:methodname>features</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowInterface::Feature features() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a combination of the features provided by the form window associated with the interface. The value returned can be tested against the <db:link xlink:href="qdesignerformwindowinterface.xml#FeatureFlag-enum">Feature</db:link> enum values to determine which features are supported by the window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setFeatures">setFeatures</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#hasFeature">hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the file name of the UI file that describes the form currently being shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileNameChanged">
<db:title>void QDesignerFormWindowInterface::fileNameChanged(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fileNameChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fileNameChanged(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the file name of the form changes. The new file name is specified by <db:code role="parameter">fileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findFormWindow">
<db:title>[static] QDesignerFormWindowInterface *QDesignerFormWindowInterface::findFormWindow(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDesignerFormWindowInterface *</db:type>
<db:methodname>findFormWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowInterface * findFormWindow(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the form window interface for the given <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="findFormWindow-1">
<db:title>[static] QDesignerFormWindowInterface *QDesignerFormWindowInterface::findFormWindow(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDesignerFormWindowInterface *</db:type>
<db:methodname>findFormWindow</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowInterface * findFormWindow(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the form window interface for the given <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="formContainer">
<db:title>[pure virtual, since 5.0] QWidget *QDesignerFormWindowInterface::formContainer() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>formContainer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * formContainer() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the form the widget containing the main container widget.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="geometryChanged">
<db:title>void QDesignerFormWindowInterface::geometryChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>geometryChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void geometryChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the form's geometry changes.</db:para>
</db:section>
<db:section xml:id="grid">
<db:title>[pure virtual] QPoint QDesignerFormWindowInterface::grid() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPoint</db:type>
<db:methodname>grid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPoint grid() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the grid spacing used by the form window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setGrid">setGrid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>[pure virtual] bool QDesignerFormWindowInterface::hasFeature(QDesignerFormWindowInterface::Feature <db:emphasis>feature</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasFeature</db:methodname>
<db:methodparam>
<db:type>QDesignerFormWindowInterface::Feature</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasFeature(QDesignerFormWindowInterface::Feature feature) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the form window offers the specified <db:code role="parameter">feature</db:code>; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#features">features</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="includeHints">
<db:title>[pure virtual] QStringList QDesignerFormWindowInterface::includeHints() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>includeHints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList includeHints() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the header files that will be included in the form window's associated UI file.</db:para>
<db:para>Header files may be local, i.e. relative to the project's directory, <db:code>&quot;mywidget.h&quot;</db:code>, or global, i.e. part of Qt or the compilers standard libraries: <db:code>&lt;QtGui/QWidget&gt;</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setIncludeHints">setIncludeHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDirty">
<db:title>[pure virtual] bool QDesignerFormWindowInterface::isDirty() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDirty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDirty() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the form window is &quot;dirty&quot; (modified but not saved); otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setDirty">setDirty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isManaged">
<db:title>[pure virtual] bool QDesignerFormWindowInterface::isManaged(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isManaged</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isManaged(QWidget *widget) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the specified <db:code role="parameter">widget</db:code> is managed by the form window; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#manageWidget">manageWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutDefault">
<db:title>[pure virtual] void QDesignerFormWindowInterface::layoutDefault(int *<db:emphasis>margin</db:emphasis>, int *<db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>layoutDefault</db:methodname>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void layoutDefault(int *margin, int *spacing) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills in the default margin and spacing for the form's default layout in the <db:code role="parameter">margin</db:code> and <db:code role="parameter">spacing</db:code> variables specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setLayoutDefault">setLayoutDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="layoutFunction">
<db:title>[pure virtual] void QDesignerFormWindowInterface::layoutFunction(QString *<db:emphasis>margin</db:emphasis>, QString *<db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>layoutFunction</db:methodname>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void layoutFunction(QString *margin, QString *spacing) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills in the current margin and spacing for the form's layout in the <db:code role="parameter">margin</db:code> and <db:code role="parameter">spacing</db:code> variables specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setLayoutFunction">setLayoutFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mainContainerChanged">
<db:title>void QDesignerFormWindowInterface::mainContainerChanged(QWidget *<db:emphasis>mainContainer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mainContainerChanged</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>mainContainer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mainContainerChanged(QWidget *mainContainer)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the main container changes. The new container is specified by <db:code role="parameter">mainContainer</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setMainContainer">setMainContainer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="manageWidget">
<db:title>[pure virtual] void QDesignerFormWindowInterface::manageWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>manageWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void manageWidget(QWidget *widget) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Instructs the form window to manage the specified <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#isManaged">isManaged</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#unmanageWidget">unmanageWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#widgetManaged">widgetManaged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectRemoved">
<db:title>void QDesignerFormWindowInterface::objectRemoved(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>objectRemoved</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void objectRemoved(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever an object (such as an action or a <db:link xlink:href="qbuttongroup.xml">QButtonGroup</db:link>) is removed from the form. The object that was removed is specified by <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="pixmapFunction">
<db:title>[pure virtual] QString QDesignerFormWindowInterface::pixmapFunction() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>pixmapFunction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString pixmapFunction() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the function used to load pixmaps into the form window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setPixmapFunction">setPixmapFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeResourceFile">
<db:title>[pure virtual] void QDesignerFormWindowInterface::removeResourceFile(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>removeResourceFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeResourceFile(const QString &amp;path) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the resource file at the specified <db:code role="parameter">path</db:code> from the list of those used by the form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFiles">resourceFiles</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFilesChanged">resourceFilesChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resourceFileSaveMode">
<db:title>[pure virtual] QDesignerFormWindowInterface::ResourceFileSaveMode QDesignerFormWindowInterface::resourceFileSaveMode() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QDesignerFormWindowInterface::ResourceFileSaveMode</db:type>
<db:methodname>resourceFileSaveMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDesignerFormWindowInterface::ResourceFileSaveMode resourceFileSaveMode() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resource file save mode behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#setResourceFileSaveMode">setResourceFileSaveMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resourceFiles">
<db:title>[pure virtual] QStringList QDesignerFormWindowInterface::resourceFiles() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>resourceFiles</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList resourceFiles() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of paths to resource files that are currently being used by the form window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#addResourceFile">addResourceFile</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#removeResourceFile">removeResourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resourceFilesChanged">
<db:title>void QDesignerFormWindowInterface::resourceFilesChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resourceFilesChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resourceFilesChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the list of resource files used by the form changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFiles">resourceFiles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectWidget">
<db:title>[pure virtual] void QDesignerFormWindowInterface::selectWidget(QWidget *<db:emphasis>widget</db:emphasis>, bool <db:emphasis>select</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>selectWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>select</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectWidget(QWidget *widget, bool select) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">select</db:code> is true, the given <db:code role="parameter">widget</db:code> is selected; otherwise the <db:code role="parameter">widget</db:code> is deselected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#clearSelection">clearSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QDesignerFormWindowInterface::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the selection in the form changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#selectWidget">selectWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#clearSelection">clearSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAuthor">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setAuthor(const QString &amp;<db:emphasis>author</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setAuthor</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>author</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAuthor(const QString &amp;author) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the details for the author or creator of the form to the <db:code role="parameter">author</db:code> specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#author">author</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setComment">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setComment(const QString &amp;<db:emphasis>comment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setComment</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>comment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setComment(const QString &amp;comment) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the information about the form to the <db:code role="parameter">comment</db:code> specified. This information should be a human-readable comment about the form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#comment">comment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContents">
<db:title>[pure virtual] bool QDesignerFormWindowInterface::setContents(QIODevice *<db:emphasis>device</db:emphasis>, QString *<db:emphasis>errorMessage</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setContents</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString *</db:type>
<db:parameter>errorMessage</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setContents(QIODevice *device, QString *errorMessage) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the form's contents using data obtained from the given <db:code role="parameter">device</db:code> and returns whether loading succeeded. If it fails, the error message is returned in <db:code role="parameter">errorMessage</db:code>.</db:para>
<db:para>Data can be read from <db:link xlink:href="qfile.xml">QFile</db:link> objects or any other subclass of <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#contents">contents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContents-1">
<db:title>[pure virtual] bool QDesignerFormWindowInterface::setContents(const QString &amp;<db:emphasis>contents</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setContents</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setContents(const QString &amp;contents) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the contents of the form using data read from the specified <db:code role="parameter">contents</db:code> string and returns whether the operation succeeded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#contents">contents</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirty">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setDirty(bool <db:emphasis>dirty</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setDirty</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>dirty</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirty(bool dirty) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If <db:code role="parameter">dirty</db:code> is true, the form window is marked as dirty, meaning that it is modified but not saved. If <db:code role="parameter">dirty</db:code> is false, the form window is considered to be unmodified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#isDirty">isDirty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExportMacro">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setExportMacro(const QString &amp;<db:emphasis>exportMacro</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setExportMacro</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>exportMacro</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExportMacro(const QString &amp;exportMacro) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the form window's export macro to <db:code role="parameter">exportMacro</db:code>. The export macro is used when building a widget plugin to export the form's interface to other components.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#exportMacro">exportMacro</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeatures">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setFeatures(QDesignerFormWindowInterface::Feature <db:emphasis>features</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setFeatures</db:methodname>
<db:methodparam>
<db:type>QDesignerFormWindowInterface::Feature</db:type>
<db:parameter>features</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFeatures(QDesignerFormWindowInterface::Feature features) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the specified <db:code role="parameter">features</db:code> for the form window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#features">features</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#featureChanged">featureChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;fileName) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the file name for the form to the given <db:code role="parameter">fileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#fileNameChanged">fileNameChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGrid">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setGrid(const QPoint &amp;<db:emphasis>grid</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGrid</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>grid</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGrid(const QPoint &amp;grid) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the grid size for the form window to the point specified by <db:code role="parameter">grid</db:code>. In this function, the coordinates in the <db:link xlink:href="qpoint.xml">QPoint</db:link> are used to specify the dimensions of a rectangle in the grid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#grid">grid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIncludeHints">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setIncludeHints(const QStringList &amp;<db:emphasis>includeHints</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setIncludeHints</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>includeHints</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setIncludeHints(const QStringList &amp;includeHints) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the header files that will be included in the form window's associated UI file to the specified <db:code role="parameter">includeHints</db:code>.</db:para>
<db:para>Header files may be local, i.e. relative to the project's directory, <db:code>&quot;mywidget.h&quot;</db:code>, or global, i.e. part of Qt or the compilers standard libraries: <db:code>&lt;QtGui/QWidget&gt;</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#includeHints">includeHints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayoutDefault">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setLayoutDefault(int <db:emphasis>margin</db:emphasis>, int <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setLayoutDefault</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayoutDefault(int margin, int spacing) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the default <db:code role="parameter">margin</db:code> and <db:code role="parameter">spacing</db:code> for the form's layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#layoutDefault">layoutDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLayoutFunction">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setLayoutFunction(const QString &amp;<db:emphasis>margin</db:emphasis>, const QString &amp;<db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setLayoutFunction</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>margin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLayoutFunction(const QString &amp;margin, const QString &amp;spacing) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">margin</db:code> and <db:code role="parameter">spacing</db:code> for the form's layout.</db:para>
<db:para>The default layout properties will be replaced by the corresponding layout functions when <db:code>uic</db:code> generates code for the form, that is, if the functions are specified. This is useful when different environments requires different layouts for the same form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#layoutFunction">layoutFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMainContainer">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setMainContainer(QWidget *<db:emphasis>mainContainer</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setMainContainer</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>mainContainer</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMainContainer(QWidget *mainContainer) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the main container widget on the form to the specified <db:code role="parameter">mainContainer</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#mainContainerChanged">mainContainerChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPixmapFunction">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setPixmapFunction(const QString &amp;<db:emphasis>pixmapFunction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setPixmapFunction</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>pixmapFunction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPixmapFunction(const QString &amp;pixmapFunction) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the function used to load pixmaps into the form window to the given <db:code role="parameter">pixmapFunction</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#pixmapFunction">pixmapFunction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setResourceFileSaveMode">
<db:title>[pure virtual] void QDesignerFormWindowInterface::setResourceFileSaveMode(QDesignerFormWindowInterface::ResourceFileSaveMode <db:emphasis>behavior</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setResourceFileSaveMode</db:methodname>
<db:methodparam>
<db:type>QDesignerFormWindowInterface::ResourceFileSaveMode</db:type>
<db:parameter>behavior</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setResourceFileSaveMode(QDesignerFormWindowInterface::ResourceFileSaveMode behavior) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the resource file save mode <db:code role="parameter">behavior</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#resourceFileSaveMode">resourceFileSaveMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unmanageWidget">
<db:title>[pure virtual] void QDesignerFormWindowInterface::unmanageWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unmanageWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unmanageWidget(QWidget *widget) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Instructs the form window not to manage the specified <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#aboutToUnmanageWidget">aboutToUnmanageWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#widgetUnmanaged">widgetUnmanaged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetManaged">
<db:title>void QDesignerFormWindowInterface::widgetManaged(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>widgetManaged</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void widgetManaged(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget on the form becomes managed. The newly managed widget is specified by <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#manageWidget">manageWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widgetRemoved">
<db:title>void QDesignerFormWindowInterface::widgetRemoved(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>widgetRemoved</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void widgetRemoved(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget is removed from the form. The widget that was removed is specified by <db:code role="parameter">widget</db:code>.</db:para>
</db:section>
<db:section xml:id="widgetUnmanaged">
<db:title>void QDesignerFormWindowInterface::widgetUnmanaged(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>widgetUnmanaged</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void widgetUnmanaged(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a widget on the form becomes unmanaged. The newly released widget is specified by <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#unmanageWidget">unmanageWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qdesignerformwindowinterface.xml#aboutToUnmanageWidget">aboutToUnmanageWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
