<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menu QML Type</db:title>
<db:productname>QtLabsPlatform</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Labs Platform Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A native menu.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import Qt.labs.platform</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>QtObject</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Menu type provides a QML API for native platform menu popups.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtlabsplatform-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Menu can be used in a <db:link xlink:href="qml-qt-labs-platform-menubar.xml">MenuBar</db:link>, or as a stand-alone context menu. The following example shows how to open a context menu on right mouse click:</db:para>
<db:programlisting language="cpp">MouseArea {
    anchors.fill: parent
    acceptedButtons: Qt.RightButton
    onClicked: zoomMenu.open()
}

Menu {
    id: zoomMenu

    MenuItem {
        text: qsTr(&quot;Zoom In&quot;)
        shortcut: StandardKey.ZoomIn
        onTriggered: zoomIn()
    }

    MenuItem {
        text: qsTr(&quot;Zoom Out&quot;)
        shortcut: StandardKey.ZoomOut
        onTriggered: zoomOut()
    }
}
</db:programlisting>
<db:section xml:id="submenus">
<db:title>Submenus</db:title>
<db:para>To create submenus, declare a Menu as a child of another Menu:</db:para>
<db:programlisting language="qml">Menu {
    title: qsTr(&quot;Edit&quot;)

    Menu {
        title: qsTr(&quot;Advanced&quot;)

        MenuItem {
            text: qsTr(&quot;Auto-indent Selection&quot;)
            onTriggered: autoIndentSelection()
        }

        MenuItem {
            text: qsTr(&quot;Rewrap Paragraph&quot;)
            onTriggered: rewrapParagraph()
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="dynamically-generating-menu-items">
<db:title>Dynamically generating menu items</db:title>
<db:para>You can dynamically generate menu items with <db:link xlink:href="qml-qtqml-models-instantiator.xml">Instantiator</db:link>. The following code shows how you can implement a &quot;Recent Files&quot; submenu, where the items come from a list of files stored in settings:</db:para>
<db:programlisting language="qml">Menu {
    title: qsTr(&quot;File&quot;)

    Menu {
        id: recentFilesMenu
        title: qsTr(&quot;Recent Files&quot;)
        enabled: recentFilesInstantiator.count &amp;gt; 0

        Instantiator {
            id: recentFilesInstantiator
            model: settings.recentFiles
            delegate: MenuItem {
                text: settings.displayableFilePath(modelData)
                onTriggered: loadFile(modelData)
            }

            onObjectAdded: (index, object) =&amp;gt; recentFilesMenu.insertItem(index, object)
            onObjectRemoved: (index, object) =&amp;gt; recentFilesMenu.removeItem(object)
        }

        MenuSeparator {}

        MenuItem {
            text: qsTr(&quot;Clear Recent Files&quot;)
            onTriggered: settings.clearRecentFiles()
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="availability">
<db:title>Availability</db:title>
<db:para>A native platform menu is currently available on the following platforms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>macOS</db:para>
</db:listitem>
<db:listitem>
<db:para>iOS</db:para>
</db:listitem>
<db:listitem>
<db:para>Android</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux (only available as a stand-alone context menu when running with the GTK+ platform theme)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Qt Labs Platform module uses Qt Widgets as a fallback on platforms that do not have a native implementation available. Therefore, applications that use types from the Qt Labs Platform module should link to <db:link xlink:href="qtwidgets-module.xml">QtWidgets</db:link> and use <db:link xlink:href="qapplication.xml">QApplication</db:link> instead of <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
<db:para>To link against the <db:link xlink:href="qtwidgets-module.xml">QtWidgets</db:link> library, add the following to your qmake project file:</db:para>
<db:programlisting language="cpp">QT += widgets
</db:programlisting>
<db:para>Create an instance of <db:link xlink:href="qapplication.xml">QApplication</db:link> in <db:code>main()</db:code>:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));
    return app.exec();
}
</db:programlisting>
<db:note>
<db:para><db:emphasis>Types in Qt.labs modules are not guaranteed to remain compatible in future versions.</db:emphasis></db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menuitem.xml">MenuItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-platform-menuseparator.xml">MenuSeparator</db:link></db:member>
<db:member><db:link xlink:href="qml-qt-labs-platform-menubar.xml">MenuBar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="data-prop">
<db:title>[default] data : list&lt;QtObject&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;QtObject&gt;</db:type>
<db:varname>data</db:varname>
<db:modifier>writable</db:modifier>
<db:modifier>[default]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This default property holds the list of all objects declared as children of the menu. The data property includes objects that are not <db:link xlink:href="qml-qt-labs-platform-menuitem.xml">MenuItem</db:link> instances, such as <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> and <db:link xlink:href="qml-qtqml-qtobject.xml">QtObject</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menu.xml#items-prop">items</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the menu is enabled. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="font-prop">
<db:title>font : font</db:title>
<db:fieldsynopsis>
<db:type>font</db:type>
<db:varname>font</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu's font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qt-labs-platform-menu.xml#title-prop">title</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon group</db:title>
<db:bridgehead renderas="sect2" xml:id="icon.mask-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.mask : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>icon.mask</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.name-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.name : string</db:bridgehead>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>icon.name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.source-prop">[since Qt.labs.platform 1.1 (Qt 5.12)] icon.source : url</db:bridgehead>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>icon.source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu item's icon.</db:para>
<db:para>This QML property was introduced in Qt.labs.platform 1.1 (Qt 5.12).</db:para>
</db:section>
<db:section xml:id="items-prop">
<db:title>items : list&lt;MenuItem&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;MenuItem&gt;</db:type>
<db:varname>items</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of items in the menu.</db:para>
</db:section>
<db:section xml:id="menuBar-prop">
<db:title>[read-only] menuBar : MenuBar</db:title>
<db:fieldsynopsis>
<db:type>MenuBar</db:type>
<db:varname>menuBar</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menubar that the menu belongs to, or <db:code>null</db:code> if the menu is not in a menubar.</db:para>
</db:section>
<db:section xml:id="menuItem-prop">
<db:title>[read-only] menuItem : MenuItem</db:title>
<db:fieldsynopsis>
<db:type>MenuItem</db:type>
<db:varname>menuItem</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item that presents the menu (in a parent menu).</db:para>
</db:section>
<db:section xml:id="minimumWidth-prop">
<db:title>minimumWidth : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>minimumWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the minimum width of the menu. The default value is <db:code>-1</db:code> (no minimum width).</db:para>
</db:section>
<db:section xml:id="parentMenu-prop">
<db:title>[read-only] parentMenu : Menu</db:title>
<db:fieldsynopsis>
<db:type>Menu</db:type>
<db:varname>parentMenu</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the parent menu that the menu belongs to, or <db:code>null</db:code> if the menu is not a sub-menu.</db:para>
</db:section>
<db:section xml:id="systemTrayIcon-prop">
<db:title>[read-only] systemTrayIcon : SystemTrayIcon</db:title>
<db:fieldsynopsis>
<db:type>SystemTrayIcon</db:type>
<db:varname>systemTrayIcon</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the system tray icon that the menu belongs to, or <db:code>null</db:code> if the menu is not in a system tray icon.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>title</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the menu's title.</db:para>
</db:section>
<db:section xml:id="type-prop">
<db:title>type : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>type</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the type of the menu.</db:para>
<db:para>Available values:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Menu.DefaultMenu</db:para>
</db:td>
<db:td>
<db:para>A normal menu (default).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Menu.EditMenu</db:para>
</db:td>
<db:td>
<db:para>An edit menu with pre-populated cut, copy and paste items.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>visible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the menu is visible. The default value is <db:code>true</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="aboutToHide-signal">
<db:title>aboutToHide()</db:title>
<db:para>This signal is emitted when the menu is about to be hidden from the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAboutToHide</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="aboutToShow-signal">
<db:title>aboutToShow()</db:title>
<db:para>This signal is emitted when the menu is about to be shown to the user.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onAboutToShow</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addItem-method">
<db:title>void addItem(MenuItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds an <db:code role="parameter">item</db:code> to the end of the menu.</db:para>
</db:section>
<db:section xml:id="addMenu-method">
<db:title>void addMenu(Menu <db:emphasis>submenu</db:emphasis>)</db:title>
<db:para>Adds a <db:code role="parameter">submenu</db:code> to the end of the menu.</db:para>
</db:section>
<db:section xml:id="clear-method">
<db:title>void clear()</db:title>
<db:para>Removes all items from the menu.</db:para>
</db:section>
<db:section xml:id="close-method">
<db:title>void close()</db:title>
<db:para>Closes the menu.</db:para>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>void insertItem(int <db:emphasis>index</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts an <db:code role="parameter">item</db:code> at the specified <db:code role="parameter">index</db:code> in the menu.</db:para>
</db:section>
<db:section xml:id="insertMenu-method">
<db:title>void insertMenu(int <db:emphasis>index</db:emphasis>, Menu <db:emphasis>submenu</db:emphasis>)</db:title>
<db:para>Inserts a <db:code role="parameter">submenu</db:code> at the specified <db:code role="parameter">index</db:code> in the menu.</db:para>
</db:section>
<db:section xml:id="open-method">
<db:title>void open(MenuItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Opens the menu at the current mouse position, optionally aligned to a menu <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="open-method-1">
<db:title>void open(Item <db:emphasis>target</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Opens the menu at the specified <db:code role="parameter">target</db:code> item, optionally aligned to a menu <db:code role="parameter">item</db:code>.</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>void removeItem(MenuItem <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes an <db:code role="parameter">item</db:code> from the menu.</db:para>
</db:section>
<db:section xml:id="removeMenu-method">
<db:title>void removeMenu(Menu <db:emphasis>submenu</db:emphasis>)</db:title>
<db:para>Removes a <db:code role="parameter">submenu</db:code> from the menu.</db:para>
</db:section>
</db:section>
</db:article>
