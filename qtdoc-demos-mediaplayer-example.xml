<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Media Player</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Playing audio and video using Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mediaplayer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates a simple multimedia player that can play audio and video files using various codecs.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="project-structure">
<db:title>Project structure</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/project_structure.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This applications architecture is comprised of three custom QML modules:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>MediaControl</db:para>
</db:listitem>
<db:listitem>
<db:para>MediaPlayer</db:para>
</db:listitem>
<db:listitem>
<db:para>Config</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This is also reflected in the top-level CMakeLists.txt file:</db:para>
<db:programlisting language="cpp">add_subdirectory(MediaPlayer)
add_subdirectory(MediaControls)
add_subdirectory(Config)

target_link_libraries(MediaPlayerApp PRIVATE
    Qt6::Core
    Qt6::Svg
    Qt6::Quick
    Qt6::Multimedia
    MediaControlsplugin
    MediaPlayerplugin
    Configplugin
</db:programlisting>
<db:para>Each QML module is created using the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> macro, for example see how the Config module is created.</db:para>
<db:programlisting language="cpp">qt_add_library(Config STATIC)

set_source_files_properties(Config.qml
    PROPERTIES
        QT_QML_SINGLETON_TYPE true
)

qt_add_qml_module(Config
    URI &quot;Config&quot;
    OUTPUT_DIRECTORY Config
    QML_FILES
        &quot;Config.qml&quot;
)
</db:programlisting>
</db:section>
<db:section xml:id="qt-quick-application">
<db:title>Qt Quick application</db:title>
<db:para>At its core this is a QML application, see <db:link xlink:href="qtdoc-tutorials-alarms-example.xml">Getting Started Programming with Qt Quick</db:link> for information specific to that. This documentation is focused on how this example utilizes the <db:link xlink:href="qtmultimedia-qmlmodule.xml">Qt Multimedia QML Types</db:link>.</db:para>
</db:section>
<db:section xml:id="the-custom-config-qml-module">
<db:title>The custom Config QML module</db:title>
<db:para>This type controls themes and layouts for an application, depending on the target operating system.</db:para>
<db:para>First we declare it a singleton, as we only need it to be instantiated once and creating copies would be a waste of resources.</db:para>
<db:para>To do that we add the following at the top of Config.qml</db:para>
<db:programlisting language="qml">pragma Singleton
</db:programlisting>
<db:para>We then create a qmldir file in the Config directory named qmldir that contains the following:</db:para>
<db:programlisting language="cpp">module Config
singleton Config 1.0 Config.qml
</db:programlisting>
<db:para>Now to use it in our application, see how it is referenced in <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>'s Main.qml file:</db:para>
<db:programlisting language="cpp">    color: Config.mainColor
</db:programlisting>
</db:section>
<db:section xml:id="the-custom-mediacontrols-qml-module">
<db:title>The custom MediaControls QML module</db:title>
<db:para>This module holds all the types used to define the application's controls including:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/controls.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para>AudioControl.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>ControlImages.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>CustomButton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>CustomRadioButton.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>CustomSlider.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>PlaybackControl.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>PlaybackRateControl.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>PlaybackSeekControl.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See each specific type's definition file for detail on how these controls are implemented. They are an evolution of the controls in the <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml">QML Media Player Example</db:link>.</db:para>
</db:section>
<db:section xml:id="the-custom-mediaplayer-qml-module">
<db:title>The custom MediaPlayer QML module</db:title>
<db:para>This module has the Main.qml file which declares where most of the top level types for the application are used, and crucially where the Qt Multimedia <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> and <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> QML types are declared.</db:para>
<db:programlisting language="cpp">    MediaPlayer {
        id: mediaPlayer

        playbackRate: playbackControl.playbackRate
        videoOutput: videoOutput
        audioOutput: AudioOutput {
            id: audio
            volume: playbackControl.volume
        }
        source: new URL(&quot;https://download.qt.io/learning/videos/media-player-example/Qt_LogoMergeEffect.mp4&quot;)

        function updateMetadata() {
            root.metadataInfo.clear()
            root.metadataInfo.read(mediaPlayer.metaData)
        }

        onMetaDataChanged: updateMetadata()
        onActiveTracksChanged: updateMetadata()
        onErrorOccurred: {
            errorPopup.errorMsg = mediaPlayer.errorString
            errorPopup.open()
        }
        onTracksChanged: {
            settingsInfo.tracksInfo.selectedAudioTrack = mediaPlayer.activeAudioTrack
            settingsInfo.tracksInfo.selectedVideoTrack = mediaPlayer.activeVideoTrack
            settingsInfo.tracksInfo.selectedSubtitleTrack = mediaPlayer.activeSubtitleTrack
            updateMetadata()
        }

        onMediaStatusChanged: {
            if ((MediaPlayer.EndOfMedia === mediaStatus &amp;amp;&amp;amp; mediaPlayer.loops !== MediaPlayer.Infinite) &amp;amp;&amp;amp;
                    ((root.currentFile &amp;lt; playlistInfo.mediaCount - 1) || playlistInfo.isShuffled)) {
                if (!playlistInfo.isShuffled) {
                    ++root.currentFile
                }
                root.playMedia()
            } else if (MediaPlayer.EndOfMedia === mediaStatus &amp;amp;&amp;amp; root.playlistLooped &amp;amp;&amp;amp; playlistInfo.mediaCount) {
                root.currentFile = 0
                root.playMedia()
            }
        }
    }

    VideoOutput {
        id: videoOutput

        anchors.top: fullScreen || Config.isMobileTarget ? parent.top : menuBar.bottom
        anchors.bottom: fullScreen ? parent.bottom : playbackControl.top
        anchors.left: parent.left
        anchors.right: parent.right
        anchors.leftMargin: fullScreen ? 0 : 20
        anchors.rightMargin: fullScreen ? 0 : 20
        visible: mediaPlayer.hasVideo

        property bool fullScreen: false

        TapHandler {
            onDoubleTapped: {
                if (parent.fullScreen) {
                    root.showNormal()
                } else {
                    root.showFullScreen()
                }
                parent.fullScreen = !parent.fullScreen
            }
            onTapped: {
                root.closeOverlays()
            }
        }
    }
</db:programlisting>
<db:para>The module contains the other customs types used for retrieving and displaying file information, as well as calling the file picker.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ErrorPopup.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>Images.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>MetadataInfo.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>PlayerMenuBar.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>PlaylistInfo.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>SettingsInfo.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>ThemeInfo.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>TouchMenu.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>TracksInfo.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>TracksOptions.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>UrlPopup.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See each specific type's definition file for detail on how types are implemented. Some are an evolution of those found in <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml">QML Media Player Example</db:link>.</db:para>
</db:section>
<db:section xml:id="new-functionality">
<db:title>New functionality</db:title>
<db:para>This example application has some new functionality implemented by types, such as PlaylistInfo and ThemeInfo. See the respective .qml files for detail on how these are implemented.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdoc.git/tree/examples/demos/mediaplayer?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
