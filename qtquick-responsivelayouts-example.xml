<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Layouts - Responsive Layout Example</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> to make a responsive UI.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to use LayoutProxyItems in combination with <db:link xlink:href="qtquicklayouts-index.xml">layouts</db:link> to create responsive layouts.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-items">
<db:title>Creating items</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> type allows to use the same item in different layouts, although only one layout can be visible at the same time. This can be used to create responsive layouts that adapt to the window or screen size.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquicklayouts-example-responsivelayouts.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>First we need to define all items that should appear in or UI at some point. We use a AnnotatedRect, which is a simple Rectangle with some added text.</db:para>
<db:programlisting language="qml">Rectangle {
    id: contentItem
    Layout.fillWidth: true
    implicitHeight: grid.implicitHeight
    implicitWidth: grid.implicitWidth
    color: &quot;#00414A&quot;

    GridLayout {
        id: grid
        anchors {
            fill: parent
            margins: 8
        }
        columns: Math.min(Math.round(width / 130), 6)
        Repeater {
            model: 60
            delegate: Rectangle {
                required property int index
                Layout.fillWidth: true
                Layout.margins: 8
                implicitWidth: 200
                implicitHeight: width
                radius: width / 10
                gradient: Gradient {
                    GradientStop { position: -0.2; color: &quot;#2CDE85&quot; }
                    GradientStop { position: 1.2; color: &quot;#00414A&quot; }
                }
                Text {
                    color: &quot;#ffffff&quot;
                    font.pointSize: 22
                    anchors.centerIn: parent
                    text: parent.index + 1
                }
            }
        }
    }
}

Button {
    id: a
    text: &quot;Text&quot;
    icon.source: &quot;./icons/text.svg&quot;
    Layout.fillWidth: true
    Layout.margins: 3
}

Button {
    id: b
    text: &quot;Grid 1&quot;
    icon.source: &quot;./icons/grid.svg&quot;
    Layout.fillWidth: true
    Layout.margins: 3
}

Button {
    id: c
    text: &quot;Grid 2&quot;
    icon.source: &quot;./icons/grid.svg&quot;
    Layout.fillWidth: true
    Layout.margins: 3
}

Button {
    id: d
    text: &quot;Settings&quot;
    icon.source: &quot;./icons/settings.svg&quot;
    Layout.fillWidth: true
    Layout.margins: 3
}
</db:programlisting>
</db:section>
<db:section xml:id="creating-layouts">
<db:title>Creating layouts</db:title>
<db:para>We can now declare various layouts using <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxies</db:link>, targeting the previously declare items. A single layout can be defined as follows.</db:para>
<db:programlisting language="qml">ColumnLayout {
    id: smallLayout
    anchors.fill: parent

    Flickable {
        Layout.fillHeight: true
        Layout.fillWidth: true
        contentWidth: width
        contentHeight: gl.implicitHeight
        clip: true
        ScrollIndicator.vertical: ScrollIndicator { }
        LayoutItemProxy {
            id: gl
            width: parent.width
            height: implicitHeight
            target: contentItem
        }
    }

    RowLayout {
        Layout.fillHeight: false
        Layout.fillWidth: true
        Layout.margins: 5
        LayoutItemProxy{ target: a; }
        LayoutItemProxy{ target: b; }
        LayoutItemProxy{ target: c; }
    }
}
</db:programlisting>
<db:para>This snippet shows multiple ways to use the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link>. The simplest method is to add <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxies</db:link> to a Layout like the <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> here. In addition we set an additional <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> attached property to the LayoutProxyItem that will affect the target item only in this particular layout. Further, we see that the item <db:code>d</db:code> is not used in the first layout. Then it is automatically hidden by the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> in the second layout. Another way of using it is shown by setting a <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> as the content of a <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>.</db:para>
<db:para>Another layout is declared as follows.</db:para>
<db:programlisting language="qml">RowLayout {
    id: largeLayout
    anchors.fill: parent
    ColumnLayout {
        Layout.minimumWidth: 100
        Layout.fillWidth: true
        Layout.margins: 2
        LayoutItemProxy{ target: a }
        LayoutItemProxy{ target: b }
        LayoutItemProxy{ target: c }
        Item { Layout.fillHeight: true }
        LayoutItemProxy{ target: d }
    }

    LayoutItemProxy {
        Layout.fillHeight: true
        Layout.fillWidth: true
        target: contentItem
    }
}
</db:programlisting>
<db:para>Here we show that <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxies</db:link> can be used together with real <db:link xlink:href="qml-qtquick-item.xml">Items</db:link> on the same hierarchy level. Generally, the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> is flexible and allows nested structures of items and layouts.</db:para>
</db:section>
<db:section xml:id="setting-the-layout">
<db:title>Setting the layout</db:title>
<db:para>After two layouts, <db:code>smallLayout</db:code> and <db:code>largeLayout</db:code> are defined, we can continue with setting the layout that fits to the current size of the application. We define a new function for this code that we call when the window is initialized and whenever the width changes:</db:para>
<db:programlisting language="qml">function setFittingLayout() {
    if (width &lt; 450) {
        smallLayout.visible = true
        largeLayout.visible = false
    } else {
        smallLayout.visible = false
        largeLayout.visible = true
    }
}
onWidthChanged: setFittingLayout()
Component.onCompleted: setFittingLayout()
</db:programlisting>
<db:para>Alternatively to calling this function after initialization we can hide all but the correct layout for the initial size in the declarative code.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/responsivelayouts?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
