<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quick MQTT Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Registering QMqttClient to QML and using it in a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2017 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;qmlmqttclient.h&quot;
#include &amp;lt;QDebug&amp;gt;

QmlMqttSubscription::QmlMqttSubscription(QMqttSubscription *s, QmlMqttClient *c)
    : sub(s)
    , client(c)
{
    connect(sub, &amp;amp;QMqttSubscription::messageReceived, this, &amp;amp;QmlMqttSubscription::handleMessage);
    m_topic = sub-&amp;gt;topic();
}

QmlMqttSubscription::~QmlMqttSubscription()
{
}

QmlMqttClient::QmlMqttClient(QObject *parent)
    : QObject(parent)
{
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::hostnameChanged, this, &amp;amp;QmlMqttClient::hostnameChanged);
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::portChanged, this, &amp;amp;QmlMqttClient::portChanged);
    connect(&amp;amp;m_client, &amp;amp;QMqttClient::stateChanged, this, &amp;amp;QmlMqttClient::stateChanged);
}

void QmlMqttClient::connectToHost()
{
    m_client.connectToHost();
}

void QmlMqttClient::disconnectFromHost()
{
    m_client.disconnectFromHost();
}

QmlMqttSubscription* QmlMqttClient::subscribe(const QString &amp;amp;topic)
{
    auto sub = m_client.subscribe(topic, 0);
    auto result = new QmlMqttSubscription(sub, this);
    return result;
}

void QmlMqttSubscription::handleMessage(const QMqttMessage &amp;amp;qmsg)
{
    emit messageReceived(qmsg.payload());
}

const QString QmlMqttClient::hostname() const
{
    return m_client.hostname();
}

void QmlMqttClient::setHostname(const QString &amp;amp;newHostname)
{
    m_client.setHostname(newHostname);
}

int QmlMqttClient::port() const
{
    return m_client.port();
}

void QmlMqttClient::setPort(int newPort)
{
    if (newPort &amp;lt; 0 || newPort &amp;gt; std::numeric_limits&amp;lt;quint16&amp;gt;::max()) {
        qWarning() &amp;lt;&amp;lt; &quot;Trying to set invalid port number&quot;;
        return;
    }
    m_client.setPort(static_cast&amp;lt;quint16&amp;gt;(newPort));

    m_client.state();
}

const QMqttClient::ClientState QmlMqttClient::state() const
{
    return m_client.state();
}

void QmlMqttClient::setState(const QMqttClient::ClientState &amp;amp;newState)
{
    m_client.setState(newState);
}

</db:programlisting>
</db:article>
