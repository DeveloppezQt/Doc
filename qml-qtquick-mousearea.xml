<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MouseArea QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables simple mouse handling.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>MouseArea is part of <db:simplelist><db:member>qtquick-input</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is an invisible item that is typically used in conjunction with a visible item in order to provide mouse handling for that item. By effectively acting as a proxy, the logic for mouse handling can be contained within a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> item.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-mousearea.xml#enabled-prop">enabled</db:link> property is used to enable and disable mouse handling for the proxied item. When disabled, the mouse area becomes transparent to mouse events.</db:para>
<db:para><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is an invisible Item, but it has a visible property. When set to false, the mouse area becomes transparent to mouse events.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-mousearea.xml#pressed-signal">pressed</db:link> read-only property indicates whether or not the user is holding down a mouse button over the mouse area. This property is often used in bindings between properties in a user interface. The <db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link> read-only property indicates the presence of the mouse cursor over the mouse area but, by default, only when a mouse button is held down; see the <db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link> documentation for details.</db:para>
<db:para>Information about the mouse position and button clicks are provided via signals for which event handler properties are defined. The most commonly used involved handling mouse presses and clicks: onClicked, onDoubleClicked, onPressed, onReleased and onPressAndHold. It's also possible to handle mouse wheel events via the onWheel signal.</db:para>
<db:para>If a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> overlaps with the area of other <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> items, you can choose to propagate <db:code>clicked</db:code>, <db:code>doubleClicked</db:code> and <db:code>pressAndHold</db:code> events to these other items by setting <db:link xlink:href="qml-qtquick-mousearea.xml#propagateComposedEvents-prop">propagateComposedEvents</db:link> to true and rejecting events that should be propagated. See the <db:link xlink:href="qml-qtquick-mousearea.xml#propagateComposedEvents-prop">propagateComposedEvents</db:link> documentation for details.</db:para>
<db:para>By default, <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> items only report mouse clicks and not changes to the position of the mouse cursor. Setting the <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> property ensures that handlers defined for onPositionChanged, onEntered and onExited are used and that the <db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link> property is updated even when no mouse buttons are pressed.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-mousearea-snippet.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The following example uses a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> in a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> that changes the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> color to red when clicked:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100; height: 100
    color: &quot;green&quot;

    MouseArea {
        anchors.fill: parent
        onClicked: { parent.color = 'red' }
    }
}
</db:programlisting>
<db:para>Many <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> signals pass a <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter that contains additional information about the mouse event, such as the position, button, and any key modifiers.</db:para>
<db:para>Here is an extension of the previous example that produces a different color when the area is right clicked:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 100; height: 100
    color: &quot;green&quot;

    MouseArea {
        anchors.fill: parent
        acceptedButtons: Qt.LeftButton | Qt.RightButton
        onClicked: (mouse)=&amp;gt; {
            if (mouse.button == Qt.RightButton)
                parent.color = 'blue';
            else
                parent.color = 'red';
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mouseevent.xml">MouseEvent</db:link></db:member>
<db:member><db:link xlink:href="qtquick-mousearea-example.xml">MouseArea example</db:link></db:member>
<db:member><db:link xlink:href="qtquick-input-topic.xml">Important Concepts In Qt Quick - User Input</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="mouseX-prop">
<db:title>mouseX : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>mouseX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">mouseY : real</db:bridgehead><db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>mouseY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the coordinates of the mouse cursor.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> property is false then these properties will only be valid while a button is pressed, and will remain valid as long as the button is held down even if the mouse is moved outside the area.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> is true then these properties will be valid when:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>no button is pressed, but the mouse is within the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> (<db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link> is true).</db:para>
</db:listitem>
<db:listitem>
<db:para>a button is pressed and held, even if it has since moved out of the area.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The coordinates are relative to the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
</db:section>
<db:section xml:id="acceptedButtons-prop">
<db:title>acceptedButtons : Qt::MouseButtons</db:title>
<db:fieldsynopsis>
<db:type>Qt::MouseButtons</db:type>
<db:varname>acceptedButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mouse buttons that the mouse area reacts to.</db:para>
<db:para>To specify that the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> will react to multiple buttons, <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButtons</db:link> flag values are combined using the &quot;|&quot; (or) operator:</db:para>
<db:programlisting language="cpp">MouseArea { acceptedButtons: Qt.LeftButton | Qt.RightButton }
</db:programlisting>
<db:para>To indicate that all possible mouse buttons are to be accepted, the special value 'Qt.AllButtons' may be used:</db:para>
<db:programlisting language="cpp">MouseArea { acceptedButtons: Qt.AllButtons }
</db:programlisting>
<db:para>The default value is <db:code>Qt.LeftButton</db:code>.</db:para>
</db:section>
<db:section xml:id="containsMouse-prop">
<db:title>containsMouse : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>containsMouse</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the mouse is currently inside the mouse area.</db:para>
<db:warning>
<db:para>If <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> is false, containsMouse will only be valid when the mouse is pressed while the mouse cursor is inside the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
</db:warning>
</db:section>
<db:section xml:id="containsPress-prop">
<db:title>[since 5.4] containsPress : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>containsPress</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is a convenience property equivalent to <db:code>pressed &amp;&amp; containsMouse</db:code>, i.e. it holds whether any of the <db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link> are currently pressed and the mouse is currently within the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
<db:para>This property is particularly useful for highlighting an item while the mouse is pressed within its bounds.</db:para>
<db:para>This property was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#pressed-signal">pressed</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorShape-prop">
<db:title>cursorShape : Qt::CursorShape</db:title>
<db:fieldsynopsis>
<db:type>Qt::CursorShape</db:type>
<db:varname>cursorShape</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the cursor shape for this mouse area. Note that on platforms that do not display a mouse cursor this may have no effect.</db:para>
<db:para>The available cursor shapes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.UpArrowCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.CrossCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WaitCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.IBeamCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeVerCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeHorCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeBDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeFDiagCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SizeAllCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BlankCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitVCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.SplitHCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.PointingHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ForbiddenCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.WhatsThisCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.BusyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.OpenHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ClosedHandCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragCopyCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragMoveCursor</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DragLinkCursor</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In order to only set a mouse cursor shape for a region without reacting to mouse events set the <db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link> to none:</db:para>
<db:programlisting language="cpp">MouseArea { cursorShape: Qt.IBeamCursor; acceptedButtons: Qt.NoButton }
</db:programlisting>
<db:para>The default value is <db:code>Qt.ArrowCursor</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drag-prop">
<db:title>drag group</db:title>
<db:bridgehead renderas="sect2" xml:id="drag.active-prop">drag.active : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>drag.active</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.axis-prop">drag.axis : enumeration</db:bridgehead>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>drag.axis</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.filterChildren-prop">drag.filterChildren : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>drag.filterChildren</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.maximumX-prop">drag.maximumX : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>drag.maximumX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.maximumY-prop">drag.maximumY : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>drag.maximumY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.minimumX-prop">drag.minimumX : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>drag.minimumX</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.minimumY-prop">drag.minimumY : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>drag.minimumY</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.smoothed-prop">drag.smoothed : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>drag.smoothed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.target-prop">drag.target : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>drag.target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="drag.threshold-prop">drag.threshold : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>drag.threshold</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para><db:code>drag</db:code> provides a convenient way to make an item draggable.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>drag.target</db:code> specifies the id of the item to drag.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>drag.active</db:code> specifies if the target item is currently being dragged.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>drag.axis</db:code> specifies whether dragging can be done horizontally (<db:code>Drag.XAxis</db:code>), vertically (<db:code>Drag.YAxis</db:code>), or both (<db:code>Drag.XAndYAxis</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>drag.minimum</db:code> and <db:code>drag.maximum</db:code> limit how far the target can be dragged along the corresponding axes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The following example displays a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> that can be dragged along the X-axis. The opacity of the rectangle is reduced when it is dragged to the right.</db:para>
<db:programlisting language="qml">Rectangle {
    id: container
    width: 600; height: 200

    Rectangle {
        id: rect
        width: 50; height: 50
        color: &quot;red&quot;
        opacity: (600.0 - rect.x) / 600

        MouseArea {
            anchors.fill: parent
            drag.target: rect
            drag.axis: Drag.XAxis
            drag.minimumX: 0
            drag.maximumX: container.width - rect.width
        }
    }
}
</db:programlisting>
<db:note>
<db:para>Items cannot be dragged if they are anchored for the requested <db:code>drag.axis</db:code>. For example, if <db:code>anchors.left</db:code> or <db:code>anchors.right</db:code> was set for <db:code>rect</db:code> in the above example, it cannot be dragged along the X-axis. This can be avoided by settng the anchor value to <db:code>undefined</db:code> in an <db:link xlink:href="qml-qtquick-mousearea.xml#pressed-signal">onPressed</db:link> handler.</db:para>
</db:note>
<db:para>If <db:code>drag.filterChildren</db:code> is set to true, a drag can override descendant MouseAreas. This enables a parent <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle drags, for example, while descendants handle clicks:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 480
    height: 320
    Rectangle {
        x: 30; y: 30
        width: 300; height: 240
        color: &quot;lightsteelblue&quot;

        MouseArea {
            anchors.fill: parent
            drag.target: parent;
            drag.axis: &quot;XAxis&quot;
            drag.minimumX: 30
            drag.maximumX: 150
            drag.filterChildren: true

            Rectangle {
                color: &quot;yellow&quot;
                x: 50; y : 50
                width: 100; height: 100
                MouseArea {
                    anchors.fill: parent
                    onClicked: console.log(&quot;Clicked&quot;)
                }
            }
        }
    }
}
</db:programlisting>
<db:para><db:code>drag.threshold</db:code> determines the threshold in pixels of when the drag operation should start. By default this is bound to a platform dependent value. This property was added in Qt Quick 2.2.</db:para>
<db:para>If <db:code>drag.smoothed</db:code> is <db:code>true</db:code>, the target will be moved only after the drag operation has started. If set to <db:code>false</db:code>, the target will be moved straight to the current mouse position. By default, this property is <db:code>true</db:code>. This property was added in Qt Quick 2.4</db:para>
<db:para>See the <db:link xlink:href="qml-qtquick-drag.xml">Drag</db:link> attached property and <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link> if you want to make a drop.</db:para>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>enabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the item accepts mouse events.</db:para>
<db:note>
<db:para>Due to historical reasons, this property is not equivalent to Item.enabled. It only affects mouse events, and its effect does not propagate to child items.</db:para>
</db:note>
<db:para>By default, this property is true.</db:para>
</db:section>
<db:section xml:id="hoverEnabled-prop">
<db:title>hoverEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>hoverEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether hover events are handled.</db:para>
<db:para>By default, mouse events are only handled in response to a button event, or when a button is pressed. Hover enables handling of all mouse events even when no mouse button is pressed.</db:para>
<db:para>This property affects the <db:link xlink:href="qml-qtquick-mousearea.xml#containsMouse-prop">containsMouse</db:link> property and the onEntered, onExited and onPositionChanged signals.</db:para>
</db:section>
<db:section xml:id="pressAndHoldInterval-prop">
<db:title>[since 5.9] pressAndHoldInterval : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>pressAndHoldInterval</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property overrides the elapsed time in milliseconds before <db:code>pressAndHold</db:code> is emitted.</db:para>
<db:para>If not explicitly set – or after reset – the value follows <db:code>QStyleHints::mousePressAndHoldInterval</db:code>.</db:para>
<db:para>Typically it's sufficient to set this property globally using the application style hint. This property should be used when varying intervals are needed for certain MouseAreas.</db:para>
<db:para>This property was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#pressAndHold-signal">pressAndHold</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressed-prop">
<db:title>pressed : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>pressed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether any of the <db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link> are currently pressed.</db:para>
</db:section>
<db:section xml:id="pressedButtons-prop">
<db:title>pressedButtons : MouseButtons</db:title>
<db:fieldsynopsis>
<db:type>MouseButtons</db:type>
<db:varname>pressedButtons</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the mouse buttons currently pressed.</db:para>
<db:para>It contains a bitwise combination of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.LeftButton</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.RightButton</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.MiddleButton</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The code below displays &quot;right&quot; when the right mouse buttons is pressed:</db:para>
<db:programlisting language="qml">Text {
    text: mouseArea.pressedButtons &amp;amp; Qt.RightButton ? &quot;right&quot; : &quot;&quot;
    horizontalAlignment: Text.AlignHCenter
    verticalAlignment: Text.AlignVCenter

    MouseArea {
        id: mouseArea
        anchors.fill: parent
        acceptedButtons: Qt.LeftButton | Qt.RightButton
    }
}
</db:programlisting>
<db:note>
<db:para>this property only handles buttons specified in <db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#acceptedButtons-prop">acceptedButtons</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preventStealing-prop">
<db:title>preventStealing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>preventStealing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the mouse events may be stolen from this <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>.</db:para>
<db:para>If a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> is placed within an item that filters child mouse events, such as Flickable, the mouse events may be stolen from the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> if a gesture is recognized by the parent item, e.g. a flick gesture. If preventStealing is set to true, no item will steal the mouse events.</db:para>
<db:para>Note that setting preventStealing to true once an item has started stealing events will have no effect until the next press event.</db:para>
<db:para>By default this property is false.</db:para>
</db:section>
<db:section xml:id="propagateComposedEvents-prop">
<db:title>propagateComposedEvents : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>propagateComposedEvents</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether composed mouse events will automatically propagate to other MouseAreas that overlap with this <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> but are lower in the visual stacking order. By default, this property is false.</db:para>
<db:para><db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> contains several composed events: <db:code>clicked</db:code>, <db:code>doubleClicked</db:code> and <db:code>pressAndHold</db:code>. These are composed of basic mouse events, like <db:code>pressed</db:code>, and can be propagated differently in comparison to basic events.</db:para>
<db:para>If propagateComposedEvents is set to true, then composed events will be automatically propagated to other MouseAreas in the same location in the scene. Each event is propagated to the next <db:link xlink:href="qml-qtquick-mousearea.xml#enabled-prop">enabled</db:link> <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> beneath it in the stacking order, propagating down this visual hierarchy until a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> accepts the event. Unlike <db:code>pressed</db:code> events, composed events will not be automatically accepted if no handler is present.</db:para>
<db:para>For example, below is a yellow <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> that contains a blue <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>. The blue rectangle is the top-most item in the hierarchy of the visual stacking order; it will visually rendered above the yellow rectangle. Since the blue rectangle sets propagateComposedEvents to true, and also sets <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">MouseEvent::accepted</db:link> to false for all received <db:code>clicked</db:code> events, any <db:code>clicked</db:code> events it receives are propagated to the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> of the yellow rectangle beneath it.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    color: &quot;yellow&quot;
    width: 100; height: 100

    MouseArea {
        anchors.fill: parent
        onClicked: console.log(&quot;clicked yellow&quot;)
    }

    Rectangle {
        color: &quot;blue&quot;
        width: 50; height: 50

        MouseArea {
            anchors.fill: parent
            propagateComposedEvents: true
            onClicked: (mouse)=&amp;gt; {
                console.log(&quot;clicked blue&quot;)
                mouse.accepted = false
            }
        }
    }
}
</db:programlisting>
<db:para>Clicking on the blue rectangle will cause the <db:code>onClicked</db:code> handler of its child <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to be invoked; the event will then be propagated to the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> of the yellow rectangle, causing its own <db:code>onClicked</db:code> handler to be invoked.</db:para>
<db:para>This property greatly simplifies the usecase of when you want to have overlapping MouseAreas handling the composed events together. For example: if you want one <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle <db:code>clicked</db:code> signals and the other to handle <db:code>pressAndHold</db:code>, or if you want one <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to handle <db:code>clicked</db:code> most of the time, but pass it through when certain conditions are met.</db:para>
</db:section>
<db:section xml:id="scrollGestureEnabled-prop">
<db:title>[since 5.5] scrollGestureEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>scrollGestureEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls whether this <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> responds to scroll gestures from non-mouse devices, such as the 2-finger flick gesture on a trackpad. If set to false, the <db:link xlink:href="qml-qtquick-mousearea.xml#wheel-signal">wheel</db:link> signal be emitted only when the wheel event comes from an actual mouse with a wheel, while scroll gesture events will pass through to any other Item that will handle them. For example, the user might perform a flick gesture while the cursor is over an item containing a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, intending to interact with a Flickable which is underneath. Setting this property to false will allow the <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> to handle the mouse wheel or the pinch gesture, while the Flickable handles the flick gesture.</db:para>
<db:para>By default, this property is true.</db:para>
<db:para>This property was introduced in Qt 5.5.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="canceled-signal">
<db:title>canceled()</db:title>
<db:para>This signal is emitted when mouse events have been canceled, because another item stole the mouse event handling.</db:para>
<db:para>This signal is for advanced use: it is useful when there is more than one <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> that is handling input, or when there is a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> inside a <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>. In the latter case, if you execute some logic in the <db:code>onPressed</db:code> signal handler and then start dragging, the <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> will steal the mouse handling from the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>. In these cases, to reset the logic when the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> has lost the mouse handling to the <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link>, <db:code>canceled</db:code> should be handled in addition to <db:link xlink:href="qml-qtquick-mousearea.xml#released-signal">released</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCanceled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="clicked-signal">
<db:title>clicked(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is a click. A click is defined as a press followed by a release, both inside the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> (pressing, moving outside the <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link>, and then moving back inside and releasing is also considered a click).</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the click, including the x and y position of the release of the click, and whether the click was held.</db:para>
<db:para>When handling this signal, changing the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter has no effect, unless the <db:link xlink:href="qml-qtquick-mousearea.xml#propagateComposedEvents-prop">propagateComposedEvents</db:link> property is <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked-signal">
<db:title>doubleClicked(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is a double-click (a press followed by a release followed by a press). The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the click, including the x and y position of the release of the click, and whether the click was held.</db:para>
<db:para>When handling this signal, if the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter is set to false, the pressed/released/clicked signals will be emitted for the second click; otherwise they are suppressed. The <db:code>accepted</db:code> property defaults to true.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="entered-signal">
<db:title>entered()</db:title>
<db:para>This signal is emitted when the mouse enters the mouse area.</db:para>
<db:para>By default this signal is only emitted if a button is currently pressed. Set <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> to true to emit this signal even when no mouse button is pressed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onEntered</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exited-signal">
<db:title>exited()</db:title>
<db:para>This signal is emitted when the mouse exits the mouse area.</db:para>
<db:para>By default this signal is only emitted if a button is currently pressed. Set <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> to true to emit this signal even when no mouse button is pressed.</db:para>
<db:para>The example below shows a fairly typical relationship between two MouseAreas, with <db:code>mouseArea2</db:code> on top of <db:code>mouseArea1</db:code>. Moving the mouse into <db:code>mouseArea2</db:code> from <db:code>mouseArea1</db:code> will cause <db:code>mouseArea1</db:code> to emit the <db:code>exited</db:code> signal.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 400; height: 400
    MouseArea {
        id: mouseArea1
        anchors.fill: parent
        hoverEnabled: true
    }
    MouseArea {
        id: mouseArea2
        width: 100; height: 100
        anchors.centerIn: parent
        hoverEnabled: true
    }
}
</db:programlisting>
<db:para>If instead you give the two MouseAreas a parent-child relationship, moving the mouse into <db:code>mouseArea2</db:code> from <db:code>mouseArea1</db:code> will <db:emphasis role="bold">not</db:emphasis> cause <db:code>mouseArea1</db:code> to emit <db:code>exited</db:code>. Instead, they will both be considered to be simultaneously hovered.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onExited</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionChanged-signal">
<db:title>positionChanged(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when the mouse position changes.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the mouse, including the x and y position, and any buttons currently pressed.</db:para>
<db:para>By default this signal is only emitted if a button is currently pressed. Set <db:link xlink:href="qml-qtquick-mousearea.xml#hoverEnabled-prop">hoverEnabled</db:link> to true to emit this signal even when no mouse button is pressed.</db:para>
<db:para>When handling this signal, changing the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter has no effect.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPositionChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressAndHold-signal">
<db:title>pressAndHold(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is a long press (currently 800ms). The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the press, including the x and y position of the press, and which button is pressed.</db:para>
<db:para>When handling this signal, changing the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter has no effect, unless the <db:link xlink:href="qml-qtquick-mousearea.xml#propagateComposedEvents-prop">propagateComposedEvents</db:link> property is <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressAndHold</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressed-signal">
<db:title>pressed(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is a press. The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the press, including the x and y position and which button was pressed.</db:para>
<db:para>When handling this signal, use the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter to control whether this <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> handles the press and all future mouse events until release. The default is to accept the event and not allow other MouseAreas beneath this one to handle the event. If <db:emphasis>accepted</db:emphasis> is set to false, no further events will be sent to this <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> until the button is next pressed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="released-signal">
<db:title>released(MouseEvent <db:emphasis>mouse</db:emphasis>)</db:title>
<db:para>This signal is emitted when there is a release. The <db:link xlink:href="qml-qtquick-mouseevent.xml">mouse</db:link> parameter provides information about the click, including the x and y position of the release of the click, and whether the click was held.</db:para>
<db:para>When handling this signal, changing the <db:link xlink:href="qml-qtquick-mouseevent.xml#accepted-prop">accepted</db:link> property of the <db:code role="parameter">mouse</db:code> parameter has no effect.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReleased</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-mousearea.xml#canceled-signal">canceled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheel-signal">
<db:title>wheel(WheelEvent <db:emphasis>wheel</db:emphasis>)</db:title>
<db:para>This signal is emitted in response to both mouse wheel and trackpad scroll gestures.</db:para>
<db:para>The <db:code role="parameter">wheel</db:code> parameter provides information about the event, including the x and y position, any buttons currently pressed, and information about the wheel movement, including angleDelta and pixelDelta.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onWheel</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
