<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QKeyCombination Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> class stores a combination of a key with optional modifiers.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QKeyCombination</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> class can be used to represent a combination of a key with zero or more keyboard modifiers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeysequence.xml">QKeySequence</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QKeyCombination">
<db:title>[constexpr] QKeyCombination::QKeyCombination(Qt::Key <db:emphasis>key</db:emphasis> = Qt::Key_unknown)</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyCombination</db:methodname>
<db:methodparam>
<db:type>Qt::Key</db:type>
<db:parameter>key</db:parameter>
<db:initializer>Qt::Key_unknown</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyCombination(Qt::Key key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the key <db:code role="parameter">key</db:code> and no modifiers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QKeyCombination-1">
<db:title>[explicit constexpr] QKeyCombination::QKeyCombination(Qt::Modifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis> = Qt::Key_unknown)</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyCombination</db:methodname>
<db:methodparam>
<db:type>Qt::Modifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Key</db:type>
<db:parameter>key</db:parameter>
<db:initializer>Qt::Key_unknown</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyCombination(Qt::Modifiers modifiers, Qt::Key key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifiers <db:code role="parameter">modifiers</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qkeycombination.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QKeyCombination-2">
<db:title>[explicit constexpr] QKeyCombination::QKeyCombination(Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis> = Qt::Key_unknown)</db:title>
<db:constructorsynopsis>
<db:methodname>QKeyCombination</db:methodname>
<db:methodparam>
<db:type>Qt::KeyboardModifiers</db:type>
<db:parameter>modifiers</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Key</db:type>
<db:parameter>key</db:parameter>
<db:initializer>Qt::Key_unknown</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyCombination(Qt::KeyboardModifiers modifiers, Qt::Key key)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifiers <db:code role="parameter">modifiers</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qkeycombination.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCombined">
<db:title>[static constexpr] QKeyCombination QKeyCombination::fromCombined(int <db:emphasis>combined</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QKeyCombination</db:type>
<db:methodname>fromCombined</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>combined</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QKeyCombination fromCombined(int combined)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object by extracting the key and the modifiers out of <db:code role="parameter">combined</db:code>, which must be the result of a bitwise OR between a value of type <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> and value of type <db:link xlink:href="qt.xml#KeyboardModifier-enum">Qt::KeyboardModifiers</db:link>. <db:link xlink:href="qkeycombination.xml#toCombined">toCombined</db:link>() can be used in order to produce valid values for <db:code role="parameter">combined</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#toCombined">toCombined</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>[constexpr] Qt::Key QKeyCombination::key() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Key</db:type>
<db:methodname>key</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Key key() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key represented by this <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboardModifiers">
<db:title>[constexpr] Qt::KeyboardModifiers QKeyCombination::keyboardModifiers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::KeyboardModifiers</db:type>
<db:methodname>keyboardModifiers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::KeyboardModifiers keyboardModifiers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the keyboard modifiers represented by this <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCombined">
<db:title>[constexpr] int QKeyCombination::toCombined() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toCombined</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toCombined() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an integer value obtained by applying a bitwise OR between the values of <db:link xlink:href="qkeycombination.xml#key">key</db:link>() and <db:link xlink:href="qkeycombination.xml#keyboardModifiers">keyboardModifiers</db:link>() represented by this object. A <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object can be created from the returned integer value by using <db:link xlink:href="qkeycombination.xml#fromCombined">fromCombined</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qkeycombination.xml#fromCombined">fromCombined</db:link>()</db:member>
<db:member><db:link xlink:href="qkeycombination.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qkeycombination.xml#keyboardModifiers">keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-7c-3">
<db:title>[constexpr] QKeyCombination operator|(Qt::Key <db:emphasis>key</db:emphasis>, Qt::KeyboardModifier <db:emphasis>modifier</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-7c-2">[constexpr] QKeyCombination operator|(Qt::Key <db:emphasis>key</db:emphasis>, Qt::Modifier <db:emphasis>modifier</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-7c-1">[constexpr] QKeyCombination operator|(Qt::KeyboardModifier <db:emphasis>modifier</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-7c">[constexpr] QKeyCombination operator|(Qt::Modifier <db:emphasis>modifier</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:para>Returns a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifier <db:code role="parameter">modifier</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-7c-7">
<db:title>[constexpr] QKeyCombination operator|(Qt::Key <db:emphasis>key</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-7c-6">[constexpr] QKeyCombination operator|(Qt::Key <db:emphasis>key</db:emphasis>, Qt::Modifiers <db:emphasis>modifiers</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-7c-5">[constexpr] QKeyCombination operator|(Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-7c-4">[constexpr] QKeyCombination operator|(Qt::Modifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:para>Returns a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifiers <db:code role="parameter">modifiers</db:code>.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[constexpr] size_t qHash(QKeyCombination <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(QKeyCombination key, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for the <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr] bool operator!=(QKeyCombination <db:emphasis>lhs</db:emphasis>, QKeyCombination <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QKeyCombination lhs, QKeyCombination rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> have different combinations of key and modifiers, otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, QKeyCombination <db:emphasis>combination</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>combination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, QKeyCombination combination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the combination <db:code role="parameter">combination</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, QKeyCombination <db:emphasis>combination</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>combination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, QKeyCombination combination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the combination <db:code role="parameter">combination</db:code> into the stream <db:code role="parameter">out</db:code>. Returns <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr] bool operator==(QKeyCombination <db:emphasis>lhs</db:emphasis>, QKeyCombination <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyCombination</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QKeyCombination lhs, QKeyCombination rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> have the same combination of key and modifiers, and <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QKeyCombination &amp;<db:emphasis>combination</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QKeyCombination &amp;</db:type>
<db:parameter>combination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QKeyCombination &amp;combination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads the combination <db:code role="parameter">combination</db:code> from the stream <db:code role="parameter">in</db:code>. Returns <db:code role="parameter">in</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QKeyCombination</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="operator-int">
<db:title>[constexpr] int QKeyCombination::operator int() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>operator int</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int operator int() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qkeycombination.xml#toCombined">toCombined</db:link>() instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete-related-non-members">
<db:title>Obsolete Related Non-Members</db:title>
<db:section xml:id="operator-2b-3">
<db:title>[constexpr] QKeyCombination operator+(Qt::Key <db:emphasis>key</db:emphasis>, Qt::KeyboardModifier <db:emphasis>modifier</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-2b-2">[constexpr] QKeyCombination operator+(Qt::Key <db:emphasis>key</db:emphasis>, Qt::Modifier <db:emphasis>modifier</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b-1">[constexpr] QKeyCombination operator+(Qt::KeyboardModifier <db:emphasis>modifier</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b">[constexpr] QKeyCombination operator+(Qt::Modifier <db:emphasis>modifier</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use operator| instead.</db:para>
<db:para>Returns a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifier <db:code role="parameter">modifier</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-7">
<db:title>[constexpr] QKeyCombination operator+(Qt::Key <db:emphasis>key</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-2b-6">[constexpr] QKeyCombination operator+(Qt::Key <db:emphasis>key</db:emphasis>, Qt::Modifiers <db:emphasis>modifiers</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b-5">[constexpr] QKeyCombination operator+(Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="operator-2b-4">[constexpr] QKeyCombination operator+(Qt::Modifiers <db:emphasis>modifiers</db:emphasis>, Qt::Key <db:emphasis>key</db:emphasis>)</db:bridgehead>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use operator| instead.</db:para>
<db:para>Returns a <db:link xlink:href="qkeycombination.xml">QKeyCombination</db:link> object that represents the combination of <db:code role="parameter">key</db:code> with the modifiers <db:code role="parameter">modifiers</db:code>.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
