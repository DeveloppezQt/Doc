<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Categories of Documentation</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-guide-writing.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Writing Documentation"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qdoc-componentset-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Documentation Example"/></db:extendedlink>
<db:abstract>
<db:para>Describes the different types such as How-To's, Tutorials, Overviews, Examples, and Class Documentation.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>There are several types of predefined documentation <db:emphasis>categories</db:emphasis> or <db:emphasis>types</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How-To's</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial</db:para>
</db:listitem>
<db:listitem>
<db:para>Overview</db:para>
</db:listitem>
<db:listitem>
<db:para>Article</db:para>
</db:listitem>
<db:listitem>
<db:para>FAQ (Frequently Asked Questions)</db:para>
</db:listitem>
<db:listitem>
<db:para>C++ API Documentation</db:para>
</db:listitem>
<db:listitem>
<db:para>QML Type Documentation</db:para>
</db:listitem>
<db:listitem>
<db:para>Code Example</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>QDoc has the ability to format a page depending on the type. Further, stylesheets can provide additional control on the display of each category.</db:para>
<db:section xml:id="api-documentation">
<db:title>API Documentation</db:title>
<db:para>QDoc excels in the creation of API documentation given a set of source code and documentation in QDoc comments. Specifically, QDoc is aware of Qt's architecture and can validate the existence of Qt C++ class, function, or property documentation. QDoc gives warnings and errors if it cannot associate a documentation with a code entity or if a code entity does not have documentation.</db:para>
<db:para>In general, every Qt code entity such as properties, classes, methods, signals, and enumerations have a corresponding <db:link xlink:href="qdoc-guide-writing.xml#qdoc-topics">topic command</db:link>. QDoc will associate the documentation to the source using C++ naming rules.</db:para>
<db:para>QDoc will parse the header files (typically <db:code>.h</db:code> files) to build a tree of the class structures. Then QDoc will parse the source files and documentation files to attach documentation to the class structure. Afterwards, QDoc will generate a page for the class.</db:para>
<db:note>
<db:para>QDoc uses the header files to inform itself about the class and will not properly process QDoc comments in header files.</db:para>
</db:note>
<db:section xml:id="language-styles">
<db:title>Language Styles</db:title>
<db:para>To produce quality API documentation, the Qt API references follow a particular language guidelines. While the contents of this page demonstrates how to create API documentation, the style guidelines demonstrate how the reference materials follow a consistent use of language.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwritingstyle-cpp.xml">C++ Documentation Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwritingstyle-qml.xml">QML Documentation Style</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documenting-qml-types">
<db:title>Documenting QML Types</db:title>
<db:para>In the world of <db:link xlink:href="qtquick-index.xml">QML</db:link>, there are additional entities we need to document such as QML signals, attached properties, and QML methods. Internally, they use Qt technologies, however, QML API documentation requires different layout and naming conventions from the Qt C++ API documentation.</db:para>
<db:para>A list of QML related QDoc commands:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlattachedproperty-command">\qmlattachedproperty</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlattachedsignal-command">\qmlattachedsignal</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlbasictype-command">\qmlbasictype</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> - creates a QML type documentation</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlmethod-command">\qmlmethod</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlsignal-command">\qmlsignal</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="18-qdoc-commands-relating.xml#inherits-command">\inherits</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#qmlmodule-command">\qmlmodule</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#inqmlmodule-command">\inqmlmodule</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Remember to enable QML parsing by including the <db:code>*.qml</db:code> filetype in the <db:link xlink:href="qdoc-guide-conf.xml#qdoc-input-output-dir">fileextension</db:link> variable.</db:para>
</db:note>
<db:para>To document a QML type, start by creating a QDoc comment that uses the <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> command as its topic command.</db:para>
<db:section xml:id="qml-parser">
<db:title>QML Parser</db:title>
<db:para>If your QML type is defined in a <db:emphasis>qml</db:emphasis> file, document it there. If your QML type is represented by a C++ class, document it in the <db:emphasis>cpp</db:emphasis> file for that C++ class and include an <db:link xlink:href="13-qdoc-commands-topics.xml#instantiates-command">\instantiates</db:link> command to specify the name of the C++ class. Don't document a QML type in a <db:emphasis>cpp</db:emphasis> file if the QML type is defined in a <db:emphasis>qml</db:emphasis> file.</db:para>
<db:para>When documenting a QML type in a <db:emphasis>qml</db:emphasis> file, place each QDoc comment directly above the entity to which the comment applies. For example, place the QDoc comment containing the <db:emphasis>\qmltype</db:emphasis> command (the topic comment) directly above the outer QML type in the <db:emphasis>qml</db:emphasis> file. Place the comment for documenting a QML property directly above the property declaration, and so on for QML signal handlers and QML methods. Note that when documenting QML properties in a <db:emphasis>qml</db:emphasis> file, you don't normally include the <db:emphasis>\qmlproperty</db:emphasis> command as a topic command (which you must do when documenting QML types in <db:emphasis>cpp</db:emphasis> files), because the QML parser automatically associates each QDoc comment with the next QML declaration it parses. The same is true for QML signal handler and QML method comments. But it is sometimes useful to include one or more <db:emphasis>\qmlproperty</db:emphasis> commands in the comment, e.g. when the property type is another QML type and you want the user to only use certain properties within that other QML type, but not all of them. But when documenting a property that has an alias, place the QDoc comment for it directly above the alias declaration. In these cases, the QDoc comment <db:emphasis>must</db:emphasis> contain a <db:emphasis>\qmlproperty</db:emphasis> command, because that is the only way QDoc can know the type of the aliased property.</db:para>
<db:para>When documenting a QML type in the <db:emphasis>cpp</db:emphasis> file of its corresponding C++ class (if it has one), you normally place each QDoc comment directly above the entity it documents. However, QDoc does not use the QML parser to parse these files (the C++ parser is used), so these QML QDoc comments can appear anywhere in the <db:emphasis>cpp</db:emphasis> file. Note that QML QDoc comments in <db:emphasis>cpp</db:emphasis> files <db:emphasis>must</db:emphasis> use the QML topic commands. i.e., the <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> command <db:emphasis>must</db:emphasis> appear in the QDoc comment for the QML type, and a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> command <db:emphasis>must</db:emphasis> appear in each QML property QDoc comment.</db:para>
</db:section>
<db:section xml:id="qml-modules">
<db:title>QML Modules</db:title>
<db:para>A QML type belongs to a <db:emphasis>module</db:emphasis>. The module may include all the related types for a platform or contain a certain version of <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>. For example, the Qt Quick 2 QML types belong to the Qt Quick 2 module while there is also a Qt Quick 1 module for the older types introduced in Qt 4.</db:para>
<db:para>QML modules allow grouping QML types. The <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> topic command must have an <db:link xlink:href="13-qdoc-commands-topics.xml#inqmlmodule-command">\inqmlmodule</db:link> context command to relate the type to a QML module. Similarly, a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlmodule-command">\qmlmodule</db:link> topic command must exist in a separate <db:code>.qdoc</db:code> file to create the overview page for the module. The overview page will list the QML types of the QML module.</db:para>
<db:para>The links to the QML types must therefore also contain the module name. For example, if a type called <db:code>TabWidget</db:code> is in the <db:code>UIComponents</db:code> module, it must be linked as <db:code>UIComponents::TabWidget</db:code>.</db:para>
<db:para>The <db:link xlink:href="qdoc-componentset-example.xml">UIComponents</db:link> example demonstrates proper usage of QDoc commands to document QML types and QML modules.</db:para>
</db:section>
<db:section xml:id="read-only-and-internal-qml-properties">
<db:title>Read-only and Internal QML Properties</db:title>
<db:para>QDoc detects QML properties that are marked as <db:code>readonly</db:code>. Note that the property must be initialized with a value.</db:para>
<db:programlisting language="cpp">readonly property int sampleReadOnlyProperty: 0
</db:programlisting>
<db:para>For example, the example <db:link xlink:href="qml-uicomponents-tabwidget.xml">TabWidget</db:link> type has a fictitious read-only property <db:code>sampleReadOnlyProperty</db:code>. Its declaration has the <db:code>readonly</db:code> identifier and it has an initial value.</db:para>
<db:para>Properties and signals that are not meant for the public interface may be marked with the <db:link xlink:href="16-qdoc-commands-status.xml#internal-command">\internal</db:link> command. QDoc will not publish the documentation in the generated outputs.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="articles-overviews">
<db:title>Articles &amp; Overviews</db:title>
<db:para>Articles and overviews are a style of writing best used for providing summary detail on a topic or concept. It may introduce a technology or discuss how a concept may be applied, but without discussing exact steps in too much detail. However, this type of content could provide the entry point for readers to find instructional and reference materials that do, such as tutorials, examples and class documentation. An example of an overview might be a product page, such as a top level discussion of Qt Quick, individual modules, design principles, or tools.</db:para>
<db:para>To signify that a document is an article, you append the article keyword to the \page command:</db:para>
<db:programlisting language="cpp">/*!
    \page overview-qt-technology.html overview
    \title Overview of a Qt Technology

    \brief provides a technology never seen before.

*/
</db:programlisting>
<db:para>The <db:link xlink:href="qdoc-guide-writing.xml#writing-topic-commands">writing topic commands</db:link> section has a listing of the available \page command arguments.</db:para>
</db:section>
<db:section xml:id="tutorials-how-to-s-faq-s">
<db:title>Tutorials, How-To's, FAQ's</db:title>
<db:para>Tutorials, How-To's, and FAQ's are all instructional material, in that they instruct or prescribe to the reader. Tutorials are content designed to guide the reader along a progressive learning path for a concept or technology. How-To's and FAQ's (<db:emphasis>Frequently Asked Questions</db:emphasis>) provide guidance by presenting material in the form of answers to commonly asked topics. How-To's and FAQ's are designed for easy reference and are not necessarily presented in a linear progression.</db:para>
<db:para>To create these types, mark the pages by providing a <db:code>type</db:code> argument to the <db:link xlink:href="13-qdoc-commands-topics.xml#page-command">\page</db:link> command. The <db:code>type</db:code> argument is the second argument, with the file name being the first.</db:para>
<db:programlisting language="cpp">/*!
    \page altruism-faq.html faq
    \title Altruism Frequently Asked Questions

    \brief All the questions about altruism, answered.

    ...
*/
</db:programlisting>
<db:para>The <db:link xlink:href="qdoc-guide-writing.xml#writing-topic-commands">writing topic commands</db:link> section has a listing of the available \page command arguments.</db:para>
</db:section>
<db:section xml:id="code-examples">
<db:title>Code Examples</db:title>
<db:para>Examples are an effective way to demonstrate practical usage of a given technology or concept. When it comes to middleware this is usually in the form of an application using simple code and clear explanations of what the code is doing. Any module, API, project, pattern etc. should have at least one good example.</db:para>
<db:para>An example may have an accompanying tutorial. The tutorial instructs and describes the code, while the code example is the code content that users may study. Code examples may have accompanying text that are not in the tutorial.</db:para>
<db:para>QDoc will create a page containing the example code with a description using the <db:link xlink:href="13-qdoc-commands-topics.xml#example-command">\example</db:link> command.</db:para>
<db:programlisting language="cpp">/*!
    \title UI Components: Tab Widget Example
    \example declarative/ui-components/tabwidget

    This example shows how to create a tab widget. It also demonstrates how
    \l {Property aliases}{property aliases} and
    \l {Introduction to the QML Language#Default Properties}{default properties} can be used to collect and
    assemble the child items declared within an \l Item.

    \image qml-tabwidget-example.png
*/
</db:programlisting>
<db:para>QDoc will use the directory specified in the input <db:link xlink:href="qdoc-guide-conf.xml#input-and-output-directories">exampledirs</db:link> variable to find the Qt Project (<db:code>.pro</db:code>) file to generate the example files. The generated HTML will have the filename, <db:code>declarative-ui-components-tabwidget.html</db:code>. QDoc will also list all of the example code.</db:para>
<db:note>
<db:para>The example's project file must be the same as the directory name.</db:para>
</db:note>
</db:section>
</db:article>
