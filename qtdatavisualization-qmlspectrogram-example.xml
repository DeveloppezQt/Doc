<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Spectrogram Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Showing spectrogram graph in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 Spectrogram example demonstrates how to show a polar and cartesian spectrograms and how to utilize orthographic projection to show them in 2D.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlspectrogram-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Spectrogram is simply a surface graph with a range gradient used to emphasize the different values. Typically spectrograms are shown with two dimensional surfaces, which we simulate with a top down orthographic view of the graph. To enforce the 2D effect, we disable the graph rotation via mouse or touch when in the orthographic mode.</db:para>
<db:para>The focus in this example is on showing how to display spectrograms, so the basic functionality is not explained. For more detailed QML example documentation, see <db:link xlink:href="qtdatavisualization-qmlscatter-example.xml">Qt Quick 2 Scatter Example</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-a-spectrogram">
<db:title>Creating a Spectrogram</db:title>
<db:para>To create a 2D spectrogram, we define a <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> item:</db:para>
<db:programlisting language="qml">Surface3D {
    id: surfaceGraph
    width: surfaceView.width
    height: surfaceView.height

    shadowQuality: AbstractGraph3D.ShadowQualityNone
    selectionMode: AbstractGraph3D.SelectionSlice | AbstractGraph3D.SelectionItemAndColumn
    axisX: xAxis
    axisY: yAxis
    axisZ: zAxis

    theme: customTheme
    inputHandler: customInputHandler

    // Remove the perspective and view the graph from top down to achieve 2D effect
    orthoProjection: true
    scene.activeCamera.cameraPreset: Camera3D.CameraPresetDirectlyAbove

    flipHorizontalGrid: true

    radialLabelOffset: 0.01

    horizontalAspectRatio: 1
    scene.activeCamera.zoomLevel: 85

    Surface3DSeries {
        id: surfaceSeries
        flatShadingEnabled: false
        drawMode: Surface3DSeries.DrawSurface
        baseGradient: surfaceGradient
        colorStyle: Theme3D.ColorStyleRangeGradient
        itemLabelFormat: &quot;(@xLabel, @zLabel): @yLabel&quot;

        ItemModelSurfaceDataProxy {
            itemModel: surfaceData.model
            rowRole: &quot;radius&quot;
            columnRole: &quot;angle&quot;
            yPosRole: &quot;value&quot;
        }
    }
}
</db:programlisting>
<db:para>The key properties for enabling the 2D effect are <db:link xlink:href="qml-qtdatavisualization-abstractgraph3d.xml#orthoProjection-prop">orthoProjection</db:link> and <db:link xlink:href="qml-qtdatavisualization-camera3d.xml#cameraPreset-prop">scene.activeCamera.cameraPreset</db:link>. We remove the perspective by enabling orthographic projection for the graph, and then we eliminate the Y-dimension by viewing the graph directly from above:</db:para>
<db:programlisting language="qml">orthoProjection: true
scene.activeCamera.cameraPreset: Camera3D.CameraPresetDirectlyAbove
</db:programlisting>
<db:para>Since this viewpoint causes the horizontal axis grid to be mostly obscured by the surface, we also specify that the horizontal grid should be drawn on top of the graph:</db:para>
<db:programlisting language="qml">flipHorizontalGrid: true
</db:programlisting>
</db:section>
<db:section xml:id="polar-spectrogram">
<db:title>Polar Spectrogram</db:title>
<db:para>Depending on the data, it is sometimes more natural to use a polar graph instead of a cartesian one. Qt Data Visualization supports this via <db:link xlink:href="qml-qtdatavisualization-abstractgraph3d.xml#polar-prop">polar</db:link> property. In this example we provide a button to switch between polar and cartesian modes:</db:para>
<db:programlisting language="qml">Button {
    id: polarToggle
    Layout.fillWidth: true
    Layout.fillHeight: true
    text: &quot;Switch to polar&quot;
    onClicked: {
        if (surfaceGraph.polar === false) {
            surfaceGraph.polar = true
            text = &quot;Switch to cartesian&quot;
        } else {
            surfaceGraph.polar = false
            text = &quot;Switch to polar&quot;
        }
    }
}
</db:programlisting>
<db:para>In the polar mode, the X-axis is converted into the angular polar axis, and the Z-axis is converted into the radial polar axis. The surface points are recalculated according to new axes.</db:para>
<db:para>The radial axis labels are drawn outside the graph by default, but in this example we want to draw them right next to the 0 degree angular axis inside the graph, so we define only a tiny offset for them:</db:para>
<db:programlisting language="qml">radialLabelOffset: 0.01
</db:programlisting>
<db:para>To enforce the 2D effect, graph rotation via user input is disabled when in orthographic mode. We do this by specifying a new input handler:</db:para>
<db:programlisting language="qml">TouchInputHandler3D {
    id: customInputHandler
    rotationEnabled: false
}
Surface3D {
...
inputHandler: customInputHandler
...
</db:programlisting>
<db:para>When the projection mode changes, we adjust the value of the <db:link xlink:href="qml-qtdatavisualization-inputhandler3d.xml#rotationEnabled-prop">rotationEnabled</db:link> property of the <db:code>customInputHandler</db:code> to control the rotation.</db:para>
</db:section>
<db:section xml:id="example-contents">
<db:title>Example Contents</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdatavis3d.git/tree/examples/datavisualization/qmlspectrogram?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
