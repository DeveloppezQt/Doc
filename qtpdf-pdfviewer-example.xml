<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PDF Viewer Widget Example</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A widget-based PDF viewer that allows scrolling through the pages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/pdfviewer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>PDF Viewer</db:emphasis> demonstrates how to use the <db:link xlink:href="qpdfview.xml">QPdfView</db:link> class to render PDF documents and the <db:link xlink:href="qpdfpagenavigator.xml">QPdfPageNavigator</db:link> class to navigate them.</db:para>
<db:para>Qt Creator and the integrated Qt Designer were used to create the example UI and to connect it to the code. This affects the code, which might be somewhat different to what you would typically write by hand. For more information about using Qt Designer, see <db:link xlink:href="qtdesigner-manual.xml">Qt Designer Manual</db:link> and <db:link xlink:href="https://doc.qt.io/qtcreator/creator-writing-program.html">Qt Creator: Creating a Qt Widget Based Application</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>The MainWindow class inherits the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> class:</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = nullptr);
    ~MainWindow();
</db:programlisting>
<db:para>The class declares public and private slots that match the actions of the selectors:</db:para>
<db:programlisting language="cpp">public slots:
    void open(const QUrl &amp;amp;docLocation);

private slots:
    void bookmarkSelected(const QModelIndex &amp;amp;index);
    void pageSelected(int page);
    void searchResultSelected(const QModelIndex &amp;amp;current, const QModelIndex &amp;amp;previous);

    // action handlers
    void on_actionOpen_triggered();
    void on_actionQuit_triggered();
    void on_actionAbout_triggered();
    void on_actionAbout_Qt_triggered();
    void on_actionZoom_In_triggered();
    void on_actionZoom_Out_triggered();
    void on_actionPrevious_Page_triggered();
    void on_actionNext_Page_triggered();
    void on_thumbnailsView_activated(const QModelIndex &amp;amp;index);
    void on_actionContinuous_triggered();
    void on_actionBack_triggered();
    void on_actionForward_triggered();
</db:programlisting>
<db:para>The actual layout of the main window is specified in a <db:code>.ui</db:code> file. The widgets and actions are available at runtime in the <db:code>ui</db:code> member variable.</db:para>
<db:programlisting language="cpp">    void on_actionFindNext_triggered();
    void on_actionFindPrevious_triggered();

private:
    Ui::MainWindow *ui;
</db:programlisting>
<db:para>The <db:code>m_zoomSelector</db:code> variable holds the zoom selector and the <db:code>m_pageSelector</db:code> holds the page selector. The <db:code>m_document</db:code> variable is an instance of the <db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link> class that contains the PDF document.</db:para>
<db:programlisting language="cpp">    ZoomSelector *m_zoomSelector;
    QPdfPageSelector *m_pageSelector;
    QPdfSearchModel *m_searchModel;
    QLineEdit *m_searchField;
    QFileDialog *m_fileDialog = nullptr;

    QPdfDocument *m_document;
};
</db:programlisting>
<db:para>The actual setup of the different objects is done in the MainWindow constructor:</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    , m_zoomSelector(new ZoomSelector(this))
    , m_pageSelector(new QPdfPageSelector(this))
    , m_searchModel(new QPdfSearchModel(this))
    , m_searchField(new QLineEdit(this))
    , m_document(new QPdfDocument(this))
{
</db:programlisting>
<db:para>The constructor first calls <db:code>setupUi()</db:code> to construct most of the main window according to the UI file. The zoom and page selectors need to be added to the toolbar via <db:link xlink:href="qtoolbar.xml#insertWidget">QToolBar::insertWidget</db:link>(), because that cannot be done in a UI file:</db:para>
<db:programlisting language="cpp">    ui-&amp;gt;setupUi(this);

    m_zoomSelector-&amp;gt;setMaximumWidth(150);
    ui-&amp;gt;mainToolBar-&amp;gt;insertWidget(ui-&amp;gt;actionZoom_In, m_zoomSelector);

    ui-&amp;gt;mainToolBar-&amp;gt;insertWidget(ui-&amp;gt;actionForward, m_pageSelector);
</db:programlisting>
<db:para>We connect relevant signals to the page selector spinbox and the browser-style back and forward buttons:</db:para>
<db:programlisting language="cpp">    connect(m_pageSelector, &amp;amp;QPdfPageSelector::currentPageChanged, this, &amp;amp;MainWindow::pageSelected);
    m_pageSelector-&amp;gt;setDocument(m_document);
    auto nav = ui-&amp;gt;pdfView-&amp;gt;pageNavigator();
    connect(nav, &amp;amp;QPdfPageNavigator::currentPageChanged, m_pageSelector, &amp;amp;QPdfPageSelector::setCurrentPage);
    connect(nav, &amp;amp;QPdfPageNavigator::backAvailableChanged, ui-&amp;gt;actionBack, &amp;amp;QAction::setEnabled);
    connect(nav, &amp;amp;QPdfPageNavigator::forwardAvailableChanged, ui-&amp;gt;actionForward, &amp;amp;QAction::setEnabled);
</db:programlisting>
<db:para>We connect the <db:code>zoomModeChanged</db:code> and <db:code>zoomFactor</db:code> changed signals of the PDF view to the functions that reset the zoom selector:</db:para>
<db:programlisting language="cpp">    connect(m_zoomSelector, &amp;amp;ZoomSelector::zoomModeChanged, ui-&amp;gt;pdfView, &amp;amp;QPdfView::setZoomMode);
    connect(m_zoomSelector, &amp;amp;ZoomSelector::zoomFactorChanged, ui-&amp;gt;pdfView, &amp;amp;QPdfView::setZoomFactor);
    m_zoomSelector-&amp;gt;reset();
</db:programlisting>
<db:para>We then load the PDF document to the viewer:</db:para>
<db:programlisting language="cpp">    ...
    ui-&amp;gt;pdfView-&amp;gt;setSearchModel(m_searchModel);
</db:programlisting>
<db:para>Finally, we connect the <db:code>zoomFactorChanged</db:code> signal to the function that sets the value of the zoom selector:</db:para>
<db:programlisting language="cpp">    ui-&amp;gt;searchToolBar-&amp;gt;insertWidget(ui-&amp;gt;actionFindPrevious, m_searchField);
    connect(new QShortcut(QKeySequence::Find, this), &amp;amp;QShortcut::activated, this, [this]() {
        m_searchField-&amp;gt;setFocus(Qt::ShortcutFocusReason);
    });
</db:programlisting>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/pdfviewer?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:section>
</db:article>
