<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth Chat Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing communication through Bluetooth.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtBluetooth module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;chatserver.h&quot;

#include &amp;lt;QtBluetooth/qbluetoothserver.h&amp;gt;
#include &amp;lt;QtBluetooth/qbluetoothsocket.h&amp;gt;

static const QLatin1String serviceUuid(&quot;e8e10f95-1a70-4b27-9ccf-02010264e9c8&quot;);

ChatServer::ChatServer(QObject *parent)
    :   QObject(parent)
{
}

ChatServer::~ChatServer()
{
    stopServer();
}

void ChatServer::startServer(const QBluetoothAddress&amp;amp; localAdapter)
{
    if (rfcommServer)
        return;

    rfcommServer = new QBluetoothServer(QBluetoothServiceInfo::RfcommProtocol, this);
    connect(rfcommServer, &amp;amp;QBluetoothServer::newConnection,
            this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;ChatServer::clientConnected));
    bool result = rfcommServer-&amp;gt;listen(localAdapter);
    if (!result) {
        qWarning() &amp;lt;&amp;lt; &quot;Cannot bind chat server to&quot; &amp;lt;&amp;lt; localAdapter.toString();
        return;
    }

    //serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceRecordHandle, (uint)0x00010010);

    QBluetoothServiceInfo::Sequence profileSequence;
    QBluetoothServiceInfo::Sequence classId;
    classId &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::SerialPort));
    classId &amp;lt;&amp;lt; QVariant::fromValue(quint16(0x100));
    profileSequence.append(QVariant::fromValue(classId));
    serviceInfo.setAttribute(QBluetoothServiceInfo::BluetoothProfileDescriptorList,
                             profileSequence);

    classId.clear();
    classId &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(serviceUuid));
    classId &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::SerialPort));

    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceClassIds, classId);

    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceName, tr(&quot;Bt Chat Server&quot;));
    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceDescription,
                             tr(&quot;Example bluetooth chat server&quot;));
    serviceInfo.setAttribute(QBluetoothServiceInfo::ServiceProvider, tr(&quot;qt-project.org&quot;));

    serviceInfo.setServiceUuid(QBluetoothUuid(serviceUuid));

    QBluetoothServiceInfo::Sequence publicBrowse;
    publicBrowse &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::PublicBrowseGroup));
    serviceInfo.setAttribute(QBluetoothServiceInfo::BrowseGroupList,
                             publicBrowse);

    QBluetoothServiceInfo::Sequence protocolDescriptorList;
    QBluetoothServiceInfo::Sequence protocol;
    protocol &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::L2cap));
    protocolDescriptorList.append(QVariant::fromValue(protocol));
    protocol.clear();
    protocol &amp;lt;&amp;lt; QVariant::fromValue(QBluetoothUuid(QBluetoothUuid::Rfcomm))
             &amp;lt;&amp;lt; QVariant::fromValue(quint8(rfcommServer-&amp;gt;serverPort()));
    protocolDescriptorList.append(QVariant::fromValue(protocol));
    serviceInfo.setAttribute(QBluetoothServiceInfo::ProtocolDescriptorList,
                             protocolDescriptorList);

    serviceInfo.registerService(localAdapter);
}

void ChatServer::stopServer()
{
    // Unregister service
    serviceInfo.unregisterService();

    // Close sockets
    qDeleteAll(clientSockets);

    // Close server
    delete rfcommServer;
    rfcommServer = nullptr;
}

void ChatServer::sendMessage(const QString &amp;amp;message)
{
    QByteArray text = message.toUtf8() + '\n';

    for (QBluetoothSocket *socket : qAsConst(clientSockets))
        socket-&amp;gt;write(text);
}

void ChatServer::clientConnected()
{
    QBluetoothSocket *socket = rfcommServer-&amp;gt;nextPendingConnection();
    if (!socket)
        return;

    connect(socket, &amp;amp;QBluetoothSocket::readyRead, this, &amp;amp;ChatServer::readSocket);
    connect(socket, &amp;amp;QBluetoothSocket::disconnected, this, QOverload&amp;lt;&amp;gt;::of(&amp;amp;ChatServer::clientDisconnected));
    clientSockets.append(socket);
    emit clientConnected(socket-&amp;gt;peerName());
}

void ChatServer::clientDisconnected()
{
    QBluetoothSocket *socket = qobject_cast&amp;lt;QBluetoothSocket *&amp;gt;(sender());
    if (!socket)
        return;

    emit clientDisconnected(socket-&amp;gt;peerName());

    clientSockets.removeOne(socket);

    socket-&amp;gt;deleteLater();
}

void ChatServer::readSocket()
{
    QBluetoothSocket *socket = qobject_cast&amp;lt;QBluetoothSocket *&amp;gt;(sender());
    if (!socket)
        return;

    while (socket-&amp;gt;canReadLine()) {
        QByteArray line = socket-&amp;gt;readLine().trimmed();
        emit messageReceived(socket-&amp;gt;peerName(),
                             QString::fromUtf8(line.constData(), line.length()));
    }
}

</db:programlisting>
</db:article>
