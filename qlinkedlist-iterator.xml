<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QLinkedList::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;::iterator allows you to iterate over a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt; and to modify the list item associated with the iterator. If you want to iterate over a const <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>, use <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> on a non-const <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as well, unless you need to change the <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a function like QLinkedList::begin(), QLinkedList::end(), or QLinkedList::insert() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
list.append(&quot;January&quot;);
list.append(&quot;February&quot;);
...
list.append(&quot;December&quot;);

QLinkedList&lt;QString&gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
</db:programlisting>
<db:para>STL-style iterators can be used as arguments to <db:link xlink:href="">generic algorithms</db:link>. For example, here's how to find an item in the list using the qFind() algorithm:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
...
QLinkedList&lt;QString&gt;::iterator it = qFind(list.begin(),
                                          list.end(), &quot;Joel&quot;);
if (it != list.end())
    cout &lt;&lt; &quot;Found Joel&quot; &lt;&lt; endl;
</db:programlisting>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link> that we cannot do with a <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link>. Here's an example that increments every value stored in a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;int&gt; by 2:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;int&gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    *i += 2;
</db:programlisting>
<db:para>Here's an example that removes all the items that start with an underscore character in a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
...
QLinkedList&lt;QString&gt;::iterator i = list.begin();
while (i != list.end()) {
    if ((*i).startsWith(&quot;_&quot;))
        i = list.erase(i);
    else
        ++i;
}
</db:programlisting>
<db:para>The call to QLinkedList::erase() removes the item pointed to by the iterator from the list, and returns an iterator to the next item. Here's another way of removing an item while iterating:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt;::iterator i = list.begin();
while (i != list.end()) {
    QLinkedList&lt;QString&gt;::iterator previous = i;
    ++i;
    if ((*previous).startsWith(&quot;_&quot;))
        list.erase(previous);
}
</db:programlisting>
<db:para>It might be tempting to write code like this:</db:para>
<db:programlisting language="cpp">// WRONG
while (i != list.end()) {
    if ((*i).startsWith(&quot;_&quot;))
        list.erase(i);
    ++i;
}
</db:programlisting>
<db:para>However, this will potentially crash in ++i, because i is a dangling iterator after the call to erase().</db:para>
<db:para>Multiple iterators can be used on the same list. If you add items to the list, existing iterators will remain valid. If you remove items from the list, iterators that point to the removed items will become dangling iterators. However, because of how <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link> works, you must not take a copy of a container while iterators are active on that container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablelinkedlistiterator.xml">QMutableLinkedListIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
