<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsTransform Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> class is an abstract base class for building advanced transformations on QGraphicsItems.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsTransform</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsrotation.xml" xlink:role="class">QGraphicsRotation</db:link> and <db:link xlink:href="qgraphicsscale.xml" xlink:role="class">QGraphicsScale</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsTransform is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>As an alternative to <db:link xlink:href="qgraphicsitem.xml#transform">QGraphicsItem::transform</db:link>, <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> lets you create and control advanced transformations that can be configured independently using specialized properties.</db:para>
<db:para><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> allows you to assign any number of <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> instances to one <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>. Each <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> is applied in order, one at a time, to the <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> it's assigned to.</db:para>
<db:para><db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> is particularly useful for animations. Whereas <db:link xlink:href="qgraphicsitem.xml#setTransform">QGraphicsItem::setTransform</db:link>() lets you assign any transform directly to an item, there is no direct way to interpolate between two different transformations (e.g., when transitioning between two states, each for which the item has a different arbitrary transform assigned). Using <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> you can interpolate the property values of each independent transformation. The resulting operation is then combined into a single transform which is applied to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>.</db:para>
<db:para>Transformations are computed in true 3D space using <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>. When the transformation is applied to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, it will be projected back to a 2D <db:link xlink:href="qtransform.xml">QTransform</db:link>. When multiple <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> objects are applied to a <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>, all of the transformations are computed in true 3D space, with the projection back to 2D only occurring after the last <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> is applied. The exception to this is <db:link xlink:href="qgraphicsrotation.xml">QGraphicsRotation</db:link>, which projects back to 2D after each rotation to preserve the perspective effect around the X and Y axes.</db:para>
<db:para>If you want to create your own configurable transformation, you can create a subclass of <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> (or any or the existing subclasses), and reimplement the pure virtual <db:link xlink:href="qgraphicstransform.xml#applyTo">applyTo</db:link>() function, which takes a pointer to a <db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>. Each operation you would like to apply should be exposed as properties (e.g., customTransform-&gt;setVerticalShear(2.5)). Inside you reimplementation of <db:link xlink:href="qgraphicstransform.xml#applyTo">applyTo</db:link>(), you can modify the provided transform respectively.</db:para>
<db:para><db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> can be used together with <db:link xlink:href="qgraphicsitem.xml#setTransform">QGraphicsItem::setTransform</db:link>(), <db:link xlink:href="qgraphicsitem.xml#setRotation">QGraphicsItem::setRotation</db:link>(), and <db:link xlink:href="qgraphicsitem.xml#setScale">QGraphicsItem::setScale</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">QGraphicsItem::transform</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsscale.xml">QGraphicsScale</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrotation.xml">QGraphicsRotation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsTransform">
<db:title>QGraphicsTransform::QGraphicsTransform(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsTransform</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsTransform(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qgraphicstransform.xml">QGraphicsTransform</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsTransform">
<db:title>[virtual] QGraphicsTransform::~QGraphicsTransform()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsTransform</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsTransform()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the graphics transform.</db:para>
</db:section>
<db:section xml:id="applyTo">
<db:title>[pure virtual] void QGraphicsTransform::applyTo(QMatrix4x4 *<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>applyTo</db:methodname>
<db:methodparam>
<db:type>QMatrix4x4 *</db:type>
<db:parameter>matrix</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void applyTo(QMatrix4x4 *matrix) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This pure virtual method has to be reimplemented in derived classes.</db:para>
<db:para>It applies this transformation to <db:code role="parameter">matrix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsitem.xml#transform">QGraphicsItem::transform</db:link>()</db:member>
<db:member><db:link xlink:href="qmatrix4x4.xml#toTransform">QMatrix4x4::toTransform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="update">
<db:title>[protected] void QGraphicsTransform::update()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Notifies that this transform operation has changed its parameters in such a way that <db:link xlink:href="qgraphicstransform.xml#applyTo">applyTo</db:link>() will return a different result than before.</db:para>
<db:para>When implementing you own custom graphics transform, you must call this function every time you change a parameter, to let <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> know that its transformation needs to be updated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicstransform.xml#applyTo">applyTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
