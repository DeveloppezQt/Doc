<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt QML</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt QML to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt QML, and provide guidance to handle them.</db:para>
<db:section xml:id="qml-language">
<db:title>QML language</db:title>
<db:section xml:id="url-resolution">
<db:title>URL resolution</db:title>
<db:para>In Qt 5, relative urls were often, albeit inconsistently, directly resolved, especially when assigned to an url property. In Qt 6 this is no longer the case.</db:para>
<db:para>If you had a QML file stored under &quot;/home/qml/example.qml&quot;, and &quot;example.qml&quot; contained</db:para>
<db:programlisting language="cpp">property url imageFolder: &quot;./images&quot;
</db:programlisting>
<db:para>then the url property would store the URL &quot;/home/qml/images&quot;. This made it impossible to use relative URLs in QML in this way, so in Qt 6, the URL stays relative, and only gets resolved when this is required (e.g. when it is used as the source of an Image component). If you depend on the old behavior, you can use Qt.resolvedUrl</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">property url imageFolder: &quot;./images&quot;
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">property url imageFolder: Qt.resolvedUrl(&quot;./images&quot;)
</db:programlisting>
<db:para>Qt.resolvedUrl can be used in both Qt 5 and 6.</db:para>
</db:section>
<db:section xml:id="variant-properties">
<db:title>Variant Properties</db:title>
<db:para>variant properties, which have been marked as obsolete since Qt 5, are now treated in exactly the same way as var properties. Code that relied on implicit string conversion triggered on assignment to variant properties should be updated to explicitly create an object of the correct type.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">property variant myColor: &quot;red&quot;
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">property variant myColor: Qt.color(&quot;red&quot;)
</db:programlisting>
<db:para>Implicit conversions were done for strings that could be parsed as</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>color (use Qt.color instead instead),</db:para>
</db:listitem>
<db:listitem>
<db:para>date (use the Date object instead),</db:para>
</db:listitem>
<db:listitem>
<db:para>rect (use Qt.rect instead) and</db:para>
</db:listitem>
<db:listitem>
<db:para>size (use Qt.size instead)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>variant still remains a deprecated keyword in Qt 6, though new code is strongly encouraged to use var properties instead.</db:para>
<db:note>
<db:para>If the type of the property is known not to change, use a property of the concrete type, instead of a var property.</db:para>
</db:note>
<db:note>
<db:para>These conversions were also applied to QVariant properties of classes registered with the engine. As with variant properties, code that relied on implicit string conversions need to use the corresponding functions of the Qt object.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="source-incompatible-api-changes">
<db:title>Source Incompatible API Changes</db:title>
<db:section xml:id="changed-api">
<db:title>Changed API</db:title>
<db:para>QQmlListProperty's CountFunction and AtFunction have been changed to use qsizetype instead of int to align with the corresponding changes in Qt's containers.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">int myCountFunction(QQmlListProperty&amp;lt;MyType&amp;gt; *);
MyType *myAtFunction(QQmlListProperty&amp;lt;MyType&amp;gt; *, int);

QQmlListProperty&amp;lt;MyType&amp;gt; myReadOnlyList(containingObject, container, &amp;amp;myCountFunction,
                                        &amp;amp;myAtFunction);
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">qsizetype myCountFunction(QQmlListProperty&amp;lt;MyType&amp;gt; *);
MyType *myAtFunction(QQmlListProperty&amp;lt;MyType&amp;gt; *, qsizetype);

QQmlListProperty&amp;lt;MyType&amp;gt; myReadOnlyList(containingObject, container, &amp;amp;myCountFunction,
                                        &amp;amp;myAtFunction);
</db:programlisting>
<db:para>Code which needs to supports both Qt 5 and Qt 6 can either use a typedef which is int in Qt 5 and qsizetype in Qt 6, or use QList::size_type, which already is such a type alias.</db:para>
</db:section>
<db:section xml:id="removed-api">
<db:title>Removed API</db:title>
<db:para>Various deprecated functions have been removed.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> constructor taking a reference has been removed.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">QQmlListProperty&amp;lt;QObject&amp;gt;(owner, owner-&amp;gt;objectList);
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">QQmlListProperty&amp;lt;QObject&amp;gt;(owner, &amp;amp;owner-&amp;gt;objectList);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The functions qmlDebug, qmlInfo, qmlWarning, qmlContext and qmlEngine used to exist both in the global namespace (or Qt namespace in namespaced builds), and in the QtQml namespace. These functions now exist only in the global namespace.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">QQmlEngine *engine = QtQml::qmlEngine(qmlObject);
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">QQmlEngine *engine = qmlEngine(qmlObject);
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The qmlRegisterType overload taking no arguments has been removed. Use qmlRegisterAnonymousType instead, or switch to declarative type registration with QML_ANONYMOUS.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">class AnonymousType : public QObject {
  // ...
};

qmlRegisterType&amp;lt;AnonymousType&amp;gt;();
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">class AnonymousType : public QObject {
  // ...
};

qmlRegisterAnonymousType&amp;lt;AnonymousType&amp;gt;(&quot;MyModule&quot;, 1);
</db:programlisting>
<db:para>Or alternatively</db:para>
<db:programlisting language="cpp">class AnonymousType : public QObject {
    QML_ANONYMOUS
    // ...
};
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The overloads of qmlRegisterExtendedType and qmlRegisterInterface which take no version argument have been removed. Use the overloads providing a version, or switch to declarative type registration with <db:link xlink:href="qqmlengine.xml#QML_EXTENDED">QML_EXTENDED</db:link> and <db:link xlink:href="qqmlengine.xml#QML_INTERFACE">QML_INTERFACE</db:link>.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">struct GreetInterface
{
   virtual ~GreetInterface();
   virtual void greet();
};
Q_DECLARE_INTERFACE(GreetInterface, &quot;org.hi.GreetInterface&quot;)

qmlRegisterInterface&amp;lt;GreetInterface&amp;gt;(&quot;Greeter&quot;);
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">struct GreetInterface
{
   virtual ~GreetInterface();
   virtual void greet();
};
Q_DECLARE_INTERFACE(GreetInterface, &quot;org.hi.GreetInterface&quot;)

qmlRegisterInterface&amp;lt;GreetInterface&amp;gt;(&quot;Greeter&quot;, 1);
</db:programlisting>
<db:para>Alternatively</db:para>
<db:programlisting language="cpp">struct GreetInterface
{
   QML_INTERFACE(Greeter)
   virtual ~GreetInterface();
   virtual void greet();
};
Q_DECLARE_INTERFACE(GreetInterface, &quot;org.hi.GreetInterface&quot;)
</db:programlisting>
<db:note>
<db:para>In new code, declarative type registration should be preferred.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>The function QJSValue::engine has been removed. If access to the engine is required, a reference to it must be stored instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>qmlAttachedPropertiesObjectById and qmlAttachedPropertiesObject(int *, const QObject *, const QMetaObject *, bool) have been removed. Use the qmlAttachedPropertiesObject(QObject *, QQmlAttachedPropertiesFunc, bool) overload of qmlAttachedPropertiesObject instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>QJSEngine::installTranslatorFunctions has been removed. QJSEngine::installExtensions is available as a replacement.</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">QJSEngine engine;
engine.installTranslatorFunctions();
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">QJSEngine engine;
engine.installExtensions(QJSEngine::TranslationExtension);
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
