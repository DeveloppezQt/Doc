<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Custom Sort/Filter Model Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Custom Sort/Filter Model example illustrates how to subclass QSortFilterProxyModel to perform advanced sorting and filtering.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;filterwidget.h&quot;

#include &lt;QIcon&gt;
#include &lt;QPixmap&gt;
#include &lt;QImage&gt;
#include &lt;QMenu&gt;
#include &lt;QAction&gt;
#include &lt;QActionGroup&gt;
#include &lt;QToolButton&gt;
#include &lt;QWidgetAction&gt;
#include &lt;QDebug&gt;

FilterWidget::FilterWidget(QWidget *parent)
    : QLineEdit(parent)
    , m_patternGroup(new QActionGroup(this))
{
    setClearButtonEnabled(true);
    connect(this, SIGNAL(textChanged(QString)), this, SIGNAL(filterChanged()));

    QMenu *menu = new QMenu(this);
    m_caseSensitivityAction = menu-&gt;addAction(tr(&quot;Case Sensitive&quot;));
    m_caseSensitivityAction-&gt;setCheckable(true);
    connect(m_caseSensitivityAction, SIGNAL(toggled(bool)), this, SIGNAL(filterChanged()));

    menu-&gt;addSeparator();
    m_patternGroup-&gt;setExclusive(true);
    QAction *patternAction = menu-&gt;addAction(&quot;Fixed String&quot;);
    patternAction-&gt;setData(QVariant(int(QRegExp::FixedString)));
    patternAction-&gt;setCheckable(true);
    patternAction-&gt;setChecked(true);
    m_patternGroup-&gt;addAction(patternAction);
    patternAction = menu-&gt;addAction(&quot;Regular Expression&quot;);
    patternAction-&gt;setCheckable(true);
    patternAction-&gt;setData(QVariant(int(QRegExp::RegExp2)));
    m_patternGroup-&gt;addAction(patternAction);
    patternAction = menu-&gt;addAction(&quot;Wildcard&quot;);
    patternAction-&gt;setCheckable(true);
    patternAction-&gt;setData(QVariant(int(QRegExp::Wildcard)));
    m_patternGroup-&gt;addAction(patternAction);
    connect(m_patternGroup, SIGNAL(triggered(QAction*)), this, SIGNAL(filterChanged()));

    const QIcon icon = QIcon(QPixmap(&quot;:/images/find.png&quot;));
    QToolButton *optionsButton = new QToolButton;
    optionsButton-&gt;setCursor(Qt::ArrowCursor);
    optionsButton-&gt;setFocusPolicy(Qt::NoFocus);
    optionsButton-&gt;setStyleSheet(&quot;* { border: none; }&quot;);
    optionsButton-&gt;setIcon(icon);
    optionsButton-&gt;setMenu(menu);
    optionsButton-&gt;setPopupMode(QToolButton::InstantPopup);

    QWidgetAction *optionsAction = new QWidgetAction(this);
    optionsAction-&gt;setDefaultWidget(optionsButton);
    addAction(optionsAction, QLineEdit::LeadingPosition);
}

Qt::CaseSensitivity FilterWidget::caseSensitivity() const
{
    return m_caseSensitivityAction-&gt;isChecked() ? Qt::CaseSensitive : Qt::CaseInsensitive;
}

void FilterWidget::setCaseSensitivity(Qt::CaseSensitivity cs)
{
    m_caseSensitivityAction-&gt;setChecked(cs == Qt::CaseSensitive);
}

static inline QRegExp::PatternSyntax patternSyntaxFromAction(const QAction *a)
{
    return static_cast&lt;QRegExp::PatternSyntax&gt;(a-&gt;data().toInt());
}

QRegExp::PatternSyntax FilterWidget::patternSyntax() const
{
    return patternSyntaxFromAction(m_patternGroup-&gt;checkedAction());
}

void FilterWidget::setPatternSyntax(QRegExp::PatternSyntax s)
{
    foreach (QAction *a, m_patternGroup-&gt;actions()) {
        if (patternSyntaxFromAction(a) == s) {
            a-&gt;setChecked(true);
            break;
        }
    }
}

</db:programlisting>
</db:article>
