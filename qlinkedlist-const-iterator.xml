<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>const_iterator Class</db:title>
<db:subtitle>QLinkedList::const_iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;::const_iterator allows you to iterate over a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;. If you want modify the <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as you iterate over it, you must use <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> on a non-const <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as well, unless you need to change the <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a function like QLinkedList::constBegin(), QLinkedList::constEnd(), or QLinkedList::insert() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
list.append(&quot;January&quot;);
list.append(&quot;February&quot;);
...
list.append(&quot;December&quot;);

QLinkedList&lt;QString&gt;::const_iterator i;
for (i = list.constBegin(); i != list.constEnd(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
</db:programlisting>
<db:para>STL-style iterators can be used as arguments to <db:link xlink:href="">generic algorithms</db:link>. For example, here's how to find an item in the list using the qFind() algorithm:</db:para>
<db:programlisting language="cpp">QLinkedList&lt;QString&gt; list;
...
QLinkedList&lt;QString&gt;::iterator it = qFind(list.constBegin(),
                                          list.constEnd(), &quot;Joel&quot;);
if (it != list.constEnd())
    cout &lt;&lt; &quot;Found Joel&quot; &lt;&lt; endl;
</db:programlisting>
<db:para>Multiple iterators can be used on the same list. If you add items to the list, existing iterators will remain valid. If you remove items from the list, iterators that point to the removed items will become dangling iterators.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
