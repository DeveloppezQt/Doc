<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>const_iterator Class</db:title>
<db:subtitle>QLinkedList::const_iterator</db:subtitle>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> class provides an STL-style const iterator for <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>const_iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> features both <db:link xlink:href="">STL-style iterators</db:link> and <db:link xlink:href="">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;::const_iterator allows you to iterate over a <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;. If you want modify the <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as you iterate over it, you must use <db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> on a non-const <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> as well, unless you need to change the <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qlinkedlist-const-iterator.xml">QLinkedList::const_iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a function like <db:link xlink:href="qlinkedlist.xml#constBegin">QLinkedList::constBegin</db:link>(), <db:link xlink:href="qlinkedlist.xml#constEnd">QLinkedList::constEnd</db:link>(), or <db:link xlink:href="qlinkedlist.xml#insert">QLinkedList::insert</db:link>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</db:para>
<db:programlisting language="cpp">QLinkedList&amp;lt;QString&amp;gt; list;
list.append(&quot;January&quot;);
list.append(&quot;February&quot;);
...
list.append(&quot;December&quot;);

QLinkedList&amp;lt;QString&amp;gt;::const_iterator i;
for (i = list.constBegin(); i != list.constEnd(); ++i)
    cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>STL-style iterators can be used as arguments to <db:link xlink:href="">generic algorithms</db:link>. For example, here's how to find an item in the list:</db:para>
<db:programlisting language="cpp">QLinkedList&amp;lt;QString&amp;gt; list;
...
QLinkedList&amp;lt;QString&amp;gt;::const_iterator it = std::find(list.constBegin(),
                                                    list.constEnd(), &quot;Joel&quot;);
if (it != list.constEnd())
    cout &amp;lt;&amp;lt; &quot;Found Joel&quot; &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>Multiple iterators can be used on the same list. If you add items to the list, existing iterators will remain valid. If you remove items from the list, iterators that point to the removed items will become dangling iterators.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-iterator.xml">QLinkedList::iterator</db:link></db:member>
<db:member><db:link xlink:href="qlinkedlistiterator.xml">QLinkedListIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="const_iterator">
<db:title>const_iterator::const_iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>const_iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist.xml#constBegin">QLinkedList::constBegin</db:link>()</db:member>
<db:member><db:link xlink:href="qlinkedlist.xml#constEnd">QLinkedList::constEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_iterator-2">
<db:title>const_iterator::const_iterator(iterator <db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>const_iterator</db:methodname>
<db:methodparam>
<db:type>iterator</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator(iterator other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool const_iterator::operator!=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const const_iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const const_iterator &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>const T &amp;const_iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator--gt">operator-&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>const_iterator const_iterator::operator+(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const_iterator</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator operator+(int j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>const_iterator &amp;const_iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>const_iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (<db:code>++it</db:code>) advances the iterator to the next item in the list and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link>&lt;T&gt;::constEnd() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>const_iterator const_iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const_iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (<db:code>it++</db:code>) advances the iterator to the next item in the list and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>const_iterator &amp;const_iterator::operator+=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const_iterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator &amp; operator+=(int j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>const_iterator const_iterator::operator-(int <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const_iterator</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator operator-(int j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>const_iterator &amp;const_iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>const_iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator (<db:code>--it</db:code>) makes the preceding item current and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qlinkedlist.xml#begin">QLinkedList::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>const_iterator const_iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const_iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator (<db:code>it--</db:code>) makes the preceding item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>const_iterator &amp;const_iterator::operator-=(int <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const_iterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const_iterator &amp; operator-=(int j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:para>This operation can be slow for large <db:code role="parameter">j</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>const T *const_iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool const_iterator::operator==(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const const_iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const const_iterator &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinkedlist-const-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
