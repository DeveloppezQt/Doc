<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PlaceSearchModel QML Type</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to place search results.</db:para>
<db:para>This type was introduced in Qt Location 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtLocation 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt Location 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>PlaceSearchModel is part of <db:simplelist><db:member>qml-QtLocation5-places</db:member><db:member>qml-QtLocation5-places-models</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> provides a model of place search results within the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link>. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchTerm-prop">searchTerm</db:link> and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#categories-prop">categories</db:link> properties can be set to restrict the search results to places matching those criteria.</db:para>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> returns both sponsored and <db:link xlink:href="http://en.wikipedia.org/wiki/Organic_search">organic search results</db:link>. Sponsored search results will have the <db:code>sponsored</db:code> role set to true.</db:para>
<db:anchor xml:id="placesearchmodel-roles"/>
<db:para>The model returns data for the following roles:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Role</db:para>
</db:th>
<db:th>
<db:para>Type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>type</db:para>
</db:td>
<db:td>
<db:para>enum</db:para>
</db:td>
<db:td>
<db:para>The type of search result.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>title</db:para>
</db:td>
<db:td>
<db:para>string</db:para>
</db:td>
<db:td>
<db:para>A string describing the search result.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>icon</db:para>
</db:td>
<db:td>
<db:para>PlaceIcon</db:para>
</db:td>
<db:td>
<db:para>Icon representing the search result.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>distance</db:para>
</db:td>
<db:td>
<db:para>real</db:para>
</db:td>
<db:td>
<db:para>Valid only when the <db:code>type</db:code> role is <db:code>PlaceResult</db:code>, the distance to the place from the center of the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link>. If no <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link> has been specified, the distance is NaN.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>place</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-place.xml">Place</db:link></db:para>
</db:td>
<db:td>
<db:para>Valid only when the <db:code>type</db:code> role is <db:code>PlaceResult</db:code>, an object representing the place.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>sponsored</db:para>
</db:td>
<db:td>
<db:para>bool</db:para>
</db:td>
<db:td>
<db:para>Valid only when the <db:code>type</db:code> role is <db:code>PlaceResult</db:code>, true if the search result is a sponsored result.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="search-result-types">
<db:title>Search Result Types</db:title>
<db:para>The <db:code>type</db:code> role can take on the following values:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.UnknownSearchResult</db:para>
</db:td>
<db:td>
<db:para>The contents of the search result are unknown.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.PlaceResult</db:para>
</db:td>
<db:td>
<db:para>The search result contains a place.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.ProposedSearchResult</db:para>
</db:td>
<db:td>
<db:para>The search result contains a proposed search which may be relevant.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>It can often be helpful to use a <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> to create a delegate that will choose different <db:link xlink:href="qml-qtqml-component.xml">Component</db:link>s based on the search result type.</db:para>
<db:programlisting language="qml">Component {
    id: resultDelegate
    Loader {
        Component {
            id: placeResult

            Column {
                Text { text: title }
                Text { text: place.location.address.text }
            }
        }

        Component {
            id: otherResult
            Text { text: title }
        }

        sourceComponent: type == PlaceSearchModel.PlaceResult ? placeResult :
                                                                otherResult
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="detection-of-updated-and-removed-places">
<db:title>Detection of Updated and Removed Places</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> listens for places that have been updated or removed from its plugin's backend. If it detects that a place has been updated and that place is currently present in the model, then it will call <db:link xlink:href="qml-qtlocation-place.xml#getDetails-method">Place::getDetails</db:link> to refresh the details. If it detects that a place has been removed, then correspondingly the place will be removed from the model if it is currently present.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:para>The following example shows how to use the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> to search for Pizza restaurants in close proximity of a given position. A <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchTerm-prop">searchTerm</db:link> and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link> are provided to the model and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() is used to perform a lookup query. Note that the model does not incrementally fetch search results, but rather performs a single fetch when <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>() is run. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#count-prop">count</db:link> is set to the number of search results returned during the fetch.</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtPositioning 5.5
import QtLocation 5.6

PlaceSearchModel {
    id: searchModel

    plugin: myPlugin

    searchTerm: &quot;pizza&quot;
    searchArea: QtPositioning.circle(startCoordinate);

    Component.onCompleted: update()

}
</db:programlisting>
</db:section>
<db:section xml:id="paging">
<db:title>Paging</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link> API has some limited support for paging. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#nextPage-method">nextPage</db:link>() and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#previousPage-method">previousPage</db:link>() functions as well as the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#limit-prop">limit</db:link> property can be used to access paged search results. When the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#limit-prop">limit</db:link> property is set the search result page contains at most <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#limit-prop">limit</db:link> entries (of type place result). For example, if the backend has 5 search results in total [a,b,c,d,e], and assuming the first page is shown and limit of 3 has been set then a,b,c is returned. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#nextPage-method">nextPage</db:link>() would return d,e. The <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#nextPagesAvailable-prop">nextPagesAvailable</db:link> and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#previousPagesAvailable-prop">previousPagesAvailable</db:link> properties can be used to check for further pages. At the moment the API does not support the means to retrieve the total number of items available from the backed. Note that support for <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#nextPage-method">nextPage</db:link>(), <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#previousPage-method">previousPage</db:link>() and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#limit-prop">limit</db:link> can vary according to the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#plugin-prop">plugin</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-categorymodel.xml">CategoryModel</db:link></db:member>
<db:member><db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="categories-prop">
<db:title>[read-only] categories : list&lt;Category&gt;</db:title>
<db:para>This property holds a list of categories to be used when searching. Returned search results will be for places that match at least one of the categories.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only] count : int</db:title>
<db:para>This property holds the number of results the model has.</db:para>
<db:para>Note that it does not refer to the total number of search results available in the backend. The total number of search results is not currently supported by the API.</db:para>
</db:section>
<db:section xml:id="favoritesMatchParameters-prop">
<db:title>favoritesMatchParameters : VariantMap</db:title>
<db:para>This property holds a set of parameters used to specify how search result places are matched to favorites in the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#favoritesPlugin-prop">favoritesPlugin</db:link>.</db:para>
<db:para>By default the parameter map is empty and implies that the favorites plugin matches by <db:link xlink:href="location-places-backend.xml#alternative-identifier-cross-referencing">alternative identifiers</db:link>. Generally, an application developer will not need to set this property.</db:para>
<db:para>In cases where the favorites plugin does not support matching by alternative identifiers, then the <db:link xlink:href="qtlocation-index.xml#plugin-references-and-parameters">plugin documentation</db:link> should be consulted to see precisely what key-value parameters to set.</db:para>
</db:section>
<db:section xml:id="favoritesPlugin-prop">
<db:title>favoritesPlugin : Plugin</db:title>
<db:para>This property holds the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> which will be used to search for favorites. Any places from the search which can be cross-referenced or matched in the favoritesPlugin will have their <db:link xlink:href="qml-qtlocation-place.xml#favorite-prop">favorite</db:link> property set to the corresponding <db:link xlink:href="qml-qtlocation-place.xml">Place</db:link> from the favoritesPlugin.</db:para>
<db:para>If the favoritesPlugin is not set, the <db:link xlink:href="qml-qtlocation-place.xml#favorite-prop">favorite</db:link> property of the places in the results will always be null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-place.xml#favorites">Favorites</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="limit-prop">
<db:title>limit : int</db:title>
<db:para>This property holds the limit of the number of items that will be returned.</db:para>
</db:section>
<db:section xml:id="nextPagesAvailable-prop">
<db:title>[read-only] nextPagesAvailable : bool</db:title>
<db:para>This property holds whether there is one or more additional pages of search results available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#nextPage-method">nextPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="plugin-prop">
<db:title>plugin : Plugin</db:title>
<db:para>This property holds the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> which will be used to perform the search.</db:para>
</db:section>
<db:section xml:id="previousPagesAvailable-prop">
<db:title>[read-only] previousPagesAvailable : bool</db:title>
<db:para>This property holds whether there is one or more previous pages of search results available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#previousPage-method">previousPage</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recommendationId-prop">
<db:title>recommendationId : string</db:title>
<db:para>This property holds the placeId to be used in order to find recommendations for similar places.</db:para>
</db:section>
<db:section xml:id="relevanceHint-prop">
<db:title>relevanceHint : enumeration</db:title>
<db:para>This property holds a relevance hint used in the search query. The hint is given to the provider to help but not dictate the ranking of results. For example, the distance hint may give closer places a higher ranking but it does not necessarily mean the results will be strictly ordered according to distance. A provider may ignore the hint altogether.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>SearchResultModel.UnspecifiedHint</db:para>
</db:td>
<db:td>
<db:para>No relevance hint is given to the provider.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SearchResultModel.DistanceHint</db:para>
</db:td>
<db:td>
<db:para>The distance of the place from the user's current location is important to the user. This hint is only meaningful when a circular search area is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>SearchResultModel.LexicalPlaceNameHint</db:para>
</db:td>
<db:td>
<db:para>The lexical ordering of place names (in ascending alphabetical order) is relevant to the user. This hint is useful for providers based on a local data store.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="searchArea-prop">
<db:title>searchArea : variant</db:title>
<db:para>This property holds the search area. The search result returned by the model will be within the search area.</db:para>
<db:para>If this property is set to a <db:link xlink:href="qml-geocircle.xml">geocircle</db:link> its <db:link xlink:href="qml-geocircle.xml">radius</db:link> property may be left unset, in which case the <db:link xlink:href="qml-qtlocation-plugin.xml">Plugin</db:link> will choose an appropriate radius for the search.</db:para>
<db:para>Support for specifying a search area can vary according to the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#plugin-prop">plugin</db:link> backend implementation. For example, some may support a search center only while others may only support geo rectangles.</db:para>
</db:section>
<db:section xml:id="searchTerm-prop">
<db:title>searchTerm : string</db:title>
<db:para>This property holds search term used in query. The search term is a free-form text string.</db:para>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : enum</db:title>
<db:para>This property holds the status of the model. It can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Null</db:para>
</db:td>
<db:td>
<db:para>No search query has been executed. The model is empty.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Ready</db:para>
</db:td>
<db:td>
<db:para>The search query has completed, and the results are available.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Loading</db:para>
</db:td>
<db:td>
<db:para>A search query is currently being executed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Error</db:para>
</db:td>
<db:td>
<db:para>An error occurred when executing the previous search query.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="visibilityScope-prop">
<db:title>visibilityScope : enum</db:title>
<db:para>This property holds the visibility scope of the places to search. Only places with the specified visibility will be returned in the search results.</db:para>
<db:para>The visibility scope can be one of:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Place.UnspecifiedVisibility</db:para>
</db:td>
<db:td>
<db:para>No explicit visibility scope specified, places with any visibility may be part of search results.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.DeviceVisibility</db:para>
</db:td>
<db:td>
<db:para>Only places stored on the local device will be part of the search results.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.PrivateVisibility</db:para>
</db:td>
<db:td>
<db:para>Only places that are private to the current user will be part of the search results.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Place.PublicVisibility</db:para>
</db:td>
<db:td>
<db:para>Only places that are public will be part of the search results.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cancel-method">
<db:title>void cancel()</db:title>
<db:para>Cancels an ongoing search operation immediately and sets the model status to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Ready. The model retains any search results it had before the operation was started.</db:para>
<db:para>If an operation is not ongoing, invoking cancel() has no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#update-method">update</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-method">
<db:title>void data(int <db:emphasis>index</db:emphasis>, string <db:emphasis>role</db:emphasis>)</db:title>
<db:para>Returns the data for a given <db:code role="parameter">role</db:code> at the specified row <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="errorString-method">
<db:title>string errorString()</db:title>
<db:para>This read-only property holds the textual presentation of the latest place search model error. If no error has occurred or if the model was cleared, an empty string is returned.</db:para>
<db:para>An empty string may also be returned if an error occurred which has no associated textual representation.</db:para>
</db:section>
<db:section xml:id="nextPage-method">
<db:title>void nextPage()</db:title>
<db:para>Updates the model to display the next page of search results. If there is no next page then this method does nothing.</db:para>
</db:section>
<db:section xml:id="previousPage-method">
<db:title>void previousPage()</db:title>
<db:para>Updates the model to display the previous page of search results. If there is no previous page then this method does nothing.</db:para>
</db:section>
<db:section xml:id="reset-method">
<db:title>void reset()</db:title>
<db:para>Resets the model. All search results are cleared, any outstanding requests are aborted and possible errors are cleared. Model status will be set to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Null.</db:para>
</db:section>
<db:section xml:id="update-method">
<db:title>void update()</db:title>
<db:para>Updates the model based on the provided query parameters. The model will be populated with a list of places matching the search parameters specified by the type's properties. Search criteria is specified by setting properties such as the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchTerm-prop">searchTerm</db:link>, <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#categories-prop">categories</db:link>, <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#searchArea-prop">searchArea</db:link> and <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#limit-prop">limit</db:link>. Support for these properties may vary according to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#plugin-prop">plugin</db:link>. <db:code>update()</db:code> then submits the set of criteria to the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#plugin-prop">plugin</db:link> to process.</db:para>
<db:para>While the model is updating the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">status</db:link> of the model is set to <db:code>PlaceSearchModel.Loading</db:code>. If the model is successfully updated the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">status</db:link> is set to <db:code>PlaceSearchModel.Ready</db:code>, while if it unsuccessfully completes, the <db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">status</db:link> is set to <db:code>PlaceSearchModel.Error</db:code> and the model cleared.</db:para>
<db:programlisting language="cpp">PlaceSearchModel {
    id: model
    plugin: backendPlugin
    searchArea: QtPositioning.circle(QtPositioning.coordinate(10, 10))
    ...
}

MouseArea {
    ...
    onClicked: {
        model.searchTerm = &quot;pizza&quot;;
        model.categories = null;  //not searching by any category
        model.searchArea.center.latitude = -27.5;
        model.searchArea.center.longitude = 153;
        model.update();
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#cancel-method">cancel</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtlocation-placesearchmodel.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateWith-method">
<db:title>void updateWith(int <db:emphasis>proposedSearchIndex</db:emphasis>)</db:title>
<db:para>Updates the model based on the ProposedSearchResult at index <db:code role="parameter">proposedSearchIndex</db:code>. The model will be populated with a list of places matching the proposed search. Model status will be set to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Loading. If the model is updated successfully status will be set to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Ready. If an error occurs status will be set to <db:link xlink:href="qml-qtlocation-placesearchmodel.xml">PlaceSearchModel</db:link>.Error and the model cleared.</db:para>
<db:para>If <db:code role="parameter">proposedSearchIndex</db:code> does not reference a ProposedSearchResult this method does nothing.</db:para>
</db:section>
</db:section>
</db:article>
