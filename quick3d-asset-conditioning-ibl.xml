<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Image-Based Lighting</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Qt Quick 3D supports IBL (Image-Based Lighting) to illuminate scenes or individual materials.</db:para>
<db:para>IBL is a lighting technique that allows scenes to be illuminated with images. This is especially useful when you want to create realistic lighting and reflections in indoor and outdoor scenes.</db:para>
<db:para>You can use any image file for IBL, but it is recommended to use 360ยบ HDR (High Dynamic Range) images. HDR images have a much higher dynamic range than for example JPEG or PNG images. A higher dynamic range provides more realistic lighting through a great range of luminance levels from very bright to very dark.</db:para>
<db:para>The following example demonstrates the lighting effect on an object using an HDR image vs a single directional light:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Light</db:para>
</db:th>
<db:th>
<db:para>Smooth Dielectric material</db:para>
</db:th>
<db:th>
<db:para>Rough Dielectric material</db:para>
</db:th>
<db:th>
<db:para>Smooth Metallic material</db:para>
</db:th>
<db:th>
<db:para>Rough Metallic material</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Single directional light</db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-directional-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-rough-directional-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-directional-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-rough-directional-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">Image-based light</db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-rough-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-rough-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="scene-lighting">
<db:title>Scene Lighting</db:title>
<db:para>To illuminate a <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">scene</db:link> using an image you'll add the image as a <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> to the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link> property.</db:para>
<db:programlisting language="qml">lightProbe: Texture {
    source: &quot;maps/OpenfootageNET_garage-1024.hdr&quot;
}
</db:programlisting>
<db:para>Once you have selected an image, IBL is set up for your scene. All models in the scene are illuminated by the light probe by default.</db:para>
<db:note>
<db:para>You can also combine IBL with any other light source to compliment the lighting effect on an object.</db:para>
</db:note>
<db:para>Now that you have IBL set up for your scene, let us have a look at the different properties for the probe. In many cases the default values provide a satisfying result, but you can tweak the following property values depending on the image and desired result:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">Exposure</db:link> The amount of light emitted by the light probe.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeHorizon-prop">Horizon Cut-Off</db:link> Increasing the value adds darkness (black) to the bottom half of the environment, forcing the lighting to come predominantly from the top of the image (and removing specific reflections from the lower half).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeOrientation-prop">Orientation</db:link> This property when defines the orientation of the light probe. Orientation is defined in terms of euler angles in degrees over the x, y, and z axes.</db:para>
</db:listitem>
</db:itemizedlist>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Property</db:para>
</db:th>
<db:th>
<db:para>Metallic material</db:para>
</db:th>
<db:th>
<db:para>Dielectric material</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis><db:emphasis role="bold">Default settings</db:emphasis></db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-environment-light.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis><db:emphasis role="bold">Exposure</db:emphasis></db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-environment-light-exposure.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-environment-light-exposure.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis><db:emphasis role="bold">Horizon Cut-off</db:emphasis></db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-environment-light-horizon.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-environment-light-horizon.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis><db:emphasis role="bold">Orientation</db:emphasis></db:emphasis></db:para>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-metallic-smooth-environment-light-orientation.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/IBL-sphere-smooth-environment-light-orientation.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="material-lighting">
<db:title>Material Lighting</db:title>
<db:para>To use image-based lighting only on one material instead of a whole scene, or use a separate light probe for a model already illuminated by image-based lighting, set the image as the <db:link xlink:href="qml-qtquick3d-material.xml#lightProbe-prop">light probe</db:link> for the material.</db:para>
<db:para>Once you have followed the steps above, you have a separate light probe set for the material. This light probe overrides the scene light probe if there is one specified.</db:para>
</db:section>
<db:section xml:id="pre-generating-ibl-cubemap">
<db:title>Pre-generating IBL cubemap</db:title>
<db:para>When IBL is used, a cubemap for the IBL image needs to be generated by the application. By default this happens during application startup and can be quite slow, especially on embedded and mobile devices. It is therefore possible to pre-generate this cubemap using <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link>. Simply run <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam</db:link> with the .hdr file as input and it will output a cubemap file with the same name as the input but with a ktx file extension. One can then reference this file in the lightProbe property's associated <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link>, and Qt will then load the pregenerated cubemap without any costly processing at run time.</db:para>
<db:section xml:id="manual-baking">
<db:title>Manual baking</db:title>
<db:para>As an example, let's assume the application uses a .hdr image for its light probes or the skybox:</db:para>
<db:programlisting language="cpp" role="bad">View3D {
    environment: SceneEnvironment {
        backgroundMode: SceneEnvironment.SkyBox
        lightProbe: Texture {
            source: &quot;environment.hdr&quot;
        }
        probeOrientation: Qt.vector3d(0, -90, 0)
    }
    // ...
}
</db:programlisting>
<db:para>This is fully functional, assuming environment.hdr is available at run time. However, loading the .hdr image involves expensive pre-processing. This can be avoided by running:</db:para>
<db:programlisting language="cpp" role="bad">balsam environment.hdr
</db:programlisting>
<db:para>The result is a new file <db:code>environment.ktx</db:code>. Shipping this instead of the .hdr file and changing the Texture source provides significantly faster loading times.</db:para>
<db:programlisting language="cpp" role="bad">lightProbe: Texture {
    source: &quot;environment.ktx&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="build-time-baking-via-cmake">
<db:title>Build time baking via CMake</db:title>
<db:para>Manually running balsam on assets is not always ideal. Therefore, applications are recommended to rely on CMake to automatically perform the same task at application build time.</db:para>
<db:para>This is done by using the qt6_add_lightprobe_images CMake function provided by the Quick3D component of the Qt6 package:</db:para>
<db:programlisting language="cpp" role="bad">...
find_package(Qt6 COMPONENTS Quick3D)
...
qt6_add_lightprobe_images(application_target &quot;ibl_assets&quot;
    PREFIX
        &quot;/ibl&quot;
    FILES
        &quot;environment.hdr&quot;
)
</db:programlisting>
<db:para>Replace <db:code>application_target</db:code> with the appropriate target. Here, there is no need to run balsam manually on environment.hdr anymore, and the .hdr file does not need to be shipped with the application. Rather, during the build balsam will be invoked automatically, and an environment.ktx will be added to the application resources at <db:code>:/ibl/environment.ktx</db:code>. The lightProbe's <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> needs to then reference this file.</db:para>
<db:programlisting language="cpp" role="bad">lightProbe: Texture {
    source: &quot;qrc:/ibl/environment.ktx&quot;
}
</db:programlisting>
<db:note>
<db:para>Setting PREFIX so that the final name in the resource system has a path matching the .qml file's location allows using a relative source path instead of having to provide an absolute path with the qrc scheme.</db:para>
</db:note>
<db:para>In addition to PREFIX, the keyword BASE is also available. The behavior follows that of qt6_add_resources. For example, the following leads to generating <db:code>:/ibl/maps/environment.ktx</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">qt6_add_lightprobe_images(application_target &quot;ibl_assets&quot;
    PREFIX
        &quot;/ibl&quot;
    BASE
        &quot;../data/shared&quot;
    FILES
        &quot;../data/shared/maps/environment.hdr&quot;
)
</db:programlisting>
<db:para>Like in qt6_add_shaders, the OUTPUTS keyword is available to allow specifying a completely custom name for the file in the resource system. For example, the following also generates <db:code>:/ibl/maps/environment.ktx</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">qt6_add_lightprobe_images(application_target &quot;ibl_assets&quot;
    PREFIX
        &quot;/ibl&quot;
    FILES
        &quot;../data/shared/maps/environment.hdr&quot;
    OUTPUTS
        &quot;maps/environment.ktx&quot;
)
</db:programlisting>
<db:note>
<db:para>For each entry in the FILES list, there must be a corresponding entry in OUTPUTS.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
