<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSerialPort Class</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides functions to access serial ports.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSerialPort</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialport</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSerialPort is part of <db:simplelist><db:member>serialport-main</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can get information about the available serial ports using the <db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link> helper class, which allows an enumeration of all the serial ports in the system. This is useful to obtain the correct name of the serial port you want to use. You can pass an object of the helper class as an argument to the <db:link xlink:href="qserialport.xml#setPort">setPort</db:link>() or <db:link xlink:href="qserialport.xml#setPortName">setPortName</db:link>() methods to assign the desired serial device.</db:para>
<db:para>After setting the port, you can open it in read-only (r/o), write-only (w/o), or read-write (r/w) mode using the <db:link xlink:href="qserialport.xml#open">open</db:link>() method.</db:para>
<db:note>
<db:para>The serial port is always opened with exclusive access (that is, no other process or thread can access an already opened serial port).</db:para>
</db:note>
<db:para>Use the <db:link xlink:href="qserialport.xml#close">close</db:link>() method to close the port and cancel the I/O operations.</db:para>
<db:para>Having successfully opened, <db:link xlink:href="qserialport.xml">QSerialPort</db:link> tries to determine the current configuration of the port and initializes itself. You can reconfigure the port to the desired setting using the <db:link xlink:href="qserialport.xml#baudRate-prop">setBaudRate</db:link>(), <db:link xlink:href="qserialport.xml#dataBits-prop">setDataBits</db:link>(), <db:link xlink:href="qserialport.xml#parity-prop">setParity</db:link>(), <db:link xlink:href="qserialport.xml#stopBits-prop">setStopBits</db:link>(), and <db:link xlink:href="qserialport.xml#flowControl-prop">setFlowControl</db:link>() methods.</db:para>
<db:para>There are a couple of properties to work with the pinout signals namely: <db:link xlink:href="qserialport.xml#dataTerminalReady-prop">QSerialPort::dataTerminalReady</db:link>, <db:link xlink:href="qserialport.xml#requestToSend-prop">QSerialPort::requestToSend</db:link>. It is also possible to use the <db:link xlink:href="qserialport.xml#pinoutSignals">pinoutSignals</db:link>() method to query the current pinout signals set.</db:para>
<db:para>Once you know that the ports are ready to read or write, you can use the <db:link xlink:href="qiodevice.xml#read">read</db:link>() or <db:link xlink:href="qiodevice.xml#write">write</db:link>() methods. Alternatively the <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>() and <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>() convenience methods can also be invoked. If not all the data is read at once, the remaining data will be available for later as new incoming data is appended to the <db:link xlink:href="qserialport.xml">QSerialPort</db:link>'s internal read buffer. You can limit the size of the read buffer using <db:link xlink:href="qserialport.xml#setReadBufferSize">setReadBufferSize</db:link>().</db:para>
<db:para><db:link xlink:href="qserialport.xml">QSerialPort</db:link> provides a set of functions that suspend the calling thread until certain signals are emitted. These functions can be used to implement blocking serial ports:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qserialport.xml#waitForReadyRead">waitForReadyRead</db:link>() blocks calls until new data is available for reading.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qserialport.xml#waitForBytesWritten">waitForBytesWritten</db:link>() blocks calls until one payload of data has been written to the serial port.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See the following example:</db:para>
<db:programlisting language="cpp">int numRead = 0, numReadTotal = 0;
char buffer[50];

for (;;) {
    numRead  = serial.read(buffer, 50);

    // Do whatever with the array

    numReadTotal += numRead;
    if (numRead == 0 &amp;amp;&amp;amp; !serial.waitForReadyRead())
        break;
}
</db:programlisting>
<db:para>If <db:link xlink:href="qiodevice.xml#waitForReadyRead">waitForReadyRead</db:link>() returns <db:code>false</db:code>, the connection has been closed or an error has occurred.</db:para>
<db:para>If an error occurs at any point in time, <db:link xlink:href="qserialport.xml">QSerialPort</db:link> will emit the <db:link xlink:href="qserialport.xml#errorOccurred">errorOccurred</db:link>() signal. You can also call <db:link xlink:href="qserialport.xml#error-prop">error</db:link>() to find the type of error that occurred last.</db:para>
<db:para>Programming with a blocking serial port is radically different from programming with a non-blocking serial port. A blocking serial port does not require an event loop and typically leads to simpler code. However, in a GUI application, blocking serial port should only be used in non-GUI threads, to avoid freezing the user interface.</db:para>
<db:para>For more details about these approaches, refer to the <db:link xlink:href="qtserialport-examples.xml">example</db:link> applications.</db:para>
<db:para>The <db:link xlink:href="qserialport.xml">QSerialPort</db:link> class can also be used with <db:link xlink:href="qtextstream.xml">QTextStream</db:link> and <db:link xlink:href="qdatastream.xml">QDataStream</db:link>'s stream operators (operator&lt;&lt;() and operator&gt;&gt;()). There is one issue to be aware of, though: make sure that enough data is available before attempting to read by using the operator&gt;&gt;() overloaded operator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="BaudRate-enum">
<db:title>enum QSerialPort::BaudRate</db:title>
<db:enumsynopsis>
<db:enumname>BaudRate</db:enumname>
<db:enumitem>
<db:enumidentifier>Baud1200</db:enumidentifier>
<db:enumvalue>1200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud2400</db:enumidentifier>
<db:enumvalue>2400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud4800</db:enumidentifier>
<db:enumvalue>4800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud9600</db:enumidentifier>
<db:enumvalue>9600</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud19200</db:enumidentifier>
<db:enumvalue>19200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud38400</db:enumidentifier>
<db:enumvalue>38400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud57600</db:enumidentifier>
<db:enumvalue>57600</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Baud115200</db:enumidentifier>
<db:enumvalue>115200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownBaud</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the baud rate which the communication device operates with.</db:para>
<db:note>
<db:para>Only the most common standard baud rates are listed in this enum.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud1200</db:code></db:para>
</db:td>
<db:td><db:code>1200</db:code></db:td>
<db:td>
<db:para>1200 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud2400</db:code></db:para>
</db:td>
<db:td><db:code>2400</db:code></db:td>
<db:td>
<db:para>2400 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud4800</db:code></db:para>
</db:td>
<db:td><db:code>4800</db:code></db:td>
<db:td>
<db:para>4800 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud9600</db:code></db:para>
</db:td>
<db:td><db:code>9600</db:code></db:td>
<db:td>
<db:para>9600 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud19200</db:code></db:para>
</db:td>
<db:td><db:code>19200</db:code></db:td>
<db:td>
<db:para>19200 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud38400</db:code></db:para>
</db:td>
<db:td><db:code>38400</db:code></db:td>
<db:td>
<db:para>38400 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud57600</db:code></db:para>
</db:td>
<db:td><db:code>57600</db:code></db:td>
<db:td>
<db:para>57600 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Baud115200</db:code></db:para>
</db:td>
<db:td><db:code>115200</db:code></db:td>
<db:td>
<db:para>115200 baud.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownBaud</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown baud. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#baudRate-prop">QSerialPort::baudRate</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="DataBits-enum">
<db:title>enum QSerialPort::DataBits</db:title>
<db:enumsynopsis>
<db:enumname>DataBits</db:enumname>
<db:enumitem>
<db:enumidentifier>Data5</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Data6</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Data7</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Data8</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownDataBits</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the number of data bits used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Data5</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The number of data bits in each character is 5. It is used for Baudot code. It generally only makes sense with older equipment such as teleprinters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Data6</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The number of data bits in each character is 6. It is rarely used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Data7</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The number of data bits in each character is 7. It is used for true ASCII. It generally only makes sense with older equipment such as teleprinters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Data8</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The number of data bits in each character is 8. It is used for most kinds of data, as this size matches the size of a byte. It is almost universally used in newer applications.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownDataBits</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown number of bits. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataBits-prop">QSerialPort::dataBits</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Direction-enum">
<db:title>enum QSerialPort::Direction</db:title>
<db:bridgehead renderas="sect2">flags QSerialPort::Directions</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Direction</db:enumname>
<db:enumitem>
<db:enumidentifier>Input</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Output</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllDirections</db:enumidentifier>
<db:enumvalue>Input | Output</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSerialPort::Directions</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the possible directions of the data transmission.</db:para>
<db:note>
<db:para>This enumeration is used for setting the baud rate of the device separately for each direction on some operating systems (for example, POSIX-like).</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Input</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Input direction.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::Output</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Output direction.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::AllDirections</db:code></db:para>
</db:td>
<db:td><db:code>Input | Output</db:code></db:td>
<db:td>
<db:para>Simultaneously in two directions.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Directions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Direction&gt;. </db:code>It stores an OR combination of <db:code>Direction</db:code> values.</db:para>
</db:section>
<db:section xml:id="FlowControl-enum">
<db:title>enum QSerialPort::FlowControl</db:title>
<db:enumsynopsis>
<db:enumname>FlowControl</db:enumname>
<db:enumitem>
<db:enumidentifier>NoFlowControl</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HardwareControl</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SoftwareControl</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownFlowControl</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the flow control used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::NoFlowControl</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No flow control.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::HardwareControl</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Hardware flow control (RTS/CTS).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::SoftwareControl</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Software flow control (XON/XOFF).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownFlowControl</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown flow control. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#flowControl-prop">QSerialPort::flowControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Parity-enum">
<db:title>enum QSerialPort::Parity</db:title>
<db:enumsynopsis>
<db:enumname>Parity</db:enumname>
<db:enumitem>
<db:enumidentifier>NoParity</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EvenParity</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OddParity</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SpaceParity</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MarkParity</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownParity</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the parity scheme used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::NoParity</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No parity bit it sent. This is the most common parity setting. Error detection is handled by the communication protocol.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::EvenParity</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The number of 1 bits in each character, including the parity bit, is always even.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::OddParity</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The number of 1 bits in each character, including the parity bit, is always odd. It ensures that at least one state transition occurs in each character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::SpaceParity</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Space parity. The parity bit is sent in the space signal condition. It does not provide error detection information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::MarkParity</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Mark parity. The parity bit is always set to the mark signal condition (logical 1). It does not provide error detection information.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownParity</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown parity. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#parity-prop">QSerialPort::parity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="PinoutSignal-enum">
<db:title>enum QSerialPort::PinoutSignal</db:title>
<db:bridgehead renderas="sect2">flags QSerialPort::PinoutSignals</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PinoutSignal</db:enumname>
<db:enumitem>
<db:enumidentifier>NoSignal</db:enumidentifier>
<db:enumvalue>0x00</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TransmittedDataSignal</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReceivedDataSignal</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DataTerminalReadySignal</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DataCarrierDetectSignal</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DataSetReadySignal</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RingIndicatorSignal</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestToSendSignal</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClearToSendSignal</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SecondaryTransmittedDataSignal</db:enumidentifier>
<db:enumvalue>0x100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SecondaryReceivedDataSignal</db:enumidentifier>
<db:enumvalue>0x200</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSerialPort::PinoutSignals</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the possible RS-232 pinout signals.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::NoSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x00</db:code></db:td>
<db:td>
<db:para>No line active</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::TransmittedDataSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>TxD (Transmitted Data). This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::ReceivedDataSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>RxD (Received Data). This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::DataTerminalReadySignal</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>DTR (Data Terminal Ready).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::DataCarrierDetectSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>DCD (Data Carrier Detect).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::DataSetReadySignal</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>DSR (Data Set Ready).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::RingIndicatorSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>RNG (Ring Indicator).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::RequestToSendSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>RTS (Request To Send).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::ClearToSendSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>CTS (Clear To Send).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::SecondaryTransmittedDataSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x100</db:code></db:td>
<db:td>
<db:para>STD (Secondary Transmitted Data).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::SecondaryReceivedDataSignal</db:code></db:para>
</db:td>
<db:td><db:code>0x200</db:code></db:td>
<db:td>
<db:para>SRD (Secondary Received Data).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PinoutSignals</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PinoutSignal&gt;. </db:code>It stores an OR combination of <db:code>PinoutSignal</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#pinoutSignals">pinoutSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qserialport.xml#dataTerminalReady-prop">QSerialPort::dataTerminalReady</db:link></db:member>
<db:member><db:link xlink:href="qserialport.xml#requestToSend-prop">QSerialPort::requestToSend</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SerialPortError-enum">
<db:title>enum QSerialPort::SerialPortError</db:title>
<db:enumsynopsis>
<db:enumname>SerialPortError</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DeviceNotFoundError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PermissionError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ParityError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FramingError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BreakConditionError</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteError</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadError</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedOperationError</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TimeoutError</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotOpenError</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the errors that may be contained by the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::DeviceNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>An error occurred while attempting to open an non-existing device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::PermissionError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An error occurred while attempting to open an already opened device by another process or a user not having enough permission and credentials to open.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::OpenError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred while attempting to open an already opened device in this object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::NotOpenError</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>This error occurs when an operation is executed that can only be successfully performed if the device is open. This value was introduced in <db:link xlink:href="qtserialport-module.xml">QtSerialPort</db:link> 5.2.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::ParityError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Parity error detected by the hardware while reading data. This value is obsolete. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::FramingError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Framing error detected by the hardware while reading data. This value is obsolete. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::BreakConditionError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Break condition detected by the hardware on the input line. This value is obsolete. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::WriteError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>An I/O error occurred while writing the data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::ReadError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>An I/O error occurred while reading the data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>An I/O error occurred when a resource becomes unavailable, e.g. when the device is unexpectedly removed from the system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnsupportedOperationError</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>The requested device operation is not supported or prohibited by the running operating system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::TimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>A timeout error occurred. This value was introduced in <db:link xlink:href="qtserialport-module.xml">QtSerialPort</db:link> 5.2.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StopBits-enum">
<db:title>enum QSerialPort::StopBits</db:title>
<db:enumsynopsis>
<db:enumname>StopBits</db:enumname>
<db:enumitem>
<db:enumidentifier>OneStop</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OneAndHalfStop</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TwoStop</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownStopBits</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the number of stop bits used.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::OneStop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>1 stop bit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::OneAndHalfStop</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>1.5 stop bits. This is only for the Windows platform.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::TwoStop</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>2 stop bits.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownStopBits</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown number of stop bits. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#stopBits-prop">QSerialPort::stopBits</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="baudRate-prop">
<db:title>baudRate : qint32</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint32</db:type>
<db:varname>baudRate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">baudRate</db:synopsisinfo>
<db:synopsisinfo role="setter">setBaudRate</db:synopsisinfo>
<db:synopsisinfo role="notifier">baudRateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the data baud rate for the desired direction</db:para>
<db:para>If the setting is successful or set before opening the port, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by accessing the value of the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property. To set the baud rate, use the enumeration <db:link xlink:href="qserialport.xml#BaudRate-enum">QSerialPort::BaudRate</db:link> or any positive qint32 value.</db:para>
<db:note>
<db:para>If the setting is set before opening the port, the actual serial port setting is done automatically in the <db:link xlink:href="qserialport.xml#open">QSerialPort::open</db:link>() method right after that the opening of the port succeeds.</db:para>
</db:note>
<db:warning>
<db:para>Setting the <db:link xlink:href="qserialport.xml#Direction-enum">AllDirections</db:link> flag is supported on all platforms. Windows supports only this mode.</db:para>
</db:warning>
<db:warning>
<db:para>Returns equal baud rate in any direction on Windows.</db:para>
</db:warning>
<db:para>The default value is Baud9600, i.e. 9600 bits per second.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint32-typedef">qint32</db:link></db:type> <db:emphasis role="bold">baudRate</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#Direction-enum">QSerialPort::Directions</db:link></db:type> <db:emphasis>directions</db:emphasis> = AllDirections) const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setBaudRate</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint32-typedef">qint32</db:link></db:type> <db:emphasis>baudRate</db:emphasis>, <db:type><db:link xlink:href="qserialport.xml#Direction-enum">QSerialPort::Directions</db:link></db:type> <db:emphasis>directions</db:emphasis> = AllDirections)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#baudRateChanged">baudRateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint32-typedef">qint32</db:link></db:type> <db:emphasis>baudRate</db:emphasis>, <db:type><db:link xlink:href="qserialport.xml#Direction-enum">QSerialPort::Directions</db:link></db:type> <db:emphasis>directions</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="breakEnabled-prop">
<db:title>[since 5.5] breakEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>breakEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isBreakEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setBreakEnabled</db:synopsisinfo>
<db:synopsisinfo role="notifier">breakEnabledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state of the transmission line in break</db:para>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise. If the flag is <db:code>true</db:code> then the transmission line is in break state; otherwise is in non-break state.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to set or get this property; otherwise returns <db:code>false</db:code> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code. This is a bit unusual as opposed to the regular Qt property settings of a class. However, this is a special use case since the property is set through the interaction with the kernel and hardware. Hence, the two scenarios cannot be completely compared to each other.</db:para>
</db:note>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isBreakEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setBreakEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis> = true)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">breakEnabledChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="dataBits-prop">
<db:title>dataBits : DataBits</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>DataBits</db:type>
<db:varname>dataBits</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dataBits</db:synopsisinfo>
<db:synopsisinfo role="setter">setDataBits</db:synopsisinfo>
<db:synopsisinfo role="notifier">dataBitsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the data bits in a frame</db:para>
<db:para>If the setting is successful or set before opening the port, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by accessing the value of the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property.</db:para>
<db:note>
<db:para>If the setting is set before opening the port, the actual serial port setting is done automatically in the <db:link xlink:href="qserialport.xml#open">QSerialPort::open</db:link>() method right after that the opening of the port succeeds.</db:para>
</db:note>
<db:para>The default value is Data8, i.e. 8 data bits.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#DataBits-enum">QSerialPort::DataBits</db:link></db:type> <db:emphasis role="bold">dataBits</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setDataBits</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#DataBits-enum">QSerialPort::DataBits</db:link></db:type> <db:emphasis>dataBits</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#dataBitsChanged">dataBitsChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#DataBits-enum">QSerialPort::DataBits</db:link></db:type> <db:emphasis>dataBits</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="dataTerminalReady-prop">
<db:title>dataTerminalReady : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dataTerminalReady</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isDataTerminalReady</db:synopsisinfo>
<db:synopsisinfo role="setter">setDataTerminalReady</db:synopsisinfo>
<db:synopsisinfo role="notifier">dataTerminalReadyChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state (high or low) of the line signal DTR</db:para>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise. If the flag is <db:code>true</db:code> then the DTR signal is set to high; otherwise low.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to set or get this property; otherwise <db:code>false</db:code> is returned and the error code is set to <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link>.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDataTerminalReady</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setDataTerminalReady</db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#dataTerminalReadyChanged">dataTerminalReadyChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#pinoutSignals">pinoutSignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : SerialPortError</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>SerialPortError</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="resetter">clearError</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the error status of the serial port</db:para>
<db:para>The I/O device status returns an error code. For example, if <db:link xlink:href="qserialport.xml#open">open</db:link>() returns <db:code>false</db:code>, or a read/write operation returns <db:code>-1</db:code>, this property can be used to figure out the reason why the operation failed.</db:para>
<db:para>The error code is set to the default <db:link xlink:href="qserialport.xml#SerialPortError-enum">QSerialPort::NoError</db:link> after a call to clearError()</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#SerialPortError-enum">QSerialPort::SerialPortError</db:link></db:type> <db:emphasis role="bold">error</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">clearError</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="flowControl-prop">
<db:title>flowControl : FlowControl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FlowControl</db:type>
<db:varname>flowControl</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">flowControl</db:synopsisinfo>
<db:synopsisinfo role="setter">setFlowControl</db:synopsisinfo>
<db:synopsisinfo role="notifier">flowControlChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the desired flow control mode</db:para>
<db:para>If the setting is successful or set before opening the port, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by accessing the value of the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property.</db:para>
<db:note>
<db:para>If the setting is set before opening the port, the actual serial port setting is done automatically in the <db:link xlink:href="qserialport.xml#open">QSerialPort::open</db:link>() method right after that the opening of the port succeeds.</db:para>
</db:note>
<db:para>The default value is <db:link xlink:href="qserialport.xml#FlowControl-enum">NoFlowControl</db:link>, i.e. no flow control.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#FlowControl-enum">QSerialPort::FlowControl</db:link></db:type> <db:emphasis role="bold">flowControl</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setFlowControl</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#FlowControl-enum">QSerialPort::FlowControl</db:link></db:type> <db:emphasis>flowControl</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#flowControlChanged">flowControlChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#FlowControl-enum">QSerialPort::FlowControl</db:link></db:type> <db:emphasis>flow</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="parity-prop">
<db:title>parity : Parity</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Parity</db:type>
<db:varname>parity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">parity</db:synopsisinfo>
<db:synopsisinfo role="setter">setParity</db:synopsisinfo>
<db:synopsisinfo role="notifier">parityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the parity checking mode</db:para>
<db:para>If the setting is successful or set before opening the port, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by accessing the value of the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property.</db:para>
<db:note>
<db:para>If the setting is set before opening the port, the actual serial port setting is done automatically in the <db:link xlink:href="qserialport.xml#open">QSerialPort::open</db:link>() method right after that the opening of the port succeeds.</db:para>
</db:note>
<db:para>The default value is <db:link xlink:href="qserialport.xml#Parity-enum">NoParity</db:link>, i.e. no parity.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#Parity-enum">QSerialPort::Parity</db:link></db:type> <db:emphasis role="bold">parity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setParity</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#Parity-enum">QSerialPort::Parity</db:link></db:type> <db:emphasis>parity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#parityChanged">parityChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#Parity-enum">QSerialPort::Parity</db:link></db:type> <db:emphasis>parity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="requestToSend-prop">
<db:title>requestToSend : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>requestToSend</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isRequestToSend</db:synopsisinfo>
<db:synopsisinfo role="setter">setRequestToSend</db:synopsisinfo>
<db:synopsisinfo role="notifier">requestToSendChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the state (high or low) of the line signal RTS</db:para>
<db:para>Returns <db:code>true</db:code> on success, <db:code>false</db:code> otherwise. If the flag is <db:code>true</db:code> then the RTS signal is set to high; otherwise low.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to set or get this property; otherwise <db:code>false</db:code> is returned and the error code is set to <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link>.</db:para>
</db:note>
<db:note>
<db:para>An attempt to control the RTS signal in the <db:link xlink:href="qserialport.xml#FlowControl-enum">HardwareControl</db:link> mode will fail with error code set to <db:link xlink:href="qserialport.xml#SerialPortError-enum">UnsupportedOperationError</db:link>, because the signal is automatically controlled by the driver.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isRequestToSend</db:emphasis>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setRequestToSend</db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#requestToSendChanged">requestToSendChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>set</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#pinoutSignals">pinoutSignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopBits-prop">
<db:title>stopBits : StopBits</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>StopBits</db:type>
<db:varname>stopBits</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">stopBits</db:synopsisinfo>
<db:synopsisinfo role="setter">setStopBits</db:synopsisinfo>
<db:synopsisinfo role="notifier">stopBitsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of stop bits in a frame</db:para>
<db:para>If the setting is successful or set before opening the port, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by accessing the value of the <db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link> property.</db:para>
<db:note>
<db:para>If the setting is set before opening the port, the actual serial port setting is done automatically in the <db:link xlink:href="qserialport.xml#open">QSerialPort::open</db:link>() method right after that the opening of the port succeeds.</db:para>
</db:note>
<db:para>The default value is <db:link xlink:href="qserialport.xml#StopBits-enum">OneStop</db:link>, i.e. 1 stop bit.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#StopBits-enum">QSerialPort::StopBits</db:link></db:type> <db:emphasis role="bold">stopBits</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setStopBits</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#StopBits-enum">QSerialPort::StopBits</db:link></db:type> <db:emphasis>stopBits</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#stopBitsChanged">stopBitsChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#StopBits-enum">QSerialPort::StopBits</db:link></db:type> <db:emphasis>stopBits</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSerialPort">
<db:title>[explicit] QSerialPort::QSerialPort(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSerialPort</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSerialPort(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new serial port object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QSerialPort-1">
<db:title>[explicit] QSerialPort::QSerialPort(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSerialPort</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSerialPort(const QString &amp;name, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new serial port object with the given <db:code role="parameter">parent</db:code> to represent the serial port with the specified <db:code role="parameter">name</db:code>.</db:para>
<db:para>The name should have a specific format; see the <db:link xlink:href="qserialport.xml#setPort">setPort</db:link>() method.</db:para>
</db:section>
<db:section xml:id="QSerialPort-2">
<db:title>[explicit] QSerialPort::QSerialPort(const QSerialPortInfo &amp;<db:emphasis>serialPortInfo</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSerialPort</db:methodname>
<db:methodparam>
<db:type>const QSerialPortInfo &amp;</db:type>
<db:parameter>serialPortInfo</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSerialPort(const QSerialPortInfo &amp;serialPortInfo, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new serial port object with the given <db:code role="parameter">parent</db:code> to represent the serial port with the specified helper class <db:code role="parameter">serialPortInfo</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSerialPort">
<db:title>[virtual] QSerialPort::~QSerialPort()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSerialPort</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSerialPort()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Closes the serial port, if necessary, and then destroys object.</db:para>
</db:section>
<db:section xml:id="atEnd">
<db:title>[override virtual] bool QSerialPort::atEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>atEnd</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool atEnd() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#atEnd" role="function">QIODevice::atEnd() const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if no more data is currently available for reading; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function is most commonly used when reading data from the serial port in a loop. For example:</db:para>
<db:programlisting language="cpp">// This slot is connected to QSerialPort::readyRead()
void QSerialPortClass::readyReadSlot()
{
    while (!port.atEnd()) {
        QByteArray data = port.read(100);
        ....
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#bytesAvailable">bytesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baudRateChanged">
<db:title>void QSerialPort::baudRateChanged(qint32 <db:emphasis>baudRate</db:emphasis>, QSerialPort::Directions <db:emphasis>directions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>baudRateChanged</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>baudRate</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSerialPort::Directions</db:type>
<db:parameter>directions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">baudRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void baudRateChanged(qint32 baudRate, QSerialPort::Directions directions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the baud rate has been changed. The new baud rate is passed as <db:code role="parameter">baudRate</db:code> and directions as <db:code role="parameter">directions</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#baudRate-prop">baudRate</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#baudRate-prop">QSerialPort::baudRate</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesAvailable">
<db:title>[override virtual] qint64 QSerialPort::bytesAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesAvailable</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesAvailable() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#bytesAvailable" role="function">QIODevice::bytesAvailable() const</db:link>.</db:para>
<db:para>Returns the number of incoming bytes that are waiting to be read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#bytesToWrite">bytesToWrite</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bytesToWrite">
<db:title>[override virtual] qint64 QSerialPort::bytesToWrite() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>bytesToWrite</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 bytesToWrite() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#bytesToWrite" role="function">QIODevice::bytesToWrite() const</db:link>.</db:para>
<db:para>Returns the number of bytes that are waiting to be written. The bytes are written when control goes back to the event loop or when <db:link xlink:href="qserialport.xml#flush">flush</db:link>() is called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#bytesAvailable">bytesAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qserialport.xml#flush">flush</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canReadLine">
<db:title>[override virtual] bool QSerialPort::canReadLine() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canReadLine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canReadLine() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#canReadLine" role="function">QIODevice::canReadLine() const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if a line of data can be read from the serial port; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>bool QSerialPort::clear(QSerialPort::Directions <db:emphasis>directions</db:emphasis> = AllDirections)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>clear</db:methodname>
<db:methodparam>
<db:type>QSerialPort::Directions</db:type>
<db:parameter>directions</db:parameter>
<db:initializer>AllDirections</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool clear(QSerialPort::Directions directions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Discards all characters from the output or input buffer, depending on given directions <db:code role="parameter">directions</db:code>. This includes clearing the internal class buffers and the UART (driver) buffers. Also terminate pending read or write operations. If successful, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to clear any buffered data; otherwise returns <db:code>false</db:code> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code.</db:para>
</db:note>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual] void QSerialPort::close()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>close</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void close() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#close" role="function">QIODevice::close()</db:link>.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to close it; otherwise sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#close">QIODevice::close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataBitsChanged">
<db:title>void QSerialPort::dataBitsChanged(QSerialPort::DataBits <db:emphasis>dataBits</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataBitsChanged</db:methodname>
<db:methodparam>
<db:type>QSerialPort::DataBits</db:type>
<db:parameter>dataBits</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">dataBits</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataBitsChanged(QSerialPort::DataBits dataBits)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the data bits in a frame has been changed. The new data bits in a frame is passed as <db:code role="parameter">dataBits</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#dataBits-prop">dataBits</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataBits-prop">QSerialPort::dataBits</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataTerminalReadyChanged">
<db:title>void QSerialPort::dataTerminalReadyChanged(bool <db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataTerminalReadyChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">dataTerminalReady</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataTerminalReadyChanged(bool set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the state (high or low) of the line signal DTR has been changed. The new the state (high or low) of the line signal DTR is passed as <db:code role="parameter">set</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#dataTerminalReady-prop">dataTerminalReady</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataTerminalReady-prop">QSerialPort::dataTerminalReady</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 5.8] void QSerialPort::errorOccurred(QSerialPort::SerialPortError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QSerialPort::SerialPortError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QSerialPort::SerialPortError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error occurs in the serial port. The specified <db:code role="parameter">error</db:code> describes the type of error that occurred.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#error-prop">QSerialPort::error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flowControlChanged">
<db:title>void QSerialPort::flowControlChanged(QSerialPort::FlowControl <db:emphasis>flow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>flowControlChanged</db:methodname>
<db:methodparam>
<db:type>QSerialPort::FlowControl</db:type>
<db:parameter>flow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">flowControl</db:synopsisinfo>
<db:synopsisinfo role="signature">void flowControlChanged(QSerialPort::FlowControl flow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the flow control mode has been changed. The new flow control mode is passed as <db:code role="parameter">flow</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#flowControl-prop">flowControl</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#flowControl-prop">QSerialPort::flowControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flush">
<db:title>bool QSerialPort::flush()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>flush</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool flush()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function writes as much as possible from the internal write buffer to the underlying serial port without blocking. If any data was written, this function returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Call this function for sending the buffered data immediately to the serial port. The number of bytes successfully written depends on the operating system. In most cases, this function does not need to be called, because the <db:link xlink:href="qserialport.xml">QSerialPort</db:link> class will start sending data automatically once control is returned to the event loop. In the absence of an event loop, call <db:link xlink:href="qserialport.xml#waitForBytesWritten">waitForBytesWritten</db:link>() instead.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to flush any buffered data; otherwise returns <db:code>false</db:code> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qserialport.xml#waitForBytesWritten">waitForBytesWritten</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>[since 5.2] QSerialPort::Handle QSerialPort::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSerialPort::Handle</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSerialPort::Handle handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the platform is supported and the serial port is open, returns the native serial port handle; otherwise returns <db:code>-1</db:code>.</db:para>
<db:warning>
<db:para>This function is for expert use only; use it at your own risk. Furthermore, this function carries no compatibility promise between minor Qt releases.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isSequential">
<db:title>[override virtual] bool QSerialPort::isSequential() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSequential</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSequential() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#isSequential" role="function">QIODevice::isSequential() const</db:link>.</db:para>
<db:para>Always returns <db:code>true</db:code>. The serial port is a sequential device.</db:para>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual] bool QSerialPort::open(QIODevice::OpenMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>open</db:methodname>
<db:methodparam>
<db:type>QIODevice::OpenMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool open(QIODevice::OpenMode mode) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#open" role="function">QIODevice::open(QIODevice::OpenMode mode)</db:link>.</db:para>
<db:para>Opens the serial port using OpenMode <db:code role="parameter">mode</db:code>, and then returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code> and sets an error code which can be obtained by calling the <db:link xlink:href="qserialport.xml#error-prop">error</db:link>() method.</db:para>
<db:note>
<db:para>The method returns <db:code>false</db:code> if opening the port is successful, but could not set any of the port settings successfully. In that case, the port is closed automatically not to leave the port around with incorrect settings.</db:para>
</db:note>
<db:warning>
<db:para>The <db:code role="parameter">mode</db:code> has to be <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::ReadOnly</db:link>, <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link>, or <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::ReadWrite</db:link>. Other modes are unsupported.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::OpenMode</db:link></db:member>
<db:member><db:link xlink:href="qserialport.xml#setPort">setPort</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parityChanged">
<db:title>void QSerialPort::parityChanged(QSerialPort::Parity <db:emphasis>parity</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>parityChanged</db:methodname>
<db:methodparam>
<db:type>QSerialPort::Parity</db:type>
<db:parameter>parity</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">parity</db:synopsisinfo>
<db:synopsisinfo role="signature">void parityChanged(QSerialPort::Parity parity)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the parity checking mode has been changed. The new parity checking mode is passed as <db:code role="parameter">parity</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#parity-prop">parity</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#parity-prop">QSerialPort::parity</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pinoutSignals">
<db:title>QSerialPort::PinoutSignals QSerialPort::pinoutSignals()</db:title>
<db:methodsynopsis>
<db:type>QSerialPort::PinoutSignals</db:type>
<db:methodname>pinoutSignals</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSerialPort::PinoutSignals pinoutSignals()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the state of the line signals in a bitmap format.</db:para>
<db:para>From this result, it is possible to allocate the state of the desired signal by applying a mask &quot;AND&quot;, where the mask is the desired enumeration value from <db:link xlink:href="qserialport.xml#PinoutSignal-enum">QSerialPort::PinoutSignals</db:link>.</db:para>
<db:note>
<db:para>This method performs a system call, thus ensuring that the line signal states are returned properly. This is necessary when the underlying operating systems cannot provide proper notifications about the changes.</db:para>
</db:note>
<db:note>
<db:para>The serial port has to be open before trying to get the pinout signals; otherwise returns <db:link xlink:href="qserialport.xml#PinoutSignal-enum">NoSignal</db:link> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataTerminalReady-prop">QSerialPort::dataTerminalReady</db:link></db:member>
<db:member><db:link xlink:href="qserialport.xml#requestToSend-prop">QSerialPort::requestToSend</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="portName">
<db:title>QString QSerialPort::portName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>portName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString portName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name set by <db:link xlink:href="qserialport.xml#setPort">setPort</db:link>() or passed to the <db:link xlink:href="qserialport.xml">QSerialPort</db:link> constructor. This name is short, i.e. it is extracted and converted from the internal variable system location of the device. The conversion algorithm is platform specific:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Platform</db:para>
</db:th>
<db:th>
<db:para>Brief Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>Removes the prefix &quot;\\.\&quot; or &quot;//./&quot; from the system location and returns the remainder of the string.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Unix, BSD</db:para>
</db:td>
<db:td>
<db:para>Removes the prefix &quot;/dev/&quot; from the system location and returns the remainder of the string.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#setPortName">setPortName</db:link>()</db:member>
<db:member><db:link xlink:href="qserialport.xml#setPort">setPort</db:link>()</db:member>
<db:member><db:link xlink:href="qserialportinfo.xml#portName">QSerialPortInfo::portName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readBufferSize">
<db:title>qint64 QSerialPort::readBufferSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readBufferSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readBufferSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the internal read buffer. This limits the amount of data that the client can receive before calling the <db:link xlink:href="qiodevice.xml#read">read</db:link>() or <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>() methods.</db:para>
<db:para>A read buffer size of <db:code>0</db:code> (the default) means that the buffer has no size limit, ensuring that no data is lost.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#setReadBufferSize">setReadBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readData">
<db:title>[override virtual protected] qint64 QSerialPort::readData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readData(char *data, qint64 maxSize) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#readData" role="function">QIODevice::readData(char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
<db:section xml:id="readLineData">
<db:title>[override virtual protected] qint64 QSerialPort::readLineData(char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>readLineData</db:methodname>
<db:methodparam>
<db:type>char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 readLineData(char *data, qint64 maxSize) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#readLineData" role="function">QIODevice::readLineData(char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
<db:section xml:id="requestToSendChanged">
<db:title>void QSerialPort::requestToSendChanged(bool <db:emphasis>set</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestToSendChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>set</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">requestToSend</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestToSendChanged(bool set)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the state (high or low) of the line signal RTS has been changed. The new the state (high or low) of the line signal RTS is passed as <db:code role="parameter">set</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#requestToSend-prop">requestToSend</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#requestToSend-prop">QSerialPort::requestToSend</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sendBreak">
<db:title>bool QSerialPort::sendBreak(int <db:emphasis>duration</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>sendBreak</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>duration</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool sendBreak(int duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a continuous stream of zero bits during a specified period of time <db:code role="parameter">duration</db:code> in msec if the terminal is using asynchronous serial data. If successful, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the duration is zero then zero bits are transmitted by at least <db:code>0.25</db:code> seconds, but no more than <db:code>0.5</db:code> seconds.</db:para>
<db:para>If the duration is non zero then zero bits are transmitted within a certain period of time depending on the implementation.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to send a break duration; otherwise returns <db:code>false</db:code> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#breakEnabled-prop">setBreakEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPort">
<db:title>void QSerialPort::setPort(const QSerialPortInfo &amp;<db:emphasis>serialPortInfo</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPort</db:methodname>
<db:methodparam>
<db:type>const QSerialPortInfo &amp;</db:type>
<db:parameter>serialPortInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPort(const QSerialPortInfo &amp;serialPortInfo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the port stored in the serial port info instance <db:code role="parameter">serialPortInfo</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#portName">portName</db:link>()</db:member>
<db:member><db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPortName">
<db:title>void QSerialPort::setPortName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPortName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPortName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">name</db:code> of the serial port.</db:para>
<db:para>The name of the serial port can be passed as either a short name or the long system location if necessary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#portName">portName</db:link>()</db:member>
<db:member><db:link xlink:href="qserialportinfo.xml">QSerialPortInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadBufferSize">
<db:title>void QSerialPort::setReadBufferSize(qint64 <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setReadBufferSize</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReadBufferSize(qint64 size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of <db:link xlink:href="qserialport.xml">QSerialPort</db:link>'s internal read buffer to be <db:code role="parameter">size</db:code> bytes.</db:para>
<db:para>If the buffer size is limited to a certain size, <db:link xlink:href="qserialport.xml">QSerialPort</db:link> will not buffer more than this size of data. The special case of a buffer size of <db:code>0</db:code> means that the read buffer is unlimited and all incoming data is buffered. This is the default.</db:para>
<db:para>This option is useful if the data is only read at certain points in time (for instance in a real-time streaming application) or if the serial port should be protected against receiving too much data, which may eventually cause the application to run out of memory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#readBufferSize">readBufferSize</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopBitsChanged">
<db:title>void QSerialPort::stopBitsChanged(QSerialPort::StopBits <db:emphasis>stopBits</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stopBitsChanged</db:methodname>
<db:methodparam>
<db:type>QSerialPort::StopBits</db:type>
<db:parameter>stopBits</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">stopBits</db:synopsisinfo>
<db:synopsisinfo role="signature">void stopBitsChanged(QSerialPort::StopBits stopBits)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted after the number of stop bits in a frame has been changed. The new number of stop bits in a frame is passed as <db:code role="parameter">stopBits</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#stopBits-prop">stopBits</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#stopBits-prop">QSerialPort::stopBits</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForBytesWritten">
<db:title>[override virtual] bool QSerialPort::waitForBytesWritten(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForBytesWritten</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForBytesWritten(int msecs) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#waitForBytesWritten" role="function">QIODevice::waitForBytesWritten(int msecs)</db:link>.</db:para>
<db:para>This function blocks until at least one byte has been written to the serial port and the <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() signal has been emitted. The function will timeout after <db:code role="parameter">msecs</db:code> milliseconds; the default timeout is 30000 milliseconds. If <db:code role="parameter">msecs</db:code> is -1, this function will not time out.</db:para>
<db:para>The function returns <db:code>true</db:code> if the <db:link xlink:href="qiodevice.xml#bytesWritten">bytesWritten</db:link>() signal is emitted; otherwise it returns <db:code>false</db:code> (if an error occurred or the operation timed out).</db:para>
</db:section>
<db:section xml:id="waitForReadyRead">
<db:title>[override virtual] bool QSerialPort::waitForReadyRead(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>waitForReadyRead</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>msecs</db:parameter>
<db:initializer>30000</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool waitForReadyRead(int msecs) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#waitForReadyRead" role="function">QIODevice::waitForReadyRead(int msecs)</db:link>.</db:para>
<db:para>This function blocks until new data is available for reading and the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal has been emitted. The function will timeout after <db:code role="parameter">msecs</db:code> milliseconds; the default timeout is 30000 milliseconds. If <db:code role="parameter">msecs</db:code> is -1, this function will not time out.</db:para>
<db:para>The function returns <db:code>true</db:code> if the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal is emitted and there is new data available for reading; otherwise it returns <db:code>false</db:code> (if an error occurred or the operation timed out).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#waitForBytesWritten">waitForBytesWritten</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeData">
<db:title>[override virtual protected] qint64 QSerialPort::writeData(const char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>maxSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>qint64</db:type>
<db:methodname>writeData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>maxSize</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 writeData(const char *data, qint64 maxSize) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#writeData" role="function">QIODevice::writeData(const char *data, qint64 maxSize)</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSerialPort</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qserialport.xml">QSerialPort</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-type-documentation">
<db:title>Obsolete Member Type Documentation</db:title>
<db:section xml:id="DataErrorPolicy-enum">
<db:title>enum QSerialPort::DataErrorPolicy</db:title>
<db:enumsynopsis>
<db:enumname>DataErrorPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>SkipPolicy</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PassZeroPolicy</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>IgnorePolicy</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StopReceivingPolicy</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownPolicy</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This enum describes the policies for the received symbols while parity errors were detected.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::SkipPolicy</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Skips the bad character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::PassZeroPolicy</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Replaces bad character with zero.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::IgnorePolicy</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Ignores the error for a bad character.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::StopReceivingPolicy</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Stops data reception on error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qserialport.xml">QSerialPort</db:link></db:emphasis>::UnknownPolicy</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unknown policy.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataErrorPolicy-prop" role="deprecated">QSerialPort::dataErrorPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete-property-documentation">
<db:title>Obsolete Property Documentation</db:title>
<db:section xml:id="dataErrorPolicy-prop">
<db:title>dataErrorPolicy : DataErrorPolicy</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>DataErrorPolicy</db:type>
<db:varname>dataErrorPolicy</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dataErrorPolicy</db:synopsisinfo>
<db:synopsisinfo role="setter">setDataErrorPolicy</db:synopsisinfo>
<db:synopsisinfo role="notifier">dataErrorPolicyChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the error policy for how the process receives characters in the case where a parity error is detected.</db:para>
<db:para>If the setting is successful, returns <db:code>true</db:code>; otherwise returns <db:code>false</db:code>. The default policy set is <db:link xlink:href="qserialport.xml#DataErrorPolicy-enum">IgnorePolicy</db:link>.</db:para>
<db:note>
<db:para>The serial port has to be open before trying to set this property; otherwise returns <db:code>false</db:code> and sets the <db:link xlink:href="qserialport.xml#SerialPortError-enum">NotOpenError</db:link> error code. This is a bit unusual as opposed to the regular Qt property settings of a class. However, this is a special use case since the property is set through the interaction with the kernel and hardware. Hence, the two scenarios cannot be completely compared to each other.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qserialport.xml#DataErrorPolicy-enum">QSerialPort::DataErrorPolicy</db:link></db:type> <db:emphasis role="bold">dataErrorPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">setDataErrorPolicy</db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#DataErrorPolicy-enum">QSerialPort::DataErrorPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis> = IgnorePolicy)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#dataErrorPolicyChanged">dataErrorPolicyChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qserialport.xml#DataErrorPolicy-enum">QSerialPort::DataErrorPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="settingsRestoredOnClose-prop">
<db:title>settingsRestoredOnClose : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>settingsRestoredOnClose</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">settingsRestoredOnClose</db:synopsisinfo>
<db:synopsisinfo role="setter">setSettingsRestoredOnClose</db:synopsisinfo>
<db:synopsisinfo role="notifier">settingsRestoredOnCloseChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This property holds the flag which specifies to restore the previous settings when closing the serial port.</db:para>
<db:para>If this flag is <db:code>true</db:code>, the settings will be restored; otherwise not. The default state of the <db:link xlink:href="qserialport.xml">QSerialPort</db:link> class is to restore the settings.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">settingsRestoredOnClose</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSettingsRestoredOnClose</db:emphasis>(<db:type>bool</db:type> <db:emphasis>restore</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qserialport.xml#settingsRestoredOnCloseChanged">settingsRestoredOnCloseChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>restore</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="dataErrorPolicyChanged">
<db:title>void QSerialPort::dataErrorPolicyChanged(QSerialPort::DataErrorPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dataErrorPolicyChanged</db:methodname>
<db:methodparam>
<db:type>QSerialPort::DataErrorPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">dataErrorPolicy</db:synopsisinfo>
<db:synopsisinfo role="signature">void dataErrorPolicyChanged(QSerialPort::DataErrorPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This signal is emitted after the error policy for how the process receives characters in case of parity error detection has been changed. The new error policy for how the process receives the character in case of parity error detection is passed as <db:code role="parameter">policy</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#dataErrorPolicy-prop">dataErrorPolicy</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#dataErrorPolicy-prop" role="deprecated">QSerialPort::dataErrorPolicy</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QSerialPort::error(QSerialPort::SerialPortError <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QSerialPort::SerialPortError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QSerialPort::SerialPortError error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qserialport.xml#errorOccurred">errorOccurred</db:link>() instead.</db:para>
</db:section>
<db:section xml:id="settingsRestoredOnCloseChanged">
<db:title>void QSerialPort::settingsRestoredOnCloseChanged(bool <db:emphasis>restore</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>settingsRestoredOnCloseChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>restore</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">settingsRestoredOnClose</db:synopsisinfo>
<db:synopsisinfo role="signature">void settingsRestoredOnCloseChanged(bool restore)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This signal is emitted after the flag which specifies to restore the previous settings while closing the serial port has been changed. The new flag which specifies to restore the previous settings while closing the serial port is passed as <db:code role="parameter">restore</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qserialport.xml#settingsRestoredOnClose-prop">settingsRestoredOnClose</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qserialport.xml#settingsRestoredOnClose-prop" role="deprecated">QSerialPort::settingsRestoredOnClose</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
