<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRouteSegment Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> class represents a segment of a route.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRouteSegment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRouteSegment is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> instance has information about the physical layout of the route segment, the length of the route and estimated time required to traverse the route segment and an optional <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> associated with the end of the route segment.</db:para>
<db:para><db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> instances can be thought of as edges on a routing graph, with <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> instances as optional labels attached to the vertices of the graph.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRouteSegment">
<db:title>QGeoRouteSegment::QGeoRouteSegment()</db:title>
<db:para>Constructs an invalid route segment object.</db:para>
<db:para>The route segment will remain invalid until one of <db:link xlink:href="qgeoroutesegment.xml#setNextRouteSegment">setNextRouteSegment</db:link>(), <db:link xlink:href="qgeoroutesegment.xml#setTravelTime">setTravelTime</db:link>(), <db:link xlink:href="qgeoroutesegment.xml#setDistance">setDistance</db:link>(), <db:link xlink:href="qgeoroutesegment.xml#setPath">setPath</db:link>() or <db:link xlink:href="qgeoroutesegment.xml#setManeuver">setManeuver</db:link>() is called.</db:para>
</db:section>
<db:section xml:id="QGeoRouteSegment-1">
<db:title>QGeoRouteSegment::QGeoRouteSegment(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a route segment object from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRouteSegment">
<db:title>[noexcept] QGeoRouteSegment::~QGeoRouteSegment()</db:title>
<db:para>Destroys this route segment object.</db:para>
</db:section>
<db:section xml:id="distance">
<db:title>qreal QGeoRouteSegment::distance() const</db:title>
<db:para>Returns the distance covered by this segment of the route, in meters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setDistance">setDistance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QGeoRouteSegment::isValid() const</db:title>
<db:para>Returns whether this route segment is valid or not.</db:para>
<db:para>If <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is called on the last route segment of a route, the returned value will be an invalid route segment.</db:para>
</db:section>
<db:section xml:id="maneuver">
<db:title>QGeoManeuver QGeoRouteSegment::maneuver() const</db:title>
<db:para>Returns the maneuver for this route segment.</db:para>
<db:para>Will return an invalid <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> if no information has been attached to the endpoint of this route segment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setManeuver">setManeuver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextRouteSegment">
<db:title>QGeoRouteSegment QGeoRouteSegment::nextRouteSegment() const</db:title>
<db:para>Returns the next route segment in the route.</db:para>
<db:para>Will return an invalid route segment if this is the last route segment in the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setNextRouteSegment">setNextRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="path">
<db:title>QList&lt;QGeoCoordinate&gt; QGeoRouteSegment::path() const</db:title>
<db:para>Returns the geometric shape of this route segment of the route.</db:para>
<db:para>The coordinates should be listed in the order in which they would be traversed by someone traveling along this segment of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setPath">setPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDistance">
<db:title>void QGeoRouteSegment::setDistance(qreal <db:emphasis>distance</db:emphasis>)</db:title>
<db:para>Sets the distance covered by this segment of the route, in meters, to <db:code role="parameter">distance</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#distance">distance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setManeuver">
<db:title>void QGeoRouteSegment::setManeuver(const QGeoManeuver &amp;<db:emphasis>maneuver</db:emphasis>)</db:title>
<db:para>Sets the maneuver for this route segment to <db:code role="parameter">maneuver</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#maneuver">maneuver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNextRouteSegment">
<db:title>void QGeoRouteSegment::setNextRouteSegment(const QGeoRouteSegment &amp;<db:emphasis>routeSegment</db:emphasis>)</db:title>
<db:para>Sets the next route segment in the route to <db:code role="parameter">routeSegment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPath">
<db:title>void QGeoRouteSegment::setPath(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>Sets the geometric shape of this segment of the route to <db:code role="parameter">path</db:code>.</db:para>
<db:para>The coordinates in <db:code role="parameter">path</db:code> should be listed in the order in which they would be traversed by someone traveling along this segment of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#path">path</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTravelTime">
<db:title>void QGeoRouteSegment::setTravelTime(int <db:emphasis>secs</db:emphasis>)</db:title>
<db:para>Sets the estimated amount of time it will take to traverse this segment of the route, in seconds, to <db:code role="parameter">secs</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#travelTime">travelTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="travelTime">
<db:title>int QGeoRouteSegment::travelTime() const</db:title>
<db:para>Returns the estimated amount of time it will take to traverse this segment of the route, in seconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setTravelTime">setTravelTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoRouteSegment::operator!=(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route segment and <db:code role="parameter">other</db:code> are not equal.</db:para>
<db:para>The value of <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is not considered in the comparison.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoRouteSegment &amp;QGeoRouteSegment::operator=(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this route segment object and then returns a reference to this route segment object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoRouteSegment::operator==(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route segment and <db:code role="parameter">other</db:code> are equal.</db:para>
<db:para>The value of <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is not considered in the comparison.</db:para>
</db:section>
</db:section>
</db:article>
