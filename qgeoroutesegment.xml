<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRouteSegment Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> class represents a segment of a route.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRouteSegment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRouteSegment is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> instance has information about the physical layout of the route segment, the length of the route and estimated time required to traverse the route segment and an optional <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> associated with the beginning of the route segment.</db:para>
<db:para><db:link xlink:href="qgeoroutesegment.xml">QGeoRouteSegment</db:link> instances can be thought of as edges on a routing graph, with <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> instances as optional labels attached to the vertices of the graph.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="distance-prop">
<db:title>[read-only] distance : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>distance</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">distance</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the distance covered by this segment of the route, in meters.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">distance</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maneuver-prop">
<db:title>[read-only] maneuver : const QGeoManeuver</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QGeoManeuver</db:type>
<db:varname>maneuver</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maneuver</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maneuver for this route segment.</db:para>
<db:para>Holds an invalid <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> if no information has been attached to the starting point of this route segment.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link></db:type> <db:emphasis role="bold">maneuver</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="path-prop">
<db:title>[read-only] path : const QList&lt;QGeoCoordinate&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;QGeoCoordinate&gt;</db:type>
<db:varname>path</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">path</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the geometric shape of this route segment of the route.</db:para>
<db:para>The coordinates should be listed in the order in which they would be traversed by someone traveling along this segment of the route.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:type>&gt; <db:emphasis role="bold">path</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="travelTime-prop">
<db:title>[read-only] travelTime : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>travelTime</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">travelTime</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the estimated amount of time, in seconds, that it will take to traverse this segment.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">travelTime</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRouteSegment">
<db:title>QGeoRouteSegment::QGeoRouteSegment()</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRouteSegment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteSegment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid route segment object.</db:para>
<db:para>The route segment will remain invalid until one of <db:link xlink:href="qgeoroutesegment.xml#setNextRouteSegment">setNextRouteSegment</db:link>(), setTravelTime(), setDistance(), setPath() or setManeuver() is called.</db:para>
</db:section>
<db:section xml:id="QGeoRouteSegment-1">
<db:title>QGeoRouteSegment::QGeoRouteSegment(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRouteSegment</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteSegment(const QGeoRouteSegment &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a route segment object from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRouteSegment">
<db:title>QGeoRouteSegment::~QGeoRouteSegment()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoRouteSegment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoRouteSegment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this route segment object.</db:para>
</db:section>
<db:section xml:id="isLegLastSegment">
<db:title>bool QGeoRouteSegment::isLegLastSegment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLegLastSegment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLegLastSegment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this route segment is the last segment of a route leg.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QGeoRouteSegment::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this route segment is valid or not.</db:para>
<db:para>If <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is called on the last route segment of a route, the returned value will be an invalid route segment.</db:para>
</db:section>
<db:section xml:id="nextRouteSegment">
<db:title>QGeoRouteSegment QGeoRouteSegment::nextRouteSegment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteSegment</db:type>
<db:methodname>nextRouteSegment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteSegment nextRouteSegment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the next route segment in the route.</db:para>
<db:para>Will return an invalid route segment if this is the last route segment in the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#setNextRouteSegment">setNextRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNextRouteSegment">
<db:title>void QGeoRouteSegment::setNextRouteSegment(const QGeoRouteSegment &amp;<db:emphasis>routeSegment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNextRouteSegment</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>routeSegment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNextRouteSegment(const QGeoRouteSegment &amp;routeSegment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the next route segment in the route to <db:code role="parameter">routeSegment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoRouteSegment &amp;QGeoRouteSegment::operator=(const QGeoRouteSegment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoRouteSegment &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteSegment &amp; operator=(const QGeoRouteSegment &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this route segment object and then returns a reference to this route segment object.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QGeoRouteSegment &amp;<db:emphasis>lhs</db:emphasis>, const QGeoRouteSegment &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGeoRouteSegment &amp;lhs, const QGeoRouteSegment &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the route segments <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are not equal.</db:para>
<db:para>The value of <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is not considered in the comparison.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QGeoRouteSegment &amp;<db:emphasis>lhs</db:emphasis>, const QGeoRouteSegment &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoRouteSegment &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGeoRouteSegment &amp;lhs, const QGeoRouteSegment &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the route segments <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal.</db:para>
<db:para>The value of <db:link xlink:href="qgeoroutesegment.xml#nextRouteSegment">nextRouteSegment</db:link>() is not considered in the comparison.</db:para>
</db:section>
</db:section>
</db:article>
