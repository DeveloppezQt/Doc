<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTouchEventSequence Class</db:title>
<db:subtitle>QTest::QTouchEventSequence</db:subtitle>
<db:productname>QtTestLib</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Test Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link> class is used to simulate a sequence of touch events.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTouchEventSequence</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += testlib</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To simulate a sequence of touch events on a specific device for a window or widget, call <db:link xlink:href="qtest.xml#touchEvent">QTest::touchEvent</db:link> to create a <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link> instance. Add touch events to the sequence by calling <db:link xlink:href="qtest-qtoucheventsequence.xml#press">press</db:link>(), <db:link xlink:href="qtest-qtoucheventsequence.xml#move">move</db:link>(), <db:link xlink:href="qtest-qtoucheventsequence.xml#release">release</db:link>() and <db:link xlink:href="qtest-qtoucheventsequence.xml#stationary">stationary</db:link>(), and let the instance run out of scope to commit the sequence to the event system.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QWidget widget;

QTest::touchEvent(&amp;widget)
    .press(0, QPoint(10, 10));
QTest::touchEvent(&amp;widget)
    .stationary(0)
    .press(1, QPoint(40, 10));
QTest::touchEvent(&amp;widget)
    .move(0, QPoint(12, 12))
    .move(1, QPoint(45, 5));
QTest::touchEvent(&amp;widget)
    .release(0, QPoint(12, 12))
    .release(1, QPoint(45, 5));
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QTouchEventSequence">
<db:title>[noexcept] QTouchEventSequence::~QTouchEventSequence()</db:title>
<db:para>Commits this sequence of touch events, unless autoCommit was disabled, and frees allocated resources.</db:para>
</db:section>
<db:section xml:id="commit">
<db:title>void QTouchEventSequence::commit(bool <db:emphasis>processEvents</db:emphasis> = true)</db:title>
<db:para>Commits this sequence of touch events to the event system. Normally there is no need to call this function because it is called from the destructor. However, if autoCommit is disabled, the events only get committed upon explicitly calling this function.</db:para>
<db:para>In special cases tests may want to disable the processing of the events. This can be achieved by setting <db:code role="parameter">processEvents</db:code> to false. This results in merely queuing the events, the event loop will not be forced to process them.</db:para>
</db:section>
<db:section xml:id="move">
<db:title>[since 5.0] QTest::QTouchEventSequence &amp;QTouchEventSequence::move(int <db:emphasis>touchId</db:emphasis>, const int &amp;<db:emphasis>pt</db:emphasis>, int *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>Adds a move event for touchpoint <db:code role="parameter">touchId</db:code> at position <db:code role="parameter">pt</db:code> to this sequence and returns a reference to this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>The position <db:code role="parameter">pt</db:code> is interpreted as relative to <db:code role="parameter">widget</db:code>. If <db:code role="parameter">widget</db:code> is the null pointer, then <db:code role="parameter">pt</db:code> is interpreted as relative to the widget provided when instantiating this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>Simulates that the user moved the finger identified by <db:code role="parameter">touchId</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="press">
<db:title>[since 5.0] QTest::QTouchEventSequence &amp;QTouchEventSequence::press(int <db:emphasis>touchId</db:emphasis>, const int &amp;<db:emphasis>pt</db:emphasis>, int *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>Adds a press event for touchpoint <db:code role="parameter">touchId</db:code> at position <db:code role="parameter">pt</db:code> to this sequence and returns a reference to this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>The position <db:code role="parameter">pt</db:code> is interpreted as relative to <db:code role="parameter">widget</db:code>. If <db:code role="parameter">widget</db:code> is the null pointer, then <db:code role="parameter">pt</db:code> is interpreted as relative to the widget provided when instantiating this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>Simulates that the user pressed the touch screen or pad with the finger identified by <db:code role="parameter">touchId</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="release">
<db:title>[since 5.0] QTest::QTouchEventSequence &amp;QTouchEventSequence::release(int <db:emphasis>touchId</db:emphasis>, const int &amp;<db:emphasis>pt</db:emphasis>, int *<db:emphasis>widget</db:emphasis> = 0)</db:title>
<db:para>Adds a release event for touchpoint <db:code role="parameter">touchId</db:code> at position <db:code role="parameter">pt</db:code> to this sequence and returns a reference to this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>The position <db:code role="parameter">pt</db:code> is interpreted as relative to <db:code role="parameter">widget</db:code>. If <db:code role="parameter">widget</db:code> is the null pointer, then <db:code role="parameter">pt</db:code> is interpreted as relative to the widget provided when instantiating this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>Simulates that the user lifted the finger identified by <db:code role="parameter">touchId</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="stationary">
<db:title>QTest::QTouchEventSequence &amp;QTouchEventSequence::stationary(int <db:emphasis>touchId</db:emphasis>)</db:title>
<db:para>Adds a stationary event for touchpoint <db:code role="parameter">touchId</db:code> to this sequence and returns a reference to this <db:link xlink:href="qtest-qtoucheventsequence.xml">QTouchEventSequence</db:link>.</db:para>
<db:para>Simulates that the user did not move the finger identified by <db:code role="parameter">touchId</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
