<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Line Edits Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Line Edits example demonstrates the many ways that <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> can be used, and shows the effects of various properties and validators on the input and output supplied by the user.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lineedits-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example consists of a single Window class, containing a selection of line edits with different input constraints and display properties that can be changed by selecting items from comboboxes. Presenting these together helps developers choose suitable properties to use with line edits, and makes it easy to compare the effects of each validator on user input.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The Window class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link> and contains a constructor and several slots:</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window();

public slots:
    void echoChanged(int);
    void validatorChanged(int);
    void alignmentChanged(int);
    void inputMaskChanged(int);
    void accessChanged(int);

private:
    QLineEdit *echoLineEdit;
    QLineEdit *validatorLineEdit;
    QLineEdit *alignmentLineEdit;
    QLineEdit *inputMaskLineEdit;
    QLineEdit *accessLineEdit;
};
</db:programlisting>
<db:para>The slots are used to update the type of validator used for a given line edit when a new validator has been selected in the associated combobox. The line edits are stored in the window for use in these slots.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The Window constructor is used to set up the line edits, validators, and comboboxes, connect signals from the comboboxes to slots in the Window class, and arrange the child widgets in layouts.</db:para>
<db:para>We begin by constructing a <db:link xlink:href="qgroupbox.xml">group box</db:link> to hold a label, combobox, and line edit so that we can demonstrate the <db:link xlink:href="qlineedit.xml#echoMode-prop">QLineEdit::echoMode</db:link> property:</db:para>
<db:programlisting language="cpp">Window::Window()
{
    QGroupBox *echoGroup = new QGroupBox(tr(&quot;Echo&quot;));

    QLabel *echoLabel = new QLabel(tr(&quot;Mode:&quot;));
    QComboBox *echoComboBox = new QComboBox;
    echoComboBox-&amp;gt;addItem(tr(&quot;Normal&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;Password&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;PasswordEchoOnEdit&quot;));
    echoComboBox-&amp;gt;addItem(tr(&quot;No Echo&quot;));

    echoLineEdit = new QLineEdit;
    echoLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
    echoLineEdit-&amp;gt;setFocus();
</db:programlisting>
<db:para>At this point, none of these widgets have been arranged in layouts. Eventually, the echoLabel, echoComboBox, and echoLineEdit will be placed in a vertical layout inside the echoGroup group box.</db:para>
<db:para>Similarly, we construct group boxes and collections of widgets to show the effects of <db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> and <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> on a line edit's contents:</db:para>
<db:programlisting language="cpp">    QGroupBox *validatorGroup = new QGroupBox(tr(&quot;Validator&quot;));

    QLabel *validatorLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *validatorComboBox = new QComboBox;
    validatorComboBox-&amp;gt;addItem(tr(&quot;No validator&quot;));
    validatorComboBox-&amp;gt;addItem(tr(&quot;Integer validator&quot;));
    validatorComboBox-&amp;gt;addItem(tr(&quot;Double validator&quot;));

    validatorLineEdit = new QLineEdit;
    validatorLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
</db:programlisting>
<db:para>Text alignment is demonstrated by another group of widgets:</db:para>
<db:programlisting language="cpp">    QGroupBox *alignmentGroup = new QGroupBox(tr(&quot;Alignment&quot;));

    QLabel *alignmentLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *alignmentComboBox = new QComboBox;
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Left&quot;));
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Centered&quot;));
    alignmentComboBox-&amp;gt;addItem(tr(&quot;Right&quot;));

    alignmentLineEdit = new QLineEdit;
    alignmentLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qlineedit.xml">QLineEdit</db:link> supports the use of <db:link xlink:href="qlineedit.xml#inputMask-prop">input masks</db:link>. These only allow the user to type characters into the line edit that follow a simple specification. We construct a group of widgets to demonstrate a selection of predefined masks:</db:para>
<db:programlisting language="cpp">    QGroupBox *inputMaskGroup = new QGroupBox(tr(&quot;Input mask&quot;));

    QLabel *inputMaskLabel = new QLabel(tr(&quot;Type:&quot;));
    QComboBox *inputMaskComboBox = new QComboBox;
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;No mask&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;Phone number&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;ISO date&quot;));
    inputMaskComboBox-&amp;gt;addItem(tr(&quot;License key&quot;));

    inputMaskLineEdit = new QLineEdit;
    inputMaskLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
</db:programlisting>
<db:para>Another useful feature of <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> is its ability to make its contents read-only. This property is used to control access to a line edit in the following group of widgets:</db:para>
<db:programlisting language="cpp">    QGroupBox *accessGroup = new QGroupBox(tr(&quot;Access&quot;));

    QLabel *accessLabel = new QLabel(tr(&quot;Read-only:&quot;));
    QComboBox *accessComboBox = new QComboBox;
    accessComboBox-&amp;gt;addItem(tr(&quot;False&quot;));
    accessComboBox-&amp;gt;addItem(tr(&quot;True&quot;));

    accessLineEdit = new QLineEdit;
    accessLineEdit-&amp;gt;setPlaceholderText(&quot;Placeholder Text&quot;);
</db:programlisting>
<db:para>Now that all the child widgets have been constructed, we connect signals from the comboboxes to slots in the Window object:</db:para>
<db:programlisting language="cpp">    connect(echoComboBox, SIGNAL(activated(int)),
            this, SLOT(echoChanged(int)));
    connect(validatorComboBox, SIGNAL(activated(int)),
            this, SLOT(validatorChanged(int)));
    connect(alignmentComboBox, SIGNAL(activated(int)),
            this, SLOT(alignmentChanged(int)));
    connect(inputMaskComboBox, SIGNAL(activated(int)),
            this, SLOT(inputMaskChanged(int)));
    connect(accessComboBox, SIGNAL(activated(int)),
            this, SLOT(accessChanged(int)));
</db:programlisting>
<db:para>Each of these connections use the <db:link xlink:href="qcombobox.xml#activated">QComboBox::activated</db:link>() signal that supplies an integer to the slot. This will be used to efficiently make changes to the appropriate line edit in each slot.</db:para>
<db:para>We place each combobox, line edit, and label in a layout for each group box, beginning with the layout for the echoGroup group box:</db:para>
<db:programlisting language="cpp">    QGridLayout *echoLayout = new QGridLayout;
    echoLayout-&amp;gt;addWidget(echoLabel, 0, 0);
    echoLayout-&amp;gt;addWidget(echoComboBox, 0, 1);
    echoLayout-&amp;gt;addWidget(echoLineEdit, 1, 0, 1, 2);
    echoGroup-&amp;gt;setLayout(echoLayout);
</db:programlisting>
<db:para>The other layouts are constructed in the same way:</db:para>
<db:programlisting language="cpp">    QGridLayout *validatorLayout = new QGridLayout;
    validatorLayout-&amp;gt;addWidget(validatorLabel, 0, 0);
    validatorLayout-&amp;gt;addWidget(validatorComboBox, 0, 1);
    validatorLayout-&amp;gt;addWidget(validatorLineEdit, 1, 0, 1, 2);
    validatorGroup-&amp;gt;setLayout(validatorLayout);

    QGridLayout *alignmentLayout = new QGridLayout;
    alignmentLayout-&amp;gt;addWidget(alignmentLabel, 0, 0);
    alignmentLayout-&amp;gt;addWidget(alignmentComboBox, 0, 1);
    alignmentLayout-&amp;gt;addWidget(alignmentLineEdit, 1, 0, 1, 2);
    alignmentGroup-&amp;gt; setLayout(alignmentLayout);

    QGridLayout *inputMaskLayout = new QGridLayout;
    inputMaskLayout-&amp;gt;addWidget(inputMaskLabel, 0, 0);
    inputMaskLayout-&amp;gt;addWidget(inputMaskComboBox, 0, 1);
    inputMaskLayout-&amp;gt;addWidget(inputMaskLineEdit, 1, 0, 1, 2);
    inputMaskGroup-&amp;gt;setLayout(inputMaskLayout);

    QGridLayout *accessLayout = new QGridLayout;
    accessLayout-&amp;gt;addWidget(accessLabel, 0, 0);
    accessLayout-&amp;gt;addWidget(accessComboBox, 0, 1);
    accessLayout-&amp;gt;addWidget(accessLineEdit, 1, 0, 1, 2);
    accessGroup-&amp;gt;setLayout(accessLayout);
</db:programlisting>
<db:para>Finally, we place each group box in a grid layout for the Window object and set the window title:</db:para>
<db:programlisting language="cpp">    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(echoGroup, 0, 0);
    layout-&amp;gt;addWidget(validatorGroup, 1, 0);
    layout-&amp;gt;addWidget(alignmentGroup, 2, 0);
    layout-&amp;gt;addWidget(inputMaskGroup, 0, 1);
    layout-&amp;gt;addWidget(accessGroup, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Line Edits&quot;));
}
</db:programlisting>
<db:para>The slots respond to signals emitted when the comboboxes are changed by the user.</db:para>
<db:para>When the combobox for the <db:guilabel>Echo</db:guilabel> group box is changed, the echoChanged() slot is called:</db:para>
<db:programlisting language="cpp">void Window::echoChanged(int index)
{
    switch (index) {
    case 0:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::Normal);
        break;
    case 1:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::Password);
        break;
    case 2:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::PasswordEchoOnEdit);
        break;
    case 3:
        echoLineEdit-&amp;gt;setEchoMode(QLineEdit::NoEcho);
    }
}
</db:programlisting>
<db:para>The slot updates the line edit in the same group box to use an echo mode that corresponds to the entry described in the combobox.</db:para>
<db:para>When the combobox for the <db:guilabel>Validator</db:guilabel> group box is changed, the validatorChanged() slot is called:</db:para>
<db:programlisting language="cpp">void Window::validatorChanged(int index)
{
    switch (index) {
    case 0:
        validatorLineEdit-&amp;gt;setValidator(0);
        break;
    case 1:
        validatorLineEdit-&amp;gt;setValidator(new QIntValidator(
            validatorLineEdit));
        break;
    case 2:
        validatorLineEdit-&amp;gt;setValidator(new QDoubleValidator(-999.0,
            999.0, 2, validatorLineEdit));
    }

    validatorLineEdit-&amp;gt;clear();
}
</db:programlisting>
<db:para>The slot either creates a new validator for the line edit to use, or it removes the validator in use by calling <db:link xlink:href="qlineedit.xml#setValidator">QLineEdit::setValidator</db:link>() with a zero pointer. We clear the line edit in this case to ensure that the new validator is initially given valid input to work with.</db:para>
<db:para>When the combobox for the <db:guilabel>Alignment</db:guilabel> group box is changed, the alignmentChanged() slot is called:</db:para>
<db:programlisting language="cpp">void Window::alignmentChanged(int index)
{
    switch (index) {
    case 0:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignLeft);
        break;
    case 1:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignCenter);
        break;
    case 2:
        alignmentLineEdit-&amp;gt;setAlignment(Qt::AlignRight);
    }
}
</db:programlisting>
<db:para>This changes the way that text is displayed in the line edit to correspond with the description selected in the combobox.</db:para>
<db:para>The inputMaskChanged() slot handles changes to the combobox in the <db:guilabel>Input Mask</db:guilabel> group box:</db:para>
<db:programlisting language="cpp">void Window::inputMaskChanged(int index)
{
    switch (index) {
    case 0:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;&quot;);
        break;
    case 1:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;+99 99 99 99 99;_&quot;);
        break;
    case 2:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;0000-00-00&quot;);
        inputMaskLineEdit-&amp;gt;setText(&quot;00000000&quot;);
        inputMaskLineEdit-&amp;gt;setCursorPosition(0);
        break;
    case 3:
        inputMaskLineEdit-&amp;gt;setInputMask(&quot;&amp;gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&quot;);
    }
}
</db:programlisting>
<db:para>Each entry in the relevant combobox is associated with an input mask. We set a new mask by calling the <db:link xlink:href="qlineedit.xml#inputMask-prop">QLineEdit::setInputMask</db:link>() function with a suitable string; the mask is disabled if an empty string is used.</db:para>
<db:para>The accessChanged() slot handles changes to the combobox in the <db:guilabel>Access</db:guilabel> group box:</db:para>
<db:programlisting language="cpp">void Window::accessChanged(int index)
{
    switch (index) {
    case 0:
        accessLineEdit-&amp;gt;setReadOnly(false);
        break;
    case 1:
        accessLineEdit-&amp;gt;setReadOnly(true);
    }
}
</db:programlisting>
<db:para>Here, we simply associate the <db:guilabel>False</db:guilabel> and <db:guilabel>True</db:guilabel> entries in the combobox with false and true values to be passed to <db:link xlink:href="qlineedit.xml#readOnly-prop">QLineEdit::setReadOnly</db:link>(). This allows the user to enable and disable input to the line edit.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="widgets/lineedits/lineedits.pro">widgets/lineedits/lineedits.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/lineedits/main.cpp">widgets/lineedits/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/lineedits/window.cpp">widgets/lineedits/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="widgets/lineedits/window.h">widgets/lineedits/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
