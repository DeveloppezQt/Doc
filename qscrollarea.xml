<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScrollArea Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> class provides a scrolling view onto another widget.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScrollArea</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScrollArea is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A scroll area is used to display the contents of a child widget within a frame. If the widget exceeds the size of the frame, the view can provide scroll bars so that the entire area of the child widget can be viewed. The child widget must be specified with <db:link xlink:href="qscrollarea.xml#setWidget">setWidget</db:link>(). For example:</db:para>
<db:programlisting language="cpp">QLabel *imageLabel = new QLabel;
QImage image(&quot;happyguy.png&quot;);
imageLabel-&amp;gt;setPixmap(QPixmap::fromImage(image));

scrollArea = new QScrollArea;
scrollArea-&amp;gt;setBackgroundRole(QPalette::Dark);
scrollArea-&amp;gt;setWidget(imageLabel);
</db:programlisting>
<db:para>The code above creates a scroll area (shown in the images below) containing an image label. When scaling the image, the scroll area can provide the necessary scroll bars:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qscrollarea-noscrollbars.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qscrollarea-onescrollbar.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qscrollarea-twoscrollbars.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The scroll bars appearance depends on the currently set <db:link xlink:href="qt.xml#ScrollBarPolicy-enum">scroll bar policies</db:link>. You can control the appearance of the scroll bars using the inherited functionality from <db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link>.</db:para>
<db:para>For example, you can set the <db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBarPolicy-prop">QAbstractScrollArea::horizontalScrollBarPolicy</db:link> and <db:link xlink:href="qabstractscrollarea.xml#verticalScrollBarPolicy-prop">QAbstractScrollArea::verticalScrollBarPolicy</db:link> properties. Or if you want the scroll bars to adjust dynamically when the contents of the scroll area changes, you can use the <db:link xlink:href="qabstractscrollarea.xml#horizontalScrollBar">horizontalScrollBar</db:link>() and <db:link xlink:href="qabstractscrollarea.xml#verticalScrollBar">verticalScrollBar</db:link>() functions (which enable you to access the scroll bars) and set the scroll bars' values whenever the scroll area's contents change, using the <db:link xlink:href="qabstractslider.xml#value-prop">QScrollBar::setValue</db:link>() function.</db:para>
<db:para>You can retrieve the child widget using the <db:link xlink:href="qscrollarea.xml#widget">widget</db:link>() function. The view can be made to be resizable with the <db:link xlink:href="qscrollarea.xml#widgetResizable-prop">setWidgetResizable</db:link>() function. The alignment of the widget can be specified with <db:link xlink:href="qscrollarea.xml#alignment-prop">setAlignment</db:link>().</db:para>
<db:para>Two convenience functions <db:link xlink:href="qscrollarea.xml#ensureVisible">ensureVisible</db:link>() and <db:link xlink:href="qscrollarea.xml#ensureWidgetVisible">ensureWidgetVisible</db:link>() ensure a certain region of the contents is visible inside the viewport, by scrolling the contents if necessary.</db:para>
<db:section xml:id="size-hints-and-layouts">
<db:title>Size Hints and Layouts</db:title>
<db:para>When using a scroll area to display the contents of a custom widget, it is important to ensure that the <db:link xlink:href="qwidget.xml#sizeHint-prop">size hint</db:link> of the child widget is set to a suitable value. If a standard <db:link xlink:href="qwidget.xml">QWidget</db:link> is used for the child widget, it may be necessary to call <db:link xlink:href="qwidget.xml#minimumSize-prop">QWidget::setMinimumSize</db:link>() to ensure that the contents of the widget are shown correctly within the scroll area.</db:para>
<db:para>If a scroll area is used to display the contents of a widget that contains child widgets arranged in a layout, it is important to realize that the size policy of the layout will also determine the size of the widget. This is especially useful to know if you intend to dynamically change the contents of the layout. In such cases, setting the layout's <db:link xlink:href="qlayout.xml#sizeConstraint-prop">size constraint</db:link> property to one which provides constraints on the minimum and/or maximum size of the layout (e.g., <db:link xlink:href="qlayout.xml#SizeConstraint-enum">QLayout::SetMinAndMaxSize</db:link>) will cause the size of the scroll area to be updated whenever the contents of the layout changes.</db:para>
<db:para>For a complete example using the <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> class, see the <db:link xlink:href="qtwidgets-widgets-imageviewer-example.xml">Image Viewer</db:link> example. The example shows how to combine <db:link xlink:href="qlabel.xml">QLabel</db:link> and <db:link xlink:href="qscrollarea.xml">QScrollArea</db:link> to display an image.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractscrollarea.xml">QAbstractScrollArea</db:link></db:member>
<db:member><db:link xlink:href="qscrollbar.xml">QScrollBar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-imageviewer-example.xml">Image Viewer Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>alignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the alignment of the scroll area's widget</db:para>
<db:para>A valid alignment is a combination of the following flags:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Qt::AlignLeft</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Qt::AlignHCenter</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Qt::AlignRight</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Qt::AlignTop</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Qt::AlignVCenter</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Qt::AlignBottom</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, the widget stays rooted to the top-left corner of the scroll area.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:emphasis>Qt::Alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="widgetResizable-prop">
<db:title>widgetResizable : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>widgetResizable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">widgetResizable</db:synopsisinfo>
<db:synopsisinfo role="setter">setWidgetResizable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the scroll area should resize the view widget</db:para>
<db:para>If this property is set to false (the default), the scroll area honors the size of its widget. Regardless of this property, you can programmatically resize the widget using <db:link xlink:href="qscrollarea.xml#widget">widget</db:link>()-&gt;<db:link xlink:href="qwidget.xml#size-prop">resize</db:link>(), and the scroll area will automatically adjust itself to the new size.</db:para>
<db:para>If this property is set to true, the scroll area will automatically resize the widget in order to avoid scroll bars where they can be avoided, or to take advantage of extra space.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">widgetResizable</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWidgetResizable</db:emphasis>(<db:type>bool</db:type> <db:emphasis>resizable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScrollArea">
<db:title>[explicit] QScrollArea::QScrollArea(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QScrollArea</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QScrollArea(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty scroll area with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QScrollArea">
<db:title>[virtual] QScrollArea::~QScrollArea()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QScrollArea</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QScrollArea()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the scroll area and its child widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ensureVisible">
<db:title>void QScrollArea::ensureVisible(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureVisible</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureVisible(int x, int y, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the contents of the scroll area so that the point (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) is visible inside the region of the viewport with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified point cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
</db:section>
<db:section xml:id="ensureWidgetVisible">
<db:title>void QScrollArea::ensureWidgetVisible(QWidget *<db:emphasis>childWidget</db:emphasis>, int <db:emphasis>xmargin</db:emphasis> = 50, int <db:emphasis>ymargin</db:emphasis> = 50)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>ensureWidgetVisible</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>childWidget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>xmargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>ymargin</db:parameter>
<db:initializer>50</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void ensureWidgetVisible(QWidget *childWidget, int xmargin, int ymargin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Scrolls the contents of the scroll area so that the <db:code role="parameter">childWidget</db:code> of <db:link xlink:href="qscrollarea.xml#widget">QScrollArea::widget</db:link>() is visible inside the viewport with margins specified in pixels by <db:code role="parameter">xmargin</db:code> and <db:code role="parameter">ymargin</db:code>. If the specified point cannot be reached, the contents are scrolled to the nearest valid position. The default value for both margins is 50 pixels.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QScrollArea::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#event" role="function">QAbstractScrollArea::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QScrollArea::eventFilter(QObject *<db:emphasis>o</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventFilter</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventFilter(QObject *o, QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual] bool QScrollArea::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QScrollArea::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeEvent</db:methodname>
<db:methodparam>
<db:type>QResizeEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeEvent(QResizeEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#resizeEvent" role="function">QAbstractScrollArea::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="scrollContentsBy">
<db:title>[override virtual protected] void QScrollArea::scrollContentsBy(int <db:emphasis>dx</db:emphasis>, int <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>scrollContentsBy</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void scrollContentsBy(int dx, int dy) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#scrollContentsBy" role="function">QAbstractScrollArea::scrollContentsBy(int dx, int dy)</db:link>.</db:para>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QScrollArea::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidget(QWidget *widget)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the scroll area's <db:code role="parameter">widget</db:code>.</db:para>
<db:para>The <db:code role="parameter">widget</db:code> becomes a child of the scroll area, and will be destroyed when the scroll area is deleted or when a new widget is set.</db:para>
<db:para>The widget's <db:link xlink:href="qwidget.xml#autoFillBackground-prop">autoFillBackground</db:link> property will be set to <db:code>true</db:code>.</db:para>
<db:para>If the scroll area is visible when the <db:code role="parameter">widget</db:code> is added, you must <db:link xlink:href="qwidget.xml#show">show</db:link>() it explicitly.</db:para>
<db:para>Note that You must add the layout of <db:code role="parameter">widget</db:code> before you call this function; if you add it later, the <db:code role="parameter">widget</db:code> will not be visible - regardless of when you <db:link xlink:href="qwidget.xml#show">show</db:link>() the scroll area. In this case, you can also not <db:link xlink:href="qwidget.xml#show">show</db:link>() the <db:code role="parameter">widget</db:code> later.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QScrollArea::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#sizeHint" role="function">QAbstractScrollArea::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="takeWidget">
<db:title>QWidget *QScrollArea::takeWidget()</db:title>
<db:methodsynopsis>
<db:type>QWidget *</db:type>
<db:methodname>takeWidget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * takeWidget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the scroll area's widget, and passes ownership of the widget to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="viewportSizeHint">
<db:title>[override virtual protected] QSize QScrollArea::viewportSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>viewportSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize viewportSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractscrollarea.xml#viewportSizeHint" role="function">QAbstractScrollArea::viewportSizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QScrollArea::widget() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>widget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * widget() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scroll area's widget, or <db:code>nullptr</db:code> if there is none.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscrollarea.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
