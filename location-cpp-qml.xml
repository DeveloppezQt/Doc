<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Interfaces between C++ and QML Code in Qt Location</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Some of the location QML types providing interfaces to access and modify properties in C++.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="category-qplacecategory">
<db:title>Category - QPlaceCategory</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-category.xml#category-prop">Category.category</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Category object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>category</db:code> property. The following gets the <db:link xlink:href="qplacecategory.xml">QPlaceCategory</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceCategory category = qmlObject-&gt;property(&quot;category&quot;).value&lt;QPlaceCategory&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplacecategory.xml">QPlaceCategory</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;category&quot;, QVariant::fromValue(category));
</db:programlisting>
</db:section>
<db:section xml:id="contactdetail-qdeclarativecontactdetail">
<db:title>ContactDetail - QDeclarativeContactDetail</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-contactdetail.xml#contactDetail-prop">ContactDetail.contactDetail</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a <db:link xlink:href="qml-qtlocation-contactdetail.xml">ContactDetail</db:link> object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>contactDetail</db:code> property. The following gets the <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceContactDetail contactDetail = qmlObject-&gt;property(&quot;contactDetail&quot;).value&lt;QPlaceContactDetail&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplacecontactdetail.xml">QPlaceContactDetail</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;contactDetail&quot;, QVariant::fromValue(contactDetail));
</db:programlisting>
</db:section>
<db:section xml:id="place-qplace">
<db:title>Place - QPlace</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-place.xml#place-prop">Place.place</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Place object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>place</db:code> property. The following gets the <db:link xlink:href="qplace.xml">QPlace</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlace place = qmlObject-&gt;property(&quot;place&quot;).value&lt;QPlace&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplace.xml">QPlace</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;place&quot;, QVariant::fromValue(place));
</db:programlisting>
</db:section>
<db:section xml:id="placeattribute-qplaceattribute">
<db:title>PlaceAttribute - QPlaceAttribute</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-placeattribute.xml#attribute-prop">PlaceAttribute.attribute</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a <db:link xlink:href="qml-qtlocation-placeattribute.xml">PlaceAttribute</db:link> object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>attribute</db:code> property. The following gets the <db:link xlink:href="qplaceattribute.xml">QPlaceAttribute</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceAttribute placeAttribute = qmlObject-&gt;property(&quot;attribute&quot;).value&lt;QPlaceAttribute&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplaceattribute.xml">QPlaceAttribute</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;attribute&quot;, QVariant::fromValue(placeAttribute));
</db:programlisting>
</db:section>
<db:section xml:id="icon-qplaceicon">
<db:title>Icon - QPlaceIcon</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-icon.xml#icon-prop">Icon.icon</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Icon object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>icon</db:code> property. The following gets the <db:link xlink:href="qplaceicon.xml">QPlaceIcon</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceIcon placeIcon = qmlObject-&gt;property(&quot;icon&quot;).value&lt;QPlaceIcon&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplaceicon.xml">QPlaceIcon</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;icon&quot;, QVariant::fromValue(placeIcon));
</db:programlisting>
</db:section>
<db:section xml:id="user-qplaceuser">
<db:title>User - QPlaceUser</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-user.xml#user-prop">User.user</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a User object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>user</db:code> property. The following gets the <db:link xlink:href="qplaceuser.xml">QPlaceUser</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceUser placeUser = qmlObject-&gt;property(&quot;user&quot;).value&lt;QPlaceUser&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplaceuser.xml">QPlaceUser</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;user&quot;, QVariant::fromValue(placeUser));
</db:programlisting>
</db:section>
<db:section xml:id="ratings-qplaceratings">
<db:title>Ratings - QPlaceRatings</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-ratings.xml#ratings-prop">Ratings.ratings</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Ratings object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>ratings</db:code> property. The following gets the QPlaceRating representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceRatings placeRatings = qmlObject-&gt;property(&quot;ratings&quot;).value&lt;QPlaceRatings&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplaceratings.xml">QPlaceRatings</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;ratings&quot;, QVariant::fromValue(placeRatings));
</db:programlisting>
</db:section>
<db:section xml:id="supplier-qplacesupplier">
<db:title>Supplier - QPlaceSupplier</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-supplier.xml#supplier-prop">Supplier.supplier</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Supplier object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>supplier</db:code> property. The following gets the <db:link xlink:href="qplacesupplier.xml">QPlaceSupplier</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QPlaceSupplier placeSupplier = qmlObject-&gt;property(&quot;supplier&quot;).value&lt;QPlaceSupplier&gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qplacesupplier.xml">QPlaceSupplier</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&gt;setProperty(&quot;supplier&quot;, QVariant::fromValue(placeSupplier));
</db:programlisting>
</db:section>
</db:article>
