<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLTimerQuery Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link> class wraps an OpenGL timer query object.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLTimerQuery</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLTimerQuery is part of <db:simplelist><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>OpenGL timer query objects are OpenGL managed resources to measure the execution times of sequences of OpenGL commands on the GPU.</db:para>
<db:para>OpenGL offers various levels of support for timer queries, depending on the version of OpenGL you have and the presence of the ARB_timer_query or EXT_timer_query extensions. The support can be summarized as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>OpenGL &gt;=3.3 offers full support for all timer query functionality.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL 3.2 with the ARB_timer_query extension offers full support for all timer query functionality.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL &lt;=3.2 with the EXT_timer_query extension offers limited support in that the timestamp of the GPU cannot be queried. Places where this impacts functions provided by Qt classes will be highlighted in the function documentation.</db:para>
</db:listitem>
<db:listitem>
<db:para>OpenGL ES 2 (and OpenGL ES 3) do not provide any support for OpenGL timer queries.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>OpenGL represents time with a granularity of 1 nanosecond (1e-9 seconds). As a consequence of this, 32-bit integers would only give a total possible duration of approximately 4 seconds, which would not be difficult to exceed in poorly performing or lengthy operations. OpenGL therefore uses 64 bit integer types to represent times. A GLuint64 variable has enough width to contain a duration of hundreds of years, which is plenty for real-time rendering needs.</db:para>
<db:para>As with the other Qt OpenGL classes, <db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link> has a <db:link xlink:href="qopengltimerquery.xml#create">create</db:link>() function to create the underlying OpenGL object. This is to allow the developer to ensure that there is a valid current OpenGL context at the time.</db:para>
<db:para>Once created, timer queries can be issued in one of several ways. The simplest method is to delimit a block of commands with calls to <db:link xlink:href="qopengltimerquery.xml#begin">begin</db:link>() and <db:link xlink:href="qopengltimerquery.xml#end">end</db:link>(). This instructs OpenGL to measure the time taken from completing all commands issued prior to <db:link xlink:href="qopengltimerquery.xml#begin">begin</db:link>() until the completion of all commands issued prior to <db:link xlink:href="qopengltimerquery.xml#end">end</db:link>().</db:para>
<db:para>At the end of a frame we can retrieve the results by calling <db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>(). As this function's name implies, it blocks CPU execution until OpenGL notifies that the timer query result is available. To avoid blocking, you can check if the query result is available by calling <db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>(). Note that modern GPUs are deeply pipelined and query results may not become available for between 1-5 frames after they were issued.</db:para>
<db:para>Note that OpenGL does not permit nesting or interleaving of multiple timer queries using <db:link xlink:href="qopengltimerquery.xml#begin">begin</db:link>() and <db:link xlink:href="qopengltimerquery.xml#end">end</db:link>(). Using multiple timer queries and <db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>() avoids this limitation. When using <db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>() the result can be obtained at some later time using <db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>() and <db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>(). Qt provides the convenience class <db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link> that helps with using multiple query objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimemonitor.xml">QOpenGLTimeMonitor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLTimerQuery">
<db:title>[explicit] QOpenGLTimerQuery::QOpenGLTimerQuery(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLTimerQuery</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLTimerQuery(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link> instance with the given <db:code role="parameter">parent</db:code>. You must call <db:link xlink:href="qopengltimerquery.xml#create">create</db:link>() with a valid OpenGL context before using.</db:para>
</db:section>
<db:section xml:id="dtor.QOpenGLTimerQuery">
<db:title>[virtual] QOpenGLTimerQuery::~QOpenGLTimerQuery()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOpenGLTimerQuery</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLTimerQuery()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qopengltimerquery.xml">QOpenGLTimerQuery</db:link> and the underlying OpenGL resource.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>void QOpenGLTimerQuery::begin()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>begin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void begin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the start point in the OpenGL command queue for a sequence of commands to be timed by this query object.</db:para>
<db:para>This is useful for simple use-cases. Usually it is better to use <db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLTimerQuery::create()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>create</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool create()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates the underlying OpenGL timer query object. There must be a valid OpenGL context that supports query objects current for this function to succeed.</db:para>
<db:para>Returns <db:code>true</db:code> if the OpenGL timer query object was successfully created.</db:para>
</db:section>
<db:section xml:id="destroy">
<db:title>void QOpenGLTimerQuery::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys the underlying OpenGL timer query object. The context that was current when <db:link xlink:href="qopengltimerquery.xml#create">create</db:link>() was called must be current when calling this function.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>void QOpenGLTimerQuery::end()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void end()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the end point in the OpenGL command queue for a sequence of commands to be timed by this query object.</db:para>
<db:para>This is useful for simple use-cases. Usually it is better to use <db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCreated">
<db:title>bool QOpenGLTimerQuery::isCreated() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreated() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the underlying OpenGL query object has been created. If this returns <db:code>true</db:code> and the associated OpenGL context is current, then you are able to issue queries with this object.</db:para>
</db:section>
<db:section xml:id="isResultAvailable">
<db:title>bool QOpenGLTimerQuery::isResultAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isResultAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isResultAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the OpenGL timer query result is available.</db:para>
<db:para>This function is non-blocking and ideally should be used to check for the availability of the query result before calling <db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="objectId">
<db:title>GLuint QOpenGLTimerQuery::objectId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>objectId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint objectId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the id of the underlying OpenGL query object.</db:para>
</db:section>
<db:section xml:id="recordTimestamp">
<db:title>void QOpenGLTimerQuery::recordTimestamp()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>recordTimestamp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void recordTimestamp()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Places a marker in the OpenGL command queue for the GPU to record the timestamp when this marker is reached by the GPU. This function is non-blocking and the result will become available at some later time.</db:para>
<db:para>The availability of the result can be checked with <db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>(). The result can be fetched with <db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>() which will block if the result is not yet available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#waitForResult">waitForResult</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qopengltimerquery.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForResult">
<db:title>GLuint64 QOpenGLTimerQuery::waitForResult() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint64</db:type>
<db:methodname>waitForResult</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint64 waitForResult() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of the OpenGL timer query.</db:para>
<db:para>This function will block until the result is made available by OpenGL. It is recommended to call <db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>() to ensure that the result is available to avoid unnecessary blocking and stalling.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#isResultAvailable">isResultAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waitForTimestamp">
<db:title>GLuint64 QOpenGLTimerQuery::waitForTimestamp() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint64</db:type>
<db:methodname>waitForTimestamp</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint64 waitForTimestamp() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current timestamp of the GPU when all previously issued OpenGL commands have been received but not necessarily executed by the GPU.</db:para>
<db:para>This function blocks until the result is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopengltimerquery.xml#recordTimestamp">recordTimestamp</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
