<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>FrameAnimation QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Triggers a handler at every animation frame update.</db:para>
<db:para>This type was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>FrameAnimation is part of <db:simplelist><db:member>qtquick-interceptors</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> can be used to trigger an action every time animations have progressed and an animation frame has been rendered. See the documentation about the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Scene Graph</db:link> for in-depth information about the threaded and basic render loops.</db:para>
<db:para>For general animations, prefer using NumberAnimation and other Animation elements as those provide declarative way to describe the animations.</db:para>
<db:para><db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> on the other hand should be used for custom imperative animations and in use-cases like these:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When you need to run some code on every frame update. Or e.g. every other frame, maybe using progressive rendering.</db:para>
</db:listitem>
<db:listitem>
<db:para>When the speed / target is changing during the animation, normal QML animations can be too limiting.</db:para>
</db:listitem>
<db:listitem>
<db:para>When more accurate frame update time is needed, e.g. for fps counter.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Compared to Timer which allows to set the interval time, <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> runs always in synchronization with the animation updates. If you have used Timer with a short interval for custom animations like below, please consider switching to use <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> instead for smoother animations.</db:para>
<db:programlisting language="cpp">// BAD
Timer {
    interval: 16
    repeat: true
    running: true
    onTriggered: {
        // Animate something
    }
}

// GOOD
FrameAnimation {
    running: true
    onTriggered: {
        // Animate something
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentFrame-prop">
<db:title>[read-only] currentFrame : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentFrame</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of frame updates since the start. When the frame animation is restarted, currentFrame starts from 0.</db:para>
<db:para>The following example shows how to react on frame updates.</db:para>
<db:programlisting language="cpp">FrameAnimation {
    running: true
    onTriggered: {
        // Run code on every frame update.
    }
}
</db:programlisting>
<db:para>This property can also be used for rendering only every nth frame. Consider an advanced usage where the UI contains two heavy elements and to reach smooth 60fps overall frame rate, you decide to render these heavy elements at 30fps, first one on every even frames and second one on every odd frames:</db:para>
<db:programlisting language="cpp">FrameAnimation {
    running: true
    onTriggered: {
        if (currentFrame % 2 == 0)
            updateUIElement1();
        else
            updateUIElement2();
   }
}
</db:programlisting>
<db:para>By default, frame is 0.</db:para>
</db:section>
<db:section xml:id="elapsedTime-prop">
<db:title>[read-only] elapsedTime : qreal</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>elapsedTime</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time (in seconds) since the previous start.</db:para>
<db:para>By default, elapsedTime is 0.</db:para>
</db:section>
<db:section xml:id="frameTime-prop">
<db:title>[read-only] frameTime : qreal</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>frameTime</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the time (in seconds) since the previous frame update.</db:para>
<db:para>The following example shows how to use frameTime to animate item with varying speed, adjusting to screen refresh rates and possible fps drops.</db:para>
<db:programlisting language="cpp">Rectangle {
    id: rect
    property real speed: 90
    width: 100
    height: 100
    color: &quot;red&quot;
    anchors.centerIn: parent
}

FrameAnimation {
    id: frameAnimation
    running: true
    onTriggered: {
        // Rotate the item speed-degrees / second.
        rect.rotation += rect.speed * frameTime
    }
}
</db:programlisting>
<db:para>By default, frameTime is 0.</db:para>
</db:section>
<db:section xml:id="paused-prop">
<db:title>paused : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>paused</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If set to true, pauses the frame animation; otherwise resumes it.</db:para>
<db:para><db:code role="parameter">paused</db:code> defaults to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-frameanimation.xml#pause-method">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-frameanimation.xml#resume-method">resume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="running-prop">
<db:title>running : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>running</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If set to true, starts the frame animation; otherwise stops it.</db:para>
<db:para><db:code role="parameter">running</db:code> defaults to false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-frameanimation.xml#stop-method">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-frameanimation.xml#start-method">start</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-frameanimation.xml#restart-method">restart</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="smoothFrameTime-prop">
<db:title>[read-only] smoothFrameTime : qreal</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>smoothFrameTime</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the smoothed time (in seconds) since the previous frame update.</db:para>
<db:para>The following example shows how to use smoothFrameTime to show average fps.</db:para>
<db:programlisting language="cpp">Text {
    text: &quot;fps: &quot; + frameAnimation.fps.toFixed(0)
}

FrameAnimation {
    id: frameAnimation
    property real fps: smoothFrameTime &amp;gt; 0 ? (1.0 / smoothFrameTime) : 0
    running: true
}
</db:programlisting>
<db:para>By default, smoothFrameTime is 0.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="triggered-signal">
<db:title>triggered()</db:title>
<db:para>This signal is emitted when the <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> has progressed to a new frame.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="pause-method">
<db:title>pause()</db:title>
<db:para>Pauses the frame animation</db:para>
<db:para>If the frame animation is already paused or not running, calling this method has no effect. The paused property will be true following a call to pause().</db:para>
</db:section>
<db:section xml:id="reset-method">
<db:title>reset()</db:title>
<db:para>Resets the frame animation properties</db:para>
<db:para>Calling this method resets the frame and elapsedTime to their initial values (0). This method has no effect on running or paused properties and can be called while they are true or false.</db:para>
<db:para>The difference between calling reset() and restart() is that reset() will always initialize the properties while restart() initializes them only at the next frame update which doesn't happen e.g. if restart() is immediately followed by pause().</db:para>
</db:section>
<db:section xml:id="restart-method">
<db:title>restart()</db:title>
<db:para>Restarts the frame animation</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick-frameanimation.xml">FrameAnimation</db:link> is not running it will be started, otherwise it will be stopped, reset to initial state and started. The running property will be true following a call to restart().</db:para>
</db:section>
<db:section xml:id="resume-method">
<db:title>resume()</db:title>
<db:para>Resumes a paused frame animation</db:para>
<db:para>If the frame animation is not paused or not running, calling this method has no effect. The paused property will be false following a call to resume().</db:para>
</db:section>
<db:section xml:id="start-method">
<db:title>start()</db:title>
<db:para>Starts the frame animation</db:para>
<db:para>If the frame animation is already running, calling this method has no effect. The running property will be true following a call to start().</db:para>
</db:section>
<db:section xml:id="stop-method">
<db:title>stop()</db:title>
<db:para>Stops the frame animation</db:para>
<db:para>If the frame animation is not running, calling this method has no effect. Both the running and paused properties will be false following a call to stop().</db:para>
</db:section>
</db:section>
</db:article>
