<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCoapReply Class</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> class holds the data of a CoAP reply.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCoapReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += coap</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qcoapresourcediscoveryreply.xml" xlink:role="class">QCoapResourceDiscoveryReply</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> contains data related to a request sent with the <db:link xlink:href="qcoapclient.xml">QCoapClient</db:link>.</db:para>
<db:para>The <db:link xlink:href="qcoapreply.xml#finished">finished</db:link>() signal is emitted when the response is fully received or when the request fails.</db:para>
<db:para>For <db:emphasis>Observe</db:emphasis> requests specifically, the notified() signal is emitted whenever a notification is received.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml">QCoapClient</db:link></db:member>
<db:member><db:link xlink:href="qcoaprequest.xml">QCoapRequest</db:link></db:member>
<db:member><db:link xlink:href="qcoapresourcediscoveryreply.xml">QCoapResourceDiscoveryReply</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QCoapReply">
<db:title>[override virtual] QCoapReply::~QCoapReply()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QCoapReply</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCoapReply() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> and aborts the request if its response has not yet been received.</db:para>
</db:section>
<db:section xml:id="abortRequest">
<db:title>void QCoapReply::abortRequest()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>abortRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void abortRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Aborts the request immediately and emits the <db:link xlink:href="qcoapreply.xml#aborted">aborted</db:link>(const QCoapToken &amp;token) signal if the request was not finished.</db:para>
</db:section>
<db:section xml:id="aborted">
<db:title>void QCoapReply::aborted(const QCoapToken &amp;<db:emphasis>token</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>aborted</db:methodname>
<db:methodparam>
<db:type>const QCoapToken &amp;</db:type>
<db:parameter>token</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void aborted(const QCoapToken &amp;token)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the request is aborted or the reply is deleted. Its <db:code role="parameter">token</db:code> parameter is the token of the exchange that has been aborted.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> is deleted while not finished, both aborted() and <db:link xlink:href="qcoapreply.xml#finished">finished</db:link>() signal will be emitted immediately before the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> is destroyed. Given the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> may have been deleted when receiving the signal, you should not rely on the <db:link xlink:href="qobject.xml#sender">sender</db:link>() object to be still valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapreply.xml#finished">finished</db:link>()</db:member>
<db:member>error()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorReceived">
<db:title>int QCoapReply::errorReceived() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>errorReceived</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int errorReceived() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error of the reply or QCoapReply::NoError if there is no error.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QCoapReply::finished(QCoapReply *<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:methodparam>
<db:type>QCoapReply *</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished(QCoapReply *reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the corresponding request finished, whether successfully or not. When a resource is observed, this signal will only be emitted once, when the observation ends.</db:para>
<db:para>The <db:code role="parameter">reply</db:code> parameter is the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> itself for convenience.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> is deleted while not finished, both <db:link xlink:href="qcoapreply.xml#aborted">aborted</db:link>() and finished() signal will be emitted immediately before the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> is destroyed. Given the <db:link xlink:href="qcoapreply.xml">QCoapReply</db:link> may have been deleted when receiving the signal, you should not rely on the <db:code role="parameter">reply</db:code> to be still valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapclient.xml#finished">QCoapClient::finished</db:link>()</db:member>
<db:member><db:link xlink:href="qcoapreply.xml#isFinished">isFinished</db:link>()</db:member>
<db:member>notified()</db:member>
<db:member><db:link xlink:href="qcoapreply.xml#aborted">aborted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAborted">
<db:title>bool QCoapReply::isAborted() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAborted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAborted() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the request has been aborted.</db:para>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QCoapReply::isFinished() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFinished() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the request is finished.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcoapreply.xml#finished">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRunning">
<db:title>bool QCoapReply::isRunning() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isRunning</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isRunning() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the request is running.</db:para>
</db:section>
<db:section xml:id="isSuccessful">
<db:title>bool QCoapReply::isSuccessful() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSuccessful</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSuccessful() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the request finished with no error.</db:para>
</db:section>
<db:section xml:id="message">
<db:title>int QCoapReply::message() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>message</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int message() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the contained message.</db:para>
</db:section>
<db:section xml:id="method">
<db:title>int QCoapReply::method() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>method</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int method() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the method of the associated request.</db:para>
</db:section>
<db:section xml:id="request">
<db:title>int QCoapReply::request() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>request</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int request() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the associated request.</db:para>
</db:section>
<db:section xml:id="responseCode">
<db:title>int QCoapReply::responseCode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>responseCode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int responseCode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the response code of the request.</db:para>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QCoapReply::url() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>url</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl url() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the target uri of the associated request.</db:para>
</db:section>
</db:section>
</db:article>
