<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt SCXML Media Player QML Example (Static)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick application that sends data to and receives it from a compiled ECMAScript data model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mediaplayer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Media Player QML Example (Static)</db:emphasis> demonstrates how to access data from an ECMAScript data model that is compiled into a C++ class.</db:para>
<db:para>The UI is created using Qt Quick.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-the-ecmascript-data-model">
<db:title>Using the ECMAScript Data Model</db:title>
<db:para>We specify the data model as a value of the <db:emphasis>datamodel</db:emphasis> attribute of the <db:code>&lt;scxml&gt;</db:code> element in <db:emphasis>mediaplayer-common/mediaplayer.scxml</db:emphasis>:</db:para>
<db:programlisting language="cpp">&amp;lt;scxml
    xmlns=&quot;http://www.w3.org/2005/07/scxml&quot;
    version=&quot;1.0&quot;
    name=&quot;MediaPlayerStateMachine&quot;
    initial=&quot;stopped&quot;
    datamodel=&quot;ecmascript&quot;
&amp;gt;
    &amp;lt;datamodel&amp;gt;
        &amp;lt;data id=&quot;media&quot;/&amp;gt;
    &amp;lt;/datamodel&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="compiling-the-state-machine">
<db:title>Compiling the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following lines to the example's build files.</db:para>
<db:section xml:id="pro-when-using-qmake">
<db:title><db:emphasis>.pro</db:emphasis> when using qmake:</db:title>
<db:programlisting language="cpp">QT += widgets scxml
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">STATECHARTS = ../mediaplayer-common/mediaplayer.scxml
</db:programlisting>
</db:section>
<db:section xml:id="cmakelists-txt-when-using-cmake">
<db:title><db:emphasis>CMakeLists.txt</db:emphasis> when using cmake:</db:title>
<db:programlisting language="cpp">find_package(Qt6 COMPONENTS Core Gui Widgets Scxml)

target_link_libraries(mediaplayer-widgets-static PUBLIC
    Qt6::Core
    Qt6::Gui
    Qt6::Scxml
    Qt6::Widgets
)
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">qt6_add_statecharts(mediaplayer-widgets-static
    ../mediaplayer-common/mediaplayer.scxml
)
</db:programlisting>
<db:para>The statechart directives <db:emphasis>STATECHARTS</db:emphasis> or <db:emphasis>qt6_add_statecharts</db:emphasis> invoke the Qt SCXML Compiler, <db:code>qscxmlc</db:code>, which is run automatically to generate a header and a source file, which are then added appropriately for compilation.</db:para>
</db:section>
</db:section>
<db:section xml:id="instantiating-the-state-machine">
<db:title>Instantiating the State Machine</db:title>
<db:para>We instantiate the generated <db:code>MediaPlayerStateMachine</db:code> class in <db:emphasis>mediaplayer-qml-static.cpp</db:emphasis>:</db:para>
<db:programlisting language="cpp">#include &quot;mediaplayer.h&quot;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);

    qmlRegisterType&amp;lt;MediaPlayerStateMachine&amp;gt;(&quot;MediaPlayerStateMachine&quot;, 1, 0, &quot;MediaPlayerStateMachine&quot;);

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:///mediaplayer-qml-static.qml&quot;)));
    if (engine.rootObjects().isEmpty())
        return -1;

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/scxml/mediaplayer-qml-static?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
