<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QQmlExpression Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> class evaluates JavaScript in a QML context.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlExpression</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>For example, given a file <db:code>main.qml</db:code> like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    width: 200; height: 200
}
</db:programlisting>
<db:para>The following code evaluates a JavaScript expression in the context of the above QML:</db:para>
<db:programlisting language="cpp">QQmlEngine *engine = new QQmlEngine;
QQmlComponent component(engine, QUrl::fromLocalFile(&quot;main.qml&quot;));

QObject *myObject = component.create();
QQmlExpression *expr = new QQmlExpression(engine-&gt;rootContext(), myObject, &quot;width * 2&quot;);
int result = expr-&gt;evaluate().toInt();  // result = 400
</db:programlisting>
<db:para>Note that the <db:link xlink:href="">Qt Quick 1</db:link> version is called QDeclarativeExpression.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlExpression">
<db:title>QQmlExpression::QQmlExpression()</db:title>
<db:para>Create an invalid <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link>.</db:para>
<db:para>As the expression will not have an associated <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>, this will be a null expression object and its value will always be an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="QQmlExpression-1">
<db:title>QQmlExpression::QQmlExpression(QQmlContext *<db:emphasis>ctxt</db:emphasis>, QObject *<db:emphasis>scope</db:emphasis>, const QString &amp;<db:emphasis>expression</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Create a <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> object that is a child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">expression</db:code> JavaScript will be executed in the <db:code role="parameter">ctxt</db:code> <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>. If specified, the <db:code role="parameter">scope</db:code> object's properties will also be in scope during the expression's execution.</db:para>
</db:section>
<db:section xml:id="QQmlExpression-2">
<db:title>[explicit] QQmlExpression::QQmlExpression(const QQmlScriptString &amp;<db:emphasis>script</db:emphasis>, QQmlContext *<db:emphasis>ctxt</db:emphasis> = 0, QObject *<db:emphasis>scope</db:emphasis> = 0, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Create a <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> object that is a child of <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The <db:code role="parameter">script</db:code> provides the expression to be evaluated, the context to evaluate it in, and the scope object to evaluate it with. If provided, <db:code role="parameter">ctxt</db:code> and <db:code role="parameter">scope</db:code> will override the context and scope object provided by <db:code role="parameter">script</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlscriptstring.xml">QQmlScriptString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QQmlExpression">
<db:title>[virtual noexcept] QQmlExpression::~QQmlExpression()</db:title>
<db:para>Destroy the <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> instance.</db:para>
</db:section>
<db:section xml:id="clearError">
<db:title>void QQmlExpression::clearError()</db:title>
<db:para>Clear any expression errors. Calls to <db:link xlink:href="qqmlexpression.xml#hasError">hasError</db:link>() following this will return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlexpression.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnNumber">
<db:title>int QQmlExpression::columnNumber() const</db:title>
<db:para>Returns the source file column number for this expression. The source location must have been previously set by calling <db:link xlink:href="qqmlexpression.xml#setSourceLocation">setSourceLocation</db:link>().</db:para>
</db:section>
<db:section xml:id="context">
<db:title>QQmlContext *QQmlExpression::context() const</db:title>
<db:para>Returns the <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> this expression is associated with, or 0 if there is no association or the <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link> has been destroyed.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQmlExpression::engine() const</db:title>
<db:para>Returns the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> this expression is associated with, or 0 if there is no association or the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> has been destroyed.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QQmlError QQmlExpression::error() const</db:title>
<db:para>Return any error from the last call to <db:link xlink:href="qqmlexpression.xml#evaluate">evaluate</db:link>(). If there was no error, this returns an invalid <db:link xlink:href="qqmlerror.xml">QQmlError</db:link> instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlexpression.xml#clearError">clearError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="evaluate">
<db:title>QVariant QQmlExpression::evaluate(bool *<db:emphasis>valueIsUndefined</db:emphasis> = 0)</db:title>
<db:para>Evaulates the expression, returning the result of the evaluation, or an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> if the expression is invalid or has an error.</db:para>
<db:para><db:code role="parameter">valueIsUndefined</db:code> is set to true if the expression resulted in an undefined value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#hasError">hasError</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlexpression.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expression">
<db:title>QString QQmlExpression::expression() const</db:title>
<db:para>Returns the expression string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#setExpression">setExpression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasError">
<db:title>bool QQmlExpression::hasError() const</db:title>
<db:para>Returns true if the last call to <db:link xlink:href="qqmlexpression.xml#evaluate">evaluate</db:link>() resulted in an error, otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qqmlexpression.xml#clearError">clearError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lineNumber">
<db:title>int QQmlExpression::lineNumber() const</db:title>
<db:para>Returns the source file line number for this expression. The source location must have been previously set by calling <db:link xlink:href="qqmlexpression.xml#setSourceLocation">setSourceLocation</db:link>().</db:para>
</db:section>
<db:section xml:id="notifyOnValueChanged">
<db:title>bool QQmlExpression::notifyOnValueChanged() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qqmlexpression.xml#valueChanged">valueChanged</db:link>() signal is emitted when the expression's evaluated value changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#setNotifyOnValueChanged">setNotifyOnValueChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scopeObject">
<db:title>QObject *QQmlExpression::scopeObject() const</db:title>
<db:para>Returns the expression's scope object, if provided, otherwise 0.</db:para>
<db:para>In addition to data provided by the expression's <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>, the scope object's properties are also in scope during the expression's evaluation.</db:para>
</db:section>
<db:section xml:id="setExpression">
<db:title>void QQmlExpression::setExpression(const QString &amp;<db:emphasis>expression</db:emphasis>)</db:title>
<db:para>Set the expression to <db:code role="parameter">expression</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#expression">expression</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNotifyOnValueChanged">
<db:title>void QQmlExpression::setNotifyOnValueChanged(bool <db:emphasis>notifyOnChange</db:emphasis>)</db:title>
<db:para>Sets whether the <db:link xlink:href="qqmlexpression.xml#valueChanged">valueChanged</db:link>() signal is emitted when the expression's evaluated value changes.</db:para>
<db:para>If <db:code role="parameter">notifyOnChange</db:code> is true, the <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> will monitor properties involved in the expression's evaluation, and emit <db:link xlink:href="qqmlexpression.xml#valueChanged">QQmlExpression::valueChanged</db:link>() if they have changed. This allows an application to ensure that any value associated with the result of the expression remains up to date.</db:para>
<db:para>If <db:code role="parameter">notifyOnChange</db:code> is false (default), the <db:link xlink:href="qqmlexpression.xml">QQmlExpression</db:link> will not montitor properties involved in the expression's evaluation, and <db:link xlink:href="qqmlexpression.xml#valueChanged">QQmlExpression::valueChanged</db:link>() will never be emitted. This is more efficient if an application wants a &quot;one off&quot; evaluation of the expression.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlexpression.xml#notifyOnValueChanged">notifyOnValueChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceLocation">
<db:title>void QQmlExpression::setSourceLocation(const QString &amp;<db:emphasis>url</db:emphasis>, int <db:emphasis>line</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0)</db:title>
<db:para>Set the location of this expression to <db:code role="parameter">line</db:code> of <db:code role="parameter">url</db:code>. This information is used by the script engine.</db:para>
</db:section>
<db:section xml:id="sourceFile">
<db:title>QString QQmlExpression::sourceFile() const</db:title>
<db:para>Returns the source file URL for this expression. The source location must have been previously set by calling <db:link xlink:href="qqmlexpression.xml#setSourceLocation">setSourceLocation</db:link>().</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QQmlExpression::valueChanged()</db:title>
<db:para>Emitted each time the expression value changes from the last time it was evaluated. The expression must have been evaluated at least once (by calling <db:link xlink:href="qqmlexpression.xml#evaluate">QQmlExpression::evaluate</db:link>()) before this signal will be emitted.</db:para>
</db:section>
</db:section>
</db:article>
