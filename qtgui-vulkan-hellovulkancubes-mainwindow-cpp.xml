<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello Vulkan Cubes Example</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows the basics of using <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;vulkanwindow.h&quot;
#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QLCDNumber&amp;gt;
#include &amp;lt;QCheckBox&amp;gt;
#include &amp;lt;QGridLayout&amp;gt;

MainWindow::MainWindow(VulkanWindow *vulkanWindow)
{
    QWidget *wrapper = QWidget::createWindowContainer(vulkanWindow);
    wrapper-&amp;gt;setFocusPolicy(Qt::StrongFocus);
    wrapper-&amp;gt;setFocus();

    infoLabel = new QLabel;
    infoLabel-&amp;gt;setFrameStyle(QFrame::Box | QFrame::Raised);
    infoLabel-&amp;gt;setAlignment(Qt::AlignCenter);
    infoLabel-&amp;gt;setText(tr(&quot;This example demonstrates instanced drawing\nof a mesh loaded from a file.\n&quot;
                          &quot;Uses a Phong material with a single light.\n&quot;
                          &quot;Also demonstrates dynamic uniform buffers\nand a bit of threading with QtConcurrent.\n&quot;
                          &quot;Uses 4x MSAA when available.\n&quot;
                          &quot;Comes with an FPS camera.\n&quot;
                          &quot;Hit [Shift+]WASD to walk and strafe.\nPress and move mouse to look around.\n&quot;
                          &quot;Click Add New to increase the number of instances.&quot;));

    meshSwitch = new QCheckBox(tr(&quot;&amp;amp;Use Qt logo&quot;));
    meshSwitch-&amp;gt;setFocusPolicy(Qt::NoFocus); // do not interfere with vulkanWindow's keyboard input

    counterLcd = new QLCDNumber(5);
    counterLcd-&amp;gt;setSegmentStyle(QLCDNumber::Filled);
    counterLcd-&amp;gt;display(m_count);

    newButton = new QPushButton(tr(&quot;&amp;amp;Add new&quot;));
    newButton-&amp;gt;setFocusPolicy(Qt::NoFocus);
    quitButton = new QPushButton(tr(&quot;&amp;amp;Quit&quot;));
    quitButton-&amp;gt;setFocusPolicy(Qt::NoFocus);
    pauseButton = new QPushButton(tr(&quot;&amp;amp;Pause&quot;));
    pauseButton-&amp;gt;setFocusPolicy(Qt::NoFocus);

    connect(quitButton, &amp;amp;QPushButton::clicked, qApp, &amp;amp;QCoreApplication::quit);
    connect(newButton, &amp;amp;QPushButton::clicked, vulkanWindow, [=] {
        vulkanWindow-&amp;gt;addNew();
        m_count = vulkanWindow-&amp;gt;instanceCount();
        counterLcd-&amp;gt;display(m_count);
    });
    connect(pauseButton, &amp;amp;QPushButton::clicked, vulkanWindow, &amp;amp;VulkanWindow::togglePaused);
    connect(meshSwitch, &amp;amp;QCheckBox::clicked, vulkanWindow, &amp;amp;VulkanWindow::meshSwitched);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(infoLabel, 0, 2);
    layout-&amp;gt;addWidget(meshSwitch, 1, 2);
    layout-&amp;gt;addWidget(createLabel(tr(&quot;INSTANCES&quot;)), 2, 2);
    layout-&amp;gt;addWidget(counterLcd, 3, 2);
    layout-&amp;gt;addWidget(newButton, 4, 2);
    layout-&amp;gt;addWidget(pauseButton, 5, 2);
    layout-&amp;gt;addWidget(quitButton, 6, 2);
    layout-&amp;gt;addWidget(wrapper, 0, 0, 7, 2);
    setLayout(layout);
}

QLabel *MainWindow::createLabel(const QString &amp;amp;text)
{
    QLabel *lbl = new QLabel(text);
    lbl-&amp;gt;setAlignment(Qt::AlignHCenter | Qt::AlignBottom);
    return lbl;
}

</db:programlisting>
</db:article>
