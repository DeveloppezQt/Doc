<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scribble Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Scribble example shows how to reimplement some of <db:link xlink:href="qwidget.xml">QWidget</db:link>'s event handlers to receive the events generated for the application's widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;mainwindow.h&quot;
#include &quot;scribblearea.h&quot;

MainWindow::MainWindow()
{
    scribbleArea = new ScribbleArea;
    setCentralWidget(scribbleArea);

    createActions();
    createMenus();

    setWindowTitle(tr(&quot;Scribble&quot;));
    resize(500, 500);
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    if (maybeSave()) {
        event-&amp;gt;accept();
    } else {
        event-&amp;gt;ignore();
    }
}

void MainWindow::open()
{
    if (maybeSave()) {
        QString fileName = QFileDialog::getOpenFileName(this,
                                   tr(&quot;Open File&quot;), QDir::currentPath());
        if (!fileName.isEmpty())
            scribbleArea-&amp;gt;openImage(fileName);
    }
}

void MainWindow::save()
{
    QAction *action = qobject_cast&amp;lt;QAction *&amp;gt;(sender());
    QByteArray fileFormat = action-&amp;gt;data().toByteArray();
    saveFile(fileFormat);
}

void MainWindow::penColor()
{
    QColor newColor = QColorDialog::getColor(scribbleArea-&amp;gt;penColor());
    if (newColor.isValid())
        scribbleArea-&amp;gt;setPenColor(newColor);
}

void MainWindow::penWidth()
{
    bool ok;
    int newWidth = QInputDialog::getInt(this, tr(&quot;Scribble&quot;),
                                        tr(&quot;Select pen width:&quot;),
                                        scribbleArea-&amp;gt;penWidth(),
                                        1, 50, 1, &amp;amp;ok);
    if (ok)
        scribbleArea-&amp;gt;setPenWidth(newWidth);
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Scribble&quot;),
            tr(&quot;&amp;lt;p&amp;gt;The &amp;lt;b&amp;gt;Scribble&amp;lt;/b&amp;gt; example shows how to use QMainWindow as the &quot;
               &quot;base widget for an application, and how to reimplement some of &quot;
               &quot;QWidget's event handlers to receive the events generated for &quot;
               &quot;the application's widgets:&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt; We reimplement the mouse event &quot;
               &quot;handlers to facilitate drawing, the paint event handler to &quot;
               &quot;update the application and the resize event handler to optimize &quot;
               &quot;the application's appearance. In addition we reimplement the &quot;
               &quot;close event handler to intercept the close events before &quot;
               &quot;terminating the application.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt; The example also demonstrates &quot;
               &quot;how to use QPainter to draw an image in real time, as well as &quot;
               &quot;to repaint widgets.&amp;lt;/p&amp;gt;&quot;));
}

void MainWindow::createActions()
{
    openAct = new QAction(tr(&quot;&amp;amp;Open...&quot;), this);
    openAct-&amp;gt;setShortcuts(QKeySequence::Open);
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    foreach (QByteArray format, QImageWriter::supportedImageFormats()) {
        QString text = tr(&quot;%1...&quot;).arg(QString(format).toUpper());

        QAction *action = new QAction(text, this);
        action-&amp;gt;setData(format);
        connect(action, SIGNAL(triggered()), this, SLOT(save()));
        saveAsActs.append(action);
    }

    printAct = new QAction(tr(&quot;&amp;amp;Print...&quot;), this);
    connect(printAct, SIGNAL(triggered()), scribbleArea, SLOT(print()));

    exitAct = new QAction(tr(&quot;E&amp;amp;xit&quot;), this);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    penColorAct = new QAction(tr(&quot;&amp;amp;Pen Color...&quot;), this);
    connect(penColorAct, SIGNAL(triggered()), this, SLOT(penColor()));

    penWidthAct = new QAction(tr(&quot;Pen &amp;amp;Width...&quot;), this);
    connect(penWidthAct, SIGNAL(triggered()), this, SLOT(penWidth()));

    clearScreenAct = new QAction(tr(&quot;&amp;amp;Clear Screen&quot;), this);
    clearScreenAct-&amp;gt;setShortcut(tr(&quot;Ctrl+L&quot;));
    connect(clearScreenAct, SIGNAL(triggered()),
            scribbleArea, SLOT(clearImage()));

    aboutAct = new QAction(tr(&quot;&amp;amp;About&quot;), this);
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;amp;Qt&quot;), this);
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    saveAsMenu = new QMenu(tr(&quot;&amp;amp;Save As&quot;), this);
    foreach (QAction *action, saveAsActs)
        saveAsMenu-&amp;gt;addAction(action);

    fileMenu = new QMenu(tr(&quot;&amp;amp;File&quot;), this);
    fileMenu-&amp;gt;addAction(openAct);
    fileMenu-&amp;gt;addMenu(saveAsMenu);
    fileMenu-&amp;gt;addAction(printAct);
    fileMenu-&amp;gt;addSeparator();
    fileMenu-&amp;gt;addAction(exitAct);

    optionMenu = new QMenu(tr(&quot;&amp;amp;Options&quot;), this);
    optionMenu-&amp;gt;addAction(penColorAct);
    optionMenu-&amp;gt;addAction(penWidthAct);
    optionMenu-&amp;gt;addSeparator();
    optionMenu-&amp;gt;addAction(clearScreenAct);

    helpMenu = new QMenu(tr(&quot;&amp;amp;Help&quot;), this);
    helpMenu-&amp;gt;addAction(aboutAct);
    helpMenu-&amp;gt;addAction(aboutQtAct);

    menuBar()-&amp;gt;addMenu(fileMenu);
    menuBar()-&amp;gt;addMenu(optionMenu);
    menuBar()-&amp;gt;addMenu(helpMenu);
}

bool MainWindow::maybeSave()
{
    if (scribbleArea-&amp;gt;isModified()) {
       QMessageBox::StandardButton ret;
       ret = QMessageBox::warning(this, tr(&quot;Scribble&quot;),
                          tr(&quot;The image has been modified.\n&quot;
                             &quot;Do you want to save your changes?&quot;),
                          QMessageBox::Save | QMessageBox::Discard
                          | QMessageBox::Cancel);
        if (ret == QMessageBox::Save) {
            return saveFile(&quot;png&quot;);
        } else if (ret == QMessageBox::Cancel) {
            return false;
        }
    }
    return true;
}

bool MainWindow::saveFile(const QByteArray &amp;amp;fileFormat)
{
    QString initialPath = QDir::currentPath() + &quot;/untitled.&quot; + fileFormat;

    QString fileName = QFileDialog::getSaveFileName(this, tr(&quot;Save As&quot;),
                               initialPath,
                               tr(&quot;%1 Files (*.%2);;All Files (*)&quot;)
                               .arg(QString::fromLatin1(fileFormat.toUpper()))
                               .arg(QString::fromLatin1(fileFormat)));
    if (fileName.isEmpty()) {
        return false;
    } else {
        return scribbleArea-&amp;gt;saveImage(fileName, fileFormat.constData());
    }
}

</db:programlisting>
</db:article>
