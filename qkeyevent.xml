<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QKeyEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link> class describes a key event.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QKeyEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qinputevent.xml" xlink:role="class">QInputEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QKeyEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Key events are sent to the widget with keyboard input focus when keys are pressed or released.</db:para>
<db:para>A key event contains a special accept flag that indicates whether the receiver will handle the key event. You should call <db:link xlink:href="qevent.xml#ignore">ignore</db:link>() if the key press or release event is not handled by your widget. A key event is propagated up the parent widget chain until a widget accepts it with <db:link xlink:href="qevent.xml#accept">accept</db:link>() or an event filter consumes it. Key events for multimedia keys are ignored by default. You should call <db:link xlink:href="qevent.xml#accept">accept</db:link>() if your widget handles those events.</db:para>
<db:para>The QWidget::setEnable() function can be used to enable or disable mouse and keyboard events for a widget.</db:para>
<db:para>The event handlers QWidget::keyPressEvent(), QWidget::keyReleaseEvent(), QGraphicsItem::keyPressEvent() and QGraphicsItem::keyReleaseEvent() receive key events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfocusevent.xml">QFocusEvent</db:link></db:member>
<db:member><db:link xlink:href="">QWidget::grabKeyboard()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QKeyEvent">
<db:title>QKeyEvent::QKeyEvent(QEvent::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>key</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis> = QString(), bool <db:emphasis>autorep</db:emphasis> = false, ushort <db:emphasis>count</db:emphasis> = 1)</db:title>
<db:para>Constructs a key event object.</db:para>
<db:para>The <db:code role="parameter">type</db:code> parameter must be <db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyRelease</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::ShortcutOverride</db:link>.</db:para>
<db:para>Int <db:code role="parameter">key</db:code> is the code for the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> that the event loop should listen for. If <db:code role="parameter">key</db:code> is 0, the event is not a result of a known key; for example, it may be the result of a compose sequence or keyboard macro. The <db:code role="parameter">modifiers</db:code> holds the keyboard modifiers, and the given <db:code role="parameter">text</db:code> is the Unicode text that the key generated. If <db:code role="parameter">autorep</db:code> is true, <db:link xlink:href="qkeyevent.xml#isAutoRepeat">isAutoRepeat</db:link>() will be true. <db:code role="parameter">count</db:code> is the number of keys involved in the event.</db:para>
</db:section>
<db:section xml:id="QKeyEvent-1">
<db:title>QKeyEvent::QKeyEvent(QEvent::Type <db:emphasis>type</db:emphasis>, int <db:emphasis>key</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>modifiers</db:emphasis>, quint32 <db:emphasis>nativeScanCode</db:emphasis>, quint32 <db:emphasis>nativeVirtualKey</db:emphasis>, quint32 <db:emphasis>nativeModifiers</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis> = QString(), bool <db:emphasis>autorep</db:emphasis> = false, ushort <db:emphasis>count</db:emphasis> = 1)</db:title>
<db:para>Constructs a key event object.</db:para>
<db:para>The <db:code role="parameter">type</db:code> parameter must be <db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyPress</db:link>, <db:link xlink:href="qevent.xml#Type-enum">QEvent::KeyRelease</db:link>, or <db:link xlink:href="qevent.xml#Type-enum">QEvent::ShortcutOverride</db:link>.</db:para>
<db:para>Int <db:code role="parameter">key</db:code> is the code for the <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> that the event loop should listen for. If <db:code role="parameter">key</db:code> is 0, the event is not a result of a known key; for example, it may be the result of a compose sequence or keyboard macro. The <db:code role="parameter">modifiers</db:code> holds the keyboard modifiers, and the given <db:code role="parameter">text</db:code> is the Unicode text that the key generated. If <db:code role="parameter">autorep</db:code> is true, <db:link xlink:href="qkeyevent.xml#isAutoRepeat">isAutoRepeat</db:link>() will be true. <db:code role="parameter">count</db:code> is the number of keys involved in the event.</db:para>
<db:para>In addition to the normal key event data, also contains <db:code role="parameter">nativeScanCode</db:code>, <db:code role="parameter">nativeVirtualKey</db:code> and <db:code role="parameter">nativeModifiers</db:code>. This extra data is used by the shortcut system, to determine which shortcuts to trigger.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QKeyEvent::count() const</db:title>
<db:para>Returns the number of keys involved in this event. If <db:link xlink:href="qkeyevent.xml#text">text</db:link>() is not empty, this is simply the length of the string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_KeyCompression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAutoRepeat">
<db:title>bool QKeyEvent::isAutoRepeat() const</db:title>
<db:para>Returns <db:code>true</db:code> if this event comes from an auto-repeating key; returns <db:code>false</db:code> if it comes from an initial key press.</db:para>
<db:para>Note that if the event is a multiple-key compressed event that is partly due to auto-repeat, this function could return either true or false indeterminately.</db:para>
</db:section>
<db:section xml:id="key">
<db:title>int QKeyEvent::key() const</db:title>
<db:para>Returns the code of the key that was pressed or released.</db:para>
<db:para>See <db:link xlink:href="qt.xml#Key-enum">Qt::Key</db:link> for the list of keyboard codes. These codes are independent of the underlying window system. Note that this function does not distinguish between capital and non-capital letters, use the <db:link xlink:href="qkeyevent.xml#text">text</db:link>() function (returning the Unicode text the key generated) for this purpose.</db:para>
<db:para>A value of either 0 or <db:link xlink:href="qt.xml#Key-enum">Qt::Key_unknown</db:link> means that the event is not the result of a known key; for example, it may be the result of a compose sequence, a keyboard macro, or due to key event compression.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_KeyCompression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="matches">
<db:title>[since 4.2] bool QKeyEvent::matches(QKeySequence::StandardKey <db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the key event matches the given standard <db:code role="parameter">key</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="modifiers">
<db:title>Qt::KeyboardModifiers QKeyEvent::modifiers() const</db:title>
<db:para>Returns the keyboard modifier flags that existed immediately after the event occurred.</db:para>
<db:warning>
<db:para>This function cannot always be trusted. The user can confuse it by pressing both <db:guilabel>Shift</db:guilabel> keys simultaneously and releasing one of them, for example.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#keyboardModifiers">QGuiApplication::keyboardModifiers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeModifiers">
<db:title>[since 4.2] quint32 QKeyEvent::nativeModifiers() const</db:title>
<db:para>Returns the native modifiers of a key event. If the key event does not contain this data 0 is returned.</db:para>
<db:para>Note: The native modifiers may be 0, even if the key event contains extended information.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="nativeScanCode">
<db:title>[since 4.2] quint32 QKeyEvent::nativeScanCode() const</db:title>
<db:para>Returns the native scan code of the key event. If the key event does not contain this data 0 is returned.</db:para>
<db:para>Note: The native scan code may be 0, even if the key event contains extended information.</db:para>
<db:para>Note: On Mac OS/X, this function is not useful, because there is no way to get the scan code from Carbon or Cocoa. The function always returns 1 (or 0 in the case explained above).</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="nativeVirtualKey">
<db:title>[since 4.2] quint32 QKeyEvent::nativeVirtualKey() const</db:title>
<db:para>Returns the native virtual key, or key sym of the key event. If the key event does not contain this data 0 is returned.</db:para>
<db:para>Note: The native virtual key may be 0, even if the key event contains extended information.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QKeyEvent::text() const</db:title>
<db:para>Returns the Unicode text that this key generated.</db:para>
<db:para>Return values when modifier keys such as Shift, Control, Alt, and Meta are pressed differ among platforms and could return an empty string.</db:para>
<db:note>
<db:para><db:link xlink:href="qkeyevent.xml#key">key</db:link>() will always return a valid value, independent of modifier keys.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_KeyCompression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
