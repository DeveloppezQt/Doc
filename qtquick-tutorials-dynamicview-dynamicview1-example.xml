<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Dynamic View Ordering Tutorial 1 - A Simple ListView and Delegate</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qml-dynamicview-tutorial.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML Dynamic View Ordering Tutorial"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtquick-tutorials-dynamicview-dynamicview2-example.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="QML Dynamic View Ordering Tutorial 2 - Dragging View Items"/></db:extendedlink>
<db:abstract>
<db:para>Qt Quick Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QML Dynamic View Ordering Tutorial</db:para>
<db:para>We begin our application by defining a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>, a model which will provide data to the view, and a delegate which provides a template for constructing items in the view.</db:para>
<db:para>The code for the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and delegate looks like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: root

    width: 300; height: 400

    Component {
        id: dragDelegate

        Rectangle {
            id: content

            anchors { left: parent.left; right: parent.right }
            height: column.implicitHeight + 4

            border.width: 1
            border.color: &quot;lightsteelblue&quot;

            radius: 2

            Column {
                id: column
                anchors { fill: parent; margins: 2 }

                Text { text: 'Name: ' + name }
                Text { text: 'Type: ' + type }
                Text { text: 'Age: ' + age }
                Text { text: 'Size: ' + size }
            }
        }
    }
    ListView {
        id: view

        anchors { fill: parent; margins: 2 }

        model: PetsModel {}
        delegate: dragDelegate

        spacing: 4
        cacheBuffer: 50
    }
}
</db:programlisting>
<db:para>The model is defined in a separate QML file which looks like this:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

ListModel {
    ListElement {
        name: &quot;Polly&quot;
        type: &quot;Parrot&quot;
        age: 12
        size: &quot;Small&quot;
    }
    ListElement {
        name: &quot;Penny&quot;
        type: &quot;Turtle&quot;
        age: 4
        size: &quot;Small&quot;
    }
}
</db:programlisting>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:para>The first item defined within the application's root Rectangle is the delegate Component. This is the template from which each item in the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> is constructed.</db:para>
<db:para>The <db:code>name</db:code>, <db:code>age</db:code>, <db:code>type</db:code>, and <db:code>size</db:code> variables referenced in the delegate are sourced from the model data. The names correspond to roles defined in the model.</db:para>
<db:programlisting language="qml">    Component {
        id: dragDelegate

        Rectangle {
            id: content

            anchors { left: parent.left; right: parent.right }
            height: column.implicitHeight + 4

            border.width: 1
            border.color: &quot;lightsteelblue&quot;

            radius: 2

            Column {
                id: column
                anchors { fill: parent; margins: 2 }

                Text { text: 'Name: ' + name }
                Text { text: 'Type: ' + type }
                Text { text: 'Age: ' + age }
                Text { text: 'Size: ' + size }
            }
        }
    }
</db:programlisting>
<db:para>The second part of the application is the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> itself to which we bind the model and delegate.</db:para>
<db:programlisting language="qml">    ListView {
        id: view

        anchors { fill: parent; margins: 2 }

        model: PetsModel {}
        delegate: dragDelegate

        spacing: 4
        cacheBuffer: 50
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview1/PetsModel.qml">tutorials/dynamicview/dynamicview1/PetsModel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview1/dynamicview.qml">tutorials/dynamicview/dynamicview1/dynamicview.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tutorials/dynamicview/dynamicview1/dynamicview1.qmlproject">tutorials/dynamicview/dynamicview1/dynamicview1.qmlproject</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
