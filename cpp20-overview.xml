<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>C++20 Overview</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of C++20 features available in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 officially requires C++17, however we are constantly working on supporting new C++ language features to make Qt faster and safer, and provide a better experience for our users.</db:para>
<db:para>This page gives a brief overview of C++20 features available in Qt.</db:para>
<db:section xml:id="support-for-std-op-op-chrono">
<db:title>Support for std::chrono</db:title>
<db:para>Various classes related to date and time have support for <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono">std::chrono</db:link> features from older versions of C++. With the arrival of C++20, std::chrono has added new <db:link xlink:href="https://en.cppreference.com//w/cpp/chrono#Calendar">calendar types</db:link>, such as <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/year_month_day">year_month_day</db:link>, plus <db:link xlink:href="https://en.cppreference.com//w/cpp/chrono#Time_point">date and time representations</db:link>, such as the <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/system_clock">system_clock</db:link> and its <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/time_point">time_point</db:link> types. It also now provides access to the IANA database of <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono#Time_zone">timezone-related information</db:link>. When Qt is built with C++20, it can now make use of these additions.</db:para>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qdatetime.xml">QDateTime</db:link> now support conversion to and from the various calendar, date and date-time types, along with addition of <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/duration">duration types</db:link>. <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> now supports construction from a <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/time_zone">time_zone</db:link>.</db:para>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> can also, when built with feature timezone_tzdb enabled, use the C++20 <db:link xlink:href="https://en.cppreference.com/w/cpp/chrono/tzdb">tzdb</db:link> facilities in place of platform-specific backends to access timezone information. This remains experimental in Qt 6.9 as some standard library implementations do not faithfully represent the IANA data for timezones.</db:para>
</db:section>
<db:section xml:id="qspan-a-qt-version-of-std-op-op-span">
<db:title>QSpan - a Qt version of std::span</db:title>
<db:para>The <db:link xlink:href="https://en.cppreference.com/w/cpp/container/span">std::span</db:link> class template is an addition to the standard library that provides a uniform way to access a contiguous portion of any contiguous container.</db:para>
<db:para>Using std::span in the public APIs of Qt could provide significant advantages. However, Qt 6 only requires C++17, meaning it cannot have C++20 types in the API and ABI.</db:para>
<db:para>Qt 6.7 introduced <db:link xlink:href="qspan.xml">QSpan</db:link> - a Qt version of std::span. The API of the class is compatible with the std version. <db:link xlink:href="qspan.xml">QSpan</db:link> and std::span can be implicitly converted into each other. However, there are some differences between the classes. See the corresponding section in the <db:link xlink:href="qspan.xml#qspan-vs-std-span">QSpan class documentation</db:link> for more details.</db:para>
</db:section>
<db:section xml:id="three-way-comparison-operator">
<db:title>Three-way comparison operator</db:title>
<db:para>C++20 introduced operator&lt;=&gt;(), also known as the <db:link xlink:href="https://en.cppreference.com/w/cpp/language/operator_comparison#Three-way_comparison">three-way comparison operator</db:link>, and three ordering types to represent the results of the comparison:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://en.cppreference.com/w/cpp/utility/compare/strong_ordering">std::strong_ordering</db:link>;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://en.cppreference.com/w/cpp/utility/compare/weak_ordering">std::weak_ordering</db:link>;</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://en.cppreference.com/w/cpp/utility/compare/partial_ordering">std::partial_ordering</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In Qt 6.8, many of the <db:link xlink:href="qtcore-module.xml">QtCore</db:link> classes got support for operator&lt;=&gt;(). To use the new operator, the user project must be compiled in C++20 mode.</db:para>
<db:para>However, starting from Qt 6.7, C++17 users can use <db:link xlink:href="comparison-types.xml">our own equivalents</db:link> of the std ordering types.</db:para>
<db:para>As a C++20 language feature, backporting operator&lt;=&gt;() to C++17 is not possible, but you can use the <db:link xlink:href="">Qt::compareThreeWay()</db:link> function, which acts like a C++17 version of operator&lt;=&gt;() for built-in C++ types (such as integers, floating-point, and enumeration types).</db:para>
<db:para>Qt also defines helper functions compareThreeWay() for various classes in <db:link xlink:href="qtcore-module.xml">QtCore</db:link>. These are all implemented as <db:link xlink:href="https://wg21.link/p1601">hidden friends</db:link>. Users can implement their own compareThreeWay() functions for custom types.</db:para>
<db:para>Finally, Qt provides a <db:link xlink:href="qtcompare.xml#qCompareThreeWay">qCompareThreeWay</db:link>() function template, which serves as a generic three-way comparison implementation. It relies on <db:link xlink:href="">Qt::compareThreeWay()</db:link> and the above-mentioned free compareThreeWay() functions in its implementation.</db:para>
</db:section>
<db:section xml:id="additional-important-features">
<db:title>Additional important features</db:title>
<db:para>Qt has also adopted a few more features from C++20, such as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtcompilerdetection.xml#Q_CONSTINIT">Q_CONSTINIT</db:link> macro that expands to the C++20 constinit keyword, or to compiler-specific attributes if they are available</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcompilerdetection.xml#Q_NODISCARD_CTOR">Q_NODISCARD_CTOR</db:link> macro that expands to the [[nodiscard]] attribute if the compiler supports [[nodiscard]] on constructors</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcompilerdetection.xml#Q_NODISCARD_X">Q_NODISCARD_X</db:link> and <db:link xlink:href="qtcompilerdetection.xml#Q_NODISCARD_CTOR_X">Q_NODISCARD_CTOR_X</db:link> macros for [[nodiscard(&quot;reason&quot;)]]</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
