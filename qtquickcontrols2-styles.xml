<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Styling Qt Quick Controls 2</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Quick Controls 2 Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Controls 2 comes with a selection of styles.</db:para>
<db:section xml:id="using-styles-in-qt-quick-controls-2">
<db:title>Using Styles in Qt Quick Controls 2</db:title>
<db:para>In order to run an application with a specific style, either configure the style using <db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> in C++, pass a command line argument, or set an environment variable. Alternatively, the preferred style and style-specific attributes can be specified in a configuration file.</db:para>
<db:para>The priority of these approaches follows the order they are listed below, from highest to lowest. That is, using <db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> to set the style will always take priority over using the command line argument, for example.</db:para>
<db:section xml:id="using-qquickstyle-in-c">
<db:title>Using QQuickStyle in C++</db:title>
<db:para><db:link xlink:href="qquickstyle.xml">QQuickStyle</db:link> provides API for configuring a specific style. The following example runs a Qt Quick Controls 2 application with the Material style:</db:para>
<db:programlisting language="cpp">#include &lt;QGuiApplication&gt;
#include &lt;QQmlApplicationEngine&gt;
#include &lt;QQuickStyle&gt;

int main(int argc, char *argv[])
{
    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);

    QQuickStyle::setStyle(&quot;Material&quot;);

    QQmlApplicationEngine engine;
    engine.load(QUrl(&quot;qrc:/main.qml&quot;));

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section xml:id="command-line-argument">
<db:title>Command line argument</db:title>
<db:para>Passing a <db:code>-style</db:code> command line argument is the convenient way to test different styles. It takes precedence over the other methods listed below. The following example runs a Qt Quick Controls 2 application with the Material style:</db:para>
<db:programlisting language="cpp">./app -style material
</db:programlisting>
</db:section>
<db:section xml:id="environment-variable">
<db:title>Environment variable</db:title>
<db:para>Setting the <db:code>QT_QUICK_CONTROLS_STYLE</db:code> environment variable can be used to set a system-wide style preference. It takes precedence over the configuration file mentioned below. The following example runs a Qt Quick Controls 2 application with the Universal style:</db:para>
<db:programlisting language="cpp">QT_QUICK_CONTROLS_STYLE=universal ./app
</db:programlisting>
</db:section>
<db:section xml:id="configuration-file">
<db:title>Configuration file</db:title>
<db:anchor xml:id="qtquickcontrols2-conf"/>
<db:para>Qt Quick Controls 2 support a special configuration file, <db:code>:/qtquickcontrols2.conf</db:code>, that is built into an application's resources.</db:para>
<db:para>The configuration file can specify the preferred style (may be overridden by either of the methods described earlier) and certain style-specific attributes. The following example specifies that the preferred style is the Material style. Furthermore, when the application is run with the Material style, its theme is light and the accent and primary colors are teal and blue grey, respectively. However, if the application is run with the Universal style instead, the theme is dark and the accent color is red.</db:para>
<db:programlisting language="cpp">[Controls]
Style=Material

[Universal]
Theme=Dark
Accent=Red

[Material]
Theme=Light
Accent=Teal
Primary=BlueGrey
</db:programlisting>
<db:para>In order to make it possible for Qt Quick Controls 2 to find the configuration file, it must be built into application's resources using the <db:link xlink:href="resources.xml">The Qt Resource System</db:link>. Here's an example <db:code>.qrc</db:code> file:</db:para>
<db:programlisting language="cpp">&lt;!DOCTYPE RCC&gt;&lt;RCC version=&quot;1.0&quot;&gt;
&lt;qresource prefix=&quot;/&quot;&gt;
    &lt;file&gt;qtquickcontrols2.conf&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;
</db:programlisting>
<db:note>
<db:para>Qt Quick Controls 2 uses a file selector to load the configuration file. It is possible to provide a different configuration file for different platforms and locales. See <db:link xlink:href="qfileselector.xml">QFileSelector</db:link> documentation for more details.</db:para>
</db:note>
<db:para>Finally, the <db:code>.qrc</db:code> file must be listed in the application's <db:code>.pro</db:code> file so that the build system knows about it. For example:</db:para>
<db:programlisting language="cpp">RESOURCES = application.qrc
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="related-information">
<db:title>Related Information</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-default.xml">Default Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-material.xml">Material Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-universal.xml">Universal Style</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-fileselectors.xml">Using File Selectors with Qt Quick Controls 2</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols2-deployment.xml">Deploying Qt Quick Controls 2 Applications</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
