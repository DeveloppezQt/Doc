<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>GeoFlickr (QML)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The GeoFlickr example shows how to use the user's current position to fetch local content from a web service.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This is a small example, illustrating one of the very core parts of the <db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link> API: the ability to retrieve and use the user's current geographic position.</db:para>
<db:para>Key QML types shown in this example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-flickr-1.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="retrieving-the-current-position">
<db:title>Retrieving the Current Position</db:title>
<db:para>Retrieving the user's current position is achieved using the <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> type. In this example, we instantiate the <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> as part of the <db:code>GeoTab</db:code> component (the floating &quot;window&quot; describing current position and status).</db:para>
<db:programlisting language="qml">    PositionSource {
        id: positionSource

        // used with nmea plugin only
        PluginParameter { name: &quot;nmea.source&quot;; value: &quot;qrc:///flickrmobile/nmealog.txt&quot; }

        onPositionChanged: {
            planet.source = &quot;images/sun.png&quot;;
            sourceText.text = ((name === &quot;nmea&quot;) ? &quot;(filesource): &quot; : &quot;Source: &quot;) +
                    printableMethod(supportedPositioningMethods)
        }

        onSourceErrorChanged: {
            if (sourceError == PositionSource.NoError)
                return

            console.log(&quot;Source error: &quot; + printableError(sourceError))
            activityText.fadeOut = true

            if (supportedPositioningMethods === PositionSource.NoPositioningMethods) {
                name = &quot;nmea&quot;;
                update();
            }
        }
    }
</db:programlisting>
<db:para>When the &quot;Locate and update&quot; button is pressed, we instruct the <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> to request a location <db:link xlink:href="qml-qtpositioning-positionsource.xml#update-method">update</db:link>. If the update finishes with an error, we check if the default backend is capable of providing positioning data. If it's not, we switch to <db:code>nmea</db:code> backend with pre-recorded data, and request the location <db:link xlink:href="qml-qtpositioning-positionsource.xml#update-method">update</db:link> again.</db:para>
<db:para>We cannot check the <db:link xlink:href="qml-qtpositioning-positionsource.xml#supportedPositioningMethods-prop">supportedPositioningMethods</db:link> in advance, because on mobile platforms (Android and iOS) this method will return <db:code>NoPositioningMethods</db:code> before the permissions are granted. And the permissions request is first performed when location update is requested.</db:para>
<db:programlisting language="qml">    Button {
        id: locateButton
        text: &quot;Locate &amp;amp; update&quot;
        onClicked: {
            positionSource.update();
        }
    }
</db:programlisting>
<db:para>To share the new position data with the rest of the application, we use properties that we have created on the <db:code>GeoTab</db:code> component:</db:para>
<db:programlisting language="qml">    property var coordinate
</db:programlisting>
</db:section>
<db:section xml:id="using-the-current-position">
<db:title>Using the Current Position</db:title>
<db:para>The longitude and latitude values retrieved here are eventually set in the properties on the <db:code>RestModel</db:code> component. The <db:code>RestModel</db:code> is an <db:link xlink:href="qml-qtqml-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link>, which retrieves XML data from a URL and creates a data model by parsing it.</db:para>
<db:para>In this case, it retrieves data from the Flickr REST API online, based on our current position</db:para>
<db:programlisting language="qml">XmlListModel {
    property var coordinate

    source: &quot;https://api.flickr.com/services/rest/?&quot; +
            &quot;min_taken_date=2000-01-01+0:00:00&amp;amp;&quot; +
            &quot;extras=date_taken&amp;amp;&quot; +
            &quot;method=flickr.photos.search&amp;amp;&quot; +
            &quot;per_page=30&amp;amp;&quot; +
            &quot;sort=date-taken-desc&amp;amp;&quot; +
            &quot;api_key=e36784df8a03fea04c22ed93318b291c&amp;amp;&quot; +
            &quot;lat=&quot; + coordinate.latitude + &quot;&amp;amp;lon=&quot; + coordinate.longitude;
    query: &quot;/rsp/photos/photo&quot;

    XmlListModelRole { name: &quot;title&quot;; elementName: &quot;&quot;; attributeName: &quot;title&quot; }
    XmlListModelRole { name: &quot;datetaken&quot;; elementName: &quot;&quot;; attributeName: &quot;datetaken&quot; }
    XmlListModelRole { name: &quot;farm&quot;; elementName: &quot;&quot;; attributeName: &quot;farm&quot; }
    XmlListModelRole { name: &quot;server&quot;; elementName: &quot;&quot;; attributeName: &quot;server&quot; }
    XmlListModelRole { name: &quot;id&quot;; elementName: &quot;&quot;; attributeName: &quot;id&quot; }
    XmlListModelRole { name: &quot;secret&quot;; elementName: &quot;&quot;; attributeName: &quot;secret&quot; }
}
</db:programlisting>
<db:para>This model data is then shown in a variety of <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> views to produce the example application.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/positioning/geoflickr?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
