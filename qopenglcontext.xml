<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QOpenGLContext Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> class represents a native OpenGL context, enabling OpenGL rendering on a <db:link xlink:href="qsurface.xml">QSurface</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> represents the OpenGL state of an underlying OpenGL context. To set up a context, set its screen and format such that they match those of the surface or surfaces with which the context is meant to be used, if necessary make it share resources with other contexts with <db:link xlink:href="qopenglcontext.xml#setShareContext">setShareContext</db:link>(), and finally call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>(). Use <db:link xlink:href="qopenglcontext.xml#isValid">isValid</db:link>() to check if the context was successfully initialized.</db:para>
<db:para>A context can be made current against a given surface by calling <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>(). When OpenGL rendering is done, call <db:link xlink:href="qopenglcontext.xml#swapBuffers">swapBuffers</db:link>() to swap the front and back buffers of the surface, so that the newly rendered content becomes visible. To be able to support certain platforms, <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> requires that you call <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>() again before starting rendering a new frame, after calling <db:link xlink:href="qopenglcontext.xml#swapBuffers">swapBuffers</db:link>().</db:para>
<db:para>If the context is temporarily not needed, such as when the application is not rendering, it can be useful to call destroy() to free resources. However, if you do so you will need to call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() again before the context can be used, and you might need to recreate any OpenGL resources and reinitialize the OpenGL state. You can connect to the <db:link xlink:href="qopenglcontext.xml#aboutToBeDestroyed">aboutToBeDestroyed</db:link>() signal to clean up any resources that have been allocated with different ownership from the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> itself.</db:para>
<db:para>Once a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> has been made current, you can render to it in a platform independent way by using Qt's OpenGL enablers such as <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link>, <db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link>, <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link>, and <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>. It is also possible to use the platform's OpenGL API directly, without using the Qt enablers, although potentially at the cost of portability. The latter is necessary when wanting to use OpenGL 1.x or OpenGL ES 1.x.</db:para>
<db:para>For more information about the OpenGL API, refer to the official <db:link xlink:href="">OpenGL documentation</db:link>.</db:para>
<db:para>For an example of how to use <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> see the <db:link xlink:href="qtgui-openglwindow-example.xml">OpenGL Window</db:link> example.</db:para>
<db:section xml:id="thread-affinity">
<db:title>Thread affinity</db:title>
<db:para><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> can be moved to a different thread with <db:link xlink:href="qobject.xml#moveToThread">moveToThread</db:link>(). Do not call <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>() from a different thread than the one to which the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> object belongs. A context can only be current in one thread and against one surface at a time, and a thread only has one context current at a time.</db:para>
</db:section>
<db:section xml:id="context-resource-sharing">
<db:title>Context resource sharing</db:title>
<db:para>Resources, such as framebuffer objects, textures, and vertex buffer objects can be shared between contexts. Use <db:link xlink:href="qopenglcontext.xml#setShareContext">setShareContext</db:link>() before calling <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() to specify that the contexts should share these resources. <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> internally keeps track of a <db:link xlink:href="qopenglcontextgroup.xml">QOpenGLContextGroup</db:link> object which can be accessed with <db:link xlink:href="qopenglcontext.xml#shareGroup">shareGroup</db:link>(), and which can be used to find all the contexts in a given share group. A share group consists of all contexts that have been successfully initialized and are sharing with an existing context in the share group. A non-sharing context has a share group consisting of a single context.</db:para>
</db:section>
<db:section xml:id="default-framebuffer">
<db:title>Default framebuffer</db:title>
<db:para>On certain platforms, a framebuffer other than 0 might be the default frame buffer depending on the current surface. Instead of calling glBindFramebuffer(0), it is recommended that you use glBindFramebuffer(ctx-&gt;<db:link xlink:href="qopenglcontext.xml#defaultFramebufferObject">defaultFramebufferObject</db:link>()), to ensure that your application is portable between different platforms. However, if you use <db:link xlink:href="qopenglfunctions.xml#glBindFramebuffer">QOpenGLFunctions::glBindFramebuffer</db:link>(), this is done automatically for you.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link></db:member>
<db:member><db:link xlink:href="qopenglbuffer.xml">QOpenGLBuffer</db:link></db:member>
<db:member><db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link></db:member>
<db:member><db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLContext">
<db:title>[explicit] QOpenGLContext::QOpenGLContext(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a new OpenGL context instance with parent object <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Before it can be used you need to set the proper format and call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#create">create</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLContext">
<db:title>[virtual noexcept] QOpenGLContext::~QOpenGLContext()</db:title>
<db:para>Destroys the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> object.</db:para>
<db:para>This implicitly calls destroy(), so if this is the current context for the thread, <db:link xlink:href="qopenglcontext.xml#doneCurrent">doneCurrent</db:link>() is also called.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>destroy()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aboutToBeDestroyed">
<db:title>void QOpenGLContext::aboutToBeDestroyed()</db:title>
<db:para>This signal is emitted before the underlying native OpenGL context is destroyed, such that users may clean up OpenGL resources that might otherwise be left dangling in the case of shared OpenGL contexts.</db:para>
<db:para>If you wish to make the context current in order to do clean-up, make sure to only connect to the signal using a direct connection.</db:para>
</db:section>
<db:section xml:id="areSharing">
<db:title>[static] bool QOpenGLContext::areSharing(QOpenGLContext *<db:emphasis>first</db:emphasis>, QOpenGLContext *<db:emphasis>second</db:emphasis>)</db:title>
<db:para>Returns true if the <db:code role="parameter">first</db:code> and <db:code role="parameter">second</db:code> contexts are sharing OpenGL resources.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>bool QOpenGLContext::create()</db:title>
<db:para>Attempts to create the OpenGL context with the current configuration.</db:para>
<db:para>The current configuration includes the format, the share context, and the screen.</db:para>
<db:para>If the OpenGL implementation on your system does not support the requested version of OpenGL context, then <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> will try to create the closest matching version. The actual created context properties can be queried using the <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> returned by the <db:link xlink:href="qopenglcontext.xml#format">format</db:link>() function. For example, if you request a context that supports OpenGL 4.3 Core profile but the driver and/or hardware only supports version 3.2 Core profile contexts then you will get a 3.2 Core profile context.</db:para>
<db:para>Returns true if the native context was successfully created and is ready to be used with <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>(), <db:link xlink:href="qopenglcontext.xml#swapBuffers">swapBuffers</db:link>(), etc.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>()</db:member>
<db:member>destroy()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentContext">
<db:title>[static] QOpenGLContext *QOpenGLContext::currentContext()</db:title>
<db:para>Returns the last context which called <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link> in the current thread, or 0, if no context is current.</db:para>
</db:section>
<db:section xml:id="defaultFramebufferObject">
<db:title>GLuint QOpenGLContext::defaultFramebufferObject() const</db:title>
<db:para>Call this to get the default framebuffer object for the current surface.</db:para>
<db:para>On some platforms the default framebuffer object depends on the surface being rendered to, and might be different from 0. Thus, instead of calling glBindFramebuffer(0), you should call glBindFramebuffer(ctx-&gt;defaultFramebufferObject()) if you want your application to work across different Qt platforms.</db:para>
<db:para>If you use the glBindFramebuffer() in <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> you do not have to worry about this, as it automatically binds the current context's defaultFramebufferObject() when 0 is passed.</db:para>
</db:section>
<db:section xml:id="doneCurrent">
<db:title>void QOpenGLContext::doneCurrent()</db:title>
<db:para>Convenience function for calling <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link> with a 0 surface.</db:para>
<db:para>This results in no context being current in the current thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#currentContext">currentContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extensions">
<db:title>QSet&lt;QByteArray&gt; QOpenGLContext::extensions() const</db:title>
<db:para>Returns the set of OpenGL extensions supported by this context.</db:para>
<db:para>The context or a sharing context must be current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#hasExtension">hasExtension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QSurfaceFormat QOpenGLContext::format() const</db:title>
<db:para>Returns the format of the underlying platform context, if <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() has been called.</db:para>
<db:para>Otherwise, returns the requested format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="functions">
<db:title>QOpenGLFunctions *QOpenGLContext::functions() const</db:title>
<db:para>Get the <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> instance for this context.</db:para>
<db:para><db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> offers this as a convenient way to access <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> without having to manage it manually.</db:para>
<db:para>The context or a sharing context must be current.</db:para>
</db:section>
<db:section xml:id="getProcAddress">
<db:title>QFunctionPointer QOpenGLContext::getProcAddress(const QByteArray &amp;<db:emphasis>procName</db:emphasis>) const</db:title>
<db:para>Resolves the function pointer to an OpenGL extension function, identified by <db:code role="parameter">procName</db:code></db:para>
<db:para>Returns 0 if no such function can be found.</db:para>
</db:section>
<db:section xml:id="hasExtension">
<db:title>bool QOpenGLContext::hasExtension(const QByteArray &amp;<db:emphasis>extension</db:emphasis>) const</db:title>
<db:para>Returns true if this OpenGL context supports the specified OpenGL <db:code role="parameter">extension</db:code>, false otherwise.</db:para>
<db:para>The context or a sharing context must be current.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#extensions">extensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QOpenGLContext::isValid() const</db:title>
<db:para>Returns if this context is valid, i.e. has been successfully created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#create">create</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeCurrent">
<db:title>bool QOpenGLContext::makeCurrent(QSurface *<db:emphasis>surface</db:emphasis>)</db:title>
<db:para>Makes the context current in the current thread, against the given <db:code role="parameter">surface</db:code>. Returns true if successful.</db:para>
<db:para>If <db:code role="parameter">surface</db:code> is 0 this is equivalent to calling <db:link xlink:href="qopenglcontext.xml#doneCurrent">doneCurrent</db:link>().</db:para>
<db:para>Do not call this function from a different thread than the one the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> instance lives in. If you wish to use <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> from a different thread you should first call make sure it's not current in the current thread, by calling <db:link xlink:href="qopenglcontext.xml#doneCurrent">doneCurrent</db:link>() if necessary. Then call moveToThread(otherThread) before using it in the other thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#functions">functions</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglcontext.xml#doneCurrent">doneCurrent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="screen">
<db:title>QScreen *QOpenGLContext::screen() const</db:title>
<db:para>Returns the screen the context was created for.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#setScreen">setScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QOpenGLContext::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">format</db:code> the OpenGL context should be compatible with. You need to call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() before it takes effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScreen">
<db:title>void QOpenGLContext::setScreen(QScreen *<db:emphasis>screen</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">screen</db:code> the OpenGL context should be valid for. You need to call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() before it takes effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#screen">screen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setShareContext">
<db:title>void QOpenGLContext::setShareContext(QOpenGLContext *<db:emphasis>shareContext</db:emphasis>)</db:title>
<db:para>Makes this context share textures, shaders, and other OpenGL resources with <db:code role="parameter">shareContext</db:code>. You need to call <db:link xlink:href="qopenglcontext.xml#create">create</db:link>() before it takes effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#shareContext">shareContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shareContext">
<db:title>QOpenGLContext *QOpenGLContext::shareContext() const</db:title>
<db:para>Returns the share context this context was created with.</db:para>
<db:para>If the underlying platform was not able to support the requested sharing, this will return 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglcontext.xml#setShareContext">setShareContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shareGroup">
<db:title>QOpenGLContextGroup *QOpenGLContext::shareGroup() const</db:title>
<db:para>Returns the share group this context belongs to.</db:para>
</db:section>
<db:section xml:id="surface">
<db:title>QSurface *QOpenGLContext::surface() const</db:title>
<db:para>Returns the surface the context has been made current with.</db:para>
<db:para>This is the surface passed as an argument to <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>().</db:para>
</db:section>
<db:section xml:id="swapBuffers">
<db:title>void QOpenGLContext::swapBuffers(QSurface *<db:emphasis>surface</db:emphasis>)</db:title>
<db:para>Swap the back and front buffers of <db:code role="parameter">surface</db:code>.</db:para>
<db:para>Call this to finish a frame of OpenGL rendering, and make sure to call <db:link xlink:href="qopenglcontext.xml#makeCurrent">makeCurrent</db:link>() again before you begin a new frame.</db:para>
</db:section>
<db:section xml:id="versionFunctions">
<db:title>QAbstractOpenGLFunctions *QOpenGLContext::versionFunctions(const QOpenGLVersionProfile &amp;<db:emphasis>versionProfile</db:emphasis> = QOpenGLVersionProfile()) const</db:title>
<db:para>Returns a pointer to an object that provides access to all functions for the version of the current context. Before using any of the functions they must be initialized by calling QAbstractOpenGLFunctions::initializeOpenGLFunctions().</db:para>
<db:para>Usually one would use the template version of this function to automatically have the result cast to the correct type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>T</db:member>
<db:member><db:link xlink:href="">*QOpenGLContext::versionFunctions()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
