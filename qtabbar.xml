<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QTabBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtabbar.xml">QTabBar</db:link> class provides a tab bar, e.g. for use in tabbed dialogs.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTabBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTabBar is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtabbar.xml">QTabBar</db:link> is straightforward to use; it draws the tabs using one of the predefined <db:link xlink:href="qtabbar.xml#Shape-enum">shapes</db:link>, and emits a signal when a tab is selected. It can be subclassed to tailor the look and feel. Qt also provides a ready-made <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>.</db:para>
<db:para>Each tab has a <db:link xlink:href="qtabbar.xml#tabText">tabText</db:link>(), an optional <db:link xlink:href="qtabbar.xml#tabIcon">tabIcon</db:link>(), an optional <db:link xlink:href="qtabbar.xml#tabToolTip">tabToolTip</db:link>(), optional <db:link xlink:href="qtabbar.xml#tabWhatsThis">tabWhatsThis</db:link>() and optional <db:link xlink:href="qtabbar.xml#tabData">tabData</db:link>(). The tabs's attributes can be changed with <db:link xlink:href="qtabbar.xml#setTabText">setTabText</db:link>(), <db:link xlink:href="qtabbar.xml#setTabIcon">setTabIcon</db:link>(), <db:link xlink:href="qtabbar.xml#setTabToolTip">setTabToolTip</db:link>(), <db:link xlink:href="qtabbar.xml#setTabWhatsThis">setTabWhatsThis</db:link> and <db:link xlink:href="qtabbar.xml#setTabData">setTabData</db:link>(). Each tabs can be enabled or disabled individually with <db:link xlink:href="qtabbar.xml#setTabEnabled">setTabEnabled</db:link>().</db:para>
<db:para>Each tab can display text in a distinct color. The current text color for a tab can be found with the <db:link xlink:href="qtabbar.xml#tabTextColor">tabTextColor</db:link>() function. Set the text color for a particular tab with <db:link xlink:href="qtabbar.xml#setTabTextColor">setTabTextColor</db:link>().</db:para>
<db:para>Tabs are added using <db:link xlink:href="qtabbar.xml#addTab">addTab</db:link>(), or inserted at particular positions using <db:link xlink:href="qtabbar.xml#insertTab">insertTab</db:link>(). The total number of tabs is given by count(). Tabs can be removed from the tab bar with <db:link xlink:href="qtabbar.xml#removeTab">removeTab</db:link>(). Combining <db:link xlink:href="qtabbar.xml#removeTab">removeTab</db:link>() and <db:link xlink:href="qtabbar.xml#insertTab">insertTab</db:link>() allows you to move tabs to different positions.</db:para>
<db:para>The shape property defines the tabs' appearance. The choice of shape is a matter of taste, although tab dialogs (for preferences and similar) invariably use <db:link xlink:href="qtabbar.xml#Shape-enum">RoundedNorth</db:link>. Tab controls in windows other than dialogs almost always use either <db:link xlink:href="qtabbar.xml#Shape-enum">RoundedSouth</db:link> or <db:link xlink:href="qtabbar.xml#Shape-enum">TriangularSouth</db:link>. Many spreadsheets and other tab controls in which all the pages are essentially similar use <db:link xlink:href="qtabbar.xml#Shape-enum">TriangularSouth</db:link>, whereas <db:link xlink:href="qtabbar.xml#Shape-enum">RoundedSouth</db:link> is used mostly when the pages are different (e.g. a multi-page tool palette). The default in <db:link xlink:href="qtabbar.xml">QTabBar</db:link> is <db:link xlink:href="qtabbar.xml#Shape-enum">RoundedNorth</db:link>.</db:para>
<db:para>The most important part of <db:link xlink:href="qtabbar.xml">QTabBar</db:link>'s API is the <db:link xlink:href="qtabbar.xml#currentChanged">currentChanged</db:link>() signal. This is emitted whenever the current tab changes (even at startup, when the current tab changes from 'none'). There is also a slot, setCurrentIndex(), which can be used to select a tab programmatically. The function currentIndex() returns the index of the current tab, count holds the number of tabs.</db:para>
<db:para><db:link xlink:href="qtabbar.xml">QTabBar</db:link> creates automatic mnemonic keys in the manner of <db:link xlink:href="qabstractbutton.xml">QAbstractButton</db:link>; e.g. if a tab's label is &quot;&amp;Graphics&quot;, Alt+G becomes a shortcut key for switching to that tab.</db:para>
<db:para>The following virtual functions may need to be reimplemented in order to tailor the look and feel or store extra data with each tab:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtabbar.xml#tabSizeHint">tabSizeHint</db:link>() calcuates the size of a tab.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabbar.xml#tabInserted">tabInserted</db:link>() notifies that a new tab was added.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabbar.xml#tabRemoved">tabRemoved</db:link>() notifies that a tab was removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabbar.xml#tabLayoutChange">tabLayoutChange</db:link>() notifies that the tabs have been re-laid out.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtabbar.xml#paintEvent">paintEvent</db:link>() paints all tabs.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For subclasses, you might also need the <db:link xlink:href="qtabbar.xml#tabRect">tabRect</db:link>() functions which returns the visual geometry of a single tab.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tabbar.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style tab bar</db:para>
</db:td>
<db:td>
<db:para>A tab bar shown in the Fusion widget style.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-tabbar-truncated.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a truncated Fusion tab bar</db:para>
</db:td>
<db:td>
<db:para>A truncated tab bar shown in the Fusion widget style.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabwidget.xml">QTabWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ButtonPosition-enum">
<db:title>[since 4.5] enum QTabBar::ButtonPosition</db:title>
<db:para>This enum type lists the location of the widget on a tab.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::LeftSide</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Left side of the tab.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::RightSide</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Right side of the tab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="SelectionBehavior-enum">
<db:title>[since 4.5] enum QTabBar::SelectionBehavior</db:title>
<db:para>This enum type lists the behavior of <db:link xlink:href="qtabbar.xml">QTabBar</db:link> when a tab is removed and the tab being removed is also the current tab.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::SelectLeftTab</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Select the tab to the left of the one being removed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::SelectRightTab</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Select the tab to the right of the one being removed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::SelectPreviousTab</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Select the previously selected tab.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="Shape-enum">
<db:title>enum QTabBar::Shape</db:title>
<db:para>This enum type lists the built-in shapes supported by <db:link xlink:href="qtabbar.xml">QTabBar</db:link>. Treat these as hints as some styles may not render some of the shapes. However, position should be honored.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::RoundedNorth</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The normal rounded look above the pages</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::RoundedSouth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The normal rounded look below the pages</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::RoundedWest</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The normal rounded look on the left side of the pages</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::RoundedEast</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The normal rounded look on the right side the pages</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::TriangularNorth</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Triangular tabs above the pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::TriangularSouth</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Triangular tabs similar to those used in the Excel spreadsheet, for example</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::TriangularWest</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Triangular tabs on the left of the pages.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtabbar.xml">QTabBar</db:link></db:emphasis>::TriangularEast</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Triangular tabs on the right of the pages.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTabBar">
<db:title>[explicit] QTabBar::QTabBar(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a new tab bar with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTabBar">
<db:title>[virtual noexcept] QTabBar::~QTabBar()</db:title>
<db:para>Destroys the tab bar.</db:para>
</db:section>
<db:section xml:id="addTab">
<db:title>int QTabBar::addTab(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Adds a new tab with text <db:code role="parameter">text</db:code>. Returns the new tab's index.</db:para>
</db:section>
<db:section xml:id="addTab-1">
<db:title>int QTabBar::addTab(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Adds a new tab with icon <db:code role="parameter">icon</db:code> and text <db:code role="parameter">text</db:code>. Returns the new tab's index.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QTabBar::changeEvent(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QTabBar::currentChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the tab bar's current tab changes. The new current has the given <db:code role="parameter">index</db:code>, or -1 if there isn't a new one (for example, if there are no tab in the <db:link xlink:href="qtabbar.xml">QTabBar</db:link>)</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QTabBar::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QTabBar::hideEvent(<db:emphasis>QHideEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QTabBar::initStyleOption(QStyleOptionTab *<db:emphasis>option</db:emphasis>, int <db:emphasis>tabIndex</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from the tab at <db:code role="parameter">tabIndex</db:code>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptiontab.xml">QStyleOptionTab</db:link>, <db:link xlink:href="qstyleoptiontab.xml#QStyleOptionTabV2-typedef">QStyleOptionTabV2</db:link>, or <db:link xlink:href="qstyleoptiontab.xml#QStyleOptionTabV3-typedef">QStyleOptionTabV3</db:link> but don't want to fill in all the information themselves. This function will check the version of the <db:link xlink:href="qstyleoptiontab.xml">QStyleOptionTab</db:link> and fill in the additional values for a <db:link xlink:href="qstyleoptiontab.xml#QStyleOptionTabV2-typedef">QStyleOptionTabV2</db:link> and <db:link xlink:href="qstyleoptiontab.xml#QStyleOptionTabV3-typedef">QStyleOptionTabV3</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
<db:member><db:link xlink:href="qtabwidget.xml#initStyleOption">QTabWidget::initStyleOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertTab">
<db:title>int QTabBar::insertTab(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Inserts a new tab with text <db:code role="parameter">text</db:code> at position <db:code role="parameter">index</db:code>. If <db:code role="parameter">index</db:code> is out of range, the new tab is appened. Returns the new tab's index.</db:para>
</db:section>
<db:section xml:id="insertTab-1">
<db:title>int QTabBar::insertTab(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts a new tab with icon <db:code role="parameter">icon</db:code> and text <db:code role="parameter">text</db:code> at position <db:code role="parameter">index</db:code>. If <db:code role="parameter">index</db:code> is out of range, the new tab is appended. Returns the new tab's index.</db:para>
<db:para>If the <db:link xlink:href="qtabbar.xml">QTabBar</db:link> was empty before this function is called, the inserted tab becomes the current tab.</db:para>
<db:para>Inserting a new tab at an index less than or equal to the current index will increment the current index, but keep the current tab.</db:para>
</db:section>
<db:section xml:id="isTabEnabled">
<db:title>bool QTabBar::isTabEnabled(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the tab at position <db:code role="parameter">index</db:code> is enabled; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QTabBar::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QTabBar::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="minimumTabSizeHint">
<db:title>[virtual protected, since Qt 5.0] QSize QTabBar::minimumTabSizeHint(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the minimum tab size hint for the tab at position <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QTabBar::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QTabBar::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QTabBar::mouseReleaseEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveTab">
<db:title>[since 4.5] void QTabBar::moveTab(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves the item at index position <db:code role="parameter">from</db:code> to index position <db:code role="parameter">to</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabMoved">tabMoved</db:link>()</db:member>
<db:member><db:link xlink:href="qtabbar.xml#tabLayoutChange">tabLayoutChange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QTabBar::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="removeTab">
<db:title>void QTabBar::removeTab(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the tab at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#SelectionBehavior-enum">SelectionBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QTabBar::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setTabButton">
<db:title>[since 4.5] void QTabBar::setTabButton(int <db:emphasis>index</db:emphasis>, QTabBar::ButtonPosition <db:emphasis>position</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">widget</db:code> on the tab <db:code role="parameter">index</db:code>. The widget is placed on the left or right hand side depending upon the <db:code role="parameter">position</db:code>.</db:para>
<db:para>Any previously set widget in <db:code role="parameter">position</db:code> is hidden.</db:para>
<db:para>The tab bar will take ownership of the widget and so all widgets set here will be deleted by the tab bar when it is destroyed unless you separately reparent the widget after setting some other widget (or 0).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabButton">tabButton</db:link>()</db:member>
<db:member><db:link xlink:href="">tabsClosable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabData">
<db:title>void QTabBar::setTabData(int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sets the data of the tab at position <db:code role="parameter">index</db:code> to <db:code role="parameter">data</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabData">tabData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabEnabled">
<db:title>void QTabBar::setTabEnabled(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>If <db:code role="parameter">enabled</db:code> is true then the tab at position <db:code role="parameter">index</db:code> is enabled; otherwise the item at position <db:code role="parameter">index</db:code> is disabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#isTabEnabled">isTabEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabIcon">
<db:title>void QTabBar::setTabIcon(int <db:emphasis>index</db:emphasis>, const QIcon &amp;<db:emphasis>icon</db:emphasis>)</db:title>
<db:para>Sets the icon of the tab at position <db:code role="parameter">index</db:code> to <db:code role="parameter">icon</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabIcon">tabIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabText">
<db:title>void QTabBar::setTabText(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the text of the tab at position <db:code role="parameter">index</db:code> to <db:code role="parameter">text</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabText">tabText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabTextColor">
<db:title>void QTabBar::setTabTextColor(int <db:emphasis>index</db:emphasis>, const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the color of the text in the tab with the given <db:code role="parameter">index</db:code> to the specified <db:code role="parameter">color</db:code>.</db:para>
<db:para>If an invalid color is specified, the tab will use the <db:link xlink:href="qtabbar.xml">QTabBar</db:link> foreground role instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabTextColor">tabTextColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabToolTip">
<db:title>void QTabBar::setTabToolTip(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>tip</db:emphasis>)</db:title>
<db:para>Sets the tool tip of the tab at position <db:code role="parameter">index</db:code> to <db:code role="parameter">tip</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabToolTip">tabToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTabWhatsThis">
<db:title>[since 4.1] void QTabBar::setTabWhatsThis(int <db:emphasis>index</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>Sets the What's This help text of the tab at position <db:code role="parameter">index</db:code> to <db:code role="parameter">text</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabWhatsThis">tabWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QTabBar::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QTabBar::sizeHint() const</db:title>
</db:section>
<db:section xml:id="tabAt">
<db:title>[since 4.3] int QTabBar::tabAt(const QPoint &amp;<db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the index of the tab that covers <db:code role="parameter">position</db:code> or -1 if no tab covers <db:code role="parameter">position</db:code>;</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
</db:section>
<db:section xml:id="tabButton">
<db:title>QWidget *QTabBar::tabButton(int <db:emphasis>index</db:emphasis>, QTabBar::ButtonPosition <db:emphasis>position</db:emphasis>) const</db:title>
<db:para>Returns the widget set a tab <db:code role="parameter">index</db:code> and <db:code role="parameter">position</db:code> or 0 if one is not set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabButton">setTabButton</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabCloseRequested">
<db:title>[since 4.5] void QTabBar::tabCloseRequested(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted when the close button on a tab is clicked. The <db:code role="parameter">index</db:code> is the index that should be removed.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setTabsClosable()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabData">
<db:title>QVariant QTabBar::tabData(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the data of the tab at position <db:code role="parameter">index</db:code>, or a null variant if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabData">setTabData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabIcon">
<db:title>QIcon QTabBar::tabIcon(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icon of the tab at position <db:code role="parameter">index</db:code>, or a null icon if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabIcon">setTabIcon</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabInserted">
<db:title>[virtual protected] void QTabBar::tabInserted(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after a new tab was added or inserted at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabRemoved">tabRemoved</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabLayoutChange">
<db:title>[virtual protected] void QTabBar::tabLayoutChange()</db:title>
<db:para>This virtual handler is called whenever the tab layout changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabRect">tabRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabMoved">
<db:title>[since 4.5] void QTabBar::tabMoved(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>This signal is emitted when the tab has moved the tab at index position <db:code role="parameter">from</db:code> to index position <db:code role="parameter">to</db:code>.</db:para>
<db:para>note: <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> will automatically move the page when this signal is emitted from its tab bar.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#moveTab">moveTab</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabRect">
<db:title>QRect QTabBar::tabRect(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the visual rectangle of the tab at position <db:code role="parameter">index</db:code>, or a null rectangle if <db:code role="parameter">index</db:code> is out of range.</db:para>
</db:section>
<db:section xml:id="tabRemoved">
<db:title>[virtual protected] void QTabBar::tabRemoved(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This virtual handler is called after a tab was removed from position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#tabInserted">tabInserted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabSizeHint">
<db:title>[virtual protected] QSize QTabBar::tabSizeHint(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the size hint for the tab at position <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="tabText">
<db:title>QString QTabBar::tabText(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the text of the tab at position <db:code role="parameter">index</db:code>, or an empty string if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabText">setTabText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabTextColor">
<db:title>QColor QTabBar::tabTextColor(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the text color of the tab with the given <db:code role="parameter">index</db:code>, or a invalid color if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabTextColor">setTabTextColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabToolTip">
<db:title>QString QTabBar::tabToolTip(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the tool tip of the tab at position <db:code role="parameter">index</db:code>, or an empty string if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabToolTip">setTabToolTip</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tabWhatsThis">
<db:title>[since 4.1] QString QTabBar::tabWhatsThis(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the What's This help text of the tab at position <db:code role="parameter">index</db:code>, or an empty string if <db:code role="parameter">index</db:code> is out of range.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabbar.xml#setTabWhatsThis">setTabWhatsThis</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QTabBar::wheelEvent(QWheelEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
