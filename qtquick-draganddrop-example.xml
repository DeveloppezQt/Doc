<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Drag and Drop</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML drag and drop examples.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-draganddrop-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Drag and Drop</db:emphasis> is a collection of small QML examples relating to the drag and drop functionality. For more information, visit the <db:link xlink:href="dnd.xml">Drag and Drop</db:link> page.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="tiles">
<db:title>Tiles</db:title>
<db:para><db:emphasis>Tiles</db:emphasis> adds drag and drop to simple rectangles, which you can drag into a specific grid.</db:para>
<db:para>It has a DragTile component which uses a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to move an item when dragged:</db:para>
<db:programlisting language="qml">Item {
    id: root

    required property string colorKey
    required property int modelData

    width: 64; height: 64

    MouseArea {
        id: mouseArea

        width: 64; height: 64
        anchors.centerIn: parent

        drag.target: tile

        onReleased: parent = tile.Drag.target !== null ? tile.Drag.target : root

        Rectangle {
            id: tile

            width: 64; height: 64
            anchors.verticalCenter: parent.verticalCenter
            anchors.horizontalCenter: parent.horizontalCenter

            color: root.colorKey

            Drag.keys: [ root.colorKey ]
            Drag.active: mouseArea.drag.active
            Drag.hotSpot.x: 32
            Drag.hotSpot.y: 32
            states: State {
                when: mouseArea.drag.active
                AnchorChanges { target: tile; anchors.verticalCenter: undefined; anchors.horizontalCenter: undefined }
            }
        }
    }
}
</db:programlisting>
<db:para>And a DropTile component on which the dragged tiles can be dropped:</db:para>
<db:programlisting language="qml">DropArea {
    id: dragTarget

    property string colorKey

    width: 64; height: 64
    keys: [ colorKey ]

    Rectangle {
        id: dropRectangle

        anchors.fill: parent
        color: dragTarget.containsDrag ? &quot;grey&quot; : dragTarget.colorKey
    }
}
</db:programlisting>
<db:para>The keys property of the <db:link xlink:href="qml-qtquick-droparea.xml">DropArea</db:link> will only allow an item to be dropped on it if it has a matching key in its Drag.keys property.</db:para>
</db:section>
<db:section xml:id="gridview-example">
<db:title>GridView Example</db:title>
<db:para>The <db:emphasis><db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link> Example</db:emphasis> adds drag and drop to a <db:link xlink:href="qml-qtquick-gridview.xml">GridView</db:link>, allowing you to visually reorder the delegates without changing the underlying <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>. It uses a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> to move a delegate item to the position of another item it is dragged over.</db:para>
<db:programlisting language="qml">    model: DelegateModel {
        delegate: DropArea {
            id: delegateRoot
            required property color color;

            width: 80; height: 80

            onEntered: function(drag) {
                visualModel.items.move((drag.source as Icon).visualIndex, icon.visualIndex)
            }

            property int visualIndex: DelegateModel.itemsIndex

            Icon {
                id: icon
                dragParent: root
                visualIndex: delegateRoot.visualIndex
                color: delegateRoot.color
            }
        }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/draganddrop?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
