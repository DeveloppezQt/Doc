<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfont-tag.xml">QFont::Tag</db:link> type provides access to advanced font features.</db:para>
<db:para>This struct was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Tag</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfont.xml">QFont</db:link> provides access to advanced features when shaping text. A feature is defined by a tag, which can be represented as a four-character string, or as a 32bit integer value. This type represents such a tag in a type-safe way. It can be constructed from a four-character, 8bit string literal, or from a corresponding 32bit integer value. Using a shorter or longer string literal will result in a compile-time error.</db:para>
<db:programlisting language="cpp">QFont font;
// Correct
font.setFeature(&quot;frac&quot;);

// Wrong - won't compile
font.setFeature(&quot;fraction&quot;);

// Wrong - will produce runtime warning and fail
font.setFeature(u&quot;fraction&quot;_s);
</db:programlisting>
<db:para>The named constructors allow to create a tag from an 32bit integer or string value, and will return a <db:code>std::nullopt</db:code> when the input is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml#setFeature">QFont::setFeature</db:link>()</db:member>
<db:member><db:link xlink:href="qfont.xml#featureTags">QFont::featureTags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Tag">
<db:title>[constexpr noexcept] Tag::Tag()</db:title>
<db:para>Default constructor, producing an invalid tag.</db:para>
</db:section>
<db:section xml:id="Tag-1">
<db:title>[constexpr noexcept] Tag::Tag(const char (&amp;)[N] <db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a tag from a string literal, <db:code role="parameter">str</db:code>. The literal must be exactly four characters long.</db:para>
<db:programlisting language="cpp">font.setFeature(&quot;frac&quot;, 1);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qfont-tag.xml#fromValue">fromValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static noexcept] std::optional&lt;QFont::Tag&gt; Tag::fromString(QAnyStringView <db:emphasis>view</db:emphasis>)</db:title>
<db:para>Returns a tag constructed from the string in <db:code role="parameter">view</db:code>. The string must be exactly four characters long.</db:para>
<db:para>Returns <db:code>std::nullopt</db:code> if the input is not four characters long, or if the tag produced would be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qfont-tag.xml#fromValue">fromValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromValue">
<db:title>[static constexpr noexcept] std::optional&lt;QFont::Tag&gt; Tag::fromValue(quint32 <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Returns a tag constructed from <db:code role="parameter">value</db:code>, or <db:code>std::nullopt</db:code> if the tag produced would be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[constexpr noexcept] bool Tag::isValid() const</db:title>
<db:para>Returns whether the tag is valid. A tag is valid if its value is not zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qfont-tag.xml#fromValue">fromValue</db:link>()</db:member>
<db:member><db:link xlink:href="qfont-tag.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QByteArray Tag::toString() const</db:title>
<db:para>Returns the string representation of this tag as a byte array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#fromString">fromString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>[constexpr noexcept] quint32 Tag::value() const</db:title>
<db:para>Returns the numerical value of this tag.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont-tag.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qfont-tag.xml#fromValue">fromValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="compareThreeWay">
<db:title>[constexpr noexcept] Qt::strong_ordering compareThreeWay(const QFont::Tag &amp;<db:emphasis>lhs</db:emphasis>, const QFont::Tag &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="comparesEqual">[constexpr noexcept] bool comparesEqual(const QFont::Tag &amp;<db:emphasis>lhs</db:emphasis>, const QFont::Tag &amp;<db:emphasis>rhs</db:emphasis>)</db:bridgehead>
<db:para>Compare <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code> for equality and ordering.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[constexpr noexcept] size_t qHash(QFont::Tag <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
</db:section>
</db:article>
