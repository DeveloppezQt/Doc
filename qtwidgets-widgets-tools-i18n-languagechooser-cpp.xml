<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>I18N Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Internationalization (I18N) example demonstrates Qt's support for translated text. Developers can write the initial application text in one language, and translations can be provided later without any modifications to the code. It also demonstrates how to detect the system language settings and show the UI in the appropriate language.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;languagechooser.h&quot;
#include &quot;mainwindow.h&quot;

#if 0 // Used to be included in Qt4 for Q_WS_MAC
extern void qt_mac_set_menubar_merge(bool merge);

#endif

LanguageChooser::LanguageChooser(const QString&amp;amp; defaultLang, QWidget *parent)
    : QDialog(parent, Qt::WindowStaysOnTopHint)
{
    groupBox = new QGroupBox(&quot;Languages&quot;);

    QGridLayout *groupBoxLayout = new QGridLayout;

    QStringList qmFiles = findQmFiles();
    for (int i = 0; i &amp;lt; qmFiles.size(); ++i) {
        QCheckBox *checkBox = new QCheckBox(languageName(qmFiles[i]));
        qmFileForCheckBoxMap.insert(checkBox, qmFiles[i]);
        connect(checkBox,
                QOverload&amp;lt;bool&amp;gt;::of(&amp;amp;QCheckBox::toggled),
                this,
                &amp;amp;LanguageChooser::checkBoxToggled);
        if (languageMatch(defaultLang, qmFiles[i]))
                checkBox-&amp;gt;setCheckState(Qt::Checked);
        groupBoxLayout-&amp;gt;addWidget(checkBox, i / 2, i % 2);
    }
    groupBox-&amp;gt;setLayout(groupBoxLayout);

    buttonBox = new QDialogButtonBox;

    showAllButton = buttonBox-&amp;gt;addButton(&quot;Show All&quot;,
                                         QDialogButtonBox::ActionRole);
    hideAllButton = buttonBox-&amp;gt;addButton(&quot;Hide All&quot;,
                                         QDialogButtonBox::ActionRole);

    connect(showAllButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;LanguageChooser::showAll);
    connect(hideAllButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;LanguageChooser::hideAll);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(groupBox);
    mainLayout-&amp;gt;addWidget(buttonBox);
    setLayout(mainLayout);

#if 0 // Used to be included in Qt4 for Q_WS_MAC
    qt_mac_set_menubar_merge(false);
#endif

    setWindowTitle(&quot;I18N&quot;);
}

bool LanguageChooser::languageMatch(const QString&amp;amp; lang, const QString&amp;amp; qmFile)
{
    //qmFile: i18n_xx.qm
    const QString prefix = &quot;i18n_&quot;;
    const int langTokenLength = 2; /*FIXME: is checking two chars enough?*/
    return qmFile.midRef(qmFile.indexOf(prefix) + prefix.length(), langTokenLength) == lang.leftRef(langTokenLength);
}

bool LanguageChooser::eventFilter(QObject *object, QEvent *event)
{
    if (event-&amp;gt;type() == QEvent::Close) {
        MainWindow *window = qobject_cast&amp;lt;MainWindow *&amp;gt;(object);
        if (window) {
            QCheckBox *checkBox = mainWindowForCheckBoxMap.key(window);
            if (checkBox)
                checkBox-&amp;gt;setChecked(false);
        }
    }
    return QWidget::eventFilter(object, event);
}

void LanguageChooser::closeEvent(QCloseEvent * /* event */)
{
    qApp-&amp;gt;quit();
}

void LanguageChooser::checkBoxToggled()
{
    QCheckBox *checkBox = qobject_cast&amp;lt;QCheckBox *&amp;gt;(sender());
    MainWindow *window = mainWindowForCheckBoxMap[checkBox];
    if (!window) {
        QTranslator translator;
        translator.load(qmFileForCheckBoxMap[checkBox]);
        qApp-&amp;gt;installTranslator(&amp;amp;translator);

        window = new MainWindow;
        window-&amp;gt;setPalette(colorForLanguage(checkBox-&amp;gt;text()));

        window-&amp;gt;installEventFilter(this);
        mainWindowForCheckBoxMap.insert(checkBox, window);
    }
    window-&amp;gt;setVisible(checkBox-&amp;gt;isChecked());
}

void LanguageChooser::showAll()
{
    foreach (QCheckBox *checkBox, qmFileForCheckBoxMap.keys())
        checkBox-&amp;gt;setChecked(true);
}

void LanguageChooser::hideAll()
{
    foreach (QCheckBox *checkBox, qmFileForCheckBoxMap.keys())
        checkBox-&amp;gt;setChecked(false);
}

QStringList LanguageChooser::findQmFiles()
{
    QDir dir(&quot;:/translations&quot;);
    QStringList fileNames = dir.entryList(QStringList(&quot;*.qm&quot;), QDir::Files,
                                          QDir::Name);
    QMutableStringListIterator i(fileNames);
    while (i.hasNext()) {
        i.next();
        i.setValue(dir.filePath(i.value()));
    }
    return fileNames;
}

QString LanguageChooser::languageName(const QString &amp;amp;qmFile)
{
    QTranslator translator;
    translator.load(qmFile);

    return translator.translate(&quot;MainWindow&quot;, &quot;English&quot;);
}

QColor LanguageChooser::colorForLanguage(const QString &amp;amp;language)
{
    uint hashValue = qHash(language);
    int red = 156 + (hashValue &amp;amp; 0x3F);
    int green = 156 + ((hashValue &amp;gt;&amp;gt; 6) &amp;amp; 0x3F);
    int blue = 156 + ((hashValue &amp;gt;&amp;gt; 12) &amp;amp; 0x3F);
    return QColor(red, green, blue);
}

</db:programlisting>
</db:article>
