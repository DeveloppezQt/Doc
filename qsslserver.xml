<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslServer Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Implements an encrypted, secure TCP server over TLS.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtcpserver.xml" xlink:role="class">QTcpServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslServer is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Class to use in place of <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> to implement TCP server using Transport Layer Security (TLS).</db:para>
<db:para>To configure the secure handshake settings, use the applicable setter functions on a <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link> object, and then use it as an argument to the <db:link xlink:href="qsslserver.xml#setSslConfiguration">setSslConfiguration</db:link>() function. All following incoming connections handled will use these settings.</db:para>
<db:para>To start listening to incoming connections use the <db:link xlink:href="qtcpserver.xml#listen">listen</db:link>() function inherited from <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link>. Other settings can be configured by using the setter functions inherited from the <db:link xlink:href="qtcpserver.xml">QTcpServer</db:link> class.</db:para>
<db:para>Connect to the signals of this class to respond to the incoming connection attempts. They are the same as the signals on <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>, but also passes a pointer to the socket in question.</db:para>
<db:para>When responding to the <db:link xlink:href="qtcpserver.xml#pendingConnectionAvailable">pendingConnectionAvailable</db:link>() signal, use the <db:link xlink:href="qtcpserver.xml#nextPendingConnection">nextPendingConnection</db:link>() function to fetch the next incoming connection and take it out of the pending connection queue. The <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> is a child of the <db:link xlink:href="qsslserver.xml">QSslServer</db:link> and will be deleted when the <db:link xlink:href="qsslserver.xml">QSslServer</db:link> is deleted. It is still a good idea to destroy the object explicitly when you are done with it, to avoid wasting memory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link></db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link></db:member>
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslServer">
<db:title>[explicit] QSslServer::QSslServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qsslserver.xml">QSslServer</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSslServer">
<db:title>[override virtual noexcept] QSslServer::~QSslServer()</db:title>
<db:para>Destroys the <db:link xlink:href="qsslserver.xml">QSslServer</db:link>.</db:para>
<db:para>All open connections are closed.</db:para>
</db:section>
<db:section xml:id="alertReceived">
<db:title>void QSslServer::alertReceived(QSslSocket *<db:emphasis>socket</db:emphasis>, QSsl::AlertLevel <db:emphasis>level</db:emphasis>, QSsl::AlertType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> emits this signal if an alert message was received by the <db:code role="parameter">socket</db:code> from a peer. <db:code role="parameter">level</db:code> tells if the alert was fatal or it was a warning. <db:code role="parameter">type</db:code> is the code explaining why the alert was sent. When a textual description of the alert message is available, it is supplied in <db:code role="parameter">description</db:code>.</db:para>
<db:note>
<db:para>The signal is mostly for informational and debugging purposes and does not require any handling in the application. If the alert was fatal, underlying backend will handle it and close the connection.</db:para>
</db:note>
<db:note>
<db:para>Not all backends support this functionality.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#alertSent">alertSent</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#AlertLevel-enum">QSsl::AlertLevel</db:link></db:member>
<db:member><db:link xlink:href="qsslsocket.xml#AlertType-enum">QSsl::AlertType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alertSent">
<db:title>void QSslServer::alertSent(QSslSocket *<db:emphasis>socket</db:emphasis>, QSsl::AlertLevel <db:emphasis>level</db:emphasis>, QSsl::AlertType <db:emphasis>type</db:emphasis>, const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> emits this signal if an alert message was sent from <db:code role="parameter">socket</db:code> to a peer. <db:code role="parameter">level</db:code> describes if it was a warning or a fatal error. <db:code role="parameter">type</db:code> gives the code of the alert message. When a textual description of the alert message is available, it is supplied in <db:code role="parameter">description</db:code>.</db:para>
<db:note>
<db:para>This signal is mostly informational and can be used for debugging purposes, normally it does not require any actions from the application.</db:para>
</db:note>
<db:note>
<db:para>Not all backends support this functionality.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#alertReceived">alertReceived</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#AlertLevel-enum">QSsl::AlertLevel</db:link></db:member>
<db:member><db:link xlink:href="qsslsocket.xml#AlertType-enum">QSsl::AlertType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QSslServer::errorOccurred(QSslSocket *<db:emphasis>socket</db:emphasis>, QAbstractSocket::SocketError <db:emphasis>socketError</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred during handshake. The <db:code role="parameter">socketError</db:code> parameter describes the type of error that occurred.</db:para>
<db:para>The <db:code role="parameter">socket</db:code> is automatically deleted after this signal is emitted if the socket handshake has not reached encrypted state. But if the <db:code role="parameter">socket</db:code> is successfully encrypted, it is inserted into the <db:link xlink:href="qsslserver.xml">QSslServer</db:link>'s pending connections queue. When the user has called <db:link xlink:href="qtcpserver.xml#nextPendingConnection">QTcpServer::nextPendingConnection</db:link>() it is the user's responsibility to destroy the <db:code role="parameter">socket</db:code> or the <db:code role="parameter">socket</db:code> will not be destroyed until the <db:link xlink:href="qsslserver.xml">QSslServer</db:link> object is destroyed. If an error occurs on a <db:code role="parameter">socket</db:code> after it has been inserted into the pending connections queue, this signal will not be emitted, and the <db:code role="parameter">socket</db:code> will not be removed or destroyed.</db:para>
<db:note>
<db:para>You cannot use <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link> when connecting to this signal, or the <db:code role="parameter">socket</db:code> will have been already destroyed when the signal is handled.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractsocket.xml#error">QSslSocket::error</db:link>()</db:member>
<db:member><db:link xlink:href="qtcpserver.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handshakeInterruptedOnError">
<db:title>void QSslServer::handshakeInterruptedOnError(QSslSocket *<db:emphasis>socket</db:emphasis>, const QSslError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> emits this signal if a certificate verification error was found by <db:code role="parameter">socket</db:code> and if early error reporting was enabled in <db:link xlink:href="qsslconfiguration.xml">QSslConfiguration</db:link>. An application is expected to inspect the <db:code role="parameter">error</db:code> and decide if it wants to continue the handshake, or abort it and send an alert message to the peer. The signal-slot connection must be direct.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml#continueInterruptedHandshake">QSslSocket::continueInterruptedHandshake</db:link>()</db:member>
<db:member><db:link xlink:href="qsslserver.xml#sslErrors">sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#setHandshakeMustInterruptOnError">QSslConfiguration::setHandshakeMustInterruptOnError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handshakeTimeout">
<db:title>int QSslServer::handshakeTimeout() const</db:title>
<db:para>Returns the currently configured handshake timeout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#setHandshakeTimeout">setHandshakeTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="incomingConnection">
<db:title>[override virtual protected] void QSslServer::incomingConnection(qintptr <db:emphasis>socket</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qtcpserver.xml#incomingConnection" role="function">QTcpServer::incomingConnection(qintptr socketDescriptor)</db:link>.</db:para>
<db:para>Called when a new connection is established.</db:para>
<db:para>Converts <db:code role="parameter">socket</db:code> to a <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link>.</db:para>
</db:section>
<db:section xml:id="peerVerifyError">
<db:title>void QSslServer::peerVerifyError(QSslSocket *<db:emphasis>socket</db:emphasis>, const QSslError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> can emit this signal several times during the SSL handshake, before encryption has been established, to indicate that an error has occurred while establishing the identity of the peer. The <db:code role="parameter">error</db:code> is usually an indication that <db:code role="parameter">socket</db:code> is unable to securely identify the peer.</db:para>
<db:para>This signal provides you with an early indication when something's wrong. By connecting to this signal, you can manually choose to tear down the connection from inside the connected slot before the handshake has completed. If no action is taken, <db:link xlink:href="qsslserver.xml">QSslServer</db:link> will proceed to emitting <db:link xlink:href="qsslserver.xml#sslErrors">sslErrors</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#sslErrors">sslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="preSharedKeyAuthenticationRequired">
<db:title>void QSslServer::preSharedKeyAuthenticationRequired(QSslSocket *<db:emphasis>socket</db:emphasis>, QSslPreSharedKeyAuthenticator *<db:emphasis>authenticator</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> emits this signal when <db:code role="parameter">socket</db:code> negotiates a PSK ciphersuite, and therefore PSK authentication is then required.</db:para>
<db:para>When using PSK, the server must supply a valid identity and a valid pre shared key, in order for the SSL handshake to continue. Applications can provide this information in a slot connected to this signal, by filling in the passed <db:code role="parameter">authenticator</db:code> object according to their needs.</db:para>
<db:note>
<db:para>Ignoring this signal, or failing to provide the required credentials, will cause the handshake to fail, and therefore the connection to be aborted.</db:para>
</db:note>
<db:note>
<db:para>The <db:code role="parameter">authenticator</db:code> object is owned by the <db:code role="parameter">socket</db:code> and must not be deleted by the application.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslpresharedkeyauthenticator.xml">QSslPreSharedKeyAuthenticator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHandshakeTimeout">
<db:title>void QSslServer::setHandshakeTimeout(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">timeout</db:code> to use for all incoming handshakes, in milliseconds.</db:para>
<db:para>This is relevant in the scenario where a client, whether malicious or accidental, connects to the server but makes no attempt at communicating or initiating a handshake. <db:link xlink:href="qsslserver.xml">QSslServer</db:link> will then automatically end the connection after <db:code role="parameter">timeout</db:code> milliseconds have elapsed.</db:para>
<db:para>By default the timeout is 5000 milliseconds (5 seconds).</db:para>
<db:note>
<db:para>The underlying TLS framework may have their own timeout logic now or in the future, this function does not affect that.</db:para>
</db:note>
<db:note>
<db:para>The <db:code role="parameter">timeout</db:code> passed to this function will only apply to <db:emphasis>new</db:emphasis> connections. If a client is already connected it will use the timeout which was set when it connected.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#handshakeTimeout">handshakeTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QSslServer::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>sslConfiguration</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">sslConfiguration</db:code> to use for all following incoming connections.</db:para>
<db:para>This must be called before <db:link xlink:href="qtcpserver.xml#listen">listen</db:link>() to ensure that the desired configuration was in use during all handshakes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#setSslConfiguration">QSslSocket::setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QSslServer::sslConfiguration() const</db:title>
<db:para>Returns the current ssl configuration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslErrors">
<db:title>void QSslServer::sslErrors(QSslSocket *<db:emphasis>socket</db:emphasis>, const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qsslserver.xml">QSslServer</db:link> emits this signal after the SSL handshake to indicate that one or more errors have occurred while establishing the identity of the peer. The errors are usually an indication that <db:code role="parameter">socket</db:code> is unable to securely identify the peer. Unless any action is taken, the connection will be dropped after this signal has been emitted.</db:para>
<db:para>If you want to continue connecting despite the errors that have occurred, you must call <db:link xlink:href="qsslsocket.xml#ignoreSslErrors">QSslSocket::ignoreSslErrors</db:link>() from inside a slot connected to this signal. If you need to access the error list at a later point, you can call sslHandshakeErrors().</db:para>
<db:para><db:code role="parameter">errors</db:code> contains one or more errors that prevent <db:link xlink:href="qsslsocket.xml">QSslSocket</db:link> from verifying the identity of the peer.</db:para>
<db:note>
<db:para>You cannot use <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link> when connecting to this signal, or calling <db:link xlink:href="qsslsocket.xml#ignoreSslErrors">QSslSocket::ignoreSslErrors</db:link>() will have no effect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslserver.xml#peerVerifyError">peerVerifyError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startedEncryptionHandshake">
<db:title>void QSslServer::startedEncryptionHandshake(QSslSocket *<db:emphasis>socket</db:emphasis>)</db:title>
<db:para>This signal is emitted when the client, connected to <db:code role="parameter">socket</db:code>, initiates the TLS handshake.</db:para>
</db:section>
</db:section>
</db:article>
