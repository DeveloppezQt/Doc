<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Quaternion QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides utility functions for quaternion.</db:para>
<db:para>This type was introduced in Qt 5.15.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.15</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:code>Quaternion</db:code> is a global object with utility functions.</db:para>
<db:para>It is not instantiable; to use it, call the members of the global <db:code>Quaternion</db:code> object directly. For example:</db:para>
<db:programlisting language="qml">Node {
    rotation: Quaternion.fromAxisAndAngle(Qt.vector3d(1, 0, 0), 45)
}
</db:programlisting>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="fromAxesAndAngles-method">
<db:title>quaternion fromAxesAndAngles(vector3d <db:emphasis>axis1</db:emphasis>, real <db:emphasis>angle1</db:emphasis>, vector3d <db:emphasis>axis2</db:emphasis>, real <db:emphasis>angle2</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, and <db:code role="parameter">angle2</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxesAndAngles-method-1">
<db:title>quaternion fromAxesAndAngles(vector3d <db:emphasis>axis1</db:emphasis>, real <db:emphasis>angle1</db:emphasis>, vector3d <db:emphasis>axis2</db:emphasis>, real <db:emphasis>angle2</db:emphasis>, vector3d <db:emphasis>axis3</db:emphasis>, real <db:emphasis>angle3</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, <db:code role="parameter">angle2</db:code>, <db:code role="parameter">axis3</db:code>, and <db:code role="parameter">angle3</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-method">
<db:title>quaternion fromAxisAndAngle(vector3d <db:emphasis>axis</db:emphasis>, real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-method-1">
<db:title>quaternion fromAxisAndAngle(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>, real <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, and <db:code role="parameter">angle</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles-method">
<db:title>quaternion fromEulerAngles(vector3d <db:emphasis>eulerAngles</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">eulerAngles</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles-method-1">
<db:title>quaternion fromEulerAngles(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, real <db:emphasis>z</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, and <db:code role="parameter">z</db:code>. Returns the resulting quaternion.</db:para>
</db:section>
<db:section xml:id="lookAt-method">
<db:title>quaternion lookAt(vector3d <db:emphasis>sourcePosition</db:emphasis>, vector3d <db:emphasis>targetPosition</db:emphasis>, vector3d <db:emphasis>forwardDirection</db:emphasis>, vector3d <db:emphasis>upDirection</db:emphasis>)</db:title>
<db:para>Creates a quaternion from <db:code role="parameter">sourcePosition</db:code>, <db:code role="parameter">targetPosition</db:code>, <db:code role="parameter">forwardDirection</db:code>, and <db:code role="parameter">upDirection</db:code>. This is used for getting a rotation value for pointing at a particular target, and can be used to point a camera at a position in a scene.</db:para>
<db:para><db:code role="parameter">forwardDirection</db:code> defaults to <db:code>Qt.vector3d(0, 0, -1)</db:code> <db:code role="parameter">upDirection</db:code> defaults to <db:code>Qt.vector3d(0, 1, 0)</db:code></db:para>
<db:para>Returns the resulting quaternion.</db:para>
</db:section>
</db:section>
</db:article>
