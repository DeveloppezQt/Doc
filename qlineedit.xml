<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QLineEdit Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> widget is a one-line text editor.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLineEdit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLineEdit is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop.</db:para>
<db:para>By changing the echoMode() of a line edit, it can also be used as a &quot;write-only&quot; field, for inputs such as passwords.</db:para>
<db:para>The length of the text can be constrained to maxLength(). The text can be arbitrarily constrained using a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or an inputMask(), or both. When switching between a validator and an input mask on the same line edit, it is best to clear the validator or input mask to prevent undefined behavior.</db:para>
<db:para>A related class is <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> which allows multi-line, rich text editing.</db:para>
<db:para>You can change the text with setText() or <db:link xlink:href="qlineedit.xml#insert">insert</db:link>(). The text is retrieved with text(); the displayed text (which may be different, see <db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link>) is retrieved with displayText(). Text can be selected with <db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>() or <db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>(), and the selection can be <db:link xlink:href="qlineedit.xml#cut">cut</db:link>(), <db:link xlink:href="qlineedit.xml#copy">copy</db:link>()ied and <db:link xlink:href="qlineedit.xml#paste">paste</db:link>()d. The text can be aligned with setAlignment().</db:para>
<db:para>When the text changes the <db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>() signal is emitted; when the text changes other than by calling setText() the <db:link xlink:href="qlineedit.xml#textEdited">textEdited</db:link>() signal is emitted; when the cursor is moved the <db:link xlink:href="qlineedit.xml#cursorPositionChanged">cursorPositionChanged</db:link>() signal is emitted; and when the Return or Enter key is pressed the <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>() signal is emitted.</db:para>
<db:para>When editing is finished, either because the line edit lost focus or Return/Enter is pressed the <db:link xlink:href="qlineedit.xml#editingFinished">editingFinished</db:link>() signal is emitted.</db:para>
<db:para>Note that if there is a validator set on the line edit, the <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>()/<db:link xlink:href="qlineedit.xml#editingFinished">editingFinished</db:link>() signals will only be emitted if the validator returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
<db:para>By default, QLineEdits have a frame as specified by platform style guides; you can turn it off by calling setFrame(false).</db:para>
<db:para>The default key bindings are described below. The line edit also provides a context menu (usually invoked by a right mouse click) that presents some of these editing options. <db:anchor xml:id="desc"/>
</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypress</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Left Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Left Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves and selects text one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Right Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Right Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves and selects text one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the word to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the word to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+A</db:para>
</db:td>
<db:td>
<db:para>Select all.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+C</db:para>
</db:td>
<db:td>
<db:para>Copies the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Insert</db:para>
</db:td>
<db:td>
<db:para>Copies the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+K</db:para>
</db:td>
<db:td>
<db:para>Deletes to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+V</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into line edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Insert</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into line edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+X</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Z</db:para>
</db:td>
<db:td>
<db:para>Undoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Y</db:para>
</db:td>
<db:td>
<db:para>Redoes the last undone operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any other key sequence that represents a valid character, will cause the character to be inserted into the line edit.</db:para>
<db:informaltable style="generic" width="100%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-lineedit.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style line edit</db:para>
</db:td>
<db:td>
<db:para>A line edit shown in the <db:link xlink:href="gallery-macintosh.xml">Macintosh widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-lineedit.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style line edit</db:para>
</db:td>
<db:td>
<db:para>A line edit shown in the <db:link xlink:href="gallery-windowsvista.xml">Windows Vista widget style</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-lineedit.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style line edit</db:para>
</db:td>
<db:td>
<db:para>A line edit shown in the <db:link xlink:href="gallery-fusion.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:member>
<db:member><db:link xlink:href="qlabel.xml">QLabel</db:link></db:member>
<db:member><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Field, Entry</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Line Edits Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="EchoMode-enum">
<db:title>enum QLineEdit::EchoMode</db:title>
<db:para>This enum type describes how a line edit should display its contents.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Display characters as they are entered. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::NoEcho</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::Password</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Display asterisks instead of the characters actually entered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::PasswordEchoOnEdit</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Display characters as they are entered while editing otherwise display asterisks.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setEchoMode()</db:link></db:member>
<db:member><db:link xlink:href="">echoMode()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLineEdit">
<db:title>[explicit] QLineEdit::QLineEdit(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a line edit with no text.</db:para>
<db:para>The maximum text length is set to 32767 characters.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setText()</db:link></db:member>
<db:member><db:link xlink:href="">setMaxLength()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLineEdit-1">
<db:title>[explicit] QLineEdit::QLineEdit(const QString &amp;<db:emphasis>contents</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a line edit containing the text <db:code role="parameter">contents</db:code>.</db:para>
<db:para>The cursor position is set to the end of the line and the maximum text length to 32767 characters.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">text()</db:link></db:member>
<db:member><db:link xlink:href="">setMaxLength()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QLineEdit">
<db:title>[virtual noexcept] QLineEdit::~QLineEdit()</db:title>
<db:para>Destroys the line edit.</db:para>
</db:section>
<db:section xml:id="backspace">
<db:title>void QLineEdit::backspace()</db:title>
<db:para>If no text is selected, deletes the character to the left of the text cursor and moves the cursor one position to the left. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#del">del</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QLineEdit::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QLineEdit::clear()</db:title>
<db:para>Clears the contents of the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setText()</db:link></db:member>
<db:member><db:link xlink:href="qlineedit.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completer">
<db:title>[since 4.2] QCompleter *QLineEdit::completer() const</db:title>
<db:para>Returns the current <db:link xlink:href="qcompleter.xml">QCompleter</db:link> that provides completions.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setCompleter">setCompleter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QLineEdit::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
<db:para>Shows the standard context menu created with <db:link xlink:href="qlineedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>().</db:para>
<db:para>If you do not want the line edit to have a context menu, you can set its contextMenuPolicy to <db:link xlink:href="qt.xml#ContextMenuPolicy-enum">Qt::NoContextMenu</db:link>. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call <db:link xlink:href="qlineedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>() and extend the menu returned.</db:para>
<db:programlisting language="cpp">void LineEdit::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    menu-&gt;addAction(tr(&quot;My Menu Item&quot;));
    //...
    menu-&gt;exec(event-&gt;globalPos());
    delete menu;
}
</db:programlisting>
<db:para>The <db:code role="parameter">event</db:code> parameter is used to obtain the position where the mouse cursor was when the event was generated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setContextMenuPolicy()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy">
<db:title>void QLineEdit::copy() const</db:title>
<db:para>Copies the selected text to the clipboard, if there is any, and if echoMode() is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#paste">paste</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStandardContextMenu">
<db:title>QMenu *QLineEdit::createStandardContextMenu()</db:title>
<db:para>This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default <db:link xlink:href="qlineedit.xml#contextMenuEvent">contextMenuEvent</db:link>() handler. The popup menu's ownership is transferred to the caller.</db:para>
</db:section>
<db:section xml:id="cursorBackward">
<db:title>void QLineEdit::cursorBackward(bool <db:emphasis>mark</db:emphasis>, int <db:emphasis>steps</db:emphasis> = 1)</db:title>
<db:para>Moves the cursor back <db:code role="parameter">steps</db:code> characters. If <db:code role="parameter">mark</db:code> is true each character moved over is added to the selection; if <db:code role="parameter">mark</db:code> is false the selection is cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorForward">cursorForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorForward">
<db:title>void QLineEdit::cursorForward(bool <db:emphasis>mark</db:emphasis>, int <db:emphasis>steps</db:emphasis> = 1)</db:title>
<db:para>Moves the cursor forward <db:code role="parameter">steps</db:code> characters. If <db:code role="parameter">mark</db:code> is true each character moved over is added to the selection; if <db:code role="parameter">mark</db:code> is false the selection is cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorBackward">cursorBackward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorPositionChanged">
<db:title>void QLineEdit::cursorPositionChanged(int <db:emphasis>old</db:emphasis>, <db:emphasis>int</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the cursor moves. The previous position is given by <db:code role="parameter">old</db:code>, and the new position by <db:code role="parameter">new</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setCursorPosition()</db:link></db:member>
<db:member><db:link xlink:href="">cursorPosition()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorRect">
<db:title>[protected, since 4.4] QRect QLineEdit::cursorRect() const</db:title>
<db:para>Returns a rectangle that includes the lineedit cursor.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="cursorWordBackward">
<db:title>void QLineEdit::cursorWordBackward(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:para>Moves the cursor one word backward. If <db:code role="parameter">mark</db:code> is true, the word is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorWordForward">cursorWordForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorWordForward">
<db:title>void QLineEdit::cursorWordForward(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:para>Moves the cursor one word forward. If <db:code role="parameter">mark</db:code> is true, the word is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorWordBackward">cursorWordBackward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cut">
<db:title>void QLineEdit::cut()</db:title>
<db:para>Copies the selected text to the clipboard and deletes it, if there is any, and if echoMode() is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>.</db:para>
<db:para>If the current validator disallows deleting the selected text, cut() will copy without deleting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#paste">paste</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="del">
<db:title>void QLineEdit::del()</db:title>
<db:para>If no text is selected, deletes the character to the right of the text cursor. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#backspace">backspace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deselect">
<db:title>void QLineEdit::deselect()</db:title>
<db:para>Deselects any selected text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QLineEdit::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QLineEdit::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QLineEdit::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QLineEdit::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="editingFinished">
<db:title>void QLineEdit::editingFinished()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed or the line edit loses focus. Note that if there is a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or inputMask() set on the line edit and enter/return is pressed, the editingFinished() signal will only be emitted if the input follows the inputMask() and the <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>void QLineEdit::end(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:para>Moves the text cursor to the end of the line unless it is already there. If <db:code role="parameter">mark</db:code> is true, text is selected towards the last position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#home">home</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QLineEdit::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QLineEdit::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QLineEdit::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="getTextMargins">
<db:title>[since 4.5] void QLineEdit::getTextMargins(int *<db:emphasis>left</db:emphasis>, int *<db:emphasis>top</db:emphasis>, int *<db:emphasis>right</db:emphasis>, int *<db:emphasis>bottom</db:emphasis>) const</db:title>
<db:para>Returns the widget's text margins for <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setTextMargins">setTextMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="home">
<db:title>void QLineEdit::home(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:para>Moves the text cursor to the beginning of the line unless it is already there. If <db:code role="parameter">mark</db:code> is true, text is selected towards the first position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QLineEdit::initStyleOption(QStyleOptionFrame *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionframe.xml">QStyleOptionFrame</db:link> or <db:link xlink:href="qstyleoptionframe.xml#QStyleOptionFrameV2-typedef">QStyleOptionFrameV2</db:link>, but don't want to fill in all the information themselves. This function will check the version of the <db:link xlink:href="qstyleoptionframe.xml">QStyleOptionFrame</db:link> and fill in the additional values for a <db:link xlink:href="qstyleoptionframe.xml#QStyleOptionFrameV2-typedef">QStyleOptionFrameV2</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QLineEdit::inputMethodEvent(QInputMethodEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QLineEdit::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>property</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QLineEdit::insert(const QString &amp;<db:emphasis>newText</db:emphasis>)</db:title>
<db:para>Deletes any selected text, inserts <db:code role="parameter">newText</db:code>, and validates the result. If it is valid, it sets it as the new contents of the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">setText()</db:link></db:member>
<db:member><db:link xlink:href="qlineedit.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QLineEdit::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
<db:para>Converts the given key press <db:code role="parameter">event</db:code> into a line edit action.</db:para>
<db:para>If Return or Enter is pressed and the current text is valid (or can be <db:link xlink:href="qvalidator.xml#fixup">made valid</db:link> by the validator), the signal <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>() is emitted.</db:para>
<db:para>The default key bindings are listed in the class's detailed description.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QLineEdit::minimumSizeHint() const</db:title>
<db:para>Returns a minimum size for the line edit.</db:para>
<db:para>The width returned is enough for at least one character.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QLineEdit::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QLineEdit::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QLineEdit::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QLineEdit::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QLineEdit::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paste">
<db:title>void QLineEdit::paste()</db:title>
<db:para>Inserts the clipboard's text at the cursor position, deleting any selected text, providing the line edit is not <db:link xlink:href="">read-only</db:link>.</db:para>
<db:para>If the end result would not be acceptable to the current <db:link xlink:href="qlineedit.xml#setValidator">validator</db:link>, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#cut">cut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QLineEdit::redo()</db:title>
<db:para>Redoes the last operation if redo is available.</db:para>
</db:section>
<db:section xml:id="returnPressed">
<db:title>void QLineEdit::returnPressed()</db:title>
<db:para>This signal is emitted when the Return or Enter key is pressed. Note that if there is a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or inputMask() set on the line edit, the returnPressed() signal will only be emitted if the input follows the inputMask() and the <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>void QLineEdit::selectAll()</db:title>
<db:para>Selects all the text (i.e. highlights it) and moves the cursor to the end. This is useful when a default value has been inserted because if the user types before clicking on the widget, the selected text will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#deselect">deselect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QLineEdit::selectionChanged()</db:title>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">hasSelectedText()</db:link></db:member>
<db:member><db:link xlink:href="">selectedText()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart">
<db:title>int QLineEdit::selectionStart() const</db:title>
<db:para>selectionStart() returns the index of the first selected character in the line edit or -1 if no text is selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">selectedText()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompleter">
<db:title>[since 4.2] void QLineEdit::setCompleter(QCompleter *<db:emphasis>c</db:emphasis>)</db:title>
<db:para>Sets this line edit to provide auto completions from the completer, <db:code role="parameter">c</db:code>. The completion mode is set using QCompleter::setCompletionMode().</db:para>
<db:para>To use a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> with a <db:link xlink:href="qvalidator.xml">QValidator</db:link> or QLineEdit::inputMask, you need to ensure that the model provided to <db:link xlink:href="qcompleter.xml">QCompleter</db:link> contains valid entries. You can use the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to ensure that the <db:link xlink:href="qcompleter.xml">QCompleter</db:link>'s model contains only valid entries.</db:para>
<db:para>If <db:code role="parameter">c</db:code> == 0, setCompleter() removes the current completer, effectively disabling auto completion.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#completer">completer</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>void QLineEdit::setSelection(int <db:emphasis>start</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:para>Selects text from position <db:code role="parameter">start</db:code> and for <db:code role="parameter">length</db:code> characters. Negative lengths are allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#deselect">deselect</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>()</db:member>
<db:member><db:link xlink:href="">selectedText()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextMargins">
<db:title>[since 4.6] void QLineEdit::setTextMargins(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">margins</db:code> around the text inside the frame.</db:para>
<db:para>See also <db:link xlink:href="qlineedit.xml#textMargins">textMargins</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#textMargins">textMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextMargins-1">
<db:title>[since 4.5] void QLineEdit::setTextMargins(int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:para>Sets the margins around the text inside the frame to have the sizes <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code>.</db:para>
<db:para>See also <db:link xlink:href="qlineedit.xml#getTextMargins">getTextMargins</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="setValidator">
<db:title>void QLineEdit::setValidator(const QValidator *<db:emphasis>v</db:emphasis>)</db:title>
<db:para>Sets this line edit to only accept input that the validator, <db:code role="parameter">v</db:code>, will accept. This allows you to place any arbitrary constraints on the text which may be entered.</db:para>
<db:para>If <db:code role="parameter">v</db:code> == 0, setValidator() removes the current input validator. The initial setting is to have no input validator (i.e. any input is accepted up to maxLength()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#validator">validator</db:link>()</db:member>
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QLineEdit::sizeHint() const</db:title>
<db:para>Returns a recommended size for the widget.</db:para>
<db:para>The width returned, in pixels, is usually enough for about 15 to 20 characters.</db:para>
</db:section>
<db:section xml:id="textChanged">
<db:title>void QLineEdit::textChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the text changes. The <db:code role="parameter">text</db:code> argument is the new text.</db:para>
<db:para>Unlike <db:link xlink:href="qlineedit.xml#textEdited">textEdited</db:link>(), this signal is also emitted when the text is changed programmatically, for example, by calling setText().</db:para>
</db:section>
<db:section xml:id="textEdited">
<db:title>void QLineEdit::textEdited(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the text is edited. The <db:code role="parameter">text</db:code> argument is the new text.</db:para>
<db:para>Unlike <db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>(), this signal is not emitted when the text is changed programmatically, for example, by calling setText().</db:para>
</db:section>
<db:section xml:id="textMargins">
<db:title>[since 4.6] QMargins QLineEdit::textMargins() const</db:title>
<db:para>Returns the widget's text margins.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setTextMargins">setTextMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undo">
<db:title>void QLineEdit::undo()</db:title>
<db:para>Undoes the last operation if undo is available. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
</db:section>
<db:section xml:id="validator">
<db:title>const QValidator *QLineEdit::validator() const</db:title>
<db:para>Returns a pointer to the current input validator, or 0 if no validator has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
