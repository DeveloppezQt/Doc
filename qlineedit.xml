<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLineEdit Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> widget is a one-line text editor.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLineEdit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLineEdit is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/windows-lineedit.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop (see <db:link xlink:href="qlineedit.xml#dragEnabled-prop">setDragEnabled</db:link>()).</db:para>
<db:para>By changing the <db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link>() of a line edit, it can also be used as a &quot;write-only&quot; field, for inputs such as passwords.</db:para>
<db:para>The length of the text can be constrained to <db:link xlink:href="qlineedit.xml#maxLength-prop">maxLength</db:link>(). The text can be arbitrarily constrained using a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or an <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link>(), or both. When switching between a validator and an input mask on the same line edit, it is best to clear the validator or input mask to prevent undefined behavior.</db:para>
<db:para>A related class is <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> which allows multi-line, rich text editing.</db:para>
<db:para>You can change the text with <db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>() or <db:link xlink:href="qlineedit.xml#insert">insert</db:link>(). The text is retrieved with <db:link xlink:href="qlineedit.xml#text-prop">text</db:link>(); the displayed text (which may be different, see <db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link>) is retrieved with <db:link xlink:href="qlineedit.xml#displayText-prop">displayText</db:link>(). Text can be selected with <db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>() or <db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>(), and the selection can be <db:link xlink:href="qlineedit.xml#cut">cut</db:link>(), <db:link xlink:href="qlineedit.xml#copy">copy</db:link>()ied and <db:link xlink:href="qlineedit.xml#paste">paste</db:link>()d. The text can be aligned with <db:link xlink:href="qlineedit.xml#alignment-prop">setAlignment</db:link>().</db:para>
<db:para>When the text changes the <db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>() signal is emitted; when the text changes other than by calling <db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>() the <db:link xlink:href="qlineedit.xml#textEdited">textEdited</db:link>() signal is emitted; when the cursor is moved the <db:link xlink:href="qlineedit.xml#cursorPositionChanged">cursorPositionChanged</db:link>() signal is emitted; and when the Return or Enter key is pressed the <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>() signal is emitted.</db:para>
<db:para>When editing is finished, either because the line edit lost focus or Return/Enter is pressed the <db:link xlink:href="qlineedit.xml#editingFinished">editingFinished</db:link>() signal is emitted.</db:para>
<db:para>Note that if there is a validator set on the line edit, the <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>()/<db:link xlink:href="qlineedit.xml#editingFinished">editingFinished</db:link>() signals will only be emitted if the validator returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
<db:para>By default, QLineEdits have a frame as specified by platform style guides; you can turn it off by calling <db:link xlink:href="qlineedit.xml#frame-prop">setFrame</db:link>(false).</db:para>
<db:para>The default key bindings are described below. The line edit also provides a context menu (usually invoked by a right mouse click) that presents some of these editing options. <db:anchor xml:id="desc"/>
</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Keypress</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Left Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Left Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves and selects text one character to the left.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Right Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Right Arrow</db:para>
</db:td>
<db:td>
<db:para>Moves and selects text one character to the right.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Home</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the beginning of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>End</db:para>
</db:td>
<db:td>
<db:para>Moves the cursor to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Backspace</db:para>
</db:td>
<db:td>
<db:para>Deletes the word to the left of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the character to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the word to the right of the cursor.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+A</db:para>
</db:td>
<db:td>
<db:para>Select all.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+C</db:para>
</db:td>
<db:td>
<db:para>Copies the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Insert</db:para>
</db:td>
<db:td>
<db:para>Copies the selected text to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+K</db:para>
</db:td>
<db:td>
<db:para>Deletes to the end of the line.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+V</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into line edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Insert</db:para>
</db:td>
<db:td>
<db:para>Pastes the clipboard text into line edit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+X</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Shift+Delete</db:para>
</db:td>
<db:td>
<db:para>Deletes the selected text and copies it to the clipboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Z</db:para>
</db:td>
<db:td>
<db:para>Undoes the last operation.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ctrl+Y</db:para>
</db:td>
<db:td>
<db:para>Redoes the last undone operation.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Any other key sequence that represents a valid character, will cause the character to be inserted into the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextedit.xml">QTextEdit</db:link></db:member>
<db:member><db:link xlink:href="qlabel.xml">QLabel</db:link></db:member>
<db:member><db:link xlink:href="qcombobox.xml">QComboBox</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Field, Entry</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Line Edits Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ActionPosition-enum">
<db:title>[since 5.2] enum QLineEdit::ActionPosition</db:title>
<db:enumsynopsis>
<db:enumname>ActionPosition</db:enumname>
<db:enumitem>
<db:enumidentifier>LeadingPosition</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TrailingPosition</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type describes how a line edit should display the action widgets to be added.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::LeadingPosition</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The widget is displayed to the left of the text when using layout direction <db:code>Qt::LeftToRight</db:code> or to the right when using <db:code>Qt::RightToLeft</db:code>, respectively.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::TrailingPosition</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The widget is displayed to the right of the text when using layout direction <db:code>Qt::LeftToRight</db:code> or to the left when using <db:code>Qt::RightToLeft</db:code>, respectively.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#addAction">addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#layoutDirection-prop">QWidget::layoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="EchoMode-enum">
<db:title>enum QLineEdit::EchoMode</db:title>
<db:enumsynopsis>
<db:enumname>EchoMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Normal</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoEcho</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Password</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PasswordEchoOnEdit</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type describes how a line edit should display its contents.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Display characters as they are entered. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::NoEcho</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Do not display anything. This may be appropriate for passwords where even the length of the password should be kept secret.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::Password</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Display platform-dependent password mask characters instead of the characters actually entered.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlineedit.xml">QLineEdit</db:link></db:emphasis>::PasswordEchoOnEdit</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Display characters as they are entered while editing otherwise display characters as with <db:code>Password</db:code>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#echoMode-prop">setEchoMode</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="acceptableInput-prop">
<db:title>[read-only] acceptableInput : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>acceptableInput</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasAcceptableInput</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the input satisfies the <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link> and the validator.</db:para>
<db:para>By default, this property is <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasAcceptableInput</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#inputMask-prop">setInputMask</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:varname>alignment</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">alignment</db:synopsisinfo>
<db:synopsisinfo role="setter">setAlignment</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the alignment of the line edit.</db:para>
<db:para>Both horizontal and vertical alignment is allowed here, <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignJustify</db:link> will map to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>.</db:para>
<db:para>By default, this property contains a combination of <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link> and <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>flag</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearButtonEnabled-prop">
<db:title>[since 5.2] clearButtonEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>clearButtonEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isClearButtonEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setClearButtonEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the line edit displays a clear button when it is not empty.</db:para>
<db:para>If enabled, the line edit displays a trailing <db:emphasis>clear</db:emphasis> button when it contains some text, otherwise the line edit does not show a clear button (the default).</db:para>
<db:para>This property was introduced in Qt 5.2.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isClearButtonEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setClearButtonEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#addAction">addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorMoveStyle-prop">
<db:title>cursorMoveStyle : Qt::CursorMoveStyle</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::CursorMoveStyle</db:type>
<db:varname>cursorMoveStyle</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorMoveStyle</db:synopsisinfo>
<db:synopsisinfo role="setter">setCursorMoveStyle</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the movement style of cursor in this line edit.</db:para>
<db:para>When this property is set to <db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::VisualMoveStyle</db:link>, the line edit will use visual movement style. Pressing the left arrow key will always cause the cursor to move left, regardless of the text's writing direction. The same behavior applies to right arrow key.</db:para>
<db:para>When the property is <db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::LogicalMoveStyle</db:link> (the default), within a LTR text block, increase cursor position when pressing left arrow key, decrease cursor position when pressing the right arrow key. If the text block is right to left, the opposite behavior applies.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::CursorMoveStyle</db:link></db:type> <db:emphasis role="bold">cursorMoveStyle</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCursorMoveStyle</db:emphasis>(<db:type><db:link xlink:href="qt.xml#CursorMoveStyle-enum">Qt::CursorMoveStyle</db:link></db:type> <db:emphasis>style</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="cursorPosition-prop">
<db:title>cursorPosition : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>cursorPosition</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">cursorPosition</db:synopsisinfo>
<db:synopsisinfo role="setter">setCursorPosition</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current cursor position for this line edit.</db:para>
<db:para>Setting the cursor position causes a repaint when appropriate.</db:para>
<db:para>By default, this property contains a value of 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">cursorPosition</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCursorPosition</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="displayText-prop">
<db:title>[read-only] displayText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>displayText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">displayText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the displayed text.</db:para>
<db:para>If <db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link> is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link> this returns the same as <db:link xlink:href="qlineedit.xml#text-prop">text</db:link>(); if <db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link> is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Password</db:link> or <db:link xlink:href="qlineedit.xml#EchoMode-enum">PasswordEchoOnEdit</db:link> it returns a string of platform-dependent password mask characters <db:link xlink:href="qlineedit.xml#text-prop">text</db:link>().length() in size, e.g. &quot;******&quot;; if <db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link> is <db:link xlink:href="qlineedit.xml#EchoMode-enum">NoEcho</db:link> returns an empty string, &quot;&quot;.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">displayText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#echoMode-prop">setEchoMode</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#text-prop">text</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnabled-prop">
<db:title>dragEnabled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>dragEnabled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">dragEnabled</db:synopsisinfo>
<db:synopsisinfo role="setter">setDragEnabled</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the lineedit starts a drag if the user presses and moves the mouse on some selected text.</db:para>
<db:para>Dragging is disabled by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">dragEnabled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDragEnabled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>b</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="echoMode-prop">
<db:title>echoMode : EchoMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>EchoMode</db:type>
<db:varname>echoMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">echoMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setEchoMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the line edit's echo mode.</db:para>
<db:para>The echo mode determines how the text entered in the line edit is displayed (or echoed) to the user.</db:para>
<db:para>The most common setting is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>, in which the text entered by the user is displayed verbatim, but <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> also supports modes that allow the entered text to be suppressed or obscured: these include <db:link xlink:href="qlineedit.xml#EchoMode-enum">NoEcho</db:link>, <db:link xlink:href="qlineedit.xml#EchoMode-enum">Password</db:link> and <db:link xlink:href="qlineedit.xml#EchoMode-enum">PasswordEchoOnEdit</db:link>.</db:para>
<db:para>The widget's display and the ability to copy or drag the text is affected by this setting.</db:para>
<db:para>By default, this property is set to <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlineedit.xml#EchoMode-enum">QLineEdit::EchoMode</db:link></db:type> <db:emphasis role="bold">echoMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setEchoMode</db:emphasis>(<db:emphasis>QLineEdit::EchoMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#EchoMode-enum">EchoMode</db:link></db:member>
<db:member><db:link xlink:href="qlineedit.xml#displayText-prop">displayText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frame-prop">
<db:title>frame : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>frame</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasFrame</db:synopsisinfo>
<db:synopsisinfo role="setter">setFrame</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the line edit draws itself with a frame.</db:para>
<db:para>If enabled (the default) the line edit draws itself inside a frame, otherwise the line edit draws itself without any frame.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasFrame</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFrame</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasSelectedText-prop">
<db:title>[read-only] hasSelectedText : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasSelectedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasSelectedText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether there is any text selected.</db:para>
<db:para>hasSelectedText() returns <db:code>true</db:code> if some or all of the text has been selected by the user; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, this property is <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasSelectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMask-prop">
<db:title>inputMask : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>inputMask</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">inputMask</db:synopsisinfo>
<db:synopsisinfo role="setter">setInputMask</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the validation input mask.</db:para>
<db:para>If no mask is set, inputMask() returns an empty string.</db:para>
<db:para>Sets the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>'s validation mask. Validators can be used instead of, or in conjunction with masks; see <db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>().</db:para>
<db:para>Unset the mask and return to normal <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> operation by passing an empty string (&quot;&quot;).</db:para>
<db:para>The input mask is an input template string. It can contain the following elements:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>Mask Characters</db:para>
</db:td>
<db:td>
<db:para>Defines the <db:link xlink:href="qchar.xml#Category-enum">Category</db:link> of input characters that are considered valid in this position</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Meta Characters</db:para>
</db:td>
<db:td>
<db:para>Various special meanings</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Separators</db:para>
</db:td>
<db:td>
<db:para>All other characters are regarded as immutable separators</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following table shows the mask and meta characters that can be used in an input mask.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Mask Character</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>A</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Letter category required, such as A-Z, a-z.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>a</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Letter category permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>N</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Letter or Number category required, such as A-Z, a-z, 0-9.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>n</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Letter or Number category permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>X</db:code></db:para>
</db:td>
<db:td>
<db:para>Any non-blank character required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>x</db:code></db:para>
</db:td>
<db:td>
<db:para>Any non-blank character permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>9</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Number category required, e.g 0-9.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>0</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Number category permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>D</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Number category and larger than zero required, such as 1-9</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>d</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Number category and larger than zero permitted but not required, such as 1-9.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>#</db:code></db:para>
</db:td>
<db:td>
<db:para>character of the Number category, or plus/minus sign permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>H</db:code></db:para>
</db:td>
<db:td>
<db:para>Hexadecimal character required. A-F, a-f, 0-9.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>h</db:code></db:para>
</db:td>
<db:td>
<db:para>Hexadecimal character permitted but not required.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>B</db:code></db:para>
</db:td>
<db:td>
<db:para>Binary character required. 0-1.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>b</db:code></db:para>
</db:td>
<db:td>
<db:para>Binary character permitted but not required.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th>
<db:para>Meta Character</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>All following alphabetic characters are uppercased.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>&lt;</db:code></db:para>
</db:td>
<db:td>
<db:para>All following alphabetic characters are lowercased.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>!</db:code></db:para>
</db:td>
<db:td>
<db:para>Switch off case conversion.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>;c</db:code></db:para>
</db:td>
<db:td>
<db:para>Terminates the input mask and sets the <db:emphasis>blank</db:emphasis> character to <db:emphasis>c</db:emphasis>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>[ ] { }</db:code></db:para>
</db:td>
<db:td>
<db:para>Reserved.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>\</db:code></db:para>
</db:td>
<db:td>
<db:para>Use <db:code>\</db:code> to escape the special characters listed above to use them as separators.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When created or cleared, the line edit will be filled with a copy of the input mask string where the meta characters have been removed, and the mask characters have been replaced with the <db:emphasis>blank</db:emphasis> character (by default, a space).</db:para>
<db:para>When an input mask is set, the <db:link xlink:href="qlineedit.xml#text-prop">text</db:link>() method returns a modified copy of the line edit content where all the <db:emphasis>blank</db:emphasis> characters have been removed. The unmodified content can be read using <db:link xlink:href="qlineedit.xml#displayText-prop">displayText</db:link>().</db:para>
<db:para>The <db:link xlink:href="qlineedit.xml#acceptableInput-prop">hasAcceptableInput</db:link>() method returns false if the current content of the line edit does not fulfil the requirements of the input mask.</db:para>
<db:para>Examples:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Mask</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>000.000.000.000;_</db:para>
</db:td>
<db:td>
<db:para>IP address; blanks are _.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HH:HH:HH:HH:HH:HH;_</db:para>
</db:td>
<db:td>
<db:para>MAC address</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0000-00-00</db:para>
</db:td>
<db:td>
<db:para>ISO Date; blanks are space</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#</db:para>
</db:td>
<db:td>
<db:para>License number; blanks are # and all (alphabetic) characters are converted to uppercase.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>To get range control (e.g., for an IP address) use masks together with <db:link xlink:href="qlineedit.xml#setValidator">validators</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">inputMask</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInputMask</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>inputMask</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#maxLength-prop">maxLength</db:link></db:member>
<db:member><db:link xlink:href="qchar.xml#isLetter">QChar::isLetter</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#isNumber">QChar::isNumber</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#digitValue">QChar::digitValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maxLength-prop">
<db:title>maxLength : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>maxLength</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">maxLength</db:synopsisinfo>
<db:synopsisinfo role="setter">setMaxLength</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the maximum permitted length of the text.</db:para>
<db:para>If the text is too long, it is truncated at the limit.</db:para>
<db:para>If truncation occurs any selected text will be unselected, the cursor position is set to 0 and the first part of the string is shown.</db:para>
<db:para>If the line edit has an input mask, the mask defines the maximum string length.</db:para>
<db:para>By default, this property contains a value of 32767.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxLength</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaxLength</db:emphasis>(<db:emphasis>int</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modified-prop">
<db:title>modified : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>modified</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isModified</db:synopsisinfo>
<db:synopsisinfo role="setter">setModified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the line edit's contents has been modified by the user.</db:para>
<db:para>The modified flag is never read by <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>; it has a default value of false and is changed to true whenever the user changes the line edit's contents.</db:para>
<db:para>This is useful for things that need to provide a default value but do not start out knowing what the default should be (perhaps it depends on other fields on the form). Start the line edit without the best default, and when the default is known, if modified() returns false (the user hasn't entered any text), insert the default value.</db:para>
<db:para>Calling <db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>() resets the modified flag to false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isModified</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setModified</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="placeholderText-prop">
<db:title>placeholderText : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>placeholderText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">placeholderText</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaceholderText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the line edit's placeholder text.</db:para>
<db:para>Setting this property makes the line edit display a grayed-out placeholder text as long as the line edit is empty.</db:para>
<db:para>Normally, an empty line edit shows the placeholder text even when it has focus. However, if the content is horizontally centered, the placeholder text is not displayed under the cursor when the line edit has focus.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">placeholderText</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaceholderText</db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#text-prop">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="readOnly-prop">
<db:title>readOnly : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>readOnly</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isReadOnly</db:synopsisinfo>
<db:synopsisinfo role="setter">setReadOnly</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the line edit is read only.</db:para>
<db:para>In read-only mode, the user can still copy the text to the clipboard, or drag and drop the text (if <db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link>() is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>), but cannot edit it.</db:para>
<db:para><db:link xlink:href="qlineedit.xml">QLineEdit</db:link> does not show a cursor in read-only mode.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isReadOnly</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setReadOnly</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#enabled-prop">setEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redoAvailable-prop">
<db:title>[read-only] redoAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>redoAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isRedoAvailable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether redo is available.</db:para>
<db:para>Redo becomes available once the user has performed one or more undo operations on text in the line edit.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isRedoAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="selectedText-prop">
<db:title>[read-only] selectedText : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>selectedText</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">selectedText</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the selected text.</db:para>
<db:para>If there is no selected text this property's value is an empty string.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">selectedText</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#hasSelectedText-prop">hasSelectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>text</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">text</db:synopsisinfo>
<db:synopsisinfo role="setter">setText</db:synopsisinfo>
<db:synopsisinfo role="notifier">textChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the line edit's text.</db:para>
<db:para>Setting this property clears the selection, clears the undo/redo history, moves the cursor to the end of the line and resets the <db:link xlink:href="qlineedit.xml#modified-prop">modified</db:link> property to false. The text is not validated when inserted with setText().</db:para>
<db:para>The text is truncated to <db:link xlink:href="qlineedit.xml#maxLength-prop">maxLength</db:link>() length.</db:para>
<db:para>By default, this property contains an empty string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setText</db:emphasis>(<db:emphasis>const QString &amp;</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>text</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="undoAvailable-prop">
<db:title>[read-only] undoAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>undoAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isUndoAvailable</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether undo is available.</db:para>
<db:para>Undo becomes available once the user has modified the text in the line edit.</db:para>
<db:para>By default, this property is false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isUndoAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLineEdit">
<db:title>[explicit] QLineEdit::QLineEdit(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLineEdit</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineEdit(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a line edit with no text.</db:para>
<db:para>The maximum text length is set to 32767 characters.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#maxLength-prop">setMaxLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QLineEdit-1">
<db:title>[explicit] QLineEdit::QLineEdit(const QString &amp;<db:emphasis>contents</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QLineEdit</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>contents</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineEdit(const QString &amp;contents, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a line edit containing the text <db:code role="parameter">contents</db:code>.</db:para>
<db:para>The cursor position is set to the end of the line and the maximum text length to 32767 characters.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> and argument is sent to the <db:link xlink:href="qwidget.xml">QWidget</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#text-prop">text</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#maxLength-prop">setMaxLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QLineEdit">
<db:title>[virtual] QLineEdit::~QLineEdit()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QLineEdit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLineEdit()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the line edit.</db:para>
</db:section>
<db:section xml:id="addAction">
<db:title>[since 5.2] void QLineEdit::addAction(QAction *<db:emphasis>action</db:emphasis>, QLineEdit::ActionPosition <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addAction</db:methodname>
<db:methodparam>
<db:type>QAction *</db:type>
<db:parameter>action</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLineEdit::ActionPosition</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addAction(QAction *action, QLineEdit::ActionPosition position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the <db:code role="parameter">action</db:code> to the list of actions at the <db:code role="parameter">position</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="addAction-1">
<db:title>[since 5.2] QAction *QLineEdit::addAction(const QIcon &amp;<db:emphasis>icon</db:emphasis>, QLineEdit::ActionPosition <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QAction *</db:type>
<db:methodname>addAction</db:methodname>
<db:methodparam>
<db:type>const QIcon &amp;</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLineEdit::ActionPosition</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QAction * addAction(const QIcon &amp;icon, QLineEdit::ActionPosition position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a new action with the given <db:code role="parameter">icon</db:code> at the <db:code role="parameter">position</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="backspace">
<db:title>void QLineEdit::backspace()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>backspace</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void backspace()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If no text is selected, deletes the character to the left of the text cursor and moves the cursor one position to the left. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#del">del</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QLineEdit::changeEvent(QEvent *<db:emphasis>ev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>changeEvent</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>ev</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void changeEvent(QEvent *ev) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QLineEdit::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="completer">
<db:title>QCompleter *QLineEdit::completer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCompleter *</db:type>
<db:methodname>completer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCompleter * completer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current <db:link xlink:href="qcompleter.xml">QCompleter</db:link> that provides completions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setCompleter">setCompleter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QLineEdit::contextMenuEvent(QContextMenuEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>contextMenuEvent</db:methodname>
<db:methodparam>
<db:type>QContextMenuEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void contextMenuEvent(QContextMenuEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
<db:para>Shows the standard context menu created with <db:link xlink:href="qlineedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>().</db:para>
<db:para>If you do not want the line edit to have a context menu, you can set its <db:link xlink:href="qwidget.xml#contextMenuPolicy-prop">contextMenuPolicy</db:link> to <db:link xlink:href="qt.xml#ContextMenuPolicy-enum">Qt::NoContextMenu</db:link>. If you want to customize the context menu, reimplement this function. If you want to extend the standard context menu, reimplement this function, call <db:link xlink:href="qlineedit.xml#createStandardContextMenu">createStandardContextMenu</db:link>() and extend the menu returned.</db:para>
<db:programlisting language="cpp">void LineEdit::contextMenuEvent(QContextMenuEvent *event)
{
    QMenu *menu = createStandardContextMenu();
    menu-&amp;gt;addAction(tr(&quot;My Menu Item&quot;));
    //...
    menu-&amp;gt;exec(event-&amp;gt;globalPos());
    delete menu;
}
</db:programlisting>
<db:para>The <db:code role="parameter">event</db:code> parameter is used to obtain the position where the mouse cursor was when the event was generated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#contextMenuPolicy-prop">setContextMenuPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copy">
<db:title>void QLineEdit::copy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>copy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void copy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the selected text to the clipboard, if there is any, and if <db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link>() is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cut">cut</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#paste">paste</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStandardContextMenu">
<db:title>QMenu *QLineEdit::createStandardContextMenu()</db:title>
<db:methodsynopsis>
<db:type>QMenu *</db:type>
<db:methodname>createStandardContextMenu</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMenu * createStandardContextMenu()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function creates the standard context menu which is shown when the user clicks on the line edit with the right mouse button. It is called from the default <db:link xlink:href="qlineedit.xml#contextMenuEvent">contextMenuEvent</db:link>() handler. The popup menu's ownership is transferred to the caller.</db:para>
</db:section>
<db:section xml:id="cursorBackward">
<db:title>void QLineEdit::cursorBackward(bool <db:emphasis>mark</db:emphasis>, int <db:emphasis>steps</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorBackward</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>steps</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorBackward(bool mark, int steps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor back <db:code role="parameter">steps</db:code> characters. If <db:code role="parameter">mark</db:code> is true each character moved over is added to the selection; if <db:code role="parameter">mark</db:code> is false the selection is cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorForward">cursorForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorForward">
<db:title>void QLineEdit::cursorForward(bool <db:emphasis>mark</db:emphasis>, int <db:emphasis>steps</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorForward</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>steps</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorForward(bool mark, int steps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor forward <db:code role="parameter">steps</db:code> characters. If <db:code role="parameter">mark</db:code> is true each character moved over is added to the selection; if <db:code role="parameter">mark</db:code> is false the selection is cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorBackward">cursorBackward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorPositionAt">
<db:title>int QLineEdit::cursorPositionAt(const QPoint &amp;<db:emphasis>pos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>cursorPositionAt</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int cursorPositionAt(const QPoint &amp;pos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor position under the point <db:code role="parameter">pos</db:code>.</db:para>
</db:section>
<db:section xml:id="cursorPositionChanged">
<db:title>void QLineEdit::cursorPositionChanged(int <db:emphasis>oldPos</db:emphasis>, int <db:emphasis>newPos</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorPositionChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>oldPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newPos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorPositionChanged(int oldPos, int newPos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the cursor moves. The previous position is given by <db:code role="parameter">oldPos</db:code>, and the new position by <db:code role="parameter">newPos</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorPosition-prop">setCursorPosition</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#cursorPosition-prop">cursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorRect">
<db:title>[protected] QRect QLineEdit::cursorRect() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>cursorRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect cursorRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a rectangle that includes the lineedit cursor.</db:para>
</db:section>
<db:section xml:id="cursorWordBackward">
<db:title>void QLineEdit::cursorWordBackward(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorWordBackward</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorWordBackward(bool mark)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor one word backward. If <db:code role="parameter">mark</db:code> is true, the word is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorWordForward">cursorWordForward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorWordForward">
<db:title>void QLineEdit::cursorWordForward(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorWordForward</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorWordForward(bool mark)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the cursor one word forward. If <db:code role="parameter">mark</db:code> is true, the word is also selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#cursorWordBackward">cursorWordBackward</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cut">
<db:title>void QLineEdit::cut()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cut</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cut()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the selected text to the clipboard and deletes it, if there is any, and if <db:link xlink:href="qlineedit.xml#echoMode-prop">echoMode</db:link>() is <db:link xlink:href="qlineedit.xml#EchoMode-enum">Normal</db:link>.</db:para>
<db:para>If the current validator disallows deleting the selected text, cut() will copy without deleting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#paste">paste</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="del">
<db:title>void QLineEdit::del()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>del</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void del()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If no text is selected, deletes the character to the right of the text cursor. If any text is selected, the cursor is moved to the beginning of the selected text and the selected text is deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#backspace">backspace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deselect">
<db:title>void QLineEdit::deselect()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deselect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deselect()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deselects any selected text.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QLineEdit::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QLineEdit::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QLineEdit::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QLineEdit::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="editingFinished">
<db:title>void QLineEdit::editingFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>editingFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void editingFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the Return or Enter key is pressed, or if the line edit loses focus and its contents have changed since the last time this signal was emitted.</db:para>
<db:para>Note that if there is a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link>() set on the line edit and enter/return is pressed, the editingFinished() signal will only be emitted if the input follows the <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link>() and the <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>void QLineEdit::end(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>end</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void end(bool mark)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the text cursor to the end of the line unless it is already there. If <db:code role="parameter">mark</db:code> is true, text is selected towards the last position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#home">home</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual] bool QLineEdit::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QLineEdit::focusInEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QLineEdit::focusOutEvent(QFocusEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="home">
<db:title>void QLineEdit::home(bool <db:emphasis>mark</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>home</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>mark</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void home(bool mark)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves the text cursor to the beginning of the line unless it is already there. If <db:code role="parameter">mark</db:code> is true, text is selected towards the first position; otherwise, any selected text is unselected if the cursor is moved.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QLineEdit::initStyleOption(QStyleOptionFrame *<db:emphasis>option</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>initStyleOption</db:methodname>
<db:methodparam>
<db:type>QStyleOptionFrame *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initStyleOption(QStyleOptionFrame *option) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionframe.xml">QStyleOptionFrame</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodEvent">
<db:title>[override virtual protected] void QLineEdit::inputMethodEvent(QInputMethodEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>inputMethodEvent</db:methodname>
<db:methodparam>
<db:type>QInputMethodEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputMethodEvent(QInputMethodEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodEvent" role="function">QWidget::inputMethodEvent(QInputMethodEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="inputMethodQuery">
<db:title>[override virtual] QVariant QLineEdit::inputMethodQuery(Qt::InputMethodQuery <db:emphasis>property</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>inputMethodQuery</db:methodname>
<db:methodparam>
<db:type>Qt::InputMethodQuery</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant inputMethodQuery(Qt::InputMethodQuery property) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#inputMethodQuery" role="function">QWidget::inputMethodQuery(Qt::InputMethodQuery query) const</db:link>.</db:para>
</db:section>
<db:section xml:id="inputRejected">
<db:title>[since 5.12] void QLineEdit::inputRejected()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>inputRejected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void inputRejected()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the user presses a key that is not considered to be acceptable input. For example, if a key press results in a validator's validate() call to return Invalid. Another case is when trying to enter in more characters beyond the maximum length of the line edit.</db:para>
<db:para>Note: This signal will still be emitted in a case where part of the text is accepted but not all of it is. For example, if there is a maximum length set and the clipboard text is longer than the maximum length when it is pasted.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="insert">
<db:title>void QLineEdit::insert(const QString &amp;<db:emphasis>newText</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newText</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QString &amp;newText)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes any selected text, inserts <db:code role="parameter">newText</db:code>, and validates the result. If it is valid, it sets it as the new contents of the line edit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QLineEdit::keyPressEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
<db:para>Converts the given key press <db:code role="parameter">event</db:code> into a line edit action.</db:para>
<db:para>If Return or Enter is pressed and the current text is valid (or can be <db:link xlink:href="qvalidator.xml#fixup">made valid</db:link> by the validator), the signal <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>() is emitted.</db:para>
<db:para>The default key bindings are listed in the class's detailed description.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QLineEdit::keyReleaseEvent(<db:emphasis>QKeyEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QLineEdit::minimumSizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
<db:para>Returns a minimum size for the line edit.</db:para>
<db:para>The width returned is usually enough for at least one character.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QLineEdit::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QLineEdit::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QLineEdit::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QLineEdit::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QLineEdit::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paste">
<db:title>void QLineEdit::paste()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>paste</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paste()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the clipboard's text at the cursor position, deleting any selected text, providing the line edit is not <db:link xlink:href="qlineedit.xml#readOnly-prop">read-only</db:link>.</db:para>
<db:para>If the end result would be invalid to the current <db:link xlink:href="qlineedit.xml#setValidator">validator</db:link>, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#copy">copy</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#cut">cut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="redo">
<db:title>void QLineEdit::redo()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>redo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void redo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redoes the last operation if redo is <db:link xlink:href="qlineedit.xml#redoAvailable-prop">available</db:link>.</db:para>
</db:section>
<db:section xml:id="returnPressed">
<db:title>void QLineEdit::returnPressed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>returnPressed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void returnPressed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the Return or Enter key is pressed. Note that if there is a <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() or <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link>() set on the line edit, the returnPressed() signal will only be emitted if the input follows the <db:link xlink:href="qlineedit.xml#inputMask-prop">inputMask</db:link>() and the <db:link xlink:href="qlineedit.xml#validator">validator</db:link>() returns <db:link xlink:href="qvalidator.xml#State-enum">QValidator::Acceptable</db:link>.</db:para>
</db:section>
<db:section xml:id="selectAll">
<db:title>void QLineEdit::selectAll()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectAll()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects all the text (i.e. highlights it) and moves the cursor to the end. This is useful when a default value has been inserted because if the user types before clicking on the widget, the selected text will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setSelection">setSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#deselect">deselect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QLineEdit::selectionChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>selectionChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void selectionChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the selection changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#hasSelectedText-prop">hasSelectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionEnd">
<db:title>[since 5.10] int QLineEdit::selectionEnd() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionEnd</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionEnd() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the character directly after the selection in the line edit or -1 if no text is selected.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionStart">selectionStart</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionLength">selectionLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionLength">
<db:title>[since 5.10] int QLineEdit::selectionLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the selection.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionStart">selectionStart</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionEnd">selectionEnd</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionStart">
<db:title>int QLineEdit::selectionStart() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>selectionStart</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int selectionStart() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the first selected character in the line edit or -1 if no text is selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionEnd">selectionEnd</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectionLength">selectionLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCompleter">
<db:title>void QLineEdit::setCompleter(QCompleter *<db:emphasis>c</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompleter</db:methodname>
<db:methodparam>
<db:type>QCompleter *</db:type>
<db:parameter>c</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompleter(QCompleter *c)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this line edit to provide auto completions from the completer, <db:code role="parameter">c</db:code>. The completion mode is set using <db:link xlink:href="qcompleter.xml#completionMode-prop">QCompleter::setCompletionMode</db:link>().</db:para>
<db:para>To use a <db:link xlink:href="qcompleter.xml">QCompleter</db:link> with a <db:link xlink:href="qvalidator.xml">QValidator</db:link> or <db:link xlink:href="qlineedit.xml#inputMask-prop">QLineEdit::inputMask</db:link>, you need to ensure that the model provided to <db:link xlink:href="qcompleter.xml">QCompleter</db:link> contains valid entries. You can use the <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> to ensure that the <db:link xlink:href="qcompleter.xml">QCompleter</db:link>'s model contains only valid entries.</db:para>
<db:para>If <db:code role="parameter">c</db:code> == 0, setCompleter() removes the current completer, effectively disabling auto completion.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#completer">completer</db:link>()</db:member>
<db:member><db:link xlink:href="qcompleter.xml">QCompleter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>void QLineEdit::setSelection(int <db:emphasis>start</db:emphasis>, int <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSelection</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>start</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSelection(int start, int length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Selects text from position <db:code role="parameter">start</db:code> and for <db:code role="parameter">length</db:code> characters. Negative lengths are allowed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#deselect">deselect</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectAll">selectAll</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#selectedText-prop">selectedText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextMargins">
<db:title>void QLineEdit::setTextMargins(int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextMargins</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextMargins(int left, int top, int right, int bottom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the margins around the text inside the frame to have the sizes <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code>.</db:para>
<db:para>See also <db:link xlink:href="qlineedit.xml#textMargins">textMargins</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#textMargins">textMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTextMargins-1">
<db:title>void QLineEdit::setTextMargins(const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTextMargins</db:methodname>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTextMargins(const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">margins</db:code> around the text inside the frame.</db:para>
<db:para>See also <db:link xlink:href="qlineedit.xml#textMargins">textMargins</db:link>().</db:para>
</db:section>
<db:section xml:id="setValidator">
<db:title>void QLineEdit::setValidator(const QValidator *<db:emphasis>v</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setValidator</db:methodname>
<db:methodparam>
<db:type>const QValidator *</db:type>
<db:parameter>v</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setValidator(const QValidator *v)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the validator for values of line edit to <db:code role="parameter">v</db:code>.</db:para>
<db:para>The line edit's <db:link xlink:href="qlineedit.xml#returnPressed">returnPressed</db:link>() and <db:link xlink:href="qlineedit.xml#editingFinished">editingFinished</db:link>() signals will only be emitted if <db:code role="parameter">v</db:code> validates the line edit's content as <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>. The user may change the content to any <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> value during editing, but will be prevented from editing the text to a value that <db:code role="parameter">v</db:code> validates as <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
<db:para>This allows you to constrain the text that shall finally be entered when editing is done, while leaving users with enough freedom to edit the text from one valid state to another.</db:para>
<db:para>If <db:code role="parameter">v</db:code> == 0, setValidator() removes the current input validator. The initial setting is to have no input validator (i.e. any input is accepted up to <db:link xlink:href="qlineedit.xml#maxLength-prop">maxLength</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#validator">validator</db:link>()</db:member>
<db:member><db:link xlink:href="qlineedit.xml#acceptableInput-prop">hasAcceptableInput</db:link>()</db:member>
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QLineEdit::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
<db:para>Returns a recommended size for the widget.</db:para>
<db:para>The width returned, in pixels, is usually enough for about 15 to 20 characters.</db:para>
</db:section>
<db:section xml:id="textChanged">
<db:title>void QLineEdit::textChanged(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>textChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">text</db:synopsisinfo>
<db:synopsisinfo role="signature">void textChanged(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the text changes. The <db:code role="parameter">text</db:code> argument is the new text.</db:para>
<db:para>Unlike <db:link xlink:href="qlineedit.xml#textEdited">textEdited</db:link>(), this signal is also emitted when the text is changed programmatically, for example, by calling <db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>().</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qlineedit.xml#text-prop">text</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="textEdited">
<db:title>void QLineEdit::textEdited(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>textEdited</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void textEdited(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever the text is edited. The <db:code role="parameter">text</db:code> argument is the new text.</db:para>
<db:para>Unlike <db:link xlink:href="qlineedit.xml#textChanged">textChanged</db:link>(), this signal is not emitted when the text is changed programmatically, for example, by calling <db:link xlink:href="qlineedit.xml#text-prop">setText</db:link>().</db:para>
</db:section>
<db:section xml:id="textMargins">
<db:title>QMargins QLineEdit::textMargins() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMargins</db:type>
<db:methodname>textMargins</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMargins textMargins() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the widget's text margins.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setTextMargins">setTextMargins</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual] void QLineEdit::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>timerEvent</db:methodname>
<db:methodparam>
<db:type>QTimerEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void timerEvent(QTimerEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="undo">
<db:title>void QLineEdit::undo()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>undo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void undo()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Undoes the last operation if undo is <db:link xlink:href="qlineedit.xml#undoAvailable-prop">available</db:link>. Deselects any current selection, and updates the selection start to the current cursor position.</db:para>
</db:section>
<db:section xml:id="validator">
<db:title>const QValidator *QLineEdit::validator() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QValidator *</db:type>
<db:methodname>validator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QValidator * validator() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current input validator, or nullptr if no validator has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlineedit.xml#setValidator">setValidator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
