<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>MQTT Subscriptions Example</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating a application that communicates with an MQTT broker.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/subscriptions.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>MQTT Subscriptions</db:emphasis> shows how to create an application that communicates with an MQTT broker. A new dialog opens for each subscription, where you can see the messages on the subscribed topics.</db:para>
<db:section xml:id="creating-a-client">
<db:title>Creating a Client</db:title>
<db:para>We use the <db:link xlink:href="qmqttclient.xml">QMqttClient</db:link> class to create an MQTT client and to set the broker host name and port to use for the connection:</db:para>
<db:programlisting language="cpp">    m_client = new QMqttClient(this);
    m_client-&amp;gt;setHostname(ui-&amp;gt;lineEditHost-&amp;gt;text());
    m_client-&amp;gt;setPort(ui-&amp;gt;spinBoxPort-&amp;gt;value());
</db:programlisting>
</db:section>
<db:section xml:id="subscribing-to-topics">
<db:title>Subscribing to Topics</db:title>
<db:para>When users subscribe to topics in the client, a new subscription object is created:</db:para>
<db:programlisting language="cpp">void MainWindow::on_buttonSubscribe_clicked()
{
    auto subscription = m_client-&amp;gt;subscribe(ui-&amp;gt;lineEditTopic-&amp;gt;text(), ui-&amp;gt;spinQoS-&amp;gt;text().toUInt());
    if (!subscription) {
        QMessageBox::critical(this, QLatin1String(&quot;Error&quot;), QLatin1String(&quot;Could not subscribe. Is there a valid connection?&quot;));
        return;
    }
    auto subWindow = new SubscriptionWindow(subscription);
    subWindow-&amp;gt;setWindowTitle(subscription-&amp;gt;topic().filter());
    subWindow-&amp;gt;show();
}
</db:programlisting>
<db:para>We use the QMqttSubscription class to store the topic, state, and QoS level of a subscription:</db:para>
<db:programlisting language="cpp">SubscriptionWindow::SubscriptionWindow(QMqttSubscription *sub, QWidget *parent) :
    QWidget(parent),
    ui(new Ui::SubscriptionWindow),
    m_sub(sub)
{
    ui-&amp;gt;setupUi(this);

    ui-&amp;gt;labelSub-&amp;gt;setText(m_sub-&amp;gt;topic().filter());
    ui-&amp;gt;labelQoS-&amp;gt;setText(QString::number(m_sub-&amp;gt;qos()));
    updateStatus(m_sub-&amp;gt;state());
    connect(m_sub, &amp;amp;QMqttSubscription::messageReceived, this, &amp;amp;SubscriptionWindow::updateMessage);
    connect(m_sub, &amp;amp;QMqttSubscription::stateChanged, this, &amp;amp;SubscriptionWindow::updateStatus);
    connect(m_sub, &amp;amp;QMqttSubscription::qosChanged, [this](quint8 qos) {
        ui-&amp;gt;labelQoS-&amp;gt;setText(QString::number(qos));
    });
    connect(ui-&amp;gt;pushButton, &amp;amp;QAbstractButton::clicked, m_sub, &amp;amp;QMqttSubscription::unsubscribe);
}
</db:programlisting>
<db:para>The QoS level can be set separately for a message and for a subscription. The QoS level set for a subscription determines the minimum QoS level. If a message is sent with a higher QoS level, the broker increases the QoS of that message to the higher level. For example, if client A subscribed to <db:emphasis>topic</db:emphasis> with QoS 1, and client B publishes a message on the topic, with QoS 0, the broker will automatically increase the QoS of the message to 1. If client B publishes a message on the topic with the QoS 2, the broker will send it with QoS 2.</db:para>
<db:section xml:id="receiving-messages">
<db:title>Receiving Messages</db:title>
<db:para>When the client receives a message, the <db:link xlink:href="qmqttmessage.xml">QMqttMessage</db:link> class is used to store the actual message payload:</db:para>
<db:programlisting language="cpp">void SubscriptionWindow::updateMessage(const QMqttMessage &amp;amp;msg)
{
    ui-&amp;gt;listWidget-&amp;gt;addItem(msg.payload());
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/CMakeLists.txt">subscriptions/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/main.cpp">subscriptions/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/mainwindow.cpp">subscriptions/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/mainwindow.h">subscriptions/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/mainwindow.ui">subscriptions/mainwindow.ui</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/subscriptions.pro">subscriptions/subscriptions.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/subscriptionwindow.cpp">subscriptions/subscriptionwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/subscriptionwindow.h">subscriptions/subscriptionwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="subscriptions/subscriptionwindow.ui">subscriptions/subscriptionwindow.ui</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
