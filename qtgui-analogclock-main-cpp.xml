<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Analog Clock Window Example</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Analog Clock Window example shows how to draw the contents of a custom window.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtGui&gt;

#include &quot;rasterwindow.h&quot;

class AnalogClockWindow : public RasterWindow
{
public:
    AnalogClockWindow();

protected:
    void timerEvent(QTimerEvent *);
    void render(QPainter *p);

private:
    int m_timerId;
};

AnalogClockWindow::AnalogClockWindow()
{
    setTitle(&quot;Analog Clock&quot;);
    resize(200, 200);

    m_timerId = startTimer(1000);
}

void AnalogClockWindow::timerEvent(QTimerEvent *event)
{
    if (event-&gt;timerId() == m_timerId)
        renderLater();
}

void AnalogClockWindow::render(QPainter *p)
{
    static const QPoint hourHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -40)
    };
    static const QPoint minuteHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -70)
    };

    QColor hourColor(127, 0, 127);
    QColor minuteColor(0, 127, 127, 191);

    p-&gt;setRenderHint(QPainter::Antialiasing);
    p-&gt;translate(width() / 2, height() / 2);

    int side = qMin(width(), height());
    p-&gt;scale(side / 200.0, side / 200.0);

    p-&gt;setPen(Qt::NoPen);
    p-&gt;setBrush(hourColor);

    QTime time = QTime::currentTime();

    p-&gt;save();
    p-&gt;rotate(30.0 * ((time.hour() + time.minute() / 60.0)));
    p-&gt;drawConvexPolygon(hourHand, 3);
    p-&gt;restore();

    p-&gt;setPen(hourColor);

    for (int i = 0; i &lt; 12; ++i) {
        p-&gt;drawLine(88, 0, 96, 0);
        p-&gt;rotate(30.0);
    }
    p-&gt;setPen(Qt::NoPen);
    p-&gt;setBrush(minuteColor);

    p-&gt;save();
    p-&gt;rotate(6.0 * (time.minute() + time.second() / 60.0));
    p-&gt;drawConvexPolygon(minuteHand, 3);
    p-&gt;restore();

    p-&gt;setPen(minuteColor);

    for (int j = 0; j &lt; 60; ++j) {
        if ((j % 5) != 0)
            p-&gt;drawLine(92, 0, 96, 0);
        p-&gt;rotate(6.0);
    }
}

int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    AnalogClockWindow clock;
    clock.show();

    return app.exec();
}

</db:programlisting>
</db:article>
