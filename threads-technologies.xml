<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Multithreading Technologies in Qt</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Thread Support in Qt"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-synchronizing.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Synchronizing Threads"/></db:extendedlink>
<db:abstract>
<db:para>An overview and comparison of different ways to use threads in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt offers many classes and functions for working with threads. Below are four different approaches that Qt programmers can use to implement multithreaded applications.</db:para>
<db:section xml:id="qthread-low-level-api-with-optional-event-loops">
<db:title>QThread: Low-Level API with Optional Event Loops</db:title>
<db:para><db:link xlink:href="qthread.xml">QThread</db:link> is the foundation of all thread control in Qt. Each <db:link xlink:href="qthread.xml">QThread</db:link> instance represents and controls one thread.</db:para>
<db:para><db:link xlink:href="qthread.xml">QThread</db:link> can either be instantiated directly or subclassed. Instantiating a <db:link xlink:href="qthread.xml">QThread</db:link> provides a parallel event loop, allowing <db:link xlink:href="qobject.xml">QObject</db:link> slots to be invoked in a secondary thread. Subclassing a <db:link xlink:href="qthread.xml">QThread</db:link> allows the application to initialize the new thread before starting its event loop, or to run parallel code without an event loop.</db:para>
<db:para>See the <db:link xlink:href="qthread.xml">QThread class reference</db:link> and the <db:link xlink:href="examples-threadandconcurrent.xml">threading examples</db:link> for demonstrations on how to use <db:link xlink:href="qthread.xml">QThread</db:link>.</db:para>
</db:section>
<db:section xml:id="qthreadpool-and-qrunnable-reusing-threads">
<db:title>QThreadPool and QRunnable: Reusing Threads</db:title>
<db:para>Creating and destroying threads frequently can be expensive. To reduce this overhead, existing threads can be reused for new tasks. <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> is a collection of reuseable QThreads.</db:para>
<db:para>To run code in one of a <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link>'s threads, reimplement <db:link xlink:href="qrunnable.xml#run">QRunnable::run</db:link>() and instantiate the subclassed <db:link xlink:href="qrunnable.xml">QRunnable</db:link>. Use <db:link xlink:href="qthreadpool.xml#start">QThreadPool::start</db:link>() to put the <db:link xlink:href="qrunnable.xml">QRunnable</db:link> in the <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link>'s run queue. When a thread becomes available, the code within <db:link xlink:href="qrunnable.xml#run">QRunnable::run</db:link>() will execute in that thread.</db:para>
<db:para>Each Qt application has a global thread pool, which is accessible through <db:link xlink:href="qthreadpool.xml#globalInstance">QThreadPool::globalInstance</db:link>(). This global thread pool automatically maintains an optimal number of threads based on the number of cores in the CPU. However, a separate <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link> can be created and managed explicitly.</db:para>
</db:section>
<db:section xml:id="qt-concurrent-using-a-high-level-api">
<db:title>Qt Concurrent: Using a High-level API</db:title>
<db:para>The <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> module provides high-level functions that deal with some common parallel computation patterns: map, filter, and reduce. Unlike using <db:link xlink:href="qthread.xml">QThread</db:link> and <db:link xlink:href="qrunnable.xml">QRunnable</db:link>, these functions never require the use of <db:link xlink:href="threads-synchronizing.xml#low-level-synchronization-primitives">low-level threading primitives</db:link> such as mutexes or semaphores. Instead, they return a <db:link xlink:href="qfuture.xml">QFuture</db:link> object which can be used to retrieve the functions' results when they are ready. <db:link xlink:href="qfuture.xml">QFuture</db:link> can also be used to query computation progress and to pause/resume/cancel the computation. For convenience, <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> enables interactions with <db:link xlink:href="qfuture.xml">QFuture</db:link>s via signals and slots.</db:para>
<db:para><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link>'s map, filter and reduce algorithms automatically distribute computation across all available processor cores, so applications written today will continue to scale when deployed later on a system with more cores.</db:para>
<db:para>This module also provides the <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>() function, which can run any function in another thread. However, <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>() only supports a subset of features available to the map, filter and reduce functions. The <db:link xlink:href="qfuture.xml">QFuture</db:link> can be used to retrieve the function's return value and to check if the thread is running. However, a call to <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>() uses one thread only, cannot be paused/resumed/canceled, and cannot be queried for progress.</db:para>
<db:para>See the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> module documentation for details on the individual functions.</db:para>
</db:section>
<db:section xml:id="workerscript-threading-in-qml">
<db:title>WorkerScript: Threading in QML</db:title>
<db:para>The <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> QML type lets JavaScript code run in parallel with the GUI thread.</db:para>
<db:para>Each <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> instance can have one .js script attached to it. When <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">WorkerScript.sendMessage</db:link>() is called, the script will run in a separate thread (and a separate <db:link xlink:href="qqmlcontext.xml">QML context</db:link>). When the script finishes running, it can send a reply back to the GUI thread which will invoke the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#message-signal">WorkerScript.onMessage</db:link>() signal handler.</db:para>
<db:para>Using a <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> is similar to using a worker <db:link xlink:href="qobject.xml">QObject</db:link> that has been moved to another thread. Data is transferred between threads via signals.</db:para>
<db:para>See the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> documentation for details on how to implement the script, and for a list of data types that can be passed between threads.</db:para>
</db:section>
<db:section xml:id="choosing-an-appropriate-approach">
<db:title>Choosing an Appropriate Approach</db:title>
<db:para>As demonstrated above, Qt provides different solutions for developing threaded applications. The right solution for a given application depends on the purpose of the new thread and the thread's lifetime. Below is a comparison of Qt's threading technologies, followed by recommended solutions for some example use cases.</db:para>
<db:section xml:id="comparison-of-solutions">
<db:title>Comparison of Solutions</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Feature</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qthread.xml">QThread</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qrunnable.xml">QRunnable</db:link> and <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link></db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>()</db:para>
</db:th>
<db:th>
<db:para>Qt Concurrent (Map, Filter, Reduce)</db:para>
</db:th>
<db:th>
<db:para><db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Language</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:para>C++</db:para>
</db:td>
<db:td>
<db:para>QML</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Thread priority can be specified</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Thread can run an event loop</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Thread can receive data updates through signals</db:para>
</db:td>
<db:td>
<db:para>Yes (received by a worker <db:link xlink:href="qobject.xml">QObject</db:link>)</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Yes (received by <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link>)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Thread can be controlled using signals</db:para>
</db:td>
<db:td>
<db:para>Yes (received by <db:link xlink:href="qthread.xml">QThread</db:link>)</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Yes (received by <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link>)</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Thread can be monitored through a <db:link xlink:href="qfuture.xml">QFuture</db:link></db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Partially</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Built-in ability to pause/resume/cancel</db:para>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="example-use-cases">
<db:title>Example Use Cases</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Lifetime of thread</db:para>
</db:th>
<db:th>
<db:para>Operation</db:para>
</db:th>
<db:th>
<db:para>Solution</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>One call</db:para>
</db:td>
<db:td>
<db:para>Run a new linear function within another thread, optionally with progress updates during the run.</db:para>
</db:td>
<db:td>
<db:para>Qt provides different solutions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Place the function in a reimplementation of <db:link xlink:href="qthread.xml#run">QThread::run</db:link>() and start the <db:link xlink:href="qthread.xml">QThread</db:link>. Emit signals to update progress. OR</db:para>
</db:listitem>
<db:listitem>
<db:para>Place the function in a reimplementation of <db:link xlink:href="qrunnable.xml#run">QRunnable::run</db:link>() and add the <db:link xlink:href="qrunnable.xml">QRunnable</db:link> to a <db:link xlink:href="qthreadpool.xml">QThreadPool</db:link>. Write to a <db:link xlink:href="threads-synchronizing.xml">thread-safe variable</db:link> to update progress. OR</db:para>
</db:listitem>
<db:listitem>
<db:para>Run the function using <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>(). Write to a <db:link xlink:href="threads-synchronizing.xml">thread-safe variable</db:link> to update progress.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>One call</db:para>
</db:td>
<db:td>
<db:para>Run an existing function within another thread and get its return value.</db:para>
</db:td>
<db:td>
<db:para>Run the function using <db:link xlink:href="qtconcurrent.xml#run">QtConcurrent::run</db:link>(). Have a <db:link xlink:href="qfuturewatcher.xml">QFutureWatcher</db:link> emit the <db:link xlink:href="qfuturewatcher.xml#finished">finished</db:link>() signal when the function has returned, and call <db:link xlink:href="qfuturewatcher.xml#result">QFutureWatcher::result</db:link>() to get the function's return value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>One call</db:para>
</db:td>
<db:td>
<db:para>Perform an operation on all items of a container, using all available cores. For example, producing thumbnails from a list of images.</db:para>
</db:td>
<db:td>
<db:para>Use Qt Concurrent's <db:link xlink:href="qtconcurrent.xml#filter">QtConcurrent::filter</db:link>() function to select container elements, and the <db:link xlink:href="qtconcurrent.xml#map">QtConcurrent::map</db:link>() function to apply an operation to each element. To fold the output into a single result, use <db:link xlink:href="qtconcurrent.xml#filteredReduced">QtConcurrent::filteredReduced</db:link>() and <db:link xlink:href="qtconcurrent.xml#mappedReduced">QtConcurrent::mappedReduced</db:link>() instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>One call/Permanent</db:para>
</db:td>
<db:td>
<db:para>Perform a long computation in a pure QML application, and update the GUI when the results are ready.</db:para>
</db:td>
<db:td>
<db:para>Place the computation code in a .js script and attach it to a <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> instance. Call <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml#sendMessage-method">WorkerScript.sendMessage</db:link>() to start the computation in a new thread. Let the script call sendMessage() too, to pass the result back to the GUI thread. Handle the result in onMessage and update the GUI there.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Permanent</db:para>
</db:td>
<db:td>
<db:para>Have an object living in another thread that can perform different tasks upon request and/or can receive new data to work with.</db:para>
</db:td>
<db:td>
<db:para>Subclass a <db:link xlink:href="qobject.xml">QObject</db:link> to create a worker. Instantiate this worker object and a <db:link xlink:href="qthread.xml">QThread</db:link>. Move the worker to the new thread. Send commands or data to the worker object over queued signal-slot connections.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Permanent</db:para>
</db:td>
<db:td>
<db:para>Repeatedly perform an expensive operation in another thread, where the thread does not need to receive any signals or events.</db:para>
</db:td>
<db:td>
<db:para>Write the infinite loop directly within a reimplementation of <db:link xlink:href="qthread.xml#run">QThread::run</db:link>(). Start the thread without an event loop. Let the thread emit signals to send data back to the GUI thread.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
</db:article>
