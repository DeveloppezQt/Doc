<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Native interface to a WGL context on Windows.</db:para>
<db:para>This struct was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLContext</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWGLContext is part of <db:simplelist><db:member>native-interfaces</db:member><db:member>native-interfaces-qopenglcontext</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Accessed through <db:link xlink:href="qopenglcontext.xml#nativeInterface">QOpenGLContext::nativeInterface</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="fromNative">
<db:title>[static] QOpenGLContext *QWGLContext::fromNative(HGLRC <db:emphasis>context</db:emphasis>, HWND <db:emphasis>window</db:emphasis>, QOpenGLContext *<db:emphasis>shareContext</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QOpenGLContext *</db:type>
<db:methodname>fromNative</db:methodname>
<db:methodparam>
<db:type>HGLRC</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>HWND</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>shareContext</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLContext * fromNative(HGLRC context, HWND window, QOpenGLContext *shareContext)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adopts an WGL <db:code role="parameter">context</db:code> handle.</db:para>
<db:para>The <db:code role="parameter">window</db:code> is needed because the its pixel format will be queried. When the adoption is successful, <db:link xlink:href="qopenglcontext.xml#format">QOpenGLContext::format</db:link>() will return a <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> describing this pixel format.</db:para>
<db:note>
<db:para>The window specified by <db:code role="parameter">window</db:code> must have its pixel format set to a format compatible with the context's. If no SetPixelFormat() call was made on any device context belonging to the window, adopting the context will fail.</db:para>
</db:note>
<db:para>Ownership of the created <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> <db:code role="parameter">shareContext</db:code> is transferred to the caller.</db:para>
</db:section>
<db:section xml:id="nativeContext">
<db:title>[pure virtual] HGLRC QWGLContext::nativeContext() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>HGLRC</db:type>
<db:methodname>nativeContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HGLRC nativeContext() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying context handle.</db:para>
</db:section>
<db:section xml:id="openGLModuleHandle">
<db:title>[static] HMODULE QWGLContext::openGLModuleHandle()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>HMODULE</db:type>
<db:methodname>openGLModuleHandle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HMODULE openGLModuleHandle()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the handle for the OpenGL implementation that is currently in use.</db:para>
<db:note>
<db:para>This function requires that the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> instance is already created.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
