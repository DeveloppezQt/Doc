<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TreeView QML Type</db:title>
<db:productname>QtQuickControls1</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 1 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a tree view with scroll bars, styling and header sections.</db:para>
<db:para>This type was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>ScrollView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TreeView is part of <db:simplelist><db:member><db:link xlink:href="views.xml">Application Navigation and Views</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/treeview.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> implements a tree representation of items from a model.</db:para>
<db:para>Data for each row in the <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> is provided by the model. <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> accepts models derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class.</db:para>
<db:para>You provide title and size of a column header by adding a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link> as demonstrated below.</db:para>
<db:programlisting language="cpp">TreeView {
    TableViewColumn {
        title: &quot;Name&quot;
        role: &quot;fileName&quot;
        width: 300
    }
    TableViewColumn {
        title: &quot;Permissions&quot;
        role: &quot;filePermissions&quot;
        width: 100
    }
    model: fileSystemModel
}
</db:programlisting>
<db:para>The header sections are attached to values in the <db:link xlink:href="qml-qtquick-controls-treeview.xml#model-prop">model</db:link> by defining the model role they attach to. Each property in the model will then be shown in their corresponding column.</db:para>
<db:para>You can customize the look by overriding the <db:link xlink:href="qml-qtquick-controls-treeview.xml#itemDelegate-prop">itemDelegate</db:link>, <db:link xlink:href="qml-qtquick-controls-treeview.xml#rowDelegate-prop">rowDelegate</db:link>, or <db:link xlink:href="qml-qtquick-controls-treeview.xml#headerDelegate-prop">headerDelegate</db:link> properties.</db:para>
<db:para>The view itself does not provide sorting. This has to be done on the model itself. However you can provide sorting on the model, and enable sort indicators on headers.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>int sortIndicatorColumn - The index of the current sort column</db:para>
</db:listitem>
<db:listitem>
<db:para>bool sortIndicatorVisible - Whether the sort indicator should be enabled</db:para>
</db:listitem>
<db:listitem>
<db:para>enum sortIndicatorOrder - Qt.AscendingOrder or Qt.DescendingOrder depending on state</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You can create a custom appearance for a <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> by assigning a <db:link xlink:href="qml-qtquick-controls-styles-treeviewstyle.xml">TreeViewStyle</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alternatingRowColors-prop">
<db:title>alternatingRowColors : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>alternatingRowColors</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property is set to <db:code>true</db:code> if the view alternates the row color. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="backgroundVisible-prop">
<db:title>backgroundVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>backgroundVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the background should be filled or not.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick-controls-treeview.xml#rowDelegate-prop">rowDelegate</db:link> is not affected by this property</db:para>
</db:note>
</db:section>
<db:section xml:id="columnCount-prop">
<db:title>[read-only] columnCount : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>columnCount</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The current number of columns</db:para>
</db:section>
<db:section xml:id="contentFooter-prop">
<db:title>contentFooter : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>contentFooter</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the content footer of the view.</db:para>
</db:section>
<db:section xml:id="contentHeader-prop">
<db:title>contentHeader : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>contentHeader</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This is the content header of the view.</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : QModelIndex</db:title>
<db:fieldsynopsis>
<db:type>QModelIndex</db:type>
<db:varname>currentIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The model index of the current row in the tree view.</db:para>
</db:section>
<db:section xml:id="headerDelegate-prop">
<db:title>headerDelegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>headerDelegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a delegate to draw a header.</db:para>
<db:para>In the header delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.value - the value or text for this item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.column - the index of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the column is being pressed</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.containsMouse - true when the column is under the mouse</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textAlignment - the horizontal text alignment of the column (since QtQuickControls 1.1)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="headerVisible-prop">
<db:title>headerVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>headerVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines if the header is visible. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="itemDelegate-prop">
<db:title>itemDelegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>itemDelegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a delegate to draw a specific cell.</db:para>
<db:para>In the item delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.selected - if the item is currently selected</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.value - the value or text for this item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textColor - the default text color for an item</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.row - the index of the view row</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.column - the index of the view column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.elideMode - the elide mode of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.textAlignment - the horizontal text alignment of the column</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the item is pressed</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasActiveFocus - true when the row has focus</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.index - the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> of the current item in the model</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.depth - the depth of the current item in the model</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.<db:link xlink:href="qml-qtquick-controls-treeview.xml#isExpanded-method">isExpanded</db:link> - true when the item is expanded</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasChildren - true if the model index of the current item has or can have children</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasSibling - true if the model index of the current item has a sibling</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example:</db:para>
<db:programlisting language="cpp">itemDelegate: Item {
    Text {
        anchors.verticalCenter: parent.verticalCenter
        color: styleData.textColor
        elide: styleData.elideMode
        text: styleData.value
    }
}
</db:programlisting>
<db:note>
<db:para>For performance reasons, created delegates can be recycled across multiple table rows. This implies that when you make use of implicit properties such as <db:code>styleData.row</db:code> or <db:code>model</db:code>, these values can change after the delegate has been constructed. This means that you should not assume that content is fixed when <db:code>Component.onCompleted</db:code> is called, but instead rely on bindings to such properties.</db:para>
</db:note>
</db:section>
<db:section xml:id="model-prop">
<db:title>model : QAbstractItemModel</db:title>
<db:fieldsynopsis>
<db:type>QAbstractItemModel</db:type>
<db:varname>model</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model providing data for the tree view.</db:para>
<db:para>The model provides the set of data that is displayed by the view. The <db:link xlink:href="qml-qtquick-controls-treeview.xml">TreeView</db:link> accept models derived from the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> class.</db:para>
</db:section>
<db:section xml:id="rootIndex-prop">
<db:title>[since QtQuick.Controls 1.5] rootIndex : QModelIndex</db:title>
<db:fieldsynopsis>
<db:type>QModelIndex</db:type>
<db:varname>rootIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The model index of the root item in the tree view. The root item is the parent item to the view's top-level items. Only items descending from the root item will be visible in the view.</db:para>
<db:para>Its default value is an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>, which means the whole model data is shown by the tree view (assigning <db:code>undefined</db:code> to this proprety resets it to its default value.)</db:para>
<db:para>This property was introduced in QtQuick.Controls 1.5.</db:para>
</db:section>
<db:section xml:id="rowDelegate-prop">
<db:title>rowDelegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>rowDelegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a delegate to draw a row.</db:para>
<db:para>In the row delegate you have access to the following special properties:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>styleData.alternate - true when the row uses the alternate background color</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.selected - true when the row is currently selected</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.row - the index of the row</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.hasActiveFocus - true when the row has focus (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
<db:listitem>
<db:para>styleData.pressed - true when the row is pressed (since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 1.3)</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>For performance reasons, created delegates can be recycled across multiple table rows. This implies that when you make use of implicit properties such as <db:code>styleData.row</db:code> or <db:code>model</db:code>, these values can change after the delegate has been constructed. This means that you should not assume that content is fixed when <db:code>Component.onCompleted</db:code> is called, but instead rely on bindings to such properties.</db:para>
</db:note>
</db:section>
<db:section xml:id="section-prop">
<db:title>section group</db:title>
<db:bridgehead renderas="sect2" xml:id="section.criteria-prop">section.criteria : enumeration</db:bridgehead>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>section.criteria</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="section.delegate-prop">section.delegate : Component</db:bridgehead>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>section.delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="section.labelPositioning-prop">section.labelPositioning : enumeration</db:bridgehead>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>section.labelPositioning</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="section.property-prop">section.property : string</db:bridgehead>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>section.property</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties determine the section labels.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-listview.xml#section-prop">ListView.section</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selection-prop">
<db:title>selection : ItemSelectionModel</db:title>
<db:fieldsynopsis>
<db:type>ItemSelectionModel</db:type>
<db:varname>selection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>By default the selection model is <db:code>null</db:code> and only single selection is supported.</db:para>
<db:para>To use a different selection mode as described in <db:link xlink:href="qml-qtquick-controls-treeview.xml#selectionMode-prop">selectionMode</db:link>, an <db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml">ItemSelectionModel</db:link> must by set to the selection.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">TreeView {
   model: myModel
   selection: ItemSelectionModel {
        model: myModel
   }
   TableViewColumn {
       role: &quot;name&quot;
       title: &quot;Name
   }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#selectionMode-prop">selectionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionMode-prop">
<db:title>[since QtQuick.Controls 1.1] selectionMode : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>selectionMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This enum indicates how the view responds to user selections:</db:para>
<db:para>The possible modes are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>SelectionMode.NoSelection - Items cannot be selected.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.SingleSelection - When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item. (Default)</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.MultiSelection - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.ExtendedSelection - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</db:para>
</db:listitem>
<db:listitem>
<db:para>SelectionMode.ContiguousSelection - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in QtQuick.Controls 1.1.</db:para>
</db:section>
<db:section xml:id="sortIndicatorColumn-prop">
<db:title>sortIndicatorColumn : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>sortIndicatorColumn</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Index of the current sort column. The default value is <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="sortIndicatorOrder-prop">
<db:title>sortIndicatorOrder : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>sortIndicatorOrder</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This sets the sorting order of the sort indicator The allowed values are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.AscendingOrder - the default</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.DescendingOrder</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sortIndicatorVisible-prop">
<db:title>sortIndicatorVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>sortIndicatorVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property shows or hides the sort indicator The default value is <db:code>false</db:code>.</db:para>
<db:note>
<db:para>The view itself does not sort the data.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="activated-signal">
<db:title>activated(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when the user activates a row in the tree by mouse or keyboard interaction. Mouse activation is triggered by single- or double-clicking, depending on the platform.</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the activated row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted for mouse interaction that is not blocked in the row or item delegate.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onActivated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="clicked-signal">
<db:title>clicked(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when the user clicks a valid row in the tree by single clicking</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the clicked row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="collapsed-signal">
<db:title>collapsed(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when a valid row in the tree is collapsed, hiding its children.</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the collapsed row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onCollapsed</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCollapsed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked-signal">
<db:title>doubleClicked(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when the user double clicks a valid row.</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the double clicked row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="expanded-signal">
<db:title>expanded(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when a valid row in the tree is expanded, displaying its children.</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the expanded row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onExpanded</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onExpanded</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressAndHold-signal">
<db:title>pressAndHold(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Emitted when the user presses and holds a valid row in the tree.</db:para>
<db:para><db:code role="parameter">index</db:code> is the model index of the pressed row in the tree.</db:para>
<db:note>
<db:para>This signal is only emitted if the row or item delegate does not accept mouse events.</db:para>
</db:note>
<db:para>The corresponding handler is <db:code>onPressAndHold</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressAndHold</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addColumn-method">
<db:title>TableViewColumn addColumn(object <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Adds a <db:code role="parameter">column</db:code> and returns the added column.</db:para>
<db:para>The <db:code role="parameter">column</db:code> argument can be an instance of <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>, or a Component. The component has to contain a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>. Otherwise <db:code>null</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="collapse-method">
<db:title>void collapse(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Collapses the model item specified by the index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#collapsed-signal">collapsed</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#isExpanded-method">isExpanded</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expand-method">
<db:title>void expand(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Expands the model item specified by the index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#expanded-signal">expanded</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#isExpanded-method">isExpanded</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getColumn-method">
<db:title>TableViewColumn getColumn(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the column at the given <db:code role="parameter">index</db:code> or <db:code>null</db:code> if the <db:code role="parameter">index</db:code> is invalid.</db:para>
</db:section>
<db:section xml:id="indexAt-method">
<db:title>QModelIndex indexAt(int <db:emphasis>x</db:emphasis>, int <db:emphasis>y</db:emphasis>)</db:title>
<db:para>Returns the model index of the visible row at the point <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in content coordinates. If there is no visible row at the point specified, an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> is returned.</db:para>
<db:note>
<db:para>This method should only be called after the component has completed.</db:para>
</db:note>
</db:section>
<db:section xml:id="insertColumn-method">
<db:title>TableViewColumn insertColumn(int <db:emphasis>index</db:emphasis>, object <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Inserts a <db:code role="parameter">column</db:code> at the given <db:code role="parameter">index</db:code> and returns the inserted column.</db:para>
<db:para>The <db:code role="parameter">column</db:code> argument can be an instance of <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>, or a Component. The component has to contain a <db:link xlink:href="qml-qtquick-controls-tableviewcolumn.xml">TableViewColumn</db:link>. Otherwise <db:code>null</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="isExpanded-method">
<db:title>bool isExpanded(QModelIndex <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns true if the model item index is expanded; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#expanded-signal">expanded</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-treeview.xml#expand-method">expand</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="moveColumn-method">
<db:title>void moveColumn(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves a column <db:code role="parameter">from</db:code> index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="removeColumn-method">
<db:title>void removeColumn(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and destroys a column at the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeColumnsToContents-method">
<db:title>[since QtQuick.Controls 1.2] void resizeColumnsToContents()</db:title>
<db:para>Resizes all columns to ensure that the column contents and the headers will fit.</db:para>
<db:para>This method was introduced in QtQuick.Controls 1.2.</db:para>
</db:section>
</db:section>
</db:article>
