<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandSurface Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> class represents a rectangular area on an output device.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandSurface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class encapsulates a rectangular area of pixels that is displayed on an output device. It corresponds to the interface <db:code>wl_surface</db:code> in the Wayland protocol.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="childAdded">
<db:title>void QWaylandSurface::childAdded(QWaylandSurface *<db:emphasis>child</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>childAdded</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childAdded(QWaylandSurface *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a wl_subsurface, <db:code role="parameter">child</db:code>, has been added to the surface.</db:para>
</db:section>
<db:section xml:id="destroy">
<db:title>int QWaylandSurface::destroy()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="dragStarted">
<db:title>void QWaylandSurface::dragStarted(QWaylandDrag *<db:emphasis>drag</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dragStarted</db:methodname>
<db:methodparam>
<db:type>QWaylandDrag *</db:type>
<db:parameter>drag</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragStarted(QWaylandDrag *drag)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a <db:code role="parameter">drag</db:code> has started from this surface.</db:para>
</db:section>
<db:section xml:id="frameStarted">
<db:title>int QWaylandSurface::frameStarted()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>frameStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int frameStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares all frame callbacks for sending.</db:para>
</db:section>
<db:section xml:id="fromResource">
<db:title>[static] QWaylandSurface *QWaylandSurface::fromResource(::wl_resource *<db:emphasis>resource</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandSurface *</db:type>
<db:methodname>fromResource</db:methodname>
<db:methodparam>
<db:type>::wl_resource *</db:type>
<db:parameter>resource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurface * fromResource(::wl_resource *resource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> corresponding to the Wayland resource <db:code role="parameter">resource</db:code>.</db:para>
</db:section>
<db:section xml:id="isDestroyed">
<db:title>int QWaylandSurface::isDestroyed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>isDestroyed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int isDestroyed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> has been destroyed. Otherwise returns false.</db:para>
</db:section>
<db:section xml:id="primaryView">
<db:title>QWaylandView *QWaylandSurface::primaryView() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandView *</db:type>
<db:methodname>primaryView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandView * primaryView() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s primary view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QWaylandView::advance()</db:link></db:member>
<db:member><db:link xlink:href="qwaylandsurface.xml#setPrimaryView">QWaylandSurface::setPrimaryView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resource">
<db:title>struct wl_resource *QWaylandSurface::resource() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>struct wl_resource *</db:type>
<db:methodname>resource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">struct wl_resource * resource() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Wayland resource corresponding to this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="sendFrameCallbacks">
<db:title>int QWaylandSurface::sendFrameCallbacks()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>sendFrameCallbacks</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int sendFrameCallbacks()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends pending frame callbacks.</db:para>
</db:section>
<db:section xml:id="setPrimaryView">
<db:title>void QWaylandSurface::setPrimaryView(QWaylandView *<db:emphasis>view</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrimaryView</db:methodname>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrimaryView(QWaylandView *view)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s primary view to <db:code role="parameter">view</db:code>, in case there are multiple views of this surface. The primary view is the view that governs the client's refresh rate. It takes care of discarding buffer references when QWaylandView::advance() is called. See the documentation for QWaylandView::advance() for more details.</db:para>
<db:para>In shell surface integrations, such as QWaylandWlShellIntegration and QWaylandXdgShellV5Integration, maximize and fullscreen requests from the client will only have an effect if the integration has the primary view of the surface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandsurface.xml#primaryView">primaryView</db:link>()</db:member>
<db:member><db:link xlink:href="">QWaylandView::advance()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="surfaceDestroyed">
<db:title>void QWaylandSurface::surfaceDestroyed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>surfaceDestroyed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void surfaceDestroyed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the corresponing wl_surface is destroyed.</db:para>
</db:section>
<db:section xml:id="views">
<db:title>int QWaylandSurface::views() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>views</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int views() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the views for this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
