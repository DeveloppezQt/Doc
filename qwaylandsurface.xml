<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandSurface Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> class represents a rectangular area on an output device.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandSurface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class encapsulates a rectangular area of pixels that is displayed on an output device. It corresponds to the interface <db:code>wl_surface</db:code> in the Wayland protocol.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Origin-enum">
<db:title>enum QWaylandSurface::Origin</db:title>
<db:enumsynopsis>
<db:enumname>Origin</db:enumname>
<db:enumitem>
<db:enumidentifier>OriginTopLeft</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OriginBottomLeft</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type is used to specify the origin of a <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s buffer.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link></db:emphasis>::OriginTopLeft</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The origin is the top left corner of the buffer.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link></db:emphasis>::OriginBottomLeft</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The origin is the bottom left corner of the buffer.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bufferScale-prop">
<db:title>[read-only] bufferScale : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>bufferScale</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bufferScale</db:synopsisinfo>
<db:synopsisinfo role="notifier">bufferScaleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s buffer scale. The buffer scale lets a client supply higher resolution buffer data for use on high resolution outputs.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">bufferScale</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">bufferScaleChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="client-prop">
<db:title>[read-only] client : QWaylandClient* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandClient*</db:type>
<db:varname>client</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">client</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the client using this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwaylandclient.xml">QWaylandClient</db:link></db:type> *<db:emphasis role="bold">client</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="contentOrientation-prop">
<db:title>[read-only] contentOrientation : const Qt::ScreenOrientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ScreenOrientation</db:type>
<db:varname>contentOrientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">contentOrientation</db:synopsisinfo>
<db:synopsisinfo role="notifier">contentOrientationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the orientation of the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s contents.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis role="bold">contentOrientation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">contentOrientationChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QWaylandOutput::transform</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cursorSurface-prop">
<db:title>cursorSurface : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>cursorSurface</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCursorSurface</db:synopsisinfo>
<db:synopsisinfo role="setter">markAsCursorSurface</db:synopsisinfo>
<db:synopsisinfo role="notifier">cursorSurfaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> is a cursor surface.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCursorSurface</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">markAsCursorSurface</db:emphasis>(<db:type>bool</db:type> <db:emphasis>cursorSurface</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">cursorSurfaceChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasContent-prop">
<db:title>[read-only] hasContent : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasContent</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasContent</db:synopsisinfo>
<db:synopsisinfo role="notifier">hasContentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> has content.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasContent</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">hasContentChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="origin-prop">
<db:title>[read-only] origin : const QWaylandSurface::Origin</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandSurface::Origin</db:type>
<db:varname>origin</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">origin</db:synopsisinfo>
<db:synopsisinfo role="notifier">originChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the origin of the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s buffer, or <db:link xlink:href="qwaylandsurface.xml#Origin-enum">QWaylandSurface::OriginTopLeft</db:link> if the surface has no buffer.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qwaylandsurface.xml#Origin-enum">QWaylandSurface::Origin</db:link></db:type> <db:emphasis role="bold">origin</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">originChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="size-prop">
<db:title>[read-only] size : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>size</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">size</db:synopsisinfo>
<db:synopsisinfo role="notifier">sizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s size in pixels.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">sizeChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandSurface">
<db:title>QWaylandSurface::QWaylandSurface()</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandSurface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a an uninitialized <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="QWaylandSurface-1">
<db:title>QWaylandSurface::QWaylandSurface(QWaylandCompositor *<db:emphasis>compositor</db:emphasis>, QWaylandClient *<db:emphasis>client</db:emphasis>, uint <db:emphasis>id</db:emphasis>, int <db:emphasis>version</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandSurface</db:methodname>
<db:methodparam>
<db:type>QWaylandCompositor *</db:type>
<db:parameter>compositor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurface(QWaylandCompositor *compositor, QWaylandClient *client, uint id, int version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs and initializes a <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> for the given <db:code role="parameter">compositor</db:code> and <db:code role="parameter">client</db:code>, and with the given <db:code role="parameter">id</db:code> and <db:code role="parameter">version</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWaylandSurface">
<db:title>QWaylandSurface::~QWaylandSurface()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWaylandSurface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWaylandSurface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="childAdded">
<db:title>void QWaylandSurface::childAdded(QWaylandSurface *<db:emphasis>child</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>childAdded</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>child</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void childAdded(QWaylandSurface *child)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a wl_subsurface, <db:code role="parameter">child</db:code>, has been added to the surface.</db:para>
</db:section>
<db:section xml:id="compositor">
<db:title>QWaylandCompositor *QWaylandSurface::compositor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandCompositor *</db:type>
<db:methodname>compositor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandCompositor * compositor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the compositor for this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="destroy">
<db:title>void QWaylandSurface::destroy()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>destroy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void destroy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Destroys the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="dragStarted">
<db:title>void QWaylandSurface::dragStarted(QWaylandDrag *<db:emphasis>drag</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>dragStarted</db:methodname>
<db:methodparam>
<db:type>QWaylandDrag *</db:type>
<db:parameter>drag</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragStarted(QWaylandDrag *drag)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when a <db:code role="parameter">drag</db:code> has started from this surface.</db:para>
</db:section>
<db:section xml:id="frameStarted">
<db:title>void QWaylandSurface::frameStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>frameStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void frameStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Prepares all frame callbacks for sending.</db:para>
</db:section>
<db:section xml:id="fromResource">
<db:title>[static] QWaylandSurface *QWaylandSurface::fromResource(::wl_resource *<db:emphasis>res</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandSurface *</db:type>
<db:methodname>fromResource</db:methodname>
<db:methodparam>
<db:type>::wl_resource *</db:type>
<db:parameter>res</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurface * fromResource(::wl_resource *res)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> corresponding to the Wayland resource <db:code role="parameter">res</db:code>.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>void QWaylandSurface::initialize(QWaylandCompositor *<db:emphasis>compositor</db:emphasis>, QWaylandClient *<db:emphasis>client</db:emphasis>, uint <db:emphasis>id</db:emphasis>, int <db:emphasis>version</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>initialize</db:methodname>
<db:methodparam>
<db:type>QWaylandCompositor *</db:type>
<db:parameter>compositor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>version</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialize(QWaylandCompositor *compositor, QWaylandClient *client, uint id, int version)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> with the given <db:code role="parameter">compositor</db:code> and <db:code role="parameter">client</db:code>, and with the given <db:code role="parameter">id</db:code> and <db:code role="parameter">version</db:code>.</db:para>
</db:section>
<db:section xml:id="inputRegionContains">
<db:title>bool QWaylandSurface::inputRegionContains(const QPoint &amp;<db:emphasis>p</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inputRegionContains</db:methodname>
<db:methodparam>
<db:type>const QPoint &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inputRegionContains(const QPoint &amp;p) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s input region contains the point <db:code role="parameter">p</db:code>. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isDestroyed">
<db:title>bool QWaylandSurface::isDestroyed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDestroyed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDestroyed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> has been destroyed. Otherwise returns false.</db:para>
</db:section>
<db:section xml:id="isInitialized">
<db:title>bool QWaylandSurface::isInitialized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInitialized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInitialized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link> has been initialized.</db:para>
</db:section>
<db:section xml:id="primaryView">
<db:title>QWaylandView *QWaylandSurface::primaryView() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandView *</db:type>
<db:methodname>primaryView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandView * primaryView() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s primary view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QWaylandView::advance()</db:link></db:member>
<db:member><db:link xlink:href="qwaylandsurface.xml#setPrimaryView">QWaylandSurface::setPrimaryView</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resource">
<db:title>struct wl_resource *QWaylandSurface::resource() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>struct wl_resource *</db:type>
<db:methodname>resource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">struct wl_resource * resource() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Wayland resource corresponding to this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="sendFrameCallbacks">
<db:title>void QWaylandSurface::sendFrameCallbacks()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendFrameCallbacks</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendFrameCallbacks()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends pending frame callbacks.</db:para>
</db:section>
<db:section xml:id="setPrimaryView">
<db:title>void QWaylandSurface::setPrimaryView(QWaylandView *<db:emphasis>view</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPrimaryView</db:methodname>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPrimaryView(QWaylandView *view)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>'s primary view to <db:code role="parameter">view</db:code>, in case there are multiple views of this surface. The primary view is the view that governs the client's refresh rate. It takes care of discarding buffer references when QWaylandView::advance() is called. See the documentation for QWaylandView::advance() for more details.</db:para>
<db:para>In shell surface integrations, such as QWaylandWlShellIntegration and QWaylandXdgShellV5Integration, maximize and fullscreen requests from the client will only have an effect if the integration has the primary view of the surface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandsurface.xml#primaryView">primaryView</db:link>()</db:member>
<db:member><db:link xlink:href="">QWaylandView::advance()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRole">
<db:title>bool QWaylandSurface::setRole(QWaylandSurfaceRole *<db:emphasis>role</db:emphasis>, wl_resource *<db:emphasis>errorResource</db:emphasis>, uint32_t <db:emphasis>errorCode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setRole</db:methodname>
<db:methodparam>
<db:type>QWaylandSurfaceRole *</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>wl_resource *</db:type>
<db:parameter>errorResource</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint32_t</db:type>
<db:parameter>errorCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setRole(QWaylandSurfaceRole *role, wl_resource *errorResource, uint32_t errorCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:code role="parameter">role</db:code> on the surface. A role defines how a surface will be mapped on screen, without a role a surface is supposed to be hidden. Only one role at all times can be set on a surface. Although setting the same role many times is allowed, attempting to change the role of a surface will trigger a protocol error to the <db:code role="parameter">errorResource</db:code> and send an <db:code role="parameter">errorCode</db:code> to the client.</db:para>
</db:section>
<db:section xml:id="surfaceDestroyed">
<db:title>void QWaylandSurface::surfaceDestroyed()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>surfaceDestroyed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void surfaceDestroyed()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the corresponing wl_surface is destroyed.</db:para>
</db:section>
<db:section xml:id="updateSelection">
<db:title>void QWaylandSurface::updateSelection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateSelection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateSelection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the surface with the compositor's retained clipboard selection. Although this is done automatically when the surface receives keyboard focus, this function is useful for updating clients which do not have keyboard focus.</db:para>
</db:section>
<db:section xml:id="views">
<db:title>QList&lt;QWaylandView *&gt; QWaylandSurface::views() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QWaylandView *&gt;</db:type>
<db:methodname>views</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QWaylandView *&gt; views() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the views for this <db:link xlink:href="qwaylandsurface.xml">QWaylandSurface</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
