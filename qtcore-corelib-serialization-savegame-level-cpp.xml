<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>JSON Save Game Example</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The JSON Save Game example demonstrates how to save and load a small game using <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link>, <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> and <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;level.h&quot;

#include &amp;lt;QJsonArray&amp;gt;
#include &amp;lt;QTextStream&amp;gt;

Level::Level(const QString &amp;amp;name) : mName(name)
{
}

QString Level::name() const
{
    return mName;
}

QVector&amp;lt;Character&amp;gt; Level::npcs() const
{
    return mNpcs;
}

void Level::setNpcs(const QVector&amp;lt;Character&amp;gt; &amp;amp;npcs)
{
    mNpcs = npcs;
}

void Level::read(const QJsonObject &amp;amp;json)
{
    if (json.contains(&quot;name&quot;) &amp;amp;&amp;amp; json[&quot;name&quot;].isString())
        mName = json[&quot;name&quot;].toString();

    if (json.contains(&quot;npcs&quot;) &amp;amp;&amp;amp; json[&quot;npcs&quot;].isArray()) {
        QJsonArray npcArray = json[&quot;npcs&quot;].toArray();
        mNpcs.clear();
        mNpcs.reserve(npcArray.size());
        for (int npcIndex = 0; npcIndex &amp;lt; npcArray.size(); ++npcIndex) {
            QJsonObject npcObject = npcArray[npcIndex].toObject();
            Character npc;
            npc.read(npcObject);
            mNpcs.append(npc);
        }
    }
}

void Level::write(QJsonObject &amp;amp;json) const
{
    json[&quot;name&quot;] = mName;
    QJsonArray npcArray;
    foreach (const Character npc, mNpcs) {
        QJsonObject npcObject;
        npc.write(npcObject);
        npcArray.append(npcObject);
    }
    json[&quot;npcs&quot;] = npcArray;
}

void Level::print(int indentation) const
{
    const QString indent(indentation * 2, ' ');
    QTextStream(stdout) &amp;lt;&amp;lt; indent &amp;lt;&amp;lt; &quot;Name:\t&quot; &amp;lt;&amp;lt; mName &amp;lt;&amp;lt; &quot;\n&quot;;

    QTextStream(stdout) &amp;lt;&amp;lt; indent &amp;lt;&amp;lt; &quot;NPCs:\n&quot;;
    for (const Character &amp;amp;character : mNpcs)
        character.print(2);
}

</db:programlisting>
</db:article>
