<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Class Wizard Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Class Wizard example shows how to implement linear wizards using <db:link xlink:href="qwizard.xml">QWizard</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;classwizard.h&quot;

ClassWizard::ClassWizard(QWidget *parent)
    : QWizard(parent)
{
    addPage(new IntroPage);
    addPage(new ClassInfoPage);
    addPage(new CodeStylePage);
    addPage(new OutputFilesPage);
    addPage(new ConclusionPage);

    setPixmap(QWizard::BannerPixmap, QPixmap(&quot;:/images/banner.png&quot;));
    setPixmap(QWizard::BackgroundPixmap, QPixmap(&quot;:/images/background.png&quot;));

    setWindowTitle(tr(&quot;Class Wizard&quot;));
}

void ClassWizard::accept()
{
    QByteArray className = field(&quot;className&quot;).toByteArray();
    QByteArray baseClass = field(&quot;baseClass&quot;).toByteArray();
    QByteArray macroName = field(&quot;macroName&quot;).toByteArray();
    QByteArray baseInclude = field(&quot;baseInclude&quot;).toByteArray();

    QString outputDir = field(&quot;outputDir&quot;).toString();
    QString header = field(&quot;header&quot;).toString();
    QString implementation = field(&quot;implementation&quot;).toString();

    QByteArray block;

    if (field(&quot;comment&quot;).toBool()) {
        block += &quot;/*\n&quot;;
        block += &quot;    &quot; + header.toLatin1() + '\n';
        block += &quot;*/\n&quot;;
        block += '\n';
    }
    if (field(&quot;protect&quot;).toBool()) {
        block += &quot;#ifndef &quot; + macroName + '\n';
        block += &quot;#define &quot; + macroName + '\n';
        block += '\n';
    }
    if (field(&quot;includeBase&quot;).toBool()) {
        block += &quot;#include &quot; + baseInclude + '\n';
        block += '\n';
    }

    block += &quot;class &quot; + className;
    if (!baseClass.isEmpty())
        block += &quot; : public &quot; + baseClass;
    block += '\n';
    block += &quot;{\n&quot;;

    /* qmake ignore Q_OBJECT */

    if (field(&quot;qobjectMacro&quot;).toBool()) {
        block += &quot;    Q_OBJECT\n&quot;;
        block += '\n';
    }
    block += &quot;public:\n&quot;;

    if (field(&quot;qobjectCtor&quot;).toBool()) {
        block += &quot;    &quot; + className + &quot;(QObject *parent = 0);\n&quot;;
    } else if (field(&quot;qwidgetCtor&quot;).toBool()) {
        block += &quot;    &quot; + className + &quot;(QWidget *parent = 0);\n&quot;;
    } else if (field(&quot;defaultCtor&quot;).toBool()) {
        block += &quot;    &quot; + className + &quot;();\n&quot;;
        if (field(&quot;copyCtor&quot;).toBool()) {
            block += &quot;    &quot; + className + &quot;(const &quot; + className + &quot; &amp;amp;other);\n&quot;;
            block += '\n';
            block += &quot;    &quot; + className + &quot; &amp;amp;operator=&quot; + &quot;(const &quot; + className
                     + &quot; &amp;amp;other);\n&quot;;
        }
    }
    block += &quot;};\n&quot;;

    if (field(&quot;protect&quot;).toBool()) {
        block += '\n';
        block += &quot;#endif\n&quot;;
    }

    QFile headerFile(outputDir + '/' + header);
    if (!headerFile.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(0, QObject::tr(&quot;Simple Wizard&quot;),
                             QObject::tr(&quot;Cannot write file %1:\n%2&quot;)
                             .arg(headerFile.fileName())
                             .arg(headerFile.errorString()));
        return;
    }
    headerFile.write(block);

    block.clear();

    if (field(&quot;comment&quot;).toBool()) {
        block += &quot;/*\n&quot;;
        block += &quot;    &quot; + implementation.toLatin1() + '\n';
        block += &quot;*/\n&quot;;
        block += '\n';
    }
    block += &quot;#include \&quot;&quot; + header.toLatin1() + &quot;\&quot;\n&quot;;
    block += '\n';

    if (field(&quot;qobjectCtor&quot;).toBool()) {
        block += className + &quot;::&quot; + className + &quot;(QObject *parent)\n&quot;;
        block += &quot;    : &quot; + baseClass + &quot;(parent)\n&quot;;
        block += &quot;{\n&quot;;
        block += &quot;}\n&quot;;
    } else if (field(&quot;qwidgetCtor&quot;).toBool()) {
        block += className + &quot;::&quot; + className + &quot;(QWidget *parent)\n&quot;;
        block += &quot;    : &quot; + baseClass + &quot;(parent)\n&quot;;
        block += &quot;{\n&quot;;
        block += &quot;}\n&quot;;
    } else if (field(&quot;defaultCtor&quot;).toBool()) {
        block += className + &quot;::&quot; + className + &quot;()\n&quot;;
        block += &quot;{\n&quot;;
        block += &quot;    // missing code\n&quot;;
        block += &quot;}\n&quot;;

        if (field(&quot;copyCtor&quot;).toBool()) {
            block += &quot;\n&quot;;
            block += className + &quot;::&quot; + className + &quot;(const &quot; + className
                     + &quot; &amp;amp;other)\n&quot;;
            block += &quot;{\n&quot;;
            block += &quot;    *this = other;\n&quot;;
            block += &quot;}\n&quot;;
            block += '\n';
            block += className + &quot; &amp;amp;&quot; + className + &quot;::operator=(const &quot;
                     + className + &quot; &amp;amp;other)\n&quot;;
            block += &quot;{\n&quot;;
            if (!baseClass.isEmpty())
                block += &quot;    &quot; + baseClass + &quot;::operator=(other);\n&quot;;
            block += &quot;    // missing code\n&quot;;
            block += &quot;    return *this;\n&quot;;
            block += &quot;}\n&quot;;
        }
    }

    QFile implementationFile(outputDir + '/' + implementation);
    if (!implementationFile.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(0, QObject::tr(&quot;Simple Wizard&quot;),
                             QObject::tr(&quot;Cannot write file %1:\n%2&quot;)
                             .arg(implementationFile.fileName())
                             .arg(implementationFile.errorString()));
        return;
    }
    implementationFile.write(block);

    QDialog::accept();
}

IntroPage::IntroPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Introduction&quot;));
    setPixmap(QWizard::WatermarkPixmap, QPixmap(&quot;:/images/watermark1.png&quot;));

    label = new QLabel(tr(&quot;This wizard will generate a skeleton C++ class &quot;
                          &quot;definition, including a few functions. You simply &quot;
                          &quot;need to specify the class name and set a few &quot;
                          &quot;options to produce a header file and an &quot;
                          &quot;implementation file for your new C++ class.&quot;));
    label-&amp;gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(label);
    setLayout(layout);
}

ClassInfoPage::ClassInfoPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Class Information&quot;));
    setSubTitle(tr(&quot;Specify basic information about the class for which you &quot;
                   &quot;want to generate skeleton source code files.&quot;));
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo1.png&quot;));

    classNameLabel = new QLabel(tr(&quot;&amp;amp;Class name:&quot;));
    classNameLineEdit = new QLineEdit;
    classNameLabel-&amp;gt;setBuddy(classNameLineEdit);

    baseClassLabel = new QLabel(tr(&quot;B&amp;amp;ase class:&quot;));
    baseClassLineEdit = new QLineEdit;
    baseClassLabel-&amp;gt;setBuddy(baseClassLineEdit);

    qobjectMacroCheckBox = new QCheckBox(tr(&quot;Generate Q_OBJECT &amp;amp;macro&quot;));

    groupBox = new QGroupBox(tr(&quot;C&amp;amp;onstructor&quot;));

    qobjectCtorRadioButton = new QRadioButton(tr(&quot;&amp;amp;QObject-style constructor&quot;));
    qwidgetCtorRadioButton = new QRadioButton(tr(&quot;Q&amp;amp;Widget-style constructor&quot;));
    defaultCtorRadioButton = new QRadioButton(tr(&quot;&amp;amp;Default constructor&quot;));
    copyCtorCheckBox = new QCheckBox(tr(&quot;&amp;amp;Generate copy constructor and &quot;
                                        &quot;operator=&quot;));

    defaultCtorRadioButton-&amp;gt;setChecked(true);

    connect(defaultCtorRadioButton, &amp;amp;QAbstractButton::toggled,
            copyCtorCheckBox, &amp;amp;QWidget::setEnabled);

    registerField(&quot;className*&quot;, classNameLineEdit);
    registerField(&quot;baseClass&quot;, baseClassLineEdit);
    registerField(&quot;qobjectMacro&quot;, qobjectMacroCheckBox);
    registerField(&quot;qobjectCtor&quot;, qobjectCtorRadioButton);
    registerField(&quot;qwidgetCtor&quot;, qwidgetCtorRadioButton);
    registerField(&quot;defaultCtor&quot;, defaultCtorRadioButton);
    registerField(&quot;copyCtor&quot;, copyCtorCheckBox);

    QVBoxLayout *groupBoxLayout = new QVBoxLayout;
    groupBoxLayout-&amp;gt;addWidget(qobjectCtorRadioButton);
    groupBoxLayout-&amp;gt;addWidget(qwidgetCtorRadioButton);
    groupBoxLayout-&amp;gt;addWidget(defaultCtorRadioButton);
    groupBoxLayout-&amp;gt;addWidget(copyCtorCheckBox);
    groupBox-&amp;gt;setLayout(groupBoxLayout);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(classNameLabel, 0, 0);
    layout-&amp;gt;addWidget(classNameLineEdit, 0, 1);
    layout-&amp;gt;addWidget(baseClassLabel, 1, 0);
    layout-&amp;gt;addWidget(baseClassLineEdit, 1, 1);
    layout-&amp;gt;addWidget(qobjectMacroCheckBox, 2, 0, 1, 2);
    layout-&amp;gt;addWidget(groupBox, 3, 0, 1, 2);
    setLayout(layout);
}

CodeStylePage::CodeStylePage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Code Style Options&quot;));
    setSubTitle(tr(&quot;Choose the formatting of the generated code.&quot;));
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo2.png&quot;));

    commentCheckBox = new QCheckBox(tr(&quot;&amp;amp;Start generated files with a &quot;
                                       &quot;comment&quot;));
    commentCheckBox-&amp;gt;setChecked(true);

    protectCheckBox = new QCheckBox(tr(&quot;&amp;amp;Protect header file against multiple &quot;
                                       &quot;inclusions&quot;));
    protectCheckBox-&amp;gt;setChecked(true);

    macroNameLabel = new QLabel(tr(&quot;&amp;amp;Macro name:&quot;));
    macroNameLineEdit = new QLineEdit;
    macroNameLabel-&amp;gt;setBuddy(macroNameLineEdit);

    includeBaseCheckBox = new QCheckBox(tr(&quot;&amp;amp;Include base class definition&quot;));
    baseIncludeLabel = new QLabel(tr(&quot;Base class include:&quot;));
    baseIncludeLineEdit = new QLineEdit;
    baseIncludeLabel-&amp;gt;setBuddy(baseIncludeLineEdit);

    connect(protectCheckBox, &amp;amp;QAbstractButton::toggled,
            macroNameLabel, &amp;amp;QWidget::setEnabled);
    connect(protectCheckBox, &amp;amp;QAbstractButton::toggled,
            macroNameLineEdit, &amp;amp;QWidget::setEnabled);
    connect(includeBaseCheckBox, &amp;amp;QAbstractButton::toggled,
            baseIncludeLabel, &amp;amp;QWidget::setEnabled);
    connect(includeBaseCheckBox, &amp;amp;QAbstractButton::toggled,
            baseIncludeLineEdit, &amp;amp;QWidget::setEnabled);

    registerField(&quot;comment&quot;, commentCheckBox);
    registerField(&quot;protect&quot;, protectCheckBox);
    registerField(&quot;macroName&quot;, macroNameLineEdit);
    registerField(&quot;includeBase&quot;, includeBaseCheckBox);
    registerField(&quot;baseInclude&quot;, baseIncludeLineEdit);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;setColumnMinimumWidth(0, 20);
    layout-&amp;gt;addWidget(commentCheckBox, 0, 0, 1, 3);
    layout-&amp;gt;addWidget(protectCheckBox, 1, 0, 1, 3);
    layout-&amp;gt;addWidget(macroNameLabel, 2, 1);
    layout-&amp;gt;addWidget(macroNameLineEdit, 2, 2);
    layout-&amp;gt;addWidget(includeBaseCheckBox, 3, 0, 1, 3);
    layout-&amp;gt;addWidget(baseIncludeLabel, 4, 1);
    layout-&amp;gt;addWidget(baseIncludeLineEdit, 4, 2);
    setLayout(layout);
}

void CodeStylePage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    macroNameLineEdit-&amp;gt;setText(className.toUpper() + &quot;_H&quot;);

    QString baseClass = field(&quot;baseClass&quot;).toString();

    includeBaseCheckBox-&amp;gt;setChecked(!baseClass.isEmpty());
    includeBaseCheckBox-&amp;gt;setEnabled(!baseClass.isEmpty());
    baseIncludeLabel-&amp;gt;setEnabled(!baseClass.isEmpty());
    baseIncludeLineEdit-&amp;gt;setEnabled(!baseClass.isEmpty());

    QRegularExpression rx(&quot;Q[A-Z].*&quot;);
    if (baseClass.isEmpty()) {
        baseIncludeLineEdit-&amp;gt;clear();
    } else if (rx.match(baseClass).hasMatch()) {
        baseIncludeLineEdit-&amp;gt;setText('&amp;lt;' + baseClass + '&amp;gt;');
    } else {
        baseIncludeLineEdit-&amp;gt;setText('&quot;' + baseClass.toLower() + &quot;.h\&quot;&quot;);
    }
}

OutputFilesPage::OutputFilesPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Output Files&quot;));
    setSubTitle(tr(&quot;Specify where you want the wizard to put the generated &quot;
                   &quot;skeleton code.&quot;));
    setPixmap(QWizard::LogoPixmap, QPixmap(&quot;:/images/logo3.png&quot;));

    outputDirLabel = new QLabel(tr(&quot;&amp;amp;Output directory:&quot;));
    outputDirLineEdit = new QLineEdit;
    outputDirLabel-&amp;gt;setBuddy(outputDirLineEdit);

    headerLabel = new QLabel(tr(&quot;&amp;amp;Header file name:&quot;));
    headerLineEdit = new QLineEdit;
    headerLabel-&amp;gt;setBuddy(headerLineEdit);

    implementationLabel = new QLabel(tr(&quot;&amp;amp;Implementation file name:&quot;));
    implementationLineEdit = new QLineEdit;
    implementationLabel-&amp;gt;setBuddy(implementationLineEdit);

    registerField(&quot;outputDir*&quot;, outputDirLineEdit);
    registerField(&quot;header*&quot;, headerLineEdit);
    registerField(&quot;implementation*&quot;, implementationLineEdit);

    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(outputDirLabel, 0, 0);
    layout-&amp;gt;addWidget(outputDirLineEdit, 0, 1);
    layout-&amp;gt;addWidget(headerLabel, 1, 0);
    layout-&amp;gt;addWidget(headerLineEdit, 1, 1);
    layout-&amp;gt;addWidget(implementationLabel, 2, 0);
    layout-&amp;gt;addWidget(implementationLineEdit, 2, 1);
    setLayout(layout);
}

void OutputFilesPage::initializePage()
{
    QString className = field(&quot;className&quot;).toString();
    headerLineEdit-&amp;gt;setText(className.toLower() + &quot;.h&quot;);
    implementationLineEdit-&amp;gt;setText(className.toLower() + &quot;.cpp&quot;);
    outputDirLineEdit-&amp;gt;setText(QDir::toNativeSeparators(QDir::tempPath()));
}

ConclusionPage::ConclusionPage(QWidget *parent)
    : QWizardPage(parent)
{
    setTitle(tr(&quot;Conclusion&quot;));
    setPixmap(QWizard::WatermarkPixmap, QPixmap(&quot;:/images/watermark2.png&quot;));

    label = new QLabel;
    label-&amp;gt;setWordWrap(true);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(label);
    setLayout(layout);
}

void ConclusionPage::initializePage()
{
    QString finishText = wizard()-&amp;gt;buttonText(QWizard::FinishButton);
    finishText.remove('&amp;amp;');
    label-&amp;gt;setText(tr(&quot;Click %1 to generate the class skeleton.&quot;)
                   .arg(finishText));
}

</db:programlisting>
</db:article>
