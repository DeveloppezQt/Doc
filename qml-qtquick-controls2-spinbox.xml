<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SpinBox QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows the user to select from a set of preset values.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Control</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>SpinBox is part of <db:simplelist><db:member>input</db:member><db:member>qtquickcontrols2-focusscopes</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-spinbox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> allows the user to choose an integer value by clicking the up or down indicator buttons, or by pressing up or down on the keyboard. Optionally, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> can be also made <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#editable-prop">editable</db:link>, so the user can enter a text value in the input field.</db:para>
<db:para>By default, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> provides discrete values in the range of <db:code>[0-99]</db:code> with a <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link> of <db:code>1</db:code>.</db:para>
<db:programlisting language="qml">SpinBox {
    value: 50
}
</db:programlisting>
<db:section xml:id="custom-values">
<db:title>Custom Values</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-spinbox-textual.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Even though <db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> works on integer values, it can be customized to accept arbitrary input values. The following snippet demonstrates how <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#validator-prop">validator</db:link>, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link> and <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#valueFromText-prop">valueFromText</db:link> can be used to customize the default behavior.</db:para>
<db:programlisting language="qml">SpinBox {
    id: spinBox
    from: 0
    to: items.length - 1
    value: 1 // &quot;Medium&quot;

    property var items: [&quot;Small&quot;, &quot;Medium&quot;, &quot;Large&quot;]

    validator: RegularExpressionValidator {
        regularExpression: new RegExp(&quot;(Small|Medium|Large)&quot;, &quot;i&quot;)
    }

    textFromValue: function(value) {
        return items[value];
    }

    valueFromText: function(text) {
        for (var i = 0; i &amp;lt; items.length; ++i) {
            if (items[i].toLowerCase().indexOf(text.toLowerCase()) === 0)
                return i
        }
        return spinBox.value
    }
}
</db:programlisting>
<db:para>In the same manner, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> can be customized to accept floating point numbers:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-spinbox-double.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">SpinBox {
    id: spinbox
    from: 0
    value: 110
    to: 100 * 100
    stepSize: 100
    anchors.centerIn: parent

    property int decimals: 2
    property real realValue: value / 100

    validator: DoubleValidator {
        bottom: Math.min(spinbox.from, spinbox.to)
        top:  Math.max(spinbox.from, spinbox.to)
    }

    textFromValue: function(value, locale) {
        return Number(value / 100).toLocaleString(locale, 'f', spinbox.decimals)
    }

    valueFromText: function(text, locale) {
        return Number.fromLocaleString(locale, text) * 100
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-tumbler.xml">Tumbler</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-spinbox">Customizing SpinBox</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-focus.xml">Focus Management in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="displayText-prop">
<db:title>[read-only, since QtQuick.Controls 2.4 (Qt 5.11)] displayText : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>displayText</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the textual value of the spinbox.</db:para>
<db:para>The value of the property is based on <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link> and <db:link xlink:href="qml-qtquick-controls2-control.xml#locale-prop">locale</db:link>, and equal to:</db:para>
<db:programlisting language="cpp" role="bad">var text = spinBox.textFromValue(spinBox.value, spinBox.locale)
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 2.4 (Qt 5.11).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="down-prop">
<db:title>down group</db:title>
<db:bridgehead renderas="sect2" xml:id="down.hovered-prop">down.hovered : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>down.hovered</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="down.implicitIndicatorHeight-prop">down.implicitIndicatorHeight : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>down.implicitIndicatorHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="down.implicitIndicatorWidth-prop">down.implicitIndicatorWidth : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>down.implicitIndicatorWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="down.indicator-prop">down.indicator : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>down.indicator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="down.pressed-prop">down.pressed : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>down.pressed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the down indicator item and whether it is pressed or hovered. The <db:code>down.hovered</db:code> property was introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1, and the <db:code>down.implicitIndicatorWidth</db:code> and <db:code>down.implicitIndicatorHeight</db:code> properties were introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#decrease-method">decrease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="editable-prop">
<db:title>editable : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>editable</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the spinbox is editable. The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#validator-prop">validator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="from-prop">
<db:title>from : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>from</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the starting value for the range. The default value is <db:code>0</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#to-prop">to</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#value-prop">value</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputMethodComposing-prop">
<db:title>[read-only, since QtQuick.Controls 2.2 (Qt 5.9)] inputMethodComposing : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>inputMethodComposing</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether an editable spin box has partial text input from an input method.</db:para>
<db:para>While it is composing, an input method may rely on mouse or key events from the spin box to edit or commit the partial text. This property can be used to determine when to disable event handlers that may interfere with the correct operation of an input method.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="inputMethodHints-prop">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] inputMethodHints : flags</db:title>
<db:fieldsynopsis>
<db:type>flags</db:type>
<db:varname>inputMethodHints</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property provides hints to the input method about the expected content of the spin box and how it should operate.</db:para>
<db:para>The default value is <db:code>Qt.ImhDigitsOnly</db:code>.</db:para>
<db:para>The value is a bit-wise combination of flags or <db:code>Qt.ImhNone</db:code> if no hints are set.</db:para>
<db:para>Flags that alter behavior are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhHiddenText - Characters should be hidden, as is typically used when entering passwords.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhSensitiveData - Typed text should not be stored by the active input method in any persistent storage like predictive user dictionary.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoAutoUppercase - The input method should not try to automatically switch to upper case when a sentence ends.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferNumbers - Numbers are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferUppercase - Upper case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhPreferLowercase - Lower case letters are preferred (but not required).</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhNoPredictiveText - Do not use predictive text (i.e. dictionary lookup) while typing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDate - The text editor functions as a date field.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhTime - The text editor functions as a time field.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Flags that restrict input (exclusive flags) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhDigitsOnly - Only digits are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhFormattedNumbersOnly - Only number input is allowed. This includes decimal point and minus sign.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUppercaseOnly - Only upper case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhLowercaseOnly - Only lower case letter input is allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhDialableCharactersOnly - Only characters suitable for phone dialing are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhEmailCharactersOnly - Only characters suitable for email addresses are allowed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt.ImhUrlCharactersOnly - Only characters suitable for URLs are allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Masks:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt.ImhExclusiveInputMask - This mask yields nonzero if any of the exclusive flags are used.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
<db:section xml:id="stepSize-prop">
<db:title>stepSize : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>stepSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the step size. The default value is <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#increase-method">increase</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#decrease-method">decrease</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textFromValue-prop">
<db:title>textFromValue : function</db:title>
<db:fieldsynopsis>
<db:type>function</db:type>
<db:varname>textFromValue</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a callback function that is called whenever an integer value needs to be converted to display text.</db:para>
<db:para>The default function can be overridden to display custom text for a given value. This applies to both editable and non-editable spinboxes; for example, when using the up and down buttons or a mouse wheel to increment and decrement the value, the new value is converted to display text using this function.</db:para>
<db:para>The callback function signature is <db:code>string function(value, locale)</db:code>. The function can have one or two arguments, where the first argument is the value to be converted, and the optional second argument is the locale that should be used for the conversion, if applicable.</db:para>
<db:para>The default implementation does the conversion using <db:link xlink:href="qml-qtqml-number.xml#toLocaleString-method">Number.toLocaleString</db:link>():</db:para>
<db:programlisting language="cpp">textFromValue: function(value, locale) { return Number(value).toLocaleString(locale, 'f', 0); }
</db:programlisting>
<db:note>
<db:para>When applying a custom <db:code>textFromValue</db:code> implementation for editable spinboxes, a matching <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#valueFromText-prop">valueFromText</db:link> implementation must be provided to be able to convert the custom text back to an integer value.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#valueFromText-prop">valueFromText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#validator-prop">validator</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#locale-prop">locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="to-prop">
<db:title>to : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>to</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the end value for the range. The default value is <db:code>99</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#from-prop">from</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#value-prop">value</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="up-prop">
<db:title>up group</db:title>
<db:bridgehead renderas="sect2" xml:id="up.hovered-prop">up.hovered : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>up.hovered</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="up.implicitIndicatorHeight-prop">up.implicitIndicatorHeight : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>up.implicitIndicatorHeight</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="up.implicitIndicatorWidth-prop">up.implicitIndicatorWidth : real</db:bridgehead>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>up.implicitIndicatorWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="up.indicator-prop">up.indicator : Item</db:bridgehead>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>up.indicator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="up.pressed-prop">up.pressed : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>up.pressed</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>These properties hold the up indicator item and whether it is pressed or hovered. The <db:code>up.hovered</db:code> property was introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.1, and the <db:code>up.implicitIndicatorWidth</db:code> and <db:code>up.implicitIndicatorHeight</db:code> properties were introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#increase-method">increase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validator-prop">
<db:title>validator : Validator</db:title>
<db:fieldsynopsis>
<db:type>Validator</db:type>
<db:varname>validator</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the input text validator for editable spinboxes. By default, <db:link xlink:href="qml-qtquick-controls2-spinbox.xml">SpinBox</db:link> uses <db:link xlink:href="qml-qtquick-intvalidator.xml">IntValidator</db:link> to accept input of integer numbers.</db:para>
<db:programlisting language="cpp">SpinBox {
    id: control
    validator: IntValidator {
        locale: control.locale.name
        bottom: Math.min(control.from, control.to)
        top: Math.max(control.from, control.to)
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#editable-prop">editable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#valueFromText-prop">valueFromText</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#locale-prop">locale</db:link></db:member>
<db:member><db:link xlink:href="qtquick-input-textinput.xml#validating-input-text">Validating Input Text</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>value</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the value in the range <db:code>from</db:code> - <db:code>to</db:code>. The default value is <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="valueFromText-prop">
<db:title>valueFromText : function</db:title>
<db:fieldsynopsis>
<db:type>function</db:type>
<db:varname>valueFromText</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a callback function that is called whenever input text needs to be converted to an integer value.</db:para>
<db:para>This function only needs to be overridden when <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link> is overridden for an editable spinbox.</db:para>
<db:para>The callback function signature is <db:code>int function(text, locale)</db:code>. The function can have one or two arguments, where the first argument is the text to be converted, and the optional second argument is the locale that should be used for the conversion, if applicable.</db:para>
<db:para>The default implementation does the conversion using <db:link xlink:href="qml-qtqml-locale.xml">Number.fromLocaleString()</db:link>:</db:para>
<db:programlisting language="cpp">valueFromText: function(text, locale) { return Number.fromLocaleString(locale, text); }
</db:programlisting>
<db:note>
<db:para>When applying a custom <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link> implementation for editable spinboxes, a matching <db:code>valueFromText</db:code> implementation must be provided to be able to convert the custom text back to an integer value.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#textFromValue-prop">textFromValue</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#validator-prop">validator</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-control.xml#locale-prop">locale</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wrap-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] wrap : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>wrap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the spinbox wraps. The default value is <db:code>false</db:code>.</db:para>
<db:para>If wrap is <db:code>true</db:code>, stepping past <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#to-prop">to</db:link> changes the value to <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#from-prop">from</db:link> and vice versa.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="valueModified-signal">
<db:title>[since QtQuick.Controls 2.2 (Qt 5.9)] valueModified()</db:title>
<db:para>This signal is emitted when the spin box value has been interactively modified by the user by either touch, mouse, wheel, or keys. In the case of interaction via keyboard, the signal is only emitted when the text has been accepted; meaning when the enter or return keys are pressed, or the input field loses focus.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onValueModified</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.Controls 2.2 (Qt 5.9).</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="decrease-method">
<db:title>void decrease()</db:title>
<db:para>Decreases the value by <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link>, or <db:code>1</db:code> if <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link> is not defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="increase-method">
<db:title>void increase()</db:title>
<db:para>Increases the value by <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link>, or <db:code>1</db:code> if <db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link> is not defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-spinbox.xml#stepSize-prop">stepSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
