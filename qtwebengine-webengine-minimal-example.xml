<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Qt Quick Minimal Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Displays a web page using the Qt Quick integration of Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/minimal-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis><db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Qt Quick Minimal Example</db:emphasis> demonstrates how to use the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> item to render a web page. It shows the minimum amount of code needed to load and display an HTML page, and can be used as a basis for further experimentation.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="c-code">
<db:title>C++ Code</db:title>
<db:para>In <db:code>main.cpp</db:code> we use only the <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> and <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> classes. We also include <db:code>qtwebengineglobal.h</db:code> to be able to use <db:link xlink:href="qtwebengine.xml#initialize">QtWebEngine::initialize</db:link>.</db:para>
<db:programlisting language="cpp">#include &lt;QGuiApplication&gt;
#include &lt;QQmlApplicationEngine&gt;
#include &lt;qtwebengineglobal.h&gt;

</db:programlisting>
<db:para>In the <db:code>main</db:code> function we first set the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_EnableHighDpiScaling</db:link> attribute. This lets the web view automatically scale on high-dpi displays. Then we instantiate a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> object.</db:para>
<db:para>Next, we call <db:link xlink:href="qtwebengine.xml#initialize">QtWebEngine::initialize</db:link>, which makes sure that OpenGL contexts can be shared between the main process and the dedicated renderer process (<db:code>QtWebEngineProcess</db:code>). This method needs to be called before any OpenGL context is created.</db:para>
<db:para>Then we create a <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>, and tell it to load <db:code>main.qml</db:code> from the <db:link xlink:href="resources.xml">Qt Resource System</db:link>.</db:para>
<db:para>Finally, <db:link xlink:href="qguiapplication.xml#exec">QGuiApplication::exec</db:link>() launches the main event loop.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QGuiApplication app(argc, argv);

    QtWebEngine::initialize();

    QQmlApplicationEngine engine;
    engine.load(QUrl(QStringLiteral(&quot;qrc:/main.qml&quot;)));

    return app.exec();
}

</db:programlisting>
</db:section>
<db:section xml:id="qml-code">
<db:title>QML Code</db:title>
<db:para>In <db:code>main.qml</db:code> we create the top level window, set a sensible default size and make it visible. The window will be filled by a <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> item loading the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link>.</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtQuick.Window 2.0
import QtWebEngine 1.0

Window {
    width: 1024
    height: 750
    visible: true
    WebEngineView {
        anchors.fill: parent
        url: &quot;http://www.qt.io&quot;
    }
}

</db:programlisting>
</db:section>
<db:section xml:id="requirements">
<db:title>Requirements</db:title>
<db:para>The example requires a working internet connection to render the <db:link xlink:href="http://qt.io/">Qt Homepage</db:link>. An optional system proxy should be picked up automatically.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="webengine/minimal/main.cpp">webengine/minimal/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/minimal/main.qml">webengine/minimal/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/minimal/minimal.pro">webengine/minimal/minimal.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="webengine/minimal/qml.qrc">webengine/minimal/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
