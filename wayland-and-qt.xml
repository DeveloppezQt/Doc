<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wayland and Qt</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the Wayland protocol and how it fits into Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="https://wayland.freedesktop.org/">Wayland</db:link> is a display server protocol that helps you to create multi-process systems. Multiple client applications (&quot;clients&quot;) can render their own content to off-screen buffers. These buffers are then passed to a display server, often called a compositor, using the Wayland protocol. Finally, the compositor composites and positions the content on a physical display.</db:para>
<db:section xml:id="why-use-multi-process">
<db:title>Why Use Multi-Process</db:title>
<db:para>In a single-process system, all parts of the UI run in one, single process. In a multi-process system, all clients run in their own, dedicated process. With Qt, at any point in your development process, you can choose to switch between single-process and multi-process.</db:para>
<db:figure>
<db:title>Multi-Process Client Architecture</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wayland-multi-process.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:figure>
<db:title>Single Process Client Architecture</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wayland-single-process-eglfs.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>The use of multi-process has the following benefits:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#stability">Stability</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#security">Security</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#performance">Performance</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#interoperability">Interoperability</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="stability"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Stability</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Easier to recover when clients hang or crash</db:para>
</db:td>
<db:td>
<db:para>If you have a complex UI, then multi-process is useful because if one part of the UI crashes, it doesn't affect the entire system. Similarly, the display won't freeze, even when one client freezes.</db:para>
<db:note>
<db:para>If your client is mandated by law to render safety-critical information, consider using <db:link xlink:href="https://doc.qt.io/QtSafeRenderer/qtsr-overview.html">Qt Safe Renderer Overview</db:link>.</db:para>
</db:note>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Protection against possible memory leaks</db:para>
</db:td>
<db:td>
<db:para>In a multi-process system, if one client has a memory leak and consumes lots of memory, that memory is recovered when that client exits. In contrast with single-process, the memory leak remains until the entire system restarts.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="security"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Security</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>In a single-process system, all clients can access each other's memory. For example, there's no isolation for sensitive data transfer; every line of code must be equally trustworthy. This isolation is there, by design, in multi-process systems.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="performance"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Performance</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>If you have a CPU with multiple cores, a multi-process system can help distribute the load evenly across different cores, making more efficient use of your CPU.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="interoperability"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Interoperability</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>You can interface with non-Qt clients in a multi-process system, as long as your clients understand Wayland or X11. For example, if you use gstreamer for video or if you want to use a navigation application built with another UI toolkit, you can run these clients alongside your other Qt-based clients.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="why-use-wayland-instead-of-x11-or-custom-solutions">
<db:title>Why Use Wayland Instead of X11 or Custom Solutions</db:title>
<db:para>X11, a desktop protocol from the 80s, no longer fits with how graphics hardware works today. It is large, complex, and lacks customizability. In fact, it is difficult to run a client fluidly with X11, and reach 60 fps without tearing. Wayland, in contrast, is easier to implement, has better performance, and contains all the necessary parts to run efficiently on modern graphics hardware. For embedded, multi-process systems on Linux, Wayland is the standard.</db:para>
<db:para>However, if you are working with old hardware or legacy applications, then Wayland may not be a good option. The Wayland protocol is designed with security and isolation in mind, and is strict/conservative about what information and functionality is available to clients. While this leads to a cleaner and more secure interface, some functionality that legacy applications expect may no longer be available on Wayland.</db:para>
<db:para>Particularly, there are three common use cases where Wayland may not be the best option:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The hardware or platform is old and only supports X11; in which case you have no choice.</db:para>
</db:listitem>
<db:listitem>
<db:para>You have to support legacy applications that depend on features that are absent in the Wayland protocol for security and simplicity.</db:para>
</db:listitem>
<db:listitem>
<db:para>You have to support legacy applications that use a UI toolkit that doesn't run on Wayland at all. In some cases, you may be able to work around this by running those applications on <db:link xlink:href="https://wayland.freedesktop.org/xserver.html">XWayland</db:link> instead.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Back when X11 was very popular, developers wrote their own custom solutions to circumvent X11 issues. Older Qt versions had the Qt Windowing System (QWS), which is now discontinued. Today, most of these use cases are covered by Wayland, and custom solutions are becoming less and less common.</db:para>
</db:section>
<db:section xml:id="possible-trade-offs-with-multi-process">
<db:title>Possible Trade-Offs with Multi-Process</db:title>
<db:para>Use of multi-process systems do bring about the following trade-offs:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#increased-video-memory">Increased video memory consumption</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#increased-main-memory">Increased main memory consumption</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="wayland-and-qt.xml#repeated-storage">Repeated storage of graphical resources</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="increased-video-memory"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Increased video memory consumption</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>This can be a constraint for embedded devices. In multi-process, each client needs to have its own graphics buffer, which it sends to the compositor. Consequently, you use more video memory compared to the single-process case: where everything is drawn at once and there is no need to store the different parts in intermediary buffers.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="increased-main-memory"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Increased main memory consumption</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Apart from some extra overhead at the OS level, running multiple clients may also use more main memory as some parts need to be duplicated once per client. For example, if you run QML, each client requires a separate QML engine. Consequently, if you run a single client that uses Qt Quick Controls, it's loaded once. If you then split this client into multiple clients, you're loading Qt Quick Controls multiple times, resulting in a higher startup cost to initialize your clients.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:anchor xml:id="repeated-storage"/>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th>
<db:para>Repeated storage of graphical resources</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>In a single-process system, if you're using the same textures, background, or icons in many places, those images are only stored once. In contrast, if you use these images in a multi-process system, then you have to store them multiple times. In this case, one solution is to share graphical resource between clients. Qt already allows sharing image resources in main memory across processes without involving Wayland. Sharing GPU textures across processes, on the other hand, requires more intricate solutions. Such solutions are currently in development for the Qt Wayland Compositor.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="what-qt-wayland-offers">
<db:title>What Qt Wayland Offers</db:title>
<db:para><db:emphasis role="bold">For Clients</db:emphasis>  Qt clients can run on any Wayland compositor, including Weston, the reference compositor developed as part of the Wayland project.</db:para>
<db:para>Any Qt program can run as a Wayland client (as part of a multi-process system) or a standalone client (single-process). This is determined on startup, where you can choose between the different backends. During the development process, you can develop the client on the desktop first, then test it on the target hardware later. You don't need to run your clients on the actual target hardware all the time.</db:para>
<db:figure>
<db:title>Single-Process Client Development</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/wayland-single-process-develop.png"/>
</db:imageobject>
</db:mediaobject>
</db:figure>
<db:para>If you develop on a Linux machine, you can also run the compositor within a window on your development machine. This lets you run clients in an environment that closely resembles the target device. Without rebuilding the client, you can also run it with -platform wayland to run it inside the compositor. If you use -platform xcb (for X11), you can run the client on the desktop. In other words, you can start developing your clients before the compositor is ready for use.</db:para>
<db:para><db:emphasis role="bold">For Servers</db:emphasis>  The server, or compositor, connects to the display and shows the contents of each client on the screen. The compositor handles input and sends input events to the corresponding client. In turn, each client connects to the compositor and sends the content of its windows. It's up to the compositor to decide:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How and where to show the content</db:para>
</db:listitem>
<db:listitem>
<db:para>Which content to show</db:para>
</db:listitem>
<db:listitem>
<db:para>What to do with the different client graphics buffers</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This means, it's up to the compositor to decide what a multi-process system is. For instance, the clients could be part of a 3D scene with windows on the walls, on a VR system, mapped to a sphere, and so on.</db:para>
<db:para>The Qt Wayland Compositor is an API for building your own compositor. It gives you full freedom to build a custom compositor UI and manage the windows of various clients. You can combine both Qt Quick and QML with the Qt Wayland Compositor to create impressive, imaginative UIs. For more information, see <db:link xlink:href="license-changes.xml#qt-wayland-compositor">Qt Wayland Compositor</db:link>.</db:para>
<db:section xml:id="related-content">
<db:title>Related Content</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://resources.qt.io/qt-world-summit-2017/qtws17-qt-wayland-compositor-creating-multi-process-user-interface-johan-helsing-the-qt-company">QtWS17 - Qt Wayland Compositor: Creating multi-process user interface</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/QtApplicationManager/introduction.html">Qt Application Manager</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
