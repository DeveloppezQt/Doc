<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMapIterator Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMapIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> class provides a Java-style const iterator for <db:link xlink:href="qmap.xml">QMap</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMapIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link> has both <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. STL-style iterators are more efficient and should be preferred.</db:para>
<db:para><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>&lt;Key, T&gt; allows you to iterate over a <db:link xlink:href="qmap.xml">QMap</db:link>. If you want to modify the map as you iterate over it, use <db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link> instead.</db:para>
<db:para>The <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> constructor takes a <db:link xlink:href="qmap.xml">QMap</db:link> as argument. After construction, the iterator is located at the very beginning of the map (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;int, QWidget *&amp;gt; map;
...
QMapIterator&amp;lt;int, QWidget *&amp;gt; i(map);
while (i.hasNext()) {
    i.next();
    qDebug() &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; i.value();
}
</db:programlisting>
<db:para>The <db:link xlink:href="qmapiterator.xml#next">next</db:link>() function returns the next item in the map and advances the iterator. The <db:link xlink:href="qmapiterator.xml#key">key</db:link>() and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() functions return the key and value of the last item that was jumped over.</db:para>
<db:para>Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to <db:link xlink:href="qmapiterator.xml#next">next</db:link>() advances the iterator to the position between the first and second item, and returns the first item; the second call to <db:link xlink:href="qmapiterator.xml#next">next</db:link>() advances the iterator to the position between the second and third item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QMapIterator&amp;lt;int, QWidget *&amp;gt; i(map);
i.toBack();
while (i.hasPrevious()) {
    i.previous();
    qDebug() &amp;lt;&amp;lt; i.key() &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; i.value();
}
</db:programlisting>
<db:para>If you want to find all occurrences of a particular value, use <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>() or <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>() in a loop. For example:</db:para>
<db:programlisting language="cpp">QMapIterator&amp;lt;int, QWidget *&amp;gt; i(map);
while (i.findNext(widget)) {
    qDebug() &amp;lt;&amp;lt; &quot;Found widget &quot; &amp;lt;&amp;lt; widget &amp;lt;&amp;lt; &quot; under key &quot;
             &amp;lt;&amp;lt; i.key();
}
</db:programlisting>
<db:para>Multiple iterators can be used on the same map. If the map is modified while a <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> is active, the <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> will continue iterating over the original map, ignoring the modified copy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMapIterator">
<db:title>QMapIterator::QMapIterator(const QMap&lt;Key, T&gt; &amp;<db:emphasis>map</db:emphasis>)</db:title>
<db:para>Constructs an iterator for traversing <db:code role="parameter">map</db:code>. The iterator is set to be at the front of the map (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMapIterator&lt;Key, T&gt; &amp;QMapIterator::operator=(const QMap&lt;Key, T&gt; &amp;<db:emphasis>container</db:emphasis>)</db:title>
<db:para>Makes the iterator operate on <db:code role="parameter">map</db:code>. The iterator is set to be at the front of the map (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#toBack">toBack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFront">
<db:title>void QMapIterator::toFront()</db:title>
<db:para>Moves the iterator to the front of the container (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#toBack">toBack</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBack">
<db:title>void QMapIterator::toBack()</db:title>
<db:para>Moves the iterator to the back of the container (after the last item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QMapIterator::hasNext() const</db:title>
<db:para>Returns true if there is at least one item ahead of the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the back of the container; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>QMapIterator::Item QMapIterator::next()</db:title>
<db:para>Returns the next item and advances the iterator by one position.</db:para>
<db:para>Call <db:link xlink:href="qmapiterator.xml#key">key</db:link>() on the return value to obtain the item's key, and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() to obtain the value.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#peekNext">peekNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekNext">
<db:title>QMapIterator::Item QMapIterator::peekNext() const</db:title>
<db:para>Returns the next item without moving the iterator.</db:para>
<db:para>Call <db:link xlink:href="qmapiterator.xml#key">key</db:link>() on the return value to obtain the item's key, and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() to obtain the value.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPrevious">
<db:title>bool QMapIterator::hasPrevious() const</db:title>
<db:para>Returns true if there is at least one item behind the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the front of the container; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previous">
<db:title>QMapIterator::Item QMapIterator::previous()</db:title>
<db:para>Returns the previous item and moves the iterator back by one position.</db:para>
<db:para>Call <db:link xlink:href="qmapiterator.xml#key">key</db:link>() on the return value to obtain the item's key, and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() to obtain the value.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekPrevious">
<db:title>QMapIterator::Item QMapIterator::peekPrevious() const</db:title>
<db:para>Returns the previous item without moving the iterator.</db:para>
<db:para>Call <db:link xlink:href="qmapiterator.xml#key">key</db:link>() on the return value to obtain the item's key, and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() to obtain the value.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#previous">previous</db:link>()</db:member>
<db:member><db:link xlink:href="qmapiterator.xml#peekNext">peekNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>const T &amp;QMapIterator::value() const</db:title>
<db:para>Returns the value of the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmapiterator.xml#next">next</db:link>(), <db:link xlink:href="qmapiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>After a call to <db:link xlink:href="qmapiterator.xml#next">next</db:link>() or <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmapiterator.xml#value">value</db:link>() is equivalent to <db:link xlink:href="qmapiterator.xml#peekPrevious">peekPrevious</db:link>().<db:link xlink:href="qmapiterator.xml#value">value</db:link>(). After a call to <db:link xlink:href="qmapiterator.xml#previous">previous</db:link>() or <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>(), <db:link xlink:href="qmapiterator.xml#value">value</db:link>() is equivalent to <db:link xlink:href="qmapiterator.xml#peekNext">peekNext</db:link>().<db:link xlink:href="qmapiterator.xml#value">value</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#key">key</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="key">
<db:title>const Key &amp;QMapIterator::key() const</db:title>
<db:para>Returns the key of the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmapiterator.xml#next">next</db:link>(), <db:link xlink:href="qmapiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>After a call to <db:link xlink:href="qmapiterator.xml#next">next</db:link>() or <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmapiterator.xml#key">key</db:link>() is equivalent to <db:link xlink:href="qmapiterator.xml#peekPrevious">peekPrevious</db:link>().<db:link xlink:href="qmapiterator.xml#key">key</db:link>(). After a call to <db:link xlink:href="qmapiterator.xml#previous">previous</db:link>() or <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>(), <db:link xlink:href="qmapiterator.xml#key">key</db:link>() is equivalent to <db:link xlink:href="qmapiterator.xml#peekNext">peekNext</db:link>().<db:link xlink:href="qmapiterator.xml#key">key</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findNext">
<db:title>bool QMapIterator::findNext(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position forward. Returns true if a (key, value) pair with value <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just after the matching item; otherwise, the iterator is positioned at the back of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findPrevious">
<db:title>bool QMapIterator::findPrevious(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position backward. Returns true if a (key, value) pair with value <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just before the matching item; otherwise, the iterator is positioned at the front of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
