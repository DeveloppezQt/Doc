<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMapIterator Class</db:title>
<db:subtitle>template &lt;typename Key, typename T&gt; class QMapIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> class provides a Java-style const iterator for <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMapIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link> has both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.</db:para>
<db:para><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>&lt;Key, T&gt; allows you to iterate over a <db:link xlink:href="qmap.xml">QMap</db:link> (or a <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>). If you want to modify the map as you iterate over it, use <db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link> instead.</db:para>
<db:para>The <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> constructor takes a <db:link xlink:href="qmap.xml">QMap</db:link> as argument. After construction, the iterator is located at the very beginning of the map (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QMap&lt;int, QWidget *&gt; map;
...
QMapIterator&lt;int, QWidget *&gt; i(map);
while (i.hasNext()) {
    i.next();
    qDebug() &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value();
}
</db:programlisting>
<db:para>The next() function returns the next item in the map and advances the iterator. The key() and value() functions return the key and value of the last item that was jumped over.</db:para>
<db:para>Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to next() advances the iterator to the position between the first and second item, and returns the first item; the second call to next() advances the iterator to the position between the second and third item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QMapIterator&lt;int, QWidget *&gt; i(map);
i.toBack();
while (i.hasPrevious()) {
    i.previous();
    qDebug() &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value();
}
</db:programlisting>
<db:para>If you want to find all occurrences of a particular value, use findNext() or findPrevious() in a loop. For example:</db:para>
<db:programlisting language="cpp">QMapIterator&lt;int, QWidget *&gt; i(map);
while (i.findNext(widget)) {
    qDebug() &lt;&lt; &quot;Found widget &quot; &lt;&lt; widget &lt;&lt; &quot; under key &quot;
             &lt;&lt; i.key();
}
</db:programlisting>
<db:para>Multiple iterators can be used on the same map. If the map is modified while a <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> is active, the <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> will continue iterating over the original map, ignoring the modified copy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link></db:member>
<db:member><db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
