<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBindable Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QBindable</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qbindable.xml">QBindable</db:link> is a wrapper class around binding-enabled properties. It allows type-safe operations while abstracting the differences between the various property classes away.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBindable</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="quntypedbindable.xml" xlink:role="class">QUntypedBindable</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBindable is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbindable.xml">QBindable</db:link>&lt;T&gt; helps to integrate Qt's traditional <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> with <db:link xlink:href="bindableproperties.xml">binding-enabled</db:link> properties. If a property is backed by a <db:link xlink:href="qproperty.xml">QProperty</db:link>, <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link> or <db:link xlink:href="qobjectcomputedproperty.xml">QObjectComputedProperty</db:link>, you can add BINDABLE bindablePropertyName to the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> declaration, where bindablePropertyName is a function returning an instance of <db:link xlink:href="qbindable.xml">QBindable</db:link> constructed from the <db:link xlink:href="qproperty.xml">QProperty</db:link>. The returned <db:link xlink:href="qbindable.xml">QBindable</db:link> allows users of the property to set and query bindings of the property, without having to know the exact kind of binding-enabled property used.</db:para>
<db:programlisting language="cpp">class MyClass : public QObject
{
    Q_OBJECT
    Q_PROPERTY(int x READ x WRITE setX NOTIFY xChanged BINDABLE bindableX)
public:
    int x() const { return xProp; }
    void setX(int x) { xProp = x; }
    QBindable&amp;lt;int&amp;gt; bindableX() { return QBindable&amp;lt;int&amp;gt;(&amp;amp;xProp); }

signals:
    void xChanged();

private:
    // Declare the instance of the bindable property data.
    Q_OBJECT_BINDABLE_PROPERTY(MyClass, int, xProp, &amp;amp;MyClass::xChanged)
};
MyClass *myObject;
QBindable&amp;lt;int&amp;gt; bindableX = myObject-&amp;gt;bindableX();
qDebug() &amp;lt;&amp;lt; bindableX.hasBinding(); // prints false
QProperty&amp;lt;int&amp;gt; y {42};
bindableX.setBinding([&amp;amp;](){ return 2*y.value(); });
qDebug() &amp;lt;&amp;lt; bindableX.hasBinding() &amp;lt;&amp;lt; myObject-&amp;gt;x(); // prints true 84
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaproperty.xml#isBindable">QMetaProperty::isBindable</db:link></db:member>
<db:member><db:link xlink:href="qproperty.xml">QProperty</db:link></db:member>
<db:member><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link></db:member>
<db:member><db:link xlink:href="qobjectcomputedproperty.xml">QObjectComputedProperty</db:link></db:member>
<db:member><db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBindable-2">
<db:title>[explicit] QBindable::QBindable(QObject *<db:emphasis>obj</db:emphasis>, const QMetaProperty &amp;<db:emphasis>property</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBindable</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMetaProperty &amp;</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QBindable(QObject *obj, const QMetaProperty &amp;property)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>See <db:link xlink:href="qbindable.xml#QBindable-3">QBindable::QBindable</db:link>(QObject *obj, const char *property)</db:para>
</db:section>
<db:section xml:id="QBindable-3">
<db:title>[explicit] QBindable::QBindable(QObject *<db:emphasis>obj</db:emphasis>, const char *<db:emphasis>property</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QBindable</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>obj</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>property</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QBindable(QObject *obj, const char *property)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qbindable.xml">QBindable</db:link> for the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> <db:code role="parameter">property</db:code> on <db:code role="parameter">obj</db:code>. The property must have a notify signal but does not need to have BINDABLE in its Q_PROPERTY definition, so even binding unaware Q_PROPERTYs can be bound or used in binding expressions. You must use QBindable::value() in binding expressions instead of the normal property READ function (or MEMBER) to enable dependency tracking if the property is not BINDABLE. When binding using a lambda, you may prefer to capture the <db:link xlink:href="qbindable.xml">QBindable</db:link> by value to avoid the cost of calling this constructor in the binding expression. This constructor should not be used to implement BINDABLE for a <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>, as the resulting <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> will not support dependency tracking. To make a property that is usable directly without reading through a <db:link xlink:href="qbindable.xml">QBindable</db:link> use <db:link xlink:href="qproperty.xml">QProperty</db:link> or <db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link>.</db:para>
<db:programlisting language="cpp">QProperty&amp;lt;QString&amp;gt; displayText;
QDateTimeEdit *dateTimeEdit = findDateTimeEdit();
QBindable&amp;lt;QDateTime&amp;gt; dateTimeBindable(dateTimeEdit, &quot;dateTime&quot;);
displayText.setBinding([dateTimeBindable](){ return dateTimeBindable.value().toString(); });
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qproperty.xml">QProperty</db:link></db:member>
<db:member><db:link xlink:href="qobjectbindableproperty.xml">QObjectBindableProperty</db:link></db:member>
<db:member><db:link xlink:href="bindableproperties.xml">Qt Bindable Properties</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="binding">
<db:title>QPropertyBinding&lt;T&gt; QBindable::binding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>binding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; binding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the currently set binding of the underlying property. If the property does not have a binding, the returned QPropertyBinding&lt;T&gt; will be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbindable.xml#setBinding">setBinding</db:link></db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#hasBinding">hasBinding</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="makeBinding">
<db:title>QPropertyBinding&lt;T&gt; QBindable::makeBinding(const QPropertyBindingSourceLocation &amp;<db:emphasis>location</db:emphasis> = QT_PROPERTY_DEFAULT_BINDING_LOCATION) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>makeBinding</db:methodname>
<db:methodparam>
<db:type>const QPropertyBindingSourceLocation &amp;</db:type>
<db:parameter>location</db:parameter>
<db:initializer>QT_PROPERTY_DEFAULT_BINDING_LOCATION</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; makeBinding(const QPropertyBindingSourceLocation &amp;location) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a binding evaluating to the underlying property's value, using a specified source <db:code role="parameter">location</db:code>.</db:para>
</db:section>
<db:section xml:id="setBinding">
<db:title>QPropertyBinding&lt;T&gt; QBindable::setBinding(const QPropertyBinding&lt;T&gt; &amp;<db:emphasis>binding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>const QPropertyBinding&lt;T&gt; &amp;</db:type>
<db:parameter>binding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(const QPropertyBinding&lt;T&gt; &amp;binding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the underlying property's binding to <db:code role="parameter">binding</db:code>. Does nothing if the <db:link xlink:href="qbindable.xml">QBindable</db:link> is read-only or invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbindable.xml#binding">binding</db:link></db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isReadOnly">isReadOnly</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBinding-1">
<db:title>QPropertyBinding&lt;T&gt; QBindable::setBinding(Functor <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>setBinding</db:methodname>
<db:methodparam>
<db:type>Functor</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; setBinding(Functor f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a QPropertyBinding&lt;T&gt; from <db:code role="parameter">f</db:code>, and sets it as the underlying property's binding.</db:para>
</db:section>
<db:section xml:id="setValue">
<db:title>void QBindable::setValue(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setValue</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setValue(const T &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the underlying property's value to <db:code role="parameter">value</db:code>. This removes any currenltly set binding from it. This function has no effect if the <db:link xlink:href="qbindable.xml">QBindable</db:link> is read-only or invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbindable.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isReadOnly">isReadOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qbindable.xml#setBinding">setBinding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeBinding">
<db:title>QPropertyBinding&lt;T&gt; QBindable::takeBinding()</db:title>
<db:methodsynopsis>
<db:type>QPropertyBinding&lt;T&gt;</db:type>
<db:methodname>takeBinding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPropertyBinding&lt;T&gt; takeBinding()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the currently set binding of the underlying property and returns it. If the property does not have a binding, the returned QPropertyBinding&lt;T&gt; will be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbindable.xml#binding">binding</db:link></db:member>
<db:member><db:link xlink:href="qbindable.xml#setBinding">setBinding</db:link></db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#hasBinding">hasBinding</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>T QBindable::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the underlying property's current value. If the <db:link xlink:href="qbindable.xml">QBindable</db:link> is invalid, a default constructed T is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbindable.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="quntypedbindable.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
