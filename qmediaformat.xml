<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaFormat Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes an encoding format for a multimedia file or stream.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaFormat is part of <db:simplelist><db:member>multimedia</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> describes an encoding format for a multimedia file or stream.</db:para>
<db:para>You can check whether a certain media format can be used for encoding or decoding using <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AudioCodec-enum">
<db:title>enum QMediaFormat::AudioCodec</db:title>
<db:enumsynopsis>
<db:enumname>AudioCodec</db:enumname>
<db:enumitem>
<db:enumidentifier>Unspecified</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MP3</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AAC</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AC3</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EAC3</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FLAC</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DolbyTrueHD</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Opus</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Vorbis</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Wave</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WMA</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ALAC</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastAudioCodec</db:enumidentifier>
<db:enumvalue>ALAC</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the audio codec used in multimedia file or stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::WMA</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Windows_Media_Audio">Windows Media Audio</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::AC3</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Dolby_Digital">Dolby Digital</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::AAC</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Advanced_Audio_Coding">Advanced Audio Coding</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::ALAC</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/ALAC">Apple Lossless Audio Codec</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::DolbyTrueHD</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Dolby_TrueHD">Dolby TrueHD</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::EAC3</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Dolby_Digital_Plus">Dolby Digital Plus (EAC3)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::MP3</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MP3">MPEG-1 Audio Layer III or MPEG-2 Audio Layer III</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::Wave</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/WAV">Waveform Audio File Format</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::Vorbis</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Vorbis">Ogg Vorbis</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::FLAC</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/FLAC">Free Lossless Audio Codec</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::Opus</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Opus_(audio_format)">Opus Audio Format</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">AudioCodec</db:emphasis>::Unspecified</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Unspecified codec</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ConversionMode-enum">
<db:title>enum QMediaFormat::ConversionMode</db:title>
<db:enumsynopsis>
<db:enumname>ConversionMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Encode</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Decode</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>In many cases, systems have asymmetric capabilities and can often decode more formats or codecs than can be encoded. This enum describes the requested conversion mode to be used when checking whether a certain file format or codec is supported.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Encode</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Used to check whether a certain file format or codec can be encoded.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Decode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Used to check whether a certain file format or codec can be decoded.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#supportedFileFormats">supportedFileFormats</db:link></db:member>
<db:member><db:link xlink:href="qmediaformat.xml#supportedAudioCodecs">supportedAudioCodecs</db:link></db:member>
<db:member><db:link xlink:href="qmediaformat.xml#supportedVideoCodecs">supportedVideoCodecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="FileFormat-enum">
<db:title>enum QMediaFormat::FileFormat</db:title>
<db:enumsynopsis>
<db:enumname>FileFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>UnspecifiedFormat</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WMV</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AVI</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Matroska</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MPEG4</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ogg</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>QuickTime</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WebM</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Mpeg4Audio</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AAC</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WMA</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MP3</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FLAC</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Wave</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastFileFormat</db:enumidentifier>
<db:enumvalue>Wave</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the container format used in a multimedia file or stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::WMA</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Windows_Media_Audio">Windows Media Audio</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::AAC</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Advanced_Audio_Coding">Advanced Audio Coding</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Matroska</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Matroska">Matroska (MKV)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::WMV</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Windows_Media_Video">Windows Media Video</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::MP3</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MP3">MPEG-1 Audio Layer III or MPEG-2 Audio Layer III</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Wave</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/WAV">Waveform Audio File Format</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Ogg</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Ogg">Ogg</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::MPEG4</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MPEG-4">MPEG-4</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::AVI</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Audio_Video_Interleave">Audio Video Interleave</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::QuickTime</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/QuickTime">QuickTime</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::WebM</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/WebM">WebM</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::Mpeg4Audio</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MPEG-4_Part_3">MPEG-4 Part 3 or MPEG-4 Audio (formally ISO/IEC 14496-3)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::FLAC</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/FLAC">Free Lossless Audio Codec</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::UnspecifiedFormat</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>The format is unspecified.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ResolveFlags-enum">
<db:title>enum QMediaFormat::ResolveFlags</db:title>
<db:enumsynopsis>
<db:enumname>ResolveFlags</db:enumname>
<db:enumitem>
<db:enumidentifier>NoFlags</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequiresVideo</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the requirements for resolving a suitable format for <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::NoFlags</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No requirements</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::RequiresVideo</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A video codec is required</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#resolveForEncoding">resolveForEncoding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="VideoCodec-enum">
<db:title>enum QMediaFormat::VideoCodec</db:title>
<db:enumsynopsis>
<db:enumname>VideoCodec</db:enumname>
<db:enumitem>
<db:enumidentifier>Unspecified</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MPEG1</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MPEG2</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MPEG4</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>H264</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>H265</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VP8</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VP9</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AV1</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Theora</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WMV</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MotionJPEG</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LastVideoCodec</db:enumidentifier>
<db:enumvalue>MotionJPEG</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes the video coded used in multimedia file or stream.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::VP8</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/VP8">VP8</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::MPEG2</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MPEG-2">MPEG-2</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::MPEG1</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MPEG-1">MPEG-1</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::WMV</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Windows_Media_Video">Windows Media Video</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::H265</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding">High Efficiency Video Coding (HEVC)</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::H264</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Advanced_Video_Coding">Advanced Video Coding</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::MPEG4</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/MPEG-4">MPEG-4</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::AV1</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/AV1">AOMedia Video 1</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::MotionJPEG</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Motion_JPEG">MotionJPEG</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::VP9</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/VP9">VP9</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::Theora</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="https://en.wikipedia.org/wiki/Theora">Theora</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:emphasis>::<db:emphasis role="bold">VideoCodec</db:emphasis>::Unspecified</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Video codec not specified</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="audioCodec-prop">
<db:title>audioCodec : AudioCodec</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>AudioCodec</db:type>
<db:varname>audioCodec</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">audioCodec</db:synopsisinfo>
<db:synopsisinfo role="setter">setAudioCodec</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the audio codec of the media.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml#audioCodec">audioCodec</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml#setAudioCodec">setAudioCodec</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:type> <db:emphasis>codec</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileFormat-prop">
<db:title>fileFormat : FileFormat</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>FileFormat</db:type>
<db:varname>fileFormat</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">fileFormat</db:synopsisinfo>
<db:synopsisinfo role="setter">setFileFormat</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the file (container) format of the media.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaformat.xml#FileFormat-enum">QMediaFormat::FileFormat</db:link></db:type> <db:emphasis role="bold">fileFormat</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFileFormat</db:emphasis>(<db:type><db:link xlink:href="qmediaformat.xml#FileFormat-enum">QMediaFormat::FileFormat</db:link></db:type> <db:emphasis>f</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#FileFormat-enum">QMediaFormat::FileFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoCodec-prop">
<db:title>videoCodec : VideoCodec</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>VideoCodec</db:type>
<db:varname>videoCodec</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">videoCodec</db:synopsisinfo>
<db:synopsisinfo role="setter">setVideoCodec</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video codec of the media.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml#videoCodec">videoCodec</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaformat.xml#setVideoCodec">setVideoCodec</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:type> <db:emphasis>codec</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaFormat">
<db:title>QMediaFormat::QMediaFormat(QMediaFormat::FileFormat <db:emphasis>format</db:emphasis> = UnspecifiedFormat)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaFormat</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::FileFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>UnspecifiedFormat</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat(QMediaFormat::FileFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> object for <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QMediaFormat-1">
<db:title>QMediaFormat::QMediaFormat(const QMediaFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaFormat</db:methodname>
<db:methodparam>
<db:type>const QMediaFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat(const QMediaFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> object by copying from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QMediaFormat-2">
<db:title>QMediaFormat::QMediaFormat(QMediaFormat &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaFormat</db:methodname>
<db:methodparam>
<db:type>QMediaFormat &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat(QMediaFormat &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> objects by moving from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaFormat">
<db:title>QMediaFormat::~QMediaFormat()</db:title>
<db:destructorsynopsis>
<db:methodname>~QMediaFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> object.</db:para>
</db:section>
<db:section xml:id="audioCodec">
<db:title>QMediaFormat::AudioCodec QMediaFormat::audioCodec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaFormat::AudioCodec</db:type>
<db:methodname>audioCodec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioCodec</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat::AudioCodec audioCodec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the audio codec used in this format.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaformat.xml#audioCodec-prop">audioCodec</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#setAudioCodec">setAudioCodec</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="audioCodecDescription">
<db:title>[static] QString QMediaFormat::audioCodecDescription(QMediaFormat::AudioCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>audioCodecDescription</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::AudioCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString audioCodecDescription(QMediaFormat::AudioCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description for <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="audioCodecName">
<db:title>[static] QString QMediaFormat::audioCodecName(QMediaFormat::AudioCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>audioCodecName</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::AudioCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString audioCodecName(QMediaFormat::AudioCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string based name for <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="fileFormatDescription">
<db:title>[static] QString QMediaFormat::fileFormatDescription(QMediaFormat::FileFormat <db:emphasis>fileFormat</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileFormatDescription</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::FileFormat</db:type>
<db:parameter>fileFormat</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileFormatDescription(QMediaFormat::FileFormat fileFormat)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description for <db:code role="parameter">fileFormat</db:code>.</db:para>
</db:section>
<db:section xml:id="fileFormatName">
<db:title>[static] QString QMediaFormat::fileFormatName(QMediaFormat::FileFormat <db:emphasis>fileFormat</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileFormatName</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::FileFormat</db:type>
<db:parameter>fileFormat</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileFormatName(QMediaFormat::FileFormat fileFormat)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string based name for <db:code role="parameter">fileFormat</db:code>.</db:para>
</db:section>
<db:section xml:id="isSupported">
<db:title>bool QMediaFormat::isSupported(QMediaFormat::ConversionMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSupported</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::ConversionMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSupported(QMediaFormat::ConversionMode mode) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if Qt Multimedia can encode or decode this format, depending on <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="mimeType">
<db:title>QMimeType QMediaFormat::mimeType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMimeType</db:type>
<db:methodname>mimeType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMimeType mimeType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="https://en.wikipedia.org/wiki/Media_type#Mime.types">MIME type</db:link> for the file format used in this media format.</db:para>
</db:section>
<db:section xml:id="resolveForEncoding">
<db:title>void QMediaFormat::resolveForEncoding(QMediaFormat::ResolveFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resolveForEncoding</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::ResolveFlags</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resolveForEncoding(QMediaFormat::ResolveFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resolves the format, based on <db:code role="parameter">flags</db:code>, to a format that is supported by <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>.</db:para>
<db:para>This method tries to find the best possible match for unspecified settings. Settings that are not supported by the recorder will be modified to the closest match that is supported.</db:para>
<db:para>When resolving, priority is given in the following order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>File format</db:para>
</db:listitem>
<db:listitem>
<db:para>Video codec</db:para>
</db:listitem>
<db:listitem>
<db:para>Audio codec</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="setAudioCodec">
<db:title>void QMediaFormat::setAudioCodec(QMediaFormat::AudioCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAudioCodec</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::AudioCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioCodec</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAudioCodec(QMediaFormat::AudioCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the audio codec to <db:code role="parameter">codec</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediaformat.xml#audioCodec-prop">audioCodec</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#audioCodec">audioCodec</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaformat.xml#AudioCodec-enum">QMediaFormat::AudioCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoCodec">
<db:title>void QMediaFormat::setVideoCodec(QMediaFormat::VideoCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoCodec</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::VideoCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoCodec</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoCodec(QMediaFormat::VideoCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the video codec to <db:code role="parameter">codec</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediaformat.xml#videoCodec-prop">videoCodec</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#videoCodec">videoCodec</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedAudioCodecs">
<db:title>QList&lt;QMediaFormat::AudioCodec&gt; QMediaFormat::supportedAudioCodecs(QMediaFormat::ConversionMode <db:emphasis>m</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QMediaFormat::AudioCodec&gt;</db:type>
<db:methodname>supportedAudioCodecs</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::ConversionMode</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QMediaFormat::AudioCodec&gt; supportedAudioCodecs(QMediaFormat::ConversionMode m)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of audio codecs for the chosen file format and video codec (<db:code role="parameter">m</db:code>).</db:para>
<db:para>To get all supported audio codecs, run this query on a default constructed <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#ConversionMode-enum">QMediaFormat::ConversionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedFileFormats">
<db:title>QList&lt;QMediaFormat::FileFormat&gt; QMediaFormat::supportedFileFormats(QMediaFormat::ConversionMode <db:emphasis>m</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QMediaFormat::FileFormat&gt;</db:type>
<db:methodname>supportedFileFormats</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::ConversionMode</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QMediaFormat::FileFormat&gt; supportedFileFormats(QMediaFormat::ConversionMode m)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of file formats for the audio and video codec indicated by <db:code role="parameter">m</db:code>.</db:para>
<db:para>To get all supported file formats, run this query on a default constructed <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#ConversionMode-enum">QMediaFormat::ConversionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedVideoCodecs">
<db:title>QList&lt;QMediaFormat::VideoCodec&gt; QMediaFormat::supportedVideoCodecs(QMediaFormat::ConversionMode <db:emphasis>m</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;QMediaFormat::VideoCodec&gt;</db:type>
<db:methodname>supportedVideoCodecs</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::ConversionMode</db:type>
<db:parameter>m</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QMediaFormat::VideoCodec&gt; supportedVideoCodecs(QMediaFormat::ConversionMode m)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of video codecs for the chosen file format and audio codec (<db:code role="parameter">m</db:code>).</db:para>
<db:para>To get all supported video codecs, run this query on a default constructed MediaFormat.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#ConversionMode-enum">QMediaFormat::ConversionMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>void QMediaFormat::swap(QMediaFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QMediaFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QMediaFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the media format with <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="videoCodec">
<db:title>QMediaFormat::VideoCodec QMediaFormat::videoCodec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaFormat::VideoCodec</db:type>
<db:methodname>videoCodec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoCodec</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat::VideoCodec videoCodec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the video codec used in this format.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaformat.xml#videoCodec-prop">videoCodec</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaformat.xml#setVideoCodec">setVideoCodec</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaformat.xml#VideoCodec-enum">QMediaFormat::VideoCodec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoCodecDescription">
<db:title>[static] QString QMediaFormat::videoCodecDescription(QMediaFormat::VideoCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>videoCodecDescription</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::VideoCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString videoCodecDescription(QMediaFormat::VideoCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description for <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="videoCodecName">
<db:title>[static] QString QMediaFormat::videoCodecName(QMediaFormat::VideoCodec <db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>videoCodecName</db:methodname>
<db:methodparam>
<db:type>QMediaFormat::VideoCodec</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString videoCodecName(QMediaFormat::VideoCodec codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string based name for <db:code role="parameter">codec</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QMediaFormat::operator!=(const QMediaFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMediaFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMediaFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is not equal to the current media format, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMediaFormat &amp;QMediaFormat::operator=(const QMediaFormat &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMediaFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QMediaFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat &amp; operator=(const QMediaFormat &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies <db:code role="parameter">other</db:code> into this <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QMediaFormat &amp;QMediaFormat::operator=(QMediaFormat &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMediaFormat &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QMediaFormat &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaFormat &amp; operator=(QMediaFormat &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Moves <db:code role="parameter">other</db:code> into this <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> objects.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QMediaFormat::operator==(const QMediaFormat &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMediaFormat &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMediaFormat &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> is equal to the current media format, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
