<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Third-party Android Libraries</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to include third-party Android libraries in an application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This guide describes how to include a Java-based third-party library in your application package. There are many Java libraries which provide APIs that may be useful to your application. One example is the Google Play Services add-on provided in the Android SDK. We will use this library as an example in this guide, but the same approach may be taken to include other libraries, provided that they have been made to be included as library projects in an Android application.</db:para>
<db:section xml:id="prerequisites">
<db:title>Prerequisites</db:title>
<db:para>This guide assumes that the <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> tool is used for constructing the deployment package. When using Qt Creator for building and deploying, androiddeployqt is used behind the scenes, so this also applies to development with Qt Creator. Explaining how to access the Java APIs after they have been included in the application is not in the scope of this guide.</db:para>
</db:section>
<db:section xml:id="including-the-library-in-the-source">
<db:title>Including the Library in the Source</db:title>
<db:para>The very first thing we need to do is to copy the actual library project into the source of our project. We want the contents of the library project to be copied without modifications into the packaging directory, so we need to place it into the Android Package Source Directory. This can be any directory which is pointed to by the <db:link xlink:href="qmake-manual.xml">qmake</db:link> variable ANDROID_PACKAGE_SOURCE_DIR.</db:para>
<db:para>If you are using Qt Creator, you can quickly set up the directory structure by clicking on the <db:emphasis role="bold">Create AndroidManifest.xml</db:emphasis> button in the <db:emphasis role="bold">Deployment</db:emphasis> settings of your project. This will create an Android Package Source Directory and place the AndroidManifest.xml file inside it. Copy the library project directory into this directory.</db:para>
<db:para>For example, once it has been installed via the Android SDK Maintenance application, the Google Play Services library project is located under the path $ANDROID_SDK_ROOT/extras/google/google_play_services/libproject/google-play-services_lib. If the Android Package Source Directory of our project is $PROJECT_ROOT/android, then we can copy the google-play-services_lib directory in there, creating $PROJECT_ROOT/android/google-play-services_lib.</db:para>
</db:section>
<db:section xml:id="adding-the-library-to-the-project-dependencies">
<db:title>Adding the Library to the Project Dependencies</db:title>
<db:para>Once the library code has been copied into the project, we need to tell the Android build system about it. This is done in the project.properties file. Create a file called project.properties inside the Android Package Source Directory and add a line to it which assigns the relative path of the library project to the property android.library.reference.1. If you want to include multiple library projects, increment the counter at the end of the property name for each.</db:para>
<db:para>In our example, we would create $PROJECT_ROOT/android/project.properties and add the following contents:</db:para>
<db:programlisting language="cpp" role="bad">android.library.reference.1=google-play-services_lib/
</db:programlisting>
</db:section>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>And that's it: Provided that the path referenced in the project.properties file is located under the Android Package Source Directory, the deployment tool will copy it into the packaging directory and perform the necessary steps to include it in your APK or AAB. You can now add Java code to your application which accesses the APIs provided by the library project.</db:para>
</db:section>
</db:article>
