<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Third-party Android Libraries</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides instructions to include third-party Android libraries in an application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This guide describes how to include a Java-based third-party library in your application package. There are many Java libraries which provide APIs that may be useful to your application.</db:para>
<db:section xml:id="prerequisites">
<db:title>Prerequisites</db:title>
<db:para>This guide assumes that the <db:link xlink:href="deployment-android.xml#androiddeployqt">androiddeployqt</db:link> tool is used for constructing the deployment package. When using Qt Creator for building and deploying, androiddeployqt is used behind the scenes, so this also applies to development with Qt Creator. Explaining how to access the Java APIs after being included in the the project is not in the scope of this guide. For more information, see <db:link xlink:href="deployment-android.xml#customizing-the-package-templates">Customizing the Package Templates</db:link>.</db:para>
</db:section>
<db:section xml:id="including-a-library-to-an-android-project">
<db:title>Including a Library to an Android Project</db:title>
<db:para>The very first thing you need to do is to copy the library files into your project. The contents of the library have to be copied without modifications into the packaging directory, i.e. into the path set with <db:link xlink:href="qmake-manual.xml">qmake</db:link> variable <db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link>. For more information, see <db:link xlink:href="deployment-android.xml#android-libraries">Android Libraries</db:link>.</db:para>
<db:para>If you are using Qt Creator, you can quickly set up the packaging directory structure by selecting <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Create Templates</db:guilabel>. This creates a directory for your <db:link xlink:href="deployment-android.xml#customizing-the-package-templates">Android package customizations</db:link>. Copy the library directory into $ANDROID_PACKAGE_SOURCE_DIR/libs/.</db:para>
<db:section xml:id="adding-a-jar-or-aar-library">
<db:title>Adding a .jar or .aar Library</db:title>
<db:para>By default, Qt for Android uses can use .jar or .aar libraries that are found in the path $ANDROID_PACKAGE_SOURCE_DIR/libs/. Qt has the following rule in build.gradle file that is part of <db:link xlink:href="deployment-android.xml#gradle-files">the Gradle files</db:link> used by Android build:</db:para>
<db:programlisting language="cpp" role="bad">dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="adding-a-library-project">
<db:title>Adding a Library Project</db:title>
<db:para>Having a library called CustomLibrary, similar to the previous approach, copy the library project to your packaging directory $ANDROID_PACKAGE_SOURCE_DIR/libs/, then create a file settings.gradle with the following content:</db:para>
<db:programlisting language="cpp" role="bad">include ':libs:CustomLibrary'
</db:programlisting>
<db:para>Then, add the dependency to build.gradle file inside the dependencies block:</db:para>
<db:programlisting language="cpp" role="bad">dependencies {
    implementation project(&quot;:libs:CustomLibrary&quot;)
}
</db:programlisting>
<db:para>For more information on adding libraries to an Android project, see <db:link xlink:href="https://developer.android.com/studio/build/dependencies">Add build dependencies Android documentation</db:link>.</db:para>
</db:section>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>Once <db:link xlink:href="http://www.gradle.org">Gradle</db:link> settings and the library files are all properly configured, Qt for Android should be able to build your APK or AAB package with your custom library.</db:para>
</db:section>
</db:article>
