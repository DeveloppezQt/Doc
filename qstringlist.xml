<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QStringList Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringlist.xml">QStringList</db:link> class provides a list of strings.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringList is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> inherits from <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;. Like <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. It provides fast index-based access as well as fast insertions and removals. Passing string lists as value parameters is both fast and safe.</db:para>
<db:para>All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qstringlist.xml">QStringList</db:link>. For example, you can use isEmpty() to test whether the list is empty, and you can call functions like append(), prepend(), insert(), replace(), removeAll(), removeAt(), removeFirst(), removeLast(), and removeOne() to modify a <db:link xlink:href="qstringlist.xml">QStringList</db:link>. In addition, <db:link xlink:href="qstringlist.xml">QStringList</db:link> provides a few convenience functions that make handling lists of strings easier:</db:para>
<db:section xml:id="adding-strings">
<db:title>Adding strings</db:title>
<db:para>Strings can be added to a list using the <db:link xlink:href="">append()</db:link>, <db:link xlink:href="">operator+=()</db:link> and <db:link xlink:href="qstringlist.xml#operator-lt-lt">operator&lt;&lt;</db:link>() functions. For example:</db:para>
<db:programlisting language="cpp">    QStringList fonts;
    fonts &lt;&lt; &quot;Arial&quot; &lt;&lt; &quot;Helvetica&quot; &lt;&lt; &quot;Times&quot; &lt;&lt; &quot;Courier&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="iterating-over-the-strings">
<db:title>Iterating over the strings</db:title>
<db:para>To iterate over a list, you can either use index positions or <db:link xlink:href="qlist.xml">QList</db:link>'s Java-style and STL-style iterator types:</db:para>
<db:para>Indexing:</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &lt; fonts.size(); ++i)
         cout &lt;&lt; fonts.at(i).toLocal8Bit().constData() &lt;&lt; endl;
</db:programlisting>
<db:para>Java-style iterator:</db:para>
<db:programlisting language="cpp">    QStringListIterator javaStyleIterator(fonts);
    while (javaStyleIterator.hasNext())
         cout &lt;&lt; javaStyleIterator.next().toLocal8Bit().constData() &lt;&lt; endl;
</db:programlisting>
<db:para>STL-style iterator:</db:para>
<db:programlisting language="cpp">    QStringList::const_iterator constIterator;
    for (constIterator = fonts.constBegin(); constIterator != fonts.constEnd();
           ++constIterator)
        cout &lt;&lt; (*constIterator).toLocal8Bit().constData() &lt;&lt; endl;
</db:programlisting>
<db:para>The <db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link> class is simply a type definition for <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;. <db:link xlink:href="qstringlist.xml">QStringList</db:link> also provide the <db:link xlink:href="qstringlist.xml#QMutableStringListIterator-typedef">QMutableStringListIterator</db:link> class which is a type definition for <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="manipulating-the-strings">
<db:title>Manipulating the strings</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides several functions allowing you to manipulate the contents of a list. You can concatenate all the strings in a string list into a single string (with an optional separator) using the <db:link xlink:href="qstringlist.xml#join">join</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">    QString str = fonts.join(&quot;, &quot;);
     // str == &quot;Arial, Helvetica, Times, Courier&quot;
</db:programlisting>
<db:para>The argument to join can be a single character or a string.</db:para>
<db:para>To break up a string into a string list, use the <db:link xlink:href="qstring.xml#split">QString::split</db:link>() function:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list = str.split(&quot;,&quot;);
     // list: [&quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Times&quot;, &quot;Courier&quot;]
</db:programlisting>
<db:para>The argument to split can be a single character, a string, or a <db:link xlink:href="qregexp.xml">QRegExp</db:link>.</db:para>
<db:para>In addition, the <db:link xlink:href="qstringlist.xml#operator-2b">operator+</db:link>() function allows you to concatenate two string lists into one. To sort a string list, use the <db:link xlink:href="qstringlist.xml#sort">sort</db:link>() function.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> list also provides the <db:link xlink:href="qstringlist.xml#filter">filter</db:link>() function which lets you to extract a new list which contains only those strings which contain a particular substring (or match a particular regular expression):</db:para>
<db:programlisting language="cpp">    QStringList monospacedFonts = fonts.filter(QRegExp(&quot;Courier|Fixed&quot;));
</db:programlisting>
<db:para>The <db:link xlink:href="qstringlist.xml#contains">contains</db:link>() function tells you whether the list contains a given string, while the <db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>() function returns the index of the first occurrence of the given string. The <db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>() function on the other hand, returns the index of the last occurrence of the string.</db:para>
<db:para>Finally, the <db:link xlink:href="qstringlist.xml#replaceInStrings">replaceInStrings</db:link>() function calls <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>() on each string in the string list in turn. For example:</db:para>
<db:programlisting language="cpp">    QStringList files;
    files &lt;&lt; &quot;$QTDIR/src/moc/moc.y&quot;
          &lt;&lt; &quot;$QTDIR/src/moc/moc.l&quot;
          &lt;&lt; &quot;$QTDIR/include/qconfig.h&quot;;

    files.replaceInStrings(&quot;$QTDIR&quot;, &quot;/usr/lib/qt&quot;);
    // files: [ &quot;/usr/lib/qt/src/moc/moc.y&quot;, ...]
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringList">
<db:title>QStringList::QStringList()</db:title>
<db:para>Constructs an empty string list.</db:para>
</db:section>
<db:section xml:id="QStringList-1">
<db:title>QStringList::QStringList(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml">constant time</db:link>, because <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qstringlist.xml">QStringList</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">operator=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-2">
<db:title>[explicit] QStringList::QStringList(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a string list that contains the given string, <db:code role="parameter">str</db:code>. Longer lists are easily created like this:</db:para>
<db:programlisting language="cpp">    QStringList longerList = (QStringList() &lt;&lt; str1 &lt;&lt; str2 &lt;&lt; str3);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">append()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-4">
<db:title>[since 4.8] QStringList::QStringList(int <db:emphasis>args</db:emphasis>)</db:title>
<db:para>Construct a list from a std::initializer_list given by <db:code role="parameter">args</db:code>.</db:para>
<db:para>This constructor is only enabled if the compiler supports C++11 initializer lists.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="QStringList-3">
<db:title>QStringList::QStringList(const QStringList &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> string list.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml">constant time</db:link> because <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>, making the process of returning a <db:link xlink:href="qstringlist.xml">QStringList</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">operator=()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QStringList::contains(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns <db:code>true</db:code> if the list contains the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>. The search is case insensitive if <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseInsensitive</db:link>; the search is case sensitive by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">QString::contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter">
<db:title>QStringList QStringList::filter(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns a list of all the strings containing the substring <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;Bill Murray&quot; &lt;&lt; &quot;John Doe&quot; &lt;&lt; &quot;Bill Clinton&quot;;

    QStringList result;
    result = list.filter(&quot;Bill&quot;);
    // result: [&quot;Bill Murray&quot;, &quot;Bill Clinton&quot;]
</db:programlisting>
<db:para>This is equivalent to</db:para>
<db:programlisting language="cpp">    QStringList result;
    foreach (const QString &amp;str, list) {
        if (str.contains(&quot;Bill&quot;))
            result += str;
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter-1">
<db:title>QStringList QStringList::filter(const QRegExp &amp;<db:emphasis>rx</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the strings that match the regular expression <db:code role="parameter">rx</db:code>.</db:para>
</db:section>
<db:section xml:id="filter-2">
<db:title>[since 5.0] QStringList QStringList::filter(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the strings that match the regular expression <db:code role="parameter">re</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QStringList::indexOf(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:para>Returns the index position of the first exact match of <db:code role="parameter">rx</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>By default, this function is case sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qregexp.xml#exactMatch">QRegExp::exactMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>int QStringList::indexOf(const QString &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:para>Returns the index position of the first occurrence of <db:code role="parameter">value</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="">QList::indexOf()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>[since 4.5] int QStringList::indexOf(QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first exact match of <db:code role="parameter">rx</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>By default, this function is case sensitive.</db:para>
<db:para>If an item matched, the <db:code role="parameter">rx</db:code> regular expression will contain the matched objects (see <db:link xlink:href="qregexp.xml#matchedLength">QRegExp::matchedLength</db:link>, <db:link xlink:href="qregexp.xml#cap">QRegExp::cap</db:link>).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qregexp.xml#exactMatch">QRegExp::exactMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[since 5.0] int QStringList::indexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the first match of <db:code role="parameter">re</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join">
<db:title>QString QStringList::join(const QString &amp;<db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>Joins all the string list's strings into a single string with each element separated by the given <db:code role="parameter">separator</db:code> (which can be an empty string).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#split">QString::split</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join-1">
<db:title>[since 5.0] QString QStringList::join(QChar <db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#join">join</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>int QStringList::lastIndexOf(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">rx</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>By default, this function is case sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qregexp.xml#exactMatch">QRegExp::exactMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>int QStringList::lastIndexOf(const QString &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:para>Returns the index position of the last occurrence of <db:code role="parameter">value</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>By default, this function is case sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="">QList::lastIndexOf()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>[since 4.5] int QStringList::lastIndexOf(QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">rx</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>By default, this function is case sensitive.</db:para>
<db:para>If an item matched, the <db:code role="parameter">rx</db:code> regular expression will contain the matched objects (see <db:link xlink:href="qregexp.xml#matchedLength">QRegExp::matchedLength</db:link>, <db:link xlink:href="qregexp.xml#cap">QRegExp::cap</db:link>).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qregexp.xml#exactMatch">QRegExp::exactMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>[since 5.0] int QStringList::lastIndexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">re</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDuplicates">
<db:title>[since 4.5] int QStringList::removeDuplicates()</db:title>
<db:para>This function removes duplicate entries from a list. The entries do not have to be sorted. They will retain their original order.</db:para>
<db:para>Returns the number of removed entries.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="replaceInStrings">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QString &amp;<db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Returns a string list where every string has had the <db:code role="parameter">before</db:code> text replaced with the <db:code role="parameter">after</db:code> text wherever the <db:code role="parameter">before</db:code> text is found. The <db:code role="parameter">before</db:code> text is matched case-sensitively or not depending on the <db:code role="parameter">cs</db:code> flag.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;beta&quot; &lt;&lt; &quot;gamma&quot; &lt;&lt; &quot;epsilon&quot;;
    list.replaceInStrings(&quot;a&quot;, &quot;o&quot;);
    // list == [&quot;olpho&quot;, &quot;beto&quot;, &quot;gommo&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#replace">QString::replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceInStrings-1">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Replaces every occurrence of the regexp <db:code role="parameter">rx</db:code>, in each of the string lists's strings, with <db:code role="parameter">after</db:code>. Returns a reference to the string list.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;beta&quot; &lt;&lt; &quot;gamma&quot; &lt;&lt; &quot;epsilon&quot;;
    list.replaceInStrings(QRegExp(&quot;^a&quot;), &quot;o&quot;);
    // list == [&quot;olpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:para>For regular expressions that contain <db:link xlink:href="qregexp.xml#capturing-parentheses">capturing parentheses</db:link>, occurrences of <db:emphasis role="bold">\1</db:emphasis>, <db:emphasis role="bold">\2</db:emphasis>, ..., in <db:code role="parameter">after</db:code> are replaced with <db:code role="parameter">rx</db:code>.cap(1), <db:code role="parameter">rx</db:code>.cap(2), ...</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;Bill Clinton&quot; &lt;&lt; &quot;Murray, Bill&quot;;
    list.replaceInStrings(QRegExp(&quot;^(.*), (.*)$&quot;), &quot;\\2 \\1&quot;);
    // list == [&quot;Bill Clinton&quot;, &quot;Bill Murray&quot;]
</db:programlisting>
</db:section>
<db:section xml:id="replaceInStrings-2">
<db:title>[since 5.0] QStringList &amp;QStringList::replaceInStrings(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Replaces every occurrence of the regular expression <db:code role="parameter">re</db:code>, in each of the string lists's strings, with <db:code role="parameter">after</db:code>. Returns a reference to the string list.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;beta&quot; &lt;&lt; &quot;gamma&quot; &lt;&lt; &quot;epsilon&quot;;
    list.replaceInStrings(QRegularExpression(&quot;^a&quot;), &quot;o&quot;);
    // list == [&quot;olpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:para>For regular expressions that contain capturing groups, occurrences of <db:emphasis role="bold">\1</db:emphasis>, <db:emphasis role="bold">\2</db:emphasis>, ..., in <db:code role="parameter">after</db:code> are replaced with the string captured by the corresponding capturing group.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;Bill Clinton&quot; &lt;&lt; &quot;Murray, Bill&quot;;
    list.replaceInStrings(QRegularExpression(&quot;^(.*), (.*)$&quot;), &quot;\\2 \\1&quot;);
    // list == [&quot;Bill Clinton&quot;, &quot;Bill Murray&quot;]
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>void QStringList::sort(Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Sorts the list of strings in ascending order. If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Sorting is performed using the STL's std::sort() algorithm, which averages <db:link xlink:href="containers.xml">linear-logarithmic time</db:link>, i.e. O(<db:emphasis>n</db:emphasis> log <db:emphasis>n</db:emphasis>).</db:para>
<db:para>If you want to sort your strings in an arbitrary order, consider using the <db:link xlink:href="qmap.xml">QMap</db:link> class. For example, you could use a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstring.xml">QString</db:link>&gt; to create a case-insensitive ordering (e.g. with the keys being lower-case versions of the strings, and the values being the strings), or a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;int, <db:link xlink:href="qstring.xml">QString</db:link>&gt; to sort the strings by some integer index.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QStringList QStringList::operator+(const QStringList &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a string list that is the concatenation of this string list with the <db:code role="parameter">other</db:code> string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">append()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Appends the given string, <db:code role="parameter">str</db:code>, to this string list and returns a reference to the string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">append()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QStringList &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:code role="parameter">other</db:code> string list to the string list and returns a reference to the latter string list.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QMutableStringListIterator-typedef">
<db:title>QMutableStringListIterator</db:title>
<db:para>The <db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link> type definition provides a Java-style non-const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style non-const iterator is simply a type definition for <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="">QStringList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringListIterator-typedef">
<db:title>QStringListIterator</db:title>
<db:para>The QStringListIterator type definition provides a Java-style const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style const iterator is simply a type definition for <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QMutableStringListIterator-typedef">QMutableStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="">QStringList::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QStringList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Writes the given string <db:code role="parameter">list</db:code> to the specified <db:code role="parameter">out</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-19">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QStringList &amp;<db:emphasis>list</db:emphasis>)</db:title>
<db:para>Reads a string list from the given <db:code role="parameter">in</db:code> stream into the specified <db:code role="parameter">list</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
