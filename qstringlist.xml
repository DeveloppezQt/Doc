<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringList Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringlist.xml">QStringList</db:link> class provides a list of strings.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlist.xml" xlink:role="class">QList</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringList is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member><db:link xlink:href="string-processing.xml">Classes for string data</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> inherits from <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;. Like <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. It provides fast index-based access as well as fast insertions and removals. Passing string lists as value parameters is both fast and safe.</db:para>
<db:para>All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qstringlist.xml">QStringList</db:link>. For example, you can use <db:link xlink:href="qlist.xml#isEmpty">isEmpty</db:link>() to test whether the list is empty, and you can call functions like <db:link xlink:href="qlist.xml#append">append</db:link>(), <db:link xlink:href="qlist.xml#prepend">prepend</db:link>(), <db:link xlink:href="qlist.xml#insert">insert</db:link>(), <db:link xlink:href="qlist.xml#replace">replace</db:link>(), <db:link xlink:href="qlist.xml#removeAll">removeAll</db:link>(), <db:link xlink:href="qlist.xml#removeAt">removeAt</db:link>(), <db:link xlink:href="qlist.xml#removeFirst">removeFirst</db:link>(), <db:link xlink:href="qlist.xml#removeLast">removeLast</db:link>(), and <db:link xlink:href="qlist.xml#removeOne">removeOne</db:link>() to modify a <db:link xlink:href="qstringlist.xml">QStringList</db:link>. In addition, <db:link xlink:href="qstringlist.xml">QStringList</db:link> provides a few convenience functions that make handling lists of strings easier.</db:para>
<db:section xml:id="initializing">
<db:title>Initializing</db:title>
<db:para>The default constructor creates an empty list. You can use the initializer-list constructor to create a list with elements:</db:para>
<db:programlisting language="cpp">    QStringList fonts = { &quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Times&quot; };
</db:programlisting>
</db:section>
<db:section xml:id="adding-strings">
<db:title>Adding Strings</db:title>
<db:para>Strings can be added to a list using the <db:link xlink:href="qlist.xml#insert">insert</db:link>(), <db:link xlink:href="qlist.xml#append">append</db:link>(), <db:link xlink:href="qlist.xml#operator-2b-eq">operator+=</db:link>() and <db:link xlink:href="qstringlist.xml#operator-lt-lt">operator&lt;&lt;</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qstringlist.xml#operator-lt-lt">operator&lt;&lt;</db:link>() can be used to conveniently add multiple elements to a list:</db:para>
<db:programlisting language="cpp">    fonts &lt;&lt; &quot;Courier&quot; &lt;&lt; &quot;Verdana&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="iterating-over-the-strings">
<db:title>Iterating Over the Strings</db:title>
<db:para>See <db:link xlink:href="containers.xml#iterating-over-containers">Iterating over Containers</db:link>.</db:para>
</db:section>
<db:section xml:id="manipulating-the-strings">
<db:title>Manipulating the Strings</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides several functions allowing you to manipulate the contents of a list. You can concatenate all the strings in a string list into a single string (with an optional separator) using the <db:link xlink:href="qstringlist.xml#join">join</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">    QString str = fonts.join(&quot;, &quot;);
     // str == &quot;Arial, Helvetica, Times, Courier&quot;
</db:programlisting>
<db:para>The argument to join can be a single character or a string.</db:para>
<db:para>To break up a string into a string list, use the <db:link xlink:href="qstring.xml#split">QString::split</db:link>() function:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list = str.split(',');
     // list: [&quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Times&quot;, &quot;Courier&quot;]
</db:programlisting>
<db:para>The argument to split can be a single character, a string or a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link>.</db:para>
<db:para>In addition, the <db:link xlink:href="qstringlist.xml#operator-2b">operator+</db:link>() function allows you to concatenate two string lists into one. To sort a string list, use the <db:link xlink:href="qstringlist.xml#sort">sort</db:link>() function.</db:para>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> list also provides the <db:link xlink:href="qstringlist.xml#filter">filter</db:link>() function which lets you to extract a new list which contains only those strings which contain a particular substring (or match a particular regular expression):</db:para>
<db:programlisting language="cpp">    QStringList monospacedFonts = fonts.filter(QRegularExpression(&quot;Courier|Fixed&quot;));
</db:programlisting>
<db:para>The <db:link xlink:href="qstringlist.xml#contains">contains</db:link>() function tells you whether the list contains a given string, while the <db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>() function returns the index of the first occurrence of the given string. The <db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>() function on the other hand, returns the index of the last occurrence of the string.</db:para>
<db:para>Finally, the <db:link xlink:href="qstringlist.xml#replaceInStrings">replaceInStrings</db:link>() function calls <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>() on each string in the string list in turn. For example:</db:para>
<db:programlisting language="cpp">    QStringList files;
    files &lt;&lt; &quot;$QTDIR/src/moc/moc.y&quot;
          &lt;&lt; &quot;$QTDIR/src/moc/moc.l&quot;
          &lt;&lt; &quot;$QTDIR/include/qconfig.h&quot;;

    files.replaceInStrings(&quot;$QTDIR&quot;, &quot;/usr/lib/qt&quot;);
    // files: [ &quot;/usr/lib/qt/src/moc/moc.y&quot;, ...]
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="indexOf">
<db:title>[noexcept] qsizetype QStringList::indexOf(QLatin1StringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="indexOf-1">[noexcept] qsizetype QStringList::indexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="indexOf-2">[noexcept] qsizetype QStringList::indexOf(const QString &amp;<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the first match of <db:code role="parameter">str</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:note>
<db:para>The <db:code role="parameter">cs</db:code> parameter was added in Qt 6.7, i.e. these methods now overload the methods inherited from the base class. Prior to that these methods only had two parameters. This change is source compatible and existing code should continue to work.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>[noexcept] qsizetype QStringList::lastIndexOf(QLatin1StringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-1">[noexcept] qsizetype QStringList::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="lastIndexOf-2">[noexcept] qsizetype QStringList::lastIndexOf(const QString &amp;<db:emphasis>str</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:bridgehead>
<db:para>Returns the index position of the last match of <db:code role="parameter">str</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:note>
<db:para>The <db:code role="parameter">cs</db:code> parameter was added in Qt 6.7, i.e. these methods now overload the methods inherited from the base class. Prior to that these methods only had two parameters. This change is source compatible and existing code should continue to work.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList">
<db:title>QStringList::QStringList(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml#constant-time">constant time</db:link>, because <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qstringlist.xml">QStringList</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml#linear-time">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-1">
<db:title>QStringList::QStringList(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Constructs a string list that contains the given string, <db:code role="parameter">str</db:code>. Longer lists are easily created like this:</db:para>
<db:programlisting language="cpp">    QStringList longerList = (QStringList() &lt;&lt; str1 &lt;&lt; str2 &lt;&lt; str3);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-2">
<db:title>QStringList::QStringList(QList&lt;QString&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Move-constructs from <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
<db:para>After a successful construction, <db:code role="parameter">other</db:code> will be empty.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[noexcept] bool QStringList::contains(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns <db:code>true</db:code> if the list contains the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">QString::contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>[noexcept] bool QStringList::contains(QLatin1StringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the list contains the Latin-1 string viewed by <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#contains">QString::contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-2">
<db:title>[noexcept] bool QStringList::contains(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the list contains the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>[since 6.9] QStringList QStringList::filter(const QLatin1StringMatcher &amp;<db:emphasis>matcher</db:emphasis>) const</db:title>
<db:para>Returns a list of all the strings matched by <db:code role="parameter">matcher</db:code> (i.e. for which <db:code>matcher.indexIn()</db:code> returns an index &gt;= 0).</db:para>
<db:para>Using <db:link xlink:href="qlatin1stringmatcher.xml">QLatin1StringMatcher</db:link> may be faster when searching in large lists and/or in lists with long strings (the best way to find out is benchmarking).</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList veryLargeList;
    QLatin1StringMatcher matcher(&quot;Street&quot;_L1, Qt::CaseInsensitive);
    QStringList filtered = veryLargeList.filter(matcher);
</db:programlisting>
<db:para>This function was introduced in Qt 6.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#filter-3">filter</db:link>(const QStringMatcher &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter-1">
<db:title>QStringList QStringList::filter(const QString &amp;<db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>Returns a list of all the strings containing the substring <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;Bill Murray&quot; &lt;&lt; &quot;John Doe&quot; &lt;&lt; &quot;Bill Clinton&quot;;

    QStringList result;
    result = list.filter(&quot;Bill&quot;);
    // result: [&quot;Bill Murray&quot;, &quot;Bill Clinton&quot;]
</db:programlisting>
<db:para>This is equivalent to</db:para>
<db:programlisting language="cpp">    QStringList result;
    for (const auto &amp;str : std::as_const(list)) {
        if (str.contains(&quot;Bill&quot;))
            result += str;
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter-2">
<db:title>QStringList QStringList::filter(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the strings that match the regular expression <db:code role="parameter">re</db:code>.</db:para>
</db:section>
<db:section xml:id="filter-3">
<db:title>[since 6.7] QStringList QStringList::filter(const QStringMatcher &amp;<db:emphasis>matcher</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the strings matched by <db:code role="parameter">matcher</db:code> (i.e. for which <db:code>matcher.indexIn()</db:code> returns an index &gt;= 0).</db:para>
<db:para>Using a <db:link xlink:href="qstringmatcher.xml">QStringMatcher</db:link> may be faster when searching in large lists and/or in lists with long strings (the best way to find out is benchmarking).</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList veryLongList;
    QStringMatcher matcher(u&quot;Straße&quot;, Qt::CaseInsensitive);
    QStringList filtered = veryLongList.filter(matcher);
</db:programlisting>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#filter">filter</db:link>(const QLatin1StringMatcher &amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter-4">
<db:title>[since 6.7] QStringList QStringList::filter(QLatin1StringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="filter-5">
<db:title>QStringList QStringList::filter(QStringView <db:emphasis>str</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>qsizetype QStringList::indexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the first exact match of <db:code role="parameter">re</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join">
<db:title>QString QStringList::join(const QString &amp;<db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>Joins all the string list's strings into a single string with each element separated by the given <db:code role="parameter">separator</db:code> (which can be an empty string).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#split">QString::split</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join-1">
<db:title>QString QStringList::join(QChar <db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#join">join</db:link>().</db:para>
</db:section>
<db:section xml:id="join-2">
<db:title>QString QStringList::join(QLatin1StringView <db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#join">join</db:link>().</db:para>
</db:section>
<db:section xml:id="join-3">
<db:title>QString QStringList::join(QStringView <db:emphasis>separator</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>qsizetype QStringList::lastIndexOf(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, qsizetype <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">re</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDuplicates">
<db:title>qsizetype QStringList::removeDuplicates()</db:title>
<db:para>This function removes duplicate entries from a list. The entries do not have to be sorted. They will retain their original order.</db:para>
<db:para>Returns the number of removed entries.</db:para>
</db:section>
<db:section xml:id="replaceInStrings">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QString &amp;<db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Returns a string list where every string has had the <db:code role="parameter">before</db:code> text replaced with the <db:code role="parameter">after</db:code> text wherever the <db:code role="parameter">before</db:code> text is found.</db:para>
<db:note>
<db:para>If you use an empty <db:code role="parameter">before</db:code> argument, the <db:code role="parameter">after</db:code> argument will be inserted <db:emphasis>before and after</db:emphasis> each character of the string.</db:para>
</db:note>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;beta&quot; &lt;&lt; &quot;gamma&quot; &lt;&lt; &quot;epsilon&quot;;
    list.replaceInStrings(&quot;a&quot;, &quot;o&quot;);
    // list == [&quot;olpho&quot;, &quot;beto&quot;, &quot;gommo&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#replace">QString::replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceInStrings-1">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Replaces every occurrence of the regular expression <db:code role="parameter">re</db:code>, in each of the string lists's strings, with <db:code role="parameter">after</db:code>. Returns a reference to the string list.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;alpha&quot; &lt;&lt; &quot;beta&quot; &lt;&lt; &quot;gamma&quot; &lt;&lt; &quot;epsilon&quot;;
    list.replaceInStrings(QRegularExpression(&quot;^a&quot;), &quot;o&quot;);
    // list == [&quot;olpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:para>For regular expressions that contain capturing groups, occurrences of <db:emphasis role="bold">\1</db:emphasis>, <db:emphasis role="bold">\2</db:emphasis>, ..., in <db:code role="parameter">after</db:code> are replaced with the string captured by the corresponding capturing group.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &lt;&lt; &quot;Bill Clinton&quot; &lt;&lt; &quot;Murray, Bill&quot;;
    list.replaceInStrings(QRegularExpression(&quot;^(.*), (.*)$&quot;), &quot;\\2 \\1&quot;);
    // list == [&quot;Bill Clinton&quot;, &quot;Bill Murray&quot;]
</db:programlisting>
</db:section>
<db:section xml:id="replaceInStrings-2">
<db:title>QStringList &amp;QStringList::replaceInStrings(QStringView <db:emphasis>before</db:emphasis>, QStringView <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="replaceInStrings-3">
<db:title>QStringList &amp;QStringList::replaceInStrings(QStringView <db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="replaceInStrings-4">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QString &amp;<db:emphasis>before</db:emphasis>, QStringView <db:emphasis>after</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="sort">
<db:title>void QStringList::sort(Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:title>
<db:para>Sorts the list of strings in ascending order.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Sorting is performed using the STL's std::sort() algorithm, which averages <db:link xlink:href="containers.xml#linear-logarithmic-time">linear-logarithmic time</db:link>, i.e. O(<db:emphasis>n</db:emphasis> log <db:emphasis>n</db:emphasis>).</db:para>
<db:para>If you want to sort your strings in an arbitrary order, consider using the <db:link xlink:href="qmap.xml">QMap</db:link> class. For example, you could use a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstring.xml">QString</db:link>&gt; to create a case-insensitive ordering (e.g. with the keys being lower-case versions of the strings, and the values being the strings), or a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;int, <db:link xlink:href="qstring.xml">QString</db:link>&gt; to sort the strings by some integer index.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QStringList QStringList::operator+(const QStringList &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns a string list that is the concatenation of this string list with the <db:code role="parameter">other</db:code> string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:para>Appends the given string, <db:code role="parameter">str</db:code>, to this string list and returns a reference to the string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#append">append</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:code role="parameter">other</db:code> string list to the string list and returns a reference to the latter string list.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QStringList &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:code role="parameter">other</db:code> string list to the string list and returns a reference to the latter string list.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QStringList &amp;QStringList::operator=(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy assignment operator from <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;. Assigns the <db:code role="parameter">other</db:code> list of strings to this string list.</db:para>
<db:para>After the operation, <db:code role="parameter">other</db:code> and <db:code>*this</db:code> will be equal.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QStringList &amp;QStringList::operator=(QList&lt;QString&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Move assignment operator from <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;. Moves the <db:code role="parameter">other</db:code> list of strings to this string list.</db:para>
<db:para>After the operation, <db:code role="parameter">other</db:code> will be empty.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QMutableStringListIterator-typedef">
<db:title>[alias] QMutableStringListIterator</db:title>
<db:para>The <db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link> type definition provides a Java-style non-const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style non-const iterator is simply a type definition for <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlist-iterator.xml">QStringList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringListIterator-typedef">
<db:title>[alias] QStringListIterator</db:title>
<db:para>The QStringListIterator type definition provides a Java-style const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="java-style-iterators.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style const iterator is simply a type definition for <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QMutableStringListIterator-typedef">QMutableStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="qlist-const-iterator.xml">QStringList::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
