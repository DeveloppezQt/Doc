<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringList Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringlist.xml">QStringList</db:link> class provides a list of strings.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringList</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringList is part of <db:simplelist><db:member>tools</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> inherits from <db:link xlink:href="qlist.xml">QList</db:link>&lt;QString&gt;. Like <db:link xlink:href="qlist.xml">QList</db:link>, <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. It provides fast index-based access as well as fast insertions and removals. Passing string lists as value parameters is both fast and safe.</db:para>
<db:para>All of <db:link xlink:href="qlist.xml">QList</db:link>'s functionality also applies to <db:link xlink:href="qstringlist.xml">QStringList</db:link>. For example, you can use <db:link xlink:href="qml-geoshape.xml#isempty">isEmpty()</db:link> to test whether the list is empty, and you can call functions like append(), prepend(), insert(), replace(), removeAll(), removeAt(), removeFirst(), removeLast(), and removeOne() to modify a <db:link xlink:href="qstringlist.xml">QStringList</db:link>. In addition, <db:link xlink:href="qstringlist.xml">QStringList</db:link> provides a few convenience functions that make handling lists of strings easier:</db:para>
<db:section xml:id="initializing">
<db:title>Initializing</db:title>
<db:para>The default constructor creates an empty list. You can use the initializer-list constructor to create a list with elements:</db:para>
<db:programlisting language="cpp">    QStringList fonts = { &quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Times&quot; };
</db:programlisting>
</db:section>
<db:section xml:id="adding-strings">
<db:title>Adding Strings</db:title>
<db:para>Strings can be added to a list using the <db:link xlink:href="qlist.xml#insert">insert</db:link>() <db:link xlink:href="qlist.xml#append">append</db:link>(), <db:link xlink:href="qlist.xml#operator-2b-eq">operator+=</db:link>() and <db:link xlink:href="qstringlist.xml#operator-lt-lt">operator&lt;&lt;</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qstringlist.xml#operator-lt-lt">operator&lt;&lt;</db:link>() can be used to conveniently add multiple elements to a list:</db:para>
<db:programlisting language="cpp">    fonts &amp;lt;&amp;lt; &quot;Courier&quot; &amp;lt;&amp;lt; &quot;Verdana&quot;;
</db:programlisting>
</db:section>
<db:section xml:id="iterating-over-the-strings">
<db:title>Iterating Over the Strings</db:title>
<db:para>To iterate over a list, you can either use index positions or <db:link xlink:href="qlist.xml">QList</db:link>'s Java-style and STL-style iterator types:</db:para>
<db:para>Indexing:</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &amp;lt; fonts.size(); ++i)
         cout &amp;lt;&amp;lt; fonts.at(i).toLocal8Bit().constData() &amp;lt;&amp;lt; endl;
</db:programlisting>
<db:para>Java-style iterator:</db:para>
<db:programlisting language="cpp">    QStringListIterator javaStyleIterator(fonts);
    while (javaStyleIterator.hasNext())
         cout &amp;lt;&amp;lt; javaStyleIterator.next().toLocal8Bit().constData() &amp;lt;&amp;lt; endl;
</db:programlisting>
<db:para>STL-style iterator:</db:para>
<db:programlisting language="cpp">    QStringList::const_iterator constIterator;
    for (constIterator = fonts.constBegin(); constIterator != fonts.constEnd();
           ++constIterator)
        cout &amp;lt;&amp;lt; (*constIterator).toLocal8Bit().constData() &amp;lt;&amp;lt; endl;
</db:programlisting>
<db:para>The <db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link> class is simply a type definition for QListIterator&lt;QString&gt;. <db:link xlink:href="qstringlist.xml">QStringList</db:link> also provide the <db:link xlink:href="qstringlist.xml#QMutableStringListIterator-typedef">QMutableStringListIterator</db:link> class which is a type definition for QMutableListIterator&lt;QString&gt;.</db:para>
</db:section>
<db:section xml:id="manipulating-the-strings">
<db:title>Manipulating the Strings</db:title>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides several functions allowing you to manipulate the contents of a list. You can concatenate all the strings in a string list into a single string (with an optional separator) using the <db:link xlink:href="qstringlist.xml#join">join</db:link>() function. For example:</db:para>
<db:programlisting language="cpp">    QString str = fonts.join(&quot;, &quot;);
     // str == &quot;Arial, Helvetica, Times, Courier&quot;
</db:programlisting>
<db:para>The argument to join can be a single character or a string.</db:para>
<db:para>To break up a string into a string list, use the QString::split() function:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list = str.split(',');
     // list: [&quot;Arial&quot;, &quot;Helvetica&quot;, &quot;Times&quot;, &quot;Courier&quot;]
</db:programlisting>
<db:para>The argument to split can be a single character, a string, a QRegularExpression or a (deprecated) QRegExp.</db:para>
<db:para>In addition, the <db:link xlink:href="qstringlist.xml#operator-2b">operator+</db:link>() function allows you to concatenate two string lists into one. To sort a string list, use the <db:link xlink:href="qstringlist.xml#sort">sort</db:link>() function.</db:para>
<db:para>QString list also provides the <db:link xlink:href="qstringlist.xml#filter">filter</db:link>() function which lets you to extract a new list which contains only those strings which contain a particular substring (or match a particular regular expression):</db:para>
<db:programlisting language="cpp">    QStringList monospacedFonts = fonts.filter(QRegularExpression(&quot;Courier|Fixed&quot;));
</db:programlisting>
<db:para>The <db:link xlink:href="qstringlist.xml#contains">contains</db:link>() function tells you whether the list contains a given string, while the <db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>() function returns the index of the first occurrence of the given string. The <db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>() function on the other hand, returns the index of the last occurrence of the string.</db:para>
<db:para>Finally, the <db:link xlink:href="qstringlist.xml#replaceInStrings">replaceInStrings</db:link>() function calls QString::replace() on each string in the string list in turn. For example:</db:para>
<db:programlisting language="cpp">    QStringList files;
    files &amp;lt;&amp;lt; &quot;$QTDIR/src/moc/moc.y&quot;
          &amp;lt;&amp;lt; &quot;$QTDIR/src/moc/moc.l&quot;
          &amp;lt;&amp;lt; &quot;$QTDIR/include/qconfig.h&quot;;

    files.replaceInStrings(&quot;$QTDIR&quot;, &quot;/usr/lib/qt&quot;);
    // files: [ &quot;/usr/lib/qt/src/moc/moc.y&quot;, ...]
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring-proxy.xml">QString</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringList">
<db:title>QStringList::QStringList()</db:title>
<db:constructorsynopsis>
<db:methodname>QStringList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty string list.</db:para>
</db:section>
<db:section xml:id="QStringList-1">
<db:title>[default] QStringList::QStringList(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringList</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList(const QString &amp;str) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a string list that contains the given string, <db:code role="parameter">str</db:code>. Longer lists are easily created like this:</db:para>
<db:programlisting language="cpp">    QStringList longerList = (QStringList() &amp;lt;&amp;lt; str1 &amp;lt;&amp;lt; str2 &amp;lt;&amp;lt; str3);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>append()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-2">
<db:title>[default] QStringList::QStringList(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringList</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QString&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList(const QList&lt;QString&gt; &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para>This operation takes <db:link xlink:href="containers.xml#constant-time">constant time</db:link>, because <db:link xlink:href="qstringlist.xml">QStringList</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This makes returning a <db:link xlink:href="qstringlist.xml">QStringList</db:link> from a function very fast. If a shared instance is modified, it will be copied (copy-on-write), and that takes <db:link xlink:href="containers.xml#linear-time">linear time</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringList-3">
<db:title>[default, since 5.4] QStringList::QStringList(QList&lt;QString&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringList</db:methodname>
<db:methodparam>
<db:type>QList&lt;QString&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList(QList&lt;QString&gt; &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Move-constructs from <db:link xlink:href="qlist.xml">QList</db:link>&lt;QString&gt;.</db:para>
<db:para>After a successful construction, <db:code role="parameter">other</db:code> will be empty.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="QStringList-4">
<db:title>[default, since 4.8] QStringList::QStringList(std::initializer_list&lt;QString&gt; <db:emphasis>args</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QStringList</db:methodname>
<db:methodparam>
<db:type>std::initializer_list&lt;QString&gt;</db:type>
<db:parameter>args</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList(std::initializer_list&lt;QString&gt; args) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a list from a std::initializer_list given by <db:code role="parameter">args</db:code>.</db:para>
<db:para>This constructor is only enabled if the compiler supports C++11 initializer lists.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[since 5.10] bool QStringList::contains(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>cs</db:emphasis> = ...) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>...</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(QLatin1String str, int cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the list contains the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>. The search is case insensitive if <db:code role="parameter">cs</db:code> is Qt::CaseInsensitive; the search is case sensitive by default.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="">QString::contains()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains-1">
<db:title>[since 5.12] bool QStringList::contains(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>cs</db:emphasis> = ...) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>...</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(QStringView str, int cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the list contains the string <db:code role="parameter">str</db:code>; otherwise returns <db:code>false</db:code>. The search is case insensitive if <db:code role="parameter">cs</db:code> is Qt::CaseInsensitive; the search is case sensitive by default.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>QStringList QStringList::filter(const QString &amp;<db:emphasis>str</db:emphasis>, int <db:emphasis>cs</db:emphasis> = ...) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>filter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>...</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList filter(const QString &amp;str, int cs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the strings containing the substring <db:code role="parameter">str</db:code>.</db:para>
<db:para>If <db:code role="parameter">cs</db:code> is <db:link xlink:href="">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &amp;lt;&amp;lt; &quot;Bill Murray&quot; &amp;lt;&amp;lt; &quot;John Doe&quot; &amp;lt;&amp;lt; &quot;Bill Clinton&quot;;

    QStringList result;
    result = list.filter(&quot;Bill&quot;);
    // result: [&quot;Bill Murray&quot;, &quot;Bill Clinton&quot;]
</db:programlisting>
<db:para>This is equivalent to</db:para>
<db:programlisting language="cpp">    QStringList result;
    foreach (const QString &amp;amp;str, list) {
        if (str.contains(&quot;Bill&quot;))
            result += str;
    }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filter-1">
<db:title>QStringList QStringList::filter(const QRegExp &amp;<db:emphasis>rx</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>filter</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList filter(const QRegExp &amp;rx) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a list of all the strings that match the regular expression <db:code role="parameter">rx</db:code>.</db:para>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QStringList::indexOf(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(const QRegExp &amp;rx, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the first exact match of <db:code role="parameter">rx</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="">QRegExp::exactMatch()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-1">
<db:title>[since 5.13] int QStringList::indexOf(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(QStringView str, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the first occurrence of <db:code role="parameter">str</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-2">
<db:title>[since 5.13] int QStringList::indexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(QLatin1String str, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the first occurrence of <db:code role="parameter">str</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf-3">
<db:title>[since 4.5] int QStringList::indexOf(QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>indexOf</db:methodname>
<db:methodparam>
<db:type>QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int indexOf(QRegExp &amp;rx, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>().</db:para>
<db:para>Returns the index position of the first exact match of <db:code role="parameter">rx</db:code> in the list, searching forward from index position <db:code role="parameter">from</db:code>. Returns -1 if no item matched.</db:para>
<db:para>If an item matched, the <db:code role="parameter">rx</db:code> regular expression will contain the matched objects (see QRegExp::matchedLength, QRegExp::cap).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="">QRegExp::exactMatch()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join">
<db:title>QString QStringList::join(const QString &amp;<db:emphasis>separator</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>join</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>separator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString join(const QString &amp;separator) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Joins all the string list's strings into a single string with each element separated by the given <db:code role="parameter">separator</db:code> (which can be an empty string).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::split()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="join-1">
<db:title>[since 5.8] QString QStringList::join(QLatin1String <db:emphasis>separator</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>join</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>separator</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString join(QLatin1String separator) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#join">join</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="lastIndexOf">
<db:title>int QStringList::lastIndexOf(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int lastIndexOf(const QRegExp &amp;rx, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">rx</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="">QRegExp::exactMatch()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-1">
<db:title>[since 5.13] int QStringList::lastIndexOf(QStringView <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QStringView</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int lastIndexOf(QStringView str, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the last occurrence of <db:code role="parameter">str</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-2">
<db:title>[since 5.13] int QStringList::lastIndexOf(QLatin1String <db:emphasis>str</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">int lastIndexOf(QLatin1String str, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the index position of the last occurrence of <db:code role="parameter">str</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>This function was introduced in Qt 5.13.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastIndexOf-3">
<db:title>[since 4.5] int QStringList::lastIndexOf(QRegExp &amp;<db:emphasis>rx</db:emphasis>, int <db:emphasis>from</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>lastIndexOf</db:methodname>
<db:methodparam>
<db:type>QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>from</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">int lastIndexOf(QRegExp &amp;rx, int from) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qstringlist.xml#lastIndexOf">lastIndexOf</db:link>().</db:para>
<db:para>Returns the index position of the last exact match of <db:code role="parameter">rx</db:code> in the list, searching backward from index position <db:code role="parameter">from</db:code>. If <db:code role="parameter">from</db:code> is -1 (the default), the search starts at the last item. Returns -1 if no item matched.</db:para>
<db:para>If an item matched, the <db:code role="parameter">rx</db:code> regular expression will contain the matched objects (see QRegExp::matchedLength, QRegExp::cap).</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#indexOf">indexOf</db:link>()</db:member>
<db:member><db:link xlink:href="qstringlist.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="">QRegExp::exactMatch()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeDuplicates">
<db:title>[since 4.5] int QStringList::removeDuplicates()</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>removeDuplicates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int removeDuplicates()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function removes duplicate entries from a list. The entries do not have to be sorted. They will retain their original order.</db:para>
<db:para>Returns the number of removed entries.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
</db:section>
<db:section xml:id="replaceInStrings">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QString &amp;<db:emphasis>before</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>, int <db:emphasis>cs</db:emphasis> = ...)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>replaceInStrings</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>before</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>...</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; replaceInStrings(const QString &amp;before, const QString &amp;after, int cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string list where every string has had the <db:code role="parameter">before</db:code> text replaced with the <db:code role="parameter">after</db:code> text wherever the <db:code role="parameter">before</db:code> text is found. The <db:code role="parameter">before</db:code> text is matched case-sensitively or not depending on the <db:code role="parameter">cs</db:code> flag.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &amp;lt;&amp;lt; &quot;alpha&quot; &amp;lt;&amp;lt; &quot;beta&quot; &amp;lt;&amp;lt; &quot;gamma&quot; &amp;lt;&amp;lt; &quot;epsilon&quot;;
    list.replaceInStrings(&quot;a&quot;, &quot;o&quot;);
    // list == [&quot;olpho&quot;, &quot;beto&quot;, &quot;gommo&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QString::replace()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replaceInStrings-1">
<db:title>QStringList &amp;QStringList::replaceInStrings(const QRegExp &amp;<db:emphasis>rx</db:emphasis>, const QString &amp;<db:emphasis>after</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>replaceInStrings</db:methodname>
<db:methodparam>
<db:type>const QRegExp &amp;</db:type>
<db:parameter>rx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>after</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; replaceInStrings(const QRegExp &amp;rx, const QString &amp;after)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Replaces every occurrence of the regexp <db:code role="parameter">rx</db:code>, in each of the string lists's strings, with <db:code role="parameter">after</db:code>. Returns a reference to the string list.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &amp;lt;&amp;lt; &quot;alpha&quot; &amp;lt;&amp;lt; &quot;beta&quot; &amp;lt;&amp;lt; &quot;gamma&quot; &amp;lt;&amp;lt; &quot;epsilon&quot;;
    list.replaceInStrings(QRegExp(&quot;^a&quot;), &quot;o&quot;);
    // list == [&quot;olpha&quot;, &quot;beta&quot;, &quot;gamma&quot;, &quot;epsilon&quot;]
</db:programlisting>
<db:para>For regular expressions that contain <db:link xlink:href="">capturing parentheses</db:link>, occurrences of <db:emphasis role="bold">\1</db:emphasis>, <db:emphasis role="bold">\2</db:emphasis>, ..., in <db:code role="parameter">after</db:code> are replaced with <db:code role="parameter">rx</db:code>.cap(1), <db:code role="parameter">rx</db:code>.cap(2), ...</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">    QStringList list;
    list &amp;lt;&amp;lt; &quot;Bill Clinton&quot; &amp;lt;&amp;lt; &quot;Murray, Bill&quot;;
    list.replaceInStrings(QRegExp(&quot;^(.*), (.*)$&quot;), &quot;\\2 \\1&quot;);
    // list == [&quot;Bill Clinton&quot;, &quot;Bill Murray&quot;]
</db:programlisting>
</db:section>
<db:section xml:id="sort">
<db:title>void QStringList::sort(int <db:emphasis>cs</db:emphasis> = ...)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sort</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>cs</db:parameter>
<db:initializer>...</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sort(int cs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sorts the list of strings in ascending order. If <db:code role="parameter">cs</db:code> is <db:link xlink:href="">Qt::CaseSensitive</db:link> (the default), the string comparison is case sensitive; otherwise the comparison is case insensitive.</db:para>
<db:para>Sorting is performed using the STL's std::sort() algorithm, which averages <db:link xlink:href="containers.xml#linear-logarithmic-time">linear-logarithmic time</db:link>, i.e. O(<db:emphasis>n</db:emphasis> log <db:emphasis>n</db:emphasis>).</db:para>
<db:para>If you want to sort your strings in an arbitrary order, consider using the <db:link xlink:href="qmap.xml">QMap</db:link> class. For example, you could use a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;QString, QString&gt; to create a case-insensitive ordering (e.g. with the keys being lower-case versions of the strings, and the values being the strings), or a <db:link xlink:href="qmap.xml">QMap</db:link>&lt;int, QString&gt; to sort the strings by some integer index.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>QStringList QStringList::operator+(const QStringList &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList operator+(const QStringList &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string list that is the concatenation of this string list with the <db:code role="parameter">other</db:code> string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>append()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QString &amp;<db:emphasis>str</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>str</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; operator&lt;&lt;(const QString &amp;str)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends the given string, <db:code role="parameter">str</db:code>, to this string list and returns a reference to the string list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>append()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-1">
<db:title>QStringList &amp;QStringList::operator&lt;&lt;(const QStringList &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; operator&lt;&lt;(const QStringList &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:code role="parameter">other</db:code> string list to the string list and returns a reference to the latter string list.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>[since 5.4] QStringList &amp;QStringList::operator&lt;&lt;(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QString&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; operator&lt;&lt;(const QList&lt;QString&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Appends the <db:code role="parameter">other</db:code> string list to the string list and returns a reference to the latter string list.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default, since 5.4] QStringList &amp;QStringList::operator=(const QList&lt;QString&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QString&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; operator=(const QList&lt;QString&gt; &amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copy assignment operator from <db:link xlink:href="qlist.xml">QList</db:link>&lt;QString&gt;. Assigns the <db:code role="parameter">other</db:code> list of strings to this string list.</db:para>
<db:para>After the operation, <db:code role="parameter">other</db:code> and <db:code>*this</db:code> will be equal.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[default, since 5.4] QStringList &amp;QStringList::operator=(QList&lt;QString&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QList&lt;QString&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList &amp; operator=(QList&lt;QString&gt; &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Move assignment operator from <db:link xlink:href="qlist.xml">QList</db:link>&lt;QString&gt;. Moves the <db:code role="parameter">other</db:code> list of strings to this string list.</db:para>
<db:para>After the operation, <db:code role="parameter">other</db:code> will be empty.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QMutableStringListIterator-typedef">
<db:title>QMutableStringListIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>QMutableStringListIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The <db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link> type definition provides a Java-style non-const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style non-const iterator is simply a type definition for QMutableListIterator&lt;QString&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QStringListIterator-typedef">QStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="">QStringList::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QStringListIterator-typedef">
<db:title>QStringListIterator</db:title>
<db:typedefsynopsis>
<db:typedefname>QStringListIterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QStringListIterator type definition provides a Java-style const iterator for <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
<db:para><db:link xlink:href="qstringlist.xml">QStringList</db:link> provides both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style const iterator is simply a type definition for QListIterator&lt;QString&gt;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringlist.xml#QMutableStringListIterator-typedef">QMutableStringListIterator</db:link></db:member>
<db:member><db:link xlink:href="">QStringList::const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
