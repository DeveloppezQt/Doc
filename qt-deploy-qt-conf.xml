<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_deploy_qt_conf</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Write a qt.conf file at deployment time.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt-deploy-qt-conf"/>
<db:para>Write a qt.conf file at deployment time.</db:para>
<db:para>The command is defined in the Core component of the Qt6 package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Core)
</db:programlisting>
<db:para>Unlike most other CMake commands provided by Qt, qt_deploy_qt_conf() can only be called from a deployment script. It cannot be called directly by the project.</db:para>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:note>
<db:para>This command does not usually need to be called directly. It is used internally by other higher level commands, but projects wishing to implement more customized deployment logic may find it useful.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_deploy_qt_conf(file_path
    [PREFIX prefix]
    [DOC_DIR doc_dir]
    [HEADERS_DIR headers_dir]
    [LIB_DIR lib_dir]
    [LIBEXEC_DIR libexec_dir]
    [BIN_DIR bin_dir]
    [PLUGINS_DIR plugins_dir]
    [QML_DIR qml_dir]
    [ARCHDATA_DIR archdata_dir]
    [DATA_DIR data_dir]
    [TRANSLATIONS_DIR translations_dir]
    [EXAMPLES_DIR examples_dir]
    [TESTS_DIR test_dir]
    [SETTINGS_DIR settings_dir]
)
</db:programlisting>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Use this command when you need to generate a <db:link xlink:href="qt-conf.xml">qt.conf</db:link> file during deployment. The default value of any path supported by qt.conf can be overridden with the corresponding ..._DIR option. The command will only write a path to the generated qt.conf file if it differs from the default value. The default values can be found at <db:link xlink:href="qt-conf.xml#overriding-paths">Overriding Paths</db:link>.</db:para>
<db:para>The file_path argument expects an absolute path to the location where the qt.conf file should be written to. The <db:link xlink:href="cmake-variable-qt-deploy-prefix.xml">QT_DEPLOY_PREFIX</db:link> and <db:link xlink:href="cmake-variable-qt-deploy-bin-dir.xml">QT_DEPLOY_BIN_DIR</db:link> variables can be used to dynamically specify a path relative to the deployment binary directory, as shown in the example below. This helps avoid hard-coding an absolute path.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad"># The following script must only be executed at install time
set(deploy_script &quot;${CMAKE_CURRENT_BINARY_DIR}/deploy_custom.cmake&quot;)

file(GENERATE OUTPUT ${deploy_script} CONTENT &quot;
include(\&quot;${QT_DEPLOY_SUPPORT}\&quot;)
qt_deploy_qt_conf(\&quot;\${QT_DEPLOY_PREFIX}/\${QT_DEPLOY_BIN_DIR}/qt.conf\&quot;
    DATA_DIR \&quot;./custom_data_dir\&quot;
    TRANSLATIONS_DIR \&quot;./custom_translations_dir\&quot;
)
&quot;)

install(SCRIPT ${deploy_script})
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link></db:member>
<db:member><db:link xlink:href="qt-deploy-runtime-dependencies.xml#qt-deploy-runtime-dependencies">qt_deploy_runtime_dependencies()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
