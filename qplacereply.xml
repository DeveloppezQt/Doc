<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceReply Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacereply.xml">QPlaceReply</db:link> class manages an operation started by an instance of <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> and serves as a base class for more specialized replies.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qplacecontentreply.xml" xlink:role="class">QPlaceContentReply</db:link>, <db:link xlink:href="qplacedetailsreply.xml" xlink:role="class">QPlaceDetailsReply</db:link>, <db:link xlink:href="qplaceidreply.xml" xlink:role="class">QPlaceIdReply</db:link>, <db:link xlink:href="qplacematchreply.xml" xlink:role="class">QPlaceMatchReply</db:link>, <db:link xlink:href="qplacesearchreply.xml" xlink:role="class">QPlaceSearchReply</db:link>, and <db:link xlink:href="qplacesearchsuggestionreply.xml" xlink:role="class">QPlaceSearchSuggestionReply</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceReply is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-replies</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qplacereply.xml">QPlaceReply</db:link> and each of its specialized subclasses manage the state and results of their corresponding operations. The <db:link xlink:href="qplacereply.xml">QPlaceReply</db:link> itself is used for operations that have no results, that is, it only necessary to know if the operation succeeded or failed.</db:para>
<db:para>The <db:link xlink:href="qplacereply.xml#finished">finished</db:link>() signal can be used to monitor the progress of an operation. Once an operation is complete, the <db:link xlink:href="qplacereply.xml#error">error</db:link>() and <db:link xlink:href="qplacereply.xml#errorString">errorString</db:link>() methods provide information on whether the operation completed successfully. If successful, the reply will contain the results for that operation, that is, each subclass will have appropriate functions to retrieve the results of an operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QPlaceReply::Error</db:title>
<db:para>Describes an error which occurred during an operation.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::PlaceDoesNotExistError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A specified place could not be found</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::CategoryDoesNotExistError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A specified category could not be found</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::CommunicationError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred communicating with the service provider.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::ParseError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The response from the service provider or an import file was in an unrecognizable format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::PermissionsError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The operation failed because of insufficient permissions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::UnsupportedError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The operation was not supported by the service provider.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::BadArgumentError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>. A parameter that was provided was invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::CancelError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The operation was canceled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>An error occurred which does not fit into any of the other categories.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QPlaceReply::Type</db:title>
<db:para>Describes the reply's type.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::Reply</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This is a generic reply.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::DetailsReply</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This is a reply for the retrieval of place details</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::SearchReply</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This is a reply for the place search operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::SearchSuggestionReply</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This is a reply for a search suggestion operation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::ContentReply</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This is a reply for content associated with a place.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::IdReply</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>This is a reply that returns an identifier of a place or category. Typically used for place or category save and remove operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacereply.xml">QPlaceReply</db:link></db:emphasis>::MatchReply</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>This is a reply that returns places that match those from another provider.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceReply">
<db:title>[explicit] QPlaceReply::QPlaceReply(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a reply object with a given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlaceReply">
<db:title>[virtual noexcept] QPlaceReply::~QPlaceReply()</db:title>
<db:para>Destroys the reply object.</db:para>
</db:section>
<db:section xml:id="abort">
<db:title>[virtual] void QPlaceReply::abort()</db:title>
<db:para>Aborts the operation.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QPlaceReply::Error QPlaceReply::error() const</db:title>
<db:para>Returns the error code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacereply.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QPlaceReply::error(QPlaceReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis> = QString())</db:title>
<db:para>This signal is emitted when an error has been detected in the processing of this reply. The <db:link xlink:href="qplacereply.xml#finished">finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:code role="parameter">errorString</db:code> is not empty it will contain a textual description of the error meant for developers and not end users.</db:para>
<db:para>This signal and <db:link xlink:href="qplacemanager.xml#error">QPlaceManager::error</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete this reply object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QPlaceReply::errorString() const</db:title>
<db:para>Returns the error string of the reply. The error string is intended to be used by developers only and is not fit to be displayed to an end user.</db:para>
<db:para>If no error has occurred, the string is empty.</db:para>
</db:section>
<db:section xml:id="finished">
<db:title>void QPlaceReply::finished()</db:title>
<db:para>This signal is emitted when this reply has finished processing.</db:para>
<db:para>If <db:link xlink:href="qplacereply.xml#error">error</db:link>() equals <db:link xlink:href="qplacereply.xml#Error-enum">QPlaceReply::NoError</db:link> then the processing finished successfully.</db:para>
<db:para>This signal and <db:link xlink:href="qplacemanager.xml#finished">QPlaceManager::finished</db:link>() will be emitted at the same time.</db:para>
<db:note>
<db:para>Do not delete this reply object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacereply.xml#setFinished">setFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QPlaceReply::isFinished() const</db:title>
<db:para>Return true if the reply has completed.</db:para>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QPlaceReply::setError(QPlaceReply::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">error</db:code> and <db:code role="parameter">errorString</db:code> of the reply. This function does not cause the <db:link xlink:href="qplacereply.xml#error">QPlaceReply::error</db:link>(<db:link xlink:href="qplacereply.xml#Error-enum">QPlaceReply::Error</db:link>, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;<db:link xlink:href="qplacereply.xml#errorString">errorString</db:link>) signal to be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacereply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFinished">
<db:title>[protected] void QPlaceReply::setFinished(bool <db:emphasis>finished</db:emphasis>)</db:title>
<db:para>Sets the status of whether the reply is <db:code role="parameter">finished</db:code> or not. This function does not cause the <db:link xlink:href="qplacereply.xml#finished">finished</db:link>() signal to be emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacereply.xml#finished">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[virtual] QPlaceReply::Type QPlaceReply::type() const</db:title>
<db:para>Returns the type of the reply.</db:para>
</db:section>
</db:section>
</db:article>
