<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Concentric Circles Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the improved quality that antialiasing and floating point precision gives.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The application's main window displays several widgets which are drawn using the various combinations of precision and anti-aliasing.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/concentriccircles-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Anti-aliasing is one of <db:link xlink:href="qpainter.xml">QPainter</db:link>'s render hints. The <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::RenderHints</db:link> are used to specify flags to <db:link xlink:href="qpainter.xml">QPainter</db:link> that may, or may not, be respected by any given engine. <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Antialiasing</db:link> indicates that the engine should anti-alias the edges of primitives if possible, i.e. put additional pixels around the original ones to smooth the edges.</db:para>
<db:para>The difference between floating point precision and integer precision is a matter of accuracy, and is visible in the application's main window: Even though the logic that is calculating the circles' geometry is the same, floating points ensure that the white spaces between each circle are of the same size, while integers make two and two circles appear as if they belong together. The reason is that the integer based precision rely on rounding off non-integer calculations.</db:para>
<db:para>The example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>CircleWidget is a custom widget which renders several animated concentric circles.</db:para>
</db:listitem>
<db:listitem>
<db:para>Window is the application's main window displaying four CircleWidgets drawn using different combinations of precision and aliasing.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>First we will review the CircleWidget class, then we will take a look at the Window class.</db:para>
<db:section xml:id="circlewidget-class-definition">
<db:title>CircleWidget Class Definition</db:title>
<db:para>The CircleWidget class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is a custom widget which renders several animated concentric circles.</db:para>
<db:programlisting language="cpp">class CircleWidget : public QWidget
{
    Q_OBJECT

public:
    CircleWidget(QWidget *parent = 0);

    void setFloatBased(bool floatBased);
    void setAntialiased(bool antialiased);

    QSize minimumSizeHint() const Q_DECL_OVERRIDE;
    QSize sizeHint() const Q_DECL_OVERRIDE;

public slots:
    void nextAnimationFrame();

protected:
    void paintEvent(QPaintEvent *event) Q_DECL_OVERRIDE;

private:
    bool floatBased;
    bool antialiased;
    int frameNo;
};
</db:programlisting>
<db:para>We declare the floatBased and antialiased variables to hold whether an instance of the class should be rendered with integer or float based precision, and whether the rendering should be anti-aliased or not. We also declare functions setting each of these variables.</db:para>
<db:para>In addition we reimplement the <db:link xlink:href="qwidget.xml#paintEvent">QWidget::paintEvent</db:link>() function to apply the various combinations of precision and anti-aliasing when rendering, and to support the animation. We reimplement the <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>() and <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() functions to give the widget a reasonable size within our application.</db:para>
<db:para>We declare the private nextAnimationFrame() slot, and the associated frameNo variable holding the number of &quot;animation frames&quot; for the widget, to facilitate the animation.</db:para>
</db:section>
<db:section xml:id="circlewidget-class-implementation">
<db:title>CircleWidget Class Implementation</db:title>
<db:para>In the constructor we make the widget's rendering integer based and aliased by default:</db:para>
<db:programlisting language="cpp">CircleWidget::CircleWidget(QWidget *parent)
    : QWidget(parent)
{
    floatBased = false;
    antialiased = false;
    frameNo = 0;

    setBackgroundRole(QPalette::Base);
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
}
</db:programlisting>
<db:para>We initialize the widget's frameNo variable, and set the widget's background color using the QWidget::setBackgroundColor() function which takes a <db:link xlink:href="qpalette.xml#ColorRole-enum">color role</db:link> as argument; the <db:link xlink:href="qpalette.xml#ColorRole-enum">QPalette::Base</db:link> color role is typically white.</db:para>
<db:para>Then we set the widgets size policy using the <db:link xlink:href="qwidget.xml#sizePolicy-prop">QWidget::setSizePolicy</db:link>() function. <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Expanding</db:link> means that the widget's <db:link xlink:href="qwidget.xml#sizeHint-prop">sizeHint</db:link>() is a sensible size, but that the widget can be shrunk and still be useful. The widget can also make use of extra space, so it should get as much space as possible.</db:para>
<db:programlisting language="cpp">void CircleWidget::setFloatBased(bool floatBased)
{
    this-&gt;floatBased = floatBased;
    update();
}

void CircleWidget::setAntialiased(bool antialiased)
{
    this-&gt;antialiased = antialiased;
    update();
}
</db:programlisting>
<db:para>The public setFloatBased() and setAntialiased() functions update the widget's rendering preferences, i.e. whether the widget should be rendered with integer or float based precision, and whether the rendering should be anti-aliased or not.</db:para>
<db:para>The functions also generate a paint event by calling the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function, forcing a repaint of the widget with the new rendering preferences.</db:para>
<db:programlisting language="cpp">QSize CircleWidget::minimumSizeHint() const
{
    return QSize(50, 50);
}

QSize CircleWidget::sizeHint() const
{
    return QSize(180, 180);
}
</db:programlisting>
<db:para>The default implementations of the <db:link xlink:href="qwidget.xml#minimumSizeHint-prop">QWidget::minimumSizeHint</db:link>() and <db:link xlink:href="qwidget.xml#sizeHint-prop">QWidget::sizeHint</db:link>() functions return invalid sizes if there is no layout for the widget, otherwise they return the layout's minimum and preferred size, respectively.</db:para>
<db:para>We reimplement the functions to give the widget minimum and preferred sizes which are reasonable within our application.</db:para>
<db:programlisting language="cpp">void CircleWidget::nextAnimationFrame()
{
    ++frameNo;
    update();
}
</db:programlisting>
<db:para>The nextAnimationFrame() slot simply increments the frameNo variable's value, and calls the <db:link xlink:href="qwidget.xml#update">QWidget::update</db:link>() function which schedules a paint event for processing when Qt returns to the main event loop.</db:para>
<db:programlisting language="cpp">void CircleWidget::paintEvent(QPaintEvent *)
{
    QPainter painter(this);
    painter.setRenderHint(QPainter::Antialiasing, antialiased);
    painter.translate(width() / 2, height() / 2);
</db:programlisting>
<db:para>A paint event is a request to repaint all or part of the widget. The paintEvent() function is an event handler that can be reimplemented to receive the widget's paint events. We reimplement the event handler to apply the various combinations of precision and anti-aliasing when rendering the widget, and to support the animation.</db:para>
<db:para>First, we create a <db:link xlink:href="qpainter.xml">QPainter</db:link> for the widget, and set its antialiased flag to the widget's preferred aliasing. We also translate the painters coordinate system, preparing to draw the widget's cocentric circles. The translation ensures that the center of the circles will be equivalent to the widget's center.</db:para>
<db:programlisting language="cpp">    for (int diameter = 0; diameter &lt; 256; diameter += 9) {
        int delta = abs((frameNo % 128) - diameter / 2);
        int alpha = 255 - (delta * delta) / 4 - diameter;
</db:programlisting>
<db:para>When painting a circle, we use the number of &quot;animation frames&quot; to determine the alpha channel of the circle's color. The alpha channel specifies the color's transparency effect, 0 represents a fully transparent color, while 255 represents a fully opaque color.</db:para>
<db:programlisting language="cpp">        if (alpha &gt; 0) {
            painter.setPen(QPen(QColor(0, diameter / 2, 127, alpha), 3));

            if (floatBased)
                painter.drawEllipse(QRectF(-diameter / 2.0, -diameter / 2.0, diameter, diameter));
            else
                painter.drawEllipse(QRect(-diameter / 2, -diameter / 2, diameter, diameter));
        }
    }
}
</db:programlisting>
<db:para>If the calculated alpha channel is fully transparent, we don't draw anything since that would be equivalent to drawing a white circle on a white background. Instead we skip to the next circle still creating a white space. If the calculated alpha channel is fully opaque, we set the pen (the <db:link xlink:href="qcolor.xml">QColor</db:link> passed to the <db:link xlink:href="qpen.xml">QPen</db:link> constructor is converted into the required <db:link xlink:href="qbrush.xml">QBrush</db:link> by default) and draw the circle. If the widget's preferred precision is float based, we specify the circle's bounding rectangle using <db:link xlink:href="qrectf.xml">QRectF</db:link> and double values, otherwise we use <db:link xlink:href="qrect.xml">QRect</db:link> and integers.</db:para>
<db:para>The animation is controlled by the public nextAnimationFrame() slot: Whenever the nextAnimationFrame() slot is called the number of frames is incremented and a paint event is scheduled. Then, when the widget is repainted, the alpha-blending of the circles' colors change and the circles appear as animated.</db:para>
</db:section>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The Window class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link>, and is the application's main window rendering four CircleWidgets using different combinations of precision and aliasing.</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT

public:
    Window();

private:
    QLabel *createLabel(const QString &amp;text);

    QLabel *aliasedLabel;
    QLabel *antialiasedLabel;
    QLabel *intLabel;
    QLabel *floatLabel;
    CircleWidget *circleWidgets[2][2];
};
</db:programlisting>
<db:para>We declare the various components of the main window, i.e., the text labels and a double array that will hold reference to the four CircleWidgets. In addition we declare the private createLabel() function to simplify the constructor.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:programlisting language="cpp">Window::Window()
{
    aliasedLabel = createLabel(tr(&quot;Aliased&quot;));
    antialiasedLabel = createLabel(tr(&quot;Antialiased&quot;));
    intLabel = createLabel(tr(&quot;Int&quot;));
    floatLabel = createLabel(tr(&quot;Float&quot;));

    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(aliasedLabel, 0, 1);
    layout-&gt;addWidget(antialiasedLabel, 0, 2);
    layout-&gt;addWidget(intLabel, 1, 0);
    layout-&gt;addWidget(floatLabel, 2, 0);
</db:programlisting>
<db:para>In the constructor, we first create the various labels and put them in a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>.</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);

    for (int i = 0; i &lt; 2; ++i) {
        for (int j = 0; j &lt; 2; ++j) {
            circleWidgets[i][j] = new CircleWidget;
            circleWidgets[i][j]-&gt;setAntialiased(j != 0);
            circleWidgets[i][j]-&gt;setFloatBased(i != 0);

            connect(timer, SIGNAL(timeout()),
                    circleWidgets[i][j], SLOT(nextAnimationFrame()));

            layout-&gt;addWidget(circleWidgets[i][j], i + 1, j + 1);
        }
    }
</db:programlisting>
<db:para>Then we create a <db:link xlink:href="qtimer.xml">QTimer</db:link>. The <db:link xlink:href="qtimer.xml">QTimer</db:link> class is a high-level programming interface for timers, and provides repetitive and single-shot timers.</db:para>
<db:para>We create a timer to facilitate the animation of our concentric circles; when we create the four CircleWidget instances (and add them to the layout), we connect the <db:link xlink:href="qtimer.xml#timeout">QTimer::timeout</db:link>() signal to each of the widgets' nextAnimationFrame() slots.</db:para>
<db:programlisting language="cpp">    timer-&gt;start(100);
    setLayout(layout);

    setWindowTitle(tr(&quot;Concentric Circles&quot;));
}
</db:programlisting>
<db:para>Before we set the layout and window title for our main window, we make the timer start with a timeout interval of 100 milliseconds, using the <db:link xlink:href="qtimer.xml#start-1">QTimer::start</db:link>() function. That means that the <db:link xlink:href="qtimer.xml#timeout">QTimer::timeout</db:link>() signal will be emitted, forcing a repaint of the four CircleWidgets, every 100 millisecond which is the reason the circles appear as animated.</db:para>
<db:programlisting language="cpp">QLabel *Window::createLabel(const QString &amp;text)
{
    QLabel *label = new QLabel(text);
    label-&gt;setAlignment(Qt::AlignCenter);
    label-&gt;setMargin(2);
    label-&gt;setFrameStyle(QFrame::Box | QFrame::Sunken);
    return label;
}
</db:programlisting>
<db:para>The private createLabel() function is implemented to simlify the constructor.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/circlewidget.cpp">painting/concentriccircles/circlewidget.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/circlewidget.h">painting/concentriccircles/circlewidget.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/concentriccircles.pro">painting/concentriccircles/concentriccircles.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/main.cpp">painting/concentriccircles/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/window.cpp">painting/concentriccircles/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="painting/concentriccircles/window.h">painting/concentriccircles/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
