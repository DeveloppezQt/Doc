<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>SQL Browser</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SQL Browser example shows how a data browser can be used to visualize the results of SQL statements on a live database.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Digia.  For licensing terms and
** conditions see http://qt.digia.com/licensing.  For further information
** use the contact form at http://qt.digia.com/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Digia gives you certain additional
** rights.  These rights are described in the Digia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;browser.h&quot;

#include &lt;QtCore&gt;
#include &lt;QtWidgets&gt;
#include &lt;QtSql&gt;

void addConnectionsFromCommandline(const QStringList &amp;args, Browser *browser)
{
    for (int i = 1; i &lt; args.count(); ++i) {
        QUrl url(args.at(i), QUrl::TolerantMode);
        if (!url.isValid()) {
            qWarning(&quot;Invalid URL: %s&quot;, qPrintable(args.at(i)));
            continue;
        }
        QSqlError err = browser-&gt;addConnection(url.scheme(), url.path().mid(1), url.host(),
                                               url.userName(), url.password(), url.port(-1));
        if (err.type() != QSqlError::NoError)
            qDebug() &lt;&lt; &quot;Unable to open connection:&quot; &lt;&lt; err;
    }
}

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QMainWindow mainWin;
    mainWin.setWindowTitle(QObject::tr(&quot;Qt SQL Browser&quot;));

    Browser browser(&amp;mainWin);
    mainWin.setCentralWidget(&amp;browser);

    QMenu *fileMenu = mainWin.menuBar()-&gt;addMenu(QObject::tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(QObject::tr(&quot;Add &amp;Connection...&quot;), &amp;browser, SLOT(addConnection()));
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(QObject::tr(&quot;&amp;Quit&quot;), &amp;app, SLOT(quit()));

    QMenu *helpMenu = mainWin.menuBar()-&gt;addMenu(QObject::tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(QObject::tr(&quot;About&quot;), &amp;browser, SLOT(about()));
    helpMenu-&gt;addAction(QObject::tr(&quot;About Qt&quot;), qApp, SLOT(aboutQt()));

    QObject::connect(&amp;browser, SIGNAL(statusMessage(QString)),
                     mainWin.statusBar(), SLOT(showMessage(QString)));

    addConnectionsFromCommandline(app.arguments(), &amp;browser);
    mainWin.show();
    if (QSqlDatabase::connectionNames().isEmpty())
        QMetaObject::invokeMethod(&amp;browser, &quot;addConnection&quot;, Qt::QueuedConnection);

    return app.exec();
}

</db:programlisting>
</db:article>
