<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Line and BarChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to combine different charts and set the axes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In the example we combine a linechart with a barchart and use the category axis as a common axis for both.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_lineandbar.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="combining-charts">
<db:title>Combining Charts</db:title>
<db:para>Here we create data for our bar series.</db:para>
<db:programlisting language="cpp">    QBarSet *set0 = new QBarSet(&quot;Jane&quot;);
    QBarSet *set1 = new QBarSet(&quot;John&quot;);
    QBarSet *set2 = new QBarSet(&quot;Axel&quot;);
    QBarSet *set3 = new QBarSet(&quot;Mary&quot;);
    QBarSet *set4 = new QBarSet(&quot;Sam&quot;);

    *set0 &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; 2 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 6;
    *set1 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 0 &amp;lt;&amp;lt; 7;
    *set2 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 8 &amp;lt;&amp;lt; 13 &amp;lt;&amp;lt; 8 &amp;lt;&amp;lt; 5;
    *set3 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 6 &amp;lt;&amp;lt; 7 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 4 &amp;lt;&amp;lt; 5;
    *set4 &amp;lt;&amp;lt; 9 &amp;lt;&amp;lt; 7 &amp;lt;&amp;lt; 5 &amp;lt;&amp;lt; 3 &amp;lt;&amp;lt; 1 &amp;lt;&amp;lt; 2;
</db:programlisting>
<db:para>We create a bar series and append sets to it. The first values of each set are grouped together in the first category, the second values in the second category and so on.</db:para>
<db:programlisting language="cpp">    QBarSeries *barseries = new QBarSeries();
    barseries-&amp;gt;append(set0);
    barseries-&amp;gt;append(set1);
    barseries-&amp;gt;append(set2);
    barseries-&amp;gt;append(set3);
    barseries-&amp;gt;append(set4);
</db:programlisting>
<db:para>Then we create a line series and add data to it. To make the data match with the barchart, we use the index as an x-value for our line series, so that first point is at (0,value) second at (1,value) and so on.</db:para>
<db:programlisting language="cpp">    QLineSeries *lineseries = new QLineSeries();
    lineseries-&amp;gt;setName(&quot;trend&quot;);
    lineseries-&amp;gt;append(QPoint(0, 4));
    lineseries-&amp;gt;append(QPoint(1, 15));
    lineseries-&amp;gt;append(QPoint(2, 20));
    lineseries-&amp;gt;append(QPoint(3, 4));
    lineseries-&amp;gt;append(QPoint(4, 12));
    lineseries-&amp;gt;append(QPoint(5, 17));
</db:programlisting>
<db:para>Here we create the chart and add both series to it.</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&amp;gt;addSeries(barseries);
    chart-&amp;gt;addSeries(lineseries);
    chart-&amp;gt;setTitle(&quot;Line and barchart example&quot;);
</db:programlisting>
<db:para>To make the chart show the series properly, we have to create custom axes for the series. If we don't create custom axes, then each series will get scaled to use the maximum area of the chart (like in single series case) and the result will be incorrect. With custom axes we set the range of both series to follow the same axis. For the x-axis we use the <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link> and for the y-axis we use QValuesAxis.</db:para>
<db:programlisting language="cpp">    QStringList categories;
    categories &amp;lt;&amp;lt; &quot;Jan&quot; &amp;lt;&amp;lt; &quot;Feb&quot; &amp;lt;&amp;lt; &quot;Mar&quot; &amp;lt;&amp;lt; &quot;Apr&quot; &amp;lt;&amp;lt; &quot;May&quot; &amp;lt;&amp;lt; &quot;Jun&quot;;
    QBarCategoryAxis *axisX = new QBarCategoryAxis();
    axisX-&amp;gt;append(categories);
    chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
    lineseries-&amp;gt;attachAxis(axisX);
    barseries-&amp;gt;attachAxis(axisX);
    axisX-&amp;gt;setRange(QString(&quot;Jan&quot;), QString(&quot;Jun&quot;));

    QValueAxis *axisY = new QValueAxis();
    chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
    lineseries-&amp;gt;attachAxis(axisY);
    barseries-&amp;gt;attachAxis(axisY);
    axisY-&amp;gt;setRange(0, 20);
</db:programlisting>
<db:para>And we also want to show the legend.</db:para>
<db:programlisting language="cpp">    chart-&amp;gt;legend()-&amp;gt;setVisible(true);
    chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally we add the chart onto a view.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>Now it is ready to be shown in a window.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(440, 300);
    window.show();
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/lineandbar?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
