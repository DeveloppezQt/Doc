<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Property Binding</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>binding object properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>An object's property can be assigned a static value which stays constant until it is explicitly assigned a new value. However, to make the fullest use of QML and its built-in support for dynamic object behaviors, most QML objects use <db:emphasis>property bindings</db:emphasis>.</db:para>
<db:para>Property bindings are a core feature of QML that lets developers specify relationships between different object properties. When a property's <db:emphasis>dependencies</db:emphasis> change in value, the property is automatically updated according to the specified relationship.</db:para>
<db:para>Behind the scenes, the QML engine monitors the property's dependencies (that is, the variables in the binding expression). When a change is detected, the QML engine re-evaluates the binding expression and applies the new result to the property.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>To create a property binding, a property is assigned a JavaScript expression that evaluates to the desired value. At its simplest, a binding may be a reference to another property. Take the following example, where the blue <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>'s height is bound to the height of its parent:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200; height: 200

    Rectangle {
        width: 100
        height: parent.height
        color: &quot;blue&quot;
    }
}
</db:programlisting>
<db:para>Whenever the height of the parent rectangle changes, the height of the blue rectangle automatically updates to be of the same value.</db:para>
<db:para>A binding can contain any valid JavaScript expression or statement, as QML uses a standards compliant JavaScript engine. Bindings can access object properties, call methods and use built-in JavaScript objects such as Date and Math. Below are other possible bindings for the previous example:</db:para>
<db:programlisting language="cpp">height: parent.height / 2

height: Math.min(parent.width, parent.height)

height: parent.height &amp;gt; 100 ? parent.height : parent.height/2

height: {
    if (parent.height &amp;gt; 100)
        return parent.height
    else
        return parent.height / 2
}

height: someMethodThatReturnsHeight()
</db:programlisting>
<db:para>Below is a more complex example involving more objects and types:</db:para>
<db:programlisting language="qml">Column {
    id: column
    width: 200
    height: 200

    Rectangle {
        id: topRect
        width: Math.max(bottomRect.width, parent.width/2)
        height: (parent.height / 3) + 10
        color: &quot;yellow&quot;

        TextInput {
            id: myTextInput
            text: &quot;Hello QML!&quot;
        }
    }

    Rectangle {
        id: bottomRect
        width: 100
        height: 50
        color: myTextInput.text.length &amp;lt;= 10 ? &quot;red&quot; : &quot;blue&quot;
    }
}
</db:programlisting>
<db:para>In the previous example,</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>topRect.width depends on bottomRect.width and column.width</db:para>
</db:listitem>
<db:listitem>
<db:para>topRect.height depends on column.height</db:para>
</db:listitem>
<db:listitem>
<db:para>bottomRect.color depends on myTextInput.text.length</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Syntactically, bindings are allowed to be of arbitrary complexity. However, if a binding is overly complex - such as involving multiple lines, or imperative loops - it could indicate that the binding is being used for more than describing property relationships. Complex bindings can reduce code performance, readability, and maintainability. It may be a good idea to redesign components that have complex bindings, or at least factor the binding out into a separate function. As a general rule, users should not rely on the evaluation order of bindings.</db:para>
<db:anchor xml:id="qml-javascript-assignment"/>
</db:section>
<db:section xml:id="creating-property-bindings-from-javascript">
<db:title>Creating Property Bindings from JavaScript</db:title>
<db:para>A property with a binding is automatically updated as necessary. However, if the property is later assigned a static value from a JavaScript statement, the binding will be removed.</db:para>
<db:para>For example, the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> below initially ensures that its height is always twice its width. However, when the space key is pressed, the current value of width*3 will be assigned to height as a <db:emphasis>static</db:emphasis> value. After that, <db:emphasis>the height will remain fixed at this value, even if the width changes</db:emphasis>. The assignment of the static value removes the binding.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100
    height: width * 2

    focus: true
    Keys.onSpacePressed: {
        height = width * 3
    }
}
</db:programlisting>
<db:para>If the intention is to give the rectangle a fixed height and stop automatic updates, then this is not a problem. However, if the intention is to establish a new relationship between width and height, then the new binding expression must be wrapped in the Qt.binding() function instead:</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 100
    height: width * 2

    focus: true
    Keys.onSpacePressed: {
        height = Qt.binding(function() { return width * 3 })
    }
}
</db:programlisting>
<db:para>Now, after the space key is pressed, the rectangle's height will continue auto-updating to always be three times its width.</db:para>
<db:section xml:id="debugging-overwriting-of-bindings">
<db:title>Debugging overwriting of bindings</db:title>
<db:para>A common cause of bugs in QML applications is accidentally overwriting bindings with static values from JavaScript statements. To help developers track down problems of this kind, the QML engine is able to emit messages whenever a binding is lost due to imperative assignments.</db:para>
<db:para>In order to generate such messages, you need to enable the informational output for the qt.qml.binding.removal logging category, for instance by calling:</db:para>
<db:programlisting language="cpp">QLoggingCategory::setFilterRules(QStringLiteral(&quot;qt.qml.binding.removal.info=true&quot;));
</db:programlisting>
<db:para>Please refer to the QLoggingCategory documentation for more information about enabling output from logging categories.</db:para>
<db:para>Note that is perfectly reasonable in some circumstances to overwrite bindings. Any message generated by the QML engine should be treated as a diagnostic aid, and not necessarily as evidence of a problem without further investigation.</db:para>
</db:section>
<db:section xml:id="using-keyword-this-keyword-with-property-binding">
<db:title>Using this with Property Binding</db:title>
<db:para>When creating a property binding from JavaScript, the this keyword can be used to refer to the object which receives the binding. This is helpful for resolving ambiguities with property names.</db:para>
<db:para>For example, the Component.onCompleted handler below is defined within the scope of the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>. In this scope, width refers to the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>'s width, not the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>'s width. To bind the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>'s height to its own width, the binding expression must explicitly refer to this.width (or alternatively, rect.width):</db:para>
<db:programlisting language="qml">Item {
    width: 500
    height: 500

    Rectangle {
        id: rect
        width: 100
        color: &quot;yellow&quot;
    }

    Component.onCompleted: {
        rect.height = Qt.binding(function() { return this.width * 2 })
        console.log(&quot;rect.height = &quot; + rect.height) // prints 200, not 1000
    }
}
</db:programlisting>
<db:note>
<db:para>The value of this is not defined outside of property bindings. See <db:link xlink:href="qtqml-javascript-hostenvironment.xml#javascript-environment-restrictions">JavaScript Environment Restrictions</db:link> for details.</db:para>
</db:note>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-positioning-anchors.xml">Positioning with Anchors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
