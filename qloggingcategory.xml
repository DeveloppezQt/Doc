<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLoggingCategory Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> class represents a category, or 'area' in the logging infrastructure.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLoggingCategory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> represents a certain logging category - identified by a string - at runtime. A category can be configured to enable or disable logging of messages per message type.</db:para>
<db:para>To check whether a message type is enabled or not, use one of these methods: <db:link xlink:href="qloggingcategory.xml#isDebugEnabled">isDebugEnabled</db:link>(), <db:link xlink:href="qloggingcategory.xml#isInfoEnabled">isInfoEnabled</db:link>(), <db:link xlink:href="qloggingcategory.xml#isWarningEnabled">isWarningEnabled</db:link>(), and <db:link xlink:href="qloggingcategory.xml#isCriticalEnabled">isCriticalEnabled</db:link>().</db:para>
<db:para>All objects are meant to be configured by a common registry, as described in <db:link xlink:href="qloggingcategory.xml#configuring-categories">Configuring Categories</db:link>. Different objects can also represent the same category. Therefore, it's <db:emphasis role="bold">not</db:emphasis> recommended to export objects across module boundaries, to manipulate the objects directly, or to inherit from <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link>.</db:para>
<db:section xml:id="creating-category-objects">
<db:title>Creating Category Objects</db:title>
<db:para>The <db:link xlink:href="qloggingcategory.xml#Q_DECLARE_LOGGING_CATEGORY">Q_DECLARE_LOGGING_CATEGORY</db:link>() and <db:link xlink:href="qloggingcategory.xml#Q_LOGGING_CATEGORY">Q_LOGGING_CATEGORY</db:link>() macros conveniently declare and create <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> objects:</db:para>
<db:programlisting language="cpp">// in a header
Q_DECLARE_LOGGING_CATEGORY(driverUsb)

// in one source file
Q_LOGGING_CATEGORY(driverUsb, &quot;driver.usb&quot;)
</db:programlisting>
<db:para>Category names are free text; to configure categories using <db:link xlink:href="qloggingcategory.xml#logging-rules">Logging Rules</db:link>, their names should follow this convention:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use letters and numbers only.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use dots to further structure categories into common areas.</db:para>
</db:listitem>
<db:listitem>
<db:para>Avoid the category names: debug, info, warning, and critical.</db:para>
</db:listitem>
<db:listitem>
<db:para>Category names with the qt prefix are solely reserved for Qt modules.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> objects that are implicitly defined by <db:link xlink:href="qloggingcategory.xml#Q_LOGGING_CATEGORY">Q_LOGGING_CATEGORY</db:link>() are created on first use, in a thread-safe manner.</db:para>
</db:section>
<db:section xml:id="checking-category-configuration">
<db:title>Checking Category Configuration</db:title>
<db:para><db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> provides <db:link xlink:href="qloggingcategory.xml#isDebugEnabled">isDebugEnabled</db:link>(), <db:link xlink:href="qloggingcategory.xml#isInfoEnabled">isInfoEnabled</db:link>(), <db:link xlink:href="qloggingcategory.xml#isWarningEnabled">isWarningEnabled</db:link>(), <db:link xlink:href="qloggingcategory.xml#isCriticalEnabled">isCriticalEnabled</db:link>(), as well as <db:link xlink:href="qloggingcategory.xml#isEnabled">isEnabled</db:link>() to check whether messages for the given message type should be logged.</db:para>
<db:para>The <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>(), <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>(), and <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>() macros prevent arguments from being evaluated if the respective message types are not enabled for the category, so explicit checking is not needed:</db:para>
<db:programlisting language="cpp">    // usbEntries() will only be called if driverUsb category is enabled
    qCDebug(driverUsb) &amp;lt;&amp;lt; &quot;devices: &quot; &amp;lt;&amp;lt; usbEntries();
</db:programlisting>
</db:section>
<db:section xml:id="default-category-configuration">
<db:title>Default Category Configuration</db:title>
<db:para>Both the <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> constructor and the <db:link xlink:href="qloggingcategory.xml#Q_LOGGING_CATEGORY">Q_LOGGING_CATEGORY</db:link>() macro accept an optional <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> argument, which disables all message types with a lower severity. That is, a category declared with</db:para>
<db:programlisting language="cpp">Q_LOGGING_CATEGORY(driverUsbEvents, &quot;driver.usb.events&quot;, QtWarningMsg)
</db:programlisting>
<db:para>logs messages of type QtWarningMsg, QtCriticalMsg, QtFatalMsg, but ignores messages of type QtDebugMsg and QtInfoMsg.</db:para>
<db:para>If no argument is passed, all messages are logged.</db:para>
</db:section>
<db:section xml:id="configuring-categories">
<db:title>Configuring Categories</db:title>
<db:para>You can override the default configuration for categories either by setting logging rules, or by installing a custom filter.</db:para>
<db:section xml:id="logging-rules">
<db:title>Logging Rules</db:title>
<db:para>Logging rules let you enable or disable logging for categories in a flexible way. Rules are specified in text, where every line must have the format:</db:para>
<db:programlisting language="cpp">    &amp;lt;category&amp;gt;[.&amp;lt;type&amp;gt;] = true|false
</db:programlisting>
<db:para>&lt;category&gt; is the name of the category, potentially with * as a wildcard symbol for the first or last character; or at both positions. The optional &lt;type&gt; must be debug, info, warning, or critical. Lines that don't fit this scheme are ignored.</db:para>
<db:para>Rules are evaluated in text order, from first to last. That is, if two rules apply to a category/type, the rule that comes later is applied.</db:para>
<db:para>Rules can be set via <db:link xlink:href="qloggingcategory.xml#setFilterRules">setFilterRules</db:link>():</db:para>
<db:programlisting language="cpp">    QLoggingCategory::setFilterRules(&quot;*.debug=false\n&quot;
                                     &quot;driver.usb.debug=true&quot;);
</db:programlisting>
<db:para>Logging rules are automatically loaded from the [Rules] section in a logging configuration file. These configuration files are looked up in the QtProject configuration directory, or explicitly set in a QT_LOGGING_CONF environment variable:</db:para>
<db:programlisting language="cpp">    [Rules]
    *.debug=false
    driver.usb.debug=true
</db:programlisting>
<db:para>Logging rules can also be specified in a QT_LOGGING_RULES environment variable; multiple rules can also be separated by semicolons:</db:para>
<db:programlisting language="cpp">    QT_LOGGING_RULES=&quot;*.debug=false;driver.usb.debug=true&quot;
</db:programlisting>
<db:para>Rules set by <db:link xlink:href="qloggingcategory.xml#setFilterRules">setFilterRules</db:link>() take precedence over rules specified in the QtProject configuration directory. In turn, these rules can be overwritten by those from the configuration file specified by QT_LOGGING_CONF, and those set by QT_LOGGING_RULES.</db:para>
<db:para>The order of evaluation is as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>[<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::DataPath</db:link>]/qtlogging.ini</db:para>
</db:listitem>
<db:listitem>
<db:para>QtProject/qtlogging.ini</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qloggingcategory.xml#setFilterRules">setFilterRules</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_LOGGING_CONF</db:para>
</db:listitem>
<db:listitem>
<db:para>QT_LOGGING_RULES</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The QtProject/qtlogging.ini file is looked up in all directories returned by <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::GenericConfigLocation</db:link>.</db:para>
<db:para>Set the QT_LOGGING_DEBUG environment variable to find out where your logging rules are loaded from.</db:para>
</db:section>
<db:section xml:id="installing-a-custom-filter">
<db:title>Installing a Custom Filter</db:title>
<db:para>As a lower-level alternative to the text rules, you can also implement a custom filter via <db:link xlink:href="qloggingcategory.xml#installFilter">installFilter</db:link>(). All filter rules are ignored in this case.</db:para>
</db:section>
</db:section>
<db:section xml:id="printing-the-category">
<db:title>Printing the Category</db:title>
<db:para>Use the %{category} placeholder to print the category in the default message handler:</db:para>
<db:programlisting language="cpp">    qSetMessagePattern(&quot;%{category} %{message}&quot;);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CategoryFilter-typedef">
<db:title>QLoggingCategory::CategoryFilter</db:title>
<db:typedefsynopsis>
<db:typedefname>CategoryFilter</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is a typedef for a pointer to a function with the following signature:</db:para>
<db:programlisting language="cpp">void myCategoryFilter(QLoggingCategory *);
</db:programlisting>
<db:para>A function with this signature can be installed with <db:link xlink:href="qloggingcategory.xml#installFilter">installFilter</db:link>().</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLoggingCategory-1">
<db:title>[explicit, since 5.4] QLoggingCategory::QLoggingCategory(const char *<db:emphasis>category</db:emphasis>, QtMsgType <db:emphasis>enableForLevel</db:emphasis> = QtDebugMsg)</db:title>
<db:constructorsynopsis>
<db:methodname>QLoggingCategory</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtMsgType</db:type>
<db:parameter>enableForLevel</db:parameter>
<db:initializer>QtDebugMsg</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLoggingCategory(const char *category, QtMsgType enableForLevel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> object with the provided <db:code role="parameter">category</db:code> name, and enables all messages with types at least as verbose as <db:code role="parameter">enableForLevel</db:code>, which defaults to <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtDebugMsg</db:link> (which enables all categories).</db:para>
<db:para>If <db:code role="parameter">category</db:code> is nullptr, the category name &quot;default&quot; is used.</db:para>
<db:note>
<db:para><db:code role="parameter">category</db:code> must be kept valid during the lifetime of this object. Using a string literal for it is the usual way to achieve this.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="dtor.QLoggingCategory">
<db:title>QLoggingCategory::~QLoggingCategory()</db:title>
<db:destructorsynopsis>
<db:methodname>~QLoggingCategory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QLoggingCategory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> object.</db:para>
</db:section>
<db:section xml:id="categoryName">
<db:title>const char *QLoggingCategory::categoryName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const char *</db:type>
<db:methodname>categoryName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * categoryName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the category.</db:para>
</db:section>
<db:section xml:id="defaultCategory">
<db:title>[static] QLoggingCategory *QLoggingCategory::defaultCategory()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLoggingCategory *</db:type>
<db:methodname>defaultCategory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLoggingCategory * defaultCategory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the global category &quot;default&quot; that is used, for example, by <db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>(), <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>(), or <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>().</db:para>
<db:note>
<db:para>The pointer returned may be null during destruction of static objects. Also, don't delete this pointer, as ownership of the category isn't transferred.</db:para>
</db:note>
</db:section>
<db:section xml:id="installFilter">
<db:title>[static] QLoggingCategory::CategoryFilter QLoggingCategory::installFilter(QLoggingCategory::CategoryFilter <db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLoggingCategory::CategoryFilter</db:type>
<db:methodname>installFilter</db:methodname>
<db:methodparam>
<db:type>QLoggingCategory::CategoryFilter</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLoggingCategory::CategoryFilter installFilter(QLoggingCategory::CategoryFilter filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs a function <db:code role="parameter">filter</db:code> that is used to determine which categories and message types should be enabled. Returns a pointer to the previous installed filter.</db:para>
<db:para>Every <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> object created is passed to the filter, and the filter is free to change the respective category configuration with <db:link xlink:href="qloggingcategory.xml#setEnabled">setEnabled</db:link>().</db:para>
<db:para>When you define your filter, note that it can be called from different threads; but never concurrently. This filter cannot call any static functions from <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QLoggingCategory::CategoryFilter oldCategoryFilter;

void myCategoryFilter(QLoggingCategory *category)
{
    // configure driver.usb category here, otherwise forward to to default filter.
    if (qstrcmp(category-&amp;gt;categoryName(), &quot;driver.usb&quot;) == 0)
        category-&amp;gt;setEnabled(QtDebugMsg, true);
    else
        oldCategoryFilter(category);
}
</db:programlisting>
<db:para>Alternatively, you can configure the default filter via <db:link xlink:href="qloggingcategory.xml#setFilterRules">setFilterRules</db:link>().</db:para>
</db:section>
<db:section xml:id="isCriticalEnabled">
<db:title>bool QLoggingCategory::isCriticalEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCriticalEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCriticalEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if critical messages should be shown for this category; false otherwise.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>() macro already does this check before executing any code. However, calling this method may be useful to avoid the expensive generation of data for debug output only.</db:para>
</db:note>
</db:section>
<db:section xml:id="isDebugEnabled">
<db:title>bool QLoggingCategory::isDebugEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDebugEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDebugEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if debug messages should be shown for this category; false otherwise.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>() macro already does this check before running any code. However, calling this method may be useful to avoid the expensive generation of data for debug output only.</db:para>
</db:note>
</db:section>
<db:section xml:id="isEnabled">
<db:title>bool QLoggingCategory::isEnabled(QtMsgType <db:emphasis>msgtype</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEnabled</db:methodname>
<db:methodparam>
<db:type>QtMsgType</db:type>
<db:parameter>msgtype</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEnabled(QtMsgType msgtype) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if a message of type <db:code role="parameter">msgtype</db:code> for the category should be shown; false otherwise.</db:para>
</db:section>
<db:section xml:id="isInfoEnabled">
<db:title>[since 5.5] bool QLoggingCategory::isInfoEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInfoEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInfoEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if informational messages should be shown for this category; false otherwise.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qloggingcategory.xml#qCInfo">qCInfo</db:link>() macro already does this check before executing any code. However, calling this method may be useful to avoid the expensive generation of data for debug output only.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="isWarningEnabled">
<db:title>bool QLoggingCategory::isWarningEnabled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isWarningEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWarningEnabled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if warning messages should be shown for this category; false otherwise.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>() macro already does this check before executing any code. However, calling this method may be useful to avoid the expensive generation of data for debug output only.</db:para>
</db:note>
</db:section>
<db:section xml:id="setEnabled">
<db:title>void QLoggingCategory::setEnabled(QtMsgType <db:emphasis>type</db:emphasis>, bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEnabled</db:methodname>
<db:methodparam>
<db:type>QtMsgType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEnabled(QtMsgType type, bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes the message type <db:code role="parameter">type</db:code> for the category to <db:code role="parameter">enable</db:code>.</db:para>
<db:para>This method is meant for use only from inside a filter installed with <db:link xlink:href="qloggingcategory.xml#installFilter">installFilter</db:link>(). For an overview on how to configure categories globally, see <db:link xlink:href="qloggingcategory.xml#configuring-categories">Configuring Categories</db:link>.</db:para>
<db:note>
<db:para>QtFatalMsg cannot be changed; it will always remain true.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#isEnabled">isEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilterRules">
<db:title>[static] void QLoggingCategory::setFilterRules(const QString &amp;<db:emphasis>rules</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setFilterRules</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rules</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFilterRules(const QString &amp;rules)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Configures which categories and message types should be enabled through a set of <db:code role="parameter">rules</db:code>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory::setFilterRules(QStringLiteral(&quot;driver.usb.debug=true&quot;));
</db:programlisting>
<db:note>
<db:para>The rules might be ignored if a custom category filter is installed with <db:link xlink:href="qloggingcategory.xml#installFilter">installFilter</db:link>(), or if the user has defined the QT_LOGGING_CONF or the QT_LOGGING_RULES environment variable.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-28-29">
<db:title>QLoggingCategory &amp;QLoggingCategory::operator()()</db:title>
<db:methodsynopsis>
<db:type>QLoggingCategory &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLoggingCategory &amp; operator()()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object itself. This allows for both: a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> variable, and a factory method that returns a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link>, to be used in <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>(), <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>(), or <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>() macros.</db:para>
</db:section>
<db:section xml:id="operator-28-29-1">
<db:title>const QLoggingCategory &amp;QLoggingCategory::operator()() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QLoggingCategory &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QLoggingCategory &amp; operator()() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object itself. This allows for both: a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> variable, and a factory method that returns a <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link>, to be used in <db:link xlink:href="qloggingcategory.xml#qCDebug">qCDebug</db:link>(), <db:link xlink:href="qloggingcategory.xml#qCWarning">qCWarning</db:link>(), or <db:link xlink:href="qloggingcategory.xml#qCCritical">qCCritical</db:link>() macros.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_LOGGING_CATEGORY">
<db:title>[since 5.2] Q_DECLARE_LOGGING_CATEGORY(<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_DECLARE_LOGGING_CATEGORY</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_DECLARE_LOGGING_CATEGORY(name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Declares a logging category <db:code role="parameter">name</db:code>. The macro can be used to declare a common logging category shared in different parts of the program.</db:para>
<db:para>This macro must be used outside of a class or method.</db:para>
<db:para>This macro was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#Q_LOGGING_CATEGORY">Q_LOGGING_CATEGORY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_LOGGING_CATEGORY">
<db:title>[since 5.2] Q_LOGGING_CATEGORY(<db:emphasis>name</db:emphasis>, <db:emphasis>string</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_LOGGING_CATEGORY</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_LOGGING_CATEGORY(name, string)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defines a logging category <db:code role="parameter">name</db:code>, and makes it configurable under the <db:code role="parameter">string</db:code> identifier. By default, all message types are enabled.</db:para>
<db:para>Only one translation unit in a library or executable can define a category with a specific name. The implicitly-defined <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> object is created on first use, in a thread-safe manner.</db:para>
<db:para>This macro must be used outside of a class or method.</db:para>
<db:para>This macro was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#Q_DECLARE_LOGGING_CATEGORY">Q_DECLARE_LOGGING_CATEGORY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_LOGGING_CATEGORY-1">
<db:title>[since 5.4] Q_LOGGING_CATEGORY(<db:emphasis>name</db:emphasis>, <db:emphasis>string</db:emphasis>, <db:emphasis>msgType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>Q_LOGGING_CATEGORY</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type></db:type>
<db:parameter>msgType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Q_LOGGING_CATEGORY(name, string, msgType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Defines a logging category <db:code role="parameter">name</db:code>, and makes it configurable under the <db:code role="parameter">string</db:code> identifier. By default, messages of <db:link xlink:href="qtglobal.xml#QtMsgType-enum">QtMsgType</db:link> <db:code role="parameter">msgType</db:code> and more severe are enabled, types with a lower severity are disabled.</db:para>
<db:para>Only one translation unit in a library or executable can define a category with a specific name. The implicitly-defined <db:link xlink:href="qloggingcategory.xml">QLoggingCategory</db:link> object is created on first use, in a thread-safe manner.</db:para>
<db:para>This macro must be used outside of a class or method. It is only defined if variadic macros are supported.</db:para>
<db:para>This macro was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qloggingcategory.xml#Q_DECLARE_LOGGING_CATEGORY">Q_DECLARE_LOGGING_CATEGORY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCCritical">
<db:title>[since 5.2] qCCritical(<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCCritical</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qCCritical(category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an output stream for critical messages in the logging category, <db:code role="parameter">category</db:code>.</db:para>
<db:para>The macro expands to code that checks whether <db:link xlink:href="qloggingcategory.xml#isCriticalEnabled">QLoggingCategory::isCriticalEnabled</db:link>() evaluates to true. If so, the stream arguments are processed and sent to the message handler.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCCritical(category) &amp;lt;&amp;lt; &quot;a critical message&quot;;
</db:programlisting>
<db:note>
<db:para>If the critical output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCCritical-1">
<db:title>[since 5.3] qCCritical(<db:emphasis>category</db:emphasis>, const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCCritical</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qCCritical(category, const char *message, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Logs a critical message, <db:code role="parameter">message</db:code>, in the logging category, <db:code role="parameter">category</db:code>. <db:code role="parameter">message</db:code> may contain place holders to be replaced by additional arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCCritical(category, &quot;a critical message logged into category %s&quot;, category.categoryName());
</db:programlisting>
<db:note>
<db:para>If the critical output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCDebug">
<db:title>[since 5.2] qCDebug(<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCDebug</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qCDebug(category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an output stream for debug messages in the logging category, <db:code role="parameter">category</db:code>.</db:para>
<db:para>The macro expands to code that checks whether <db:link xlink:href="qloggingcategory.xml#isDebugEnabled">QLoggingCategory::isDebugEnabled</db:link>() evaluates to true. If so, the stream arguments are processed and sent to the message handler.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCDebug(category) &amp;lt;&amp;lt; &quot;a debug message&quot;;
</db:programlisting>
<db:note>
<db:para>Arguments aren't processed if the debug output for that <db:code role="parameter">category</db:code> is not enabled, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCDebug-1">
<db:title>[since 5.3] qCDebug(<db:emphasis>category</db:emphasis>, const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCDebug</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qCDebug(category, const char *message, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Logs a debug message, <db:code role="parameter">message</db:code>, in the logging category, <db:code role="parameter">category</db:code>. <db:code role="parameter">message</db:code> may contain place holders to be replaced by additional arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCDebug(category, &quot;a debug message logged into category %s&quot;, category.categoryName());
</db:programlisting>
<db:note>
<db:para>Arguments aren't processed if the debug output for that <db:code role="parameter">category</db:code> is not enabled, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCInfo">
<db:title>[since 5.5] qCInfo(<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCInfo</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qCInfo(category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an output stream for informational messages in the logging category, <db:code role="parameter">category</db:code>.</db:para>
<db:para>The macro expands to code that checks whether <db:link xlink:href="qloggingcategory.xml#isInfoEnabled">QLoggingCategory::isInfoEnabled</db:link>() evaluates to true. If so, the stream arguments are processed and sent to the message handler.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCInfo(category) &amp;lt;&amp;lt; &quot;an informational message&quot;;
</db:programlisting>
<db:note>
<db:para>If the debug output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCInfo-1">
<db:title>[since 5.5] qCInfo(<db:emphasis>category</db:emphasis>, const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCInfo</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qCInfo(category, const char *message, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Logs an informational message, <db:code role="parameter">message</db:code>, in the logging category, <db:code role="parameter">category</db:code>. <db:code role="parameter">message</db:code> may contain place holders to be replaced by additional arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCInfo(category, &quot;an informational message logged into category %s&quot;, category.categoryName());
</db:programlisting>
<db:note>
<db:para>If the debug output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qInfo">qInfo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCWarning">
<db:title>[since 5.2] qCWarning(<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCWarning</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="signature">qCWarning(category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an output stream for warning messages in the logging category, <db:code role="parameter">category</db:code>.</db:para>
<db:para>The macro expands to code that checks whether <db:link xlink:href="qloggingcategory.xml#isWarningEnabled">QLoggingCategory::isWarningEnabled</db:link>() evaluates to true. If so, the stream arguments are processed and sent to the message handler.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCWarning(category) &amp;lt;&amp;lt; &quot;a warning message&quot;;
</db:programlisting>
<db:note>
<db:para>If the warning output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qCWarning-1">
<db:title>[since 5.3] qCWarning(<db:emphasis>category</db:emphasis>, const char *<db:emphasis>message</db:emphasis>, <db:emphasis>...</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:methodname>qCWarning</db:methodname>
<db:methodparam>
<db:type></db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>...</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">macrowithparams</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qCWarning(category, const char *message, ...)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Logs a warning message, <db:code role="parameter">message</db:code>, in the logging category, <db:code role="parameter">category</db:code>. <db:code role="parameter">message</db:code> may contain place holders to be replaced by additional arguments, similar to the C printf() function.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QLoggingCategory category(&quot;driver.usb&quot;);
    qCWarning(category, &quot;a warning message logged into category %s&quot;, category.categoryName());
</db:programlisting>
<db:note>
<db:para>If the warning output for a particular category isn't enabled, arguments won't be processed, so don't rely on any side effects.</db:para>
</db:note>
<db:para>This macro was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
