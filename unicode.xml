<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Unicode in Qt</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Information about support for Unicode in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="https://www.unicode.org/">Unicode</db:link> is the standard for encoding text in almost all languages spoken in the world. It is nowadays used as the native encoding for text on most modern operating systems. The major exception is Microsoft Windows that still has a dual system supporting code pages and Unicode for applications.</db:para>
<db:section xml:id="qt-s-classes-for-working-with-strings">
<db:title>Qt's Classes for Working with Strings</db:title>
<db:para>These classes are relevant when working with string data. For information about rendering text, see the <db:link xlink:href="richtext.xml">Rich Text Processing</db:link> overview, and if your string data is in XML, see the <db:link xlink:href="xml-processing.xml">XML Processing</db:link> overview.</db:para>
<db:variablelist role="string-processing">
<db:varlistentry>
<db:term><db:link xlink:href="qanystringview.xml" xlink:role="class">QAnyStringView</db:link></db:term>
<db:listitem>
<db:para>The QAnyStringView class provides a unified view on Latin-1, UTF-8, or UTF-16 strings with a read-only subset of the QString API.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearray.xml" xlink:role="class">QByteArray</db:link></db:term>
<db:listitem>
<db:para>The QByteArray class provides an array of bytes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearraylist.xml" xlink:role="class">QByteArrayList</db:link></db:term>
<db:listitem>
<db:para>The QByteArrayList class provides a list of byte arrays.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearraymatcher.xml" xlink:role="class">QByteArrayMatcher</db:link></db:term>
<db:listitem>
<db:para>The QByteArrayMatcher class holds a sequence of bytes that can be quickly matched in a byte array.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qbytearrayview.xml" xlink:role="class">QByteArrayView</db:link></db:term>
<db:listitem>
<db:para>The QByteArrayView class provides a view on an array of bytes with a read-only subset of the QByteArray API.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qchar.xml" xlink:role="class">QChar</db:link></db:term>
<db:listitem>
<db:para>The QChar class provides a 16-bit Unicode character.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollator.xml" xlink:role="class">QCollator</db:link></db:term>
<db:listitem>
<db:para>The QCollator class compares strings according to a localized collation algorithm.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcollatorsortkey.xml" xlink:role="class">QCollatorSortKey</db:link></db:term>
<db:listitem>
<db:para>The QCollatorSortKey class can be used to speed up string collation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlatin1char.xml" xlink:role="class">QLatin1Char</db:link></db:term>
<db:listitem>
<db:para>The QLatin1Char class provides an 8-bit ASCII/Latin-1 character.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlatin1stringmatcher.xml" xlink:role="class">QLatin1StringMatcher</db:link></db:term>
<db:listitem>
<db:para>Optimized search for substring in Latin-1 text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlatin1stringview.xml" xlink:role="class">QLatin1StringView</db:link></db:term>
<db:listitem>
<db:para>The QLatin1StringView class provides a thin wrapper around a US-ASCII/Latin-1 encoded string literal.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocale.xml" xlink:role="class">QLocale</db:link></db:term>
<db:listitem>
<db:para>The QLocale class converts between numbers and their string representations in various languages.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstaticbytearraymatcher.xml" xlink:role="class">QStaticByteArrayMatcher</db:link></db:term>
<db:listitem>
<db:para>The QStaticByteArrayMatcher class is a compile-time version of QByteArrayMatcher.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstaticlatin1stringmatcher.xml" xlink:role="class">QStaticLatin1StringMatcher</db:link></db:term>
<db:listitem>
<db:para>The QStaticLatin1StringMatcher class is a compile-time version of QLatin1StringMatcher.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstring.xml" xlink:role="class">QString</db:link></db:term>
<db:listitem>
<db:para>The QString class provides a Unicode character string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringlist.xml" xlink:role="class">QStringList</db:link></db:term>
<db:listitem>
<db:para>The QStringList class provides a list of strings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringmatcher.xml" xlink:role="class">QStringMatcher</db:link></db:term>
<db:listitem>
<db:para>The QStringMatcher class holds a sequence of characters that can be quickly matched in a Unicode string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringref.xml" xlink:role="class">QStringRef</db:link></db:term>
<db:listitem>
<db:para>The QStringRef class provides a thin wrapper around QString substrings.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringtokenizer.xml" xlink:role="class">QStringTokenizer</db:link></db:term>
<db:listitem>
<db:para>The QStringTokenizer class splits strings into tokens along given separators.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qstringview.xml" xlink:role="class">QStringView</db:link></db:term>
<db:listitem>
<db:para>The QStringView class provides a unified view on UTF-16 strings with a read-only subset of the QString API.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextboundaryfinder.xml" xlink:role="class">QTextBoundaryFinder</db:link></db:term>
<db:listitem>
<db:para>The QTextBoundaryFinder class provides a way of finding Unicode text boundaries in a string.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtextstream.xml" xlink:role="class">QTextStream</db:link></db:term>
<db:listitem>
<db:para>The QTextStream class provides a convenient interface for reading and writing text.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qutf8stringview.xml" xlink:role="class">QUtf8StringView</db:link></db:term>
<db:listitem>
<db:para>The QUtf8StringView class provides a unified view on UTF-8 strings with a read-only subset of the QString API.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="information-about-unicode-on-the-web">
<db:title>Information about Unicode on the Web</db:title>
<db:para>The <db:link xlink:href="https://www.unicode.org/">Unicode Consortium</db:link> has a number of documents available, including</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://www.unicode.org/versions/latest/">The current version of the standard</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://www.unicode.org/standard/principles.html">A technical introduction to Unicode</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://www.unicode.org/standard/standard.html">The home page for the standard</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="unicode-in-qt">
<db:title>Unicode in Qt</db:title>
<db:para>In Qt, and in most applications that use Qt, most or all user-visible strings are stored using Unicode. Qt provides:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Translation to/from legacy encoding for file I/O: see <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> and <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for locale specific Input Methods and keyboards.</db:para>
</db:listitem>
<db:listitem>
<db:para>A string class, <db:link xlink:href="qstring.xml">QString</db:link>, that stores Unicode characters, with support for migrating from C strings including fast translation to and from UTF-8, ISO8859-1 and US-ASCII, and all the usual string operations.</db:para>
</db:listitem>
<db:listitem>
<db:para>Unicode-aware UI controls.</db:para>
</db:listitem>
<db:listitem>
<db:para>Unicode compliant text segmentation (<db:link xlink:href="qtextboundaryfinder.xml">QTextBoundaryFinder</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>Unicode compliant line breaking and text rendering</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To fully benefit from Unicode, we recommend using <db:link xlink:href="qstring.xml">QString</db:link> for storing all user-visible strings, and performing all text file I/O using <db:link xlink:href="qtextstream.xml">QTextStream</db:link>.</db:para>
<db:para>All the function arguments in Qt that may be user-visible strings, <db:link xlink:href="qlabel.xml#text-prop">QLabel::setText</db:link>() and a many others, take const QString &amp;s. <db:link xlink:href="qstring.xml">QString</db:link> provides implicit casting from const char * so that things like</db:para>
<db:programlisting language="cpp">label-&amp;gt;setText(&quot;Password:&quot;);
</db:programlisting>
<db:para>will work. There is also a function, <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>(), that provides translation support, like this:</db:para>
<db:programlisting language="cpp">label-&amp;gt;setText(tr(&quot;Password:&quot;));
</db:programlisting>
<db:para><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() maps from const char * to a Unicode string, and uses installable <db:link xlink:href="qtranslator.xml">QTranslator</db:link> objects to do the mapping.</db:para>
<db:para>Qt provides a number of built-in <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link> classes, that is, classes that know how to translate between Unicode and legacy encodings to support programs that must talk to other programs or read/write files in legacy file formats.</db:para>
<db:para>Conversion to/from const char * uses a UTF-8. However, applications can easily find codecs for other locales, and set any open file or network connection to use a special codec.</db:para>
<db:para>Since US-ASCII and ISO-8859-1 are so common, there are also especially fast functions for mapping to and from them. For example, to open an application's icon one might do this:</db:para>
<db:programlisting language="cpp">QFile file(QString::fromLatin1(&quot;appicon.png&quot;));
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">QFile file(QLatin1String(&quot;appicon.png&quot;));
</db:programlisting>
<db:para>Qt supports rendering text in most languages written in the world. The detailed list of supported writing systems depends a bit on operating system support and font availability on the target system.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="internationalization.xml">Internationalization with Qt</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
