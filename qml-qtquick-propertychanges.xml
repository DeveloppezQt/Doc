<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PropertyChanges QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes new property bindings or values for a state.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>PropertyChanges is part of <db:simplelist><db:member>qtquick-states</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> is used to define the property values or bindings in a <db:link xlink:href="qml-qtquick-state.xml">State</db:link>. This enables an item's property values to be changed when it <db:link xlink:href="qtquick-statesanimations-states.xml">changes between states</db:link>.</db:para>
<db:para>To create a <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> object, bind to properties of the target item like you would bind to local properties. This way you can define the new property values or bindings. For example:</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: container
    width: 300; height: 300

    Rectangle {
        id: rect
        width: 100; height: 100
        color: &quot;red&quot;

        MouseArea {
           id: mouseArea
           anchors.fill: parent
        }

        states: State {
           name: &quot;resized&quot;; when: mouseArea.pressed
           PropertyChanges {
               rect {
                   color: &quot;blue&quot;
                   height: container.height
               }
           }
        }
    }
}
</db:programlisting>
<db:para>When the mouse is pressed, the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> changes to the <db:emphasis>resized</db:emphasis> state. In this state, the <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> object sets the rectangle's color to blue and the height value to that of container.height.</db:para>
<db:para>Note this automatically binds rect.height to container.height in the <db:emphasis>resized</db:emphasis> state. If a property binding should not be established, and the height should just be set to the value of container.height at the time of the state change, set the <db:link xlink:href="qml-qtquick-propertychanges.xml#explicit-prop">explicit</db:link> property to true.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> object can also override the default signal handler for an object to implement a signal handler specific to the new state:</db:para>
<db:programlisting language="qml">PropertyChanges {
    myMouseArea.onClicked: doSomethingDifferent()
}
</db:programlisting>
<db:note>
<db:para><db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> can be used to change anchor margins, but not other anchor values; use <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link> for this instead. Similarly, to change an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>'s <db:link xlink:href="qml-qtquick-item.xml#parent-prop">parent</db:link> value, use <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link> instead.</db:para>
</db:note>
<db:section xml:id="resetting-property-values">
<db:title>Resetting Property Values</db:title>
<db:para>The undefined value can be used to reset the property value for a state. In the following example, when myText changes to the <db:emphasis>widerText</db:emphasis> state, its width property is reset, giving the text its natural width and displaying the whole string on a single line.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 300; height: 200

    Text {
        id: myText
        width: 50
        wrapMode: Text.WordWrap
        text: &quot;a text string that is longer than 50 pixels&quot;

        states: State {
            name: &quot;widerText&quot;
            PropertyChanges { myText.width: undefined }
        }
    }

    MouseArea {
        anchors.fill: parent
        onClicked: myText.state = &quot;widerText&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="immediate-property-changes-in-transitions">
<db:title>Immediate Property Changes in Transitions</db:title>
<db:para>When <db:link xlink:href="qtquick-statesanimations-animations.xml">Transitions</db:link> are used to animate state changes, they animate properties from their values in the current state to those defined in the new state (as defined by <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> objects). However, it is sometimes desirable to set a property value <db:emphasis>immediately</db:emphasis> during a <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link>, without animation; in these cases, the <db:link xlink:href="qml-qtquick-propertyaction.xml">PropertyAction</db:link> type can be used to force an immediate property change.</db:para>
<db:para>See the <db:link xlink:href="qml-qtquick-propertyaction.xml">PropertyAction</db:link> documentation for more details.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> and <db:link xlink:href="qml-qtquick-item.xml#enabled-prop">enabled</db:link> properties of <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> do not behave exactly the same as other properties in <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link>. Since these properties can be changed implicitly through their parent's state, they should be set explicitly in all <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link>. An item will still not be enabled/visible if one of its parents is not enabled or visible.</db:para>
</db:note>
<db:note>
<db:para>For backwards compatibility with Qt 5, you can also specify <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> using the <db:link xlink:href="qml-qtquick-propertychanges.xml#target-prop">target</db:link> property and plain property names without IDs. For example: PropertyChanges { target: myItem; x: 15 }. The form with ID instead of <db:link xlink:href="qml-qtquick-propertychanges.xml#target-prop">target</db:link> is recommended. You may also need to use the form with <db:link xlink:href="qml-qtquick-propertychanges.xml#target-prop">target</db:link> if the file is to be edited with <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-design-studio">Qt Design Studio</db:link>. Mind that <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-design-studio">Qt Design Studio</db:link> also imposes a number of further restrictions on the files it can work with.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-animation-example.xml#states">States example</db:link></db:member>
<db:member><db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link></db:member>
<db:member><db:link xlink:href="qtqml-index.xml">Qt Qml</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="explicit-prop">
<db:title>explicit : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>explicit</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If explicit is set to true, any potential bindings will be interpreted as once-off assignments that occur when the state is entered.</db:para>
<db:para>In the following example, the addition of explicit prevents myItem.width from being bound to parent.width. Instead, it is assigned the value of parent.width at the time of the state change.</db:para>
<db:programlisting language="qml">PropertyChanges {
    target: myItem
    explicit: true
    width: parent.width
}
</db:programlisting>
<db:para>By default, explicit is false.</db:para>
</db:section>
<db:section xml:id="restoreEntryValues-prop">
<db:title>restoreEntryValues : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>restoreEntryValues</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the previous values should be restored when leaving the state.</db:para>
<db:para>The default value is true. Setting this value to false creates a temporary state that has permanent effects on property values.</db:para>
</db:section>
<db:section xml:id="target-prop">
<db:title>target : QtObject</db:title>
<db:fieldsynopsis>
<db:type>QtObject</db:type>
<db:varname>target</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the object which contains the properties to be changed.</db:para>
<db:note>
<db:para>You generally don't have to use this property. It only exists for compatibility with Qt 5 and for compatibility with <db:link xlink:href="qtquick-tools-and-utilities.xml#qt-design-studio">Qt Design Studio</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
