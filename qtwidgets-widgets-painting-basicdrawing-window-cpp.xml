<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Basic Drawing Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Basic Drawing example shows how to display basic graphics primitives in a variety of styles using the <db:link xlink:href="qpainter.xml">QPainter</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;renderarea.h&quot;
#include &quot;window.h&quot;

#include &amp;lt;QtWidgets&amp;gt;

const int IdRole = Qt::UserRole;

Window::Window()
{
    renderArea = new RenderArea;

    shapeComboBox = new QComboBox;
    shapeComboBox-&amp;gt;addItem(tr(&quot;Polygon&quot;), RenderArea::Polygon);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Rectangle&quot;), RenderArea::Rect);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Rounded Rectangle&quot;), RenderArea::RoundedRect);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Ellipse&quot;), RenderArea::Ellipse);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Pie&quot;), RenderArea::Pie);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Chord&quot;), RenderArea::Chord);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Path&quot;), RenderArea::Path);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Line&quot;), RenderArea::Line);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Polyline&quot;), RenderArea::Polyline);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Arc&quot;), RenderArea::Arc);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Points&quot;), RenderArea::Points);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Text&quot;), RenderArea::Text);
    shapeComboBox-&amp;gt;addItem(tr(&quot;Pixmap&quot;), RenderArea::Pixmap);

    shapeLabel = new QLabel(tr(&quot;&amp;amp;Shape:&quot;));
    shapeLabel-&amp;gt;setBuddy(shapeComboBox);

    penWidthSpinBox = new QSpinBox;
    penWidthSpinBox-&amp;gt;setRange(0, 20);
    penWidthSpinBox-&amp;gt;setSpecialValueText(tr(&quot;0 (cosmetic pen)&quot;));

    penWidthLabel = new QLabel(tr(&quot;Pen &amp;amp;Width:&quot;));
    penWidthLabel-&amp;gt;setBuddy(penWidthSpinBox);

    penStyleComboBox = new QComboBox;
    penStyleComboBox-&amp;gt;addItem(tr(&quot;Solid&quot;), static_cast&amp;lt;int&amp;gt;(Qt::SolidLine));
    penStyleComboBox-&amp;gt;addItem(tr(&quot;Dash&quot;), static_cast&amp;lt;int&amp;gt;(Qt::DashLine));
    penStyleComboBox-&amp;gt;addItem(tr(&quot;Dot&quot;), static_cast&amp;lt;int&amp;gt;(Qt::DotLine));
    penStyleComboBox-&amp;gt;addItem(tr(&quot;Dash Dot&quot;), static_cast&amp;lt;int&amp;gt;(Qt::DashDotLine));
    penStyleComboBox-&amp;gt;addItem(tr(&quot;Dash Dot Dot&quot;), static_cast&amp;lt;int&amp;gt;(Qt::DashDotDotLine));
    penStyleComboBox-&amp;gt;addItem(tr(&quot;None&quot;), static_cast&amp;lt;int&amp;gt;(Qt::NoPen));

    penStyleLabel = new QLabel(tr(&quot;&amp;amp;Pen Style:&quot;));
    penStyleLabel-&amp;gt;setBuddy(penStyleComboBox);

    penCapComboBox = new QComboBox;
    penCapComboBox-&amp;gt;addItem(tr(&quot;Flat&quot;), Qt::FlatCap);
    penCapComboBox-&amp;gt;addItem(tr(&quot;Square&quot;), Qt::SquareCap);
    penCapComboBox-&amp;gt;addItem(tr(&quot;Round&quot;), Qt::RoundCap);

    penCapLabel = new QLabel(tr(&quot;Pen &amp;amp;Cap:&quot;));
    penCapLabel-&amp;gt;setBuddy(penCapComboBox);

    penJoinComboBox = new QComboBox;
    penJoinComboBox-&amp;gt;addItem(tr(&quot;Miter&quot;), Qt::MiterJoin);
    penJoinComboBox-&amp;gt;addItem(tr(&quot;Bevel&quot;), Qt::BevelJoin);
    penJoinComboBox-&amp;gt;addItem(tr(&quot;Round&quot;), Qt::RoundJoin);

    penJoinLabel = new QLabel(tr(&quot;Pen &amp;amp;Join:&quot;));
    penJoinLabel-&amp;gt;setBuddy(penJoinComboBox);

    brushStyleComboBox = new QComboBox;
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Linear Gradient&quot;),
            static_cast&amp;lt;int&amp;gt;(Qt::LinearGradientPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Radial Gradient&quot;),
            static_cast&amp;lt;int&amp;gt;(Qt::RadialGradientPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Conical Gradient&quot;),
            static_cast&amp;lt;int&amp;gt;(Qt::ConicalGradientPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Texture&quot;), static_cast&amp;lt;int&amp;gt;(Qt::TexturePattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Solid&quot;), static_cast&amp;lt;int&amp;gt;(Qt::SolidPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Horizontal&quot;), static_cast&amp;lt;int&amp;gt;(Qt::HorPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Vertical&quot;), static_cast&amp;lt;int&amp;gt;(Qt::VerPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Cross&quot;), static_cast&amp;lt;int&amp;gt;(Qt::CrossPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Backward Diagonal&quot;), static_cast&amp;lt;int&amp;gt;(Qt::BDiagPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Forward Diagonal&quot;), static_cast&amp;lt;int&amp;gt;(Qt::FDiagPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Diagonal Cross&quot;), static_cast&amp;lt;int&amp;gt;(Qt::DiagCrossPattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 1&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense1Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 2&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense2Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 3&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense3Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 4&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense4Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 5&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense5Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 6&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense6Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;Dense 7&quot;), static_cast&amp;lt;int&amp;gt;(Qt::Dense7Pattern));
    brushStyleComboBox-&amp;gt;addItem(tr(&quot;None&quot;), static_cast&amp;lt;int&amp;gt;(Qt::NoBrush));

    brushStyleLabel = new QLabel(tr(&quot;&amp;amp;Brush:&quot;));
    brushStyleLabel-&amp;gt;setBuddy(brushStyleComboBox);

    otherOptionsLabel = new QLabel(tr(&quot;Options:&quot;));
    antialiasingCheckBox = new QCheckBox(tr(&quot;&amp;amp;Antialiasing&quot;));
    transformationsCheckBox = new QCheckBox(tr(&quot;&amp;amp;Transformations&quot;));

    connect(shapeComboBox, SIGNAL(activated(int)),
            this, SLOT(shapeChanged()));
    connect(penWidthSpinBox, SIGNAL(valueChanged(int)),
            this, SLOT(penChanged()));
    connect(penStyleComboBox, SIGNAL(activated(int)),
            this, SLOT(penChanged()));
    connect(penCapComboBox, SIGNAL(activated(int)),
            this, SLOT(penChanged()));
    connect(penJoinComboBox, SIGNAL(activated(int)),
            this, SLOT(penChanged()));
    connect(brushStyleComboBox, SIGNAL(activated(int)),
            this, SLOT(brushChanged()));
    connect(antialiasingCheckBox, SIGNAL(toggled(bool)),
            renderArea, SLOT(setAntialiased(bool)));
    connect(transformationsCheckBox, SIGNAL(toggled(bool)),
            renderArea, SLOT(setTransformed(bool)));

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;setColumnStretch(0, 1);
    mainLayout-&amp;gt;setColumnStretch(3, 1);
    mainLayout-&amp;gt;addWidget(renderArea, 0, 0, 1, 4);
    mainLayout-&amp;gt;addWidget(shapeLabel, 2, 0, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(shapeComboBox, 2, 1);
    mainLayout-&amp;gt;addWidget(penWidthLabel, 3, 0, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(penWidthSpinBox, 3, 1);
    mainLayout-&amp;gt;addWidget(penStyleLabel, 4, 0, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(penStyleComboBox, 4, 1);
    mainLayout-&amp;gt;addWidget(penCapLabel, 3, 2, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(penCapComboBox, 3, 3);
    mainLayout-&amp;gt;addWidget(penJoinLabel, 2, 2, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(penJoinComboBox, 2, 3);
    mainLayout-&amp;gt;addWidget(brushStyleLabel, 4, 2, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(brushStyleComboBox, 4, 3);
    mainLayout-&amp;gt;addWidget(otherOptionsLabel, 5, 0, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(antialiasingCheckBox, 5, 1, 1, 1, Qt::AlignRight);
    mainLayout-&amp;gt;addWidget(transformationsCheckBox, 5, 2, 1, 2, Qt::AlignRight);
    setLayout(mainLayout);

    shapeChanged();
    penChanged();
    brushChanged();
    antialiasingCheckBox-&amp;gt;setChecked(true);

    setWindowTitle(tr(&quot;Basic Drawing&quot;));
}

void Window::shapeChanged()
{
    RenderArea::Shape shape = RenderArea::Shape(shapeComboBox-&amp;gt;itemData(
            shapeComboBox-&amp;gt;currentIndex(), IdRole).toInt());
    renderArea-&amp;gt;setShape(shape);
}

void Window::penChanged()
{
    int width = penWidthSpinBox-&amp;gt;value();
    Qt::PenStyle style = Qt::PenStyle(penStyleComboBox-&amp;gt;itemData(
            penStyleComboBox-&amp;gt;currentIndex(), IdRole).toInt());
    Qt::PenCapStyle cap = Qt::PenCapStyle(penCapComboBox-&amp;gt;itemData(
            penCapComboBox-&amp;gt;currentIndex(), IdRole).toInt());
    Qt::PenJoinStyle join = Qt::PenJoinStyle(penJoinComboBox-&amp;gt;itemData(
            penJoinComboBox-&amp;gt;currentIndex(), IdRole).toInt());

    renderArea-&amp;gt;setPen(QPen(Qt::blue, width, style, cap, join));
}

void Window::brushChanged()
{
    Qt::BrushStyle style = Qt::BrushStyle(brushStyleComboBox-&amp;gt;itemData(
            brushStyleComboBox-&amp;gt;currentIndex(), IdRole).toInt());

    if (style == Qt::LinearGradientPattern) {
        QLinearGradient linearGradient(0, 0, 100, 100);
        linearGradient.setColorAt(0.0, Qt::white);
        linearGradient.setColorAt(0.2, Qt::green);
        linearGradient.setColorAt(1.0, Qt::black);
        renderArea-&amp;gt;setBrush(linearGradient);
    } else if (style == Qt::RadialGradientPattern) {
        QRadialGradient radialGradient(50, 50, 50, 70, 70);
        radialGradient.setColorAt(0.0, Qt::white);
        radialGradient.setColorAt(0.2, Qt::green);
        radialGradient.setColorAt(1.0, Qt::black);
        renderArea-&amp;gt;setBrush(radialGradient);
    } else if (style == Qt::ConicalGradientPattern) {
        QConicalGradient conicalGradient(50, 50, 150);
        conicalGradient.setColorAt(0.0, Qt::white);
        conicalGradient.setColorAt(0.2, Qt::green);
        conicalGradient.setColorAt(1.0, Qt::black);
        renderArea-&amp;gt;setBrush(conicalGradient);
    } else if (style == Qt::TexturePattern) {
        renderArea-&amp;gt;setBrush(QBrush(QPixmap(&quot;:/images/brick.png&quot;)));
    } else {
        renderArea-&amp;gt;setBrush(QBrush(Qt::green, style));
    }
}

</db:programlisting>
</db:article>
