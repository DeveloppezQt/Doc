<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Bluetooth QML Chat Example</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example demonstrating communication through Bluetooth QML API.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Bluetooth QML Chat</db:emphasis> example shows how to use the <db:link xlink:href="qtbluetooth-index.xml">Qt Bluetooth</db:link> QML API to communicate with another application on a remote device using Bluetooth.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/chat-view.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Bluetooth QML Chat example implements a simple chat program between two parties. The application acts as client and attempts to connect to a Bluetooth socket server. It uses the <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml">BluetoothDiscoveryModel</db:link> type to find the server and <db:link xlink:href="qml-qtbluetooth-bluetoothsocket.xml">BluetoothSocket</db:link> type to facilitate the data exchange.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:para>The example only works in connection with the <db:link xlink:href="qtbluetooth-btchat-example.xml">Bluetooth Chat Example</db:link>. The Bluetooth Chat example launches the chat service and advertises it via the Bluetooth SDP protocol. It is important that the device running the Bluetooth Chat example actively advertises its SDP services. This can be checked using the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">QBluetoothLocalDevice::hostMode</db:link> property.</db:para>
</db:section>
<db:section xml:id="interacting-with-the-server">
<db:title>Interacting with the Server</db:title>
<db:para>The example application immediately starts the service discovery using the <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml">BluetoothDiscoveryModel</db:link> type:</db:para>
<db:programlisting language="qml">BluetoothDiscoveryModel {
    id: btModel
    running: true
    discoveryMode: BluetoothDiscoveryModel.MinimalServiceDiscovery
    uuidFilter: &quot;e8e10f95-1a70-4b27-9ccf-02010264e9c8&quot;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml#uuidFilter-prop">uuidFilter</db:link> property is used to only search for the chat server UUID and the <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml#running-prop">running</db:link> property activates the search. Once a service with a matching UUID is found the model emits the <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml#serviceDiscovered-signal">serviceDiscovered</db:link>(BluetoothService) signal.</db:para>
<db:programlisting language="qml">    onServiceDiscovered: {
        if (serviceFound)
            return
        serviceFound = true
        console.log(&quot;Found new service &quot; + service.deviceAddress + &quot; &quot; + service.deviceName + &quot; &quot; + service.serviceName);
        searchBox.appendText(&quot;\nConnecting to server...&quot;)
        remoteDeviceName = service.deviceName
        socket.setService(service)
    }
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml">BluetoothService</db:link> type encapsulates the details of the found chat server, such as the <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml#serviceName-prop">name</db:link> and <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml#serviceDescription-prop">description</db:link> of the service, as well as the <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml#deviceName-prop">name</db:link> and <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml#deviceAddress-prop">address</db:link> of the Bluetooth device offering the chat server. It is passed to the <db:link xlink:href="qml-qtbluetooth-bluetoothsocket.xml">BluetoothSocket</db:link> to establish the connection.</db:para>
<db:para>Once the connection is established the chat information is:</db:para>
<db:programlisting language="qml">BluetoothSocket {
    id: socket
    connected: true

    onSocketStateChanged: {
        console.log(&quot;Connected to server&quot;)
        top.state = &quot;chatActive&quot;
    }
}
</db:programlisting>
<db:para>The payload is received via the <db:link xlink:href="qml-qtbluetooth-bluetoothsocket.xml#stringData-prop">stringData</db:link> property:</db:para>
<db:programlisting language="qml">    onStringDataChanged: {
        console.log(&quot;Received data: &quot; )
        var data = remoteDeviceName + &quot;: &quot; + socket.stringData;
        data = data.substring(0, data.indexOf('\n'))
        chatContent.append({content: data})
    }
</db:programlisting>
<db:para>And sent by setting the same property:</db:para>
<db:programlisting language="qml">socket.stringData = data
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="chat/Button.qml">chat/Button.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/InputBox.qml">chat/InputBox.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/Search.qml">chat/Search.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/chat.pro">chat/chat.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/chat.qml">chat/chat.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/chat.qrc">chat/chat.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/qmlchat.cpp">chat/qmlchat.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="chat/images/clear.png">chat/images/clear.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/images/default.png">chat/images/default.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="chat/images/lineedit-bg.png">chat/images/lineedit-bg.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
