<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerCustomWidgetInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> class enables Qt Designer to access and construct custom widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerCustomWidgetInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> provides a custom widget with an interface. The class contains a set of functions that must be subclassed to return basic information about the widget, such as its class name and the name of its header file. Other functions must be implemented to initialize the plugin when it is loaded, and to construct instances of the custom widget for <db:emphasis>Qt Designer</db:emphasis> to use.</db:para>
<db:para>When implementing a custom widget you must subclass <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your widget to <db:emphasis>Qt Designer</db:emphasis>. For example, this is the declaration for the plugin used in the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Plugin example</db:link> that enables an analog clock custom widget to be used by <db:emphasis>Qt Designer</db:emphasis>:</db:para>
<db:programlisting language="cpp">class AnalogClockPlugin : public QObject, public QDesignerCustomWidgetInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
    Q_INTERFACES(QDesignerCustomWidgetInterface)
public:
    explicit AnalogClockPlugin(QObject *parent = nullptr);

    bool isContainer() const override;
    bool isInitialized() const override;
    QIcon icon() const override;
    QString domXml() const override;
    QString group() const override;
    QString includeFile() const override;
    QString name() const override;
    QString toolTip() const override;
    QString whatsThis() const override;
    QWidget *createWidget(QWidget *parent) override;
    void initialize(QDesignerFormEditorInterface *core) override;

private:
    bool initialized = false;
};
</db:programlisting>
<db:para>Note that the only part of the class definition that is specific to this particular custom widget is the class name. In addition, since we are implementing an interface, we must ensure that it's made known to the meta object system using the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro. This enables <db:emphasis>Qt Designer</db:emphasis> to use the <db:link xlink:href="qobject.xml#qobject_cast-1">qobject_cast</db:link>() function to query for supported interfaces using nothing but a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
<db:para>After <db:emphasis>Qt Designer</db:emphasis> loads a custom widget plugin, it calls the interface's <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">initialize</db:link>() function to enable it to set up any resources that it may need. This function is called with a <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> parameter that provides the plugin with a gateway to all of <db:emphasis>Qt Designer</db:emphasis>'s API.</db:para>
<db:para><db:emphasis>Qt Designer</db:emphasis> constructs instances of the custom widget by calling the plugin's <db:link xlink:href="qdesignercustomwidgetinterface.xml#createWidget">createWidget</db:link>() function with a suitable parent widget. Plugins must construct and return an instance of a custom widget with the specified parent widget.</db:para>
<db:para>Exporting your custom widget plugin to <db:emphasis>Qt Designer</db:emphasis> using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro. For example, if a library called <db:code>libcustomwidgetplugin.so</db:code> (on Unix) or <db:code>libcustomwidget.dll</db:code> (on Windows) contains a widget class called <db:code>MyCustomWidget</db:code>, we can export it by adding the following line to the file containing the plugin header:</db:para>
<db:programlisting language="cpp">Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetInterface&quot;)
</db:programlisting>
<db:para>This macro ensures that <db:emphasis>Qt Designer</db:emphasis> can access and construct the custom widget. Without this macro, there is no way for <db:emphasis>Qt Designer</db:emphasis> to use it.</db:para>
<db:para>When implementing a custom widget plugin, you build it as a separate library. If you want to include several custom widget plugins in the same library, you must in addition subclass <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link>.</db:para>
<db:warning>
<db:para>If your custom widget plugin contains <db:link xlink:href="qvariant.xml">QVariant</db:link> properties, be aware that only the following <db:link xlink:href="qvariant.xml#Type-enum" role="deprecated">types</db:link> are supported:</db:para>
</db:warning>
<db:itemizedlist>
<db:listitem>
<db:para>QVariant::ByteArray</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Bool</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Color</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Cursor</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Date</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::DateTime</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Double</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Int</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Point</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Rect</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Size</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::SizePolicy</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::String</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::Time</db:para>
</db:listitem>
<db:listitem>
<db:para>QVariant::UInt</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For a complete example using the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> class, see the <db:link xlink:href="qtdesigner-customwidgetplugin-example.xml">Custom Widget Example</db:link>. The example shows how to create a custom widget plugin for <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerCustomWidgetInterface">
<db:title>[virtual] QDesignerCustomWidgetInterface::~QDesignerCustomWidgetInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerCustomWidgetInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerCustomWidgetInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the custom widget interface.</db:para>
</db:section>
<db:section xml:id="codeTemplate">
<db:title>[virtual] QString QDesignerCustomWidgetInterface::codeTemplate() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>codeTemplate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString codeTemplate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is reserved for future use by <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="createWidget">
<db:title>[pure virtual] QWidget *QDesignerCustomWidgetInterface::createWidget(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>createWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * createWidget(QWidget *parent) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new instance of the custom widget, with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="domXml">
<db:title>[virtual] QString QDesignerCustomWidgetInterface::domXml() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>domXml</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString domXml() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the XML that is used to describe the custom widget's properties to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="group">
<db:title>[pure virtual] QString QDesignerCustomWidgetInterface::group() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>group</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString group() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the group to which the custom widget belongs.</db:para>
</db:section>
<db:section xml:id="icon">
<db:title>[pure virtual] QIcon QDesignerCustomWidgetInterface::icon() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QIcon</db:type>
<db:methodname>icon</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIcon icon() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the icon used to represent the custom widget in <db:emphasis>Qt Designer</db:emphasis>'s widget box.</db:para>
</db:section>
<db:section xml:id="includeFile">
<db:title>[pure virtual] QString QDesignerCustomWidgetInterface::includeFile() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>includeFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString includeFile() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the path to the include file that <db:link xlink:href="uic.xml">uic</db:link> uses when creating code for the custom widget.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[virtual] void QDesignerCustomWidgetInterface::initialize(QDesignerFormEditorInterface *<db:emphasis>formEditor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initialize</db:methodname>
<db:methodparam>
<db:type>QDesignerFormEditorInterface *</db:type>
<db:parameter>formEditor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialize(QDesignerFormEditorInterface *formEditor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes the widget for use with the specified <db:code role="parameter">formEditor</db:code> interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercustomwidgetinterface.xml#isInitialized">isInitialized</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isContainer">
<db:title>[pure virtual] bool QDesignerCustomWidgetInterface::isContainer() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isContainer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isContainer() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the custom widget is intended to be used as a container; otherwise returns false.</db:para>
<db:para>Most custom widgets are not used to hold other widgets, so their implementations of this function will return false, but custom containers will return true to ensure that they behave correctly in <db:emphasis>Qt Designer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="isInitialized">
<db:title>[virtual] bool QDesignerCustomWidgetInterface::isInitialized() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInitialized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInitialized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the widget has been initialized; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">initialize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>[pure virtual] QString QDesignerCustomWidgetInterface::name() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the class name of the custom widget supplied by the interface.</db:para>
<db:para>The name returned <db:emphasis>must</db:emphasis> be identical to the class name used for the custom widget.</db:para>
</db:section>
<db:section xml:id="toolTip">
<db:title>[pure virtual] QString QDesignerCustomWidgetInterface::toolTip() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toolTip</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toolTip() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a short description of the widget that can be used by <db:emphasis>Qt Designer</db:emphasis> in a tool tip.</db:para>
</db:section>
<db:section xml:id="whatsThis">
<db:title>[pure virtual] QString QDesignerCustomWidgetInterface::whatsThis() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>whatsThis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString whatsThis() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a description of the widget that can be used by <db:emphasis>Qt Designer</db:emphasis> in &quot;What's This?&quot; help for the widget.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QDESIGNER_WIDGET_EXPORT">
<db:title>[since 4.1] QDESIGNER_WIDGET_EXPORT</db:title>
<db:methodsynopsis>
<db:methodname>QDESIGNER_WIDGET_EXPORT</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QDESIGNER_WIDGET_EXPORT</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This macro is used when defining custom widgets to ensure that they are correctly exported from plugins for use with <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>On some platforms, the symbols required by <db:emphasis>Qt Designer</db:emphasis> to create new widgets are removed from plugins by the build system, making them unusable. Using this macro ensures that the symbols are retained on those platforms, and has no side effects on other platforms.</db:para>
<db:para>For example, the <db:link xlink:href="qtdesigner-worldtimeclockplugin-example.xml">World Time Clock Plugin</db:link> example exports a custom widget class with the following declaration:</db:para>
<db:programlisting language="cpp">class QDESIGNER_WIDGET_EXPORT WorldTimeClock : public QWidget
{
    Q_OBJECT
    ...
};
</db:programlisting>
<db:para>This macro was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
