<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGTexture Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> class is the base class for textures used in the scene graph.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGTexture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgdynamictexture.xml" xlink:role="class">QSGDynamicTexture</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Users can freely implement their own texture classes to support arbitrary input textures, such as YUV video frames or 8 bit alpha masks. The scene graph provides a default implementation for RGBA textures.The default implementation is not instantiated directly, rather they are constructed via factory functions, such as <db:link xlink:href="qquickwindow.xml#createTextureFromImage">QQuickWindow::createTextureFromImage</db:link>().</db:para>
<db:para>With the default implementation, each <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> is backed by a QRhiTexture, which in turn contains a native texture object, such as an OpenGL texture or a Vulkan image.</db:para>
<db:para>The size in pixels is given by <db:link xlink:href="qsgtexture.xml#textureSize">textureSize</db:link>(). <db:link xlink:href="qsgtexture.xml#hasAlphaChannel">hasAlphaChannel</db:link>() reports if the texture contains opacity values and <db:link xlink:href="qsgtexture.xml#hasMipmaps">hasMipmaps</db:link>() reports if the texture contains mipmap levels.</db:para>
<db:para><db:link xlink:href="qsgmaterial.xml">Materials</db:link> that work with textures reimplement <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">updateSampledImage</db:link>() to provide logic that decides which <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>'s underlying native texture should be exposed at a given shader resource binding point.</db:para>
<db:para><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> does not separate image (texture) and sampler objects. The parameters for filtering and wrapping can be specified with <db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>(), <db:link xlink:href="qsgtexture.xml#setFiltering">setFiltering</db:link>(), <db:link xlink:href="qsgtexture.xml#setHorizontalWrapMode">setHorizontalWrapMode</db:link>() and <db:link xlink:href="qsgtexture.xml#setVerticalWrapMode">setVerticalWrapMode</db:link>(). The scene graph and Qt's graphics abstraction takes care of creating separate sampler objects, when applicable.</db:para>
<db:section xml:id="texture-atlases">
<db:title>Texture Atlases</db:title>
<db:para>Some scene graph backends use texture atlasses, grouping multiple small textures into one large texture. If this is the case, the function <db:link xlink:href="qsgtexture.xml#isAtlasTexture">isAtlasTexture</db:link>() will return true. Atlases are used to aid the rendering algorithm to do better sorting which increases performance. Atlases are also essential for batching (merging together geometry to reduce the number of draw calls), because two instances of the same material using two different QSGTextures are not batchable, whereas if both QSGTextures refer to the same atlas, batching can happen, assuming the materials are otherwise compatible.</db:para>
<db:para>The location of the texture inside the atlas is given with the <db:link xlink:href="qsgtexture.xml#normalizedTextureSubRect">normalizedTextureSubRect</db:link>() function.</db:para>
<db:para>If the texture is used in such a way that atlas is not preferable, the function <db:link xlink:href="qsgtexture.xml#removedFromAtlas">removedFromAtlas</db:link>() can be used to extract a non-atlased copy.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-scenegraph-fboitem-example.xml">Scene Graph - Rendering FBOs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AnisotropyLevel-enum">
<db:title>[since 5.9] enum QSGTexture::AnisotropyLevel</db:title>
<db:enumsynopsis>
<db:enumname>AnisotropyLevel</db:enumname>
<db:enumitem>
<db:enumidentifier>AnisotropyNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Anisotropy2x</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Anisotropy4x</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Anisotropy8x</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Anisotropy16x</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the anisotropic filtering level to be used when the texture is not screen aligned.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::AnisotropyNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No anisotropic filtering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Anisotropy2x</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>2x anisotropic filtering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Anisotropy4x</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>4x anisotropic filtering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Anisotropy8x</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>8x anisotropic filtering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Anisotropy16x</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>16x anisotropic filtering.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.9.</db:para>
</db:section>
<db:section xml:id="Filtering-enum">
<db:title>enum QSGTexture::Filtering</db:title>
<db:enumsynopsis>
<db:enumname>Filtering</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Nearest</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Linear</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies how sampling of texels should filter when texture coordinates are not pixel aligned.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No filtering should occur. This value is only used together with <db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Nearest</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Sampling returns the nearest texel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Sampling returns a linear interpolation of the neighboring texels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WrapMode-enum">
<db:title>enum QSGTexture::WrapMode</db:title>
<db:enumsynopsis>
<db:enumname>WrapMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Repeat</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ClampToEdge</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MirroredRepeat</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies how the sampler should treat texture coordinates.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Repeat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only the fractional part of the texture coordinate is used, causing values above 1 and below 0 to repeat.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::ClampToEdge</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Values above 1 are clamped to 1 and values below 0 are clamped to 0.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::MirroredRepeat</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>When the texture coordinate is even, only the fractional part is used. When odd, the texture coordinate is set to <db:code>1 - fractional part</db:code>. This value has been introduced in Qt 5.10.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGTexture">
<db:title>QSGTexture::QSGTexture()</db:title>
<db:constructorsynopsis>
<db:methodname>QSGTexture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> base class.</db:para>
</db:section>
<db:section xml:id="dtor.QSGTexture">
<db:title>[override virtual] QSGTexture::~QSGTexture()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSGTexture</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSGTexture() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>.</db:para>
</db:section>
<db:section xml:id="anisotropyLevel">
<db:title>[since 5.9] QSGTexture::AnisotropyLevel QSGTexture::anisotropyLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGTexture::AnisotropyLevel</db:type>
<db:methodname>anisotropyLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture::AnisotropyLevel anisotropyLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the anisotropy level in use for filtering this texture.</db:para>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setAnisotropyLevel">setAnisotropyLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comparisonKey">
<db:title>[pure virtual, since 5.14] qint64 QSGTexture::comparisonKey() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>comparisonKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 comparisonKey() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a key suitable for comparing textures. Typically used in <db:link xlink:href="qsgmaterial.xml#compare">QSGMaterial::compare</db:link>() implementations.</db:para>
<db:para>Just comparing <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> pointers is not always sufficient because two <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> instances that refer to the same native texture object underneath should also be considered equal. Hence the need for this function.</db:para>
<db:para>Implementations of this function are not expected to, and should not create any graphics resources (native texture objects) in case there are none yet.</db:para>
<db:para>A <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> that does not have a native texture object underneath is typically <db:emphasis role="bold">not</db:emphasis> equal to any other <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>, so the return value has to be crafted accordingly. There are exceptions to this, in particular when atlasing is used (where multiple textures share the same atlas texture under the hood), that is then up to the subclass implementations to deal with as appropriate.</db:para>
<db:warning>
<db:para>This function can only be called from the rendering thread.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="convertToNormalizedSourceRect">
<db:title>QRectF QSGTexture::convertToNormalizedSourceRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>convertToNormalizedSourceRect</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF convertToNormalizedSourceRect(const QRectF &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code role="parameter">rect</db:code> converted to normalized coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#normalizedTextureSubRect">normalizedTextureSubRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filtering">
<db:title>QSGTexture::Filtering QSGTexture::filtering() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGTexture::Filtering</db:type>
<db:methodname>filtering</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture::Filtering filtering() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sampling mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setFiltering">setFiltering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAlphaChannel">
<db:title>[pure virtual] bool QSGTexture::hasAlphaChannel() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasAlphaChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasAlphaChannel() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the texture data contains an alpha channel.</db:para>
</db:section>
<db:section xml:id="hasMipmaps">
<db:title>[pure virtual] bool QSGTexture::hasMipmaps() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasMipmaps</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasMipmaps() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the texture data contains mipmap levels.</db:para>
</db:section>
<db:section xml:id="horizontalWrapMode">
<db:title>QSGTexture::WrapMode QSGTexture::horizontalWrapMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGTexture::WrapMode</db:type>
<db:methodname>horizontalWrapMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture::WrapMode horizontalWrapMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal wrap mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setHorizontalWrapMode">setHorizontalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAtlasTexture">
<db:title>[virtual] bool QSGTexture::isAtlasTexture() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAtlasTexture</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAtlasTexture() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this texture is part of an atlas or not.</db:para>
<db:para>The default implementation returns false.</db:para>
</db:section>
<db:section xml:id="mipmapFiltering">
<db:title>QSGTexture::Filtering QSGTexture::mipmapFiltering() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGTexture::Filtering</db:type>
<db:methodname>mipmapFiltering</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture::Filtering mipmapFiltering() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether mipmapping should be used when sampling from this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeInterface">
<db:title>QNativeInterface *QSGTexture::nativeInterface() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNativeInterface *</db:type>
<db:methodname>nativeInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNativeInterface * nativeInterface() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a native interface of the given type for the texture.</db:para>
<db:para>This function provides access to platform specific functionality of <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>, as declared in the <db:link xlink:href="qnativeinterface-sub-qtquick.xml">QNativeInterface</db:link> namespace:</db:para>
<db:variablelist role="native-interfaces-qsgtexture">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgd3d11texture.xml" xlink:role="class">QNativeInterface::QSGD3D11Texture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Direct3D 11 texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgmetaltexture.xml" xlink:role="class">QNativeInterface::QSGMetalTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Metal texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgopengltexture.xml" xlink:role="class">QNativeInterface::QSGOpenGLTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting OpenGL texture objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qsgvulkantexture.xml" xlink:role="class">QNativeInterface::QSGVulkanTexture</db:link></db:term>
<db:listitem>
<db:para>Provides access to and enables adopting Vulkan image objects.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>This allows accessing the underlying native texture object, such as, the <db:code>GLuint</db:code> texture ID with OpenGL, or the <db:code>VkImage</db:code> handle with Vulkan.</db:para>
<db:para>If the requested interface is not available a <db:code>nullptr</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="normalizedTextureSubRect">
<db:title>[virtual] QRectF QSGTexture::normalizedTextureSubRect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>normalizedTextureSubRect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF normalizedTextureSubRect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the rectangle inside <db:link xlink:href="qsgtexture.xml#textureSize">textureSize</db:link>() that this texture represents in normalized coordinates.</db:para>
<db:para>The default implementation returns a rect at position (0, 0) with width and height of 1.</db:para>
</db:section>
<db:section xml:id="removedFromAtlas">
<db:title>[virtual] QSGTexture *QSGTexture::removedFromAtlas(QRhiResourceUpdateBatch *<db:emphasis>resourceUpdates</db:emphasis> = nullptr) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSGTexture *</db:type>
<db:methodname>removedFromAtlas</db:methodname>
<db:methodparam>
<db:type>QRhiResourceUpdateBatch *</db:type>
<db:parameter>resourceUpdates</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture * removedFromAtlas(QRhiResourceUpdateBatch *resourceUpdates) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns a copy of the current texture which is removed from its atlas.</db:para>
<db:para>The current texture remains unchanged, so texture coordinates do not need to be updated.</db:para>
<db:para>Removing a texture from an atlas is primarily useful when passing it to a shader that operates on the texture coordinates 0-1 instead of the texture subrect inside the atlas.</db:para>
<db:para>If the texture is not part of a texture atlas, this function returns 0.</db:para>
<db:para>Implementations of this function are recommended to return the same instance for multiple calls to limit memory usage.</db:para>
<db:para><db:code role="parameter">resourceUpdates</db:code> is an optional resource update batch, on which texture operations, if any, are enqueued. Materials can retrieve an instance from <db:link xlink:href="qsgmaterialshader-renderstate.xml">QSGMaterialShader::RenderState</db:link>. When null, the removedFromAtlas() implementation creates its own batch and submit it right away. However, when a valid instance is specified, this function will not submit the update batch.</db:para>
<db:warning>
<db:para>This function can only be called from the rendering thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="setAnisotropyLevel">
<db:title>[since 5.9] void QSGTexture::setAnisotropyLevel(QSGTexture::AnisotropyLevel <db:emphasis>level</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAnisotropyLevel</db:methodname>
<db:methodparam>
<db:type>QSGTexture::AnisotropyLevel</db:type>
<db:parameter>level</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAnisotropyLevel(QSGTexture::AnisotropyLevel level)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the level of anisotropic filtering to <db:code role="parameter">level</db:code>. The default value is <db:link xlink:href="qsgtexture.xml#AnisotropyLevel-enum">QSGTexture::AnisotropyNone</db:link>, which means no anisotropic filtering is enabled.</db:para>
<db:note>
<db:para>The request may be ignored depending on the graphics API in use. There is no guarantee anisotropic filtering is supported at run time.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.9.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#anisotropyLevel">anisotropyLevel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFiltering">
<db:title>void QSGTexture::setFiltering(QSGTexture::Filtering <db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFiltering</db:methodname>
<db:methodparam>
<db:type>QSGTexture::Filtering</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFiltering(QSGTexture::Filtering filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the sampling mode to <db:code role="parameter">filter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#filtering">filtering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalWrapMode">
<db:title>void QSGTexture::setHorizontalWrapMode(QSGTexture::WrapMode <db:emphasis>hwrap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHorizontalWrapMode</db:methodname>
<db:methodparam>
<db:type>QSGTexture::WrapMode</db:type>
<db:parameter>hwrap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHorizontalWrapMode(QSGTexture::WrapMode hwrap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the horizontal wrap mode to <db:code role="parameter">hwrap</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#horizontalWrapMode">horizontalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmapFiltering">
<db:title>void QSGTexture::setMipmapFiltering(QSGTexture::Filtering <db:emphasis>filter</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMipmapFiltering</db:methodname>
<db:methodparam>
<db:type>QSGTexture::Filtering</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMipmapFiltering(QSGTexture::Filtering filter)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mipmap sampling mode to <db:code role="parameter">filter</db:code>.</db:para>
<db:para>Setting the mipmap filtering has no effect it the texture does not have mipmaps.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#mipmapFiltering">mipmapFiltering</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtexture.xml#hasMipmaps">hasMipmaps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalWrapMode">
<db:title>void QSGTexture::setVerticalWrapMode(QSGTexture::WrapMode <db:emphasis>vwrap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVerticalWrapMode</db:methodname>
<db:methodparam>
<db:type>QSGTexture::WrapMode</db:type>
<db:parameter>vwrap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVerticalWrapMode(QSGTexture::WrapMode vwrap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the vertical wrap mode to <db:code role="parameter">vwrap</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#verticalWrapMode">verticalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureSize">
<db:title>[pure virtual] QSize QSGTexture::textureSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>textureSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize textureSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the texture.</db:para>
</db:section>
<db:section xml:id="verticalWrapMode">
<db:title>QSGTexture::WrapMode QSGTexture::verticalWrapMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSGTexture::WrapMode</db:type>
<db:methodname>verticalWrapMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture::WrapMode verticalWrapMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical wrap mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setVerticalWrapMode">setVerticalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
