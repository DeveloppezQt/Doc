<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSGTexture Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> class is a baseclass for textures used in the scene graph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGTexture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgdynamictexture.xml" xlink:role="class">QSGDynamicTexture</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Users can freely implement their own texture classes to support arbitrary input textures, such as YUV video frames or 8 bit alpha masks. The scene graph backend provides a default implementation of normal color textures. As the implementation of these may be hardware specific, they are are constructed via the factory function <db:link xlink:href="qquickwindow.xml#createTextureFromImage">QQuickWindow::createTextureFromImage</db:link>().</db:para>
<db:para>The texture is a wrapper around an OpenGL texture, which texture id is given by <db:link xlink:href="qsgtexture.xml#textureId">textureId</db:link>() and which size in pixels is given by <db:link xlink:href="qsgtexture.xml#textureSize">textureSize</db:link>(). <db:link xlink:href="qsgtexture.xml#hasAlphaChannel">hasAlphaChannel</db:link>() reports if the texture contains opacity values and <db:link xlink:href="qsgtexture.xml#hasMipmaps">hasMipmaps</db:link>() reports if the texture contains mipmap levels.</db:para>
<db:para>To use a texture, call the <db:link xlink:href="qsgtexture.xml#bind">bind</db:link>() function. The texture parameters specifying how the texture is bound, can be specified with <db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>(), <db:link xlink:href="qsgtexture.xml#setFiltering">setFiltering</db:link>(), <db:link xlink:href="qsgtexture.xml#setHorizontalWrapMode">setHorizontalWrapMode</db:link>() and <db:link xlink:href="qsgtexture.xml#setVerticalWrapMode">setVerticalWrapMode</db:link>(). The texture will internally try to store these values to minimize the OpenGL state changes when the texture is bound.</db:para>
<db:section xml:id="texture-atlasses">
<db:title>Texture Atlasses</db:title>
<db:para>Some scene graph backends use texture atlasses, grouping multiple small textures into one large texture. If this is the case, the function <db:link xlink:href="qsgtexture.xml#isAtlasTexture">isAtlasTexture</db:link>() will return true. Atlasses are used to aid the rendering algorithm to do better sorting which increases performance. The location of the texture inside the atlas is given with the <db:link xlink:href="qsgtexture.xml#normalizedTextureSubRect">normalizedTextureSubRect</db:link>() function.</db:para>
<db:para>If the texture is used in such a way that atlas is not preferable, the function <db:link xlink:href="qsgtexture.xml#removedFromAtlas">removedFromAtlas</db:link>() can be used to extract a non-atlassed copy.</db:para>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-scenegraph-textureinsgnode-example.xml">Scene Graph - Rendering FBOs</db:link></db:member>
<db:member><db:link xlink:href="qtquick-scenegraph-textureinthread-example.xml">Scene Graph - Rendering FBOs in a thread</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Filtering-enum">
<db:title>enum QSGTexture::Filtering</db:title>
<db:para>Specifies how sampling of texels should filter when texture coordinates are not pixel aligned.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No filtering should occur. This value is only used together with <db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Nearest</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Sampling returns the nearest texel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Linear</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Sampling returns a linear interpolation of the neighboring texels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="WrapMode-enum">
<db:title>enum QSGTexture::WrapMode</db:title>
<db:para>Specifies how the texture should treat texture coordinates.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::Repeat</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Only the factional part of the texture coordiante is used, causing values above 1 and below 0 to repeat.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgtexture.xml">QSGTexture</db:link></db:emphasis>::ClampToEdge</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Values above 1 are clamped to 1 and values below 0 are clamped to 0.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSGTexture">
<db:title>QSGTexture::QSGTexture()</db:title>
<db:para>Constructs the <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> base class.</db:para>
</db:section>
<db:section xml:id="dtor.QSGTexture">
<db:title>[virtual noexcept] QSGTexture::~QSGTexture()</db:title>
<db:para>Destroys the <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>.</db:para>
</db:section>
<db:section xml:id="bind">
<db:title>[pure virtual] void QSGTexture::bind()</db:title>
<db:para>Call this function to bind this texture to the current texture target.</db:para>
<db:para>Binding a texture may also include uploading the texture data from a previously set <db:link xlink:href="qimage.xml">QImage</db:link>.</db:para>
<db:warning>
<db:para>This function can only be called from the rendering thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="convertToNormalizedSourceRect">
<db:title>QRectF QSGTexture::convertToNormalizedSourceRect(const QRectF &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Returns <db:code role="parameter">rect</db:code> converted to normalized coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#normalizedTextureSubRect">normalizedTextureSubRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filtering">
<db:title>QSGTexture::Filtering QSGTexture::filtering() const</db:title>
<db:para>Returns the sampling mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setFiltering">setFiltering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAlphaChannel">
<db:title>[pure virtual] bool QSGTexture::hasAlphaChannel() const</db:title>
<db:para>Returns true if the texture data contains an alpha channel.</db:para>
</db:section>
<db:section xml:id="hasMipmaps">
<db:title>[pure virtual] bool QSGTexture::hasMipmaps() const</db:title>
<db:para>Returns true if the texture data contains mipmap levels.</db:para>
</db:section>
<db:section xml:id="horizontalWrapMode">
<db:title>QSGTexture::WrapMode QSGTexture::horizontalWrapMode() const</db:title>
<db:para>Returns the horizontal wrap mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setHorizontalWrapMode">setHorizontalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAtlasTexture">
<db:title>[virtual] bool QSGTexture::isAtlasTexture() const</db:title>
<db:para>Returns weither this texture is part of an atlas or not.</db:para>
<db:para>The default implementation returns false.</db:para>
</db:section>
<db:section xml:id="mipmapFiltering">
<db:title>QSGTexture::Filtering QSGTexture::mipmapFiltering() const</db:title>
<db:para>Returns whether mipmapping should be used when sampling from this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setMipmapFiltering">setMipmapFiltering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalizedTextureSubRect">
<db:title>[virtual] QRectF QSGTexture::normalizedTextureSubRect() const</db:title>
<db:para>Returns the rectangle inside <db:link xlink:href="qsgtexture.xml#textureSize">textureSize</db:link>() that this texture represents in normalized coordinates.</db:para>
<db:para>The default implementation returns a rect at position (0, 0) with width and height of 1.</db:para>
</db:section>
<db:section xml:id="removedFromAtlas">
<db:title>[virtual] QSGTexture *QSGTexture::removedFromAtlas() const</db:title>
<db:para>This function returns a copy of the current texture which is removed from its atlas.</db:para>
<db:para>The current texture remains unchanged, so texture coordinates do not need to be updated.</db:para>
<db:para>Removing a texture from an atlas is primarily useful when passing it to a shader that operates on the texture coordinates 0-1 instead of the texture subrect inside the atlas.</db:para>
<db:para>If the texture is not part of a texture atlas, this function returns 0.</db:para>
<db:para>Implementations of this function are recommended to return the same instance for multiple calls to limit memory usage.</db:para>
<db:warning>
<db:para>This function can only be called from the rendering thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="setFiltering">
<db:title>void QSGTexture::setFiltering(QSGTexture::Filtering <db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets the sampling mode to be used for the upcoming <db:link xlink:href="qsgtexture.xml#bind">bind</db:link>() call to <db:code role="parameter">filter</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#filtering">filtering</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHorizontalWrapMode">
<db:title>void QSGTexture::setHorizontalWrapMode(QSGTexture::WrapMode <db:emphasis>hwrap</db:emphasis>)</db:title>
<db:para>Sets the horizontal wrap mode to be used for the upcoming <db:link xlink:href="qsgtexture.xml#bind">bind</db:link>() call to <db:code role="parameter">hwrap</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#horizontalWrapMode">horizontalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMipmapFiltering">
<db:title>void QSGTexture::setMipmapFiltering(QSGTexture::Filtering <db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Sets the mipmap sampling mode to be used for the upcoming <db:link xlink:href="qsgtexture.xml#bind">bind</db:link>() call to <db:code role="parameter">filter</db:code>.</db:para>
<db:para>Setting the mipmap filtering has no effect it the texture does not have mipmaps.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#mipmapFiltering">mipmapFiltering</db:link>()</db:member>
<db:member><db:link xlink:href="qsgtexture.xml#hasMipmaps">hasMipmaps</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVerticalWrapMode">
<db:title>void QSGTexture::setVerticalWrapMode(QSGTexture::WrapMode <db:emphasis>vwrap</db:emphasis>)</db:title>
<db:para>Sets the vertical wrap mode to be used for the upcoming <db:link xlink:href="qsgtexture.xml#bind">bind</db:link>() call to <db:code role="parameter">vwrap</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#verticalWrapMode">verticalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textureId">
<db:title>[pure virtual] int QSGTexture::textureId() const</db:title>
<db:para>Returns the OpenGL texture id for this texture.</db:para>
<db:para>The default value is 0, indicating that it is an invalid texture id.</db:para>
<db:para>The function should at all times return the correct texture id.</db:para>
<db:warning>
<db:para>This function can only be called from the rendering thread.</db:para>
</db:warning>
</db:section>
<db:section xml:id="textureSize">
<db:title>[pure virtual] QSize QSGTexture::textureSize() const</db:title>
<db:para>Returns the size of the texture.</db:para>
</db:section>
<db:section xml:id="updateBindOptions">
<db:title>void QSGTexture::updateBindOptions(bool <db:emphasis>force</db:emphasis> = false)</db:title>
<db:para>Update the texture state to match the filtering, mipmap and wrap options currently set.</db:para>
<db:para>If <db:code role="parameter">force</db:code> is true, all properties will be updated regardless of weither they have changed or not.</db:para>
</db:section>
<db:section xml:id="verticalWrapMode">
<db:title>QSGTexture::WrapMode QSGTexture::verticalWrapMode() const</db:title>
<db:para>Returns the vertical wrap mode to be used for this texture.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgtexture.xml#setVerticalWrapMode">setVerticalWrapMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
