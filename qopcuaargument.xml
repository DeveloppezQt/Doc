<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpcUaArgument Class</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>The OPC UA Argument type.</db:para>
<db:para>This class was introduced in Qt 5.11.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpcUaArgument</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.11</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opcua</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is the Qt OPC UA representation for the Argument type defined in OPC-UA part 3, 8.6.</db:para>
<db:para>The Argument type is mainly used for the values of the InputArguments and OutputArguments properties which describe the parameters and return values of method nodes.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpcUaArgument-2">
<db:title>QOpcUaArgument::QOpcUaArgument(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>dataTypeId</db:emphasis>, qint32 <db:emphasis>valueRank</db:emphasis>, const QList&lt;quint32&gt; &amp;<db:emphasis>arrayDimensions</db:emphasis>, const QOpcUaLocalizedText &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpcUaArgument</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dataTypeId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>valueRank</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>arrayDimensions</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QOpcUaLocalizedText &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaArgument(const QString &amp;name, const QString &amp;dataTypeId, qint32 valueRank, const QList&lt;quint32&gt; &amp;arrayDimensions, const QOpcUaLocalizedText &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an argument with name <db:code role="parameter">name</db:code>, data type id <db:code role="parameter">dataTypeId</db:code>, value rank <db:code role="parameter">valueRank</db:code>, array dimensions <db:code role="parameter">arrayDimensions</db:code> and description <db:code role="parameter">description</db:code>.</db:para>
</db:section>
<db:section xml:id="arrayDimensions">
<db:title>QList&lt;quint32&gt; QOpcUaArgument::arrayDimensions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;quint32&gt;</db:type>
<db:methodname>arrayDimensions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint32&gt; arrayDimensions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the array dimensions of the argument.</db:para>
<db:para>The array dimensions describe the length of each array dimension.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#setArrayDimensions">setArrayDimensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="arrayDimensionsRef">
<db:title>QList&lt;quint32&gt; &amp;QOpcUaArgument::arrayDimensionsRef()</db:title>
<db:methodsynopsis>
<db:type>QList&lt;quint32&gt; &amp;</db:type>
<db:methodname>arrayDimensionsRef</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint32&gt; &amp; arrayDimensionsRef()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the array dimensions of the argument.</db:para>
</db:section>
<db:section xml:id="dataTypeId">
<db:title>QString QOpcUaArgument::dataTypeId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>dataTypeId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString dataTypeId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data type node id of the argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#setDataTypeId">setDataTypeId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="description">
<db:title>QOpcUaLocalizedText QOpcUaArgument::description() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpcUaLocalizedText</db:type>
<db:methodname>description</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaLocalizedText description() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the description of the argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#setDescription">setDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QOpcUaArgument::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the argument.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#setName">setName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setArrayDimensions">
<db:title>void QOpcUaArgument::setArrayDimensions(const QList&lt;quint32&gt; &amp;<db:emphasis>arrayDimensions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setArrayDimensions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;quint32&gt; &amp;</db:type>
<db:parameter>arrayDimensions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setArrayDimensions(const QList&lt;quint32&gt; &amp;arrayDimensions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the array dimensions of the argument to <db:code role="parameter">arrayDimensions</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#arrayDimensions">arrayDimensions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDataTypeId">
<db:title>void QOpcUaArgument::setDataTypeId(const QString &amp;<db:emphasis>dataTypeId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDataTypeId</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>dataTypeId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDataTypeId(const QString &amp;dataTypeId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data type node id of the argument to <db:code role="parameter">dataTypeId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#dataTypeId">dataTypeId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>void QOpcUaArgument::setDescription(const QOpcUaLocalizedText &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDescription</db:methodname>
<db:methodparam>
<db:type>const QOpcUaLocalizedText &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDescription(const QOpcUaLocalizedText &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the description of the argument to <db:code role="parameter">description</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#description">description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QOpcUaArgument::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the argument to <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValueRank">
<db:title>void QOpcUaArgument::setValueRank(qint32 <db:emphasis>valueRank</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setValueRank</db:methodname>
<db:methodparam>
<db:type>qint32</db:type>
<db:parameter>valueRank</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setValueRank(qint32 valueRank)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the value rank of the argument to <db:code role="parameter">valueRank</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#valueRank">valueRank</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueRank">
<db:title>qint32 QOpcUaArgument::valueRank() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint32</db:type>
<db:methodname>valueRank</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint32 valueRank() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value rank of the argument. The value rank describes the structure of the value.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>ValueRank</db:para>
</db:th>
<db:th>
<db:para>Meaning</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>-3</db:para>
</db:td>
<db:td>
<db:para>Scalar or one dimensional array</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-2</db:para>
</db:td>
<db:td>
<db:para>Scalar or array with any number of dimensions</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-1</db:para>
</db:td>
<db:td>
<db:para>Not an array</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>0</db:para>
</db:td>
<db:td>
<db:para>Array with one or more dimensions</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>One dimensional array</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>&gt;1</db:para>
</db:td>
<db:td>
<db:para>Array with n dimensions</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopcuaargument.xml#setValueRank">setValueRank</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-QVariant">
<db:title>QVariant QOpcUaArgument::operator QVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>operator QVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant operator QVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts this argument to <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QOpcUaArgument &amp;QOpcUaArgument::operator=(const QOpcUaArgument &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QOpcUaArgument &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QOpcUaArgument &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpcUaArgument &amp; operator=(const QOpcUaArgument &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the values from <db:code role="parameter">rhs</db:code> in this argument.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QOpcUaArgument::operator==(const QOpcUaArgument &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QOpcUaArgument &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QOpcUaArgument &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this argument has the same value as <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
