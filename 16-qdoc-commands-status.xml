<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Reporting Status</db:title>
<db:productname>QDoc</db:productname>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="15-qdoc-commands-navigation.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Document Navigation"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="17-qdoc-commands-thread.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Thread Support"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>These commands are for indicating that a documented element is still under development, is becoming obsolete, is provided for compatibility reasons, or is simply not to be included in the public interface. The <db:link xlink:href="16-qdoc-commands-status.xml#since">\since</db:link> command is for including information about the version when a function or class first appeared.</db:para>
<db:anchor xml:id="compat-command"/>
<db:section xml:id="compat">
<db:title>\compat</db:title>
<db:para>The \compat command is for indicating that a class or function is part of the support library provided to keep old source code working.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>Usually an equivalent function or class is provided as an alternative.</db:para>
<db:para>If the command is used in the documentation of a class, the command expands to a warning that the referenced class is part of the support library. The warning is located at the top of the documentation page.</db:para>
<db:programlisting language="cpp">/ *!
    \class MyQt3SupportClass
    \compat
* /
</db:programlisting>
<db:para>QDoc renders this at the top of the MyQt3SupportClass class reference page.</db:para>
<db:blockquote><db:para><db:emphasis role="bold">This class is part of the Qt 3 support library.</db:emphasis> It is provided to keep old source code working. We strongly advise against using it in new code. See the <db:link xlink:href="http://doc.qt.digia.com/4.0/porting4.html">Porting Guide</db:link> for more information.</db:para>
</db:blockquote>
<db:para>If the command is used when documenting a function, QDoc will create and link to a separate page documenting Qt 3 support members when generating the reference documentation for the associated class.</db:para>
<db:programlisting language="cpp">/ *!
    \fn MyClass::MyQt3SupportMemberFunction
    \compat

    Use MyNewFunction() instead.
* /
</db:programlisting>
<db:para>QDoc renders this in myclass-qt3.html as:</db:para>
<db:blockquote><db:para><db:emphasis role="bold">The following class members are part of the Qt 3 support layer.</db:emphasis> They are provided to help you port old code to Qt 4. We advise against using them in new code.</db:para>
<db:para>...</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>void MyQt3SupportMemberFunction()</db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>...</db:para>
</db:blockquote>
<db:anchor xml:id="default-command"/>
</db:section>
<db:section xml:id="default">
<db:title>\default</db:title>
<db:para>The \default command is for marking a QML property as the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qdeclarativeintroduction.html#default-properties">default property</db:link>. The word default is shown in red in the documentation of the property.</db:para>
<db:programlisting language="cpp">/ *!
    \qmlproperty list&lt;Change&gt; State::changes
    This property holds the changes to apply for this state
    \default

    By default these changes are applied against the default state. If the state
    extends another state, then the changes are applied against the state being
    extended.
* /
</db:programlisting>
<db:para>See how QDoc renders this property on the reference page for the <db:link xlink:href="http://qt-project.org/doc/qt-4.7/qml-state.html#changes-prop">State</db:link> type.</db:para>
<db:anchor xml:id="obsolete-command"/>
</db:section>
<db:section xml:id="obsolete">
<db:title>\obsolete</db:title>
<db:para>The \obsolete command is for indicating that a function is being deprecated, and it should no longer be used in new code. There is no guarantee for how long it will remain in the library.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>When generating the reference documentation for a class, QDoc will create and link to a separate page documenting its obsolete functions. Usually an equivalent function is provided as an alternative.</db:para>
<db:programlisting language="cpp">/ *!
    \fn MyClass::MyObsoleteFunction
    \obsolete

    Use MyNewFunction() instead.
* /
</db:programlisting>
<db:para>QDoc renders this in myclass-obsolete.html as:</db:para>
<db:blockquote><db:para><db:emphasis role="bold">The following class members are obsolete.</db:emphasis> They are provided to keep old source code working. We strongly advise against using them in new code.</db:para>
<db:para>...</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>void MyObsoleteFunction() (obsolete)</db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>...</db:para>
</db:blockquote>
<db:anchor xml:id="internal-command"/>
</db:section>
<db:section xml:id="internal">
<db:title>\internal</db:title>
<db:para>The \internal command indicates that the referenced function is not part of the public interface.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>QDoc ignores the documentation as well as the documented item, when generating the associated class reference documentation.</db:para>
<db:programlisting language="cpp">/ *!
    \internal

    Tries to find the decimal separator. If it can't find
    it and the thousand delimiter is != '.' it will try to
    find a '.';
* /
int QDoubleSpinBoxPrivate::findDelimiter
        (const QString &amp;str, int index) const
{
    int dotindex = str.indexOf(delimiter, index);
    if (dotindex == -1 &amp;&amp; thousand != dot &amp;&amp; delimiter != dot)
        dotindex = str.indexOf(dot, index);
    return dotindex;
}
</db:programlisting>
<db:para>This function will not be included in the documentation.</db:para>
<db:anchor xml:id="preliminary-command"/>
</db:section>
<db:section xml:id="preliminary">
<db:title>\preliminary</db:title>
<db:para>The \preliminary command is for indicating that a referenced function is still under development.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>The \preliminary command expands to a notification in the function documentation, and marks the function as preliminary when it appears in lists.</db:para>
<db:programlisting language="cpp">/ *!
    \preliminary

    Returns information about the joining properties of the
    character (needed for certain languages such as
    Arabic).
* /
QChar::Joining QChar::joining() const
{
    return ::joining(*this);
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para><db:emphasis role="bold">This function is under development and subject to change.</db:emphasis></db:para>
<db:para>Returns information about the joining properties of the character (needed for certain languages such as Arabic).</db:para>
</db:blockquote>
<db:para>And the function's entry in <db:link xlink:href="qchar.xml">QChar</db:link>'s list of functions will be rendered as:</db:para>
<db:blockquote><db:itemizedlist>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
<db:listitem>
<db:para>Joining <db:link xlink:href="http://qt-project.org/doc/qt-5.0/qtcore/qchar.html#Joining-enum">joining</db:link>() const (preliminary)</db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
</db:blockquote>
<db:anchor xml:id="since-command"/>
</db:section>
<db:section xml:id="since">
<db:title>\since</db:title>
<db:para>The \since command tells in which minor release the associated functionality was added.</db:para>
<db:programlisting language="cpp">/ *!
    \since 4.1

    Returns an icon for \a standardIcon.

    ...

    \sa standardIconImplementation(), standardPixmap()
* /
QIcon QStyle::standardIcon(StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const
{
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:para>This function was introduced in Qt version 4.1</db:para>
<db:para>Returns an icon for <db:code role="parameter">standardIcon</db:code>.</db:para>
<db:para>...</db:para>
<db:para>See also <db:link xlink:href="">standardIconImplementation()</db:link> and <db:link xlink:href="">standardPixmap()</db:link>.</db:para>
</db:blockquote>
<db:para>QDoc generates the &quot;Qt&quot; reference from the <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project">project</db:link> configuration variable. For that reason this reference will change according to the current documentation project.</db:para>
<db:para>See also <db:link xlink:href="25-qdoc-configuration-derivedprojects.xml#project">project</db:link>.</db:para>
</db:section>
</db:article>
