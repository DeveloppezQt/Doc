<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Status</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="15-qdoc-commands-navigation.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Document Navigation"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="17-qdoc-commands-thread.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Thread Support"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>These commands are for indicating that a documented element has some special status. The element could be marked <db:emphasis>deprecated</db:emphasis>, that is, it's about to be made obsolete and no longer included in the public interface. The <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link> command is for specifying the version number in which a function or class first appeared. The <db:link xlink:href="16-qdoc-commands-status.xml#qmlabstract-command">\qmlabstract</db:link> command is for marking a QML type as an abstract base class.</db:para>
<db:anchor xml:id="abstract-command"/>
<db:anchor xml:id="qmlabstract-command"/>
<db:section xml:id="abstract-and-qmlabstract">
<db:title>\abstract and \qmlabstract</db:title>
<db:para>\abstract is a synonym for the \qmlabstract command. Add this command to the <db:link xlink:href="13-qdoc-commands-topics.xml#qmltype-command">\qmltype</db:link> comment for a QML type when that type is meant to be used <db:emphasis>only</db:emphasis> as an abstract base type. When a QML type is abstract, it means that the QML type that can't be instantiated. Instead, the properties in its public API are included in the public properties list on the reference page for each QML type that inherits the abstract QML type. The properties are documented as if they are properties of the inheriting QML type.</db:para>
<db:para>Normally, when a QML type is marked with <db:emphasis>\qmlabstract</db:emphasis>, it is also marked with <db:emphasis>\internal</db:emphasis> so that its reference page is not generated. It the abstract QML type is not marked internal, it will have a reference page in the documentation.</db:para>
<db:anchor xml:id="default-command"/>
</db:section>
<db:section xml:id="default">
<db:title>\default</db:title>
<db:para>The \default command is used for documenting a default value for a QML property. The command takes a single argument, which is displayed in the documentation as the default value.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \qmlproperty real Item::x
    \default 0.0
*/
</db:programlisting>
<db:para>If the default value is a non-empty string, use quotes:</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \qmlproperty string Item::state
    \default &quot;invalid&quot;
*/
</db:programlisting>
<db:anchor xml:id="qmldefault-command"/>
</db:section>
<db:section xml:id="qmldefault">
<db:title>\qmldefault</db:title>
<db:para>The \qmldefault command is for marking a QML property as the <db:link xlink:href="qtqml-syntax-objectattributes.xml#default-properties">default property</db:link>. The word <db:code>default</db:code> is displayed in the documentation of the property.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \qmlproperty list&amp;lt;Change&amp;gt; State::changes
    This property holds the changes to apply for this state.
    \qmldefault

    By default, these changes are applied against the default state. If the state
    extends another state, then the changes are applied against the state being
    extended.
*/
</db:programlisting>
<db:para>See how QDoc renders this property on the reference page for the <db:link xlink:href="qml-qtquick-state.xml#changes-prop">State</db:link> type.</db:para>
<db:anchor xml:id="dontdocument-command"/>
</db:section>
<db:section xml:id="dontdocument">
<db:title>\dontdocument</db:title>
<db:para>The \dontdocument command is only used in a dontdocument.qdoc file for a particular module. This file specifies publically declared classes or structs that are not meant to be documented. QDoc will not print warnings about missing \class comments for these classes and structs.</db:para>
<db:para>Below you will find the \dontdocument command in the dontdocument.qdoc for widgets:</db:para>
<db:programlisting language="cpp" role="bad">/*!
   \dontdocument (QTypeInfo QMetaTypeId)
*/
</db:programlisting>
<db:anchor xml:id="inheaderfile-command"/>
</db:section>
<db:section xml:id="inheaderfile">
<db:title>\inheaderfile</db:title>
<db:para>The \inheaderfile meta-command is used for overriding the include statement generated for a C++ class, namespace, or header file reference documentation.</db:para>
<db:para>By default, QDoc documents a <db:code>\class SomeClass</db:code> to be available with a following include statement:</db:para>
<db:programlisting language="cpp">#include &amp;lt;SomeClass&amp;gt;
</db:programlisting>
<db:para>If the actual include statement differs from the default, this can be documented as</db:para>
<db:programlisting language="cpp" role="bad">\class SomeClass
\inheaderfile Tools/SomeClass
...
</db:programlisting>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#class-command">\class</db:link> and <db:link xlink:href="13-qdoc-commands-topics.xml#headerfile-command">\headerfile</db:link>.</db:para>
<db:anchor xml:id="obsolete-command"/>
</db:section>
<db:section xml:id="obsolete">
<db:title>\obsolete</db:title>
<db:para>The \obsolete command is superceded by the \deprecated command.</db:para>
<db:para>This command is kept for backwards compatibility reasons only. It may be removed in a future version of QDoc. Use the \deprecated command instead.</db:para>
<db:para>See also <db:link xlink:href="16-qdoc-commands-status.xml#deprecated-command">\deprecated</db:link>.</db:para>
<db:anchor xml:id="deprecated-command"/>
</db:section>
<db:section xml:id="deprecated">
<db:title>\deprecated</db:title>
<db:para>The \deprecated command is for indicating that a function is being deprecated, and that it should no longer be used in new code. There is no guarantee for how long it will remain in the library.</db:para>
<db:para>The \deprecated command takes two optional arguments:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A version in square brackets (e.g. [6.2]).</db:para>
</db:listitem>
<db:listitem>
<db:para>A string with more information, for example a suggested replacement.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When generating the reference documentation for a class, QDoc will create and link to a separate page documenting its deprecated functions. It is good practice to suggest an equivalent function as an alternative.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \fn MyClass::MyDeprecatedFunction
    \deprecated [6.2] Use MyNewFunction() instead.
*/
</db:programlisting>
<db:para>QDoc renders this in <db:code>myclass-obsolete.html</db:code> as:</db:para>
<db:blockquote><db:bridgehead renderas="sect1">Deprecated Members for MyClass</db:bridgehead><db:para><db:emphasis role="bold">The following class members are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:para>...</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>void MyDeprecatedFunction() <db:code>(deprecated)</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting role="raw-html"><![CDATA[<hr />
        <h2>Member Function Documentation</h2>
        <h3>void MyDeprecatedFunction ()</h3>
        <p>This function is deprecated since 6.2. It is provided to
        keep old source code working. We strongly advise against using
        it in new code. Use MyNewFunction() instead.</p>]]></db:programlisting>
<db:para>...</db:para>
</db:blockquote>
<db:anchor xml:id="internal-command"/>
</db:section>
<db:section xml:id="internal">
<db:title>\internal</db:title>
<db:para>The \internal command indicates that the referenced function is not part of the public interface.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>QDoc ignores the documentation as well as the documented item, when generating the associated class reference documentation.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \internal

    Tries to find the decimal separator. If it can't find
    it and the thousand delimiter is != '.' it will try to
    find a '.';
*/
int QDoubleSpinBoxPrivate::findDelimiter
        (const QString &amp;amp;str, int index) const
{
    int dotindex = str.indexOf(delimiter, index);
    if (dotindex == -1 &amp;amp;&amp;amp; thousand != dot &amp;amp;&amp;amp; delimiter != dot)
        dotindex = str.indexOf(dot, index);
    return dotindex;
}
</db:programlisting>
<db:para>This function will not be included in the documentation, unless QDoc is called with the <db:code>-showinternal</db:code> command line option or the <db:code>QDOC_SHOW_INTERNAL</db:code> environment variable is set.</db:para>
<db:anchor xml:id="modulestate-command"/>
</db:section>
<db:section xml:id="modulestate">
<db:title>\modulestate</db:title>
<db:para>The \modulestate command can be used within a \module or \qmlmodule topic to provide a module state description other than <db:emphasis>preliminary</db:emphasis> or <db:emphasis>deprecated</db:emphasis>.</db:para>
<db:para>Rest of the line is taken as an argument that describes the module's state. For example:</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \module QtFoo
    \modulestate Technical Preview
*/
</db:programlisting>
<db:para>QDoc will then add this information on the module page:</db:para>
<db:blockquote><db:para>This module is in <db:emphasis>Technical Preview</db:emphasis> state.</db:para>
</db:blockquote>
<db:para>In HTML output, this state information appears also in the navigation bar (breadcrumbs) of reference pages for the module's members.</db:para>
<db:anchor xml:id="preliminary-command"/>
</db:section>
<db:section xml:id="preliminary">
<db:title>\preliminary</db:title>
<db:para>The \preliminary command is for indicating that a referenced function is still under development.</db:para>
<db:para>The command must stand on its own line.</db:para>
<db:para>The \preliminary command expands to a notification in the function documentation, and marks the function as preliminary when it appears in lists.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \preliminary

    Returns information about the joining type attributes of the
    character (needed for certain languages such as Arabic or
    Syriac).

*/
QChar::JoiningType QChar::joiningType() const
{
    return QChar::joiningType(ucs);
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">
        &lt;a href=&quot;http://doc.qt.io/qt-5/qchar.html#JoiningType-enum&quot;&gt;JoiningType&lt;/a&gt;
        QChar::joiningType() const</db:bridgehead><db:para><db:emphasis role="bold">This function is under development and subject to change.</db:emphasis></db:para>
<db:para>Returns information about the joining type attributes of the character (needed for certain languages such as Arabic or Syriac).</db:para>
</db:blockquote>
<db:para>And the function's entry in <db:link xlink:href="qchar.xml">QChar</db:link>'s list of public functions will be rendered as:</db:para>
<db:blockquote><db:itemizedlist>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
<db:listitem>
<db:para>JoiningType <db:link xlink:href="qchar.xml#joiningType">joiningType</db:link>() const <db:code>(preliminary)</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para>...</db:para>
</db:listitem>
</db:itemizedlist>
</db:blockquote>
<db:anchor xml:id="readonly-command"/>
</db:section>
<db:section xml:id="readonly">
<db:title>\readonly</db:title>
<db:para>The \readonly command is used in conjunction with a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> command to mark the QML property as read-only.</db:para>
<db:anchor xml:id="required-command"/>
</db:section>
<db:section xml:id="required">
<db:title>\required</db:title>
<db:para>The \required command is used in conjunction with a <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> command to mark the QML property as required.</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis> <db:link xlink:href="properties.xml">The Property System</db:link>.</db:para>
<db:anchor xml:id="since-command"/>
</db:section>
<db:section xml:id="since">
<db:title>\since</db:title>
<db:para>The \since command tells in which minor release the associated functionality was added.</db:para>
<db:programlisting language="cpp" role="bad">/*!
    \since 4.1

    Returns an icon for \a standardIcon.

    ...

    \sa standardPixmap()
*/
QIcon QStyle::standardIcon(StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const
{
}
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:blockquote><db:bridgehead renderas="sect3">QIcon QStyle::standardIcon(StandardPixmap standardIcon, const QStyleOption *option, const QWidget *widget) const</db:bridgehead><db:para>This function was introduced in Qt version 4.1.</db:para>
<db:para>Returns an icon for <db:code role="parameter">standardIcon</db:code>.</db:para>
<db:para>...</db:para>
<db:para><db:emphasis role="bold">See also</db:emphasis> <db:link xlink:href="qstyle.xml#standardPixmap" role="deprecated">standardPixmap</db:link>().</db:para>
</db:blockquote>
<db:para>If the argument passed to \since contains no spaces, it is assumed to be a version number string for the Qt project, and QDoc will prefix it with 'Qt' in the generated output. The argument can also contain the project name explicitly:</db:para>
<db:programlisting language="cpp" role="bad">\since MyFramework 2.0
</db:programlisting>
<db:para>In this case, the arguments (project and version) are used as is.</db:para>
<db:section xml:id="inheritance-of-since-information">
<db:title>Inheritance of Since Information</db:title>
<db:para>Since QDoc version 6.5, C++ classes and QML types inherit the \since statement from their respective <db:link xlink:href="13-qdoc-commands-topics.xml#module-command">module</db:link> or <db:link xlink:href="13-qdoc-commands-topics.xml#qmlmodule-command">QML module</db:link>, unless \since is explicitly used in the type documentation.</db:para>
</db:section>
<db:section xml:id="since-clause">
<db:title>Since Clause</db:title>
<db:para>The \value command allows an optional <db:emphasis>since</db:emphasis> clause, enclosed in square brackets, to immediately follow the command string. This is used for marking specific C++ enum values with since information.</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> and <db:link xlink:href="22-qdoc-configuration-generalvariables.xml#ignoresince">ignoresince</db:link>.</db:para>
<db:anchor xml:id="wrapper-command"/>
</db:section>
</db:section>
<db:section xml:id="wrapper">
<db:title>\wrapper</db:title>
<db:para>The \wrapper command, when used in a C++ class documentation, marks the class as a <db:emphasis>wrapper</db:emphasis> that provides access to a non-Qt API. This command is used for suppressing warnings that might otherwise be generated for members of such a class.</db:para>
</db:section>
</db:article>
