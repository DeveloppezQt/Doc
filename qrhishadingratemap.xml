<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiShadingRateMap Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An object that wraps a texture or another kind of native 3D API object.</db:para>
<db:para>This class was introduced in Qt 6.9.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.9</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qrhiresource.xml" xlink:role="class">QRhiResource</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:para>For an introduction to Variable Rate Shading (VRS), see <db:link xlink:href="https://learn.microsoft.com/en-us/windows/win32/direct3d12/vrs">https://learn.microsoft.com/en-us/windows/win32/direct3d12/vrs</db:link>. Qt supports a subset of the VRS features offered by Direct 3D 12 and Vulkan. In addition, Metal's somewhat different mechanism is supported by making it possible to set up a <db:link xlink:href="qrhishadingratemap.xml">QRhiShadingRateMap</db:link> with an existing MTLRasterizationRateMap object.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="createFrom">
<db:title>[virtual] bool QRhiShadingRateMap::createFrom(QRhiShadingRateMap::NativeShadingRateMap <db:emphasis>src</db:emphasis>)</db:title>
<db:para>Sets up the shading rate map to use a native 3D API shading rate object <db:code role="parameter">src</db:code>.</db:para>
<db:para>Returns <db:code>true</db:code> when successful, <db:code>false</db:code> when not supported.</db:para>
<db:note>
<db:para>This is functional only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::VariableRateShadingMap</db:link> feature is reported as supported, while QRhi::VariableShadingRateMapWithTexture feature is not. Currently this is true for Metal, assuming variable rate shading is supported by the GPU.</db:para>
</db:note>
<db:note>
<db:para>With Metal, the <db:code>object</db:code> field of <db:code role="parameter">src</db:code> is expected to contain an id&lt;MTLRasterizationRateMap&gt;. Note that Qt does not perform anything else apart from passing the MTLRasterizationRateMap on to the MTLRenderPassDescriptor. If any special scaling is required, it is up to the application (or the XR compositor) to perform that.</db:para>
</db:note>
</db:section>
<db:section xml:id="createFrom-1">
<db:title>[virtual] bool QRhiShadingRateMap::createFrom(QRhiTexture *<db:emphasis>src</db:emphasis>)</db:title>
<db:para>Sets up the shading rate map to use the texture <db:code role="parameter">src</db:code> as the image containing the per-tile shading rates.</db:para>
<db:para>Returns <db:code>true</db:code> when successful, <db:code>false</db:code> when not supported.</db:para>
<db:para>The <db:link xlink:href="qrhishadingratemap.xml">QRhiShadingRateMap</db:link> does not take ownership of <db:code role="parameter">src</db:code>.</db:para>
<db:note>
<db:para>This is functional only when the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::VariableRateShadingMapWithTexture</db:link> feature is reported as supported. In practice may be supported on Vulkan and Direct 3D 12 when using modern graphics cards. It will never be supported on OpenGL or Metal, for example.</db:para>
</db:note>
<db:note>
<db:para><db:code role="parameter">src</db:code> must have a format of <db:link xlink:href="qrhitexture.xml#Format-enum">QRhiTexture::R8UI</db:link>.</db:para>
</db:note>
<db:note>
<db:para><db:code role="parameter">src</db:code> must have a width of <db:code>ceil(render_target_pixel_width / (float)tile_width)</db:code> and a height of <db:code>ceil(render_target_pixel_height / (float)tile_height)</db:code>. It is up to the application to ensure the size of the texture is as expected, using the above formula, at all times. The tile size can be queried via <db:link xlink:href="qrhi.xml#resourceLimit">QRhi::resourceLimit</db:link>() and <db:link xlink:href="qrhi.xml#ResourceLimit-enum">QRhi::ShadingRateImageTileSize</db:link>.</db:para>
</db:note>
<db:para>Each byte (texel) in the texture corresponds to the shading rate value for one tile. 0 indicates 1x1, while a value of 10 indicates 4x4. See <db:link xlink:href="https://learn.microsoft.com/en-us/windows/win32/api/d3d12/ne-d3d12-d3d12_shading_rate">D3D12_SHADING_RATE</db:link> for other possible values.</db:para>
</db:section>
<db:section xml:id="resourceType">
<db:title>[override virtual] QRhiResource::Type QRhiShadingRateMap::resourceType() const</db:title>
<db:para>Returns the resource type.</db:para>
</db:section>
</db:section>
</db:article>
