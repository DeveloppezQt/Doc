<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QList::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qlist.xml">QList</db:link> and <db:link xlink:href="qqueue.xml">QQueue</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlist.xml">QList</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;::iterator allows you to iterate over a <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt; (or <db:link xlink:href="qqueue.xml">QQueue</db:link>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <db:link xlink:href="qlist.xml">QList</db:link>, use <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link> on a non-const <db:link xlink:href="qlist.xml">QList</db:link> as well, unless you need to change the <db:link xlink:href="qlist.xml">QList</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qlist.xml">QList</db:link> function like <db:link xlink:href="qlist.xml#begin">QList::begin</db:link>(), <db:link xlink:href="qlist.xml#end">QList::end</db:link>(), or <db:link xlink:href="qlist.xml#insert">QList::insert</db:link>() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; list;
list.append(&quot;January&quot;);
list.append(&quot;February&quot;);
...
list.append(&quot;December&quot;);

QList&amp;lt;QString&amp;gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    cout &amp;lt;&amp;lt; *i &amp;lt;&amp;lt; Qt::endl;
</db:programlisting>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> that we cannot do with a <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link>. Here's an example that increments every value stored in a <db:link xlink:href="qlist.xml">QList</db:link>&lt;int&gt; by 2:</db:para>
<db:programlisting language="cpp">QList&amp;lt;int&amp;gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    *i += 2;
</db:programlisting>
<db:para>Most <db:link xlink:href="qlist.xml">QList</db:link> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <db:link xlink:href="qlist.xml">QList</db:link>. One place where STL-style iterators do make sense is as arguments to <db:link xlink:href="qtalgorithms.xml">generic algorithms</db:link>.</db:para>
<db:para>For example, here's how to delete all the widgets stored in a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qwidget.xml">QWidget</db:link> *&gt;:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QWidget *&amp;gt; list;
...
qDeleteAll(list.begin(), list.end());
</db:programlisting>
<db:para>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <db:link xlink:href="qlist.xml">QList</db:link> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use QLinkedList rather than <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator_category</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym for <db:emphasis>std::random_access_iterator_tag</db:emphasis> indicating this iterator is a random access iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool iterator::operator==(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool iterator::operator==(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to the same item as this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool iterator::operator!=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-not-eq">bool iterator::operator!=(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> points to a different item than this iterator; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-1">
<db:title>bool iterator::operator&lt;(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">bool iterator::operator&lt;(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if the item pointed to by this iterator is less than the item pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool iterator::operator&lt;=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">bool iterator::operator&lt;=(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if the item pointed to by this iterator is less than or equal to the item pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool iterator::operator&gt;(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt">bool iterator::operator&gt;(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if the item pointed to by this iterator is greater than the item pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool iterator::operator&gt;=(const const_iterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">bool iterator::operator&gt;=(const iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns <db:code>true</db:code> if the item pointed to by this iterator is greater than or equal to the item pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="iterator">
<db:title>iterator::iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like operator*() and operator++() should not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist.xml#begin">QList::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qlist.xml#end">QList::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iterator-2">
<db:title>iterator::iterator(const iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>iterator</db:methodname>
<db:methodparam>
<db:type>const iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator(const iterator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item.</db:para>
<db:para>You can change the value of an item by using operator*() on the left side of an assignment, for example:</db:para>
<db:programlisting language="cpp">if (*it == &quot;Hello&quot;)
    *it = &quot;Bonjour&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator--gt">operator-&gt;</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>iterator iterator::operator+(iterator::difference_type <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>iterator</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>iterator::difference_type</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator+(iterator::difference_type j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-">operator-</db:link>()</db:member>
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>iterator &amp;iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (<db:code>++it</db:code>) advances the iterator to the next item in the list and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qlist.xml#end">QList::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>iterator iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator (<db:code>it++</db:code>) advances the iterator to the next item in the list and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>iterator &amp;iterator::operator+=(iterator::difference_type <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>iterator::difference_type</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator+=(iterator::difference_type j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>iterator iterator::operator-(iterator::difference_type <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>iterator</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>iterator::difference_type</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator-(iterator::difference_type j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b">operator+</db:link>()</db:member>
<db:member><db:link xlink:href="qlist-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>int iterator::operator-(iterator <db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>iterator</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">int operator-(iterator other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of items between the item pointed to by <db:code role="parameter">other</db:code> and the item pointed to by this iterator.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>iterator &amp;iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator (<db:code>--it</db:code>) makes the preceding item current and returns an iterator to the new current item.</db:para>
<db:para>Calling this function on <db:link xlink:href="qlist.xml#begin">QList::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>iterator iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator (<db:code>it--</db:code>) makes the preceding item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>iterator &amp;iterator::operator-=(iterator::difference_type <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>iterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>iterator::difference_type</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">iterator &amp; operator-=(iterator::difference_type j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items. (If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qlist-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>T &amp;iterator::operator[](iterator::difference_type <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>iterator::difference_type</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator[](iterator::difference_type j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the item at position *this + <db:code role="parameter">j</db:code>.</db:para>
<db:para>This function is provided to make <db:link xlink:href="qlist.xml">QList</db:link> iterators behave like C++ pointers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
