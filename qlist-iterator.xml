<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QList::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qlist.xml">QList</db:link> and <db:link xlink:href="qqueue.xml">QQueue</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qlist.xml">QList</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;::iterator allows you to iterate over a <db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt; (or <db:link xlink:href="qqueue.xml">QQueue</db:link>&lt;T&gt;) and to modify the list item associated with the iterator. If you want to iterate over a const <db:link xlink:href="qlist.xml">QList</db:link>, use <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link> instead. It is generally good practice to use <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link> on a non-const <db:link xlink:href="qlist.xml">QList</db:link> as well, unless you need to change the <db:link xlink:href="qlist.xml">QList</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qlist.xml">QList</db:link> function like QList::begin(), QList::end(), or QList::insert() before you can start iterating. Here's a typical loop that prints all the items stored in a list:</db:para>
<db:programlisting language="cpp">QList&lt;QString&gt; list;
list.append(&quot;January&quot;);
list.append(&quot;February&quot;);
...
list.append(&quot;December&quot;);

QList&lt;QString&gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    cout &lt;&lt; *i &lt;&lt; endl;
</db:programlisting>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qlist-iterator.xml">QList::iterator</db:link> that we cannot do with a <db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link>. Here's an example that increments every value stored in a <db:link xlink:href="qlist.xml">QList</db:link>&lt;int&gt; by 2:</db:para>
<db:programlisting language="cpp">QList&lt;int&gt;::iterator i;
for (i = list.begin(); i != list.end(); ++i)
    *i += 2;
</db:programlisting>
<db:para>Most <db:link xlink:href="qlist.xml">QList</db:link> functions accept an integer index rather than an iterator. For that reason, iterators are rarely useful in connection with <db:link xlink:href="qlist.xml">QList</db:link>. One place where STL-style iterators do make sense is as arguments to <db:link xlink:href="">generic algorithms</db:link>.</db:para>
<db:para>For example, here's how to delete all the widgets stored in a <db:link xlink:href="qlist.xml">QList</db:link>&lt;QWidget *&gt;:</db:para>
<db:programlisting language="cpp">QList&lt;QWidget *&gt; list;
...
qDeleteAll(list.begin(), list.end());
</db:programlisting>
<db:para>Multiple iterators can be used on the same list. However, be aware that any non-const function call performed on the <db:link xlink:href="qlist.xml">QList</db:link> will render all existing iterators undefined. If you need to keep iterators over a long period of time, we recommend that you use <db:link xlink:href="qlinkedlist.xml">QLinkedList</db:link> rather than <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlist-const-iterator.xml">QList::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:para>A synonym for <db:emphasis>std::random_access_iterator_tag</db:emphasis> indicating this iterator is a random access iterator.</db:para>
</db:section>
</db:section>
</db:article>
