<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wrapper Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Wrapper example demonstrates how to export existing QWidget classes as ActiveX controls, and the use of <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> together with the <db:code>QAXFACTORY_EXPORT()</db:code> macro. ActiveX controls in this example are the standard button classes QPushButton, QCheckBox and QRadioButton as provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class ActiveQtFactory : public QAxFactory
{
public:
    ActiveQtFactory( const QUuid &amp;lib, const QUuid &amp;app )
        : QAxFactory( lib, app )
    {}
    QStringList featureList() const
    {
        QStringList list;
        list &lt;&lt; &quot;QCheckBox&quot;;
        list &lt;&lt; &quot;QRadioButton&quot;;
        list &lt;&lt; &quot;QPushButton&quot;;
        list &lt;&lt; &quot;QToolButton&quot;;
        return list;
    }
    QObject *createObject(const QString &amp;key)
    {
        if ( key == &quot;QCheckBox&quot; )
            return new QCheckBox(0);
        if ( key == &quot;QRadioButton&quot; )
            return new QRadioButton(0);
        if ( key == &quot;QPushButton&quot; )
            return new QPushButton(0 );
        if ( key == &quot;QToolButton&quot; ) {
            QToolButton *tb = new QToolButton(0);
//          tb-&gt;setIcon( QPixmap(fileopen) );
            return tb;
        }

        return 0;
    }
    const QMetaObject *metaObject( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &amp;QCheckBox::staticMetaObject;
        if ( key == &quot;QRadioButton&quot; )
            return &amp;QRadioButton::staticMetaObject;
        if ( key == &quot;QPushButton&quot; )
            return &amp;QPushButton::staticMetaObject;
        if ( key == &quot;QToolButton&quot; )
            return &amp;QToolButton::staticMetaObject;

        return 0;
    }
    QUuid classID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{6E795DE9-872D-43CF-A831-496EF9D86C68}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{AFCF78C8-446C-409A-93B3-BA2959039189}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{2B262458-A4B6-468B-B7D4-CF5FEE0A7092}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{7c0ffe7a-60c3-4666-bde2-5cf2b54390a1}&quot;;

        return QUuid();
    }
    QUuid interfaceID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{4FD39DD7-2DE0-43C1-A8C2-27C51A052810}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{7CC8AE30-206C-48A3-A009-B0A088026C2F}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{06831CC9-59B6-436A-9578-6D53E5AD03D3}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{6726080f-d63d-4950-a366-9bf33e5cdf84}&quot;;

        return QUuid();
    }
    QUuid eventsID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{FDB6FFBE-56A3-4E90-8F4D-198488418B3A}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{73EE4860-684C-4A66-BF63-9B9EFFA0CBE5}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{3CC3F17F-EA59-4B58-BBD3-842D467131DD}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{f4d421fd-4ead-4fd9-8a25-440766939639}&quot;;

        return QUuid();
    }
};
</db:programlisting>
<db:para>The factory implementation returns the list of supported controls, creates controls on request and provides information about the unique IDs of the COM classes and interfaces for each control.</db:para>
<db:programlisting language="cpp">QAXFACTORY_EXPORT( ActiveQtFactory, &quot;{3B756301-0075-4E40-8BE8-5A81DE2426B7}&quot;, &quot;{AB068077-4924-406a-BBAF-42D91C8727DD}&quot; )
</db:programlisting>
<db:para>The factory is exported using the <db:link xlink:href="qaxfactory.xml#QAXFACTORY_EXPORT">QAXFACTORY_EXPORT</db:link> macro.</db:para>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run <db:code>qmake</db:code> and your make tool in <db:code>examples/activeqt/wrapper</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-wrapper.xml">demonstration</db:link> requires a web browser that supports ActiveX controls, and scripting to be enabled.</db:para>
<db:programlisting language="cpp">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub ToolButton_Clicked()
    RadioButton.text = InputBox( &quot;Enter something&quot;, &quot;Wrapper Demo&quot; )
End Sub

Sub PushButton_clicked()
    MsgBox( &quot;Thank you!&quot; )
End Sub

Sub CheckBox_toggled( state )
    if state = 0 then
        CheckBox.text = &quot;Check me!&quot;
    else
        CheckBox.text = &quot;Uncheck me!&quot;
    end if
End Sub
&lt;/SCRIPT&gt;
&lt;p /&gt;
A QPushButton:&lt;br /&gt;
&lt;object ID=&quot;PushButton&quot; CLASSID=&quot;CLSID:2B262458-A4B6-468B-B7D4-CF5FEE0A7092&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Click me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QCheckBox:&lt;br /&gt;
&lt;object ID=&quot;CheckBox&quot; CLASSID=&quot;CLSID:6E795de9-872d-43cf-a831-496ef9d86c68&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Check me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QToolButton:&lt;br /&gt;
&lt;object ID=&quot;ToolButton&quot; CLASSID=&quot;CLSID:7c0ffe7a-60c3-4666-bde2-5cf2b54390a1&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QRadioButton:&lt;br /&gt;
&lt;object ID=&quot;RadioButton&quot; CLASSID=&quot;CLSID:afcf78c8-446c-409a-93b3-ba2959039189&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Tune me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="activeqt/wrapper/main.cpp">activeqt/wrapper/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="activeqt/wrapper/wrapper.pro">activeqt/wrapper/wrapper.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
