<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wrapper Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Wrapper example demonstrates how to export existing QWidget classes as ActiveX controls, and the use of <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> together with the <db:code>QAXFACTORY_EXPORT()</db:code> macro. ActiveX controls in this example are the standard button classes QPushButton, QCheckBox and QRadioButton as provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">class ActiveQtFactory : public QAxFactory
{
public:
    ActiveQtFactory(const QUuid &amp;lib, const QUuid &amp;app)
        : QAxFactory(lib, app)
    {}

    QStringList featureList() const override
    {
        return m_activeElements.keys();
    }

    QObject *createObject(const QString &amp;key) override
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&gt;create();
        return nullptr;
    }

    const QMetaObject *metaObject(const QString &amp;key) const override
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&gt;metaObject;
        return nullptr;
    }

    QUuid classID(const QString &amp;key) const override
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&gt;classID;
        return QUuid();
    }

    QUuid interfaceID(const QString &amp;key) const override
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&gt;interfaceID;
        return QUuid();
    }

    QUuid eventsID(const QString &amp;key) const override
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&gt;eventsID;
        return QUuid();
    }

private:

    struct ActiveElement {
       QUuid classID;
       QUuid interfaceID;
       QUuid eventsID;
       const QMetaObject *metaObject;
       std::function&lt;QObject *()&gt; create;
    };

    const QHash&lt;QString, ActiveElement&gt; m_activeElements {
        {
            QStringLiteral(&quot;QCheckBox&quot;), {
                QUuid(&quot;{6E795DE9-872D-43CF-A831-496EF9D86C68}&quot;),
                QUuid(&quot;{4FD39DD7-2DE0-43C1-A8C2-27C51A052810}&quot;),
                QUuid(&quot;{FDB6FFBE-56A3-4E90-8F4D-198488418B3A}&quot;),
                &amp;QCheckBox::staticMetaObject,
                []() { return new QCheckBox; }
            }
        },
        {
            QStringLiteral(&quot;QRadioButton&quot;), {
                QUuid(&quot;{AFCF78C8-446C-409A-93B3-BA2959039189}&quot;),
                QUuid(&quot;{7CC8AE30-206C-48A3-A009-B0A088026C2F}&quot;),
                QUuid(&quot;{73EE4860-684C-4A66-BF63-9B9EFFA0CBE5}&quot;),
                &amp;QRadioButton::staticMetaObject,
                []() { return new QRadioButton; }
            }
        },
        {
            QStringLiteral(&quot;QPushButton&quot;), {
                QUuid(&quot;{2B262458-A4B6-468B-B7D4-CF5FEE0A7092}&quot;),
                QUuid(&quot;{06831CC9-59B6-436A-9578-6D53E5AD03D3}&quot;),
                QUuid(&quot;{3CC3F17F-EA59-4B58-BBD3-842D467131DD}&quot;),
                &amp;QPushButton::staticMetaObject,
                []() { return new QPushButton; }
            }
        },
        {
            QStringLiteral(&quot;QToolButton&quot;), {
                QUuid(&quot;{7c0ffe7a-60c3-4666-bde2-5cf2b54390a1}&quot;),
                QUuid(&quot;{6726080f-d63d-4950-a366-9bf33e5cdf84}&quot;),
                QUuid(&quot;{f4d421fd-4ead-4fd9-8a25-440766939639}&quot;),
                &amp;QToolButton::staticMetaObject,
                []() { return new QToolButton; }
            }
        },
    };

};
</db:programlisting>
<db:para>The factory implementation returns the list of supported controls, creates controls on request and provides information about the unique IDs of the COM classes and interfaces for each control.</db:para>
<db:programlisting language="cpp">QAXFACTORY_EXPORT(ActiveQtFactory, &quot;{3B756301-0075-4E40-8BE8-5A81DE2426B7}&quot;, &quot;{AB068077-4924-406a-BBAF-42D91C8727DD}&quot;)
</db:programlisting>
<db:para>The factory is exported using the <db:link xlink:href="qaxfactory.xml#QAXFACTORY_EXPORT">QAXFACTORY_EXPORT</db:link> macro.</db:para>
<db:para>To build the example you must first build the <db:link xlink:href="qaxserver-module.xml">QAxServer</db:link> library. Then run <db:code>qmake</db:code> and your make tool in <db:code>examples/activeqt/wrapper</db:code>.</db:para>
<db:para>The <db:link xlink:href="qaxserver-demo-wrapper.xml">demonstration</db:link> requires a web browser that supports ActiveX controls, and scripting to be enabled.</db:para>
<db:programlisting language="cpp">&lt;SCRIPT LANGUAGE=&quot;VBScript&quot;&gt;
Sub ToolButton_Clicked()
    RadioButton.text = InputBox( &quot;Enter something&quot;, &quot;Wrapper Demo&quot; )
End Sub

Sub PushButton_clicked()
    MsgBox( &quot;Thank you!&quot; )
End Sub

Sub CheckBox_toggled( state )
    if state = 0 then
        CheckBox.text = &quot;Check me!&quot;
    else
        CheckBox.text = &quot;Uncheck me!&quot;
    end if
End Sub
&lt;/SCRIPT&gt;
&lt;p /&gt;
A QPushButton:&lt;br /&gt;
&lt;object ID=&quot;PushButton&quot; CLASSID=&quot;CLSID:2B262458-A4B6-468B-B7D4-CF5FEE0A7092&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Click me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QCheckBox:&lt;br /&gt;
&lt;object ID=&quot;CheckBox&quot; CLASSID=&quot;CLSID:6E795de9-872d-43cf-a831-496ef9d86c68&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Check me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QToolButton:&lt;br /&gt;
&lt;object ID=&quot;ToolButton&quot; CLASSID=&quot;CLSID:7c0ffe7a-60c3-4666-bde2-5cf2b54390a1&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;

&lt;p /&gt;
A QRadioButton:&lt;br /&gt;
&lt;object ID=&quot;RadioButton&quot; CLASSID=&quot;CLSID:afcf78c8-446c-409a-93b3-ba2959039189&quot;
CODEBASE=&quot;http://qt.nokia.com/demos/wrapperax.cab&quot;&gt;
    &lt;PARAM NAME=&quot;text&quot; VALUE=&quot;Tune me!&quot; /&gt;
[Object not available! Did you forget to build and register the server?]
&lt;/object&gt;&lt;br /&gt;
</db:programlisting>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtactiveqt.git/tree/examples/activeqt/wrapper?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
