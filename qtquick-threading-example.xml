<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Threading</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML multithreading examples.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-threading-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Threading</db:emphasis> is a collection of QML multithreading examples.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="threaded-listmodel">
<db:title>Threaded ListModel</db:title>
<db:para><db:emphasis>Threaded <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link></db:emphasis> contains a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>. The <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> object is updated asynchronously in another thread, and the results propagate back to the main thread. A timer requests updates from the worker thread periodically:</db:para>
<db:programlisting language="qml">        Timer {
            id: timer
            interval: 2000; repeat: true
            running: true
            triggeredOnStart: true

            onTriggered: {
                var msg = {'action': 'appendCurrentTime', 'model': listModel};
                worker.sendMessage(msg);
            }
        }
</db:programlisting>
<db:para>Inside the worker thread, the <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> is synchronized once the data is finished loading:</db:para>
<db:programlisting language="cpp">WorkerScript.onMessage = function(msg) {
    if (msg.action == 'appendCurrentTime') {
        var data = {'time': new Date().toTimeString()};
        msg.model.append(data);
        msg.model.sync();   // updates the changes to the list
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="workerscript">
<db:title>WorkerScript</db:title>
<db:para><db:emphasis>WorkerScript</db:emphasis> contains an example of using a <db:link xlink:href="qtquick-threading-example.xml#workerscript">WorkerScript</db:link> to offload expensive calculations into another thread. This keeps the UI from being blocked. This example calculates numbers in Pascal's Triangle, and not in a very optimal way, so it will often take several seconds to complete the calculation. By doing this in a <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> in another thread, the UI is not blocked during this time.</db:para>
<db:para>When the UI needs another value, a request is sent to the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link>:</db:para>
<db:programlisting language="qml">        Spinner {
            id: rowSpinner
            label: &quot;Row&quot;
            onValueChanged: {
                resultText.text = &quot;Loading...&quot;;
                myWorker.sendMessage( { row: rowSpinner.value, column: columnSpinner.value } );
            }
        }
</db:programlisting>
<db:para>The workerscript then is free to take a really long time to calculate it:</db:para>
<db:programlisting language="cpp">WorkerScript.onMessage = function(message) {
    //Calculate result (may take a while, using a naive algorithm)
    var calculatedResult = triangle(message.row, message.column);
    //Send result back to main thread
    WorkerScript.sendMessage( { row: message.row,
                                column: message.column,
                                result: calculatedResult} );
}
</db:programlisting>
<db:para>When it's done, the result returns to the main scene via the <db:link xlink:href="qml-qtqml-workerscript-workerscript.xml">WorkerScript</db:link> type:</db:para>
<db:programlisting language="qml">    WorkerScript {
        id: myWorker
        source: &quot;workerscript.mjs&quot;

        onMessage: {
            if (messageObject.row == rowSpinner.value &amp;amp;&amp;amp; messageObject.column == columnSpinner.value){ //Not an old result
                if (messageObject.result == -1)
                    resultText.text = &quot;Column must be &amp;lt;= Row&quot;;
                else
                    resultText.text = messageObject.result;
            }
        }
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/threading?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
