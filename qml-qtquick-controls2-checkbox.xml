<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CheckBox QML Type</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Check button that can be toggled on or off.</db:para>
<db:para>This type was introduced in Qt 5.7.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 2.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>AbstractButton</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>CheckBox is part of <db:simplelist><db:member>qtquickcontrols2-buttons</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-checkbox.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkbox.xml">CheckBox</db:link> presents an option button that can be toggled on (checked) or off (unchecked). Check boxes are typically used to select one or more options from a set of options. For larger sets of options, such as those in a list, consider using <db:link xlink:href="qml-qtquick-controls2-checkdelegate.xml">CheckDelegate</db:link> instead.</db:para>
<db:para><db:link xlink:href="qml-qtquick-controls2-checkbox.xml">CheckBox</db:link> inherits its API from <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml">AbstractButton</db:link>. For instance, the state of the checkbox can be set with the <db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#checked-prop">checked</db:link> property.</db:para>
<db:para>In addition to the checked and unchecked states, there is a third state: partially checked. The partially checked state can be enabled using the <db:link xlink:href="qml-qtquick-controls2-checkbox.xml#tristate-prop">tristate</db:link> property. This state indicates that the regular checked/unchecked state can not be determined; generally because of other states that affect the checkbox. This state is useful when several child nodes are selected in a treeview, for example.</db:para>
<db:programlisting language="cpp">ColumnLayout {
    CheckBox {
        checked: true
        text: qsTr(&quot;First&quot;)
    }
    CheckBox {
        text: qsTr(&quot;Second&quot;)
    }
    CheckBox {
        checked: true
        text: qsTr(&quot;Third&quot;)
    }
}
</db:programlisting>
<db:para>Hierarchical checkbox groups can be managed with a non-exclusive <db:link xlink:href="qml-qtquick-controls2-buttongroup.xml">ButtonGroup</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-checkbox-group.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following example illustrates how the combined check state of children can be bound to the check state of the parent checkbox:</db:para>
<db:programlisting language="qml">Column {
    ButtonGroup {
        id: childGroup
        exclusive: false
        checkState: parentBox.checkState
    }

    CheckBox {
        id: parentBox
        text: qsTr(&quot;Parent&quot;)
        checkState: childGroup.checkState
    }

    CheckBox {
        checked: true
        text: qsTr(&quot;Child 1&quot;)
        leftPadding: indicator.width
        ButtonGroup.group: childGroup
    }

    CheckBox {
        text: qsTr(&quot;Child 2&quot;)
        leftPadding: indicator.width
        ButtonGroup.group: childGroup
    }
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols2-customize.xml#customizing-checkbox">Customizing CheckBox</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-buttongroup.xml">ButtonGroup</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols2-buttons.xml">Button Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="checkState-prop">
<db:title>checkState : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>checkState</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the check state of the checkbox.</db:para>
<db:para>Available states:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Qt.Unchecked</db:para>
</db:td>
<db:td>
<db:para>The checkbox is unchecked.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.PartiallyChecked</db:para>
</db:td>
<db:td>
<db:para>The checkbox is partially checked. This state is only used when <db:link xlink:href="qml-qtquick-controls2-checkbox.xml#tristate-prop">tristate</db:link> is enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Qt.Checked</db:para>
</db:td>
<db:td>
<db:para>The checkbox is checked.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls2-checkbox.xml#tristate-prop">tristate</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls2-abstractbutton.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextCheckState-prop">
<db:title>[since QtQuick.Controls 2.4 (Qt 5.11)] nextCheckState : function</db:title>
<db:fieldsynopsis>
<db:type>function</db:type>
<db:varname>nextCheckState</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a callback function that is called to determine the next check state whenever the checkbox is interactively toggled by the user via touch, mouse, or keyboard.</db:para>
<db:para>By default, a normal checkbox cycles between <db:code>Qt.Unchecked</db:code> and <db:code>Qt.Checked</db:code> states, and a tri-state checkbox cycles between <db:code>Qt.Unchecked</db:code>, <db:code>Qt.PartiallyChecked</db:code>, and <db:code>Qt.Checked</db:code> states.</db:para>
<db:para>The <db:code>nextCheckState</db:code> callback function can override the default behavior. The following example implements a tri-state checkbox that can present a partially checked state depending on external conditions, but never cycles to the partially checked state when interactively toggled by the user.</db:para>
<db:programlisting language="cpp">CheckBox {
    tristate: true
    checkState: allChildrenChecked ? Qt.Checked :
                   anyChildChecked ? Qt.PartiallyChecked : Qt.Unchecked

    nextCheckState: function() {
        if (checkState === Qt.Checked)
            return Qt.Unchecked
        else
            return Qt.Checked
    }
}
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 2.4 (Qt 5.11).</db:para>
</db:section>
<db:section xml:id="tristate-prop">
<db:title>tristate : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>tristate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the checkbox is a tri-state checkbox.</db:para>
<db:para>In the animation below, the first checkbox is tri-state:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols2-checkbox-tristate.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The default is <db:code>false</db:code>, i.e., the checkbox has only two states.</db:para>
</db:section>
</db:section>
</db:article>
