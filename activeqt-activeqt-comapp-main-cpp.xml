<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>COM App Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The COM App example shows how to use ActiveQt to develop a Qt application that can be automated via COM. Different QObject based classes are exposed as COM objects that communicate with the GUI of the running Qt application. The APIs of those COM objects has been designed to resemble the APIs of standard COM applications; i.e. those from Microsoft Office.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QApplication&gt;
#include &lt;QAxFactory&gt;
#include &lt;QTabWidget&gt;
#include &lt;QTimer&gt;

class Application;
class DocumentList;

class Document : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{2b5775cd-72c2-43da-bc3b-b0e8d1e1c4f7}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{2ce1761e-07a3-415c-bd11-0eab2c7283de}&quot;)

    Q_PROPERTY(Application *application READ application)
    Q_PROPERTY(QString title READ title WRITE setTitle)

public:
    Document(DocumentList *list);
    ~Document();

    Application *application() const;

    QString title() const;
    void setTitle(const QString &amp;title);

private:
    QWidget *page;
};

class DocumentList : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{496b761d-924b-4554-a18a-8f3704d2a9a6}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{6c9e30e8-3ff6-4e6a-9edc-d219d074a148}&quot;)

    Q_PROPERTY(Application* application READ application)
    Q_PROPERTY(int count READ count)

public:
    DocumentList(Application *application);

    int count() const;
    Application *application() const;

public slots:
    Document *addDocument();
    Document *item(int index) const;

private:
    QList&lt;Document*&gt; list;
};

class Application : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{b50a71db-c4a7-4551-8d14-49983566afee}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{4a427759-16ef-4ed8-be79-59ffe5789042}&quot;)
    Q_CLASSINFO(&quot;RegisterObject&quot;, &quot;yes&quot;)

    Q_PROPERTY(DocumentList* documents READ documents)
    Q_PROPERTY(QString id READ id)
    Q_PROPERTY(bool visible READ isVisible WRITE setVisible)

public:
    Application(QObject *parent = 0);
    DocumentList *documents() const;

    QString id() const { return objectName(); }

    void setVisible(bool on);
    bool isVisible() const;

    QTabWidget *window() const { return ui; }

public slots:
    void quit();

private:
    DocumentList *docs;

    QTabWidget *ui;
};

Document::Document(DocumentList *list)
: QObject(list)
{
    QTabWidget *tabs = list-&gt;application()-&gt;window();
    page = new QWidget(tabs);
    page-&gt;setWindowTitle(&quot;Unnamed&quot;);
    tabs-&gt;addTab(page, page-&gt;windowTitle());

    page-&gt;show();
}

Document::~Document()
{
    delete page;
}

Application *Document::application() const
{
    return qobject_cast&lt;DocumentList*&gt;(parent())-&gt;application();
}

QString Document::title() const
{
    return page-&gt;windowTitle();
}

void Document::setTitle(const QString &amp;t)
{
    page-&gt;setWindowTitle(t);

    QTabWidget *tabs = application()-&gt;window();
    int index = tabs-&gt;indexOf(page);
    tabs-&gt;setTabText(index, page-&gt;windowTitle());
}

DocumentList::DocumentList(Application *application)
: QObject(application)
{
}

Application *DocumentList::application() const
{
    return qobject_cast&lt;Application*&gt;(parent());
}

int DocumentList::count() const
{
    return list.count();
}

Document *DocumentList::item(int index) const
{
    if (index &gt;= list.count())
        return 0;

    return list.at(index);
}

Document *DocumentList::addDocument()
{
    Document *document = new Document(this);
    list.append(document);

    return document;
}

Application::Application(QObject *parent)
: QObject(parent), ui(0)
{
    ui = new QTabWidget;

    setObjectName(&quot;From QAxFactory&quot;);
    docs = new DocumentList(this);
}

DocumentList *Application::documents() const
{
    return docs;
}

void Application::setVisible(bool on)
{
    ui-&gt;setVisible(on);
}

bool Application::isVisible() const
{
    return ui-&gt;isVisible();
}

void Application::quit()
{
    delete docs;
    docs = 0;

    delete ui;
    ui = 0;
    QTimer::singleShot(0, qApp, SLOT(quit()));
}

#include &quot;main.moc&quot;

QAXFACTORY_BEGIN(&quot;{edd3e836-f537-4c6f-be7d-6014c155cc7a}&quot;, &quot;{b7da3de8-83bb-4bbe-9ab7-99a05819e201}&quot;)
   QAXCLASS(Application)
   QAXTYPE(Document)
   QAXTYPE(DocumentList)
QAXFACTORY_END()

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    app.setQuitOnLastWindowClosed(false);

    // started by COM - don't do anything
    if (QAxFactory::isServer())
        return app.exec();

    // started by user
    Application appobject(0);
    appobject.setObjectName(&quot;From Application&quot;);

    QAxFactory::startServer();
    QAxFactory::registerActiveObject(&amp;appobject);

    appobject.setVisible(true);

    QObject::connect(qApp, SIGNAL(lastWindowClosed()), &amp;appobject, SLOT(quit()));

    return app.exec();
}

</db:programlisting>
</db:article>
