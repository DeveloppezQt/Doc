<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>COM App Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The COM App example shows how to use ActiveQt to develop a Qt application that can be automated via COM. Different <db:link xlink:href="qobject.xml">QObject</db:link> based classes are exposed as COM objects that communicate with the GUI of the running Qt application. The APIs of those COM objects has been designed to resemble the APIs of standard COM applications; i.e. those from Microsoft Office.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QApplication&amp;gt;
#include &amp;lt;QAxFactory&amp;gt;
#include &amp;lt;QTabWidget&amp;gt;
#include &amp;lt;QScopedPointer&amp;gt;
#include &amp;lt;QTimer&amp;gt;

class Application;
class DocumentList;

class Document : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{2b5775cd-72c2-43da-bc3b-b0e8d1e1c4f7}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{2ce1761e-07a3-415c-bd11-0eab2c7283de}&quot;)

    Q_PROPERTY(Application *application READ application)
    Q_PROPERTY(QString title READ title WRITE setTitle)

public:
    explicit Document(DocumentList *list);
    virtual ~Document();

    Application *application() const;

    QString title() const;
    void setTitle(const QString &amp;amp;title);

private:
    QScopedPointer &amp;lt;QWidget&amp;gt; m_page;
};

class DocumentList : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{496b761d-924b-4554-a18a-8f3704d2a9a6}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{6c9e30e8-3ff6-4e6a-9edc-d219d074a148}&quot;)

    Q_PROPERTY(Application* application READ application)
    Q_PROPERTY(int count READ count)

public:
    explicit DocumentList(Application *application);

    int count() const;
    Application *application() const;

public slots:
    Document *addDocument();
    Document *item(int index) const;

private:
    QList&amp;lt;Document *&amp;gt; m_list;
};

class Application : public QObject
{
    Q_OBJECT

    Q_CLASSINFO(&quot;ClassID&quot;, &quot;{b50a71db-c4a7-4551-8d14-49983566afee}&quot;)
    Q_CLASSINFO(&quot;InterfaceID&quot;, &quot;{4a427759-16ef-4ed8-be79-59ffe5789042}&quot;)
    Q_CLASSINFO(&quot;RegisterObject&quot;, &quot;yes&quot;)

    Q_PROPERTY(DocumentList* documents READ documents)
    Q_PROPERTY(QString id READ id)
    Q_PROPERTY(bool visible READ isVisible WRITE setVisible)

public:
    explicit Application(QObject *parent = nullptr);
    DocumentList *documents() const;

    QString id() const { return objectName(); }

    void setVisible(bool on);
    bool isVisible() const;

    QTabWidget *window() const { return m_ui.data(); }

public slots:
    void quit();

private:
    QScopedPointer &amp;lt;DocumentList&amp;gt; m_docs;
    QScopedPointer &amp;lt;QTabWidget&amp;gt; m_ui;
};

Document::Document(DocumentList *list)
: QObject(list)
{
    QTabWidget *tabs = list-&amp;gt;application()-&amp;gt;window();
    m_page.reset(new QWidget(tabs));
    m_page-&amp;gt;setWindowTitle(tr(&quot;Unnamed&quot;));
    tabs-&amp;gt;addTab(m_page.data(), m_page-&amp;gt;windowTitle());

    m_page-&amp;gt;show();
}

Document::~Document()
{
}

Application *Document::application() const
{
    return qobject_cast&amp;lt;DocumentList *&amp;gt;(parent())-&amp;gt;application();
}

QString Document::title() const
{
    return m_page-&amp;gt;windowTitle();
}

void Document::setTitle(const QString &amp;amp;t)
{
    m_page-&amp;gt;setWindowTitle(t);

    QTabWidget *tabs = application()-&amp;gt;window();
    int index = tabs-&amp;gt;indexOf(m_page.data());
    tabs-&amp;gt;setTabText(index, m_page-&amp;gt;windowTitle());
}

DocumentList::DocumentList(Application *application)
: QObject(application)
{
}

Application *DocumentList::application() const
{
    return qobject_cast&amp;lt;Application *&amp;gt;(parent());
}

int DocumentList::count() const
{
    return m_list.count();
}

Document *DocumentList::item(int index) const
{
    return m_list.value(index, nullptr);
}

Document *DocumentList::addDocument()
{
    Document *document = new Document(this);
    m_list.append(document);

    return document;
}

Application::Application(QObject *parent)
: QObject(parent),
  m_ui(new QTabWidget),
  m_docs(new DocumentList(this))
{
    setObjectName(QStringLiteral(&quot;From QAxFactory&quot;));
}

DocumentList *Application::documents() const
{
    return m_docs.data();
}

void Application::setVisible(bool on)
{
    m_ui-&amp;gt;setVisible(on);
}

bool Application::isVisible() const
{
    return m_ui-&amp;gt;isVisible();
}

void Application::quit()
{
    m_docs.reset();
    m_ui.reset();
    QTimer::singleShot(0 /*ms*/, qApp, &amp;amp;QCoreApplication::quit);
}

#include &quot;main.moc&quot;

QAXFACTORY_BEGIN(&quot;{edd3e836-f537-4c6f-be7d-6014c155cc7a}&quot;, &quot;{b7da3de8-83bb-4bbe-9ab7-99a05819e201}&quot;)
   QAXCLASS(Application)
   QAXTYPE(Document)
   QAXTYPE(DocumentList)
QAXFACTORY_END()

int main(int argc, char *argv[])
{
    QApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
    QApplication app(argc, argv);
    app.setQuitOnLastWindowClosed(false);

    // started by COM - don't do anything
    if (QAxFactory::isServer())
        return app.exec();

    // started by user
    Application appobject;
    appobject.setObjectName(QStringLiteral(&quot;From Application&quot;));

    QAxFactory::startServer();
    QAxFactory::registerActiveObject(&amp;amp;appobject);

    appobject.window()-&amp;gt;setMinimumSize(300, 100);
    appobject.setVisible(true);

    QObject::connect(&amp;amp;app, &amp;amp;QGuiApplication::lastWindowClosed, &amp;amp;appobject, &amp;amp;Application::quit);

    return app.exec();
}

</db:programlisting>
</db:article>
