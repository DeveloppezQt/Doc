<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusReply Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> class contains the data for a request sent with a <db:link xlink:href="qmodbusclient.xml">QModbusClient</db:link> derived class.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ReplyType-enum">
<db:title>enum QModbusReply::ReplyType</db:title>
<db:enumsynopsis>
<db:enumname>ReplyType</db:enumname>
<db:enumitem>
<db:enumidentifier>Raw</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Common</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Broadcast</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the possible reply type.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link></db:emphasis>::Raw</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The reply originates from a raw Modbus request. See <db:link xlink:href="qmodbusclient.xml#sendRawRequest">QModbusClient::sendRawRequest</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link></db:emphasis>::Common</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The reply originates from a common read, write or read/write request. See <db:link xlink:href="qmodbusclient.xml#sendReadRequest">QModbusClient::sendReadRequest</db:link>, <db:link xlink:href="qmodbusclient.xml#sendWriteRequest">QModbusClient::sendWriteRequest</db:link> and <db:link xlink:href="qmodbusclient.xml#sendReadWriteRequest">QModbusClient::sendReadWriteRequest</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link></db:emphasis>::Broadcast</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The reply originates from a Modbus broadcast request. The <db:link xlink:href="qmodbusreply.xml#serverAddress">serverAddress</db:link>() will return <db:code>0</db:code> and the <db:link xlink:href="qmodbusreply.xml#finished">finished</db:link>() signal will be emitted immediately.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusReply">
<db:title>QModbusReply::QModbusReply(QModbusReply::ReplyType <db:emphasis>type</db:emphasis>, int <db:emphasis>serverAddress</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QModbusReply</db:methodname>
<db:methodparam>
<db:type>QModbusReply::ReplyType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>serverAddress</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply(QModbusReply::ReplyType type, int serverAddress, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> object with a given <db:code role="parameter">type</db:code> and the specified <db:code role="parameter">parent</db:code>.</db:para>
<db:para>The reply will be sent to the Modbus client represented by <db:code role="parameter">serverAddress</db:code>.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QModbusDevice::Error QModbusReply::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusDevice::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusDevice::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error state of this reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QModbusReply::errorOccurred(QModbusDevice::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QModbusDevice::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QModbusDevice::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an error has been detected in the processing of this reply. The <db:link xlink:href="qmodbusreply.xml#finished">finished</db:link>() signal will probably follow.</db:para>
<db:para>The error will be described by the error code <db:code role="parameter">error</db:code>. If <db:link xlink:href="qmodbusreply.xml#errorString">errorString</db:link> is not empty it will contain a textual description of the error. In case of a <db:link xlink:href="qmodbusdevice.xml#Error-enum">QModbusDevice::ProtocolError</db:link> the <db:link xlink:href="qmodbusreply.xml#rawResult">rawResult</db:link>() function can be used to obtain the original Modbus exception response to get the exception code.</db:para>
<db:para>Note: Do not delete this reply object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QModbusReply::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the textual representation of the error state of this reply.</db:para>
<db:para>If no error has occurred this will return an empty string. It is possible that an error occurred which has no associated textual representation, in which case this will also return an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#errorOccurred">errorOccurred</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QModbusReply::finished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>finished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void finished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the reply has finished processing. The reply may still have returned with an error.</db:para>
<db:para>After this signal is emitted, there will be no more updates to the reply's data.</db:para>
<db:note>
<db:para>Do not delete the object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:note>
<db:para>You can also use <db:link xlink:href="qmodbusreply.xml#isFinished">isFinished</db:link>() to check if a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> has finished even before you receive the finished() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#isFinished">isFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intermediateErrors">
<db:title>[since 6.0] QList&lt;QModbusDevice::IntermediateError&gt; QModbusReply::intermediateErrors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QModbusDevice::IntermediateError&gt;</db:type>
<db:methodname>intermediateErrors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QModbusDevice::IntermediateError&gt; intermediateErrors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of intermediate errors that might have happened during the send-receive cycle of a Modbus request until the <db:link xlink:href="qmodbusreply.xml">QModbusReply</db:link> reports to be finished.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QModbusReply::isFinished() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFinished() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when the reply has finished or was aborted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawResult">
<db:title>QModbusResponse QModbusReply::rawResult() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusResponse</db:type>
<db:methodname>rawResult</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusResponse rawResult() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the raw response of a Modbus request.</db:para>
<db:para>If the request has not finished then the returned <db:link xlink:href="qmodbusresponse.xml">QModbusResponse</db:link> instance is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#result">result</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="result">
<db:title>QModbusDataUnit QModbusReply::result() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusDataUnit</db:type>
<db:methodname>result</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusDataUnit result() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the preprocessed result of a Modbus request.</db:para>
<db:para>For read requests as well as combined read/write requests send via <db:link xlink:href="qmodbusclient.xml#sendReadWriteRequest">QModbusClient::sendReadWriteRequest</db:link>() it contains the values read from the server instance.</db:para>
<db:para>If the request has not finished, has failed with an error or was a write request then the returned <db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link> instance is invalid.</db:para>
<db:note>
<db:para>If the <db:link xlink:href="qmodbusreply.xml#type">type</db:link>() of the reply is <db:link xlink:href="qmodbusreply.xml#ReplyType-enum">QModbusReply::Broadcast</db:link>, the return value will always be invalid. If the <db:link xlink:href="qmodbusreply.xml#type">type</db:link>() of the reply is <db:link xlink:href="qmodbusreply.xml#ReplyType-enum">QModbusReply::Raw</db:link>, the return value might be invalid depending on the implementation of <db:link xlink:href="qmodbusclient.xml#processPrivateResponse">QModbusClient::processPrivateResponse</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#type">type</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#rawResult">rawResult</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusclient.xml#processPrivateResponse">QModbusClient::processPrivateResponse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serverAddress">
<db:title>int QModbusReply::serverAddress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>serverAddress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int serverAddress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the server address that this reply object targets.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QModbusReply::ReplyType QModbusReply::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QModbusReply::ReplyType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModbusReply::ReplyType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the reply.</db:para>
<db:note>
<db:para>If the type of the reply is <db:link xlink:href="qmodbusreply.xml#ReplyType-enum">QModbusReply::Raw</db:link>, the return value of <db:link xlink:href="qmodbusreply.xml#result">result</db:link>() will always be invalid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusreply.xml#result">result</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusreply.xml#rawResult">rawResult</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
