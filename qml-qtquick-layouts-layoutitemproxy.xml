<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>LayoutItemProxy QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> class provides a placeholder for <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>s in layouts.</db:para>
<db:para>This type was introduced in QtQuick.Layouts 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Layouts</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtQuick.Layouts 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>LayoutItemProxy is part of <db:simplelist><db:member>layouts</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Some responsive layouts require different layout hierarchies for different screen sizes, but the layout hierarchy is the same as the QML structure and can therefore not be changed at runtime. <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> overcomes this limitation by representing a <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> item within the layout. The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> item itself can be defined anywhere in the QML hierarchy. This allows declaration of multiple layouts with the same content items. The layouts can be shown and hidden to switch between them.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> will try to take control of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> item if it is <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link>. Taking control will position and resize the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> item to match the position and size of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link>. Further, the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> will set itself as the parent of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> (to ensure event delivery and useful drawing order) and set the visibility to true. Multiple LayoutItemProxies can <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> the same item, but only one <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> can control an item at a time. Therefore only one of the proxies targeting the same item should be visible at a time. If multiple proxies target the same item but <db:emphasis>visible</db:emphasis> is set to false for each proxy, the item will also be invisible.</db:para>
<db:para>All <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> attached properties of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link>, as well as the <db:link xlink:href="qquickitem.xml#implicitWidth">QQuickItem::implicitWidth</db:link> and <db:link xlink:href="qquickitem.xml#implicitHeight-prop">QQuickItem::implicitHeight</db:link> of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> are forwarded by the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link>. The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> will mimic the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> as closely as possible in terms of <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> properties and size. <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> attached properties can also be set explicitly on the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> which will stop the forwarding of the <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml#target-prop">target</db:link> properties.</db:para>
<db:section xml:id="example-usage">
<db:title>Example Usage</db:title>
<db:para>This is a minimalistic example, changing between two layouts using proxies to use the same items in both layouts. The items that populate the layouts can be defined at an arbitrary point in the QML structure.</db:para>
<db:programlisting language="qml">Rectangle {
    id: rectangle1
    color: &quot;tomato&quot;
    Layout.fillHeight: true
    Layout.fillWidth: true
}

Rectangle {
    id: rectangle2
    color: &quot;lightskyblue&quot;
    Layout.fillHeight: true
    Layout.fillWidth: true
}
</db:programlisting>
<db:para>Then we can define the Layouts with LayoutItemProxys</db:para>
<db:programlisting language="qml">GridLayout {
    id: l1
    columns: 1
    visible: false
    anchors.fill: parent
    LayoutItemProxy { target: rectangle1 }
    LayoutItemProxy { target: rectangle2 }
}

GridLayout {
    id: l2
    columns: 2
    visible: true
    anchors.fill: parent
    LayoutItemProxy { target: rectangle1 }
    LayoutItemProxy { target: rectangle2 }
}
</db:programlisting>
<db:para>We can switch now between the layouts, depending on a criterion of our choice by toggling the visibility of the layouts on and off.</db:para>
<db:programlisting language="qml">onWidthChanged: {
    if (width &lt; 300) {
        l2.visible = false
        l1.visible = true
    } else {
        l1.visible = false
        l2.visible = true
    }
}
</db:programlisting>
<db:para>The two resulting layouts look like this:</db:para>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/simpleProxy.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> can also be used without layouts, e.g. by anchoring it to different items. A mix of real <db:link xlink:href="qml-qtquick-item.xml">Items</db:link> and proxy items is equally possible, as well as nested structures of layouts and items.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layoutitemproxy.xml">LayoutItemProxy</db:link> will set the parent of its target to itself. Keep this in mind when referring to the parent of the target item.</db:para>
</db:warning>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml">Item</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-layouts-columnlayout.xml">ColumnLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="target-prop">
<db:title>target : Item</db:title>
<db:para>This property holds the <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> that the proxy should represent in a <db:link xlink:href="qml-qtquick-layouts-layout.xml">Layout</db:link> hierarchy.</db:para>
</db:section>
</db:section>
</db:article>
