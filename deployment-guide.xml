<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deployment Guide</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Qt Virtual Keyboard.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{Deployment Guide} {Contents}</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This document describes how to deploy and use the Qt Virtual Keyboard plugin with Qt 5 applications.</db:para>
</db:section>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>The Qt Virtual Keyboard plugin must be properly deployed before it can be used. The easiest approach to deployment is to add a deployment step in Qt Creator that executes the <db:code>make install</db:code> command.</db:para>
<db:para><db:code>make install</db:code> deploys the files in the following locations:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Item</db:para>
</db:th>
<db:th>
<db:para>Desktop install path</db:para>
</db:th>
<db:th>
<db:para>Boot2Qt install path</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qtvirtualkeyboardplugin</db:para>
</db:td>
<db:td>
<db:para><db:code>$$[QT_INSTALL_PLUGINS]/platforminputcontexts</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/plugins/platforminputcontexts</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvirtualkeyboardplugin QML files</db:para>
</db:td>
<db:td>
<db:para><db:code>$$[QT_INSTALL_QML]/QtQuick/VirtualKeyboard</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvirtualkeyboardstylesplugin</db:para>
</db:td>
<db:td>
<db:para><db:code>$$[QT_INSTALL_QML]/QtQuick/VirtualKeyboard/Styles</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Styles</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="integration-method">
<db:title>Integration Method</db:title>
<db:para>Qt Virtual Keyboard currently supports two alternative integration methods for using the plugin:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Desktop</db:code>: Qt Virtual Keyboard is integrated with Qt 5 and requires no changes to existing applications. The Qt Virtual Keyboard input method is available to all of the Qt 5 applications in the system.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Application</db:code>: Qt Virtual Keyboard is integrated with Qt 5, but requires changes to particular applications using Qt Virtual Keyboard. This method is mandatory in a Boot2Qt environment, but can be used in desktop applications too.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The integration method is automatically selected by the project files. However, in desktop environments, it is possible to override the desktop integration method and use the application integration method instead. This happens by adding the <db:code>CONFIG+=disable-desktop</db:code> to the <db:code>qmake</db:code> command line.</db:para>
<db:note>
<db:para>The desktop integration method is not currently available in Boot2Qt environments.</db:para>
</db:note>
</db:section>
<db:section xml:id="loading-the-plugin">
<db:title>Loading the Plugin</db:title>
<db:para>In both integration methods, the application must use the <db:code>QT_IM_MODULE</db:code> environment variable to load the plugin. For example:</db:para>
<db:programlisting language="cpp">$ QT_IM_MODULE=qtvirtualkeyboard myapp
</db:programlisting>
<db:para>or in the main() function:</db:para>
<db:programlisting language="cpp">qputenv(&quot;QT_IM_MODULE&quot;, QByteArray(&quot;qtvirtualkeyboard&quot;));
</db:programlisting>
<db:para>In the desktop integration method, this step is all that is required to use Qt Virtual Keyboard. In the application integration method, the application is required to create an instance of <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> as explained in the following chapter.</db:para>
</db:section>
<db:section xml:id="creating-inputpanel">
<db:title>Creating InputPanel</db:title>
<db:para>The following example shows how to create an <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> and how to divide the screen area with the application container.</db:para>
<db:programlisting language="cpp">import QtQuick 2.0
import QtQuick.VirtualKeyboard 2.1

Item {
    id: root
    Item {
        id: appContainer
        anchors.left: parent.left
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.bottom: inputPanel.top
        ...
    }
    InputPanel {
        id: inputPanel
        y: Qt.inputMethod.visible ? parent.height - inputPanel.height : parent.height
        anchors.left: parent.left
        anchors.right: parent.right
    }
}
</db:programlisting>
<db:para>The input panel must be a sibling element next to the application container. It is important not to put the input panel within the application container, as it would then overlap with the contents of the application. Also, the input panel height will be automatically updated according to the available width; the aspect ratio of the input panel is constant.</db:para>
</db:section>
<db:section xml:id="environment-variables">
<db:title>Environment Variables</db:title>
<db:para>There are several environment variables defined by the module that are listed below:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Purpose</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_HUNSPELL_DATA_PATH</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Hunspell data files.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/hunspell</db:code>.</db:para>
<db:para>See <db:link xlink:href="build.xml#hunspell-integration">Hunspell Integration</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_PINYIN_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Pinyin dictionary.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/pinyin/dict_pinyin.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_CANGJIE_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Cangjie dictionary.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_cangjie.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_ZHUYIN_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Zhuyin dictionary.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_zhuyin.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_PHRASE_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the phrase dictionary.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_phrases.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_STYLE</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of the style to use with the virtual keyboard.</db:para>
<db:para>This can also be specified in QML by setting <db:link xlink:href="qml-qtquick-virtualkeyboard-settings-virtualkeyboardsettings.xml#styleName-prop">VirtualKeyboardSettings::styleName</db:link>, or at build time by using the <db:link xlink:href="build.xml#advanced-configuration-options">qmake configuration options</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LIPI_ROOT</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of lipi-toolkit.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::location(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/lipi_toolkit</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LIPI_LIB</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of lipi-toolkit plugins.</db:para>
<db:para>The default location depends on <db:code>LIPI_ROOT</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>LIPI_ROOT + &quot;/lib&quot;</db:code> if <db:code>LIPI_ROOT</db:code> is set.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QLibraryInfo::location(QLibraryInfo::PluginsPath) + &quot;/lipi_toolkit&quot;</db:code> if <db:code>LIPI_ROOT</db:code> is not set.</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
