<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRhiTextureSubresourceUploadDescription Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the source for one mip level in a layer in a texture upload operation.</db:para>
<db:para>This class was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The source content is specified either as a <db:link xlink:href="qimage.xml">QImage</db:link> or as a raw blob. The former is only allowed for uncompressed textures with a format that can be mapped to <db:link xlink:href="qimage.xml">QImage</db:link>, while the latter is supported for all formats, including floating point and compressed.</db:para>
<db:note>
<db:para>image() and data() cannot be both set at the same time.</db:para>
</db:note>
<db:para>destinationTopLeft() specifies the top-left corner of the target rectangle. Defaults to (0, 0).</db:para>
<db:para>An empty sourceSize() (the default) indicates that size is assumed to be the size of the subresource. With <db:link xlink:href="qimage.xml">QImage</db:link>-based uploads this implies that the size of the source image() must match the subresource. When providing raw data instead, sufficient number of bytes must be provided in data().</db:para>
<db:para>sourceTopLeft() is supported only for <db:link xlink:href="qimage.xml">QImage</db:link>-based uploads, and specifies the top-left corner of the source rectangle.</db:para>
<db:note>
<db:para>Setting sourceSize() or sourceTopLeft() may trigger a <db:link xlink:href="qimage.xml">QImage</db:link> copy internally, depending on the format and the backend.</db:para>
</db:note>
<db:para>When providing raw data, and the stride is not specified via setDataStride(), the stride (row pitch, row length in bytes) of the provided data must be equal to <db:code>width * pixelSize</db:code> where <db:code>pixelSize</db:code> is the number of bytes used for one pixel, and there must be no additional padding between rows. There is no row start alignment requirement.</db:para>
<db:para>When there is unused data at the end of each row in the input raw data, call setDataStride() with the total number of bytes per row. The stride must always be a multiple of the number of bytes for one pixel. The row stride is only applicable to image data for textures with an uncompressed format.</db:para>
<db:note>
<db:para>The format of the source data must be compatible with the texture format. With many graphics APIs the data is copied as-is into a staging buffer, there is no intermediate format conversion provided by <db:link xlink:href="qrhi.xml">QRhi</db:link>. This applies to floating point formats as well, with, for example, RGBA16F requiring half floats in the source data.</db:para>
</db:note>
<db:note>
<db:para>Setting the stride via setDataStride() is only functional when <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::ImageDataStride</db:link> is reported as <db:link xlink:href="qrhi.xml#isFeatureSupported">supported</db:link>. In practice this can be expected to be supported everywhere except for OpenGL ES 2.0.</db:para>
</db:note>
<db:note>
<db:para>When a <db:link xlink:href="qimage.xml">QImage</db:link> is given, the stride returned from QImage::bytesPerLine() is taken into account automatically.</db:para>
</db:note>
<db:warning>
<db:para>When a <db:link xlink:href="qimage.xml">QImage</db:link> is given and the <db:link xlink:href="qimage.xml">QImage</db:link> does not own the underlying pixel data, it is up to the caller to ensure that the associated data stays valid until the end of the frame. (just submitting the resource update batch is not sufficient, the data must stay valid until <db:link xlink:href="qrhi.xml#endFrame">QRhi::endFrame</db:link>() is called in order to be portable across all backends) If this cannot be ensured, the caller is strongly encouraged to call QImage::detach() on the image before passing it to uploadTexture().</db:para>
</db:warning>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrhitextureuploaddescription.xml">QRhiTextureUploadDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiTextureSubresourceUploadDescription">
<db:title>[explicit] QRhiTextureSubresourceUploadDescription::QRhiTextureSubresourceUploadDescription(const QByteArray &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Constructs a mip level description with the image data specified by <db:code role="parameter">data</db:code>. This is suitable for floating point and compressed formats as well.</db:para>
</db:section>
<db:section xml:id="QRhiTextureSubresourceUploadDescription-1">
<db:title>[explicit] QRhiTextureSubresourceUploadDescription::QRhiTextureSubresourceUploadDescription(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:para>Constructs a mip level description with a <db:code role="parameter">image</db:code>.</db:para>
<db:para>The <db:link xlink:href="qimage.xml#size">size</db:link> of <db:code role="parameter">image</db:code> must match the size of the mip level. For level 0 that is the <db:link xlink:href="">texture size</db:link>.</db:para>
<db:para>The bit depth of <db:code role="parameter">image</db:code> must be compatible with the <db:link xlink:href="qrhitexture.xml#Format-enum">texture format</db:link>.</db:para>
<db:para>To describe a partial upload, call setSourceSize(), setSourceTopLeft(), or setDestinationTopLeft() afterwards.</db:para>
</db:section>
<db:section xml:id="QRhiTextureSubresourceUploadDescription-2">
<db:title>QRhiTextureSubresourceUploadDescription::QRhiTextureSubresourceUploadDescription(const void *<db:emphasis>data</db:emphasis>, quint32 <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Constructs a mip level description with the image data is specified by <db:code role="parameter">data</db:code> and <db:code role="parameter">size</db:code>. This is suitable for floating point and compressed formats as well.</db:para>
<db:para><db:code role="parameter">data</db:code> can safely be destroyed or changed once this function returns.</db:para>
</db:section>
</db:section>
</db:article>
