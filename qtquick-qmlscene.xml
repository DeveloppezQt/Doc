<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Prototyping with qmlscene</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Utility to test and load QML files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt includes qmlscene, a utility that loads and displays QML documents even before the application is complete. This utility also provides the following additional features that are useful while developing QML applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>View the QML document in a maximized window.</db:para>
</db:listitem>
<db:listitem>
<db:para>View the QML document in full-screen mode.</db:para>
</db:listitem>
<db:listitem>
<db:para>Make the window transparent.</db:para>
</db:listitem>
<db:listitem>
<db:para>Disable multi-sampling (anti-aliasing).</db:para>
</db:listitem>
<db:listitem>
<db:para>Do not detect the version of the .qml file.</db:para>
</db:listitem>
<db:listitem>
<db:para>Run all animations in slow motion.</db:para>
</db:listitem>
<db:listitem>
<db:para>Resize the window to the size of the root item.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the list of import paths.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add a named bundle.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use a translation file to set the language.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The qmlscene utility is meant to be used for testing your QML applications, and not as a launcher in a production environment. To launch a QML application in a production environment, develop a custom C++ application or bundle the QML file in a module. See <db:link xlink:href="qtquick-deployment.xml">Deploying QML applications</db:link> for more information. When given a bare <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> as root element, qmlscene will automatically create a window to show the scene. Notably, <db:link xlink:href="qqmlcomponent.xml#create">QQmlComponent::create</db:link>() will not do such a thing. Therefore, when moving from a prototype developed with qmlscene to a C++ application, you need to either make sure the root element is a <db:link xlink:href="qt3dextras-module.xml#window">Window</db:link> or manually create a window using <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>'s C++ API. On the flip side, the ability to automatically create a window gives you the option to load parts of your prototype separately with qmlscene.</db:para>
<db:para>To load a .qml file, run the tool and select the file to be opened, or provide the file path on the command prompt:</db:para>
<db:programlisting language="cpp">qmlscene myqmlfile.qml
</db:programlisting>
<db:para>To see the configuration options, run qmlscene with the -help argument.</db:para>
<db:section xml:id="adding-module-import-paths">
<db:title>Adding Module Import Paths</db:title>
<db:para>Additional module import paths can be provided using the -I flag. For example, the <db:link xlink:href="qtqml-qmlextensionplugins-example.xml">QML plugin example</db:link> creates a C++ plugin identified with the namespace, TimeExample. To load the plugin, you must run qmlscene with the -I flag from the example's base directory:</db:para>
<db:programlisting language="cpp">qmlscene -I imports plugins.qml
</db:programlisting>
<db:para>This adds the current directory to the import path so that qmlscene will find the plugin in the imports directory.</db:para>
<db:note>
<db:para>By default, the current directory is included in the import search path, but modules in a namespace such as TimeExample are not found unless the path is explicitly added.</db:para>
</db:note>
</db:section>
<db:section xml:id="loading-test-data">
<db:title>Loading Test Data</db:title>
<db:para>Often, QML applications are prototyped with test data that is later replaced by real data sources from C++ plugins. The qmlscene utility assists in this aspect by loading test data into the application context. It looks for a directory named dummydata in the same directory as the target QML file, and loads the .qml files in that directory as QML objects and bind them to the root context as properties named after the files.</db:para>
<db:para>For example, the following QML document refers to a lottoNumbers property which does not exist within the document:</db:para>
<db:programlisting language="qml">import QtQuick

ListView {
    width: 200; height: 300
    model: lottoNumbers
    delegate: Text { text: number }
}
</db:programlisting>
<db:para>If, within the document's directory, there is a dummydata directory which contains a lottoNumbers.qml file like this:</db:para>
<db:programlisting language="qml">import QtQuick

ListModel {
    ListElement { number: 23 }
    ListElement { number: 44 }
    ListElement { number: 78 }
}
</db:programlisting>
<db:para>Then this model would be automatically loaded into the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> in the previous document.</db:para>
<db:para>Child properties are included when loaded from dummydata. The following document refers to a clock.time property:</db:para>
<db:programlisting language="qml">import QtQuick
Text { text: clock.time }
</db:programlisting>
<db:para>The text value could be filled by a dummydata/clock.qml file with a time property in the root context:</db:para>
<db:programlisting language="qml">import QtQuick
QtObject { property int time: 54321 }
</db:programlisting>
<db:para>To replace this with real data, bind the real data object to the root context in C++ using <db:link xlink:href="qqmlcontext.xml#setContextProperty">QQmlContext::setContextProperty</db:link>(). This is detailed in <db:link xlink:href="qtqml-cppintegration-topic.xml">Integrating QML and C++</db:link>.</db:para>
</db:section>
</db:article>
