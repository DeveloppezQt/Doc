<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>View3D QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a viewport on which to render a 3D scene.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> provides a 2D surface on which a 3D scene can be rendered. This surface is a Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> and can be placed in a Qt Quick scene.</db:para>
<db:para>There are two ways to define the 3D scene that is visualized on the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>: If you define a hierarchy of <db:link xlink:href="qml-qtquick3d-node.xml">Node-based</db:link> items as children of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> directly, then this will become the implicit scene of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:para>It is also possible to reference an existing scene by using the <db:link xlink:href="qml-qtquick3d-view3d.xml#importScene-prop">importScene</db:link> property and setting it to the root <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> of the scene you want to visualize. This <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> does not have to be an ancestor of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>, and you can have multiple View3Ds that import the same scene.</db:para>
<db:para>This is demonstrated in <db:link xlink:href="qtquick3d-view3d-example.xml">View3D example</db:link>.</db:para>
<db:para>If the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> both has child <db:link xlink:href="qml-qtquick3d-node.xml">Nodes</db:link> and the <db:link xlink:href="qml-qtquick3d-view3d.xml#importScene-prop">importScene</db:link> property is set simultaneously, then both scenes will be rendered as if they were sibling subtrees in the same scene.</db:para>
<db:para>To control how a scene is rendered, you can set the <db:link xlink:href="qml-qtquick3d-view3d.xml#environment-prop">environment</db:link> property. The type <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> has a number of visual properties that can be adjusted, such as background color, tone mapping, anti-aliasing and more. <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> in the <db:code>QtQuick3D.Helpers</db:code> module extends <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> with even more features, adding common post-processing effects.</db:para>
<db:para>In addition, in order for anything to be rendered in the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>, the scene needs a <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link>. If there is only a single <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link> in the scene, then this will automatically be picked. Otherwise, the <db:link xlink:href="qml-qtquick3d-view3d.xml#camera-prop">camera</db:link> property can be used to select the camera. The <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link> decides which parts of the scene are visible, and how they are projected onto the 2D surface.</db:para>
<db:para>By default, the 3D scene will first be rendered into an off-screen buffer and then composited with the rest of the Qt Quick scene when it is done. This provides the maximum level of compatibility, but may have performance implications on some graphics hardware. If this is the case, the <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> property can be used to switch how the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is rendered into the window.</db:para>
<db:para>A <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> with the default Offscreen <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> is implicitly a <db:link xlink:href="qsgtextureprovider.xml">texture provider</db:link> as well. This means that <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> or <db:link xlink:href="qml-qtquick3d-texture.xml#sourceItem-prop">Texture.sourceItem</db:link> can reference the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> directly as long as all items live within the same <db:link xlink:href="qquickwindow.xml">window</db:link>. Like with any other <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>, it is also possible to switch the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>, or one of its ancestors, into a texture-based <db:link xlink:href="qml-qtquick-item.xml#layer.enabled-prop">item layer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-view3d-example.xml">Qt Quick 3D - View3D example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="camera-prop">
<db:title>camera : QtQuick3D::Camera</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Camera</db:type>
<db:varname>camera</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies which <db:link xlink:href="qml-qtquick3d-camera.xml">Camera</db:link> is used to render the scene. If this property is not set, then the first enabled camera in the scene will be used.</db:para>
<db:note>
<db:para>If this property contains a camera that's not <db:link xlink:href="qml-qtquick3d-node.xml#visible-prop">visible</db:link> then no further attempts to find a camera will be done.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-perspectivecamera.xml">PerspectiveCamera</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-orthographiccamera.xml">OrthographicCamera</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-frustumcamera.xml">FrustumCamera</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-customcamera.xml">CustomCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="environment-prop">
<db:title>environment : QtQuick3D::SceneEnvironment</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::SceneEnvironment</db:type>
<db:varname>environment</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> used to render the scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="importScene-prop">
<db:title>importScene : QtQuick3D::Node</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Node</db:type>
<db:varname>importScene</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the reference node of the scene to render to the viewport. The node does not have to be a child of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. This referenced node becomes a sibling with child nodes of <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>, if there are any.</db:para>
<db:note>
<db:para>This property can only be set once, and subsequent changes will have no effect.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderFormat-prop">
<db:title>[since 6.4] renderFormat : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>renderFormat</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines the backing texture's format. Applicable only when the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is rendering to a texture, for example because the <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> is <db:code>View3D.Offscreen</db:code>.</db:para>
<db:para>The default is <db:code>ShaderEffectSource.RGBA8</db:code>.</db:para>
<db:para>If the format is not supported by the underlying graphics driver at run time, RGBA8 is used.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.RGBA8</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.RGBA16F</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.RGBA32F</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This property was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-shadereffectsource.xml#format-prop">QtQuick::ShaderEffectSource::format</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-item.xml#layer.format-prop">QtQuick::Item::layer.format</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderMode-prop">
<db:title>renderMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>renderMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines how the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is combined with the other parts of the Qt Quick scene.</db:para>
<db:para>By default, the scene will be rendered into an off-screen buffer as an intermediate step. This off-screen buffer is then rendered into the window (or render target) like any other Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>.</db:para>
<db:para>For most users, there will be no need to change the render mode, and this property can safely be ignored. But on some graphics hardware, the use of an off-screen buffer can be a performance bottleneck. If this is the case, it might be worth experimenting with other modes.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>View3D.Offscreen</db:para>
</db:td>
<db:td>
<db:para>The scene is rendered into an off-screen buffer as an intermediate step. This off-screen buffer is then composited with the rest of the Qt Quick scene.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>View3D.Underlay</db:para>
</db:td>
<db:td>
<db:para>The scene is rendered directly to the window before the rest of the Qt Quick scene is rendered. With this mode, the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> cannot be placed on top of other Qt Quick items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>View3D.Overlay</db:para>
</db:td>
<db:td>
<db:para>The scene is rendered directly to the window after Qt Quick is rendered. With this mode, the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> will always be on top of other Qt Quick items.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>View3D.Inline</db:para>
</db:td>
<db:td>
<db:para>The <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>'s scene graph is embedded into the main scene graph, and the same ordering semantics are applied as to any other Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>. As this mode can lead to subtle issues, depending on the contents of the scene, due to injecting depth-based 3D content into a 2D scene graph, it is not recommended to be used, unless a specific need arises.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default is <db:code>View3D.Offscreen</db:code>.</db:para>
<db:note>
<db:para>When changing the render mode, it is important to note that <db:code>View3D.Offscreen</db:code> (the default) is the only mode which guarantees perfect graphics fidelity. The other modes all have limitations that can cause visual glitches, so it is important to check that the visual output still looks correct when changing this property.</db:para>
</db:note>
<db:note>
<db:para>When using the Underlay, Overlay, or Inline modes, it can be useful, and in some cases, required, to disable the Qt Quick scene graph's depth buffer writes via <db:link xlink:href="qquickgraphicsconfiguration.xml#setDepthBufferFor2D">QQuickGraphicsConfiguration::setDepthBufferFor2D</db:link>() before showing the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link> hosting the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> item.</db:para>
</db:note>
</db:section>
<db:section xml:id="renderStats-prop">
<db:title>[read-only] renderStats : QtQuick3D::RenderStats</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::RenderStats</db:type>
<db:varname>renderStats</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property provides statistics about the rendering of a frame, such as <db:link xlink:href="qml-qtquick3d-renderstats.xml#fps-prop">fps</db:link>, <db:link xlink:href="qml-qtquick3d-renderstats.xml#frameTime-prop">frameTime</db:link>, <db:link xlink:href="qml-qtquick3d-renderstats.xml#renderTime-prop">renderTime</db:link>, <db:link xlink:href="qml-qtquick3d-renderstats.xml#syncTime-prop">syncTime</db:link>, and <db:link xlink:href="qml-qtquick3d-renderstats.xml#maxFrameTime-prop">maxFrameTime</db:link>.</db:para>
</db:section>
<db:section xml:id="scene-prop">
<db:title>[read-only] scene : QtQuick3D::Node</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Node</db:type>
<db:varname>scene</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Holds the root <db:link xlink:href="qml-qtquick3d-node.xml">Node</db:link> of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>'s scene.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#importScene-prop">importScene</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="mapFrom3DScene-method">
<db:title>vector3d mapFrom3DScene(vector3d <db:emphasis>scenePos</db:emphasis>)</db:title>
<db:para>Transforms <db:code role="parameter">scenePos</db:code> from scene space (3D) into view space (2D).</db:para>
<db:para>The returned x- and y-values will be be in view coordinates, with the top-left corner at [0, 0] and the bottom-right corner at [width, height]. The returned z-value contains the distance from the near clip plane of the frustum (clipNear) to <db:code role="parameter">scenePos</db:code> in scene coordinates. If the distance is negative, that means the <db:code role="parameter">scenePos</db:code> is behind the active camera. If <db:code role="parameter">scenePos</db:code> cannot be mapped to a position in the scene, a position of [0, 0, 0] is returned.</db:para>
<db:para>This function requires that <db:link xlink:href="qml-qtquick3d-view3d.xml#camera-prop">camera</db:link> is assigned to the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#mapTo3DScene-method">mapTo3DScene</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick3d-camera.xml#mapToViewport-method">Camera.mapToViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mapTo3DScene-method">
<db:title>vector3d mapTo3DScene(vector3d <db:emphasis>viewPos</db:emphasis>)</db:title>
<db:para>Transforms <db:code role="parameter">viewPos</db:code> from view space (2D) into scene space (3D).</db:para>
<db:para>The x- and y-values of <db:code role="parameter">viewPos</db:code> should be in view coordinates, with the top-left corner at [0, 0] and the bottom-right corner at [width, height]. The z-value is interpreted as the distance from the near clip plane of the frustum (clipNear) in scene coordinates.</db:para>
<db:para>If <db:code role="parameter">viewPos</db:code> cannot successfully be mapped to a position in the scene, a position of [0, 0, 0] is returned.</db:para>
<db:para>This function requires that a <db:link xlink:href="qml-qtquick3d-view3d.xml#camera-prop">camera</db:link> is assigned to the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml#mapFrom3DScene-method">mapFrom3DScene</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick3d-camera.xml#mapFromViewport-method">Camera.mapFromViewport</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pick-method">
<db:title>PickResult pick(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This method will &quot;shoot&quot; a ray into the scene from view coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> and return information about the nearest intersection with an object in the scene.</db:para>
<db:para>This can, for instance, be called with mouse coordinates to find the object under the mouse cursor.</db:para>
</db:section>
<db:section xml:id="pickAll-method">
<db:title>[since 6.2] List&lt;PickResult&gt; pickAll(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>)</db:title>
<db:para>This method will &quot;shoot&quot; a ray into the scene from view coordinates <db:code role="parameter">x</db:code> and <db:code role="parameter">y</db:code> and return a list of information about intersections with objects in the scene. The returned list is sorted by distance from the camera with the nearest intersections appearing first and the furthest appearing last.</db:para>
<db:para>This can, for instance, be called with mouse coordinates to find the object under the mouse cursor.</db:para>
<db:para>This method was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="rayPick-method">
<db:title>[since 6.2] PickResult rayPick(vector3d <db:emphasis>origin</db:emphasis>, vector3d <db:emphasis>direction</db:emphasis>)</db:title>
<db:para>This method will &quot;shoot&quot; a ray into the scene starting at <db:code role="parameter">origin</db:code> and in <db:code role="parameter">direction</db:code> and return information about the nearest intersection with an object in the scene.</db:para>
<db:para>This can, for instance, be called with the position and forward vector of any object in a scene to see what object is in front of an item. This makes it possible to do picking from any point in the scene.</db:para>
<db:para>This method was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="rayPickAll-method">
<db:title>[since 6.2] List&lt;PickResult&gt; rayPickAll(vector3d <db:emphasis>origin</db:emphasis>, vector3d <db:emphasis>direction</db:emphasis>)</db:title>
<db:para>This method will &quot;shoot&quot; a ray into the scene starting at <db:code role="parameter">origin</db:code> and in <db:code role="parameter">direction</db:code> and return a list of information about the nearest intersections with objects in the scene. The list is presorted by distance from the origin along the direction vector with the nearest intersections appearing first and the furthest appearing last.</db:para>
<db:para>This can, for instance, be called with the position and forward vector of any object in a scene to see what objects are in front of an item. This makes it possible to do picking from any point in the scene.</db:para>
<db:para>This method was introduced in Qt 6.2.</db:para>
</db:section>
</db:section>
</db:article>
