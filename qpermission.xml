<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPermission Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An opaque wrapper of a typed permission.</db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPermissions</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qpermission.xml">QPermission</db:link> class is an opaque wrapper of a <db:link xlink:href="qpermission.xml#typed-permission">typed permission</db:link>, used when checking or requesting permissions. You do not need to construct this type explicitly, as the type is automatically used when checking or requesting permissions:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;checkPermission(QCameraPermission{});
</db:programlisting>
<db:para>When requesting permissions, the given functor will be passed an instance of a <db:link xlink:href="qpermission.xml">QPermission</db:link>, which can be used to check the result of the request:</db:para>
<db:programlisting language="cpp">qApp-&amp;gt;requestPermission(QCameraPermission{}, [](const QPermission &amp;amp;permission) {
    if (permission.status() == Qt::PermissionStatus:Granted)
        takePhoto();
});
</db:programlisting>
<db:para>To inspect the properties of the original, typed permission, use the <db:link xlink:href="qpermission.xml#value">value</db:link>() function:</db:para>
<db:programlisting language="cpp">QLocationPermission locationPermission;
locationPermission.setAccuracy(QLocationPermission::Precise);
qApp-&amp;gt;requestPermission(locationPermission, this, &amp;amp;LocationWidget::permissionUpdated);
</db:programlisting>
<db:programlisting language="cpp">void LocationWidget::permissionUpdated(const QPermission &amp;amp;permission)
{
    if (permission.status() != Qt::PermissionStatus:Granted)
        return;
    auto locationPermission = permission.value&amp;lt;QLocationPermission&amp;gt;();
    if (!locationPermission || locationPermission-&amp;gt;accuracy() != QLocationPermission::Precise)
        return;
    updatePreciseLocation();
}
</db:programlisting>
<db:anchor xml:id="typed-permission"/>
<db:section xml:id="typed-permissions">
<db:title>Typed Permissions</db:title>
<db:para>The following permissions are available:</db:para>
<db:variablelist role="permissions">
<db:varlistentry>
<db:term><db:link xlink:href="qbluetoothpermission.xml" xlink:role="class">QBluetoothPermission</db:link></db:term>
<db:listitem>
<db:para>Access Bluetooth peripherals.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcalendarpermission.xml" xlink:role="class">QCalendarPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's calendar.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcamerapermission.xml" xlink:role="class">QCameraPermission</db:link></db:term>
<db:listitem>
<db:para>Access the camera for taking pictures or videos.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcontactspermission.xml" xlink:role="class">QContactsPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's contacts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocationpermission.xml" xlink:role="class">QLocationPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmicrophonepermission.xml" xlink:role="class">QMicrophonePermission</db:link></db:term>
<db:listitem>
<db:para>Access the microphone for monitoring or recording sound.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="permissions.xml">Application Permissions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPermission-1">
<db:title>QPermission::QPermission(const T &amp;<db:emphasis>type</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPermission</db:methodname>
<db:methodparam>
<db:type>const T &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPermission(const T &amp;type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a permission from the given <db:link xlink:href="qpermission.xml#typed-permission">typed permission</db:link> <db:code role="parameter">type</db:code>.</db:para>
<db:para>You do not need to construct this type explicitly, as the type is automatically used when checking or requesting permissions.</db:para>
<db:para>This constructor participates in overload resolution only if T is one of the <db:link xlink:href="qpermission.xml#typed-permission">typed permission</db:link> classes:</db:para>
<db:variablelist role="permissions">
<db:varlistentry>
<db:term><db:link xlink:href="qbluetoothpermission.xml" xlink:role="class">QBluetoothPermission</db:link></db:term>
<db:listitem>
<db:para>Access Bluetooth peripherals.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcalendarpermission.xml" xlink:role="class">QCalendarPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's calendar.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcamerapermission.xml" xlink:role="class">QCameraPermission</db:link></db:term>
<db:listitem>
<db:para>Access the camera for taking pictures or videos.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcontactspermission.xml" xlink:role="class">QContactsPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's contacts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocationpermission.xml" xlink:role="class">QLocationPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmicrophonepermission.xml" xlink:role="class">QMicrophonePermission</db:link></db:term>
<db:listitem>
<db:para>Access the microphone for monitoring or recording sound.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="status">
<db:title>Qt::PermissionStatus QPermission::status() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PermissionStatus</db:type>
<db:methodname>status</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PermissionStatus status() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the status of the permission.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QMetaType QPermission::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMetaType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMetaType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the permission.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>std::optional&lt;T&gt; QPermission::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>std::optional&lt;T&gt;</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::optional&lt;T&gt; value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qpermission.xml#typed-permission">typed permission</db:link> of type T, or std::nullopt if this <db:link xlink:href="qpermission.xml">QPermission</db:link> object doesn't contain one.</db:para>
<db:para>Use <db:link xlink:href="qpermission.xml#type">type</db:link>() for dynamically choosing which typed permission to request.</db:para>
<db:para>This function participates in overload resolution only if T is one of the <db:link xlink:href="qpermission.xml#typed-permission">typed permission</db:link> classes:</db:para>
<db:variablelist role="permissions">
<db:varlistentry>
<db:term><db:link xlink:href="qbluetoothpermission.xml" xlink:role="class">QBluetoothPermission</db:link></db:term>
<db:listitem>
<db:para>Access Bluetooth peripherals.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcalendarpermission.xml" xlink:role="class">QCalendarPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's calendar.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcamerapermission.xml" xlink:role="class">QCameraPermission</db:link></db:term>
<db:listitem>
<db:para>Access the camera for taking pictures or videos.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcontactspermission.xml" xlink:role="class">QContactsPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's contacts.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qlocationpermission.xml" xlink:role="class">QLocationPermission</db:link></db:term>
<db:listitem>
<db:para>Access the user's location.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmicrophonepermission.xml" xlink:role="class">QMicrophonePermission</db:link></db:term>
<db:listitem>
<db:para>Access the microphone for monitoring or recording sound.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
