<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemModelBarDataProxy Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Proxy class for presenting data in item models with <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemModelBarDataProxy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtdatavisualization-itemmodelbardataproxy.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qbardataproxy.xml" xlink:role="class">QBarDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> allows you to use <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived models as a data source for <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>. It uses the defined mappings to map data from the model to rows, columns, and values of <db:link xlink:href="q3dbars.xml">Q3DBars</db:link> graph.</db:para>
<db:para>The data is resolved asynchronously whenever mappings or the model changes. <db:link xlink:href="qbardataproxy.xml#arrayReset">QBarDataProxy::arrayReset</db:link>() is emitted when the data has been resolved. However, when <db:link xlink:href="qitemmodelbardataproxy.xml#useModelCategories-prop">useModelCategories</db:link> property is set to true, single item changes are resolved synchronously, unless the same frame also contains a change that causes the whole model to be resolved.</db:para>
<db:para>Mappings can be used in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:link xlink:href="qitemmodelbardataproxy.xml#useModelCategories-prop">useModelCategories</db:link> property is set to true, this proxy will map rows and columns of <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> directly to rows and columns of <db:link xlink:href="q3dbars.xml">Q3DBars</db:link>, and uses the value returned for <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> as bar value by default. The value role to be used can be redefined if <db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link> is not suitable.</db:para>
</db:listitem>
<db:listitem>
<db:para>For models that do not have data already neatly sorted into rows and columns, such as <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> based models, you can define a role from the model to map for each of row, column and value.</db:para>
</db:listitem>
<db:listitem>
<db:para>If you do not want to include all data contained in the model, or the autogenerated rows and columns are not ordered as you wish, you can specify which rows and columns should be included and in which order by defining an explicit list of categories for either or both of rows and columns.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, assume that you have a custom <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> for storing various monthly values related to a business. Each item in the model has the roles &quot;year&quot;, &quot;month&quot;, &quot;income&quot;, and &quot;expenses&quot;. You could do the following to display the data in a bar graph:</db:para>
<db:programlisting language="cpp">// By defining row and column categories, you tell the mapping which row and column each item
// belongs to. The categories must match the data stored in the model in the roles you define
// for row and column mapping. In this example we expect &quot;year&quot; role to return four digit year
// and &quot;month&quot; to return three letter designation for the month.
//
// An example of an item in model would be:
// Requested role -&amp;gt; Returned data
// &quot;year&quot; -&amp;gt; &quot;2006&quot; // Matches the first row category, so this item is added to the first row.
// &quot;month&quot; -&amp;gt; &quot;jan&quot; // Matches the first column category, so this item is added as first item in the row.
// &quot;income&quot; -&amp;gt; &quot;12.1&quot;
// &quot;expenses&quot; -&amp;gt; &quot;9.2&quot;
QStringList years;
QStringList months;
years &amp;lt;&amp;lt; &quot;2006&quot; &amp;lt;&amp;lt; &quot;2007&quot; &amp;lt;&amp;lt; &quot;2008&quot; &amp;lt;&amp;lt; &quot;2009&quot; &amp;lt;&amp;lt; &quot;2010&quot; &amp;lt;&amp;lt; &quot;2011&quot; &amp;lt;&amp;lt; &quot;2012&quot;;
months &amp;lt;&amp;lt; &quot;jan&quot; &amp;lt;&amp;lt; &quot;feb&quot; &amp;lt;&amp;lt; &quot;mar&quot; &amp;lt;&amp;lt; &quot;apr&quot; &amp;lt;&amp;lt; &quot;may&quot; &amp;lt;&amp;lt; &quot;jun&quot; &amp;lt;&amp;lt; &quot;jul&quot; &amp;lt;&amp;lt; &quot;aug&quot; &amp;lt;&amp;lt; &quot;sep&quot; &amp;lt;&amp;lt; &quot;oct&quot; &amp;lt;&amp;lt; &quot;nov&quot; &amp;lt;&amp;lt; &quot;dec&quot;;

QItemModelBarDataProxy *proxy = new QItemModelBarDataProxy(customModel,
                                                           QStringLiteral(&quot;year&quot;), // Row role
                                                           QStringLiteral(&quot;month&quot;), // Column role
                                                           QStringLiteral(&quot;income&quot;), // Value role
                                                           years, // Row categories
                                                           months); // Column categories

//...

// To display different data later, you can simply change the mapping.
proxy-&amp;gt;setValueRole(QStringLiteral(&quot;expenses&quot;));
</db:programlisting>
<db:para>If the fields of the model do not contain the data in the exact format you need, you can specify a search pattern regular expression and a replace rule for each role to get the value in a format you need. For more information how the replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation. Note that using regular expressions has an impact on the performance, so it's more efficient to utilize item models where doing search and replace is not necessary to get the desired values.</db:para>
<db:para>For example about using the search patterns in conjunction with the roles, see <db:link xlink:href="qtdatavis3d-qmlbars-example.xml">Qt Quick 2 Bars Example</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdatavisualization-data-handling.xml">Qt Data Visualization Data Handling</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MultiMatchBehavior-enum">
<db:title>enum QItemModelBarDataProxy::MultiMatchBehavior</db:title>
<db:enumsynopsis>
<db:enumname>MultiMatchBehavior</db:enumname>
<db:enumitem>
<db:enumidentifier>MMBFirst</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MMBLast</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MMBAverage</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MMBCumulative</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Behavior types for <db:link xlink:href="qitemmodelbardataproxy.xml#multiMatchBehavior-prop">QItemModelBarDataProxy::multiMatchBehavior</db:link> property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link></db:emphasis>::MMBFirst</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The value is taken from the first item in the item model that matches each row/column combination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link></db:emphasis>::MMBLast</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The value is taken from the last item in the item model that matches each row/column combination.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link></db:emphasis>::MMBAverage</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The values from all items matching each row/column combination are averaged together and the average is used as the bar value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link></db:emphasis>::MMBCumulative</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The values from all items matching each row/column combination are added together and the total is used as the bar value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="autoColumnCategories-prop">
<db:title>autoColumnCategories : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoColumnCategories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoColumnCategories</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoColumnCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">autoColumnCategoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether column categories are generated automatically.</db:para>
<db:para>When set to <db:code>true</db:code>, the mapping ignores any explicitly set column categories and overwrites them with automatically generated ones whenever the data from model is resolved. Defaults to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoColumnCategories</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoColumnCategories</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">autoColumnCategoriesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="autoRowCategories-prop">
<db:title>autoRowCategories : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>autoRowCategories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">autoRowCategories</db:synopsisinfo>
<db:synopsisinfo role="setter">setAutoRowCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">autoRowCategoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether row categories are generated automatically.</db:para>
<db:para>When set to <db:code>true</db:code>, the mapping ignores any explicitly set row categories and overwrites them with automatically generated ones whenever the data from model is resolved. Defaults to <db:code>true</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">autoRowCategories</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAutoRowCategories</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">autoRowCategoriesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="columnCategories-prop">
<db:title>columnCategories : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>columnCategories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnCategories</db:synopsisinfo>
<db:synopsisinfo role="setter">setColumnCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnCategoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the column categories for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">columnCategories</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColumnCategories</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>categories</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnCategoriesChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="columnRole-prop">
<db:title>columnRole : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>columnRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setColumnRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the column role for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">columnRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColumnRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="columnRolePattern-prop">
<db:title>columnRolePattern : QRegularExpression</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegularExpression</db:type>
<db:varname>columnRolePattern</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnRolePattern</db:synopsisinfo>
<db:synopsisinfo role="setter">setColumnRolePattern</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnRolePatternChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a search and replace is done on the value mapped by column role before it is used as a column category.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelbardataproxy.xml#columnRoleReplace-prop">columnRoleReplace</db:link> property contains the replacement string. This is useful for example in parsing row and column categories from a single timestamp field in the item model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">columnRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColumnRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#columnRole-prop">columnRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#columnRoleReplace-prop">columnRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnRoleReplace-prop">
<db:title>columnRoleReplace : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>columnRoleReplace</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">columnRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="setter">setColumnRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="notifier">columnRoleReplaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the replace content to be used in conjunction with <db:link xlink:href="qitemmodelbardataproxy.xml#columnRolePattern-prop">columnRolePattern</db:link>.</db:para>
<db:para>Defaults to empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">columnRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setColumnRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">columnRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#columnRole-prop">columnRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#columnRolePattern-prop">columnRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemModel-prop">
<db:title>itemModel : QAbstractItemModel*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAbstractItemModel*</db:type>
<db:varname>itemModel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">itemModel</db:synopsisinfo>
<db:synopsisinfo role="setter">setItemModel</db:synopsisinfo>
<db:synopsisinfo role="notifier">itemModelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis role="bold">itemModel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qitemmodelbardataproxy.xml#setItemModel">setItemModel</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis>itemModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">itemModelChanged</db:emphasis>(const <db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis>itemModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="multiMatchBehavior-prop">
<db:title>multiMatchBehavior : MultiMatchBehavior</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>MultiMatchBehavior</db:type>
<db:varname>multiMatchBehavior</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">multiMatchBehavior</db:synopsisinfo>
<db:synopsisinfo role="setter">setMultiMatchBehavior</db:synopsisinfo>
<db:synopsisinfo role="notifier">multiMatchBehaviorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>How multiple matches for each row/column combination are handled.</db:para>
<db:para>Defaults to <db:link xlink:href="qitemmodelbardataproxy.xml#MultiMatchBehavior-enum">QItemModelBarDataProxy::MMBLast</db:link>. The chosen behavior affects both bar value and rotation.</db:para>
<db:para>For example, you might have an item model with timestamped data taken at irregular intervals and you want to visualize total value of data items on each day with a bar graph. This can be done by specifying row and column categories so that each bar represents a day, and setting multiMatchBehavior to <db:link xlink:href="qitemmodelbardataproxy.xml#MultiMatchBehavior-enum">QItemModelBarDataProxy::MMBCumulative</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qitemmodelbardataproxy.xml#MultiMatchBehavior-enum">QItemModelBarDataProxy::MultiMatchBehavior</db:link></db:type> <db:emphasis role="bold">multiMatchBehavior</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMultiMatchBehavior</db:emphasis>(<db:type><db:link xlink:href="qitemmodelbardataproxy.xml#MultiMatchBehavior-enum">QItemModelBarDataProxy::MultiMatchBehavior</db:link></db:type> <db:emphasis>behavior</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">multiMatchBehaviorChanged</db:emphasis>(<db:type><db:link xlink:href="qitemmodelbardataproxy.xml#MultiMatchBehavior-enum">QItemModelBarDataProxy::MultiMatchBehavior</db:link></db:type> <db:emphasis>behavior</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationRole-prop">
<db:title>rotationRole : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>rotationRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rotationRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setRotationRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">rotationRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the rotation role for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rotationRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationRolePattern-prop">
<db:title>rotationRolePattern : QRegularExpression</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegularExpression</db:type>
<db:varname>rotationRolePattern</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rotationRolePattern</db:synopsisinfo>
<db:synopsisinfo role="setter">setRotationRolePattern</db:synopsisinfo>
<db:synopsisinfo role="notifier">rotationRolePatternChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a search and replace is done on the value mapped by rotation role before it is used as a bar rotation angle.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelbardataproxy.xml#rotationRoleReplace-prop">rotationRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">rotationRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rotationRole-prop">rotationRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rotationRoleReplace-prop">rotationRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotationRoleReplace-prop">
<db:title>rotationRoleReplace : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>rotationRoleReplace</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rotationRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="setter">setRotationRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="notifier">rotationRoleReplaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the replace content to be used in conjunction with <db:link xlink:href="qitemmodelbardataproxy.xml#rotationRolePattern-prop">rotationRolePattern</db:link>.</db:para>
<db:para>Defaults to empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rotationRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rotationRole-prop">rotationRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rotationRolePattern-prop">rotationRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCategories-prop">
<db:title>rowCategories : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>rowCategories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowCategories</db:synopsisinfo>
<db:synopsisinfo role="setter">setRowCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowCategoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the row categories for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">rowCategories</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRowCategories</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>categories</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowCategoriesChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rowRole-prop">
<db:title>rowRole : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>rowRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setRowRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the row role for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rowRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRowRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rowRolePattern-prop">
<db:title>rowRolePattern : QRegularExpression</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegularExpression</db:type>
<db:varname>rowRolePattern</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowRolePattern</db:synopsisinfo>
<db:synopsisinfo role="setter">setRowRolePattern</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowRolePatternChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a search and replace is performed on the value mapped by row role before it is used as a row category.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelbardataproxy.xml#rowRoleReplace-prop">rowRoleReplace</db:link> property contains the replacement string. This is useful for example in parsing row and column categories from a single timestamp field in the item model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">rowRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRowRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rowRole-prop">rowRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rowRoleReplace-prop">rowRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowRoleReplace-prop">
<db:title>rowRoleReplace : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>rowRoleReplace</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">rowRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="setter">setRowRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="notifier">rowRoleReplaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the replace content to be used in conjunction with <db:link xlink:href="qitemmodelbardataproxy.xml#rowRolePattern-prop">rowRolePattern</db:link>.</db:para>
<db:para>Defaults to empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rowRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRowRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rowRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rowRole-prop">rowRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#rowRolePattern-prop">rowRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="useModelCategories-prop">
<db:title>useModelCategories : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>useModelCategories</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">useModelCategories</db:synopsisinfo>
<db:synopsisinfo role="setter">setUseModelCategories</db:synopsisinfo>
<db:synopsisinfo role="notifier">useModelCategoriesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether row and column roles and categories are used for mapping.</db:para>
<db:para>When set to <db:code>true</db:code>, the mapping ignores row and column roles and categories, and uses the rows and columns from the model instead. Defaults to <db:code>false</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">useModelCategories</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setUseModelCategories</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">useModelCategoriesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>enable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="valueRole-prop">
<db:title>valueRole : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>valueRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">valueRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setValueRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the value role for the mapping.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">valueRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValueRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">valueRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="valueRolePattern-prop">
<db:title>valueRolePattern : QRegularExpression</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRegularExpression</db:type>
<db:varname>valueRolePattern</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">valueRolePattern</db:synopsisinfo>
<db:synopsisinfo role="setter">setValueRolePattern</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueRolePatternChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether a search and replace is done on the value mapped by value role before it is used as a bar value.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelbardataproxy.xml#valueRoleReplace-prop">valueRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">valueRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValueRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">valueRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#valueRole-prop">valueRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#valueRoleReplace-prop">valueRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueRoleReplace-prop">
<db:title>valueRoleReplace : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>valueRoleReplace</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">valueRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="setter">setValueRoleReplace</db:synopsisinfo>
<db:synopsisinfo role="notifier">valueRoleReplaceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the replace content to be used in conjunction with <db:link xlink:href="qitemmodelbardataproxy.xml#valueRolePattern-prop">valueRolePattern</db:link>.</db:para>
<db:para>Defaults to empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">valueRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValueRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">valueRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#valueRole-prop">valueRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#valueRolePattern-prop">valueRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemModelBarDataProxy">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with optional <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-1">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-2">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, const QString &amp;valueRole, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The value role is set to <db:code role="parameter">valueRole</db:code>. This constructor is meant to be used with models that have data properly sorted in rows and columns already, so it also sets <db:link xlink:href="qitemmodelbardataproxy.xml#useModelCategories-prop">useModelCategories</db:link> property to true.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-3">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>rowRole</db:emphasis>, const QString &amp;<db:emphasis>columnRole</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rowRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>columnRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, const QString &amp;rowRole, const QString &amp;columnRole, const QString &amp;valueRole, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The role mappings are set with <db:code role="parameter">rowRole</db:code>, <db:code role="parameter">columnRole</db:code>, and <db:code role="parameter">valueRole</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-4">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>rowRole</db:emphasis>, const QString &amp;<db:emphasis>columnRole</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, const QString &amp;<db:emphasis>rotationRole</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rowRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>columnRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rotationRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, const QString &amp;rowRole, const QString &amp;columnRole, const QString &amp;valueRole, const QString &amp;rotationRole, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The role mappings are set with <db:code role="parameter">rowRole</db:code>, <db:code role="parameter">columnRole</db:code>, <db:code role="parameter">valueRole</db:code>, and <db:code role="parameter">rotationRole</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-5">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>rowRole</db:emphasis>, const QString &amp;<db:emphasis>columnRole</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, const QStringList &amp;<db:emphasis>rowCategories</db:emphasis>, const QStringList &amp;<db:emphasis>columnCategories</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rowRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>columnRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>rowCategories</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>columnCategories</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, const QString &amp;rowRole, const QString &amp;columnRole, const QString &amp;valueRole, const QStringList &amp;rowCategories, const QStringList &amp;columnCategories, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The role mappings are set with <db:code role="parameter">rowRole</db:code>, <db:code role="parameter">columnRole</db:code>, and <db:code role="parameter">valueRole</db:code>. Row and column categories are set with <db:code role="parameter">rowCategories</db:code> and <db:code role="parameter">columnCategories</db:code>. This constructor also sets <db:link xlink:href="qitemmodelbardataproxy.xml#autoRowCategories-prop">autoRowCategories</db:link> and <db:link xlink:href="qitemmodelbardataproxy.xml#autoColumnCategories-prop">autoColumnCategories</db:link> to false.</db:para>
</db:section>
<db:section xml:id="QItemModelBarDataProxy-6">
<db:title>[explicit] QItemModelBarDataProxy::QItemModelBarDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>rowRole</db:emphasis>, const QString &amp;<db:emphasis>columnRole</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, const QString &amp;<db:emphasis>rotationRole</db:emphasis>, const QStringList &amp;<db:emphasis>rowCategories</db:emphasis>, const QStringList &amp;<db:emphasis>columnCategories</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QItemModelBarDataProxy</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rowRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>columnRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rotationRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>rowCategories</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>columnCategories</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QItemModelBarDataProxy(QAbstractItemModel *itemModel, const QString &amp;rowRole, const QString &amp;columnRole, const QString &amp;valueRole, const QString &amp;rotationRole, const QStringList &amp;rowCategories, const QStringList &amp;columnCategories, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The role mappings are set with <db:code role="parameter">rowRole</db:code>, <db:code role="parameter">columnRole</db:code>, <db:code role="parameter">valueRole</db:code>, and <db:code role="parameter">rotationRole</db:code>. Row and column categories are set with <db:code role="parameter">rowCategories</db:code> and <db:code role="parameter">columnCategories</db:code>. This constructor also sets <db:link xlink:href="qitemmodelbardataproxy.xml#autoRowCategories-prop">autoRowCategories</db:link> and <db:link xlink:href="qitemmodelbardataproxy.xml#autoColumnCategories-prop">autoColumnCategories</db:link> to false.</db:para>
</db:section>
<db:section xml:id="dtor.QItemModelBarDataProxy">
<db:title>[virtual] QItemModelBarDataProxy::~QItemModelBarDataProxy()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QItemModelBarDataProxy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QItemModelBarDataProxy()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys <db:link xlink:href="qitemmodelbardataproxy.xml">QItemModelBarDataProxy</db:link>.</db:para>
</db:section>
<db:section xml:id="columnCategoryIndex">
<db:title>int QItemModelBarDataProxy::columnCategoryIndex(const QString &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>columnCategoryIndex</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCategoryIndex(const QString &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the specified <db:code role="parameter">category</db:code> in column categories list. If the category is not found, -1 is returned.</db:para>
<db:note>
<db:para>If the automatic column categories generation is in use, this method will not return a valid index before the data in the model is resolved for the first time.</db:para>
</db:note>
</db:section>
<db:section xml:id="remap">
<db:title>void QItemModelBarDataProxy::remap(const QString &amp;<db:emphasis>rowRole</db:emphasis>, const QString &amp;<db:emphasis>columnRole</db:emphasis>, const QString &amp;<db:emphasis>valueRole</db:emphasis>, const QString &amp;<db:emphasis>rotationRole</db:emphasis>, const QStringList &amp;<db:emphasis>rowCategories</db:emphasis>, const QStringList &amp;<db:emphasis>columnCategories</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remap</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rowRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>columnRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>valueRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rotationRole</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>rowCategories</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>columnCategories</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remap(const QString &amp;rowRole, const QString &amp;columnRole, const QString &amp;valueRole, const QString &amp;rotationRole, const QStringList &amp;rowCategories, const QStringList &amp;columnCategories)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Changes <db:code role="parameter">rowRole</db:code>, <db:code role="parameter">columnRole</db:code>, <db:code role="parameter">valueRole</db:code>, <db:code role="parameter">rotationRole</db:code>, <db:code role="parameter">rowCategories</db:code> and <db:code role="parameter">columnCategories</db:code> to the mapping.</db:para>
</db:section>
<db:section xml:id="rowCategoryIndex">
<db:title>int QItemModelBarDataProxy::rowCategoryIndex(const QString &amp;<db:emphasis>category</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>rowCategoryIndex</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>category</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCategoryIndex(const QString &amp;category)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the specified <db:code role="parameter">category</db:code> in row categories list. If the row categories list is empty, -1 is returned.</db:para>
<db:note>
<db:para>If the automatic row categories generation is in use, this method will not return a valid index before the data in the model is resolved for the first time.</db:para>
</db:note>
</db:section>
<db:section xml:id="setItemModel">
<db:title>void QItemModelBarDataProxy::setItemModel(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setItemModel</db:methodname>
<db:methodparam>
<db:type>QAbstractItemModel *</db:type>
<db:parameter>itemModel</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">itemModel</db:synopsisinfo>
<db:synopsisinfo role="signature">void setItemModel(QAbstractItemModel *itemModel)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the item model to <db:code role="parameter">itemModel</db:code>. Does not take ownership of the model, but does connect to it to listen for changes.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qitemmodelbardataproxy.xml#itemModel-prop">itemModel</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelbardataproxy.xml#itemModel-prop">itemModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
