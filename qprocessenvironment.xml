<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProcessEnvironment Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> class holds the environment variables that can be passed to a program.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProcessEnvironment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProcessEnvironment is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member>misc</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A process's environment is composed of a set of key=value pairs known as environment variables. The <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> class wraps that concept and allows easy manipulation of those variables. It's meant to be used along with <db:link xlink:href="qprocess.xml">QProcess</db:link>, to set the environment for child processes. It cannot be used to change the current process's environment.</db:para>
<db:para>The environment of the calling process can be obtained using <db:link xlink:href="qprocessenvironment.xml#systemEnvironment">QProcessEnvironment::systemEnvironment</db:link>().</db:para>
<db:para>On Unix systems, the variable names are case-sensitive. Note that the Unix environment allows both variable names and contents to contain arbitrary binary data (except for the NUL character). <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> will preserve such variables, but does not support manipulating variables whose names or values cannot be encoded by the current locale settings (see <db:link xlink:href="qtextcodec.xml#codecForLocale">QTextCodec::codecForLocale</db:link>).</db:para>
<db:para>On Windows, the variable names are case-insensitive, but case-preserving. <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> behaves accordingly.</db:para>
<db:para>On Windows CE, the concept of environment does not exist. This class will keep the values set for compatibility with other platforms, but the values set will have no effect on the processes being created.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml">QProcess</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">QProcess::setProcessEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProcessEnvironment">
<db:title>QProcessEnvironment::QProcessEnvironment()</db:title>
<db:para>Creates a new <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. This constructor creates an empty environment. If set on a <db:link xlink:href="qprocess.xml">QProcess</db:link>, this will cause the current environment variables to be removed.</db:para>
</db:section>
<db:section xml:id="QProcessEnvironment-1">
<db:title>QProcessEnvironment::QProcessEnvironment(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QProcessEnvironment">
<db:title>[noexcept] QProcessEnvironment::~QProcessEnvironment()</db:title>
<db:para>Frees the resources associated with this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QProcessEnvironment::clear()</db:title>
<db:para>Removes all key=value pairs from this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object, making it empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QProcessEnvironment::contains(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the environment variable of name <db:code role="parameter">name</db:code> is found in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>void QProcessEnvironment::insert(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Inserts the environment variable of name <db:code role="parameter">name</db:code> and contents <db:code role="parameter">value</db:code> into this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. If that variable already existed, it is replaced by the new value.</db:para>
<db:para>On most systems, inserting a variable with no contents will have the same effect for applications as if the variable had not been set at all. However, to guarantee that there are no incompatibilities, to remove a variable, please use the <db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>[since 4.8] void QProcessEnvironment::insert(const QProcessEnvironment &amp;<db:emphasis>e</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the contents of <db:code role="parameter">e</db:code> in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. Variables in this object that also exist in <db:code role="parameter">e</db:code> will be overwritten.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QProcessEnvironment::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object is empty: that is there are no key=value pairs set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>[since 4.8] QStringList QProcessEnvironment::keys() const</db:title>
<db:para>Returns a list containing all the variable names in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QProcessEnvironment::remove(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Removes the environment variable identified by <db:code role="parameter">name</db:code> from this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. If that variable did not exist before, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QProcessEnvironment::swap(QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this process environment instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="systemEnvironment">
<db:title>[static, since 4.6] QProcessEnvironment QProcessEnvironment::systemEnvironment()</db:title>
<db:para>The systemEnvironment function returns the environment of the calling process.</db:para>
<db:para>It is returned as a <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link>. This function does not cache the system environment. Therefore, it's possible to obtain an updated version of the environment if low-level C library functions like <db:code>setenv</db:code> or <db:code>putenv</db:code> have been called.</db:para>
<db:para>However, note that repeated calls to this function will recreate the <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object, which is a non-trivial operation.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStringList">
<db:title>QStringList QProcessEnvironment::toStringList() const</db:title>
<db:para>Converts this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object into a list of strings, one for each environment variable that is set. The environment variable's name and its value are separated by an equal character ('=').</db:para>
<db:para>The <db:link xlink:href="qstringlist.xml">QStringList</db:link> contents returned by this function are suitable for presentation. Use with the QProcess::setEnvironment function is not recommended due to potential encoding problems under Unix, and worse performance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">QProcess::setProcessEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QString QProcessEnvironment::value(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>defaultValue</db:emphasis> = QString()) const</db:title>
<db:para>Searches this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object for a variable identified by <db:code role="parameter">name</db:code> and returns its value. If the variable is not found in this object, then <db:code role="parameter">defaultValue</db:code> is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QProcessEnvironment::operator!=(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are different.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QProcessEnvironment &amp;QProcessEnvironment::operator=(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the contents of the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object into this one.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QProcessEnvironment::operator==(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are equal.</db:para>
<db:para>Two <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are considered equal if they have the same set of key=value pairs. The comparison of keys is done case-sensitive on platforms where the environment is case-sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
