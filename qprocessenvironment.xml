<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProcessEnvironment Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> class holds the environment variables that can be passed to a program.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProcessEnvironment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProcessEnvironment is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member><db:member>misc</db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A process's environment is composed of a set of key=value pairs known as environment variables. The <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> class wraps that concept and allows easy manipulation of those variables. It's meant to be used along with <db:link xlink:href="qprocess.xml">QProcess</db:link>, to set the environment for child processes. It cannot be used to change the current process's environment.</db:para>
<db:para>The environment of the calling process can be obtained using <db:link xlink:href="qprocessenvironment.xml#systemEnvironment">QProcessEnvironment::systemEnvironment</db:link>().</db:para>
<db:para>On Unix systems, the variable names are case-sensitive. Note that the Unix environment allows both variable names and contents to contain arbitrary binary data (except for the NUL character). <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> will preserve such variables, but does not support manipulating variables whose names or values cannot be encoded by the current locale settings (see <db:link xlink:href="qstring.xml#toLocal8Bit">QString::toLocal8Bit</db:link>).</db:para>
<db:para>On Windows, the variable names are case-insensitive, but case-preserving. <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> behaves accordingly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml">QProcess</db:link></db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">QProcess::setProcessEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Initialization-enum">
<db:title>[since 6.3] enum QProcessEnvironment::Initialization</db:title>
<db:enumsynopsis>
<db:enumname>Initialization</db:enumname>
<db:enumitem>
<db:enumidentifier>InheritFromParent</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum contains a token that is used to disambiguate constructors.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link></db:emphasis>::InheritFromParent</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> will be created that, when set on a <db:link xlink:href="qprocess.xml">QProcess</db:link>, causes it to inherit variables from its parent.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 6.3.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProcessEnvironment">
<db:title>QProcessEnvironment::QProcessEnvironment()</db:title>
<db:constructorsynopsis>
<db:methodname>QProcessEnvironment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. This constructor creates an empty environment. If set on a <db:link xlink:href="qprocess.xml">QProcess</db:link>, this will cause the current environment variables to be removed (except for PATH and SystemRoot on Windows).</db:para>
</db:section>
<db:section xml:id="QProcessEnvironment-1">
<db:title>[since 6.3] QProcessEnvironment::QProcessEnvironment(<db:emphasis>QProcessEnvironment::Initialization</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProcessEnvironment</db:methodname>
<db:methodparam>
<db:type>QProcessEnvironment::Initialization</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment(QProcessEnvironment::Initialization)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an object that when set on <db:link xlink:href="qprocess.xml">QProcess</db:link> will cause it to be executed with environment variables inherited from its parent process.</db:para>
<db:note>
<db:para>The created object does not store any environment variables by itself, it just indicates to <db:link xlink:href="qprocess.xml">QProcess</db:link> to arrange for inheriting the environment at the time when the new process is started. Adding any environment variables to the created object will disable inheritance of the environment and result in an environment containing only the added environment variables.</db:para>
</db:note>
<db:para>If a modified version of the parent environment is wanted, start with the return value of systemEnvironment() and modify that (but note that changes to the parent process's environment after that is created won't be reflected in the modified environment).</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#inheritsFromParent">inheritsFromParent</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QProcessEnvironment-2">
<db:title>QProcessEnvironment::QProcessEnvironment(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QProcessEnvironment</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment(const QProcessEnvironment &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QProcessEnvironment">
<db:title>QProcessEnvironment::~QProcessEnvironment()</db:title>
<db:destructorsynopsis>
<db:methodname>~QProcessEnvironment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QProcessEnvironment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Frees the resources associated with this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QProcessEnvironment::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all key=value pairs from this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object, making it empty.</db:para>
<db:para>If the environment was constructed using QProcessEnvironment::InheritFromParent it remains unchanged.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QProcessEnvironment::contains(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>contains</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool contains(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the environment variable of name <db:code role="parameter">name</db:code> is found in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inheritsFromParent">
<db:title>[since 6.3] bool QProcessEnvironment::inheritsFromParent() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>inheritsFromParent</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool inheritsFromParent() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> was constructed using QProcessEnvironment::InheritFromParent.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>void QProcessEnvironment::insert(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QString &amp;name, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the environment variable of name <db:code role="parameter">name</db:code> and contents <db:code role="parameter">value</db:code> into this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. If that variable already existed, it is replaced by the new value.</db:para>
<db:para>On most systems, inserting a variable with no contents will have the same effect for applications as if the variable had not been set at all. However, to guarantee that there are no incompatibilities, to remove a variable, please use the <db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>() function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert-1">
<db:title>void QProcessEnvironment::insert(const QProcessEnvironment &amp;<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(const QProcessEnvironment &amp;e)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Inserts the contents of <db:code role="parameter">e</db:code> in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. Variables in this object that also exist in <db:code role="parameter">e</db:code> will be overwritten.</db:para>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QProcessEnvironment::isEmpty() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isEmpty</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isEmpty() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object is empty: that is there are no key=value pairs set.</db:para>
<db:para>This method also returns true for objects that were constructed using QProcessEnvironment::InheritFromParent.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#inheritsFromParent">inheritsFromParent</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keys">
<db:title>QStringList QProcessEnvironment::keys() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>keys</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList keys() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list containing all the variable names in this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object.</db:para>
<db:para>The returned list is empty for objects constructed using QProcessEnvironment::InheritFromParent.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QProcessEnvironment::remove(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the environment variable identified by <db:code role="parameter">name</db:code> from this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object. If that variable did not exist before, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QProcessEnvironment::swap(QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QProcessEnvironment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QProcessEnvironment &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this process environment instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="systemEnvironment">
<db:title>[static] QProcessEnvironment QProcessEnvironment::systemEnvironment()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QProcessEnvironment</db:type>
<db:methodname>systemEnvironment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment systemEnvironment()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The systemEnvironment function returns the environment of the calling process.</db:para>
<db:para>It is returned as a <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link>. This function does not cache the system environment. Therefore, it's possible to obtain an updated version of the environment if low-level C library functions like <db:code>setenv</db:code> or <db:code>putenv</db:code> have been called.</db:para>
<db:para>However, note that repeated calls to this function will recreate the <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object, which is a non-trivial operation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStringList">
<db:title>QStringList QProcessEnvironment::toStringList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>toStringList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList toStringList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object into a list of strings, one for each environment variable that is set. The environment variable's name and its value are separated by an equal character ('=').</db:para>
<db:para>The <db:link xlink:href="qstringlist.xml">QStringList</db:link> contents returned by this function are suitable for presentation. Use with the QProcess::setEnvironment function is not recommended due to potential encoding problems under Unix, and worse performance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#systemEnvironment">systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#systemEnvironment">QProcess::systemEnvironment</db:link>()</db:member>
<db:member><db:link xlink:href="qprocess.xml#setProcessEnvironment">QProcess::setProcessEnvironment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QString QProcessEnvironment::value(const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>defaultValue</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>value</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString value(const QString &amp;name, const QString &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches this <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object for a variable identified by <db:code role="parameter">name</db:code> and returns its value. If the variable is not found in this object, then <db:code role="parameter">defaultValue</db:code> is returned instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QProcessEnvironment::operator!=(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QProcessEnvironment &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are different.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QProcessEnvironment &amp;QProcessEnvironment::operator=(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QProcessEnvironment &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QProcessEnvironment &amp; operator=(const QProcessEnvironment &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the contents of the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> object into this one.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QProcessEnvironment::operator==(const QProcessEnvironment &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QProcessEnvironment &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QProcessEnvironment &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this and the <db:code role="parameter">other</db:code> <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are equal.</db:para>
<db:para>Two <db:link xlink:href="qprocessenvironment.xml">QProcessEnvironment</db:link> objects are considered equal if they have the same set of key=value pairs. The comparison of keys is done case-sensitive on platforms where the environment is case-sensitive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprocessenvironment.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qprocessenvironment.xml#contains">contains</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
