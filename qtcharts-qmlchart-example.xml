<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qml Charts Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This basic demonstration shows how to use the different chart types by using qml.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-charts-using-qml">
<db:title>Creating Charts Using QML</db:title>
<db:para>Creating each chart type begins with the creation of a <db:link xlink:href="qml-qtcharts-chartview.xml">ChartView</db:link>.</db:para>
<db:para>To create a pie, we use the <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> API together with a few PieSlices:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart1.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    id: chart
    title: &quot;Top-5 car brand shares in Finland&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    PieSeries {
        id: pieSeries
        PieSlice { label: &quot;Volkswagen&quot;; value: 13.5 }
        PieSlice { label: &quot;Toyota&quot;; value: 10.9 }
        PieSlice { label: &quot;Ford&quot;; value: 8.6 }
        PieSlice { label: &quot;Skoda&quot;; value: 8.2 }
        PieSlice { label: &quot;Volvo&quot;; value: 6.8 }
    }
}

Component.onCompleted: {
    // You can also manipulate slices dynamically, like append a slice or set a slice exploded
    othersSlice = pieSeries.append(&quot;Others&quot;, 52.0);
    pieSeries.find(&quot;Volkswagen&quot;).exploded = true;
}
</db:programlisting>
<db:para>To create a chart with a line series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart2.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Line&quot;
    anchors.fill: parent
    antialiasing: true

    LineSeries {
        name: &quot;LineSeries&quot;
        XYPoint { x: 0; y: 0 }
        XYPoint { x: 1.1; y: 2.1 }
        XYPoint { x: 1.9; y: 3.3 }
        XYPoint { x: 2.1; y: 2.1 }
        XYPoint { x: 2.9; y: 4.9 }
        XYPoint { x: 3.4; y: 3.0 }
        XYPoint { x: 4.1; y: 3.3 }
    }
}
</db:programlisting>
<db:para>And spline series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart3.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Spline&quot;
    anchors.fill: parent
    antialiasing: true

    SplineSeries {
        name: &quot;SplineSeries&quot;
        XYPoint { x: 0; y: 0.0 }
        XYPoint { x: 1.1; y: 3.2 }
        XYPoint { x: 1.9; y: 2.4 }
        XYPoint { x: 2.1; y: 2.1 }
        XYPoint { x: 2.9; y: 2.6 }
        XYPoint { x: 3.4; y: 2.3 }
        XYPoint { x: 4.1; y: 3.1 }
    }
}
</db:programlisting>
<db:para>Then we create a chart that illustrates the NHL All-Star player selections by using three area series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart4.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;NHL All-Star Team Players&quot;
    anchors.fill: parent
    antialiasing: true

    // Define x-axis to be used with the series instead of default one
    ValueAxis {
        id: valueAxis
        min: 2000
        max: 2011
        tickCount: 12
        labelFormat: &quot;%.0f&quot;
    }

    AreaSeries {
        name: &quot;Russian&quot;
        axisX: valueAxis
        upperSeries: LineSeries {
            XYPoint { x: 2000; y: 1 }
            XYPoint { x: 2001; y: 1 }
            XYPoint { x: 2002; y: 1 }
            XYPoint { x: 2003; y: 1 }
            XYPoint { x: 2004; y: 1 }
            XYPoint { x: 2005; y: 0 }
            XYPoint { x: 2006; y: 1 }
            XYPoint { x: 2007; y: 1 }
            XYPoint { x: 2008; y: 4 }
            XYPoint { x: 2009; y: 3 }
            XYPoint { x: 2010; y: 2 }
            XYPoint { x: 2011; y: 1 }
        }
    }
    ...
</db:programlisting>
<db:para>Then a couple of scatter series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart5.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Scatters&quot;
    anchors.fill: parent
    antialiasing: true

    ScatterSeries {
        id: scatter1
        name: &quot;Scatter1&quot;
        XYPoint { x: 1.5; y: 1.5 }
        XYPoint { x: 1.5; y: 1.6 }
        XYPoint { x: 1.57; y: 1.55 }
        XYPoint { x: 1.8; y: 1.8 }
        XYPoint { x: 1.9; y: 1.6 }
        XYPoint { x: 2.1; y: 1.3 }
        XYPoint { x: 2.5; y: 2.1 }
    }

    ScatterSeries {
        name: &quot;Scatter2&quot;
        XYPoint { x: 2.0; y: 2.0 }
        XYPoint { x: 2.0; y: 2.1 }
        XYPoint { x: 2.07; y: 2.05 }
        XYPoint { x: 2.2; y: 2.9 }
        XYPoint { x: 2.4; y: 2.7 }
        XYPoint { x: 2.67; y: 2.65 }
    }
}
    ...
</db:programlisting>
<db:para>And a few different bar series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart6.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    BarSeries {
        id: mySeries
        axisX: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart7.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Stacked Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    StackedBarSeries {
        id: mySeries
        axisX: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart8.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Percent Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    PercentBarSeries {
        axisX: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart9.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Horizontal Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    HorizontalBarSeries {
        axisY: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart10.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Horizontal Stacked Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    HorizontalStackedBarSeries {
        axisY: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart11.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Horizontal Percent Bar series&quot;
    anchors.fill: parent
    legend.alignment: Qt.AlignBottom
    antialiasing: true

    HorizontalPercentBarSeries {
        axisY: BarCategoryAxis { categories: [&quot;2007&quot;, &quot;2008&quot;, &quot;2009&quot;, &quot;2010&quot;, &quot;2011&quot;, &quot;2012&quot; ] }
        BarSet { label: &quot;Bob&quot;; values: [2, 2, 3, 4, 5, 6] }
        BarSet { label: &quot;Susan&quot;; values: [5, 1, 2, 4, 1, 7] }
        BarSet { label: &quot;James&quot;; values: [3, 5, 8, 13, 5, 8] }
    }
}
</db:programlisting>
<db:para>And finally an example demonstrating how to create a donut chart with two pie series:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlchart12.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    id: chart
    title: &quot;Production costs&quot;
    anchors.fill: parent
    legend.visible: false
    antialiasing: true

    PieSeries {
        id: pieOuter
        size: 0.96
        holeSize: 0.7
        PieSlice { id: slice; label: &quot;Alpha&quot;; value: 19511; color: &quot;#99CA53&quot; }
        PieSlice { label: &quot;Epsilon&quot;; value: 11105; color: &quot;#209FDF&quot; }
        PieSlice { label: &quot;Psi&quot;; value: 9352; color: &quot;#F6A625&quot; }
    }

    PieSeries {
        size: 0.7
        id: pieInner
        holeSize: 0.25

        PieSlice { label: &quot;Materials&quot;; value: 10334; color: &quot;#B9DB8A&quot; }
        PieSlice { label: &quot;Employee&quot;; value: 3066; color: &quot;#DCEDC4&quot; }
        PieSlice { label: &quot;Logistics&quot;; value: 6111; color: &quot;#F3F9EB&quot; }

        PieSlice { label: &quot;Materials&quot;; value: 7371; color: &quot;#63BCE9&quot; }
        PieSlice { label: &quot;Employee&quot;; value: 2443; color: &quot;#A6D9F2&quot; }
        PieSlice { label: &quot;Logistics&quot;; value: 1291; color: &quot;#E9F5FC&quot; }

        PieSlice { label: &quot;Materials&quot;; value: 4022; color: &quot;#F9C36C&quot; }
        PieSlice { label: &quot;Employee&quot;; value: 3998; color: &quot;#FCE1B6&quot; }
        PieSlice { label: &quot;Logistics&quot;; value: 1332; color: &quot;#FEF5E7&quot; }
    }
}

Component.onCompleted: {
    // Set the common slice properties dynamically for convenience
    for (var i = 0; i &amp;lt; pieOuter.count; i++) {
        pieOuter.at(i).labelPosition = PieSlice.LabelOutside;
        pieOuter.at(i).labelVisible = true;
        pieOuter.at(i).borderWidth = 3;
    }
    for (var i = 0; i &amp;lt; pieInner.count; i++) {
        pieInner.at(i).labelPosition = PieSlice.LabelInsideNormal;
        pieInner.at(i).labelVisible = true;
        pieInner.at(i).borderWidth = 2;
    }
}
</db:programlisting>
<db:para>Additionally, antialiasing is set with the qml property in Qt Quick 2.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/qmlchart?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
