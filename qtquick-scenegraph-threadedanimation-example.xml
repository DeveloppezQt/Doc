<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Threaded Animation</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows benefits of custom items animating independently of the main thread while using the threaded render loop of Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/threadedanimation-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows the fundamental concept behind the <db:link xlink:href="qml-qtquick-animator.xml">Animator</db:link> types, by implementing a custom item that effectively animates itself by not relying on the standard Qt Quick animation framework driven on the main thread.</db:para>
<db:para>The left and right spinners should behave identically under normal conditions. However, once the example blocks the main thread by peforming some heavy operation, it will become noticeable that the left spinner is not animating smoothly anymore.</db:para>
<db:note>
<db:para>This example should be run with the <db:code>threaded</db:code> render loop of Qt Quick. This is the default in most cases. There are no positive effects when using the <db:code>basic</db:code> render loop, because there everything, including all rendering, happens on the main thread.</db:para>
</db:note>
<db:para>Applications without custom <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> implementations can get the same benefits by using one of the <db:link xlink:href="qml-qtquick-animator.xml">Animator</db:link> types, such as <db:link xlink:href="qml-qtquick-xanimator.xml">XAnimator</db:link> or <db:link xlink:href="qml-qtquick-opacityanimator.xml">OpacityAnimator</db:link> from QML. Whereas when building custom items, similar results can be achieved by following the example's implementation.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/scenegraph/threadedanimation?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
