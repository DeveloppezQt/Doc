<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineCookieStore Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginecookiestore.xml">QWebEngineCookieStore</db:link> class provides access to Chromium's cookies.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineCookieStore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class allows to access HTTP cookies of Chromium for a specific profile. It can be used to synchronize cookies of Chromium and the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>, as well as to set, delete, and intercept cookies during navigation. Because cookie operations are asynchronous, the user can choose to provide a callback function to get notified about the success of the operation. The signal handlers for removal and addition should not be used to execute heavy tasks, because they might block the IO thread in case of a blocking connection.</db:para>
<db:para>Use <db:link xlink:href="qwebengineprofile.xml#cookieStore">QWebEngineProfile::cookieStore</db:link>() and <db:link xlink:href="qquickwebengineprofile.xml#cookieStore">QQuickWebEngineProfile::cookieStore</db:link>() to access the cookie store object for a specific profile.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QWebEngineCookieStore">
<db:title>[virtual noexcept] QWebEngineCookieStore::~QWebEngineCookieStore()</db:title>
<db:para>Destroys this <db:link xlink:href="qwebenginecookiestore.xml">QWebEngineCookieStore</db:link> object.</db:para>
</db:section>
<db:section xml:id="cookieAdded">
<db:title>void QWebEngineCookieStore::cookieAdded(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a new <db:code role="parameter">cookie</db:code> is added to the cookie store.</db:para>
</db:section>
<db:section xml:id="cookieRemoved">
<db:title>void QWebEngineCookieStore::cookieRemoved(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever a <db:code role="parameter">cookie</db:code> is deleted from the cookie store.</db:para>
</db:section>
<db:section xml:id="deleteAllCookies">
<db:title>void QWebEngineCookieStore::deleteAllCookies()</db:title>
<db:para>Deletes all the cookies in the cookie store.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecookiestore.xml#loadAllCookies">loadAllCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteCookie">
<db:title>void QWebEngineCookieStore::deleteCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>, const QUrl &amp;<db:emphasis>origin</db:emphasis> = QUrl())</db:title>
<db:para>Deletes <db:code role="parameter">cookie</db:code> from the cookie store. It is possible to provide an optional <db:code role="parameter">origin</db:code> URL argument to limit the scope of the cookie to be deleted.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
<db:section xml:id="deleteSessionCookies">
<db:title>void QWebEngineCookieStore::deleteSessionCookies()</db:title>
<db:para>Deletes all the session cookies in the cookie store. Session cookies do not have an expiration date assigned to them.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecookiestore.xml#loadAllCookies">loadAllCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadAllCookies">
<db:title>void QWebEngineCookieStore::loadAllCookies()</db:title>
<db:para>Loads all the cookies into the cookie store. The <db:link xlink:href="qwebenginecookiestore.xml#cookieAdded">cookieAdded</db:link>() signal is emitted on every loaded cookie. Cookies are loaded automatically when the store gets initialized, which in most cases happens on loading the first URL. However, calling this function is useful if cookies should be listed before entering the web content.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
<db:section xml:id="setCookie">
<db:title>void QWebEngineCookieStore::setCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>, const QUrl &amp;<db:emphasis>origin</db:emphasis> = QUrl())</db:title>
<db:para>Adds <db:code role="parameter">cookie</db:code> to the cookie store. It is possible to provide an optional <db:code role="parameter">origin</db:code> URL argument to limit the scope of the cookie. The provided URL should also include the scheme.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
