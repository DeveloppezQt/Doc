<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineCookieStore Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebenginecookiestore.xml">QWebEngineCookieStore</db:link> class provides access to Chromium's cookies.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineCookieStore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class allows to access HTTP cookies of Chromium for a specific profile. It can be used to synchronize cookies of Chromium and the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>, as well as to set, delete, and intercept cookies during navigation. Because cookie operations are asynchronous, the user can choose to provide a callback function to get notified about the success of the operation. The signal handlers for removal and addition should not be used to execute heavy tasks, because they might block the IO thread in case of a blocking connection.</db:para>
<db:para>Use <db:link xlink:href="qwebengineprofile.xml#cookieStore">QWebEngineProfile::cookieStore</db:link>() and <db:link xlink:href="qquickwebengineprofile.xml#cookieStore">QQuickWebEngineProfile::cookieStore</db:link>() to access the cookie store object for a specific profile.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QWebEngineCookieStore">
<db:title>[virtual] QWebEngineCookieStore::~QWebEngineCookieStore()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebEngineCookieStore</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebEngineCookieStore()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qwebenginecookiestore.xml">QWebEngineCookieStore</db:link> object.</db:para>
</db:section>
<db:section xml:id="cookieAdded">
<db:title>void QWebEngineCookieStore::cookieAdded(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cookieAdded</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cookieAdded(const QNetworkCookie &amp;cookie)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a new <db:code role="parameter">cookie</db:code> is added to the cookie store.</db:para>
</db:section>
<db:section xml:id="cookieRemoved">
<db:title>void QWebEngineCookieStore::cookieRemoved(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cookieRemoved</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cookieRemoved(const QNetworkCookie &amp;cookie)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever a <db:code role="parameter">cookie</db:code> is deleted from the cookie store.</db:para>
</db:section>
<db:section xml:id="deleteAllCookies">
<db:title>void QWebEngineCookieStore::deleteAllCookies()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deleteAllCookies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deleteAllCookies()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the cookies in the cookie store.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecookiestore.xml#loadAllCookies">loadAllCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deleteCookie">
<db:title>void QWebEngineCookieStore::deleteCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>, const QUrl &amp;<db:emphasis>origin</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deleteCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>origin</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deleteCookie(const QNetworkCookie &amp;cookie, const QUrl &amp;origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes <db:code role="parameter">cookie</db:code> from the cookie store. It is possible to provide an optional <db:code role="parameter">origin</db:code> URL argument to limit the scope of the cookie to be deleted.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
<db:section xml:id="deleteSessionCookies">
<db:title>void QWebEngineCookieStore::deleteSessionCookies()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deleteSessionCookies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deleteSessionCookies()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deletes all the session cookies in the cookie store. Session cookies do not have an expiration date assigned to them.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecookiestore.xml#loadAllCookies">loadAllCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="loadAllCookies">
<db:title>void QWebEngineCookieStore::loadAllCookies()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadAllCookies</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadAllCookies()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads all the cookies into the cookie store. The <db:link xlink:href="qwebenginecookiestore.xml#cookieAdded">cookieAdded</db:link>() signal is emitted on every loaded cookie. Cookies are loaded automatically when the store gets initialized, which in most cases happens on loading the first URL. However, calling this function is useful if cookies should be listed before entering the web content.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
<db:section xml:id="setCookie">
<db:title>void QWebEngineCookieStore::setCookie(const QNetworkCookie &amp;<db:emphasis>cookie</db:emphasis>, const QUrl &amp;<db:emphasis>origin</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCookie</db:methodname>
<db:methodparam>
<db:type>const QNetworkCookie &amp;</db:type>
<db:parameter>cookie</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>origin</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCookie(const QNetworkCookie &amp;cookie, const QUrl &amp;origin)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">cookie</db:code> to the cookie store.</db:para>
<db:note>
<db:para>If <db:code role="parameter">cookie</db:code> specifies a <db:link xlink:href="qnetworkcookie.xml#domain">QNetworkCookie::domain</db:link>() that does not start with a dot, a dot is automatically prepended. To limit the cookie to the exact server, omit <db:link xlink:href="qnetworkcookie.xml#domain">QNetworkCookie::domain</db:link>() and set <db:code role="parameter">origin</db:code> instead.</db:para>
</db:note>
<db:para>The provided URL should also include the scheme.</db:para>
<db:note>
<db:para>This operation is asynchronous.</db:para>
</db:note>
</db:section>
<db:section xml:id="setCookieFilter">
<db:title>void QWebEngineCookieStore::setCookieFilter(const std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;<db:emphasis>filterCallback</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCookieFilter</db:methodname>
<db:methodparam>
<db:type>const std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;</db:type>
<db:parameter>filterCallback</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCookieFilter(const std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;filterCallback)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Installs a cookie filter that can prevent sites and resources from using cookies. The <db:code role="parameter">filterCallback</db:code> must be a lambda or functor taking a <db:link xlink:href="qwebenginecookiestore-filterrequest.xml">FilterRequest</db:link> structure. If the cookie access is to be accepted, the filter function should return <db:code>true</db:code>; otherwise it should return <db:code>false</db:code>.</db:para>
<db:para>The following code snippet illustrates how to set a cookie filter:</db:para>
<db:programlisting language="cpp">profile-&amp;gt;cookieStore()-&amp;gt;setCookieFilter(
    [&amp;amp;allowThirdPartyCookies](const QWebEngineCookieStore::FilterRequest &amp;amp;request)
    { return !request.thirdParty || allowThirdPartyCookies; }
);
</db:programlisting>
<db:para>You can unset the filter with a <db:code>nullptr</db:code> argument.</db:para>
<db:para>The callback should not be used to execute heavy tasks since it is running on the IO thread and therefore blocks the Chromium networking.</db:para>
<db:note>
<db:para>The cookie filter also controls other features with tracking capabilities similar to those of cookies; including IndexedDB, DOM storage, filesystem API, service workers, and AppCache.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebenginecookiestore.xml#deleteAllCookies">deleteAllCookies</db:link>()</db:member>
<db:member><db:link xlink:href="qwebenginecookiestore.xml#loadAllCookies">loadAllCookies</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCookieFilter-1">
<db:title>void QWebEngineCookieStore::setCookieFilter(std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;&amp;<db:emphasis>filterCallback</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCookieFilter</db:methodname>
<db:methodparam>
<db:type>std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;&amp;</db:type>
<db:parameter>filterCallback</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCookieFilter(std::function&lt;bool (const FilterRequest &amp;)&gt; &amp;&amp;filterCallback)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
</db:article>
