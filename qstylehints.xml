<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QStyleHints Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstylehints.xml">QStyleHints</db:link> class contains platform specific hints and settings.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStyleHints</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An object of this class, obtained from <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>, provides access to certain global user interface parameters of the current platform.</db:para>
<db:para>Access is read only; typically the platform itself provides the user a way to tune these parameters.</db:para>
<db:para>Access to these parameters are useful when implementing custom user interface components, in that they allow the components to exhibit the same behaviour and feel as other components.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#styleHints">QGuiApplication::styleHints</db:link>()</db:member>
<db:member>QPlatformTheme</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="cursorFlashTime">
<db:title>int QStyleHints::cursorFlashTime() const</db:title>
<db:para>Returns the text cursor's flash (blink) time in milliseconds.</db:para>
<db:para>The flash time is the time used to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time.</db:para>
</db:section>
<db:section xml:id="fontSmoothingGamma">
<db:title>qreal QStyleHints::fontSmoothingGamma() const</db:title>
<db:para>Returns the gamma value used in font smoothing.</db:para>
</db:section>
<db:section xml:id="keyboardAutoRepeatRate">
<db:title>int QStyleHints::keyboardAutoRepeatRate() const</db:title>
<db:para>Returns the rate, in events per second, in which additional repeated key presses will automatically be generated if a key is being held down.</db:para>
</db:section>
<db:section xml:id="keyboardInputInterval">
<db:title>int QStyleHints::keyboardInputInterval() const</db:title>
<db:para>Returns the time limit, in milliseconds, that distinguishes a key press from two consecutive key presses.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickInterval">
<db:title>int QStyleHints::mouseDoubleClickInterval() const</db:title>
<db:para>Returns the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks.</db:para>
</db:section>
<db:section xml:id="passwordMaskDelay">
<db:title>int QStyleHints::passwordMaskDelay() const</db:title>
<db:para>Returns the time, in milliseconds, a typed letter is displayed unshrouded in a text input field in password mode.</db:para>
</db:section>
<db:section xml:id="showIsFullScreen">
<db:title>bool QStyleHints::showIsFullScreen() const</db:title>
<db:para>Returns <db:code>true</db:code> if the platform defaults to windows being fullscreen, otherwise <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#show">QWindow::show</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDragDistance">
<db:title>int QStyleHints::startDragDistance() const</db:title>
<db:para>Returns the distance, in pixels, that the mouse must be moved with a button held down before a drag and drop operation will begin.</db:para>
<db:para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.</db:para>
<db:para>For example, if the mouse position of the click is stored in <db:code>startPos</db:code> and the current position (e.g. in the mouse move event) is <db:code>currentPos</db:code>, you can find out if a drag should be started with code like this:</db:para>
<db:programlisting language="cpp">if ((startPos - currentPos).manhattanLength() &gt;=
        QApplication::startDragDistance())
    startTheDrag();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehints.xml#startDragTime">startDragTime</db:link>()</db:member>
<db:member><db:link xlink:href="qpoint.xml#manhattanLength">QPoint::manhattanLength</db:link>()</db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDragTime">
<db:title>int QStyleHints::startDragTime() const</db:title>
<db:para>Returns the time, in milliseconds, that a mouse button must be held down before a drag and drop operation will begin.</db:para>
<db:para>If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehints.xml#startDragDistance">startDragDistance</db:link>()</db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startDragVelocity">
<db:title>int QStyleHints::startDragVelocity() const</db:title>
<db:para>Returns the limit for the velocity, in pixels per second, that the mouse may be moved, with a button held down, for a drag and drop operation to begin. A value of 0 means there is no such limit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstylehints.xml#startDragDistance">startDragDistance</db:link>()</db:member>
<db:member><db:link xlink:href="dnd.xml">Drag and Drop</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="useRtlExtensions">
<db:title>bool QStyleHints::useRtlExtensions() const</db:title>
<db:para>Returns <db:code>true</db:code> if right-to-left writing direction is enabled, otherwise <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
