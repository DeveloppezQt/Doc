<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Get and Install Qt with Command Line Interface</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>How to download and install with CLI.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Use the command line interface with Qt Online Installer and Qt Maintenance Tool to install, uninstall, update, and search components.</db:para>
<db:para>The command line interface supports both <db:emphasis role="bold">interactive and non-interactive usage (unattended usage)</db:emphasis>. The following topics provide examples and information on how you can use the command line interface:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#component-names-for-installation">Component Names For Installation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#installing-without-user-interaction">Installing Without User Interaction</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#installing-with-user-interaction">Installing With User Interaction</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#uninstalling-packages">Uninstalling Packages</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#listing-installed-packages">Listing Installed Packages</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#checking-updates">Checking Updates</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#updating-packages">Updating Packages</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#popular-commands">Popular Commands</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#selecting-mirror-for-opensource">Selecting Mirror for Opensource</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#summary-of-command-line-interface-usage">Summary of Command Line Interface Usage</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="component-names-for-installation">
<db:title>Component Names for Installation</db:title>
<db:section xml:id="quick-installation-with-alias-packages">
<db:title>Quick Installation with Alias Packages</db:title>
<db:note>
<db:para>Quick installation with alias packages will be available in Qt Online Installer release 4.8.</db:para>
</db:note>
<db:para>Instead of searching for specific package names for installation, you can use alias packages to install the most common configurations. Alias packages are a shortcut to include the actual packages for an easier installation experience.</db:para>
<db:para>To list the existing alias packages, use the following command on the command line interface:</db:para>
<db:programlisting language="cpp" role="bad">installer.exe / maintenancetool.exe search
</db:programlisting>
<db:para>The contents of the alias packages are listed in the table below.</db:para>
<db:note>
<db:para>Qt 6.7.0 release is used in the alias package examples listed below. Always remember to use the packages that match the Qt release you are working on.</db:para>
</db:note>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Alias package name</db:para>
</db:th>
<db:th>
<db:para>Qt Online Installer (package content)</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-essentials</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-essentials">essential module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>essential module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module development tools</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-essentials-dev</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-essentials">essential module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>essential module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module development tools</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-full</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-essentials">essential module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>essential module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module development tools</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-add-ons">add-on module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module development tools</db:para>
</db:listitem>
<db:listitem>
<db:para>sources</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-full-dev</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-essentials">essential module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>essential module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>essential module development tools</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-add-ons">add-on module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module headers</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module private headers</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module runtime tools</db:para>
</db:listitem>
<db:listitem>
<db:para>add-on module development tools</db:para>
</db:listitem>
<db:listitem>
<db:para>sources</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-full-dbg</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>Qt debug information files for:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-essentials">essential module libraries</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qt-6/qtmodules.html#qt-add-ons">add-on module libraries</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qt6.7.0-sdk</db:para>
</db:td>
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para>latest Qt Creator</db:para>
</db:listitem>
<db:listitem>
<db:para>qt6.7.0-full-dev (details above)</db:para>
</db:listitem>
<db:listitem>
<db:para>qt6.7.0-full-dbg (details above)</db:para>
</db:listitem>
<db:listitem>
<db:para>Ninja</db:para>
</db:listitem>
<db:listitem>
<db:para>CMake</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:emphasis role="bold">Qt Online Installer command examples</db:emphasis></db:para>
<db:programlisting language="cpp" role="bad"># Windows: new installation with Qt Online Installer
qt-unified-windows-x64-[Qt Online Installer version]-online.exe install qt6.7.0-sdk

# macOS: new installation with Qt Online Installer
hdiutil attach qt-unified-macOS-x64-[Qt Online Installer version]-online.dmg
/Volumes/qt-unified-macOS-x64-[Qt Online Installer version]-online/qt-unified-macOS-x64-[Qt Online Installer version]-online.app/Contents/MacOS/qt-unified-macOS-x64-[Qt Online Installer version]-online install qt6.7.0-sdk
hdiutil detach /Volumes/qt-unified-macOS-x64-[Qt Online Installer version]-online

# Linux: new installation with Qt Online Installer
qt-unified-linux-x64-[Qt Online Installer version]-online.run install qt6.7.0-sdk
</db:programlisting>
</db:section>
<db:section xml:id="listing-non-alias-packages">
<db:title>Listing Non-Alias Packages</db:title>
<db:para>To list the non-alias packages, use the following command on the command line interface:</db:para>
<db:programlisting language="cpp" role="bad">installer.exe / maintenancetool.exe search --type package
</db:programlisting>
</db:section>
<db:section xml:id="advanced-searching-for-specific-installation-packages">
<db:title>Advanced Searching for Specific Installation Packages</db:title>
<db:para>Search available packages with the search command and regular expressions: <db:emphasis role="bold">search &lt;regexp&gt;</db:emphasis>. You can filter the results with <db:emphasis role="bold">--filter-packages &lt;regexp&gt;</db:emphasis>. For example, filtering with the display name information can help search.</db:para>
<db:para>For example, the following command finds all MSVC 2019 packages for Qt 6.7.0:</db:para>
<db:programlisting language="cpp" role="bad">search .*670.*msvc2019
</db:programlisting>
<db:para>You get the same result when you filter the search result as follows:</db:para>
<db:programlisting language="cpp" role="bad">search --filter-packages DisplayName=MSVC 2019,Version=6.7.0
</db:programlisting>
<db:para>As a result, you get the following packages:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;availablepackages&amp;gt;
    &amp;lt;package name=&quot;qt.qt6.670.win64_msvc2019_64&quot; displayname=&quot;MSVC 2019 64-bit&quot; version=&quot;6.7.0-0-202303290841&quot;/&amp;gt;
    &amp;lt;package name=&quot;qt.qt6.670.win64_msvc2019_arm64&quot; displayname=&quot;MSVC 2019 ARM64 (TP)&quot; version=&quot;6.7.0-0-202303290841&quot;/&amp;gt;
&amp;lt;/availablepackages&amp;gt;
</db:programlisting>
<db:para>You can also use filtering when you search all Qt versions that some package is provided for. For example, search all Qt Charts packages provided for Qt versions:</db:para>
<db:programlisting language="cpp" role="bad">search --filter-packages DisplayName=charts
</db:programlisting>
<db:para>The search result is as follows:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;availablepackages&amp;gt;
    &amp;lt;package name=&quot;qt.qt5.5125.qtcharts&quot; displayname=&quot;Qt Charts&quot; version=&quot;5.12.5-0-201909090651&quot;/&amp;gt;
    &amp;lt;package name=&quot;qt.qt6.641.addons.qtcharts&quot; displayname=&quot;Qt Charts&quot; version=&quot;6.4.1-0-202211101525&quot;/&amp;gt;
    &amp;lt;package name=&quot;qt.qt5.5123.qtcharts&quot; displayname=&quot;Qt Charts&quot; version=&quot;5.12.3-0-201904161619&quot;/&amp;gt;
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="installing-without-user-interaction">
<db:title>Installing Without User Interaction</db:title>
<db:para>By default, Qt Online Installer or Qt Maintenance Tool may ask for additional information during installation, which requires user attention. Unattended usage via the command line interface is possible by providing all the requested information beforehand with appropriate options.</db:para>
<db:section xml:id="new-installation-with-qt-online-installer">
<db:title>New Installation with Qt Online Installer</db:title>
<db:para>You can do new installations from the command line interface without user interaction as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Define the <db:emphasis>Qt Online Installer</db:emphasis> executable.</db:para>
</db:listitem>
<db:listitem>
<db:para>Define the installation directory with <db:emphasis role="bold">--root</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use the <db:emphasis role="bold">install &lt;list of packages&gt;</db:emphasis> command with <db:emphasis role="bold">options for unattended usage</db:emphasis>. See the full list of options in <db:link xlink:href="get-and-install-qt-cli.xml#options-for-unattended-usage">Options for Unattended Usage</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The following examples demonstrate how you install Qt 6.7.0 binaries with Qt Online Installer for Windows, macOS, and Linux. The unattended commands automatically accept the licenses (<db:emphasis role="bold">--accept-licenses</db:emphasis>), answer all message queries with their default answer (<db:emphasis role="bold">--default-answer</db:emphasis>), and skip asking for permission to continue performing (<db:emphasis role="bold">--confirm-command</db:emphasis>):</db:para>
<db:programlisting language="cpp" role="bad"># Windows: new installation with Qt Online Installer
qt-unified-windows-x64-[Qt Online Installer version]-online.exe --root C:\Users\[username]\installation_dir --accept-licenses --default-answer --confirm-command install qt.qt6.670.win64_msvc2019_64

# macOS: new installation with Qt Online Installer
qt-unified-macOS-x64-[Qt Online Installer version]-online.dmg --root /home/&amp;lt;username&amp;gt;/installation_dir --accept-licenses --default-answer --confirm-command install qt.qt6.670.clang_644

# linux: new installation with Qt Online Installer
qt-unified-linux-x64-[Qt Online Installer version]-online.run --root /home/&amp;lt;username&amp;gt;/installation_dir --accept-licenses --default-answer --confirm-command install qt.qt6.670.gcc_64
</db:programlisting>
<db:para><db:link xlink:href="get-and-install-qt-cli.xml#options-for-unattended-usage">Options for Unattended Usage</db:link> lists all available options for unattended usage.</db:para>
</db:section>
<db:section xml:id="updating-installation-with-qt-maintenance-tool">
<db:title>Updating Installation with Qt Maintenance Tool</db:title>
<db:para>You can update existing installation from the command line interface without user interaction as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Define the <db:emphasis>Qt Maintenance Tool</db:emphasis> executable.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:emphasis role="bold">install &lt;list of packages&gt;</db:emphasis> with <db:emphasis role="bold">options for unattended usage</db:emphasis>. See the full list of options in <db:link xlink:href="get-and-install-qt-cli.xml#options-for-unattended-usage">Options for Unattended Usage</db:link>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The following examples demonstrate how you add Qt 6.7.0 binaries with Qt Maintenance Tool to an exsting installation on Windows, macOS, and Linux. The unattended commands automatically accept the licenses (<db:emphasis role="bold">--accept-licenses</db:emphasis>), answer all message queries with their default answer (<db:emphasis role="bold">--default-answer</db:emphasis>), and skip asking for permission to continue performing (<db:emphasis role="bold">--confirm-command</db:emphasis>):</db:para>
<db:programlisting language="cpp" role="bad"># Windows: update installation with Qt Maintenance Tool
MaintenanceTool.exe --accept-licenses --default-answer --confirm-command install qt.qt6.670.win64_msvc2019_64

# macOS: update installation with Qt Maintenance Tool
MaintenanceTool.app/Contents/MacOS/MaintenanceTool --accept-licenses --default-answer --confirm-command install qt.qt6.670.clang_64

# linux: update installation with Qt Maintenance Tool
MaintenanceTool.run --accept-licenses --default-answer --confirm-command install qt.qt6.670.gcc_64
</db:programlisting>
</db:section>
<db:section xml:id="options-for-unattended-usage">
<db:title>Options for Unattended Usage</db:title>
<db:para>The following table lists all options for unattended command line usage:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option for unattended usage</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>--accept-licenses</db:para>
</db:td>
<db:td>
<db:para>Automatically accepts all license agreements.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--accept-obligations</db:para>
</db:td>
<db:td>
<db:para>In the opensource installations, accepts Qt Open Source usage obligations without user input.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--default-answer</db:para>
</db:td>
<db:td>
<db:para>Answers all message queries with their default answer.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--auto-answer &lt;identifier=value&gt;</db:para>
</db:td>
<db:td>
<db:para>In case you want different answers to certain queries, you can use this option. For example, --auto-answer telemetry-question=Yes,AssociateCommonFiletypes=Yes. See all message identifiers in <db:link xlink:href="get-and-install-qt-cli.xml#message-identifiers-for-auto-answer">Message Identifiers for --auto-answer</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--accept-messages</db:para>
</db:td>
<db:td>
<db:para>Accepts all message queries.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--reject-messages</db:para>
</db:td>
<db:td>
<db:para>Rejects all message queries.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--confirm-command</db:para>
</db:td>
<db:td>
<db:para>By default, Qt Online Installer and Qt Maintenance Tool print a summary of components to be affected by the option. Then they ask for permission to continue acting, to prevent accidental changes. This option skips asking for permission to continue.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--email &lt;your_email&gt;</db:para>
</db:td>
<db:td>
<db:para>Provides the email when you log in from the command line. For more information, see <db:link xlink:href="get-and-install-qt-cli.xml#providing-login-information">Providing Login Information</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--pw &lt;your_pw&gt;</db:para>
</db:td>
<db:td>
<db:para>Provides the password when you log in from the command line. For more information, see <db:link xlink:href="get-and-install-qt-cli.xml#providing-login-information">Providing Login Information</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--file-query &lt;identifier=value&gt;</db:para>
</db:td>
<db:td>
<db:para>Sometimes Qt Online Installer asks for a file or a folder location. You can provide the location with --file-query &lt;identifier=value&gt;. For example, --file-query PathForSDP7=&lt;path_to_sdp&gt;.</db:para>
<db:para>The identifiers are printed into the command line before the actual question and message type. You can pick up the identifiers from there.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="message-identifiers-for-auto-answer">
<db:title>Message Identifiers for --auto-answer</db:title>
<db:para>Use the --auto-answer option to provide answers to certain queries. The following table lists known identifiers and values used for --auto-answer:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>ID</db:para>
</db:th>
<db:th>
<db:para>Values</db:para>
</db:th>
<db:th>
<db:para>Default</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>OperationDoesNotExistError</db:para>
</db:td>
<db:td>
<db:para>Abort, Ignore</db:para>
</db:td>
<db:td>
<db:para>Ignore</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>OverwriteTargetDirectory</db:para>
</db:td>
<db:td>
<db:para>Yes, No</db:para>
</db:td>
<db:td>
<db:para>No</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>stopProcessesForUpdates</db:para>
</db:td>
<db:td>
<db:para>Retry, Ignore, Cancel</db:para>
</db:td>
<db:td>
<db:para>Cancel</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>installationErrorWithCancel</db:para>
</db:td>
<db:td>
<db:para>Retry, Ignore, Cancel</db:para>
</db:td>
<db:td>
<db:para>Cancel</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>installationErrorWithIgnore</db:para>
</db:td>
<db:td>
<db:para>Retry, Ignore</db:para>
</db:td>
<db:td>
<db:para>Ignore</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AssociateCommonFiletypes</db:para>
</db:td>
<db:td>
<db:para>Yes, No</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>telemetry-question</db:para>
</db:td>
<db:td>
<db:para>Yes, No</db:para>
</db:td>
<db:td>
<db:para>Yes</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="providing-login-information">
<db:title>Providing Login Information</db:title>
<db:para>Qt Online Installer and Qt Maintenance Tool have a forced login. The forced login uses information on the <db:emphasis>qtaccount.ini</db:emphasis> file if it is available in cache. You find <db:emphasis>qtaccount.ini</db:emphasis> as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Host</db:para>
</db:th>
<db:th>
<db:para>qtaccount.ini location</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Windows</db:para>
</db:td>
<db:td>
<db:para>C:\Users\&lt;username&gt;\AppData\Roaming\Qt</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>macOS</db:para>
</db:td>
<db:td>
<db:para>/Users/&lt;username&gt;/Library/Application Support/Qt/qtaccount.ini</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Linux</db:para>
</db:td>
<db:td>
<db:para>/home/&lt;username&gt;/.local/share/Qt/qtaccount.ini</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Optionally, you can login either from the command line using the switches for email and password: --email &lt;your_email&gt; and --pw &lt;your_pw&gt;.</db:para>
<db:para>Alternatively, you can save the jwt token to the environment variable QT_INSTALLER_JWT_TOKEN. You find the token in the <db:emphasis>qtaccount.ini</db:emphasis> file.</db:para>
</db:section>
</db:section>
<db:section xml:id="installing-with-user-interaction">
<db:title>Installing With User Interaction</db:title>
<db:para>You can use the command line interface with user interaction as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Define the executable:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>Qt Online Installer</db:emphasis> if you need to do a new installation.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Qt Maintenance Tool</db:emphasis> if you need to update an existing installation.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>When you do a new installation, define the installation directory with --root</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:emphasis role="bold">install &lt;list of packages&gt;</db:emphasis> to install the listed packages.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The following examples demonstrate how you create a new installation of Qt 6.7.0 binaries with Qt Online Installer for Windows, macOS, and Linux:</db:para>
<db:programlisting language="cpp" role="bad"># Windows: new installation with user interaction
qt-unified-windows-x64-[Qt Online Installer version]-online.exe --root C:\Users\[username]\installation_dir install qt.qt6.670.win64_msvc2019_64

# macOS: new installation with user interaction
qt-unified-macOS-x64-[Qt Online Installer version]-online.dmg --root /home/&amp;lt;username&amp;gt;/installation_dir install qt.qt6.670.clang_64

# linux: new installation with user interaction
qt-unified-linux-x64-[Qt Online Installer version]-online.run --root /home/&amp;lt;username&amp;gt;/installation_dir install qt.qt6.670.gcc_64
</db:programlisting>
<db:para>The following examples demonstrate how you update your existing installation by installing the Qt 6.7.0 binaries with Qt Maintenance Tool:</db:para>
<db:programlisting language="cpp" role="bad"># Windows: update installation with Qt Maintenance Tool
MaintenanceTool.exe install qt.qt6.670.win64_msvc2019_64

# macOS: update installation with Qt Maintenance Tool
MaintenanceTool.dmg install qt.qt6.670.clang_64

# Linux: update installation with Qt Maintenance Tool
MaintenanceTool.run install qt.qt6.670.gcc_64
</db:programlisting>
</db:section>
<db:section xml:id="uninstalling-packages">
<db:title>Uninstalling Packages</db:title>
<db:para>The command line interface provides two commands for uninstalling packages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:emphasis role="bold">remove &lt;list of packages&gt;</db:emphasis> command uninstalls the listed packages.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:emphasis role="bold">purge</db:emphasis> command uninstalls all installed packages.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You should use both commands with Qt Maintenance Tool.</db:para>
<db:para>By default, Qt Maintenance Tool prints a summary of components to be affected by the command. Then the tool asks for permission to continue acting, to prevent accidental changes. Use <db:emphasis role="bold">--confirm-command</db:emphasis> to skip asking for permission to continue.</db:para>
<db:para>The following example uninstalls the Qt 6.7.0 binaries without user interaction:</db:para>
<db:programlisting language="cpp" role="bad"># windows
MaintenanceTool.exe --confirm-command remove qt.qt6.670.win64_msvc2019_64

# macOS
MaintenanceTool.dmg --confirm-command remove install qt.qt6.670.clang_64

# linux
MaintenanceTool.run --confirm-command remove qt.qt6.670.gcc_64
</db:programlisting>
<db:para>The following examples uninstall all packages and ask for permission to continue performing the action:</db:para>
<db:programlisting language="cpp" role="bad"># Windows
MaintenanceTool.exe purge

# macOS
MaintenanceTool.dmg purge

# Linux
MaintenanceTool.run purge
</db:programlisting>
</db:section>
<db:section xml:id="listing-installed-packages">
<db:title>Listing Installed Packages</db:title>
<db:para>The <db:emphasis role="bold">list</db:emphasis> command lists all packages you have installed. Use the command with Qt Maintenance Tool as follows:</db:para>
<db:programlisting language="cpp" role="bad"># Windows
MaintenanceTool.exe list

# macOS
MaintenanceTool.dmg list

# Linux
MaintenanceTool.run list
</db:programlisting>
</db:section>
<db:section xml:id="checking-updates">
<db:title>Checking Updates</db:title>
<db:para>The <db:emphasis role="bold">check-updates</db:emphasis> command checks the updates that are available for the installed packages. Use the command with Qt Maintenance Tool as follows:</db:para>
<db:programlisting language="cpp" role="bad"># Windows
MaintenanceTool.exe check-updates

# macOS
MaintenanceTool.dmg check-updates

# Linux
MaintenanceTool.run check-updates

</db:programlisting>
</db:section>
<db:section xml:id="updating-packages">
<db:title>Updating Packages</db:title>
<db:para>The <db:emphasis role="bold">update</db:emphasis> command updates the installed packages. Use the command with Qt Maintenance Tool as follows:</db:para>
<db:programlisting language="cpp" role="bad"># windows
MaintenanceTool.exe update

# macOS
MaintenanceTool.dmg update

# linux
MaintenanceTool.run update
</db:programlisting>
</db:section>
<db:section xml:id="popular-commands">
<db:title>Popular Commands</db:title>
<db:para>Use the command <db:emphasis role="bold">&lt;installer_executable&gt; --help</db:emphasis> to study the available commands and options. Popular commands are as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Command</db:para>
</db:th>
<db:th>
<db:para>Usage</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>in, install &lt;pkg ...&gt;</db:para>
</db:td>
<db:td>
<db:para>Installs packages given as an argument. If you don't give any packages, installs the default package set.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>rm, remove &lt;pkg ...&gt;</db:para>
</db:td>
<db:td>
<db:para>Uninstalls selected packages and their child components.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ch, check-updates</db:para>
</db:td>
<db:td>
<db:para>Shows information about available updates on Qt Maintenance Tool.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>up, update &lt;pkg ...&gt;</db:para>
</db:td>
<db:td>
<db:para>Updates packages given as an argument. If no packages are given, install all available updates.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>se, search &lt;regexp&gt;</db:para>
</db:td>
<db:td>
<db:para>Searches available packages. If you don't give any search pattern, shows all available packages. You can use the --filter-packages option to specify additional filters for the search operation. See <db:link xlink:href="https://doc.qt.io/qtinstallerframework/ifw-cli.html#summary-of-options">Summary of Options</db:link> in Qt Installer Framework Manual.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="https://doc.qt.io/qtinstallerframework/ifw-cli.html">Qt Installer Framework Manual</db:link> provides more information about the commands and options.</db:para>
</db:section>
<db:section xml:id="selecting-mirror-for-opensource">
<db:title>Selecting Mirror for Opensource</db:title>
<db:para>Qt Online Installer has an option for selecting a mirror for opensource metadata and downloads. Set the mirror from the command line with the <db:emphasis role="bold">--mirror</db:emphasis> option.</db:para>
<db:para>For example, use --mirror as follows:</db:para>
<db:programlisting language="cpp" role="bad">installer(.exe) --mirror http://www.nic.funet.fi/pub/mirrors/download.qt-project.org
installer(.exe) --mirror http://ftp2.nluug.nl/languages/qt
maintenancetool(.exe) --mirror http://qt.mirror.constant.com
</db:programlisting>
<db:para>As the example shows, don't use the full path but use the path before '/online' (no forward slash at the end).</db:para>
<db:para>You find the available mirrors from <db:link xlink:href="https://download.qt.io/online/qtsdkrepository/windows_x86/root/qt/Updates.xml.mirrorlist">https://download.qt.io/online/qtsdkrepository/windows_x86/root/qt/Updates.xml.mirrorlist</db:link>.</db:para>
</db:section>
<db:section xml:id="summary-of-command-line-interface-usage">
<db:title>Summary of Command Line Interface Usage</db:title>
<db:para><db:link xlink:href="https://doc.qt.io/qtinstallerframework/">Qt Installer Framework Manual</db:link> provides more detailed information about the command line interface:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtinstallerframework/ifw-use-cases-cli.html">Using from Command Line</db:link> describes different command line interface use cases.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtinstallerframework/ifw-cli.html#summary-of-options">Summary of Options</db:link> lists all available options.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtinstallerframework/ifw-cli.html#summary-of-commands">Summary of Commands</db:link> lists all available commands.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
