<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>var QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>a generic property type.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The var type is a generic property type that can refer to any data type.</db:para>
<db:para>It is equivalent to a regular JavaScript variable. For example, var properties can store numbers, strings, objects, arrays and functions:</db:para>
<db:programlisting language="qml">Item {
    property var aNumber: 100
    property var aBool: false
    property var aString: &quot;Hello world!&quot;
    property var anotherString: String(&quot;#FF008800&quot;)
    property var aColor: Qt.rgba(0.2, 0.3, 0.4, 0.5)
    property var aRect: Qt.rect(10, 10, 10, 10)
    property var aPoint: Qt.point(10, 10)
    property var aSize: Qt.size(10, 10)
    property var aVector3d: Qt.vector3d(100, 100, 100)
    property var anArray: [1, 2, 3, &quot;four&quot;, &quot;five&quot;, (function() { return &quot;six&quot;; })]
    property var anObject: { &quot;foo&quot;: 10, &quot;bar&quot;: 20 }
    property var aFunction: (function() { return &quot;one&quot;; })
}
</db:programlisting>
<db:section xml:id="change-notification-semantics">
<db:title>Change Notification Semantics</db:title>
<db:para>It is important to note that changes in regular properties of JavaScript objects assigned to a var property will <db:emphasis role="bold">not</db:emphasis> trigger updates of bindings that access them. The example below will display &quot;The car has 4 wheels&quot; as the change to the wheels property will not cause the reevaluation of the binding assigned to the &quot;text&quot; property:</db:para>
<db:programlisting language="qml">Item {
    property var car: new Object({wheels: 4})

    Text {
        text: &quot;The car has &quot; + car.wheels + &quot; wheels&quot;;
    }

    Component.onCompleted: {
        car.wheels = 6;
    }
}
</db:programlisting>
<db:para>If the onCompleted handler instead had <db:code>&quot;car = new Object({wheels: 6})&quot;</db:code> then the text would be updated to say &quot;The car has 6 wheels&quot;, since the car property itself would be changed, which causes a change notification to be emitted.</db:para>
</db:section>
<db:section xml:id="property-value-initialization-semantics">
<db:title>Property Value Initialization Semantics</db:title>
<db:para>The QML syntax defines that curly braces on the right-hand-side of a property value initialization assignment denote a binding assignment. This can be confusing when initializing a var property, as empty curly braces in JavaScript can denote either an expression block or an empty object declaration. If you wish to initialize a var property to an empty object value, you should wrap the curly braces in parentheses.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="qml">Item {
    property var first:  {}   // nothing = undefined
    property var second: {{}} // empty expression block = undefined
    property var third:  ({}) // empty object
}
</db:programlisting>
<db:para>In the previous example, the first property is bound to an empty expression, whose result is undefined. The second property is bound to an expression which contains a single, empty expression block (&quot;{}&quot;), which similarly has an undefined result. The third property is bound to an expression which is evaluated as an empty object declaration, and thus the property will be initialized with that empty object value.</db:para>
<db:para>Similarly, a colon in JavaScript can be either an object property value assignment, or a code label. Thus, initializing a var property with an object declaration can also require parentheses:</db:para>
<db:programlisting language="qml">Item {
    property var first: { example: 'true' }    // example is interpreted as a label
    property var second: ({ example: 'true' }) // example is interpreted as a property
    property var third: { 'example': 'true' }  // example is interpreted as a property
    Component.onCompleted: {
        console.log(first.example) // prints 'undefined', as &quot;first&quot; was assigned a string
        console.log(second.example) // prints 'true'
        console.log(third.example) // prints 'true'
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-basictypes.xml">QML Basic Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
