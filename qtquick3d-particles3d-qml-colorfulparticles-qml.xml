<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Particles 3D Testbed Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use the Qt Quick 3D Particles3D module.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick3D.Particles3D

Item {
    id: mainWindow

    anchors.fill: parent

    View3D {
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;#202020&quot;
            backgroundMode: SceneEnvironment.Color
            antialiasingMode: settings.antialiasingMode
            antialiasingQuality: settings.antialiasingQuality
        }

        PerspectiveCamera {
            id: camera
            position: Qt.vector3d(0, 100, 600)
        }

        PointLight {
            position: Qt.vector3d(0, 400, 100)
            brightness: 10
            ambientColor: Qt.rgba(0.3, 0.3, 0.3, 1.0)
        }

        // Models shared between particles
        Component {
            id: particleComponent
            Model {
                source: &quot;#Cube&quot;
                scale: Qt.vector3d(0.1, 0.1, 0.1)
                materials: DefaultMaterial {
                }
            }
        }

        Component {
            id: particleComponent2
            Model {
                source: &quot;#Cylinder&quot;
                scale: Qt.vector3d(0.1, 0.2, 0.1)
                materials: PrincipledMaterial {
                    metalness: 0.5
                    roughness: 0
                    specularAmount: 1.0
                }
            }
        }

        ParticleSystem3D {
            id: psystem

            SequentialAnimation on eulerRotation.y {
                running: true
                loops: Animation.Infinite
                NumberAnimation {
                    to: 180
                    duration: 5000
                    easing.type: Easing.InOutCirc
                }
                NumberAnimation {
                    to: 0
                    duration: 5000
                    easing.type: Easing.InOutCirc
                }
            }

            property vector4d cVar: Qt.vector4d(sliderRedVariation.sliderValue,
                                                sliderGreenVariation.sliderValue,
                                                sliderBlueVariation.sliderValue,
                                                sliderAlphaVariation.sliderValue)
            // Particles
            ModelParticle3D {
                id: particleRed
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#ff0000&quot;
                colorVariation: psystem.cVar
                unifiedColorVariation: checkBoxUnified.checked
            }
            ModelParticle3D {
                id: particleGreen
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#00ff00&quot;
                colorVariation: psystem.cVar
                unifiedColorVariation: checkBoxUnified.checked
            }
            ModelParticle3D {
                id: particleBlue
                delegate: particleComponent
                maxAmount: 250
                color: &quot;#0000ff&quot;
                colorVariation: psystem.cVar
                unifiedColorVariation: checkBoxUnified.checked
            }
            ModelParticle3D {
                id: particleWhite
                delegate: particleComponent2
                maxAmount: 250
                color: &quot;#ffffff&quot;
                colorVariation: psystem.cVar
                unifiedColorVariation: checkBoxUnified.checked
            }

            // Emitters, one per particle
            ParticleEmitter3D {
                particle: particleRed
                position: Qt.vector3d(400, 50, 0)
                particleScaleVariation: 0.8
                particleRotationVariation: Qt.vector3d(180, 180, 180)
                particleRotationVelocityVariation: Qt.vector3d(200, 200, 200);
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(-350, 150, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 100
                lifeSpan: 2500
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;RED&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }
            ParticleEmitter3D {
                particle: particleGreen
                position: Qt.vector3d(400, 0, 0)
                particleScaleVariation: 0.8
                particleRotationVariation: Qt.vector3d(180, 180, 180)
                particleRotationVelocityVariation: Qt.vector3d(200, 200, 200);
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(-350, 150, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 100
                lifeSpan: 2500
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;GREEN&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }
            ParticleEmitter3D {
                particle: particleBlue
                position: Qt.vector3d(400, -50, 0)
                particleScaleVariation: 0.8
                particleRotationVariation: Qt.vector3d(180, 180, 180)
                particleRotationVelocityVariation: Qt.vector3d(200, 200, 200);
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(-350, 150, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 100
                lifeSpan: 2500
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;BLUE&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }
            ParticleEmitter3D {
                particle: particleWhite
                position: Qt.vector3d(400, -100, 0)
                particleScaleVariation: 0.8
                particleRotationVariation: Qt.vector3d(180, 180, 180)
                particleRotationVelocityVariation: Qt.vector3d(200, 200, 200);
                velocity: VectorDirection3D {
                    direction: Qt.vector3d(-350, 150, 0)
                    directionVariation: Qt.vector3d(30, 30, 30)
                }
                emitRate: 100
                lifeSpan: 2500
                Node {
                    x: 20
                    Text {
                        anchors.verticalCenter: parent.verticalCenter
                        text: &quot;WHITE&quot;
                        font.pointSize: settings.fontSizeLarge
                        color: &quot;#ffffff&quot;
                    }
                }
            }

            Gravity3D {
                // Enable to affect only some of the particles
                //particles: [particleRed, particleBlue, particleGreen]
                direction: Qt.vector3d(0, 1, 0)
                magnitude: -100
            }
        }
    }

    SettingsView {
        CustomCheckBox {
            id: checkBoxUnified
            text: &quot;Unified Variation&quot;
            checked: false
        }
        CustomLabel {
            text: &quot;Red Variation&quot;
        }
        CustomSlider {
            id: sliderRedVariation
            sliderValue: 0
            fromValue: 0.0
            toValue: 1.0
        }
        CustomLabel {
            text: &quot;Green Variation&quot;
        }
        CustomSlider {
            id: sliderGreenVariation
            sliderValue: 0
            fromValue: 0.0
            toValue: 1.0
        }
        CustomLabel {
            text: &quot;Blue Variation&quot;
        }
        CustomSlider {
            id: sliderBlueVariation
            sliderValue: 0
            fromValue: 0.0
            toValue: 1.0
        }
        CustomLabel {
            text: &quot;Alpha Variation&quot;
        }
        CustomSlider {
            id: sliderAlphaVariation
            sliderValue: 0
            fromValue: 0.0
            toValue: 1.0
        }
    }

    LoggingView {
        anchors.bottom: parent.bottom
        particleSystems: [psystem]
    }
}

</db:programlisting>
</db:article>
