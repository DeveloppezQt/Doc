<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Concurrent Filter and Filter-Reduce</db:title>
<db:productname>QtConcurrent</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Concurrent Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Concurrent Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QtConcurrent::filter(), QtConcurrent::filtered() and QtConcurrent::filteredReduced() functions filter items in a sequence such as a QList or a QVector in parallel. QtConcurrent::filter() modifies a sequence in-place, QtConcurrent::filtered() returns a new sequence containing the filtered content, and QtConcurrent::filteredReduced() returns a single result.</db:para>
<db:para>These functions are a part of the <db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> framework.</db:para>
<db:para>Each of the above functions have a blocking variant that returns the final result instead of a QFuture. You use them in the same way as the asynchronous variants.</db:para>
<db:programlisting language="cpp">QStringList strings = ...;

// each call blocks until the entire operation is finished
QStringList lowerCaseStrings = QtConcurrent::blockingFiltered(strings, allLowerCase);

QtConcurrent::blockingFilter(strings, allLowerCase);

QSet&lt;QString&gt; dictionary = QtConcurrent::blockingFilteredReduced(strings, allLowerCase, addToDictionary);
</db:programlisting>
<db:para>Note that the result types above are not QFuture objects, but real result types (in this case, QStringList and QSet&lt;QString&gt;).</db:para>
<db:section xml:id="concurrent-filter">
<db:title>Concurrent Filter</db:title>
<db:para>QtConcurrent::filtered() takes an input sequence and a filter function. This filter function is then called for each item in the sequence, and a new sequence containing the filtered values is returned.</db:para>
<db:para>The filter function must be of the form:</db:para>
<db:programlisting language="cpp">bool function(const T &amp;t);
</db:programlisting>
<db:para>T must match the type stored in the sequence. The function returns <db:code>true</db:code> if the item should be kept, false if it should be discarded.</db:para>
<db:para>This example shows how to keep strings that are all lower-case from a QStringList:</db:para>
<db:programlisting language="cpp">bool allLowerCase(const QString &amp;string)
{
    return string.lowered() == string;
}

QStringList strings = ...;
QFuture&lt;QString&gt; lowerCaseStrings = QtConcurrent::filtered(strings, allLowerCase);
</db:programlisting>
<db:para>The results of the filter are made available through QFuture. See the QFuture and QFutureWatcher documentation for more information on how to use QFuture in your applications.</db:para>
<db:para>If you want to modify a sequence in-place, use QtConcurrent::filter():</db:para>
<db:programlisting language="cpp">QStringList strings = ...;
QFuture&lt;void&gt; future = QtConcurrent::filter(strings, allLowerCase);
</db:programlisting>
<db:para>Since the sequence is modified in place, QtConcurrent::filter() does not return any results via QFuture. However, you can still use QFuture and QFutureWatcher to monitor the status of the filter.</db:para>
</db:section>
<db:section xml:id="concurrent-filter-reduce">
<db:title>Concurrent Filter-Reduce</db:title>
<db:para>QtConcurrent::filteredReduced() is similar to QtConcurrent::filtered(), but instead of returing a sequence with the filtered results, the results are combined into a single value using a reduce function.</db:para>
<db:para>The reduce function must be of the form:</db:para>
<db:programlisting language="cpp">V function(T &amp;result, const U &amp;intermediate)
</db:programlisting>
<db:para>T is the type of the final result, U is the type of items being filtered. Note that the return value and return type of the reduce function are not used.</db:para>
<db:para>Call QtConcurrent::filteredReduced() like this:</db:para>
<db:programlisting language="cpp">void addToDictionary(QSet&lt;QString&gt; &amp;dictionary, const QString &amp;string)
{
    dictionary.insert(string);
}

QStringList strings = ...;
QFuture&lt;QSet&lt;QString&gt; &gt; dictionary = QtConcurrent::filteredReduced(strings, allLowerCase, addToDictionary);
</db:programlisting>
<db:para>The reduce function will be called once for each result kept by the filter function, and should merge the <db:emphasis>intermediate</db:emphasis> into the <db:emphasis>result</db:emphasis> variable. QtConcurrent::filteredReduced() guarantees that only one thread will call reduce at a time, so using a mutex to lock the result variable is not necessary. The QtConcurrent::ReduceOptions enum provides a way to control the order in which the reduction is done.</db:para>
</db:section>
<db:section xml:id="additional-api-features">
<db:title>Additional API Features</db:title>
<db:section xml:id="using-iterators-instead-of-sequence">
<db:title>Using Iterators instead of Sequence</db:title>
<db:para>Each of the above functions has a variant that takes an iterator range instead of a sequence. You use them in the same way as the sequence variants:</db:para>
<db:programlisting language="cpp">QStringList strings = ...;
QFuture&lt;QString&gt; lowerCaseStrings = QtConcurrent::filtered(strings.constBegin(), strings.constEnd(), allLowerCase);

// filter in-place only works on non-const iterators
QFuture&lt;void&gt; future = QtConcurrent::filter(strings.begin(), strings.end(), allLowerCase);

QFuture&lt;QSet&lt;QString&gt; &gt; dictionary = QtConcurrent::filteredReduced(strings.constBegin(), strings.constEnd(), allLowerCase, addToDictionary);
</db:programlisting>
</db:section>
<db:section xml:id="using-member-functions">
<db:title>Using Member Functions</db:title>
<db:para>QtConcurrent::filter(), QtConcurrent::filtered(), and QtConcurrent::filteredReduced() accept pointers to member functions. The member function class type must match the type stored in the sequence:</db:para>
<db:programlisting language="cpp">// keep only images with an alpha channel
QList&lt;QImage&gt; images = ...;
QFuture&lt;void&gt; alphaImages = QtConcurrent::filter(strings, &amp;QImage::hasAlphaChannel);

// keep only gray scale images
QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; grayscaleImages = QtConcurrent::filtered(images, &amp;QImage::isGrayscale);

// create a set of all printable characters
QList&lt;QChar&gt; characters = ...;
QFuture&lt;QSet&lt;QChar&gt; &gt; set = QtConcurrent::filteredReduced(characters, &amp;QChar::isPrint, &amp;QSet&lt;QChar&gt;::insert);
</db:programlisting>
<db:para>Note that when using QtConcurrent::filteredReduced(), you can mix the use of normal and member functions freely:</db:para>
<db:programlisting language="cpp">// can mix normal functions and member functions with QtConcurrent::filteredReduced()

// create a dictionary of all lower cased strings
extern bool allLowerCase(const QString &amp;string);
QStringList strings = ...;
QFuture&lt;QSet&lt;int&gt; &gt; averageWordLength = QtConcurrent::filteredReduced(strings, allLowerCase, QSet&lt;QString&gt;::insert);

// create a collage of all gray scale images
extern void addToCollage(QImage &amp;collage, const QImage &amp;grayscaleImage);
QList&lt;QImage&gt; images = ...;
QFuture&lt;QImage&gt; collage = QtConcurrent::filteredReduced(images, &amp;QImage::isGrayscale, addToCollage);
</db:programlisting>
</db:section>
<db:section xml:id="using-function-objects">
<db:title>Using Function Objects</db:title>
<db:para>QtConcurrent::filter(), QtConcurrent::filtered(), and QtConcurrent::filteredReduced() accept function objects, which can be used to add state to a function call. The result_type typedef must define the result type of the function call operator:</db:para>
<db:programlisting language="cpp">struct StartsWith
{
    StartsWith(const QString &amp;string)
    : m_string(string) { }

    typedef bool result_type;

    bool operator()(const QString &amp;testString)
    {
        return testString.startsWith(m_string);
    }

    QString m_string;
};

QList&lt;QString&gt; strings = ...;
QFuture&lt;QString&gt; fooString = QtConcurrent::filtered(images, StartsWith(QLatin1String(&quot;Foo&quot;)));
</db:programlisting>
</db:section>
<db:section xml:id="using-bound-function-arguments">
<db:title>Using Bound Function Arguments</db:title>
<db:para>If you want to use a filter function takes more than one argument, you can use std::bind() to transform it onto a function that takes one argument. If C++11 support is not available, <db:link xlink:href="http://www.boost.org/libs/bind/bind.html">boost::bind()</db:link> or <db:link xlink:href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1836.pdf">std::tr1::bind()</db:link> are suitable replacements.</db:para>
<db:para>As an example, we use QString::contains():</db:para>
<db:programlisting language="cpp">bool QString::contains(const QRegExp &amp;regexp) const;
</db:programlisting>
<db:para>QString::contains() takes 2 arguments (including the &quot;this&quot; pointer) and can't be used with QtConcurrent::filtered() directly, because QtConcurrent::filtered() expects a function that takes one argument. To use QString::contains() with QtConcurrent::filtered() we have to provide a value for the <db:emphasis>regexp</db:emphasis> argument:</db:para>
<db:programlisting language="cpp">std::bind(&amp;QString::contains, QRegExp(&quot;^\\S+$&quot;)); // matches strings without whitespace
</db:programlisting>
<db:para>The return value from std::bind() is a function object (functor) with the following signature:</db:para>
<db:programlisting language="cpp">bool contains(const QString &amp;string)
</db:programlisting>
<db:para>This matches what QtConcurrent::filtered() expects, and the complete example becomes:</db:para>
<db:programlisting language="cpp">QStringList strings = ...;
std::bind(static_cast&lt;bool(QString::*)(const QRegExp&amp;)&gt;( &amp;QString::contains ), QRegExp(&quot;...&quot; ));
</db:programlisting>
</db:section>
</db:section>
</db:article>
