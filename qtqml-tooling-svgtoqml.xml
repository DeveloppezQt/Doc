<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>svgtoqml</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tool that converts an SVG document to a QML file.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>svgtoqml is a command line tool shipped with Qt that converts an SVG document to a QML file. This QML file can then be used as a component in Qt Quick applications. The <db:link xlink:href="">Weather Forecast Example</db:link> includes multiple QML files that have been generated using this tool.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>The svgtoqml will convert an SVG file to a QML file which uses Qt Quick primitives. Since Qt Quick supports scalable vector graphics, the resulting item will be smoothly transformable as far as this is possible. As a baseline, the tool supports most of the static features of the SVG Tiny 1.2 profile. Certain additional features are supported, determined on a case-by-case basis. Interactive features and animations are not supported.</db:para>
</db:section>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The basic usage of svgtoqml is to provide an input file and an output file: svgtoqml input.svg output.qml. This will read the input.svg file and convert it into the corresponding Qt Quick scene in output.qml, which can then be used as part of a Qt Quick application.</db:para>
<db:para>In addition, it supports the following options:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>–copyright-statement &lt;string&gt;</db:para>
</db:td>
<db:td>
<db:para>Adds &lt;string&gt; as a comment at the beginning of the generated file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-c, –curve-renderer</db:para>
</db:td>
<db:td>
<db:para>Enables the curve renderer backend for <db:link xlink:href="">Qt Quick Shapes</db:link>. This enables smooth, antialiased shapes in the scene without multi-sampling, but at some extra cost.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-p, –optimize-paths</db:para>
</db:td>
<db:td>
<db:para>Enables optimization of paths before committing them to the QML file, potentially making them faster to load and render later.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>–outline-stroke-mode</db:para>
</db:td>
<db:td>
<db:para>Stroke the outline (contour) of the filled shape instead of the original path.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-t, –type-name &lt;string&gt;</db:para>
</db:td>
<db:td>
<db:para>In place of Shape, the output will use the type name &lt;string&gt; instead. This is enables using a custom item to override the default behavior of Shape items.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>-v, –view</db:para>
</db:td>
<db:td>
<db:para>Display a preview of the Qt Quick item as it will be generated.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="comparison-to-other-options">
<db:title>Comparison to other options</db:title>
<db:para>There are multiple options for including SVG content in Qt Quick. The following will give an overview of where svgtoqml fits into the story.</db:para>
<db:section xml:id="comparison-to-qt-svg">
<db:title>Comparison to Qt SVG</db:title>
<db:para><db:link xlink:href="">Qt SVG</db:link> is a module which provides a parser and software renderer for SVG files. In addition, it includes an image loader plugin, so that SVG files can be loaded directly by the <db:link xlink:href="stylesheet-reference.xml#image">Image</db:link> element in Qt Quick. The SVG will then be rasterized and cached at a specified size and redrawing it will be quite cheap. But zooming into the image without pixelation will involve reloading it at a different size, which in turn can be expensive.</db:para>
<db:para>svgtoqml (and the VectorImage component) are alternative ways of rendering the same content. Once loaded into Qt Quick, transforms can be changed while retaining the geometry data needed to render the scene in GPU memory. Thus, the vector image can be redrawn at different scales with very little overhead.</db:para>
<db:para>If the image size will not change during the life time of the application, however, loading the SVG as an <db:link xlink:href="stylesheet-reference.xml#image">Image</db:link> will be more efficient. In this case, if the SVG is always rendered at a small subset of possible sizes, consider pre-rasterizing it to an image format which is more efficient to load, such as PNG.</db:para>
</db:section>
<db:section xml:id="comparison-to-vectorimage">
<db:title>Comparison to VectorImage</db:title>
<db:para>The VectorImage component provides the same basic functionality as svgtoqml, but instead of pregenerating the Qt Quick scene as a QML file, it creates the scene at runtime. This allows loading SVG files that are not provided at build time and thus allows for more flexibility. Pregenerating the scenes with svgtoqml allows optimizing the scene before it is loaded. Thus, for files that are available at build time, svgtoqml is the preferred option.</db:para>
</db:section>
<db:section xml:id="comparison-to-pathsvg">
<db:title>Comparison to PathSvg</db:title>
<db:para>The PathSvg component is part of the <db:link xlink:href="">Qt Quick Shapes</db:link> module. It provides a way to define paths with the syntax used by SVG, where the control points of a path are specified as a string. It does not support loading SVG files, so it is not a direct alternative to svgtoqml. If a complex SVG contains a specific shape needed by the application, then copying this path description into PathSvg may be more convenient than generating the full file.</db:para>
</db:section>
</db:section>
</db:article>
