<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemModelScatterDataProxy Class</db:title>
<db:productname>QtDataVis3D</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Proxy class for presenting data in item models with <db:link xlink:href="q3dscatter-qtdatavis.xml">Q3DScatter</db:link>.</db:para>
<db:para>This class was introduced in QtDataVisualization 1.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemModelScatterDataProxy</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtDataVisualization 1.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DataVisualization)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DataVisualization)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += datavisualization</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtdatavisualization-itemmodelscatterdataproxy.xml" xlink:role="">ItemModelScatterDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qscatterdataproxy-qtdatavis.xml" xlink:role="class">QScatterDataProxy</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link> allows you to use <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> derived models as a data source for <db:link xlink:href="q3dscatter-qtdatavis.xml">Q3DScatter</db:link>. It maps roles of <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> to the XYZ-values of <db:link xlink:href="q3dscatter-qtdatavis.xml">Q3DScatter</db:link> points.</db:para>
<db:para>The data is resolved asynchronously whenever the mapping or the model changes. <db:link xlink:href="qscatterdataproxy-qtdatavis.xml#arrayReset">QScatterDataProxy::arrayReset</db:link>() is emitted when the data has been resolved. However, inserts, removes, and single data item changes after the model initialization are resolved synchronously, unless the same frame also contains a change that causes the whole model to be resolved.</db:para>
<db:para>Mapping ignores rows and columns of the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> and treats all items equally. It requires the model to provide roles for the data items that can be mapped to X, Y, and Z-values for the scatter points.</db:para>
<db:para>For example, assume that you have a custom <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> for storing various measurements done on material samples, providing data for roles such as &quot;density&quot;, &quot;hardness&quot;, and &quot;conductivity&quot;. You could visualize these properties on a scatter graph using this proxy:</db:para>
<db:programlisting language="cpp">// Map &quot;density&quot; value to X-axis, &quot;hardness&quot; to Y-axis and &quot;conductivity&quot; to Z-axis.
QItemModelScatterDataProxy *proxy = new QItemModelScatterDataProxy(customModel,
                                                                   QStringLiteral(&quot;density&quot;),
                                                                   QStringLiteral(&quot;hardness&quot;),
                                                                   QStringLiteral(&quot;conductivity&quot;));
</db:programlisting>
<db:para>If the fields of the model do not contain the data in the exact format you need, you can specify a search pattern regular expression and a replace rule for each role to get the value in a format you need. For more information how the replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation. Note that using regular expressions has an impact on the performance, so it's more efficient to utilize item models where doing search and replace is not necessary to get the desired values.</db:para>
<db:para>For example about using the search patterns in conjunction with the roles, see <db:link xlink:href="qml-qtdatavisualization-itemmodelbardataproxy.xml">ItemModelBarDataProxy</db:link> usage in <db:link xlink:href="qtdatavis3d-qmlbars-example.xml">Simple Bar Graph</db:link> example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtdatavisualization-data-handling.xml">Qt Data Visualization Data Handling</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="itemModel-prop">
<db:title>itemModel : QAbstractItemModel*</db:title>
<db:para>This property holds the item model to use as a data source for a 3D scatter series.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis role="bold">itemModel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#setItemModel">setItemModel</db:link></db:emphasis>(<db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis>itemModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">itemModelChanged</db:emphasis>(const <db:type><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:type> *<db:emphasis>itemModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationRole-prop">
<db:title>rotationRole : QString</db:title>
<db:para>This property holds the item model role to map into item rotation.</db:para>
<db:para>The model may supply the value for rotation as either variant that is directly convertible to <db:link xlink:href="qquaternion.xml">QQuaternion</db:link>, or as one of the string representations: <db:code>&quot;scalar,x,y,z&quot;</db:code> or <db:code>&quot;@angle,x,y,z&quot;</db:code>. The first will construct the quaternion directly with given values, and the second one will construct the quaternion using <db:link xlink:href="qquaternion.xml#fromAxisAndAngle">QQuaternion::fromAxisAndAngle</db:link>() method.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rotationRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationRolePattern-prop">
<db:title>rotationRolePattern : QRegularExpression</db:title>
<db:para>This property holds whether a search and replace is done on the value mapped by the rotation role before it is used as item rotation.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRoleReplace-prop">rotationRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">rotationRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRole-prop">rotationRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRoleReplace-prop">rotationRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotationRoleReplace-prop">
<db:title>rotationRoleReplace : QString</db:title>
<db:para>This property holds the replace content to be used in conjunction with the rotation role pattern.</db:para>
<db:para>Defaults to an empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">rotationRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRole-prop">rotationRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRolePattern-prop">rotationRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xPosRole-prop">
<db:title>xPosRole : QString</db:title>
<db:para>This property holds the item model role to map into the X position.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">xPosRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setXPosRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">xPosRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="xPosRolePattern-prop">
<db:title>xPosRolePattern : QRegularExpression</db:title>
<db:para>This property holds whether search and replace is done on the value mapped by the x position role before it is used as an item position value.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRoleReplace-prop">xPosRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">xPosRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setXPosRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">xPosRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRole-prop">xPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRoleReplace-prop">xPosRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xPosRoleReplace-prop">
<db:title>xPosRoleReplace : QString</db:title>
<db:para>This property holds the replace content to be used in conjunction with the x position role pattern.</db:para>
<db:para>Defaults to an empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">xPosRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setXPosRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">xPosRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRole-prop">xPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRolePattern-prop">xPosRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yPosRole-prop">
<db:title>yPosRole : QString</db:title>
<db:para>This property holds the item model role to map into the Y position.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">yPosRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setYPosRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">yPosRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="yPosRolePattern-prop">
<db:title>yPosRolePattern : QRegularExpression</db:title>
<db:para>This property holds whether a search and replace is done on the value mapped by the y position role before it is used as an item position value.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRoleReplace-prop">yPosRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">yPosRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setYPosRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">yPosRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRole-prop">yPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRoleReplace-prop">yPosRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yPosRoleReplace-prop">
<db:title>yPosRoleReplace : QString</db:title>
<db:para>This property holds the replace content to be used in conjunction with the y position role pattern.</db:para>
<db:para>Defaults to an empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">yPosRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setYPosRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">yPosRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRole-prop">yPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRolePattern-prop">yPosRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zPosRole-prop">
<db:title>zPosRole : QString</db:title>
<db:para>This property holds the item model role to map into the Z position.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">zPosRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZPosRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zPosRoleChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="zPosRolePattern-prop">
<db:title>zPosRolePattern : QRegularExpression</db:title>
<db:para>This property holds whether a search and replace is done on the value mapped by the z position role before it is used as an item position value.</db:para>
<db:para>This property specifies the regular expression to find the portion of the mapped value to replace and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRoleReplace-prop">zPosRoleReplace</db:link> property contains the replacement string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> <db:emphasis role="bold">zPosRolePattern</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZPosRolePattern</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zPosRolePatternChanged</db:emphasis>(const <db:type><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:type> &amp;<db:emphasis>pattern</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRole-prop">zPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRoleReplace-prop">zPosRoleReplace</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="zPosRoleReplace-prop">
<db:title>zPosRoleReplace : QString</db:title>
<db:para>This property holds the replace content to be used in conjunction with the z position role pattern.</db:para>
<db:para>Defaults to an empty string. For more information on how the search and replace using regular expressions works, see <db:link xlink:href="qstring.xml#replace">QString::replace</db:link>(const <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> &amp;rx, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;after) function documentation.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">zPosRoleReplace</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZPosRoleReplace</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zPosRoleReplaceChanged</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>replace</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRole-prop">zPosRole</db:link></db:member>
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRolePattern-prop">zPosRolePattern</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemModelScatterDataProxy">
<db:title>[explicit] QItemModelScatterDataProxy::QItemModelScatterDataProxy(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link> with optional <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemModelScatterDataProxy-1">
<db:title>[explicit] QItemModelScatterDataProxy::QItemModelScatterDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls.</db:para>
</db:section>
<db:section xml:id="QItemModelScatterDataProxy-2">
<db:title>[explicit] QItemModelScatterDataProxy::QItemModelScatterDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>xPosRole</db:emphasis>, const QString &amp;<db:emphasis>yPosRole</db:emphasis>, const QString &amp;<db:emphasis>zPosRole</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRole-prop">xPosRole</db:link> property is set to <db:code role="parameter">xPosRole</db:code>, <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRole-prop">yPosRole</db:link> property to <db:code role="parameter">yPosRole</db:code>, and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRole-prop">zPosRole</db:link> property to <db:code role="parameter">zPosRole</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemModelScatterDataProxy-3">
<db:title>[explicit] QItemModelScatterDataProxy::QItemModelScatterDataProxy(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>, const QString &amp;<db:emphasis>xPosRole</db:emphasis>, const QString &amp;<db:emphasis>yPosRole</db:emphasis>, const QString &amp;<db:emphasis>zPosRole</db:emphasis>, const QString &amp;<db:emphasis>rotationRole</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link> with <db:code role="parameter">itemModel</db:code> and optional <db:code role="parameter">parent</db:code>. Proxy doesn't take ownership of the <db:code role="parameter">itemModel</db:code>, as typically item models are owned by other controls. The <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#xPosRole-prop">xPosRole</db:link> property is set to <db:code role="parameter">xPosRole</db:code>, <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#yPosRole-prop">yPosRole</db:link> property to <db:code role="parameter">yPosRole</db:code>, <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#zPosRole-prop">zPosRole</db:link> property to <db:code role="parameter">zPosRole</db:code>, and <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#rotationRole-prop">rotationRole</db:link> property to <db:code role="parameter">rotationRole</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QItemModelScatterDataProxy">
<db:title>[virtual noexcept] QItemModelScatterDataProxy::~QItemModelScatterDataProxy()</db:title>
<db:para>Destroys <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml">QItemModelScatterDataProxy</db:link>.</db:para>
</db:section>
<db:section xml:id="remap">
<db:title>void QItemModelScatterDataProxy::remap(const QString &amp;<db:emphasis>xPosRole</db:emphasis>, const QString &amp;<db:emphasis>yPosRole</db:emphasis>, const QString &amp;<db:emphasis>zPosRole</db:emphasis>, const QString &amp;<db:emphasis>rotationRole</db:emphasis>)</db:title>
<db:para>Changes <db:code role="parameter">xPosRole</db:code>, <db:code role="parameter">yPosRole</db:code>, <db:code role="parameter">zPosRole</db:code>, and <db:code role="parameter">rotationRole</db:code> mapping.</db:para>
</db:section>
<db:section xml:id="setItemModel">
<db:title>void QItemModelScatterDataProxy::setItemModel(QAbstractItemModel *<db:emphasis>itemModel</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">itemModel</db:code> as the item model for <db:link xlink:href="q3dscatter-qtdatavis.xml">Q3DScatter</db:link>. Does not take ownership of the model, but does connect to it to listen for changes.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#itemModel-prop">itemModel</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemmodelscatterdataproxy-qtdatavis.xml#itemModel-prop">itemModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
