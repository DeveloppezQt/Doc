<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Creating Horizontal Stacked Bar Charts</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to create a simple stacked horizontal bar chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:para>The stacked bar chart shows the data in sets as bars that are stacked on top of each other. The stacking is done per category. Creating a stacked horizontal bar chart is just like creating a regular <db:link xlink:href="qtcharts-barchart-example.xml">bar chart</db:link>, except that for a stacked horizontal bar chart, we use the <db:link xlink:href="qhorizontalstackedbarseries-qtcharts.xml">QHorizontalStackedBarSeries</db:link> api instead of <db:link xlink:href="qbarseries-qtcharts.xml">QBarSeries</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_horizontalstackedbarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The bar sets are used in same way in all bar charts. To illustrate the difference between various barcharts, we use the same data in all examples. The data that barchart visualizes, is defined by the <db:link xlink:href="qbarset-qtcharts.xml">QBarSet</db:link> instances. Here we create the sets and append data to them. The data is appended here with the &lt;&lt; operator. Alternatively, the append method could also be used.</db:para>
<db:programlisting language="cpp">auto set0 = new QBarSet(&quot;Jane&quot;);
auto set1 = new QBarSet(&quot;John&quot;);
auto set2 = new QBarSet(&quot;Axel&quot;);
auto set3 = new QBarSet(&quot;Mary&quot;);
auto set4 = new QBarSet(&quot;Samantha&quot;);

*set0 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5 &lt;&lt; 6;
*set1 &lt;&lt; 5 &lt;&lt; 0 &lt;&lt; 0 &lt;&lt; 4 &lt;&lt; 0 &lt;&lt; 7;
*set2 &lt;&lt; 3 &lt;&lt; 5 &lt;&lt; 8 &lt;&lt; 13 &lt;&lt; 8 &lt;&lt; 5;
*set3 &lt;&lt; 5 &lt;&lt; 6 &lt;&lt; 7 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;
*set4 &lt;&lt; 9 &lt;&lt; 7 &lt;&lt; 5 &lt;&lt; 3 &lt;&lt; 1 &lt;&lt; 2;
</db:programlisting>
<db:para>We create the series and append the bar sets to it. The series takes ownership of the bar sets. The series groups the data from sets to categories. The first values of each set are grouped together in the first category, the second values in the second category and so on.</db:para>
<db:programlisting language="cpp">auto series = new QHorizontalStackedBarSeries;
series-&gt;append(set0);
series-&gt;append(set1);
series-&gt;append(set2);
series-&gt;append(set3);
series-&gt;append(set4);

</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title for the chart with setTitle, and then turn on the animations of the series by calling setAnimationOptions(<db:link xlink:href="qchart-qtcharts.xml#AnimationOption-enum">QChart::SeriesAnimations</db:link>).</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&gt;addSeries(series);
chart-&gt;setTitle(&quot;Simple Horizontal Stacked Bar Chart&quot;);
chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have the categories displayed on an axis, we need to create a <db:link xlink:href="qbarcategoryaxis-qtcharts.xml">QBarCategoryAxis</db:link> first. Here we create a category axis with a list of categories and add it to the chart on the left-hand side, acting as the y-axis. The chart takes ownership of the axis. For x-axis we use a value axis, aligned to the bottom.</db:para>
<db:programlisting language="cpp">QStringList categories {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;};
auto axisY = new QBarCategoryAxis;
axisY-&gt;append(categories);
chart-&gt;addAxis(axisY, Qt::AlignLeft);
series-&gt;attachAxis(axisY);
auto axisX = new QValueAxis;
chart-&gt;addAxis(axisX, Qt::AlignBottom);
series-&gt;attachAxis(axisX);
</db:programlisting>
<db:para>We also want to show the legend. To do that, we get the legend pointer from the chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">chart-&gt;legend()-&gt;setVisible(true);
chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally we add the chart onto a view.</db:para>
<db:programlisting language="cpp">createDefaultChartView(chart);
</db:programlisting>
</db:article>
