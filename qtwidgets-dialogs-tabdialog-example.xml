<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tab Dialog Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tab Dialog example shows how to construct a tab dialog using the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> class.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Dialogs provide an efficient way for the application to communicate with the user, but complex dialogs suffer from the problem that they often take up too much screen area. By using a number of tabs in a dialog, information can be split into different categories, while remaining accessible.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/tabdialog-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Tab Dialog example consists of a single TabDialog class that provides three tabs, each containing information about a particular file, and two standard push buttons that are used to accept or reject the contents of the dialog.</db:para>
<db:section xml:id="tabdialog-class-definition">
<db:title>TabDialog Class Definition</db:title>
<db:para>The TabDialog class is a subclass of <db:link xlink:href="qdialog.xml">QDialog</db:link> that displays a <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link> and two standard dialog buttons. The class definition only contain the class constructor and a private data member for the <db:link xlink:href="qtabwidget.xml">QTabWidget</db:link>:</db:para>
<db:programlisting language="cpp">class TabDialog : public QDialog
{
    Q_OBJECT

public:
    explicit TabDialog(const QString &amp;amp;fileName, QWidget *parent = 0);

private:
    QTabWidget *tabWidget;
    QDialogButtonBox *buttonBox;
};
</db:programlisting>
<db:para>In the example, the widget will be used as a top-level window, but we define the constructor so that it can take a parent widget. This allows the dialog to be centered on top of an application's main window.</db:para>
</db:section>
<db:section xml:id="tabdialog-class-implementation">
<db:title>TabDialog Class Implementation</db:title>
<db:para>The constructor calls the <db:link xlink:href="qdialog.xml">QDialog</db:link> constructor and creates a <db:link xlink:href="qfileinfo.xml">QFileInfo</db:link> object for the specified filename.</db:para>
<db:programlisting language="cpp">TabDialog::TabDialog(const QString &amp;amp;fileName, QWidget *parent)
    : QDialog(parent)
{
    QFileInfo fileInfo(fileName);

    tabWidget = new QTabWidget;
    tabWidget-&amp;gt;addTab(new GeneralTab(fileInfo), tr(&quot;General&quot;));
    tabWidget-&amp;gt;addTab(new PermissionsTab(fileInfo), tr(&quot;Permissions&quot;));
    tabWidget-&amp;gt;addTab(new ApplicationsTab(fileInfo), tr(&quot;Applications&quot;));
</db:programlisting>
<db:para>The tab widget is populated with three custom widgets that each contain information about the file. We construct each of these without a parent widget because the tab widget will reparent them as they are added to it.</db:para>
<db:para>We create two standard push buttons, and connect each of them to the appropriate slots in the dialog:</db:para>
<db:programlisting language="cpp">    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, &amp;amp;QDialogButtonBox::accepted, this, &amp;amp;QDialog::accept);
    connect(buttonBox, &amp;amp;QDialogButtonBox::rejected, this, &amp;amp;QDialog::reject);
</db:programlisting>
<db:para>We arrange the tab widget above the buttons in the dialog:</db:para>
<db:programlisting language="cpp">    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(tabWidget);
    mainLayout-&amp;gt;addWidget(buttonBox);
    setLayout(mainLayout);
</db:programlisting>
<db:para>Finally, we set the dialog's title:</db:para>
<db:programlisting language="cpp">    setWindowTitle(tr(&quot;Tab Dialog&quot;));
}
</db:programlisting>
<db:para>Each of the tabs are subclassed from <db:link xlink:href="qwidget.xml">QWidget</db:link>, and only provide constructors.</db:para>
</db:section>
<db:section xml:id="generaltab-class-definition">
<db:title>GeneralTab Class Definition</db:title>
<db:para>The GeneralTab widget definition is simple because we are only interested in displaying the contents of a widget within a tab:</db:para>
<db:programlisting language="cpp">class GeneralTab : public QWidget
{
    Q_OBJECT

public:
    explicit GeneralTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent = 0);
};
</db:programlisting>
</db:section>
<db:section xml:id="generaltab-class-implementation">
<db:title>GeneralTab Class Implementation</db:title>
<db:para>The GeneralTab widget simply displays some information about the file passed by the TabDialog. Various widgets for this purpose, and these are arranged within a vertical layout:</db:para>
<db:programlisting language="cpp">GeneralTab::GeneralTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QLabel *fileNameLabel = new QLabel(tr(&quot;File Name:&quot;));
    QLineEdit *fileNameEdit = new QLineEdit(fileInfo.fileName());

    QLabel *pathLabel = new QLabel(tr(&quot;Path:&quot;));
    QLabel *pathValueLabel = new QLabel(fileInfo.absoluteFilePath());
    pathValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *sizeLabel = new QLabel(tr(&quot;Size:&quot;));
    qlonglong size = fileInfo.size()/1024;
    QLabel *sizeValueLabel = new QLabel(tr(&quot;%1 K&quot;).arg(size));
    sizeValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *lastReadLabel = new QLabel(tr(&quot;Last Read:&quot;));
    QLabel *lastReadValueLabel = new QLabel(fileInfo.lastRead().toString());
    lastReadValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *lastModLabel = new QLabel(tr(&quot;Last Modified:&quot;));
    QLabel *lastModValueLabel = new QLabel(fileInfo.lastModified().toString());
    lastModValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(fileNameLabel);
    mainLayout-&amp;gt;addWidget(fileNameEdit);
    mainLayout-&amp;gt;addWidget(pathLabel);
    mainLayout-&amp;gt;addWidget(pathValueLabel);
    mainLayout-&amp;gt;addWidget(sizeLabel);
    mainLayout-&amp;gt;addWidget(sizeValueLabel);
    mainLayout-&amp;gt;addWidget(lastReadLabel);
    mainLayout-&amp;gt;addWidget(lastReadValueLabel);
    mainLayout-&amp;gt;addWidget(lastModLabel);
    mainLayout-&amp;gt;addWidget(lastModValueLabel);
    mainLayout-&amp;gt;addStretch(1);
    setLayout(mainLayout);
}
</db:programlisting>
</db:section>
<db:section xml:id="permissionstab-class-definition">
<db:title>PermissionsTab Class Definition</db:title>
<db:para>Like the GeneralTab, the PermissionsTab is just used as a placeholder widget for its children:</db:para>
<db:programlisting language="cpp">class PermissionsTab : public QWidget
{
    Q_OBJECT

public:
    explicit PermissionsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent = 0);
};
</db:programlisting>
</db:section>
<db:section xml:id="permissionstab-class-implementation">
<db:title>PermissionsTab Class Implementation</db:title>
<db:para>The PermissionsTab shows information about the file's access information, displaying details of the file permissions and owner in widgets that are arranged in nested layouts:</db:para>
<db:programlisting language="cpp">PermissionsTab::PermissionsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QGroupBox *permissionsGroup = new QGroupBox(tr(&quot;Permissions&quot;));

    QCheckBox *readable = new QCheckBox(tr(&quot;Readable&quot;));
    if (fileInfo.isReadable())
        readable-&amp;gt;setChecked(true);

    QCheckBox *writable = new QCheckBox(tr(&quot;Writable&quot;));
    if ( fileInfo.isWritable() )
        writable-&amp;gt;setChecked(true);

    QCheckBox *executable = new QCheckBox(tr(&quot;Executable&quot;));
    if ( fileInfo.isExecutable() )
        executable-&amp;gt;setChecked(true);

    QGroupBox *ownerGroup = new QGroupBox(tr(&quot;Ownership&quot;));

    QLabel *ownerLabel = new QLabel(tr(&quot;Owner&quot;));
    QLabel *ownerValueLabel = new QLabel(fileInfo.owner());
    ownerValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QLabel *groupLabel = new QLabel(tr(&quot;Group&quot;));
    QLabel *groupValueLabel = new QLabel(fileInfo.group());
    groupValueLabel-&amp;gt;setFrameStyle(QFrame::Panel | QFrame::Sunken);

    QVBoxLayout *permissionsLayout = new QVBoxLayout;
    permissionsLayout-&amp;gt;addWidget(readable);
    permissionsLayout-&amp;gt;addWidget(writable);
    permissionsLayout-&amp;gt;addWidget(executable);
    permissionsGroup-&amp;gt;setLayout(permissionsLayout);

    QVBoxLayout *ownerLayout = new QVBoxLayout;
    ownerLayout-&amp;gt;addWidget(ownerLabel);
    ownerLayout-&amp;gt;addWidget(ownerValueLabel);
    ownerLayout-&amp;gt;addWidget(groupLabel);
    ownerLayout-&amp;gt;addWidget(groupValueLabel);
    ownerGroup-&amp;gt;setLayout(ownerLayout);

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout-&amp;gt;addWidget(permissionsGroup);
    mainLayout-&amp;gt;addWidget(ownerGroup);
    mainLayout-&amp;gt;addStretch(1);
    setLayout(mainLayout);
}
</db:programlisting>
</db:section>
<db:section xml:id="applicationstab-class-definition">
<db:title>ApplicationsTab Class Definition</db:title>
<db:para>The ApplicationsTab is another placeholder widget that is mostly cosmetic:</db:para>
<db:programlisting language="cpp">class ApplicationsTab : public QWidget
{
    Q_OBJECT

public:
    explicit ApplicationsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent = 0);
};
</db:programlisting>
</db:section>
<db:section xml:id="applicationstab-class-implementation">
<db:title>ApplicationsTab Class Implementation</db:title>
<db:para>The ApplicationsTab does not show any useful information, but could be used as a template for a more complicated example:</db:para>
<db:programlisting language="cpp">ApplicationsTab::ApplicationsTab(const QFileInfo &amp;amp;fileInfo, QWidget *parent)
    : QWidget(parent)
{
    QLabel *topLabel = new QLabel(tr(&quot;Open with:&quot;));

    QListWidget *applicationsListBox = new QListWidget;
    QStringList applications;

    for (int i = 1; i &amp;lt;= 30; ++i)
        applications.append(tr(&quot;Application %1&quot;).arg(i));
    applicationsListBox-&amp;gt;insertItems(0, applications);

    QCheckBox *alwaysCheckBox;

    if (fileInfo.suffix().isEmpty())
        alwaysCheckBox = new QCheckBox(tr(&quot;Always use this application to &quot;
            &quot;open this type of file&quot;));
    else
        alwaysCheckBox = new QCheckBox(tr(&quot;Always use this application to &quot;
            &quot;open files with the extension '%1'&quot;).arg(fileInfo.suffix()));

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&amp;gt;addWidget(topLabel);
    layout-&amp;gt;addWidget(applicationsListBox);
    layout-&amp;gt;addWidget(alwaysCheckBox);
    setLayout(layout);
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dialogs/tabdialog/main.cpp">dialogs/tabdialog/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/tabdialog/tabdialog.cpp">dialogs/tabdialog/tabdialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/tabdialog/tabdialog.h">dialogs/tabdialog/tabdialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dialogs/tabdialog/tabdialog.pro">dialogs/tabdialog/tabdialog.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
