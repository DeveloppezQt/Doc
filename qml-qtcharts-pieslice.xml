<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>PieSlice QML Type</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Represents a single slice in a pie series.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCharts 2.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpieslice.xml">QPieSlice</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A pie slice has a value and a label. When the slice is added to a pie series, the <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> type calculates the percentage of the slice compared with the sum of all slices in the series to determine the actual size of the slice in the chart.</db:para>
<db:para>By default, the label is hidden. If it is visible, it can be either located outside the slice and connected to it with an arm or centered inside the slice either horizontally or in parallel with the tangential or normal of the slice's arc.</db:para>
<db:para>By default, the visual appearance of the slice is set by a theme, but the theme can be overridden by specifying slice properties. However, if the theme is changed after the slices are customized, all customization will be lost.</db:para>
<db:para>The <db:link xlink:href="qml-qtcharts-pieslice.xml">PieSlice</db:link> type should be used as a child of a <db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link> type. For example:</db:para>
<db:programlisting language="qml">    PieSeries {
        id: pieSeries
        PieSlice { label: &quot;eaten&quot;; value: 94.9 }
        PieSlice { label: &quot;not yet eaten&quot;; value: 5.1 }
    }
</db:programlisting>
<db:para>Alternatively, slices can be added to a pie series by using the <db:link xlink:href="qml-qtcharts-pieseries.xml#append-method">PieSeries.append</db:link>() method.</db:para>
<db:programlisting language="qml">pieSeries.append(&quot;don't care&quot;, 1.1);
</db:programlisting>
<db:para>In that case, <db:link xlink:href="qml-qtcharts-pieseries.xml#at-method">PieSeries.at</db:link>() or <db:link xlink:href="qml-qtcharts-pieseries.xml#find-method">PieSeries.find</db:link> can be used to access the properties of an individual <db:link xlink:href="qml-qtcharts-pieslice.xml">PieSlice</db:link> instance.</db:para>
<db:programlisting language="qml">pieSeries.at(0).exploded = true;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieseries.xml">PieSeries</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="angleSpan-prop">
<db:title>[read-only] angleSpan : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>angleSpan</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The span of the slice in degrees. A full pie is 360 degrees, where 0 degrees is at 12 a'clock. Updated automatically once the slice is added to the series.</db:para>
</db:section>
<db:section xml:id="borderColor-prop">
<db:title>borderColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>borderColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The color used to draw the slice border (pen color).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#borderWidth-prop">borderWidth</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="borderWidth-prop">
<db:title>borderWidth : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>borderWidth</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The width of the slice border. This is a convenience property for modifying the slice pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#borderColor-prop">borderColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="brushFilename-prop">
<db:title>brushFilename : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>brushFilename</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The name of the file used as a brush for the slice.</db:para>
</db:section>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>color</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The fill (brush) color of the slice.</db:para>
</db:section>
<db:section xml:id="explodeDistanceFactor-prop">
<db:title>explodeDistanceFactor : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>explodeDistanceFactor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Determines how far away from the pie the slice is exploded.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1.0 means that the distance is the same as the radius.</db:para>
</db:listitem>
<db:listitem>
<db:para>0.5 means that the distance is half of the radius.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, the distance is 0.15</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#exploded-prop">exploded</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exploded-prop">
<db:title>exploded : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>exploded</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Whether the slice is separated from the pie.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#explodeDistanceFactor-prop">explodeDistanceFactor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="label-prop">
<db:title>label : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>label</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The label of the slice.</db:para>
<db:note>
<db:para>The string can be HTML formatted.</db:para>
</db:note>
</db:section>
<db:section xml:id="labelArmLengthFactor-prop">
<db:title>labelArmLengthFactor : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>labelArmLengthFactor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The length of the label arm. The factor is relative to the pie radius. For example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>1.0 means that the length is the same as the radius.</db:para>
</db:listitem>
<db:listitem>
<db:para>0.5 means that the length is half of the radius.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>By default, the arm length is 0.15</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#labelVisible-prop">labelVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelColor-prop">
<db:title>labelColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>labelColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The color used to draw the slice label.</db:para>
</db:section>
<db:section xml:id="labelFont-prop">
<db:title>labelFont : font</db:title>
<db:fieldsynopsis>
<db:type>font</db:type>
<db:varname>labelFont</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The font used for the slice label.</db:para>
<db:para>For more information, see font.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#labelVisible-prop">labelVisible</db:link></db:member>
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#labelPosition-prop">labelPosition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelPosition-prop">
<db:title>labelPosition : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>labelPosition</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Describes the position of the slice label.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>PieSlice.LabelOutside</db:para>
</db:td>
<db:td>
<db:para>The label is located outside the slice connected to it with an arm. This is the default value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PieSlice.LabelInsideHorizontal</db:para>
</db:td>
<db:td>
<db:para>The label is centered within the slice and laid out horizontally.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PieSlice.LabelInsideTangential</db:para>
</db:td>
<db:td>
<db:para>The label is centered within the slice and rotated to be parallel with the tangential of the slice's arc.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>PieSlice.LabelInsideNormal</db:para>
</db:td>
<db:td>
<db:para>The label is centered within the slice and rotated to be parallel with the normal of the slice's arc.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtcharts-pieslice.xml#labelVisible-prop">labelVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="labelVisible-prop">
<db:title>labelVisible : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>labelVisible</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The visibility of the slice label. By default, the label is not visible.</db:para>
</db:section>
<db:section xml:id="percentage-prop">
<db:title>[read-only] percentage : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>percentage</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The percentage of the slice compared to the sum of all slices in the series. The actual value ranges from 0.0 to 1.0. Updated automatically once the slice is added to the series.</db:para>
</db:section>
<db:section xml:id="startAngle-prop">
<db:title>[read-only] startAngle : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>startAngle</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The starting angle of this slice in the series it belongs to. A full pie is 360 degrees, where 0 degrees is at 12 a'clock. Updated automatically once the slice is added to the series.</db:para>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>value</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The value of the slice.</db:para>
<db:note>
<db:para>A negative value is converted to a positive value.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="clicked-signal">
<db:title>clicked()</db:title>
<db:para>This signal is emitted when the slice is clicked.</db:para>
<db:para>The corresponding signal handler is <db:code>onClicked()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="doubleClicked-signal">
<db:title>doubleClicked()</db:title>
<db:para>This signal is emitted when user double-clicks the slice.</db:para>
<db:para>The corresponding signal handler is <db:code>onDoubleClicked()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onDoubleClicked</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="hovered-signal">
<db:title>hovered(bool <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted when a mouse is hovered over the slice. When the mouse moves over the slice, <db:code role="parameter">state</db:code> turns <db:code>true</db:code>, and when the mouse moves away again, it turns <db:code>false</db:code>.</db:para>
<db:para>The corresponding signal handler is <db:code>onHovered()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onHovered</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="pressed-signal">
<db:title>pressed()</db:title>
<db:para>This signal is emitted when user clicks the slice and holds down the mouse button.</db:para>
<db:para>The corresponding signal handler is <db:code>onPressed()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onPressed</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="released-signal">
<db:title>released()</db:title>
<db:para>This signal is emitted when the user releases the mouse press on the slice.</db:para>
<db:para>The corresponding signal handler is <db:code>onReleased()</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onReleased</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
