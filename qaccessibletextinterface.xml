<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAccessibleTextInterface Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaccessibletextinterface.xml">QAccessibleTextInterface</db:link> class implements support for text handling.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAccessibleTextInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAccessibleTextInterface is part of <db:simplelist><db:member>accessibility</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This interface corresponds to the IAccessibleText interface. It should be implemented for widgets that display more text than a plain label. Labels should be represented by only <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> and return their text as name (<db:link xlink:href="qaccessibleinterface.xml#text">QAccessibleInterface::text</db:link>() with <db:link xlink:href="qaccessible.xml#Text-enum">QAccessible::Name</db:link> as type). The <db:link xlink:href="qaccessibletextinterface.xml">QAccessibleTextInterface</db:link> is typically for text that a screen reader might want to read line by line, and for widgets that support text selection and input. This interface is, for example, implemented for QLineEdit.</db:para>
<db:para><db:link xlink:href="https://accessibility.linuxfoundation.org/a11yspecs/ia2/docs/html/index.html">IAccessible2 Specification</db:link></db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QAccessibleTextInterface">
<db:title>[virtual noexcept] QAccessibleTextInterface::~QAccessibleTextInterface()</db:title>
<db:para>Destroys the <db:link xlink:href="qaccessibletextinterface.xml">QAccessibleTextInterface</db:link>.</db:para>
</db:section>
<db:section xml:id="addSelection">
<db:title>[pure virtual] void QAccessibleTextInterface::addSelection(int <db:emphasis>startOffset</db:emphasis>, int <db:emphasis>endOffset</db:emphasis>)</db:title>
<db:para>Select the text from <db:code role="parameter">startOffset</db:code> to <db:code role="parameter">endOffset</db:code>. The <db:code role="parameter">startOffset</db:code> is the first character that will be selected. The <db:code role="parameter">endOffset</db:code> is the first character that will not be selected.</db:para>
<db:para>When the object supports multiple selections (e.g. in a word processor), this adds a new selection, otherwise it replaces the previous selection.</db:para>
<db:para>The selection will be <db:code role="parameter">endOffset</db:code> - <db:code role="parameter">startOffset</db:code> characters long.</db:para>
</db:section>
<db:section xml:id="attributes">
<db:title>[pure virtual] QString QAccessibleTextInterface::attributes(int <db:emphasis>offset</db:emphasis>, int *<db:emphasis>startOffset</db:emphasis>, int *<db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns the text attributes at the position <db:code role="parameter">offset</db:code>. In addition the range of the attributes is returned in <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code>.</db:para>
</db:section>
<db:section xml:id="characterCount">
<db:title>[pure virtual] int QAccessibleTextInterface::characterCount() const</db:title>
<db:para>Returns the length of the text (total size including spaces).</db:para>
</db:section>
<db:section xml:id="characterRect">
<db:title>[pure virtual] QRect QAccessibleTextInterface::characterRect(int <db:emphasis>offset</db:emphasis>) const</db:title>
<db:para>Returns the position and size of the character at position <db:code role="parameter">offset</db:code> in screen coordinates.</db:para>
</db:section>
<db:section xml:id="cursorPosition">
<db:title>[pure virtual] int QAccessibleTextInterface::cursorPosition() const</db:title>
<db:para>Returns the current cursor position.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaccessibletextinterface.xml#setCursorPosition">setCursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetAtPoint">
<db:title>[pure virtual] int QAccessibleTextInterface::offsetAtPoint(const QPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the offset of the character at the <db:code role="parameter">point</db:code> in screen coordinates.</db:para>
</db:section>
<db:section xml:id="removeSelection">
<db:title>[pure virtual] void QAccessibleTextInterface::removeSelection(int <db:emphasis>selectionIndex</db:emphasis>)</db:title>
<db:para>Clears the selection with index <db:code role="parameter">selectionIndex</db:code>.</db:para>
</db:section>
<db:section xml:id="scrollToSubstring">
<db:title>[pure virtual] void QAccessibleTextInterface::scrollToSubstring(int <db:emphasis>startIndex</db:emphasis>, int <db:emphasis>endIndex</db:emphasis>)</db:title>
<db:para>Ensures that the text between <db:code role="parameter">startIndex</db:code> and <db:code role="parameter">endIndex</db:code> is visible.</db:para>
</db:section>
<db:section xml:id="selection">
<db:title>[pure virtual] void QAccessibleTextInterface::selection(int <db:emphasis>selectionIndex</db:emphasis>, int *<db:emphasis>startOffset</db:emphasis>, int *<db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns a selection. The size of the selection is returned in <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code>. If there is no selection both <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> are <db:code>nullptr</db:code>.</db:para>
<db:para>The accessibility APIs support multiple selections. For most widgets though, only one selection is supported with <db:code role="parameter">selectionIndex</db:code> equal to 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaccessibletextinterface.xml#setSelection">setSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectionCount">
<db:title>[pure virtual] int QAccessibleTextInterface::selectionCount() const</db:title>
<db:para>Returns the number of selections in this text.</db:para>
</db:section>
<db:section xml:id="setCursorPosition">
<db:title>[pure virtual] void QAccessibleTextInterface::setCursorPosition(int <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Moves the cursor to <db:code role="parameter">position</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaccessibletextinterface.xml#cursorPosition">cursorPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSelection">
<db:title>[pure virtual] void QAccessibleTextInterface::setSelection(int <db:emphasis>selectionIndex</db:emphasis>, int <db:emphasis>startOffset</db:emphasis>, int <db:emphasis>endOffset</db:emphasis>)</db:title>
<db:para>Set the selection <db:code role="parameter">selectionIndex</db:code> to the range from <db:code role="parameter">startOffset</db:code> to <db:code role="parameter">endOffset</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaccessibletextinterface.xml#selection">selection</db:link>()</db:member>
<db:member><db:link xlink:href="qaccessibletextinterface.xml#addSelection">addSelection</db:link>()</db:member>
<db:member><db:link xlink:href="qaccessibletextinterface.xml#removeSelection">removeSelection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text">
<db:title>[pure virtual] QString QAccessibleTextInterface::text(int <db:emphasis>startOffset</db:emphasis>, int <db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns the text from <db:code role="parameter">startOffset</db:code> to <db:code role="parameter">endOffset</db:code>. The <db:code role="parameter">startOffset</db:code> is the first character that will be returned. The <db:code role="parameter">endOffset</db:code> is the first character that will not be returned.</db:para>
</db:section>
<db:section xml:id="textAfterOffset">
<db:title>[virtual] QString QAccessibleTextInterface::textAfterOffset(int <db:emphasis>offset</db:emphasis>, QAccessible::TextBoundaryType <db:emphasis>boundaryType</db:emphasis>, int *<db:emphasis>startOffset</db:emphasis>, int *<db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns the text item of type <db:code role="parameter">boundaryType</db:code> that is right after offset <db:code role="parameter">offset</db:code> and sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to the start and end positions of that item; returns an empty string if there is no such an item. Sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to -1 on error.</db:para>
<db:para>This default implementation is provided for small text edits. A word processor or text editor should provide their own efficient implementations. This function makes no distinction between paragraphs and lines.</db:para>
<db:note>
<db:para>this function can not take the cursor position into account. By convention an <db:code role="parameter">offset</db:code> of -2 means that this function should use the cursor position as offset. Thus an offset of -2 must be converted to the cursor position before calling this function. An offset of -1 is used for the text length and custom implementations of this function have to return the result as if the length was passed in as offset.</db:para>
</db:note>
</db:section>
<db:section xml:id="textAtOffset">
<db:title>[virtual] QString QAccessibleTextInterface::textAtOffset(int <db:emphasis>offset</db:emphasis>, QAccessible::TextBoundaryType <db:emphasis>boundaryType</db:emphasis>, int *<db:emphasis>startOffset</db:emphasis>, int *<db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns the text item of type <db:code role="parameter">boundaryType</db:code> at offset <db:code role="parameter">offset</db:code> and sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to the start and end positions of that item; returns an empty string if there is no such an item. Sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to -1 on error.</db:para>
<db:para>This default implementation is provided for small text edits. A word processor or text editor should provide their own efficient implementations. This function makes no distinction between paragraphs and lines.</db:para>
<db:note>
<db:para>this function can not take the cursor position into account. By convention an <db:code role="parameter">offset</db:code> of -2 means that this function should use the cursor position as offset. Thus an offset of -2 must be converted to the cursor position before calling this function. An offset of -1 is used for the text length and custom implementations of this function have to return the result as if the length was passed in as offset.</db:para>
</db:note>
</db:section>
<db:section xml:id="textBeforeOffset">
<db:title>[virtual] QString QAccessibleTextInterface::textBeforeOffset(int <db:emphasis>offset</db:emphasis>, QAccessible::TextBoundaryType <db:emphasis>boundaryType</db:emphasis>, int *<db:emphasis>startOffset</db:emphasis>, int *<db:emphasis>endOffset</db:emphasis>) const</db:title>
<db:para>Returns the text item of type <db:code role="parameter">boundaryType</db:code> that is close to offset <db:code role="parameter">offset</db:code> and sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to the start and end positions of that item; returns an empty string if there is no such an item. Sets <db:code role="parameter">startOffset</db:code> and <db:code role="parameter">endOffset</db:code> values to -1 on error.</db:para>
<db:para>This default implementation is provided for small text edits. A word processor or text editor should provide their own efficient implementations. This function makes no distinction between paragraphs and lines.</db:para>
<db:note>
<db:para>this function can not take the cursor position into account. By convention an <db:code role="parameter">offset</db:code> of -2 means that this function should use the cursor position as offset. Thus an offset of -2 must be converted to the cursor position before calling this function. An offset of -1 is used for the text length and custom implementations of this function have to return the result as if the length was passed in as offset.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
