<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlQueryModel Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> class provides a read-only data model for SQL result sets.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlQueryModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttablemodel.xml" xlink:role="class">QAbstractTableModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsqltablemodel.xml" xlink:role="class">QSqlTableModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlQueryModel is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> is a high-level interface for executing SQL statements and traversing the result set. It is built on top of the lower-level <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> and can be used to provide data to view classes such as <db:link xlink:href="qtableview.xml">QTableView</db:link>. For example:</db:para>
<db:programlisting language="cpp">    QSqlQueryModel *model = new QSqlQueryModel;
    model-&amp;gt;setQuery(&quot;SELECT name, salary FROM employee&quot;);
    model-&amp;gt;setHeaderData(0, Qt::Horizontal, tr(&quot;Name&quot;));
    model-&amp;gt;setHeaderData(1, Qt::Horizontal, tr(&quot;Salary&quot;));
    QTableView *view = new QTableView;
    view-&amp;gt;setModel(model);
    view-&amp;gt;show();
</db:programlisting>
<db:para>We set the model's query, then we set up the labels displayed in the view header.</db:para>
<db:para><db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> can also be used to access a database programmatically, without binding it to a view:</db:para>
<db:programlisting language="cpp">    QSqlQueryModel model;
    model.setQuery(&quot;SELECT name, salary FROM employee&quot;);
    int salary = model.record(4).value(&quot;salary&quot;).toInt();
</db:programlisting>
<db:para>The code snippet above extracts the <db:code>salary</db:code> field from record 4 in the result set of the <db:code>SELECT</db:code> query. Since <db:code>salary</db:code> is the 2nd column (or column index 1), we can rewrite the last line as follows:</db:para>
<db:programlisting language="cpp">    int salary = model.data(model.index(4, 1)).toInt();
</db:programlisting>
<db:para>The model is read-only by default. To make it read-write, you must subclass it and reimplement <db:link xlink:href="qabstractitemmodel.xml#setData">setData</db:link>() and <db:link xlink:href="qabstracttablemodel.xml#flags">flags</db:link>(). Another option is to use <db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link>, which provides a read-write model based on a single database table.</db:para>
<db:para>The <db:link xlink:href="qtsql-querymodel-example.xml">querymodel</db:link> example illustrates how to use <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> to display the result of a query. It also shows how to subclass <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> to customize the contents of the data before showing it to the user, and how to create a read-write model based on <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link>.</db:para>
<db:para>If the database doesn't return the number of selected rows in a query, the model will fetch rows incrementally. See <db:link xlink:href="qsqlquerymodel.xml#fetchMore">fetchMore</db:link>() for more information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqltablemodel.xml">QSqlTableModel</db:link></db:member>
<db:member><db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link></db:member>
<db:member><db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qtsql-querymodel-example.xml">Query Model Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlQueryModel">
<db:title>[explicit] QSqlQueryModel::QSqlQueryModel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSqlQueryModel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlQueryModel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlQueryModel">
<db:title>[virtual] QSqlQueryModel::~QSqlQueryModel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSqlQueryModel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSqlQueryModel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the object and frees any allocated resources.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="canFetchMore">
<db:title>[override virtual] bool QSqlQueryModel::canFetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>canFetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool canFetchMore(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#canFetchMore" role="function">QAbstractItemModel::canFetchMore(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if it is possible to read more rows from the database. This only affects databases that don't report back the size of a query (see <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()).</db:para>
<db:para><db:code role="parameter">parent</db:code> should always be an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#fetchMore">fetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[virtual] void QSqlQueryModel::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the model and releases any acquired resource.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QSqlQueryModel::columnCount(const QModelIndex &amp;<db:emphasis>index</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columnCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>index</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columnCount(const QModelIndex &amp;index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QSqlQueryModel::data(const QModelIndex &amp;<db:emphasis>item</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant data(const QModelIndex &amp;item, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:para>Returns the value for the specified <db:code role="parameter">item</db:code> and <db:code role="parameter">role</db:code>.</db:para>
<db:para>If <db:code role="parameter">item</db:code> is out of bounds or if an error occurred, an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fetchMore">
<db:title>[override virtual] void QSqlQueryModel::fetchMore(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>fetchMore</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fetchMore(const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#fetchMore" role="function">QAbstractItemModel::fetchMore(const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>Fetches more rows from a database. This only affects databases that don't report back the size of a query (see <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()).</db:para>
<db:para>To force fetching of the entire result set, you can use the following:</db:para>
<db:programlisting language="cpp">while (myModel-&amp;gt;canFetchMore())
    myModel-&amp;gt;fetchMore();
</db:programlisting>
<db:para><db:code role="parameter">parent</db:code> should always be an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#canFetchMore">canFetchMore</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QSqlQueryModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>headerData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::DisplayRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant headerData(int section, Qt::Orientation orientation, int role) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:para>Returns the header data for the given <db:code role="parameter">role</db:code> in the <db:code role="parameter">section</db:code> of the header with the specified <db:code role="parameter">orientation</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#setHeaderData">setHeaderData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexInQuery">
<db:title>[virtual protected] QModelIndex QSqlQueryModel::indexInQuery(const QModelIndex &amp;<db:emphasis>item</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QModelIndex</db:type>
<db:methodname>indexInQuery</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex indexInQuery(const QModelIndex &amp;item) const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the index of the value in the database result set for the given <db:code role="parameter">item</db:code> in the model.</db:para>
<db:para>The return value is identical to <db:code role="parameter">item</db:code> if no columns or rows have been inserted, removed, or moved around.</db:para>
<db:para>Returns an invalid model index if <db:code role="parameter">item</db:code> is out of bounds or if <db:code role="parameter">item</db:code> does not point to a value in the result set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqltablemodel.xml#indexInQuery">QSqlTableModel::indexInQuery</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#insertColumns">insertColumns</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#removeColumns">removeColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertColumns">
<db:title>[override virtual] bool QSqlQueryModel::insertColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>insertColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool insertColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#insertColumns" role="function">QAbstractItemModel::insertColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>Inserts <db:code role="parameter">count</db:code> columns into the model at position <db:code role="parameter">column</db:code>. The <db:code role="parameter">parent</db:code> parameter must always be an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>, since the model does not support parent-child relationships.</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">column</db:code> is within bounds; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>By default, inserted columns are empty. To fill them with data, reimplement <db:link xlink:href="qsqlquerymodel.xml#data">data</db:link>() and handle any inserted column separately:</db:para>
<db:programlisting language="cpp">QVariant MyModel::data(const QModelIndex &amp;amp;item, int role) const
{
    if (item.column() == m_specialColumnNo) {
        // handle column separately
    }
    return QSqlQueryModel::data(item, role);
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#removeColumns">removeColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lastError">
<db:title>QSqlError QSqlQueryModel::lastError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlError</db:type>
<db:methodname>lastError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlError lastError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns information about the last error that occurred on the database.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#setLastError">setLastError</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#query">query</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="query">
<db:title>const QSqlQuery &amp;QSqlQueryModel::query() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSqlQuery &amp;</db:type>
<db:methodname>query</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSqlQuery &amp; query() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the const <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link> object associated with this model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#setQuery">setQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queryChange">
<db:title>[virtual protected] void QSqlQueryModel::queryChange()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>queryChange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void queryChange()</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This virtual function is called whenever the query changes. The default implementation does nothing.</db:para>
<db:para><db:link xlink:href="qsqlquerymodel.xml#query">query</db:link>() returns the new query.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#query">query</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#setQuery">setQuery</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="record">
<db:title>QSqlRecord QSqlQueryModel::record(int <db:emphasis>row</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlRecord</db:type>
<db:methodname>record</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRecord record(int row) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the record containing information about the fields of the current query. If <db:code role="parameter">row</db:code> is the index of a valid row, the record will be populated with values from that row.</db:para>
<db:para>If the model is not initialized, an empty record will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isEmpty">QSqlRecord::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="record-1">
<db:title>QSqlRecord QSqlQueryModel::record() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSqlRecord</db:type>
<db:methodname>record</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSqlRecord record() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns an empty record containing information about the fields of the current query.</db:para>
<db:para>If the model is not initialized, an empty record will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isEmpty">QSqlRecord::isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeColumns">
<db:title>[override virtual] bool QSqlQueryModel::removeColumns(int <db:emphasis>column</db:emphasis>, int <db:emphasis>count</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeColumns</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeColumns(int column, int count, const QModelIndex &amp;parent) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#removeColumns" role="function">QAbstractItemModel::removeColumns(int column, int count, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>Removes <db:code role="parameter">count</db:code> columns from the model starting from position <db:code role="parameter">column</db:code>. The <db:code role="parameter">parent</db:code> parameter must always be an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>, since the model does not support parent-child relationships.</db:para>
<db:para>Removing columns effectively hides them. It does not affect the underlying <db:link xlink:href="qsqlquery.xml">QSqlQuery</db:link>.</db:para>
<db:para>Returns <db:code>true</db:code> if the columns were removed; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="roleNames">
<db:title>[override virtual] QHash&lt;int, QByteArray&gt; QSqlQueryModel::roleNames() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;int, QByteArray&gt;</db:type>
<db:methodname>roleNames</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;int, QByteArray&gt; roleNames() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#roleNames" role="function">QAbstractItemModel::roleNames() const</db:link>.</db:para>
<db:para>Returns the model's role names.</db:para>
<db:para>Qt defines only one role for the <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Qt Role</db:para>
</db:th>
<db:th>
<db:para>QML Role Name</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::DisplayRole</db:link></db:para>
</db:td>
<db:td>
<db:para>display</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QSqlQueryModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>rowCount</db:methodname>
<db:methodparam>
<db:type>const QModelIndex &amp;</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>QModelIndex()</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int rowCount(const QModelIndex &amp;parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>If the database supports returning the size of a query (see <db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()), the number of rows of the current query is returned. Otherwise, returns the number of rows currently cached on the client.</db:para>
<db:para><db:code role="parameter">parent</db:code> should always be an invalid <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#canFetchMore">canFetchMore</db:link>()</db:member>
<db:member><db:link xlink:href="qsqldriver.xml#hasFeature">QSqlDriver::hasFeature</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderData">
<db:title>[override virtual] bool QSqlQueryModel::setHeaderData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>setHeaderData</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>section</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>role</db:parameter>
<db:initializer>Qt::EditRole</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setHeaderData" role="function">QAbstractItemModel::setHeaderData(int section, Qt::Orientation orientation, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:para>Sets the caption for a horizontal header for the specified <db:code role="parameter">role</db:code> to <db:code role="parameter">value</db:code>. This is useful if the model is used to display data in a view (e.g., <db:link xlink:href="qtableview.xml">QTableView</db:link>).</db:para>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">orientation</db:code> is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> and the <db:code role="parameter">section</db:code> refers to a valid section; otherwise returns false.</db:para>
<db:para>Note that this function cannot be used to modify values in the database since the model is read-only.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#headerData">headerData</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLastError">
<db:title>[protected] void QSqlQueryModel::setLastError(const QSqlError &amp;<db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLastError</db:methodname>
<db:methodparam>
<db:type>const QSqlError &amp;</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLastError(const QSqlError &amp;error)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Protected function which allows derived classes to set the value of the last error that occurred on the database to <db:code role="parameter">error</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuery">
<db:title>[since 6.2] void QSqlQueryModel::setQuery(QSqlQuery &amp;&amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuery</db:methodname>
<db:methodparam>
<db:type>QSqlQuery &amp;&amp;</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuery(QSqlQuery &amp;&amp;query)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the model and sets the data provider to be the given <db:code role="parameter">query</db:code>. Note that the query must be active and must not be isForwardOnly().</db:para>
<db:para><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>() can be used to retrieve verbose information if there was an error setting the query.</db:para>
<db:note>
<db:para>Calling setQuery() will remove any inserted columns.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#query">query</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#isActive">QSqlQuery::isActive</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#setForwardOnly">QSqlQuery::setForwardOnly</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuery-2">
<db:title>void QSqlQueryModel::setQuery(const QString &amp;<db:emphasis>query</db:emphasis>, const QSqlDatabase &amp;<db:emphasis>db</db:emphasis> = QSqlDatabase())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuery</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSqlDatabase &amp;</db:type>
<db:parameter>db</db:parameter>
<db:initializer>QSqlDatabase()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuery(const QString &amp;query, const QSqlDatabase &amp;db)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Executes the query <db:code role="parameter">query</db:code> for the given database connection <db:code role="parameter">db</db:code>. If no database (or an invalid database) is specified, the default connection is used.</db:para>
<db:para><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>() can be used to retrieve verbose information if there was an error setting the query.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSqlQueryModel model;
model.setQuery(&quot;select * from MyTable&quot;);
if (model.lastError().isValid())
    qDebug() &amp;lt;&amp;lt; model.lastError();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlquerymodel.xml#query">query</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#queryChange">queryChange</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquerymodel.xml#lastError">lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QSqlQueryModel</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="setQuery-1">
<db:title>void QSqlQueryModel::setQuery(const QSqlQuery &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setQuery</db:methodname>
<db:methodparam>
<db:type>const QSqlQuery &amp;</db:type>
<db:parameter>query</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setQuery(const QSqlQuery &amp;query)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>Use the <db:code>setQuery(QSqlQuery &amp;&amp;query)</db:code> overload instead.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
