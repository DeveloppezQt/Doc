<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building a monolith project</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-qt-8155p-on-ubuntu.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Building Qt for Qualcomm Snapdragon 8155P Board on Ubuntu"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-flash-image-and-run.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Flashing and Running an Image on the 8155P"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This tutorial will guide you through building a monolith INTEGRITY project for a Qt example application. You can select any Qt example application that uses the <db:link xlink:href="wasm.xml#supported-qt-modules">Supported Qt modules</db:link>.</db:para>
<db:para>Before building the monolith INTEGRITY project, prepare your build environment by running the setEnvironment.sh script. For more information about the script, see <db:link xlink:href="integrity-building-qt-8155p-on-ubuntu.xml#creating-a-set-environment-shell-script">Creating a set environment shell script</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">source ~/setEnvironment.sh
</db:programlisting>
<db:section xml:id="building-the-qt-application">
<db:title>Building the Qt application</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>CMake tool</db:para>
<db:para>To build the application against Qt6 using CMake, run the following commands in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt installation path&amp;gt;/bin/qt-cmake &amp;lt;Qt example application path&amp;gt;/CMakeLists.txt
cmake --build .
</db:programlisting>
<db:para>Where, qt-cmake is the wrapper script that calls CMake to configure your project with appropriate include paths.</db:para>
</db:listitem>
<db:listitem>
<db:para>qmake tool</db:para>
<db:para>To build the application against Qt6 using qmake, run the following commands in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt installation path&amp;gt;/bin/qmake &amp;lt;Qt example application path&amp;gt;/application.pro
make
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="building-a-monolith-project">
<db:title>Building a monolith project</db:title>
<db:para>The board support package (BSP) for the Qualcomm Snapdragon 8155P board provides a build script to create a set of images for board partitions:</db:para>
<db:programlisting language="cpp" role="bad">/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/build_ghs.sh
</db:programlisting>
<db:para>Add a Qt application to a build by adding it into the <db:emphasis>monolith-service.int</db:emphasis> file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Start MULTI Launcher.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Components</db:guilabel> &gt; <db:guilabel>Open Project Manager</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select the project file <db:emphasis>default.gpj</db:emphasis> under the <db:emphasis>/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp</db:emphasis> directory:</db:para>
<db:mediaobject>
<db:alt>&quot;Select a project.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/open-project.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>MULTI application shows a window with a list of project files from the chosen folder.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Open</db:guilabel>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In the MULTI Project Manager view, you should see a tree structure of the opened project.</db:para>
<db:para>Go through the default.gpj sub projects:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Select <db:emphasis>target.auto</db:emphasis> <db:emphasis>vmm-adp-no-gvm-sa8155.gpj</db:emphasis> &gt; <db:emphasis>vvm-adp-gvm-ref.gpj</db:emphasis> &gt; <db:emphasis>monolith-service.gpj</db:emphasis>. You can observe the project structure and edit a project's files.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:emphasis>monolith-service.int</db:emphasis></db:para>
<db:mediaobject>
<db:alt>&quot;Project tree.&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/project-structure.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Selected <db:emphasis>monolith-service.int</db:emphasis> file is highlighted in the project tree.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-click on the file, then select <db:guilabel>Edit</db:guilabel> from the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the following lines at the end of the file.</db:para>
<db:programlisting language="cpp" role="bad">AddressSpace
Name    myappname
Filename    /path/to/your/app/executable
MemoryPoolSize 0x2700000
Language    C++
HeapSize    0x90000

Task Initial
StackSize    0x80000
StartIt    false
EndTask
Extendedmemorypoolsize 0x300000
EndAddressSpace
</db:programlisting>
<db:note>
<db:para>Replace &lt;/path/to/your/app/executable&gt; with a path to your application executable.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Run the build script.</db:para>
<db:programlisting language="cpp" role="bad">bash /work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/build_ghs.sh
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>Your monolith project is now ready to be flashed on to the board.</db:para>
</db:section>
</db:article>
