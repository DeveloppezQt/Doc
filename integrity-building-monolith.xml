<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building Monolith Project</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-qt-for-imx6quad-board.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Building Qt for i.MX6 Quad Board"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-u-boot-image.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building U-Boot Image"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this tutorial, we build a monolith INTEGRITY project for a Qt example application. You can select any Qt example application that uses the <db:link xlink:href="qtwebassembly-platform-notes.xml#supported-qt-modules">supported Qt modules</db:link>.</db:para>
<db:para>Before you can build a monolith INTEGRITY project, you need to prepare your build environment for the qmake build tool. You can do this by running the script <db:emphasis>~/setEnvironment.sh</db:emphasis> that you created in <db:link xlink:href="integrity-building-qt-for-imx6quad-board.xml#creating-script-for-running-exports">Creating Script for Running Exports</db:link>.</db:para>
<db:para>Run the following commands in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">source ~/setEnvironment.sh
&amp;lt;Qt installation path&amp;gt;/qtbase/bin/qmake &amp;lt;Qt example application path&amp;gt;/&amp;lt;projectname&amp;gt;.pro
make
</db:programlisting>
<db:para>The qmake tool must be called under the Qt installation path (&lt;Qt installation path&gt;), where you installed the Qt sources in <db:link xlink:href="integrity-building-qt-for-imx6quad-board.xml#getting-qt-source-code">Getting Qt Source Code</db:link>.</db:para>
<db:para>&lt;Qt example application path&gt;/&lt;projectname&gt;.pro is the installation path of the Qt example application project file that the monolith INTEGRITY project will be built for.</db:para>
<db:section xml:id="building-monolith-project">
<db:title>Building Monolith Project</db:title>
<db:para>To build a monolith INTEGRITY project, create an empty directory for your project in your home folder. In the steps below, we use the directory name <db:emphasis>mymonolith</db:emphasis>.</db:para>
<db:section xml:id="defining-project-with-project-wizard">
<db:title>Defining Project with Project Wizard</db:title>
<db:para>Launch MULTI Launcher and select <db:guilabel>File</db:guilabel> &gt; <db:guilabel>Create New Project</db:guilabel>. Define your monolith project with Project Wizard:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>In the <db:guilabel>Project name</db:guilabel> tab, fill in the <db:guilabel>Directory</db:guilabel> field with the directory you just created.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Operating System</db:guilabel> tab, select <db:emphasis>INTEGRITY</db:emphasis> from the <db:guilabel>Operating System</db:guilabel> list.</db:para>
<db:note>
<db:para>The <db:guilabel>OS Distribution Directory</db:guilabel> field must contain your INTEGRITY installation directory (in our example, <db:emphasis>mymonolith</db:emphasis>).</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Processor Family</db:guilabel> tab, select <db:guilabel>ARM</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Target Board</db:guilabel> tab, select <db:guilabel>ARM Cortex-A9 Platform </db:guilabel> from the target board list.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Finish</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
<db:informalfigure>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/project-wizard.png"/>
</db:imageobject>
</db:mediaobject>
</db:informalfigure>
<db:para>After selecting <db:guilabel>Finish</db:guilabel> in Project Wizard, Project Manager is opened.</db:para>
</db:section>
<db:section xml:id="project-manager-settings">
<db:title>Project Manager Settings</db:title>
<db:para>With Project Manager you can define the settings for the monolith project:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>In the <db:guilabel>Select Item to Add</db:guilabel> dialog page, select <db:guilabel>Monolith</db:guilabel> from the <db:guilabel>Create New</db:guilabel> list.</db:para>
<db:informalfigure>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/select-item-to-add.png"/>
</db:imageobject>
</db:mediaobject>
</db:informalfigure>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for Monolith</db:guilabel> dialog, define the settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:guilabel>Source Code Directory</db:guilabel> is your project directory (in our example, <db:emphasis>mymonolith</db:emphasis>).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Project Name</db:guilabel> is the name of your project. In our example, we use the name <db:emphasis>myproject</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Language</db:guilabel> must be <db:guilabel>C</db:guilabel>. The Qt projects are C++ projects, but this will be configured later.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Use Shared Libraries</db:guilabel> should not be selected.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Configure number of Virtual AddressSpaces</db:guilabel> dialog page, select the checkbox <db:guilabel>Names of Virtual Address Spaces</db:guilabel> and type <db:emphasis>galcore</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for Kernel</db:guilabel> dialog page, type the name of your kernel.</db:para>
</db:listitem>
<db:listitem>
    <db:para>Select <db:guilabel>Debugging</db:guilabel>, <db:guilabel>Dynamic Load</db:guilabel> and <db:guilabel>ResourceManager</db:guilabel> from the <db:guilabel>Kernel Libraries</db:guilabel> list.</db:para><db:informalfigure>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/kernel-settings.png"/>
</db:imageobject>
</db:mediaobject>
</db:informalfigure>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for OS Module Selection</db:guilabel> dialog page, select <db:guilabel>File System (User Configured)</db:guilabel> and <db:guilabel>GHnet IPv4 Stack (Virtual)</db:guilabel> from the <db:guilabel>OS Module</db:guilabel> list.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for File System (User Configured)</db:guilabel> dialog page, select a filesystem that your monolith project supports.</db:para>
<db:para>In our example, we have selected <db:guilabel>MSDOS FAT</db:guilabel> from the <db:guilabel>Libraries</db:guilabel> list.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Finish</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for Add File System Clients</db:guilabel> dialog page, select <db:guilabel>Finish</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="adding-file-system-mount-point">
<db:title>Adding File System Mount Point</db:title>
<db:para>You need to configure the file system to use the first partition of the micro SD card. In the MULTI Project Manager view, you see a tree structure of your monolith project:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Right-click the file <db:emphasis>mounttable.c</db:emphasis> to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Modify Project</db:guilabel> &gt; <db:guilabel>Add INTEGRITY File System Mount Point</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Settings for FS MountPoint</db:guilabel> dialog, define the settings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Type <db:emphasis>/</db:emphasis> to <db:guilabel>Mount Directory</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>File System Type</db:guilabel> is <db:emphasis>MSDOS FAT</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Next</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select the <db:guilabel>Use Physical Device</db:guilabel> radio button.</db:para>
</db:listitem>
<db:listitem>
<db:para>Type <db:emphasis>SDCardDev1</db:emphasis> to the <db:guilabel>Device</db:guilabel> field.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>Slice</db:guilabel> is <db:emphasis>a</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Finish</db:guilabel>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="galcore-vas-settings">
<db:title>Galcore VAS Settings</db:title>
<db:para>Next, define the virtual address space (VAS) settings for your project.</db:para>
<db:para>In the MULTI Project Manager view, you see a tree structure of your monolith project:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Double-click the .int file in your project (1) (in the steps below, <db:emphasis>myproject.int</db:emphasis>).</db:para>
</db:listitem>
<db:listitem>
<db:para>In the opened window, double-click the galcore virtual address space (VAS) area (2).</db:para>
<db:informalfigure>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/project-view.png"/>
</db:imageobject>
</db:mediaobject>
</db:informalfigure>
</db:listitem>
<db:listitem>
<db:para><db:guilabel>VirtualAddressSpace Options</db:guilabel> dialog is opened.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:guilabel>Attributes</db:guilabel> tab, select the values defined in <db:link xlink:href="integrity-building-monolith.xml#values-in-attributes-tab">Values in Attributes Tab</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>OK</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the galcore virtual address space area, double-click the <db:guilabel>Task Initial</db:guilabel> area (3).</db:para>
    <db:informalfigure>
        <db:mediaobject>
            <db:imageobject>
                <db:imagedata fileref="images/project-view-2.png"/>
            </db:imageobject>
        </db:mediaobject>
    </db:informalfigure>
</db:listitem>
<db:listitem>
<db:para>Select the <db:guilabel>Start Automatically</db:guilabel> check box.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>OK</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
<db:section xml:id="values-in-attributes-tab">
<db:title>Values in Attributes Tab</db:title>
<db:para>Add the following attribute values for the virtual address space:</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Attribute</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Maximum Priority</db:para>
</db:td>
<db:td>
<db:para>255</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Maximum Weight</db:para>
</db:td>
<db:td>
<db:para>255</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Memory Pool Size</db:para>
</db:td>
<db:td>
<db:para>2000P</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Heap Size</db:para>
</db:td>
<db:td>
<db:para>0X2000000</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Heap Extension Reserved Size</db:para>
</db:td>
<db:td>
<db:para>0x20000</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Arguments</db:para>
</db:td>
<db:td>
<db:para>Leave blank.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable style="">
<db:thead>
<db:tr>
<db:th>
<db:para>Checkbox</db:para>
</db:th>
<db:th>
<db:para>Value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Create Extra Virtual Memory Regions</db:para>
</db:td>
<db:td>
<db:para>Select the checkbox.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="editing-galcore-project">
<db:title>Editing Galcore Project</db:title>
<db:para>You need to edit a number of files in the monolith project.</db:para>
<db:section xml:id="file-galcore-c">
<db:title>File galcore.c</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select <db:emphasis>galcore.c</db:emphasis> from the tree structure in the MULTI Project Manager view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Double-click the file to open it for editing.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the following code to <db:emphasis>galcore.c</db:emphasis>:</db:para>
<db:programlisting language="cpp" role="bad">#include &amp;lt;INTEGRITY.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
extern Error GalCore_TaskInit(void);
int main(void) {
    Error E;
    E = GalCore_TaskInit();
    if (E != Success) {
        printf(&quot;Failed to start GalCore tasks\n&quot;);
    }
    Exit(0);
}
</db:programlisting>
</db:listitem>
</db:orderedlist>
</db:section>
<db:section xml:id="file-galcore-gpj">
<db:title>File galcore.gpj</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select <db:emphasis>galcore.gpj</db:emphasis> from the tree structure in the MULTI Project Manager view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-click the file to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Edit</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the file <db:emphasis>libgalcore.a</db:emphasis> to <db:emphasis>galcore.gpj</db:emphasis>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Contents of <db:emphasis>galcore.gpj</db:emphasis> should be as follows:</db:para>
<db:programlisting language="cpp" role="bad">#!gbuild
#component integrity_virtual_address_space
[Program]
    -lgalcore
tgt/INTEGRITY.ld
galcore.c
</db:programlisting>
</db:section>
<db:section xml:id="file-kernel-gpj">
<db:title>File kernel.gpj</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select <db:emphasis>kernel.gpj</db:emphasis> from the tree structure in the MULTI Project Manager view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-click the file to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Edit</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the file <db:emphasis>libgalcore-iod.a</db:emphasis> to <db:emphasis>kernel.gpj</db:emphasis>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Contents of <db:emphasis>kernel.gpj</db:emphasis> should be as follows:</db:para>
<db:programlisting language="cpp" role="bad">#!gbuild
#component integrity_kernel_monolith
[Program]
    -kernel
    -ldebug
    -lload
    -lres
    -lgalcore-iod
tgt/default.ld
myproject_kernel.c
global_table.c
</db:programlisting>
</db:section>
<db:section xml:id="file-monolith-gpj">
<db:title>File monolith.gpj</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select <db:emphasis>monolith.gpj</db:emphasis> from the tree structure in the MULTI Project Manager view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Righ-click the file to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Edit</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the additional library directory <db:emphasis>$(__LIBS_DIR_BASE)/Vivante</db:emphasis>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Contents of <db:emphasis>monolith.gpj</db:emphasis> should be as follows:</db:para>
<db:programlisting language="cpp" role="bad">#!gbuild
#component integrity_monolith
[INTEGRITY Application]
    -non_shared
   -I$__OS_DIR/modules/ghs/ghnet2/source/kernel/integrity/ip4server :sourceDir=$__OS_DIR/modules/ghs/ghnet2/source/kernel/integrity/ip4server
   -L$(__LIBS_DIR_BASE)/Vivante
tgt/default.bsp
myproject.int
galcore.gpj [Program]
myproject_kernel.gpj [Program]
my_ivfsserver_module.gpj [Program]
ip4server_module.gpj [Program]
</db:programlisting>
</db:section>
<db:section xml:id="int-file">
<db:title>.int File</db:title>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Select the <db:emphasis>.int</db:emphasis> file of your project from the tree structure in the MULTI Project Manager view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Right-click the file to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Edit</db:guilabel>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add the following lines at the end of the file.</db:para>
<db:note>
<db:para>Replace &lt;/path/to/your/app/executable&gt; with a path to your application executable.</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">AddressSpace
    Name    myappname
    Filename    /path/to/your/app/executable
    MemoryPoolSize 0x2000000
    Language    C++
    HeapSize    0x6000000

    Task Initial
        StackSize    0x30000
        StartIt    true
    EndTask
    HeapExtensionReservedSize    0x2000000
EndAddressSpace
</db:programlisting>
</db:listitem>
</db:orderedlist>
</db:section>
</db:section>
<db:section xml:id="building-monolith-gpj">
<db:title>Building monolith.gpj</db:title>
<db:para>Open <db:emphasis>monolith.gpj</db:emphasis> from the tree structure in the MULTI Project Manager view. To build the project:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Right-click <db:emphasis>monolith.gpj</db:emphasis> to open the context menu.</db:para>
</db:listitem>
<db:listitem>
<db:para>Select <db:guilabel>Build</db:guilabel>.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Your monolith project is now ready to be packaged for U-Boot.</db:para>
</db:section>
</db:section>
</db:article>
