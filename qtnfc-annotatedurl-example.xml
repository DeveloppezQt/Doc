<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Annotated URL Example</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An example showing reading from formatted NFC Data Exchange Format (NDEF) messages.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Annotated URL example displays the contents of specifically formatted NFC Data Exchange Format (NDEF) messages read from an NFC Tag. The NDEF message should contain a URI record, an optional <db:code>image/*</db:code> MIME record, and one or more localized Text records.</db:para>
<db:para>This is the initial state of the example:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/annotatedurl.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In this example the NFC Tag used contains a text record. The UI gets updated accordingly to:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/annotatedurl2.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="annotatedurl-class-definition">
<db:title>AnnotatedUrl Class Definition</db:title>
<db:para>The <db:code>AnnotatedUrl</db:code> class wraps the <db:code>QNearFieldManager</db:code>, the class providing the NFC Tag detection functionality. NDEF messages are read by the <db:link xlink:href="qnearfieldmanager.xml">QNearFieldManager</db:link> and forwarded to a handler contained in the <db:code>AnnotatedUrl</db:code> class. After parsing the NDEF message the class emits the signal AnnotatedUrl::annotatedUrl(const <db:link xlink:href="qurl.xml">QUrl</db:link> &amp;url, const <db:link xlink:href="qstring.xml">QString</db:link> &amp;title, const <db:link xlink:href="qpixmap.xml">QPixmap</db:link> &amp;pixmap). The UI reacts to the signal displaying the contents of the NDEF message.</db:para>
<db:programlisting language="cpp">class AnnotatedUrl : public QObject
{
    Q_OBJECT

public:
    explicit AnnotatedUrl(QObject *parent = 0);
    ~AnnotatedUrl();

signals:
    void annotatedUrl(const QUrl &amp;amp;url, const QString &amp;amp;title, const QPixmap &amp;amp;pixmap);

public slots:
    void targetDetected(QNearFieldTarget *target);
    void targetLost(QNearFieldTarget *target);
    void handleMessage(const QNdefMessage &amp;amp;message, QNearFieldTarget *target);
    void handlePolledNdefMessage(QNdefMessage message);
private:
    QNearFieldManager *manager;
};
</db:programlisting>
</db:section>
<db:section xml:id="annotatedurl-handler-implementation">
<db:title>AnnotatedUrl Handler Implementation</db:title>
<db:para>NFC messages read by the <db:code>QNearFieldManager</db:code> are forwarded to AnnotatedUrl::handleMessage. The callback signature details can be read in <db:link xlink:href="qnearfieldmanager.xml#registerNdefMessageHandler">QNearFieldManager::registerNdefMessageHandler</db:link>.</db:para>
<db:programlisting language="cpp">void AnnotatedUrl::handleMessage(const QNdefMessage &amp;amp;message, QNearFieldTarget *target)
{
</db:programlisting>
<db:para>Because NFC messages are composed of several NDEF records, looping through all of the records allows the extraction of the 3 parameters to be displayed in the UI: the Uri, the Title and the Pixmap:</db:para>
<db:programlisting language="cpp">    for (const QNdefRecord &amp;amp;record : message) {
        if (record.isRecordType&amp;lt;QNdefNfcTextRecord&amp;gt;()) {
            QNdefNfcTextRecord textRecord(record);

            title = textRecord.text();
            QLocale locale(textRecord.locale());
        } else if (record.isRecordType&amp;lt;QNdefNfcUriRecord&amp;gt;()) {
            QNdefNfcUriRecord uriRecord(record);

            url = uriRecord.uri();
        } else if (record.typeNameFormat() == QNdefRecord::Mime &amp;amp;&amp;amp;
                   record.type().startsWith(&quot;image/&quot;)) {
            pixmap = QPixmap::fromImage(QImage::fromData(record.payload()));
        }
</db:programlisting>
<db:para>Finally after having extracted the parameters of the NFC message the corresponding signal is emitted so that the UI can handle it.</db:para>
<db:programlisting language="cpp">    }

    emit annotatedUrl(url, title, pixmap);
}
</db:programlisting>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtconnectivity.git/tree/examples/nfc/annotatedurl?h=5.15">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtnfc-index.xml">Qt NFC</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
