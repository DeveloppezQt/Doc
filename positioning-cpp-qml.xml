<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Interfaces between C++ and QML Code in Qt Positioning</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Some of the providing <db:link xlink:href="qtpositioning-module.xml">QtPositioning</db:link> QML types providing interfaces to access and modify properties in C++.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Depending on the type of C++ class <db:link xlink:href="qtpositioning-module.xml">QtPositioning</db:link> utilizes two methods to simplify exchange of position data between C++ and QML code.</db:para>
<db:anchor xml:id="cpp-value-integration-positioning"/>
</db:section>
<db:section xml:id="direct-c-value-integration-in-qtpositioning">
<db:title>Direct C++ Value Integration in QtPositioning</db:title>
<db:para>Starting with Qt 5.5, it has become much easier to integrate non-<db:link xlink:href="qobject.xml">QObject</db:link> based data types into QML. This is achieved by adding <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> support to <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link>. The macro converts classes into a light-weight version of a <db:link xlink:href="qobject.xml">QObject</db:link> without the required <db:link xlink:href="qobject.xml">QObject</db:link> inheritance. At the same time it retains the reflection capabilities of <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. As a result they can be directly exposed to QML and do not require any further wrapper classes.</db:para>
<db:para>A significant number of Position and Location related data types were converted to Q_GADGETs. They retain their API and value type character but have become introspectable via <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. This conversion was done to the following classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeocircle.xml">QGeoCircle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeorectangle.xml">QGeoRectangle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeoshape.xml">QGeoShape</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Using <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> as an example, the C++ types are directly exposed to the QML environment via its meta type:</db:para>
<db:programlisting language="cpp">qRegisterMetaType&amp;lt;QGeoCoordinate&amp;gt;();
QMetaType::registerEqualsComparator&amp;lt;QGeoCoordinate&amp;gt;();
</db:programlisting>
<db:para>The above registration of <db:link xlink:href="qgeocoordinate.xml">QGeoCoordinate</db:link> is automatically done once by the <db:link xlink:href="qtpositioning-module.xml">QtPositioning</db:link> QML plugin. The <db:link xlink:href="qtlocation-planespotter-example.xml">Plane Spotter</db:link> example demonstrates this feature.</db:para>
</db:section>
<db:section xml:id="qvariant-based-integration">
<db:title>QVariant Based integration</db:title>
<db:para>This section provides information on how to integrate <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> and <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link>.</db:para>
<db:section xml:id="address-qgeoaddress">
<db:title>Address - QGeoAddress</db:title>
<db:para>The <db:link xlink:href="qml-qtpositioning-address.xml#address-prop">Address.address</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Address object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>address</db:code> property. The following gets the <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp"> QGeoAddress geoAddress = qmlObject-&amp;gt;property(&quot;address&quot;).value&amp;lt;QGeoAddress&amp;gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&amp;gt;setProperty(&quot;address&quot;, QVariant::fromValue(geoAddress));
</db:programlisting>
</db:section>
<db:section xml:id="location-qgeolocation">
<db:title>Location - QGeoLocation</db:title>
<db:para>The <db:link xlink:href="qml-qtpositioning-location.xml#location-prop">Location.location</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a Location object must be obtained from C++, then use the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions to get and set the <db:code>location</db:code> property. The following gets the <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> representing this object from C++:</db:para>
<db:programlisting language="cpp">QGeoLocation geoLocation = qmlObject-&amp;gt;property(&quot;location&quot;).value&amp;lt;QGeoLocation&amp;gt;();
</db:programlisting>
<db:para>The following sets the properties of this object based on a <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&amp;gt;setProperty(&quot;location&quot;, QVariant::fromValue(geoLocation));
</db:programlisting>
</db:section>
</db:section>
</db:article>
