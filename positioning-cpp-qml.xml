<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Interfaces between C++ and QML Code in Qt Positioning</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Describes the methods used to exchange position data between C++ and QML code.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>Qt Positioning utilizes two methods to simplify exchange of position data between C++ and QML code.</db:para>
<db:anchor xml:id="cpp-value-integration-positioning"/>
</db:section>
<db:section xml:id="direct-c-value-integration-in-qtpositioning">
<db:title>Direct C++ Value Integration in QtPositioning</db:title>
<db:para>Starting with Qt 5.5, it has become much easier to integrate non-<db:link xlink:href="qobject.xml">QObject</db:link> based data types into QML. This is achieved by adding <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link> support to <db:link xlink:href="qtqml-module.xml">QtQml</db:link>. The macro converts classes into a light-weight version of a <db:link xlink:href="qobject.xml">QObject</db:link> without the required <db:link xlink:href="qobject.xml">QObject</db:link> inheritance. At the same time, it retains the reflection capabilities of <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>. As a result, they can be directly exposed to QML.</db:para>
<db:para>A significant number of Position related data types were converted to <db:link xlink:href="qobject.xml#Q_GADGET">Q_GADGET</db:link>s. They retain their API and value type character but have become introspectable via <db:link xlink:href="qmetaobject.xml">QMetaObject</db:link>.</db:para>
<db:para>The <db:link xlink:href="qqmlengine.xml#QML_ANONYMOUS">QML_ANONYMOUS</db:link> macro is used to expose these types to the QML environment. See the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> documentation for more details and the full list of available macros.</db:para>
<db:para>The classes, however, are not directly extended with this macro, because we do not want Qt Positioning to depend on <db:link xlink:href="qtqml-module.xml">QtQml</db:link>. So a helper class is created for each of them, and the <db:link xlink:href="qqmlengine.xml#QML_FOREIGN">QML_FOREIGN</db:link> macro is used:</db:para>
<db:programlisting language="cpp">struct QGeoCoordinateForeign
{
    Q_GADGET
    QML_FOREIGN(QGeoCoordinate)
    QML_ANONYMOUS
    QML_ADDED_IN_VERSION(5, 0)
};
</db:programlisting>
<db:para>The above registration of Positioning types is automatically done once by the <db:link xlink:href="qml-qtpositioning-qtpositioning.xml">QtPositioning</db:link> QML plugin.</db:para>
</db:section>
<db:section xml:id="qvariant-based-integration">
<db:title>QVariant Based integration</db:title>
<db:para>This section provides information on how to integrate <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> and <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link>.</db:para>
<db:section xml:id="address-qgeoaddress">
<db:title>Address - QGeoAddress</db:title>
<db:para>The <db:link xlink:href="qml-qtpositioning-address.xml#address-prop">Address.address</db:link> property is used to provide an interface between C++ and QML code. First a pointer to an <db:link xlink:href="qml-qtpositioning-address.xml">Address</db:link> object must be obtained from C++, then the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions must be used to get and set the <db:code>address</db:code> property.</db:para>
<db:para>The following piece of code gets the <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> object from C++:</db:para>
<db:programlisting language="cpp"> QGeoAddress geoAddress = qmlObject-&amp;gt;property(&quot;address&quot;).value&amp;lt;QGeoAddress&amp;gt;();
</db:programlisting>
<db:para>The following piece of code sets the address property of the QML object based on a <db:link xlink:href="qgeoaddress.xml">QGeoAddress</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&amp;gt;setProperty(&quot;address&quot;, QVariant::fromValue(geoAddress));
</db:programlisting>
</db:section>
<db:section xml:id="location-qgeolocation">
<db:title>Location - QGeoLocation</db:title>
<db:para>The <db:link xlink:href="qml-qtpositioning-location.xml#location-prop">Location.location</db:link> property is used to provide an interface between C++ and QML code. First a pointer to a <db:link xlink:href="qml-qtpositioning-location.xml">Location</db:link> object must be obtained from C++, then the <db:link xlink:href="qobject.xml#property">property</db:link>() and <db:link xlink:href="qobject.xml#setProperty">setProperty</db:link>() functions must be used to get and set the <db:code>location</db:code> property.</db:para>
<db:para>The following piece of code gets the <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> object from C++:</db:para>
<db:programlisting language="cpp">QGeoLocation geoLocation = qmlObject-&amp;gt;property(&quot;location&quot;).value&amp;lt;QGeoLocation&amp;gt;();
</db:programlisting>
<db:para>The following piece of code sets the location property of the QML object based on a <db:link xlink:href="qgeolocation.xml">QGeoLocation</db:link> object from C++:</db:para>
<db:programlisting language="cpp">qmlObject-&amp;gt;setProperty(&quot;location&quot;, QVariant::fromValue(geoLocation));
</db:programlisting>
</db:section>
</db:section>
</db:article>
