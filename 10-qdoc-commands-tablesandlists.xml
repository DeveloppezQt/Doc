<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Tables and Lists</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="09-qdoc-commands-includingimages.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Including Images"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="11-qdoc-commands-specialcontent.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Special Content"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>QDoc Manual</db:para>
<db:para>These commands enable creating lists and tables. A list is rendered left aligned as a separate paragraph. A table is rendered centered as a separate paragraph. The table width depends on the width of its contents.</db:para>
<db:anchor xml:id="table-command"/>
<db:section xml:id="table">
<db:title>\table</db:title>
<db:para>The \table and \endtable commands delimit the contents of a table.</db:para>
<db:para>The command accepts a single argument specifying the table's width as a percentage of the page width:</db:para>
<db:programlisting language="cpp">/ *!
    \table 100 %

       ...

    \endtable
* /
</db:programlisting>
<db:para>The code above ensures that the table will fill all available space. If the table's width is smaller than 100 %, the table will be centered in the generated documentation.</db:para>
<db:para>A table can contain headers, rows and columns. A row starts with a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row">\row</db:link> command and consists of cells, each of which starts with an <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link> command. There is also a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header">\header</db:link> command which is a special kind of row that has a special format.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \row
        \li \l {Layout Management}
        \li The Qt layout system provides a simple
           and powerful way of specifying the layout
           of child widgets.
    \row
        \li \l {Drag and Drop}
        \li Drag and drop provides a simple visual
           mechanism which users can use to transfer
           information between and within applications.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:para>You can also make cells span several rows and columns. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li {3,1} This header cell spans three columns,
           but only one row.
    \row
        \li {2, 1} This table cell spans two columns,
           but only one row
        \li {1, 2} This table cell spans only one column,
        but two rows.
    \row
        \li A regular table cell
        \li A regular table cell
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header">\header</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row">\row</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link>.</db:para>
<db:anchor xml:id="header-command"/>
</db:section>
<db:section xml:id="header">
<db:title>\header</db:title>
<db:para>The \header command indicates that the following table cells are the current table's column headers.</db:para>
<db:para>The command can only be used within the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table...\endtable</db:link> commands. A header can contain several cells. A cell is created with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link> command.</db:para>
<db:para>A header cell's text is centered within the table cell and rendered using a bold font.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row">\row</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link>.</db:para>
<db:anchor xml:id="row-command"/>
</db:section>
<db:section xml:id="row">
<db:title>\row</db:title>
<db:para>The \row command begins a new row in a table. The <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li items</db:link> that belong in the new row will immediately follow the \row.</db:para>
<db:para>The command can only be used within the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table...\endtable</db:link> commands. A row can contain several cells. A cell is created with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link> command.</db:para>
<db:para>The background cell color of each row alternates between two shades of grey, making it easier to distinguish the rows from each other. The cells' contents is left aligned.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \row
        \li \l {Layout Management}
        \li The Qt layout system provides a simple
           and powerful way of specifying the layout
           of child widgets.
    \row
        \li \l {Drag and Drop}
        \li Drag and drop provides a simple visual
           mechanism which users can use to transfer
           information between and within applications.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header">\header</db:link>, and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link>.</db:para>
<db:anchor xml:id="value-command"/>
</db:section>
<db:section xml:id="value">
<db:title>\value</db:title>
<db:para>The \value command starts the documentation of a C++ enum item.</db:para>
<db:para>The command's first argument is the enum item. Then follows its associated description. The description argument ends at the next blank line or \value. The arguments are rendered within a table.</db:para>
<db:para>The documentation will be located in the associated class, header file or namespace documentation. See the <db:link xlink:href="13-qdoc-commands-topics.xml#enum">\enum</db:link> documentation for an example.</db:para>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#enum">\enum</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#omitvalue">\omitvalue</db:link>.</db:para>
<db:anchor xml:id="omitvalue-command"/>
</db:section>
<db:section xml:id="omitvalue">
<db:title>\omitvalue</db:title>
<db:para>The \omitvalue command excludes a C++ enum item from the documentation.</db:para>
<db:para>The command's only argument is the name of the enum item that will be omitted. See the <db:link xlink:href="13-qdoc-commands-topics.xml#enum">\enum</db:link> documentation for an example.</db:para>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#enum">\enum</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value">\value</db:link>.</db:para>
<db:anchor xml:id="list-command"/>
</db:section>
<db:section xml:id="list">
<db:title>\list</db:title>
<db:para>The \list and \endlist commands delimit a list of items.</db:para>
<db:para>Create each list item with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link> command. A list always contains one or more items. Lists can be nested. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \list
    \li Qt Reference Documentation: Getting Started
        \list
        \li How to Learn Qt
        \li Installation
            \list
            \li Qt/X11
            \li Qt/Windows
            \li Qt/Mac
            \li Qt/Embedded
            \endlist
        \li Tutorial and Examples
        \endlist
    \endlist
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Reference Documentation: Getting Started</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt/X11</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Windows</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Mac</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Embedded</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>The \list command takes an optional argument providing alternative appearances for the list items.</db:para>
<db:programlisting language="cpp">/ *!
    \list
        \li How to Learn Qt
        \li Installation
        \li Tutorial and Examples
    \endlist
* /
</db:programlisting>
<db:para>QDoc renders the list items with bullets (the default):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:itemizedlist>
<db:warning>
<db:para>There appears to be a bug in qdoc here. If you include any of the argument types, you get a numeric list. We're looking into it.</db:para>
</db:warning>
<db:para>If you provide 'A' as an argument to the \list command, the bullets are replaced with characters in alphabetical order:</db:para>
<db:orderedlist numeration="upperalpha">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you replace 'A' with '1', the list items are numbered in ascending order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you provide 'i' as the argument, the bullets are replaced with roman numerals:</db:para>
<db:orderedlist numeration="lowerroman">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Finally, you can make the list items appear with roman numbers following in ascending order if you provide 'I' as the optional argument:</db:para>
<db:orderedlist numeration="upperroman">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>You can also make the listing start at any character or number by simply provide the number or character you want to start at. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \list G
        \li How to Learn Qt
        \li Installation
        \li Tutorial and Examples
    \endlist
* /
</db:programlisting>
<db:note>
<db:para>This doesn't work in DITA XML, so don't use it because it produces a DITA XML file that doesn't validate. There probably is a way to do this in DITA, so if we figure it out, we will put it in. But this capability is not used anywhere other than right here, so it probably isn't important. For now, if you use this option, qdoc will ignore it and produce a list without it.</db:para>
</db:note>
<db:para>QDoc renders this as:</db:para>
<db:orderedlist startingnumber="7" numeration="upperalpha">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-table-cell-list-item">\li</db:link>.</db:para>
<db:anchor xml:id="li-command"/>
</db:section>
<db:section xml:id="li-table-cell-list-item">
<db:title>\li (table cell, list item)</db:title>
<db:para>The \li command marks a table cell or a list item. This command is only used in <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">tables</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list">lists</db:link>.</db:para>
<db:para>It considers everything as its argument until the next \li command, until the next <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\endtable</db:link>, or <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list">\endlist</db:link> command. See <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list">\list</db:link> for examples.</db:para>
<db:para>If the command is used within a table, you can also specify how many rows or columns the item should span.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li {3,1} This header cell spans three columns
           but only one row.
    \row
        \li {2, 1} This table item spans two columns
           but only one row
        \li {1, 2} This table item spans only one column,
        but two rows.
    \row
        \li A regular table item
        \li A regular table item
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:para>If not specified, the item will span one column and one row.</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header">\header</db:link>, and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list">\list</db:link>.</db:para>
</db:section>
</db:article>
