<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tables and Lists</db:title>
<db:productname>QDoc</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>QDoc Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="09-qdoc-commands-includingimages.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Including Images"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="11-qdoc-commands-specialcontent.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Special Content"/></db:extendedlink>
<db:abstract>
<db:para>QDoc Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>These commands enable creating lists and tables. A list is rendered left aligned as a separate paragraph. A table is rendered centered as a separate paragraph. The table width depends on the width of its contents.</db:para>
<db:anchor xml:id="table-command"/>
<db:section xml:id="table">
<db:title>\table</db:title>
<db:para>The \table and \endtable commands delimit the contents of a table.</db:para>
<db:para>The command accepts a single argument specifying the table's width as a percentage of the page width:</db:para>
<db:programlisting language="cpp">/ *!
    \table 100 %

       ...

    \endtable
* /
</db:programlisting>
<db:para>The code above ensures that the table will fill all available space. If the table's width is smaller than 100 %, the table will be centered in the generated documentation.</db:para>
<db:para>A table can contain headers, rows and columns. A row starts with a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row-command">\row</db:link> command and consists of cells, each of which starts with an <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link> command. There is also a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">\header</db:link> command which is a special kind of row that has a special format.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \row
        \li \l {Layout Management}
        \li The Qt layout system provides a simple
           and powerful way of specifying the layout
           of child widgets.
    \row
        \li \l {Drag and Drop}
        \li Drag and drop provides a simple visual
           mechanism which users can use to transfer
           information between and within applications.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:informaltable cellpadding="2"
                   cellspacing="1" border="0">
               <db:tr valign="top"  class="bgcolor-a2c511" ><?dbhtml bgcolor="a2c511" ?><?dbfo bgcolor="a2c511" ?>
                   <db:th>Qt Core Feature</db:th>
                   <db:th>Brief Description</db:th>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/signalsandslots.html">
                       Signals and Slots</db:link>
                   </db:td>
                   <db:td>Signals and slots are used for communication
                       between objects.</db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-c0c0c0" ><?dbhtml bgcolor="c0c0c0" ?><?dbfo bgcolor="c0c0c0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/layout.html">
                       Layout Management</db:link></db:td>
                   <db:td>The Qt layout system provides a simple
                       and powerful way of specifying the layout
                       of child widgets.</db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/dnd.html">
                       Drag and Drop</db:link></db:td>
                   <db:td>Drag and drop provides a simple visual
                       mechanism which users can use to transfer
                       information between and within applications.</db:td>
               </db:tr>

               </db:informaltable>
<db:para>You can also make cells span several rows and columns. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li {3,1} This header cell spans three columns,
           but only one row.
    \row
        \li {2, 1} This table cell spans two columns,
           but only one row
        \li {1, 2} This table cell spans only one column,
        but two rows.
    \row
        \li A regular table cell
        \li A regular table cell
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:informaltable cellpadding="2" cellspacing="1"
                border="0">

               <db:tr valign="top"  class="bgcolor-a2c511" ><?dbhtml bgcolor="a2c511" ?><?dbfo bgcolor="a2c511" ?>
                   <db:th colspan="3" rowspan="1">
                   This header cell spans three columns, but only one row.
                   </db:th>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td colspan="2" rowspan="1">
                   This table cell spans two columns, but only one row.
                   </db:td>
                   <db:td rowspan="2">
                   This table cell spans only one column, but two rows.
                   </db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-c0c0c0" ><?dbhtml bgcolor="c0c0c0" ?><?dbfo bgcolor="c0c0c0" ?>
                   <db:td>A regular table cell</db:td>
                   <db:td>A regular table cell</db:td>
               </db:tr>

               </db:informaltable>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">\header</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row-command">\row</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link>.</db:para>
<db:anchor xml:id="header-command"/>
</db:section>
<db:section xml:id="header">
<db:title>\header</db:title>
<db:para>The \header command indicates that the following table cells are the current table's column headers.</db:para>
<db:para>The command can only be used within the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table...\endtable</db:link> commands. A header can contain several cells. A cell is created with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link> command.</db:para>
<db:para>A header cell's text is centered within the table cell and rendered using a bold font.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:informaltable cellpadding="2"
                   cellspacing="1" border="0">
               <db:tr valign="top"  class="bgcolor-a2c511" ><?dbhtml bgcolor="a2c511" ?><?dbfo bgcolor="a2c511" ?>
                   <db:th>Qt Core Feature</db:th>
                   <db:th>Brief Description</db:th>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/signalsandslots.html">
                       Signals and Slots</db:link>
                   </db:td>
                   <db:td>Signals and slots are used for communication
                       between objects.</db:td>
               </db:tr>
               </db:informaltable>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row-command">\row</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link>.</db:para>
<db:anchor xml:id="row-command"/>
</db:section>
<db:section xml:id="row">
<db:title>\row</db:title>
<db:para>The \row command begins a new row in a table. The <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li items</db:link> that belong in the new row will immediately follow the \row.</db:para>
<db:para>The command can only be used within the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table...\endtable</db:link> commands. A row can contain several cells. A cell is created with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link> command.</db:para>
<db:para>The background cell color of each row alternates between two shades of grey, making it easier to distinguish the rows from each other. The cells' contents is left aligned.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li Qt Core Feature
        \li Brief Description
    \row
        \li \l {Signal and Slots}
        \li Signals and slots are used for communication
           between objects.
    \row
        \li \l {Layout Management}
        \li The Qt layout system provides a simple
           and powerful way of specifying the layout
           of child widgets.
    \row
        \li \l {Drag and Drop}
        \li Drag and drop provides a simple visual
           mechanism which users can use to transfer
           information between and within applications.
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:informaltable cellpadding="2"
                   cellspacing="1" border="0">
               <db:tr valign="top"  class="bgcolor-a2c511" ><?dbhtml bgcolor="a2c511" ?><?dbfo bgcolor="a2c511" ?>
                   <db:th>Qt Core Feature</db:th>
                   <db:th>Brief Description</db:th>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/signalsandslots.html">
                       Signals and Slots</db:link>
                   </db:td>
                   <db:td>Signals and slots are used for communication
                       between objects.</db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-c0c0c0" ><?dbhtml bgcolor="c0c0c0" ?><?dbfo bgcolor="c0c0c0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/layout.html">
                       Layout Management</db:link></db:td>
                   <db:td>The Qt layout system provides a simple
                       and powerful way of specifying the layout
                       of child widgets.</db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td>
                   <db:link xlink:href="http://doc.qt.io/qt-6/dnd.html">
                       Drag and Drop</db:link></db:td>
                   <db:td>Drag and drop provides a simple visual
                       mechanism which users can use to transfer
                       information between and within applications.</db:td>
               </db:tr>

               </db:informaltable>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">\header</db:link>, and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link>.</db:para>
<db:anchor xml:id="value-command"/>
</db:section>
<db:section xml:id="value">
<db:title>\value</db:title>
<db:para>The \value command starts the documentation of a C++ enum item.</db:para>
<db:para>The command's first argument is the value name. The value name may be preceded by an optional <db:emphasis>since</db:emphasis> clause enclosed in square brackets. The value description follows the value name. The description ends at the next blank line or \value. The arguments are rendered in a table.</db:para>
<db:para>Without a <db:emphasis>since</db:emphasis> clause, a \value command could look like this:</db:para>
<db:programlisting language="cpp">\value QtInfoMsg A message generated by the qInfo() function.
</db:programlisting>
<db:para>The same command with a <db:emphasis>since</db:emphasis> clause would look like this:</db:para>
<db:programlisting language="cpp">\value [since 5.5] QtInfoMsg A message generated by the qInfo() function.
</db:programlisting>
<db:para>The documentation will be located in the associated class, header file or namespace documentation. See the <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> documentation for an example.</db:para>
<db:note>
<db:para>Since Qt 5.4, \value command can also be used outside the <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> topic. In this case, QDoc renders a two-column table listing the constant name (taken as-is from the first argument) and its description. This can be used, for example, in <db:link xlink:href="13-qdoc-commands-topics.xml#qmlproperty-command">\qmlproperty</db:link> topic for documenting acceptable values for a QML enumeration property.</db:para>
</db:note>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#omitvalue-command">\omitvalue</db:link>.</db:para>
<db:anchor xml:id="omitvalue-command"/>
</db:section>
<db:section xml:id="omitvalue">
<db:title>\omitvalue</db:title>
<db:para>The \omitvalue command excludes a C++ enum item from the documentation.</db:para>
<db:para>The command's only argument is the name of the enum item that will be omitted. See the <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> documentation for an example.</db:para>
<db:para>See also <db:link xlink:href="13-qdoc-commands-topics.xml#enum-command">\enum</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#value-command">\value</db:link> <db:link xlink:href="16-qdoc-commands-status.xml#since-command">\since</db:link></db:para>
<db:anchor xml:id="list-command"/>
</db:section>
<db:section xml:id="list">
<db:title>\list</db:title>
<db:para>The \list and \endlist commands delimit a list of items.</db:para>
<db:para>Create each list item with the <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link> command. A list always contains one or more items. Lists can be nested. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \list
    \li Qt Reference Documentation: Getting Started
        \list
        \li How to Learn Qt
        \li Installation
            \list
            \li Qt/X11
            \li Qt/Windows
            \li Qt/Mac
            \li Qt/Embedded
            \endlist
        \li Tutorial and Examples
        \endlist
    \endlist
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Reference Documentation: Getting Started</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt/X11</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Windows</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Mac</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt/Embedded</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>The \list command takes an optional argument providing alternative appearances for the list items.</db:para>
<db:programlisting language="cpp">/ *!
    \list
        \li How to Learn Qt
        \li Installation
        \li Tutorial and Examples
    \endlist
* /
</db:programlisting>
<db:para>QDoc renders the list items with bullets (the default):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you provide 'A' as an argument to the \list command, the bullets are replaced with characters in alphabetical order:</db:para>
<db:orderedlist numeration="upperalpha">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you replace 'A' with '1', the list items are numbered in ascending order:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If you provide 'i' as the argument, the bullets are replaced with roman numerals:</db:para>
<db:orderedlist numeration="lowerroman">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>Finally, you can make the list items appear with roman numbers following in ascending order if you provide 'I' as the optional argument:</db:para>
<db:orderedlist numeration="upperroman">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>You can also make the listing start at any character or number by simply provide the number or character you want to start at. For example:</db:para>
<db:programlisting language="cpp">/ *!
    \list G
        \li How to Learn Qt
        \li Installation
        \li Tutorial and Examples
    \endlist
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:orderedlist startingnumber="7" numeration="upperalpha">
<db:listitem>
<db:para>How to Learn Qt</db:para>
</db:listitem>
<db:listitem>
<db:para>Installation</db:para>
</db:listitem>
<db:listitem>
<db:para>Tutorial and Examples</db:para>
</db:listitem>
</db:orderedlist>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#li-command">\li</db:link>.</db:para>
<db:anchor xml:id="li-command"/>
</db:section>
<db:section xml:id="li-table-cell-list-item">
<db:title>\li (table cell, list item)</db:title>
<db:para>The \li command marks a table cell or a list item. This command is only used in <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">tables</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">lists</db:link>.</db:para>
<db:para>It considers everything as its argument until the next \li command, until the next <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\endtable</db:link>, or <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\endlist</db:link> command. See <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link> and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\list</db:link> for examples.</db:para>
<db:para>If the command is used within a table, you can also specify how many rows or columns the item should span.</db:para>
<db:programlisting language="cpp">/ *!
    \table
    \header
        \li {3,1} This header cell spans three columns
           but only one row.
    \row
        \li {2, 1} This table item spans two columns
           but only one row
        \li {1, 2} This table item spans only one column,
        but two rows.
    \row
        \li A regular table item
        \li A regular table item
    \endtable
* /
</db:programlisting>
<db:para>QDoc renders this as:</db:para>
<db:informaltable cellpadding="2" cellspacing="1"
                border="0">

               <db:tr valign="top"  class="bgcolor-a2c511" ><?dbhtml bgcolor="a2c511" ?><?dbfo bgcolor="a2c511" ?>
                   <db:th colspan="3" rowspan="1">
                   This header cell spans three columns, but only one row.
                   </db:th>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-d0d0d0" ><?dbhtml bgcolor="d0d0d0" ?><?dbfo bgcolor="d0d0d0" ?>
                   <db:td colspan="2" rowspan="1">
                   This table item spans two columns, but only one row.
                   </db:td>
                   <db:td rowspan="2">
                   This table item spans only one column, but two rows.
                   </db:td>
               </db:tr>

               <db:tr valign="top"  class="bgcolor-c0c0c0" ><?dbhtml bgcolor="c0c0c0" ?><?dbfo bgcolor="c0c0c0" ?>
                   <db:td>A regular table item</db:td>
                   <db:td>A regular table item</db:td>
               </db:tr>

               </db:informaltable>
<db:para>If not specified, the item will span one column and one row.</db:para>
<db:para>See also <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#table-command">\table</db:link>, <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#header-command">\header</db:link>, and <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#list-command">\list</db:link>.</db:para>
</db:section>
</db:article>
