<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>BorderImageMesh QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines a mesh with vertices arranged like those of a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.</db:para>
<db:para>This type was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>BorderImageMesh is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-borderimagemesh.xml">BorderImageMesh</db:link> provides <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>-like capabilities to a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> without the need for a potentially costly <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link>.</db:para>
<db:para>The following are functionally equivalent:</db:para>
<db:programlisting language="qml">BorderImage {
    id: borderImage
    border {
        left: 10
        right: 10
        top: 10
        bottom: 10
    }
    source: &quot;myImage.png&quot;
    visible: false
}
ShaderEffectSource {
    id: effectSource
    sourceItem: borderImage
    visible: false
}
ShaderEffect {
    property var source: effectSource
    ...
}
</db:programlisting>
<db:programlisting language="qml">Image {
    id: image
    source: &quot;myImage.png&quot;
    visible: false
}
ShaderEffect {
    property var source: image
    mesh: BorderImageMesh {
        border {
            left: 10
            right: 10
            top: 10
            bottom: 10
        }
        size: image.sourceSize
    }
    ...
}
</db:programlisting>
<db:para>But the <db:link xlink:href="qml-qtquick-borderimagemesh.xml">BorderImageMesh</db:link> version can typically be better optimized.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="horizontalTileMode-prop">
<db:title>horizontalTileMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>horizontalTileMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2">verticalTileMode : enumeration</db:bridgehead><db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>verticalTileMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property describes how to repeat or stretch the middle parts of an image.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Stretch - Scales the image to fit to the available area.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Repeat - Tile the image until there is no more space. May crop the last image.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Round - Like Repeat, but scales the images down to ensure that the last image is not cropped.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The default tile mode for each property is <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link>.Stretch.</db:para>
</db:section>
<db:section xml:id="border-prop">
<db:title>border group</db:title>
<db:bridgehead renderas="sect2" xml:id="border.bottom-prop">border.bottom : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.bottom</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.left-prop">border.left : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.left</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.right-prop">border.right : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.right</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="border.top-prop">border.top : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>border.top</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The 4 border lines (2 horizontal and 2 vertical) break the image into 9 sections, as shown below:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-scalegrid.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Each border line (left, right, top, and bottom) specifies an offset in pixels from the respective edge of the mesh. By default, each border line has a value of 0.</db:para>
<db:para>For example, the following definition sets the bottom line 10 pixels up from the bottom of the mesh:</db:para>
<db:programlisting language="qml">BorderImageMesh {
    border.bottom: 10
    // ...
}
</db:programlisting>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>size</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The base size of the mesh. This generally corresponds to the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">sourceSize</db:link> of the image being used by the <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
