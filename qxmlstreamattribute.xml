<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStreamAttribute Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlstreamattribute.xml">QXmlStreamAttribute</db:link> class represents a single XML attribute.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlStreamAttribute</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlStreamAttribute is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An attribute consists of an optionally empty <db:link xlink:href="qxmlstreamattribute.xml#namespaceUri">namespaceUri</db:link>(), a <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>(), a <db:link xlink:href="qxmlstreamattribute.xml#value">value</db:link>(), and an <db:link xlink:href="qxmlstreamattribute.xml#isDefault">isDefault</db:link>() attribute.</db:para>
<db:para>The raw XML attribute name is returned as <db:link xlink:href="qxmlstreamattribute.xml#qualifiedName">qualifiedName</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlStreamAttribute">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute()</db:title>
<db:para>Creates an empty attribute.</db:para>
</db:section>
<db:section xml:id="QXmlStreamAttribute-2">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs an attribute with qualified name <db:code role="parameter">qualifiedName</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QXmlStreamAttribute-3">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Constructs an attribute in the namespace described with <db:code role="parameter">namespaceUri</db:code> with <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QXmlStreamAttribute-1">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QXmlStreamAttribute">
<db:title>[noexcept] QXmlStreamAttribute::~QXmlStreamAttribute()</db:title>
<db:para>Destructs an attribute.</db:para>
</db:section>
<db:section xml:id="isDefault">
<db:title>bool QXmlStreamAttribute::isDefault() const</db:title>
<db:para>Returns true if the parser added this attribute with a default value following an ATTLIST declaration in the DTD; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QStringRef QXmlStreamAttribute::name() const</db:title>
<db:para>Returns the attribute's local name.</db:para>
</db:section>
<db:section xml:id="namespaceUri">
<db:title>QStringRef QXmlStreamAttribute::namespaceUri() const</db:title>
<db:para>Returns the attribute's resolved namespaceUri, or an empty string reference if the attribute does not have a defined namespace.</db:para>
</db:section>
<db:section xml:id="prefix">
<db:title>[since 4.4] QStringRef QXmlStreamAttribute::prefix() const</db:title>
<db:para>Returns the attribute's namespace prefix.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamattribute.xml#qualifiedName">qualifiedName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qualifiedName">
<db:title>QStringRef QXmlStreamAttribute::qualifiedName() const</db:title>
<db:para>Returns the attribute's qualified name.</db:para>
<db:para>A qualified name is the raw name of an attribute in the XML data. It consists of the namespace <db:link xlink:href="qxmlstreamattribute.xml#prefix">prefix</db:link>(), followed by colon, followed by the attribute's local <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>(). Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualifiedName(), but the resolved <db:link xlink:href="qxmlstreamattribute.xml#namespaceUri">namespaceUri</db:link>() and the attribute's local <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>().</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QStringRef QXmlStreamAttribute::value() const</db:title>
<db:para>Returns the attribute's value.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QXmlStreamAttribute::operator!=(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this attribute with <db:code role="parameter">other</db:code> and returns true if they are not equal; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QXmlStreamAttribute &amp;QXmlStreamAttribute::operator=(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this attribute.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QXmlStreamAttribute::operator==(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this attribute with <db:code role="parameter">other</db:code> and returns true if they are equal; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
