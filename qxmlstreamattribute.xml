<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXmlStreamAttribute Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxmlstreamattribute.xml">QXmlStreamAttribute</db:link> class represents a single XML attribute.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXmlStreamAttribute</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QXmlStreamAttribute is part of <db:simplelist><db:member>xml-tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An attribute consists of an optionally empty <db:link xlink:href="qxmlstreamattribute.xml#namespaceUri">namespaceUri</db:link>(), a <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>(), a <db:link xlink:href="qxmlstreamattribute.xml#value">value</db:link>(), and an <db:link xlink:href="qxmlstreamattribute.xml#isDefault">isDefault</db:link>() attribute.</db:para>
<db:para>The raw XML attribute name is returned as <db:link xlink:href="qxmlstreamattribute.xml#qualifiedName">qualifiedName</db:link>().</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QXmlStreamAttribute">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute()</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamAttribute</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamAttribute()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty attribute.</db:para>
</db:section>
<db:section xml:id="QXmlStreamAttribute-1">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute(const QString &amp;<db:emphasis>qualifiedName</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>qualifiedName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamAttribute(const QString &amp;qualifiedName, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an attribute with qualified name <db:code role="parameter">qualifiedName</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="QXmlStreamAttribute-2">
<db:title>QXmlStreamAttribute::QXmlStreamAttribute(const QString &amp;<db:emphasis>namespaceUri</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QXmlStreamAttribute</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>namespaceUri</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QXmlStreamAttribute(const QString &amp;namespaceUri, const QString &amp;name, const QString &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an attribute in the namespace described with <db:code role="parameter">namespaceUri</db:code> with <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="isDefault">
<db:title>bool QXmlStreamAttribute::isDefault() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDefault</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDefault() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the parser added this attribute with a default value following an ATTLIST declaration in the DTD; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>QStringView QXmlStreamAttribute::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute's local name.</db:para>
</db:section>
<db:section xml:id="namespaceUri">
<db:title>QStringView QXmlStreamAttribute::namespaceUri() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>namespaceUri</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView namespaceUri() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute's resolved namespaceUri, or an empty string reference if the attribute does not have a defined namespace.</db:para>
</db:section>
<db:section xml:id="prefix">
<db:title>QStringView QXmlStreamAttribute::prefix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>prefix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView prefix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute's namespace prefix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>()</db:member>
<db:member><db:link xlink:href="qxmlstreamattribute.xml#qualifiedName">qualifiedName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qualifiedName">
<db:title>QStringView QXmlStreamAttribute::qualifiedName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>qualifiedName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView qualifiedName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute's qualified name.</db:para>
<db:para>A qualified name is the raw name of an attribute in the XML data. It consists of the namespace <db:link xlink:href="qxmlstreamattribute.xml#prefix">prefix</db:link>(), followed by colon, followed by the attribute's local <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>(). Since the namespace prefix is not unique (the same prefix can point to different namespaces and different prefixes can point to the same namespace), you shouldn't use qualifiedName(), but the resolved <db:link xlink:href="qxmlstreamattribute.xml#namespaceUri">namespaceUri</db:link>() and the attribute's local <db:link xlink:href="qxmlstreamattribute.xml#name">name</db:link>().</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QStringView QXmlStreamAttribute::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringView</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringView value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the attribute's value.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QXmlStreamAttribute::operator!=(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamAttribute &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QXmlStreamAttribute &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this attribute with <db:code role="parameter">other</db:code> and returns true if they are not equal; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QXmlStreamAttribute::operator==(const QXmlStreamAttribute &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QXmlStreamAttribute &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QXmlStreamAttribute &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Compares this attribute with <db:code role="parameter">other</db:code> and returns true if they are equal; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
