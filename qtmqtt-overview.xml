<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt MQTT Overview</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides insight into the MQTT protocol and the Qt MQTT module.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt MQTT enables you to create applications and devices that can communicate over the MQ telemetry transport (MQTT) protocol. It fully complies to the MQTT protocol specification.</db:para>
<db:section xml:id="publish-and-subscribe">
<db:title>Publish and Subscribe</db:title>
<db:para><db:link xlink:href="https://www.mqtt.org">MQTT</db:link> is a machine-to-machine connectivity protocol that operates on the publish-and-subscribe model. An MQTT client is a program or device that uses MQTT to create a network connection to an MQTT server, also called a <db:emphasis>broker</db:emphasis>. Once a connection is created, the client can send messages to the broker. The other clients can subscribe to notifications on particular topics sent by the client.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/mqtt.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>For example, if <db:emphasis>Client 2</db:emphasis> subscribes to messages on <db:emphasis>Topic A</db:emphasis>, it receives a notification when <db:emphasis>Client 1</db:emphasis> sends a message on that topic. If <db:emphasis>Client 3</db:emphasis> subscribes to <db:emphasis>Topic A</db:emphasis> and <db:emphasis>Topic B</db:emphasis>, it receives notifications about messages on both those topics.</db:para>
<db:para>Qt MQTT is a client solution that does not include a broker. It is especially suitable for developing telemetry applications for embedded devices. However, Qt MQTT has no external dependencies, and therefore the implemented clients can be run on all supported Qt platforms.</db:para>
</db:section>
<db:section xml:id="topics">
<db:title>Topics</db:title>
<db:para>Topics are stored in a hierarchical tree structure. The standard does not specify how the tree should be designed, nor does it provide predefined hierarchy sets. You can freely design the hierarchy as required by your project. The following is an example of a topic hierarchy, where <db:emphasis>active</db:emphasis> means all active sensors, whereas <db:emphasis>house</db:emphasis> and <db:emphasis>garage</db:emphasis> are individual sensors:</db:para>
<db:programlisting language="cpp" role="bad">sensors/active
sensors/house/temperature
sensors/house/bedroom/light
sensors/house/livingroom/light
sensors/garage/temperature
sensors/garage/light
</db:programlisting>
</db:section>
<db:section xml:id="subscribing-to-topics-using-wildcards">
<db:title>Subscribing to Topics Using Wildcards</db:title>
<db:para>When clients subscribe to topics, they can use the hash mark (#) and plus sign (+) as wildcards. The hash mark indicates that the client wants to receive notifications on all messages on a topic and its subtopics. For example, if a client subscribes to <db:emphasis>sensors/house/#</db:emphasis>, it receives all messages on the <db:emphasis>house</db:emphasis> sensor.</db:para>
<db:para>The plus sign indicates that a branch on the tree can be skipped over when looking for a matching subtopic. For example, if a client subscribes to <db:emphasis>sensors/+/temperature</db:emphasis>, it receives messages on <db:emphasis>temperature</db:emphasis> regardless of which sensor sent them. You can use multiple plus signs to skip over multiple branches. For example, <db:emphasis>house/+/+/temperature</db:emphasis> could be used to receive messages on the temperature of all rooms in all apartments in a house.</db:para>
</db:section>
<db:section xml:id="shared-subscriptions">
<db:title>Shared Subscriptions</db:title>
<db:para><db:emphasis>Shared subscriptions</db:emphasis> describe a pool of subscribers to one topic filter. Instead of all subscribers receiving a message, only one subscriber receives it. This enables load balancing on multiple clients. The format of a shared subscription is:</db:para>
<db:programlisting language="cpp" role="bad">$share/{sharename}/{topicfilter}
</db:programlisting>
<db:para>For example, if <db:emphasis>Client 1</db:emphasis> and <db:emphasis>Client 2</db:emphasis> should share a subscription to the topic <db:emphasis>sensors/house/temperature</db:emphasis>, the topic filter to subscribe to is:</db:para>
<db:programlisting language="cpp" role="bad">$share/poolAB/sensors/house/temperature
</db:programlisting>
<db:para>It is not defined in which order messages are distributed by the server. This is a server specific option.</db:para>
<db:para>To identify whether a server supports shared subscriptions, see also QMqttServerConnectionProperties::sharedSubscriptionSupported().</db:para>
</db:section>
<db:section xml:id="topic-aliases">
<db:title>Topic Aliases</db:title>
<db:para>Structuring topics in a tree helps to separate data channels and provide a logical order of information. However, this can lead to very long topic names being used during the publication of messages, hence increasing the size of each message.</db:para>
<db:para>The MQTT 5.0 protocol version introduced <db:emphasis>topic aliases</db:emphasis> to circumvent this. Instead of the topic string, an integer value is sent. To create an initial mapping between the client and the server, both the topic string and the alias need to be part of a message. Thereafter, only the ID with an empty topic is used.</db:para>
<db:para>This mapping can be changed at any time by using a topic alias with another topic string. Note that this mapping does not necessarily apply to other connections, such as connections from the server to other clients. Each connection needs to create this mapping manually.</db:para>
<db:para>Qt MQTT provides an automated mechanism to help reduce data rates. After QMqttClient creates a connection, information about topic aliases supported by the server is stored. Subsequently, topic aliases are used in the order the messages are published, until all available aliases are in use. A user is always able to modify this mapping by using QMqttPublishProperties::setTopicAlias() during publication.</db:para>
<db:para>When QMqttClient subscribes to a topic, the server can use topic aliases as well, depending on the QMqttConnectionProperties::maximumTopicAlias() value set by the client. The client automatically maps topic aliases and transparently forwards messages to the user including the full topic string.</db:para>
</db:section>
<db:section xml:id="security">
<db:title>Security</db:title>
<db:para>The connections between the clients and the broker are secured by an in-built authentication system that uses user names and passwords. Messages are encrypted by using SSL/TLS at the transport layer. The standardized port number for encrypted MQTT messages is 8883.</db:para>
</db:section>
<db:section xml:id="quality-of-service">
<db:title>Quality of Service</db:title>
<db:para>The following quality of service (QoS) levels for messages are defined:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>At most once (0)</db:emphasis> means that messages are delivered according to the best efforts of the operating environment, and therefore message loss can occur. This level could be used, for example, with ambient sensor data where it does not matter if an individual reading is lost as the next one will be published soon after.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>At least once (1)</db:emphasis> means that messages are assured to arrive but duplicates can occur.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>Exactly once (2)</db:emphasis> means that messages are assured to arrive exactly once. This level could be used, for example, with billing systems where duplicate or lost messages could lead to incorrect charges being applied.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="will-messages">
<db:title>Will Messages</db:title>
<db:para>A <db:emphasis>Will Message</db:emphasis>, also called <db:emphasis>testament</db:emphasis>, is a message sent from a client and stored at the broker location. If the connection between the client and broker breaks in an unexpected way, the Will Message will be forwarded to any subscriber of the <db:emphasis>Will Topic</db:emphasis>.</db:para>
<db:para>Will Messages must be specified at the connecting stage. Hence, it is mandatory to set them before invoking QMqttClient::connectToHost() or QMqttClient::connectToHostEncrypted(). A Will Message has all the properties of a regular message, as well as a Will Topic, QoS level, retained flag, and message payload.</db:para>
<db:para>If the client disconnects from the broker in a regular fashion by calling QMqttClient::disconnectFromHost(), the broker will discard the Will Message. If needed, the client is responsible for sending all the required messages before disconnecting.</db:para>
</db:section>
<db:section xml:id="retained-messages">
<db:title>Retained Messages</db:title>
<db:para>Retained messages are stored on the broker side. As future clients connect, they will receive such messages. A typical use case is to store the current health status of the publisher in a retained message. Subscribers will instantly receive a message about the status.</db:para>
<db:para>A broker can only store the last retained message sent for a specified topic. If a client publishes a retained message with the QoS level zero, any previously retained message for its topic at the broker <db:emphasis>must</db:emphasis> be discarded. The broker <db:emphasis>should</db:emphasis> store the last message, but <db:emphasis>may</db:emphasis> also discard it. This depends on the implementation of the broker.</db:para>
</db:section>
</db:article>
