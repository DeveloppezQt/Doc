<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Multiple Graphs Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Showing multiple graphs simultaneously in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 multiple graphs example demonstrates using multiple graphs in single window.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlmultigraph-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The interesting thing about this example is demonstrating that multiple graphs can be used simultaneously, so most functionality is not explained in detail. For more detailed QML example documentation, see <db:link xlink:href="qtdatavisualization-qmlscatter-example.xml">Qt Quick 2 Scatter Example</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="multiple-graphs">
<db:title>Multiple Graphs</db:title>
<db:para>Using multiple graphs in a single application doesn't require anything special, simply define and position the graphs as normal. In this example the graphs are shown in a 2 x 2 grid with <db:code>GridLayout</db:code>:</db:para>
<db:programlisting language="qml">GridLayout {
    id: gridLayout
    columns: 2
    Layout.fillHeight: true
    Layout.fillWidth: true
    anchors.top: mainView.top
    anchors.bottom: mainView.bottom
    anchors.left: mainView.left
    anchors.right: mainView.right

    Rectangle {
        Layout.fillHeight: true
        Layout.fillWidth: true
        border.color: surfaceGraph.theme.gridLineColor
        border.width: 2

        Surface3D {
            id: surfaceGraph
            anchors.fill: parent
            anchors.margins: parent.border.width
            theme: Theme3D {
                type: Theme3D.ThemePrimaryColors
                font.pointSize: 60
            }
            scene.activeCamera.cameraPreset: Camera3D.CameraPresetIsometricLeftHigh

            Surface3DSeries {
                itemLabelFormat: &quot;Pop density at (@xLabel N, @zLabel E): @yLabel&quot;
                ItemModelSurfaceDataProxy {
                    itemModel: data.sharedData
                    // The surface data points are not neatly lined up in rows and columns,
                    // so we define explicit row and column roles.
                    rowRole: &quot;row&quot;
                    columnRole: &quot;col&quot;
                    xPosRole: &quot;latitude&quot;
                    zPosRole: &quot;longitude&quot;
                    yPosRole: &quot;pop_density&quot;
                }
            }
        }
    }

    // We'll use one grid cell for buttons
    Rectangle {
        Layout.fillHeight: true
        Layout.fillWidth: true

        GridLayout {
            anchors.right: parent.right
            anchors.left: parent.left
            anchors.top: parent.top
            anchors.bottom: parent.bottom
            columns: 2

            NewButton {
                Layout.minimumWidth: parent.width / 2
                Layout.fillHeight: true
                Layout.fillWidth: true
                text: &quot;Clear Selections&quot;
                onClicked: clearSelections() // call a helper function to keep button itself simpler
            }

            NewButton {
                Layout.minimumWidth: parent.width / 2
                Layout.fillHeight: true
                Layout.fillWidth: true
                text: &quot;Quit&quot;
                onClicked: Qt.quit(0);
            }

            NewButton {
                Layout.fillHeight: true
                Layout.fillWidth: true
                text: &quot;Reset Cameras&quot;
                onClicked: resetCameras() // call a helper function to keep button itself simpler
            }

            NewButton {
                Layout.fillHeight: true
                Layout.fillWidth: true
                text: &quot;Toggle Mesh Styles&quot;
                onClicked: toggleMeshStyle() // call a helper function to keep button itself simpler
            }
        }
    }

    Rectangle {
        Layout.fillHeight: true
        Layout.fillWidth: true
        border.color: scatterGraph.theme.gridLineColor
        border.width: 2

        Scatter3D {
            id: scatterGraph
            anchors.fill: parent
            anchors.margins: parent.border.width
            theme: Theme3D {
                type: Theme3D.ThemeDigia
                font.pointSize: 60
            }
            scene.activeCamera.cameraPreset: Camera3D.CameraPresetIsometricLeftHigh

            Scatter3DSeries {
                itemLabelFormat: &quot;Pop density at (@xLabel N, @zLabel E): @yLabel&quot;
                ItemModelScatterDataProxy {
                    itemModel: data.sharedData
                    // Mapping model roles to scatter series item coordinates.
                    xPosRole: &quot;latitude&quot;
                    zPosRole: &quot;longitude&quot;
                    yPosRole: &quot;pop_density&quot;
                }
            }
        }
    }

    Rectangle {
        Layout.fillHeight: true
        Layout.fillWidth: true
        border.color: barGraph.theme.gridLineColor
        border.width: 2

        Bars3D {
            id: barGraph
            anchors.fill: parent
            anchors.margins: parent.border.width
            theme: Theme3D {
                type: Theme3D.ThemeQt
                font.pointSize: 60
            }
            selectionMode: AbstractGraph3D.SelectionItemAndRow | AbstractGraph3D.SelectionSlice
            scene.activeCamera.cameraPreset: Camera3D.CameraPresetIsometricLeftHigh

            Bar3DSeries {
                itemLabelFormat: &quot;@seriesName: @valueLabel&quot;
                name: &quot;Population density&quot;

                ItemModelBarDataProxy {
                    itemModel: data.sharedData
                    // Mapping model roles to bar series rows, columns, and values.
                    rowRole: &quot;row&quot;
                    columnRole: &quot;col&quot;
                    valueRole: &quot;pop_density&quot;
                }
            }
        }
    }
}
</db:programlisting>
<db:para>Each graph has a parent <db:code>Rectangle</db:code> item to provide it with a border.</db:para>
<db:para>Note that one of the grid cells is used for buttons in an another <db:code>GridLayout</db:code>.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/main.cpp">qmlmultigraph/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/qml/qmlmultigraph/Data.qml">qmlmultigraph/qml/qmlmultigraph/Data.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/qml/qmlmultigraph/NewButton.qml">qmlmultigraph/qml/qmlmultigraph/NewButton.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/qml/qmlmultigraph/main.qml">qmlmultigraph/qml/qmlmultigraph/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/qmlmultigraph.pro">qmlmultigraph/qmlmultigraph.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmlmultigraph/qmlmultigraph.qrc">qmlmultigraph/qmlmultigraph.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
