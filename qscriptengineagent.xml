<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScriptEngineAgent Class</db:title>
<db:productname>QtScript</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>QtScript Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> class provides an interface to report events pertaining to <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> execution.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScriptEngineAgent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += script</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QScriptEngineAgent is part of <db:simplelist><db:member><db:link xlink:href="script.xml">Scripting Classes and Overviews</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> class is the basis of tools that monitor and/or control the execution of a <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link>, such as debuggers and profilers.</db:para>
<db:para>To process script loading and unloading events, reimplement the <db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>() and <db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() functions. <db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>() is called after the input to <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>() has been parsed, right before the given script is executed. The engine assigns each script an ID, which is available as one of the arguments to <db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>(); subsequently, other event handlers can use the ID to identify a particular script. One common usage of <db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>() is to retain the script text, filename and base line number (the original input to <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>()), so that other event handlers can e.g. map a line number to the corresponding line of text.</db:para>
<db:para><db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() is called when the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> has no further use for a script; the <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> may at this point safely discard any resources associated with the script (such as the script text). Note that after <db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() has been called, the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> may reuse the relevant script ID for new scripts (i.e. as argument to a subsequent call to <db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>()).</db:para>
<db:para>Evaluating the following script will result in <db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() being called immediately after evaluation has completed:</db:para>
<db:programlisting language="cpp">var a = Math.random() + 2;
</db:programlisting>
<db:para>Evaluating the following script will <db:emphasis role="bold">not</db:emphasis> result in a call to <db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() when evaluation has completed:</db:para>
<db:programlisting language="cpp">function cube(a) {
    return a * a * a;
}

var a = cube(3);
</db:programlisting>
<db:para>The script isn't unloaded because it defines a function (<db:code>cube</db:code>) that remains in the script environment after evaluation has completed. If a subsequent script removed the <db:code>cube</db:code> function (e.g. by setting it to <db:code>null</db:code>), <db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>() would be called when the function is garbage collected. In general terms, a script isn't unloaded until the engine has determined that none of its contents is referenced.</db:para>
<db:para>To process script function calls and returns, reimplement the <db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>() and <db:link xlink:href="qscriptengineagent.xml#functionExit">functionExit</db:link>() functions. <db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>() is called when a script function is about to be executed; <db:link xlink:href="qscriptengineagent.xml#functionExit">functionExit</db:link>() is called when a script function is about to return, either normally or due to an exception.</db:para>
<db:para>To process individual script statements, reimplement <db:link xlink:href="qscriptengineagent.xml#positionChange">positionChange</db:link>(). <db:link xlink:href="qscriptengineagent.xml#positionChange">positionChange</db:link>() is called each time the engine is about to execute a new statement of a script, and thus offers the finest level of script monitoring.</db:para>
<db:para>To process exceptions, reimplement <db:link xlink:href="qscriptengineagent.xml#exceptionThrow">exceptionThrow</db:link>() and <db:link xlink:href="qscriptengineagent.xml#exceptionCatch">exceptionCatch</db:link>(). <db:link xlink:href="qscriptengineagent.xml#exceptionThrow">exceptionThrow</db:link>() is called when a script exception is thrown, before it has been handled. <db:link xlink:href="qscriptengineagent.xml#exceptionCatch">exceptionCatch</db:link>() is called when an exception handler is present, and execution is about to be resumed at the handler code.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengine.xml#setAgent">QScriptEngine::setAgent</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptcontextinfo.xml">QScriptContextInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Extension-enum">
<db:title>enum QScriptEngineAgent::Extension</db:title>
<db:para>This enum specifies the possible extensions to a <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link></db:emphasis>::DebuggerInvocationRequest</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The agent handles <db:code>debugger</db:code> script statements.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#extension">extension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QScriptEngineAgent">
<db:title>QScriptEngineAgent::QScriptEngineAgent(QScriptEngine *<db:emphasis>engine</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> object for the given <db:code role="parameter">engine</db:code>.</db:para>
<db:para>The engine takes ownership of the agent.</db:para>
<db:para>Call <db:link xlink:href="qscriptengine.xml#setAgent">QScriptEngine::setAgent</db:link>() to make this agent the active agent.</db:para>
</db:section>
<db:section xml:id="dtor.QScriptEngineAgent">
<db:title>[virtual noexcept] QScriptEngineAgent::~QScriptEngineAgent()</db:title>
<db:para>Destroys this <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link>.</db:para>
</db:section>
<db:section xml:id="contextPop">
<db:title>[virtual] void QScriptEngineAgent::contextPop()</db:title>
<db:para>This function is called when the current script context is about to be popped.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#contextPush">contextPush</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengineagent.xml#functionExit">functionExit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contextPush">
<db:title>[virtual] void QScriptEngineAgent::contextPush()</db:title>
<db:para>This function is called when a new script context has been pushed.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#contextPop">contextPop</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="engine">
<db:title>QScriptEngine *QScriptEngineAgent::engine() const</db:title>
<db:para>Returns the <db:link xlink:href="qscriptengine.xml">QScriptEngine</db:link> that this agent is associated with.</db:para>
</db:section>
<db:section xml:id="exceptionCatch">
<db:title>[virtual] void QScriptEngineAgent::exceptionCatch(qint64 <db:emphasis>scriptId</db:emphasis>, const QScriptValue &amp;<db:emphasis>exception</db:emphasis>)</db:title>
<db:para>This function is called when the given <db:code role="parameter">exception</db:code> is about to be caught, in the script identified by <db:code role="parameter">scriptId</db:code>.</db:para>
<db:para>Reimplement this function if you want to handle this event.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#exceptionThrow">exceptionThrow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exceptionThrow">
<db:title>[virtual] void QScriptEngineAgent::exceptionThrow(qint64 <db:emphasis>scriptId</db:emphasis>, const QScriptValue &amp;<db:emphasis>exception</db:emphasis>, bool <db:emphasis>hasHandler</db:emphasis>)</db:title>
<db:para>This function is called when the given <db:code role="parameter">exception</db:code> has occurred in the engine, in the script identified by <db:code role="parameter">scriptId</db:code>. If the exception was thrown by a native Qt Script function, <db:code role="parameter">scriptId</db:code> is -1.</db:para>
<db:para>If <db:code role="parameter">hasHandler</db:code> is true, there is a <db:code>catch</db:code> or <db:code>finally</db:code> block that will handle the exception. If <db:code role="parameter">hasHandler</db:code> is false, there is no handler for the exception.</db:para>
<db:para>Reimplement this function if you want to handle this event. For example, a debugger can notify the user when an uncaught exception occurs (i.e. <db:code role="parameter">hasHandler</db:code> is false).</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#exceptionCatch">exceptionCatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extension">
<db:title>[virtual] QVariant QScriptEngineAgent::extension(QScriptEngineAgent::Extension <db:emphasis>extension</db:emphasis>, const QVariant &amp;<db:emphasis>argument</db:emphasis> = QVariant())</db:title>
<db:para>This virtual function can be reimplemented in a <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> subclass to provide support for extensions. The optional <db:code role="parameter">argument</db:code> can be provided as input to the <db:code role="parameter">extension</db:code>; the result must be returned in the form of a <db:link xlink:href="qvariant.xml">QVariant</db:link>. You can call <db:link xlink:href="qscriptengineagent.xml#supportsExtension">supportsExtension</db:link>() to check if an extension is supported by the <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link>. By default, no extensions are supported, and this function returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>If you implement the <db:link xlink:href="qscriptengineagent.xml#Extension-enum">DebuggerInvocationRequest</db:link> extension, Qt Script will call this function when a <db:code>debugger</db:code> statement is encountered in a script. The <db:code role="parameter">argument</db:code> is a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> containing three items: The first item is the scriptId (a qint64), the second item is the line number (an int), and the third item is the column number (an int).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#supportsExtension">supportsExtension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="functionEntry">
<db:title>[virtual] void QScriptEngineAgent::functionEntry(qint64 <db:emphasis>scriptId</db:emphasis>)</db:title>
<db:para>This function is called when a script function is called in the engine. If the script function is not a native Qt Script function, it resides in the script identified by <db:code role="parameter">scriptId</db:code>; otherwise, <db:code role="parameter">scriptId</db:code> is -1.</db:para>
<db:para>This function is called just before execution of the script function begins. You can obtain the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> associated with the function call with <db:link xlink:href="qscriptengine.xml#currentContext">QScriptEngine::currentContext</db:link>(). The arguments passed to the function are available.</db:para>
<db:para>Reimplement this function to handle this event. For example, a debugger implementation could reimplement this function (and <db:link xlink:href="qscriptengineagent.xml#functionExit">functionExit</db:link>()) to keep track of the call stack and provide step-over functionality.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#functionExit">functionExit</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengineagent.xml#positionChange">positionChange</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#currentContext">QScriptEngine::currentContext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="functionExit">
<db:title>[virtual] void QScriptEngineAgent::functionExit(qint64 <db:emphasis>scriptId</db:emphasis>, const QScriptValue &amp;<db:emphasis>returnValue</db:emphasis>)</db:title>
<db:para>This function is called when the currently executing script function is about to return. If the script function is not a native Qt Script function, it resides in the script identified by <db:code role="parameter">scriptId</db:code>; otherwise, <db:code role="parameter">scriptId</db:code> is -1. The <db:code role="parameter">returnValue</db:code> is the value that the script function will return.</db:para>
<db:para>This function is called just before the script function returns. You can still access the <db:link xlink:href="qscriptcontext.xml">QScriptContext</db:link> associated with the script function call with <db:link xlink:href="qscriptengine.xml#currentContext">QScriptEngine::currentContext</db:link>().</db:para>
<db:para>If the engine's <db:link xlink:href="qscriptengine.xml#hasUncaughtException">hasUncaughtException</db:link>() function returns true, the script function is exiting due to an exception; otherwise, the script function is returning normally.</db:para>
<db:para>Reimplement this function to handle this event; typically you will then also want to reimplement <db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>().</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengine.xml#hasUncaughtException">QScriptEngine::hasUncaughtException</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionChange">
<db:title>[virtual] void QScriptEngineAgent::positionChange(qint64 <db:emphasis>scriptId</db:emphasis>, int <db:emphasis>lineNumber</db:emphasis>, int <db:emphasis>columnNumber</db:emphasis>)</db:title>
<db:para>This function is called when the engine is about to execute a new statement in the script identified by <db:code role="parameter">scriptId</db:code>. The statement begins on the line and column specified by <db:code role="parameter">lineNumber</db:code> This event is not generated for native Qt Script functions.</db:para>
<db:para>Reimplement this function to handle this event. For example, a debugger implementation could reimplement this function to provide line-by-line stepping, and a profiler implementation could use it to count the number of times each statement is executed.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:note>
<db:para><db:code role="parameter">columnNumber</db:code> is undefined</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>()</db:member>
<db:member><db:link xlink:href="qscriptengineagent.xml#functionEntry">functionEntry</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scriptLoad">
<db:title>[virtual] void QScriptEngineAgent::scriptLoad(qint64 <db:emphasis>id</db:emphasis>, const QString &amp;<db:emphasis>program</db:emphasis>, const QString &amp;<db:emphasis>fileName</db:emphasis>, int <db:emphasis>baseLineNumber</db:emphasis>)</db:title>
<db:para>This function is called when the engine has parsed a script and has associated it with the given <db:code role="parameter">id</db:code>. The id can be used to identify this particular script in subsequent event notifications.</db:para>
<db:para><db:code role="parameter">program</db:code>, <db:code role="parameter">fileName</db:code> and <db:code role="parameter">baseLineNumber</db:code> are the original arguments to the <db:link xlink:href="qscriptengine.xml#evaluate">QScriptEngine::evaluate</db:link>() call that triggered this event.</db:para>
<db:para>This function is called just before the script is about to be evaluated.</db:para>
<db:para>You can reimplement this function to record information about the script; for example, by retaining the script text, you can obtain the line of text corresponding to a line number in a subsequent call to <db:link xlink:href="qscriptengineagent.xml#positionChange">positionChange</db:link>().</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#scriptUnload">scriptUnload</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scriptUnload">
<db:title>[virtual] void QScriptEngineAgent::scriptUnload(qint64 <db:emphasis>id</db:emphasis>)</db:title>
<db:para>This function is called when the engine has discarded the script identified by the given <db:code role="parameter">id</db:code>.</db:para>
<db:para>You can reimplement this function to clean up any resources you have associated with the script.</db:para>
<db:para>The default implementation does nothing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#scriptLoad">scriptLoad</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportsExtension">
<db:title>[virtual] bool QScriptEngineAgent::supportsExtension(QScriptEngineAgent::Extension <db:emphasis>extension</db:emphasis>) const</db:title>
<db:para>Returns true if the <db:link xlink:href="qscriptengineagent.xml">QScriptEngineAgent</db:link> supports the given <db:code role="parameter">extension</db:code>; otherwise, false is returned. By default, no extensions are supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscriptengineagent.xml#extension">extension</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
