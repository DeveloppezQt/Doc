<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Iterator Class</db:title>
<db:subtitle>QCborMap::Iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcbormap-iterator.xml">QCborMap::Iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qcbormap.xml">QCborMap</db:link>.</db:para>
<db:para>This class was introduced in Qt 5.12.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Iterator is part of <db:simplelist><db:member>cbor</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qcbormap-iterator.xml">QCborMap::Iterator</db:link> allows you to iterate over a <db:link xlink:href="qcbormap.xml">QCborMap</db:link> and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <db:link xlink:href="qcbormap.xml">QCborMap</db:link>, you should use <db:link xlink:href="qcbormap-constiterator.xml">QCborMap::ConstIterator</db:link>. It is generally good practice to use <db:link xlink:href="qcbormap-constiterator.xml">QCborMap::ConstIterator</db:link> on a non-const <db:link xlink:href="qcbormap.xml">QCborMap</db:link> as well, unless you need to change the <db:link xlink:href="qcbormap.xml">QCborMap</db:link> through the iterator. Const iterators are slightly faster, and improve code readability.</db:para>
<db:para>You must initialize the iterator using a <db:link xlink:href="qcbormap.xml">QCborMap</db:link> function like <db:link xlink:href="qcbormap.xml#begin">QCborMap::begin</db:link>(), <db:link xlink:href="qcbormap.xml#end">QCborMap::end</db:link>(), or <db:link xlink:href="qcbormap.xml#find">QCborMap::find</db:link>() before you can start iterating..</db:para>
<db:para>Multiple iterators can be used on the same object. Existing iterators will however become dangling once the object gets modified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-constiterator.xml">QCborMap::ConstIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>Iterator::iterator_category</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator_category</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>A synonym for <db:emphasis>std::random_access_iterator_tag</db:emphasis> indicating this iterator is a random-access iterator.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool Iterator::operator==(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-eq-eq">bool Iterator::operator==(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to the same entry in the map as this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool Iterator::operator!=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-not-eq">bool Iterator::operator!=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if <db:code role="parameter">other</db:code> points to a different entry in the map than this iterator; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-1">
<db:title>bool Iterator::operator&lt;(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt">bool Iterator::operator&lt;(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the map pointed to by this iterator occurs before the entry pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq-1">
<db:title>bool Iterator::operator&lt;=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-lt-eq">bool Iterator::operator&lt;=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the map pointed to by this iterator occurs before or is the same entry as is pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-1">
<db:title>bool Iterator::operator&gt;(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt">bool Iterator::operator&gt;(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the map pointed to by this iterator occurs after the entry pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq-1">
<db:title>bool Iterator::operator&gt;=(const ConstIterator &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-gt-eq">bool Iterator::operator&gt;=(const Iterator &amp;<db:emphasis>other</db:emphasis>) const</db:bridgehead>
<db:para>Returns true if the entry in the map pointed to by this iterator occurs after or is the same entry as is pointed to by the <db:code role="parameter">other</db:code> iterator.</db:para>
</db:section>
<db:section xml:id="Iterator-1">
<db:title>[constexpr] Iterator::Iterator()</db:title>
<db:constructorsynopsis>
<db:methodname>Iterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an uninitialized iterator.</db:para>
<db:para>Functions like <db:link xlink:href="qcbormap-iterator.xml#key">key</db:link>(), <db:link xlink:href="qcbormap-iterator.xml#value">value</db:link>(), and operator++() must not be called on an uninitialized iterator. Use operator=() to assign a value to it before using it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap.xml#begin">QCborMap::begin</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap.xml#end">QCborMap::end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Iterator-2">
<db:title>[constexpr] Iterator::Iterator(const Iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>Iterator</db:methodname>
<db:methodparam>
<db:type>const Iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator(const Iterator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an iterator as a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="key">
<db:title>QCborValue Iterator::key() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValue</db:type>
<db:methodname>key</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValue key() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current item's key.</db:para>
<db:para>There is no direct way of changing an item's key through an iterator, although it can be done by calling <db:link xlink:href="qcbormap.xml#erase">QCborMap::erase</db:link>() followed by <db:link xlink:href="qcbormap.xml#insert">QCborMap::insert</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QCborValueRef Iterator::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValueRef</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a modifiable reference to the current item's value.</db:para>
<db:para>You can change the value for a key by using value() on the left side of an assignment.</db:para>
<db:para>The return value is of type QCborValueRef, a helper class for <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. When you get an object of type QCborValueRef, you can use it as if it were a reference to a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> or <db:link xlink:href="qcbormap.xml">QCborMap</db:link> from which you got the reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2a">operator*</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a">
<db:title>Iterator::value_type Iterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator::value_type</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator::value_type operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pair containing the current item's key and a modifiable reference to the current item's value.</db:para>
<db:para>The second element of the pair is of type QCborValueRef, a helper class for <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. When you get an object of type QCborValueRef, you can use it as if it were a reference to a <db:link xlink:href="qcborvalue.xml">QCborValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qcborarray.xml">QCborArray</db:link> or <db:link xlink:href="qcbormap.xml">QCborMap</db:link> from which you got the reference.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#key">key</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap-iterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b">
<db:title>Iterator Iterator::operator+(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator+(qsizetype j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions forward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>Iterator &amp;Iterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator, ++i, advances the iterator to the next item in the map and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcbormap.xml#end">QCborMap::end</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator--">operator--</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>Iterator Iterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix ++ operator, i++, advances the iterator to the next item in the map and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>Iterator &amp;Iterator::operator+=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator+=(qsizetype j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Advances the iterator by <db:code role="parameter">j</db:code> items. If <db:code role="parameter">j</db:code> is negative, the iterator goes backward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator--eq">operator-=</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>Iterator Iterator::operator-(qsizetype <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Iterator</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator-(qsizetype j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an iterator to the item at <db:code role="parameter">j</db:code> positions backward from this iterator. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>qsizetype Iterator::operator-(Iterator <db:emphasis>j</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>Iterator</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype operator-(Iterator j) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the position of the item at iterator <db:code role="parameter">j</db:code> relative to the item at this iterator. If the item at <db:code role="parameter">j</db:code> is forward of this time, the returned value is negative.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2b">operator+</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--">
<db:title>Iterator &amp;Iterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator, --i, makes the preceding item current and returns this iterator.</db:para>
<db:para>Calling this function on <db:link xlink:href="qcbormap.xml#begin">QCborMap::begin</db:link>() leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2b-2b">operator++</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator---1">
<db:title>Iterator Iterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The postfix – operator, i--, makes the preceding item current and returns an iterator pointing to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>Iterator &amp;Iterator::operator-=(qsizetype <db:emphasis>j</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>j</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator-=(qsizetype j)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go back by <db:code role="parameter">j</db:code> items. If <db:code role="parameter">j</db:code> is negative, the iterator goes forward. Returns a reference to this iterator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-2b-eq">operator+=</db:link>()</db:member>
<db:member><db:link xlink:href="qcbormap-iterator.xml#operator-">operator-</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--gt">
<db:title>QCborValueRef *Iterator::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCborValueRef *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCborValueRef * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a modifiable reference to the current pair's value.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>Iterator &amp;Iterator::operator=(const Iterator &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>Iterator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const Iterator &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">Iterator &amp; operator=(const Iterator &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this iterator a copy of <db:code role="parameter">other</db:code> and returns a reference to this iterator.</db:para>
</db:section>
</db:section>
</db:article>
