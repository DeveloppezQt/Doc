<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Analog Clock Window Example</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Analog Clock Window example shows how to draw the contents of a custom window.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Analog</db:alt>
<db:imageobject>
<db:imagedata fileref="images/analogclock-window-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Clock Window example</db:para>
<db:para>This example demonstrates how the transformation and scaling features of QPainter can be used to make drawing easier.</db:para>
<db:section xml:id="analogclockwindow-class-definition">
<db:title>AnalogClockWindow Class Definition</db:title>
<db:para>The <db:code>AnalogClockWindow</db:code> class provides a clock with hour and minute hands that is automatically updated every few seconds. We make use of the RasterWindow from the <db:link xlink:href="qtgui-rasterwindow-example.xml">Raster Window Example</db:link> and reimplement the <db:code>render</db:code> function to draw the clock face:</db:para>
<db:programlisting language="cpp">class AnalogClockWindow : public RasterWindow
{
public:
    AnalogClockWindow();

protected:
    void timerEvent(QTimerEvent *) Q_DECL_OVERRIDE;
    void render(QPainter *p) Q_DECL_OVERRIDE;

private:
    int m_timerId;
};
</db:programlisting>
</db:section>
<db:section xml:id="analogclock-class-implementation">
<db:title>AnalogClock Class Implementation</db:title>
<db:programlisting language="cpp">AnalogClockWindow::AnalogClockWindow()
{
    setTitle(&quot;Analog Clock&quot;);
    resize(200, 200);

    m_timerId = startTimer(1000);
}
</db:programlisting>
<db:para>We set a title on the window and resize to a reasonable size. Then we start a timer which we will use to redraw the clock every second.</db:para>
<db:programlisting language="cpp">void AnalogClockWindow::timerEvent(QTimerEvent *event)
{
    if (event-&gt;timerId() == m_timerId)
        renderLater();
}
</db:programlisting>
<db:para>The timerEvent function is called every second as a result of our startTimer call. Making use of the convenience in the base class, we schedule the window to be repainted.</db:para>
<db:para>Checking the timer's id is not strictly needed as we only have one active timer in this instance, but it is good practice to do so.</db:para>
<db:programlisting language="cpp">void AnalogClockWindow::render(QPainter *p)
{
    static const QPoint hourHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -40)
    };
    static const QPoint minuteHand[3] = {
        QPoint(7, 8),
        QPoint(-7, 8),
        QPoint(0, -70)
    };

    QColor hourColor(127, 0, 127);
    QColor minuteColor(0, 127, 127, 191);
</db:programlisting>
<db:para>Before we set up the painter and draw the clock, we first define two lists of <db:link xlink:href="qpoint.xml">QPoint</db:link>s and two <db:link xlink:href="qcolor-qtgui-proxy.xml">QColor</db:link>s that will be used for the hour and minute hands. The minute hand's color has an alpha component of 191, meaning that it's 75% opaque.</db:para>
<db:programlisting language="cpp">    p-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>We call QPainter::setRenderHint() with QPainter::Antialiasing to turn on antialiasing. This makes drawing of diagonal lines much smoother.</db:para>
<db:programlisting language="cpp">    p-&gt;translate(width() / 2, height() / 2);

    int side = qMin(width(), height());
    p-&gt;scale(side / 200.0, side / 200.0);
</db:programlisting>
<db:para>The translation moves the origin to the center of the window, and the scale operation ensures that the following drawing operations are scaled to fit within the window. We use a scale factor that let's us use x and y coordinates between -100 and 100, and that ensures that these lie within the length of the window's shortest side.</db:para>
<db:para>To make our code simpler, we will draw a fixed size clock face that will be positioned and scaled so that it lies in the center of the window.</db:para>
<db:para>We also determine the length of the window's shortest side so that we can fit the clock face inside the window.</db:para>
<db:para>The painter takes care of all the transformations made during the rendering, and ensures that everything is drawn correctly. Letting the painter handle transformations is often easier than performing manual calculations.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/analogclockwindow-viewport.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>We draw the hour hand first, using a formula that rotates the coordinate system counterclockwise by a number of degrees determined by the current hour and minute. This means that the hand will be shown rotated clockwise by the required amount.</db:para>
<db:programlisting language="cpp">    p-&gt;setPen(Qt::NoPen);
    p-&gt;setBrush(hourColor);
</db:programlisting>
<db:para>We set the pen to be <db:link xlink:href="qt.xml#PenStyle-enum">Qt::NoPen</db:link> because we don't want any outline, and we use a solid brush with the color appropriate for displaying hours. Brushes are used when filling in polygons and other geometric shapes.</db:para>
<db:programlisting language="cpp">    QTime time = QTime::currentTime();

    p-&gt;save();
    p-&gt;rotate(30.0 * ((time.hour() + time.minute() / 60.0)));
    p-&gt;drawConvexPolygon(hourHand, 3);
    p-&gt;restore();
</db:programlisting>
<db:para>We save and restore the transformation matrix before and after the rotation because we want to place the minute hand without having to take into account any previous rotations.</db:para>
<db:programlisting language="cpp">    p-&gt;setPen(hourColor);

    for (int i = 0; i &lt; 12; ++i) {
        p-&gt;drawLine(88, 0, 96, 0);
        p-&gt;rotate(30.0);
    }
</db:programlisting>
<db:para>We draw markers around the edge of the clock for each hour. We draw each marker then rotate the coordinate system so that the painter is ready for the next one.</db:para>
<db:programlisting language="cpp">    p-&gt;setPen(Qt::NoPen);
    p-&gt;setBrush(minuteColor);
    p-&gt;save();
    p-&gt;rotate(6.0 * (time.minute() + time.second() / 60.0));
    p-&gt;drawConvexPolygon(minuteHand, 3);
    p-&gt;restore();
</db:programlisting>
<db:para>The minute hand is rotated in a similar way to the hour hand.</db:para>
<db:programlisting language="cpp">    p-&gt;setPen(minuteColor);

    for (int j = 0; j &lt; 60; ++j) {
        if ((j % 5) != 0)
            p-&gt;drawLine(92, 0, 96, 0);
        p-&gt;rotate(6.0);
    }
</db:programlisting>
<db:para>Again, we draw markers around the edge of the clock, but this time to indicate minutes. We skip multiples of 5 to avoid drawing minute markers on top of hour markers.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="analogclock/analogclock.pro">analogclock/analogclock.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="analogclock/main.cpp">analogclock/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
