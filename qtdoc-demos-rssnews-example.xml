<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - RSS News</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML RSS news reader that uses <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> and <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link> to download XML data, <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> and <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> to create a category list, and <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> to display the data.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-rssnews-small.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>RSS News</db:emphasis> demonstrates the following <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Using custom types to create screens and screen controls.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using list models and list elements to represent data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using XML list models to download XML data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using list views to display data.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using the <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> type to create a footer for the news item list view.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type to create a button for closing the app.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="using-custom-types">
<db:title>Using Custom Types</db:title>
<db:para>In the RSS News app, we use the following custom types that are each defined in a separate .qml file:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>BusyIndicator.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>CategoryDelegate.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>NewsDelegate.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>RssFeeds.qml</db:para>
</db:listitem>
<db:listitem>
<db:para>ScrollBar.qml</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To use the custom types, we add an import statement to the main QML file, rssnews.qml that imports the folder called content where the types are located:</db:para>
<db:programlisting language="cpp">import &quot;./content&quot;
</db:programlisting>
</db:section>
<db:section xml:id="creating-the-main-window">
<db:title>Creating the Main Window</db:title>
<db:para>In rssnews.qml, we use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type with custom properties to create the app main window:</db:para>
<db:programlisting language="cpp">Rectangle {
    id: window

    width: 800
    height: 480

    property string currentFeed: rssFeeds.get(0).feed
    property bool loading: feedModel.status === XmlListModel.Loading
    property bool isPortrait: Screen.primaryOrientation === Qt.PortraitOrientation
</db:programlisting>
<db:para>We will use the custom properties later for loading XML data and for adjusting the screen layout depending on its orientation.</db:para>
</db:section>
<db:section xml:id="creating-a-category-list">
<db:title>Creating a Category List</db:title>
<db:para>In rssnews.qml, we use the RssFeeds custom type that we specify in RssFeeds.qml to create a list of feed categories:</db:para>
<db:programlisting language="cpp">    RssFeeds { id: rssFeeds }
</db:programlisting>
<db:para>In RssFeeds.qml, we use a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> type with a <db:link xlink:href="qml-qtqml-models-listelement.xml">ListElement</db:link> type to create a category list where list elements represent feed categories:</db:para>
<db:programlisting language="cpp">ListModel {
    ListElement { name: &quot;Top Stories&quot;; feed: &quot;news.yahoo.com/rss/topstories&quot;; image: &quot;images/TopStories.jpg&quot; }
    ListElement { name: &quot;World&quot;; feed: &quot;news.yahoo.com/rss/world&quot;; image: &quot;images/World.jpg&quot; }
    ListElement { name: &quot;Europe&quot;; feed: &quot;news.yahoo.com/rss/europe&quot;; image: &quot;images/Europe.jpg&quot; }
    ListElement { name: &quot;Asia&quot;; feed: &quot;news.yahoo.com/rss/asia&quot;; image: &quot;images/Asia.jpg&quot; }
    ListElement { name: &quot;U.S. National&quot;; feed: &quot;news.yahoo.com/rss/us&quot;; image: &quot;images/USNational.jpg&quot;  }
    ListElement { name: &quot;Politics&quot;; feed: &quot;news.yahoo.com/rss/politics&quot;; image: &quot;images/Politics.jpg&quot; }
    ListElement { name: &quot;Business&quot;; feed: &quot;news.yahoo.com/rss/business&quot;; image: &quot;images/Business.jpg&quot; }
    ListElement { name: &quot;Technology&quot;; feed: &quot;news.yahoo.com/rss/tech&quot;; image: &quot;images/Technology.jpg&quot; }
    ListElement { name: &quot;Entertainment&quot;; feed: &quot;news.yahoo.com/rss/entertainment&quot;; image: &quot;images/Entertainment.jpg&quot; }
    ListElement { name: &quot;Health&quot;; feed: &quot;news.yahoo.com/rss/health&quot;; image: &quot;images/Health.jpg&quot; }
    ListElement { name: &quot;Science&quot;; feed: &quot;news.yahoo.com/rss/science&quot;; image: &quot;images/Science.jpg&quot; }
    ListElement { name: &quot;Sports&quot;; feed: &quot;news.yahoo.com/rss/sports&quot;; image: &quot;images/Sports.jpg&quot; }
}
</db:programlisting>
<db:para>List elements are defined like other QML types except that they contain a collection of <db:emphasis>role</db:emphasis> definitions instead of properties. Roles both define how the data is accessed and include the data itself.</db:para>
<db:para>For each list element, we use the name role to specify the category name, the feed role to specify the URL to load the data from, and the image role to display an image for the category.</db:para>
<db:para>In rssnews.qml, we use a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display the category list:</db:para>
<db:programlisting language="cpp">    ListView {
        id: categories
        property int itemWidth: 190

        width: isPortrait ? parent.width : itemWidth
        height: isPortrait ? itemWidth : parent.height
        orientation: isPortrait ? ListView.Horizontal : ListView.Vertical
        anchors.top: parent.top
        model: rssFeeds
        delegate: CategoryDelegate { itemSize: categories.itemWidth }
        spacing: 3
    }
</db:programlisting>
<db:para>To lay out the category list horizontally at the top of the window in portrait orientation and vertically on the left side in landscape orientation, we use the orientation property. Based on the orientation, we bind either the width or the height of the list to a fixed value (itemWidth).</db:para>
<db:para>We use the anchors.top property to position the list view at the top of the screen in both orientations.</db:para>
<db:para>We use the model property to load XML data from the rssFeeds model, and CategoryDelegate as the delegate to instantiate each item in the list.</db:para>
</db:section>
<db:section xml:id="creating-list-elements">
<db:title>Creating List Elements</db:title>
<db:para>In CategoryDelegate.qml, we use the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type with custom properties to create list elements:</db:para>
<db:programlisting language="cpp">Rectangle {
    id: delegate

    property bool selected: ListView.isCurrentItem
</db:programlisting>
<db:para>We set the selected property to the ListView.isCurrentItem attached property to specify that selected is true if delegate is the current item.</db:para>
<db:para>We use the <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type source property to display the image, centered in the delegate, specified for the list element by the image role in the rssFeeds list model:</db:para>
<db:programlisting language="cpp">    Image {
        anchors.centerIn: parent
        source: image
    }
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type to add titles to list elements:</db:para>
<db:programlisting language="cpp">    Text {
        id: titleText

        anchors {
            left: parent.left; leftMargin: 20
            right: parent.right; rightMargin: 20
            top: parent.top; topMargin: 20
        }

        font { pixelSize: 18; bold: true }
        text: name
        color: selected ? &quot;#ffffff&quot; : &quot;#ebebdd&quot;
        scale: selected ? 1.15 : 1.0
        Behavior on color { ColorAnimation { duration: 150 } }
        Behavior on scale { PropertyAnimation { duration: 300 } }
</db:programlisting>
<db:para>We use the anchors property to position the title at the top of the list element, with a 20-pixel margin. We use font properties to adjust font size and text formatting.</db:para>
<db:para>We use the color property to brighten the text and to scale it slightly larger when the list item is the current item. By applying a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> to the property, we animate the actions of selecting and deselecting list items.</db:para>
<db:para>We use a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type to download XML data when users tap a category list element:</db:para>
<db:programlisting language="cpp">    MouseArea {
        anchors.fill: delegate
        onClicked: {
            delegate.ListView.view.currentIndex = index
            if (window.currentFeed == feed)
                feedModel.reload()
            else
                window.currentFeed = feed
        }
    }
</db:programlisting>
<db:para>The anchors.fill property is set to delegate to enable users to tap anywhere within the list element.</db:para>
<db:para>We use the onClicked signal handler to load the XML data for the category list. If the tapped category is already current, the reload() function is called to reload the data.</db:para>
</db:section>
<db:section xml:id="downloading-xml-data">
<db:title>Downloading XML Data</db:title>
<db:para>In rssnews.qml, we use an <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> type as a data source for <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> elements to display news items in the selected category:</db:para>
<db:programlisting language="cpp">    XmlListModel {
        id: feedModel

        source: &quot;http://&quot; + window.currentFeed
        query: &quot;/rss/channel/item[child::media:content]&quot;
        namespaceDeclarations: &quot;declare namespace media = 'http://search.yahoo.com/mrss/';&quot;
</db:programlisting>
<db:para>We use the source property and the window.currentFeed custom property to fetch news items for the selected category.</db:para>
<db:para>The query property specifies that the <db:link xlink:href="qml-qtquick-xmllistmodel-xmllistmodel.xml">XmlListModel</db:link> generates a model item for each &lt;item&gt; in the XML document.</db:para>
<db:para>We use the <db:link xlink:href="qml-qtquick-xmllistmodel-xmlrole.xml">XmlRole</db:link> type to specify the model item attributes. Each model item has the title, description, image, link, and pubDate attributes that match the values of the corresponding &lt;item&gt; in the XML document:</db:para>
<db:programlisting language="cpp">        XmlRole { name: &quot;title&quot;; query: &quot;title/string()&quot; }
        // Remove any links from the description
        XmlRole { name: &quot;description&quot;; query: &quot;fn:replace(description/string(), '\&amp;amp;lt;a href=.*\/a\&amp;amp;gt;', '')&quot; }
        XmlRole { name: &quot;image&quot;; query: &quot;media:content/@url/string()&quot; }
        XmlRole { name: &quot;link&quot;; query: &quot;link/string()&quot; }
        XmlRole { name: &quot;pubDate&quot;; query: &quot;pubDate/string()&quot; }
    }
</db:programlisting>
<db:para>We use the feedModel model in a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display the data:</db:para>
<db:programlisting language="cpp">    ListView {
        id: list

        anchors.left: isPortrait ? window.left : categories.right
        anchors.right: closeButton.left
        anchors.top: isPortrait ? categories.bottom : window.top
        anchors.bottom: window.bottom
        anchors.leftMargin: 30
        anchors.rightMargin: 4
        clip: isPortrait
        model: feedModel
        footer: footerText
        delegate: NewsDelegate {}
    }
</db:programlisting>
<db:para>To list the news items below the category list in portrait orientation and to its right in landscape orientation, we use the isPortrait custom property to anchor the top of the news items list to the left of window and bottom of categories in portrait orientation and to the right of categories and bottom of window in landscape orientation.</db:para>
<db:para>We use the anchors.bottom property to anchor the bottom of the list view to the bottom of the window in both orientations.</db:para>
<db:para>In portrait orientation, we clip the painting of the news items to the bounding rectangle of the list view to avoid graphical artifacts when news items are scrolled over other items. In landscape, this is not required, because the list spans the entire screen vertically.</db:para>
<db:para>We use the model property to load XML data from the feedModel model, and use NewsDelegate as the delegate to instantiate each item in the list.</db:para>
<db:para>In NewsDelegate.qml, we use a <db:link xlink:href="qml-qtquick-column.xml">Column</db:link> type to lay out the XML data:</db:para>
<db:programlisting language="cpp">Column {
    id: delegate
    width: delegate.ListView.view.width
    spacing: 8
</db:programlisting>
<db:para>Within the column, we use a <db:link xlink:href="10-qdoc-commands-tablesandlists.xml#row">Row</db:link> and another column to position images and title text:</db:para>
<db:programlisting language="cpp">    Row {
        width: parent.width
        spacing: 8

        Column {
            Item {
                width: 4
                height: titleText.font.pixelSize / 4
            }

            Image {
                id: titleImage
                source: image
            }
        }

        Text {
            id: titleText

            text: title
            width: delegate.width - titleImage.width
            wrapMode: Text.WordWrap
            font.pixelSize: 26
            font.bold: true
        }
    }
</db:programlisting>
<db:para>We generate a textual representation of how long ago the item was posted using the timeSinceEvent() JavaScript function:</db:para>
<db:programlisting language="cpp">    Text {
        width: delegate.width
        font.pixelSize: 12
        textFormat: Text.RichText
        font.italic: true
        text: timeSinceEvent(pubDate) + &quot; (&amp;lt;a href=\&quot;&quot; + link + &quot;\&quot;&amp;gt;Link&amp;lt;/a&amp;gt;)&quot;
        onLinkActivated: {
            Qt.openUrlExternally(link)
        }
    }
</db:programlisting>
<db:para>We use the onLinkActivated signal handler to open the URL in an external browser when users select the link.</db:para>
</db:section>
<db:section xml:id="providing-feedback-to-users">
<db:title>Providing Feedback to Users</db:title>
<db:para>In CategoryDelegate.qml, we use the BusyIndicator custom type to indicate activity while the XML data is being loaded:</db:para>
<db:programlisting language="cpp">    BusyIndicator {
        scale: 0.8
        visible: delegate.ListView.isCurrentItem &amp;amp;&amp;amp; window.loading
        anchors.centerIn: parent
    }
</db:programlisting>
<db:para>We use the scale property to reduce the indicator size to 0.8. We bind the visible property to the isCurrentItem attached property of the delegate list view and loading property of the main window to display the indicator image when a category list item is the current item and XML data is being loaded.</db:para>
<db:para>We define the BusyIndicator type in BusyIndicator.qml. We use an <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type to display an image and apply a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> to its rotation property to rotate the image in an infinite loop:</db:para>
<db:programlisting language="cpp">Image {
    id: container

    source: &quot;images/busy.png&quot;;

    NumberAnimation on rotation {
        running: container.visible
        from: 0; to: 360;
        loops: Animation.Infinite;
        duration: 1200
    }
}
</db:programlisting>
<db:para>In your apps, you can also use the <db:link xlink:href="qml-qtquick-controls2-busyindicator.xml">BusyIndicator</db:link> type from the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module.</db:para>
</db:section>
<db:section xml:id="creating-scroll-bars">
<db:title>Creating Scroll Bars</db:title>
<db:para>In rssnews.qml, we use our own custom ScrollBar type to create scroll bars in the category and news item list views. In your apps, you can also use the <db:link xlink:href="qml-qtquick-controls2-scrollview.xml">ScrollView</db:link> type from the <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> module.</db:para>
<db:para>First, we create a scroll bar in the category list view. We bind the orientation property to the isPortrait property and to the Horizontal value of the Qt::Orientation enum type to display a horizontal scroll bar in portrait orientation and to the Vertical value to display a vertical scroll bar in landscape orientation:</db:para>
<db:programlisting language="cpp">    ScrollBar {
        id: listScrollBar

        orientation: isPortrait ? Qt.Horizontal : Qt.Vertical
        height: isPortrait ? 8 : categories.height;
        width: isPortrait ? categories.width : 8
        scrollArea: categories;
        anchors.right: categories.right
    }
</db:programlisting>
<db:para>Same as with the categories list view, we adjust the width and height of the scroll bar based on the isPortrait property.</db:para>
<db:para>We use the scrollArea property to display the scroll bar in the categories list view.</db:para>
<db:para>We use the anchors.right property to anchor the scroll bar to the right side of the category list.</db:para>
<db:programlisting language="cpp">    ScrollBar {
        scrollArea: list
        width: 8
        anchors.right: window.right
        anchors.top: isPortrait ? categories.bottom : window.top
        anchors.bottom: window.bottom
    }
</db:programlisting>
<db:para>Second, we create another scroll bar in the news item list view. We want a vertical scroll bar to appear on the right side of the view regardless of screen orientation, so we can set the width property to 8 and bind the anchors.right property to the window.right property. We use the anchors.top property to anchor the scroll bar top to the bottom of the category list in portrait orientation and to the top of the news item list in landscape orientation. We use the anchors.bottom property to anchor the scroll bar bottom to the list view bottom in both orientations.</db:para>
<db:para>We define the ScrollBar type in ScrollBar.qml. We use an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type with custom properties to create a container for the scroll bar:</db:para>
<db:programlisting language="cpp">Item {
    id: container

    property variant scrollArea
    property int orientation: Qt.Vertical

    opacity: 0
</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-borderimage.xml">BorderImage</db:link> type to display the scroll bar thumb at the x and y position that we calculate by using the position() function:</db:para>
<db:programlisting language="cpp">    BorderImage {
        source: &quot;images/scrollbar.png&quot;
        border { left: 1; right: 1; top: 1; bottom: 1 }
        x: container.orientation == Qt.Vertical ? 2 : position()
        y: container.orientation == Qt.Vertical ? position() : 2
        width: container.orientation == Qt.Vertical ? container.width - 4 : size()
        height: container.orientation == Qt.Vertical ? size() : container.height - 4
    }
</db:programlisting>
<db:para>We use the size function to calculate the thumb width and height depending on the screen orientation.</db:para>
<db:para>We use states to make the scroll bar visible when the users move the scroll area:</db:para>
<db:programlisting language="cpp">    states: State {
        name: &quot;visible&quot;
        when: container.orientation == Qt.Vertical ?
                  scrollArea.movingVertically :
                  scrollArea.movingHorizontally
        PropertyChanges { target: container; opacity: 1.0 }
    }
</db:programlisting>
<db:para>We use transitions to apply a <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link> to the &quot;opacity&quot; property when the state changes from &quot;visible&quot; to the default state:</db:para>
<db:programlisting language="cpp">    transitions: Transition {
        from: &quot;visible&quot;; to: &quot;&quot;
        NumberAnimation { properties: &quot;opacity&quot;; duration: 600 }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="creating-footers">
<db:title>Creating Footers</db:title>
<db:para>In rssnews.qml, we use a <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> type with a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type to create a footer for the news list view:</db:para>
<db:programlisting language="cpp">    Component {
        id: footerText

        Rectangle {
            width: parent.width
            height: closeButton.height
            color: &quot;lightgray&quot;

            Text {
                text: &quot;RSS Feed from Yahoo News&quot;
                anchors.centerIn: parent
                font.pixelSize: 14
            }
        }
    }
</db:programlisting>
<db:para>We bind the width of the footer to the width of the component and the height to the of close button to align them when no news items are displayed.</db:para>
</db:section>
<db:section xml:id="creating-buttons">
<db:title>Creating Buttons</db:title>
<db:para>In rssnews.qml, we use an <db:link xlink:href="09-qdoc-commands-includingimages.xml#image">Image</db:link> type to create a simple push button that users can tap to close the app:</db:para>
<db:programlisting language="cpp">    Image {
        id: closeButton
        source: &quot;content/images/btn_close.png&quot;
        scale: 0.8
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.margins: 4
        opacity: (isPortrait &amp;amp;&amp;amp; categories.moving) ? 0.2 : 1.0
        Behavior on opacity {
            NumberAnimation { duration: 300; easing.type: Easing.OutSine }
        }

        MouseArea {
            anchors.fill: parent
            onClicked: {
                Qt.quit()
            }
        }
    }
</db:programlisting>
<db:para>We use anchors to position the close button in the top right corner of the news list view, with 4-pixel margins. Because the close button overlaps the category list in portrait orientation, we animate the opacity property to make the button almost fully transparent when users are scrolling the category list.</db:para>
<db:para>We use the onClicked signal handler within a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to call the quit() function when users select the close button.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/BusyIndicator.qml">demos/rssnews/content/BusyIndicator.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/CategoryDelegate.qml">demos/rssnews/content/CategoryDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/NewsDelegate.qml">demos/rssnews/content/NewsDelegate.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/RssFeeds.qml">demos/rssnews/content/RssFeeds.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/ScrollBar.qml">demos/rssnews/content/ScrollBar.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/main.cpp">demos/rssnews/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/rssnews.pro">demos/rssnews/rssnews.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/rssnews.qml">demos/rssnews/rssnews.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/rssnews.qmlproject">demos/rssnews/rssnews.qmlproject</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/rssnews.qrc">demos/rssnews/rssnews.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Asia.jpg">demos/rssnews/content/images/Asia.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Business.jpg">demos/rssnews/content/images/Business.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Entertainment.jpg">demos/rssnews/content/images/Entertainment.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Europe.jpg">demos/rssnews/content/images/Europe.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Health.jpg">demos/rssnews/content/images/Health.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Politics.jpg">demos/rssnews/content/images/Politics.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Science.jpg">demos/rssnews/content/images/Science.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Sports.jpg">demos/rssnews/content/images/Sports.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/Technology.jpg">demos/rssnews/content/images/Technology.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/TopStories.jpg">demos/rssnews/content/images/TopStories.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/USNational.jpg">demos/rssnews/content/images/USNational.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/World.jpg">demos/rssnews/content/images/World.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/btn_close.png">demos/rssnews/content/images/btn_close.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/busy.png">demos/rssnews/content/images/busy.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/rssnews/content/images/scrollbar.png">demos/rssnews/content/images/scrollbar.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
