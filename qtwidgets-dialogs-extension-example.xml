<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Extension Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Extension example shows how to add an extension to a <db:link xlink:href="qdialog.xml">QDialog</db:link> using the <db:link xlink:href="qabstractbutton.xml#toggled">QAbstractButton::toggled</db:link>() signal and the <db:link xlink:href="qwidget.xml#visible-prop">QWidget::setVisible</db:link>() slot.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:alt>Screenshot of the Extension example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/extension-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Extension application lets the user add search parameters in a dialog and launch a simple or advanced search.</db:para>
<db:para>The simple search has two options: <db:guilabel>Match case</db:guilabel> and <db:guilabel>Search from start</db:guilabel>. The advanced search offers search for <db:guilabel>Whole words</db:guilabel>, <db:guilabel>Search backward</db:guilabel>, and <db:guilabel>Search selection</db:guilabel>. The application starts with simple search as the default. Click the <db:guilabel>More</db:guilabel> button to show the advanced search options:</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Extension example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/extension_more.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="finddialog-class-definition">
<db:title>FindDialog Class Definition</db:title>
<db:para>The FindDialog class inherits <db:link xlink:href="qdialog.xml">QDialog</db:link>. <db:link xlink:href="qdialog.xml">QDialog</db:link> is the base class for dialog windows. A dialog window is a top-level window mostly used for short-term tasks and brief communications with the user.</db:para>
<db:programlisting language="cpp">class FindDialog : public QDialog
{
    Q_OBJECT

public:
    FindDialog(QWidget *parent = nullptr);

private:
    QLabel *label;
    QLineEdit *lineEdit;
    QCheckBox *caseCheckBox;
    QCheckBox *fromStartCheckBox;
    QCheckBox *wholeWordsCheckBox;
    QCheckBox *searchSelectionCheckBox;
    QCheckBox *backwardCheckBox;
    QDialogButtonBox *buttonBox;
    QPushButton *findButton;
    QPushButton *moreButton;
    QWidget *extension;
};
</db:programlisting>
<db:para>The FindDialog widget is the main application widget, and displays the application's search options and controlling buttons.</db:para>
<db:para>In addition to the constructor, there are several child widgets:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> with an associated <db:link xlink:href="qlabel.xml">QLabel</db:link> to let the user type a word to search for.</db:para>
</db:listitem>
<db:listitem>
<db:para>Several <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es to facilitate the search options.</db:para>
</db:listitem>
<db:listitem>
<db:para>Three <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>s:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>the <db:guilabel>Find</db:guilabel> button to start a search</db:para>
</db:listitem>
<db:listitem>
<db:para>the <db:guilabel>More</db:guilabel> button to enable an advanced search</db:para>
</db:listitem>
<db:listitem>
<db:para>a <db:link xlink:href="qwidget.xml">QWidget</db:link> representing the application's extension part</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="finddialog-class-implementation">
<db:title>FindDialog Class Implementation</db:title>
<db:para>Create the standard child widgets for the simple search in the constructor: the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> with the associated <db:link xlink:href="qlabel.xml">QLabel</db:link>, two {<db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>}es and all the <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>s.</db:para>
<db:programlisting language="cpp">FindDialog::FindDialog(QWidget *parent)
    : QDialog(parent)
{
    label = new QLabel(tr(&quot;Find &amp;amp;what:&quot;));
    lineEdit = new QLineEdit;
    label-&amp;gt;setBuddy(lineEdit);

    caseCheckBox = new QCheckBox(tr(&quot;Match &amp;amp;case&quot;));
    fromStartCheckBox = new QCheckBox(tr(&quot;Search from &amp;amp;start&quot;));
    fromStartCheckBox-&amp;gt;setChecked(true);

    findButton = new QPushButton(tr(&quot;&amp;amp;Find&quot;));
    findButton-&amp;gt;setDefault(true);

    moreButton = new QPushButton(tr(&quot;&amp;amp;More&quot;));
    moreButton-&amp;gt;setCheckable(true);
</db:programlisting>
<db:para>This snippet illustrates how you can define a shortcut key for a widget. A shortcut should be defined by putting the ampersand character (&amp;) in front of the letter that should become the shortcut. For example, for <db:guilabel>Find what</db:guilabel>, pressing <db:guilabel>Alt</db:guilabel> and <db:guilabel>w</db:guilabel> transfers focus to the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> widget. Shortcuts can also be used for checking on or off a checkmark. For example, pressing <db:guilabel>Alt</db:guilabel> and <db:guilabel>c</db:guilabel> puts the check mark on <db:guilabel>Match Case</db:guilabel> if it was unchecked and vice versa. It is the <db:link xlink:href="qlabel.xml#setBuddy">QLabel::setBuddy</db:link>() method that links a widget to the shortcut character if it has been defined.</db:para>
<db:para>Set the <db:guilabel>Find</db:guilabel> button's default property to true, using the <db:link xlink:href="qpushbutton.xml#default-prop">QPushButton::setDefault</db:link>() function. Then the push button will be pressed if the user presses the Enter (or Return) key. Note that a <db:link xlink:href="qdialog.xml">QDialog</db:link> can only have one default button.</db:para>
<db:programlisting language="cpp">    extension = new QWidget;

    wholeWordsCheckBox = new QCheckBox(tr(&quot;&amp;amp;Whole words&quot;));
    backwardCheckBox = new QCheckBox(tr(&quot;Search &amp;amp;backward&quot;));
    searchSelectionCheckBox = new QCheckBox(tr(&quot;Search se&amp;amp;lection&quot;));
</db:programlisting>
<db:para>Create the extension widget, and the <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link>es associated with the advanced search options.</db:para>
<db:programlisting language="cpp">    buttonBox = new QDialogButtonBox(Qt::Vertical);
    buttonBox-&amp;gt;addButton(findButton, QDialogButtonBox::ActionRole);
    buttonBox-&amp;gt;addButton(moreButton, QDialogButtonBox::ActionRole);

    connect(moreButton, &amp;amp;QAbstractButton::toggled, extension, &amp;amp;QWidget::setVisible);

    QVBoxLayout *extensionLayout = new QVBoxLayout;
    extensionLayout-&amp;gt;setContentsMargins(QMargins());
    extensionLayout-&amp;gt;addWidget(wholeWordsCheckBox);
    extensionLayout-&amp;gt;addWidget(backwardCheckBox);
    extensionLayout-&amp;gt;addWidget(searchSelectionCheckBox);
    extension-&amp;gt;setLayout(extensionLayout);
</db:programlisting>
<db:para>Now that the extension widget is created, connect the <db:guilabel>More</db:guilabel> button's <db:link xlink:href="qabstractbutton.xml#toggled">toggled</db:link>() signal to the extension widget's <db:link xlink:href="qwidget.xml#visible-prop">setVisible</db:link>() slot.</db:para>
<db:para>The <db:link xlink:href="qabstractbutton.xml#toggled">QAbstractButton::toggled</db:link>() signal is emitted whenever a checkable button changes its state. The signal's argument is true if the button is checked, or false if the button is unchecked. The <db:link xlink:href="qwidget.xml#visible-prop">QWidget::setVisible</db:link>() slot sets the widget's visible status. If the status is true the widget is shown, otherwise the widget is hidden.</db:para>
<db:para>Since the <db:guilabel>More</db:guilabel> button is checkable, the connection makes sure that the extension widget is shown depending on the state of the <db:guilabel>More</db:guilabel> button.</db:para>
<db:para>Create checkboxes associated with the advanced search options in a layout installed on the extension widget.</db:para>
<db:programlisting language="cpp">    QHBoxLayout *topLeftLayout = new QHBoxLayout;
    topLeftLayout-&amp;gt;addWidget(label);
    topLeftLayout-&amp;gt;addWidget(lineEdit);

    QVBoxLayout *leftLayout = new QVBoxLayout;
    leftLayout-&amp;gt;addLayout(topLeftLayout);
    leftLayout-&amp;gt;addWidget(caseCheckBox);
    leftLayout-&amp;gt;addWidget(fromStartCheckBox);

    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;setSizeConstraint(QLayout::SetFixedSize);
    mainLayout-&amp;gt;addLayout(leftLayout, 0, 0);
    mainLayout-&amp;gt;addWidget(buttonBox, 0, 1);
    mainLayout-&amp;gt;addWidget(extension, 1, 0, 1, 2);
    mainLayout-&amp;gt;setRowStretch(2, 1);

    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Extension&quot;));
</db:programlisting>
<db:para>Before creating the main layout, create several child layouts for the widgets. First align the <db:link xlink:href="qlabel.xml">QLabel</db:link> and its buddy, the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, using a <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link>. Then align the <db:link xlink:href="qlabel.xml">QLabel</db:link> and the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> vertically with the checkboxes associated with the simple search, using a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>. Create also a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> for the buttons. Finally, lay out the two latter layouts and the extension widget using a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>.</db:para>
<db:programlisting language="cpp">    extension-&amp;gt;hide();
}
</db:programlisting>
<db:para>Hide the extension widget using the <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>() function, making the application only show the simple search options when it starts. When the user wants to access the advanced search options, the dialog only needs to change the visibility of the extension widget. Qt's layout management takes care of the dialog's appearance.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/dialogs/extension?h=6.0">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
