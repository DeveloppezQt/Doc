<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebEngine Debugging and Profiling</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt WebEngine Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="console-logging">
<db:title>Console Logging</db:title>
<db:para>JavaScript executed inside Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> can use the <db:link xlink:href="https://developers.google.com/web/tools/javascript/console/console-write">Chrome console API</db:link> to log information to a console. The logging messages are forwarded to Qt's logging facilities inside a <db:code>js</db:code> <db:link xlink:href="qloggingcategory.xml">logging category</db:link>. However, only warning and fatal messages are printed by default. To change this, you either have to set custom rules for the <db:code>js</db:code> category, or provide custom message handlers by reimplementing <db:link xlink:href="">QWebEnginePage::javaScriptConsoleMessage()</db:link>, or connecting to <db:link xlink:href="qml-qtwebengine-webengineview.xml#javaScriptConsoleMessage-signal">WebEngineView::javaScriptConsoleMessage</db:link>().</db:para>
<db:para>All messages can also be accessed through the Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> developer tools.</db:para>
</db:section>
<db:section xml:id="qt-webengine-developer-tools">
<db:title>Qt WebEngine Developer Tools</db:title>
<db:para>The Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> module provides web developer tools that make it easy to inspect and debug layout and performance issues of any web content.</db:para>
<db:para>The developer tools are accessed as a local web page using a Chromium or Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> based browser, such as the Chrome browser.</db:para>
<db:para>To activate the developer tools, start an application that uses Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> with the command-line arguments:</db:para>
<db:programlisting language="cpp" role="bad">--remote-debugging-port=&lt;port_number&gt;
</db:programlisting>
<db:para>Where <db:code>&lt;port_number&gt;</db:code> refers to a local network port. The web developer tools can then be accessed by launching a browser at the address <db:code>http://localhost:&lt;port_number&gt;</db:code>.</db:para>
<db:para>Alternatively, the environment variable QTWEBENGINE_REMOTE_DEBUGGING can be set. It can be set as either just a port working similarly to <db:code>--remote-debugging-port</db:code> or given both a host address and a port. The latter can be used to control which network interface to export the interface on, so that you can access the developer tools from a remote device.</db:para>
<db:para>For a detailed explanation of the capabilities of developer tools, see the <db:link xlink:href="https://developers.google.com/web/tools/chrome-devtools">Chrome DevTools</db:link> page.</db:para>
</db:section>
</db:article>
