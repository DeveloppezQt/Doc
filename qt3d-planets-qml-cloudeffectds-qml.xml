<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Planets QML Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates combining Qt 3D rendering and Qt Quick 2 elements.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import Qt3D.Core 2.0
import Qt3D.Render 2.0

Effect {
    id: root

    property Texture2D shadowTexture
    property PlanetsLight light

    parameters: [
        Parameter { name: &quot;lightPosition&quot;;  value: root.light.lightPosition },
        Parameter { name: &quot;lightIntensity&quot;; value: root.light.lightIntensity }
    ]

    techniques: [
        Technique {
            graphicsApiFilter {
                api: GraphicsApiFilter.OpenGL
                profile: GraphicsApiFilter.CoreProfile
                majorVersion: 3
                minorVersion: 2
            }

            annotations: [ Annotation { name: &quot;name&quot;; value: &quot;Desktop&quot; } ]

            renderPasses: [
                RenderPass {
                    annotations: [ Annotation { name : &quot;pass&quot;; value : &quot;forward&quot; } ]
                    bindings: [
                        // Uniforms (those provided by the user)
                        ParameterMapping {
                            parameterName: &quot;ambient&quot;;
                            shaderVariableName: &quot;ka&quot;;
                            bindingType: ParameterMapping.Uniform
                        }
                    ]

                    shaderProgram: ShaderProgram {
                        vertexShaderCode:   loadSource(&quot;qrc:/shaders/gl3/planetD.vert&quot;)
                        fragmentShaderCode: loadSource(&quot;qrc:/shaders/gl3/planetDS.frag&quot;)
                    }

                    // no special render state set =&gt; use the default set of states
                }
            ]
        },
        Technique {
            graphicsApiFilter {
                api: GraphicsApiFilter.OpenGL
                majorVersion: 2
            }

            annotations: [ Annotation { name: &quot;name&quot;; value: &quot;ES2&quot; } ]

            renderPasses: [
                RenderPass {
                    annotations: [ Annotation { name : &quot;pass&quot;; value : &quot;forward&quot; } ]

                    bindings: [
                        // Uniforms (those provided by the user)
                        ParameterMapping {
                            parameterName: &quot;ambient&quot;;
                            shaderVariableName: &quot;ka&quot;;
                            bindingType: ParameterMapping.Uniform
                        }
                    ]

                    shaderProgram: ShaderProgram {
                        vertexShaderCode:   loadSource(&quot;qrc:/shaders/es2/planetD.vert&quot;)
                        fragmentShaderCode: loadSource(&quot;qrc:/shaders/es2/planetDS.frag&quot;)
                    }

                    // no special render state set =&gt; use the default set of states
                }
            ]
        },
        Technique {
            graphicsApiFilter {
                api: GraphicsApiFilter.OpenGLES
                majorVersion: 2
                minorVersion: 0
            }

            annotations: [ Annotation { name: &quot;name&quot;; value: &quot;ES2&quot; } ]

            renderPasses: [
                RenderPass {
                    annotations: [ Annotation { name : &quot;pass&quot;; value : &quot;forward&quot; } ]

                    bindings: [
                        // Uniforms (those provided by the user)
                        ParameterMapping {
                            parameterName: &quot;ambient&quot;;
                            shaderVariableName: &quot;ka&quot;;
                            bindingType: ParameterMapping.Uniform
                        }
                    ]

                    shaderProgram: ShaderProgram {
                        vertexShaderCode:   loadSource(&quot;qrc:/shaders/es2/planetD.vert&quot;)
                        fragmentShaderCode: loadSource(&quot;qrc:/shaders/es2/planetDS.frag&quot;)
                    }

                    // no special render state set =&gt; use the default set of states
                }
            ]
        }
    ]
}

</db:programlisting>
</db:article>
