<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Sensors Showcase</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Sensors Showcase example demonstrates sensor usage with visual examples.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorsshowcase-mainview.webp"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>On startup, the application shows a menu with buttons for the subviews for each sensor. The sensor views instantiate the given sensor, display the sensor's values as numbers, and also visualize them with a simple graphical representation.</db:para>
</db:section>
<db:section xml:id="main-menu">
<db:title>Main Menu</db:title>
<db:para>The main view shows the title with the name of the application and a button for each subview laid out evenly by a <db:code>ColumnLayout</db:code>. A <db:code>StackView</db:code> manages the navigation between the subviews and the main menu. The application checks the availability of the sensors during startup and disables the buttons for the sensors that are not available.</db:para>
<db:note>
<db:para>To simplify the example, the sensor availability is checked only once during the startup.</db:para>
</db:note>
</db:section>
<db:section xml:id="accelerometer-view">
<db:title>Accelerometer View</db:title>
<db:para>The accelerometer view shows the current device acceleration values and moves around an image with an amount that is opposite of the device acceleration giving the image an inertia effect that is proportional with the movement of the device.</db:para>
<db:para>Moving around the image happens in the accelerometer <db:code>onReadingChanged</db:code> method.</db:para>
<db:programlisting language="qml">Accelerometer {
    id: accelerometer

    property real x: 0
    property real y: 0
    property real z: 0

    active: true
    dataRate: 25

    onReadingChanged: {
        x = (reading as AccelerometerReading).x
        y = (reading as AccelerometerReading).y
        z = (reading as AccelerometerReading).z
        imageTranslation.x = -x * 10
        imageTranslation.y = y * 10
    }
}
</db:programlisting>
<db:para>Whenever there is a new accelerometer value the image translation coordinates are updated accordingly.</db:para>
</db:section>
<db:section xml:id="proximity-view">
<db:title>Proximity View</db:title>
<db:para>The proximity view shows an image that is enlarged whenever the proximity sensor of the device is covered.</db:para>
</db:section>
<db:section xml:id="compass-view">
<db:title>Compass View</db:title>
<db:para>The compass view shows a compass image that is rotated according to the Compass sensor reading value making the compass turn towards north.</db:para>
</db:section>
<db:section xml:id="magnetometer-view">
<db:title>Magnetometer View</db:title>
<db:para>The magnetometer view displays a magnet image that is rotated around an amount that is decided by the rotation angle of the vector given by the x and y magnetometer values. This results in general in the same rotation as the compass gives, demonstrating one use case of how the magnetometer readings can be used. Since the magnetometer provides readings along all three axes, there is more freedom with how these readings can be used.</db:para>
<db:programlisting language="qml">Magnetometer {
    id: magnetometer
    active: true
    dataRate: 25
    onReadingChanged: {
        root.magnetometerX = (reading as MagnetometerReading).x
        root.magnetometerY = (reading as MagnetometerReading).y
        root.magnetometerZ = (reading as MagnetometerReading).z
        root.magnetRotation =
            ((Math.atan2(root.magnetometerX, root.magnetometerY) / Math.PI) * 180)
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="gyroscope-view">
<db:title>Gyroscope View</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sensorsshowcase-gyroscope.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The gyroscope view also shows an image that is rotated around three axes with an amount that is calculated from the gyroscope readings. Since the gyroscope provides relative rotational change around the three spatial axes and the time between reading updates can vary, the time of the readings are stored and the rotational change is normalized based on the time passed between reading updates.</db:para>
<db:programlisting language="qml">Gyroscope {
    id: gyroscope

    property var lastTimeStamp: 0
    property real x: 0
    property real y: 0
    property real z: 0

    active: true
    dataRate: 25

    onReadingChanged: {
        x = (reading as GyroscopeReading).x
        y = (reading as GyroscopeReading).y
        z = (reading as GyroscopeReading).z
        let firstCall = false
        if (lastTimeStamp == 0) {
            firstCall = true
        }
        let timeSinceLast = reading.timestamp - lastTimeStamp
        lastTimeStamp = reading.timestamp

        //Skipping the initial time jump from 0
        if (firstCall === true)
            return
        let normalizedX = x * (timeSinceLast / 1000000)
        imageXRotation.angle += normalizedX
        let normalizedY = y * (timeSinceLast / 1000000)
        imageYRotation.angle -= normalizedY
        let normalizedZ = z * (timeSinceLast / 1000000)
        imageZRotation.angle += normalizedZ
    }
}
</db:programlisting>
<db:para>By pressing the reset button the image rotation is reset to 0.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtsensors.git/tree/examples/sensors/sensorsshowcase?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
