<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandSeat Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> class provides access to keyboard, mouse, and touch input.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandSeat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Waylandcompositor)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Waylandcompositor)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtwayland-compositor-waylandseat.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwaylandobject.xml" xlink:role="class">QWaylandObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> provides access to different types of user input and maintains a keyboard focus and a mouse pointer. It corresponds to the wl_seat interface in the Wayland protocol.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="CapabilityFlag-enum">
<db:title>enum QWaylandSeat::CapabilityFlag</db:title>
<db:bridgehead renderas="sect2">flags QWaylandSeat::CapabilityFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>CapabilityFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>Pointer</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Keyboard</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Touch</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DefaultCapabilities</db:enumidentifier>
<db:enumvalue>Pointer | Keyboard | Touch</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QWaylandSeat::CapabilityFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum type describes the capabilities of a <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link></db:emphasis>::Pointer</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> supports pointer input.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link></db:emphasis>::Keyboard</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> supports keyboard input.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link></db:emphasis>::Touch</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> supports touch input.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link></db:emphasis>::DefaultCapabilities</db:code></db:para>
</db:td>
<db:td><db:code>Pointer | Keyboard | Touch</db:code></db:td>
<db:td>
<db:para>The <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> has the default capabilities.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>CapabilityFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;CapabilityFlag&gt;. </db:code>It stores an OR combination of <db:code>CapabilityFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="drag-prop">
<db:title>[read-only] drag : QWaylandDrag* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandDrag*</db:type>
<db:varname>drag</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">drag</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the drag and drop operations and sends signals when they start and end. The property stores details like what image should be under the mouse cursor when the user drags it.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QWaylandDrag</db:type> *<db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml#drag">drag</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="keymap-prop">
<db:title>[read-only] keymap : QWaylandKeymap* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QWaylandKeymap*</db:type>
<db:varname>keymap</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">keymap</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the keymap object.</db:para>
<db:para>A keymap provides a way to translate actual key scan codes into a meaningful value. For example, if you use a keymap with a Norwegian layout, the key to the right of the letter L produces an Ã˜.</db:para>
<db:para>Keymaps can also be used to customize key functions, such as to specify whether Control and CAPS lock should be swapped, and so on.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QWaylandKeymap</db:type> *<db:emphasis role="bold"><db:link xlink:href="qwaylandseat.xml#keymap">keymap</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandSeat">
<db:title>QWaylandSeat::QWaylandSeat(QWaylandCompositor *<db:emphasis>compositor</db:emphasis>, QWaylandSeat::CapabilityFlags <db:emphasis>capabilityFlags</db:emphasis> = DefaultCapabilities)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandSeat</db:methodname>
<db:methodparam>
<db:type>QWaylandCompositor *</db:type>
<db:parameter>compositor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandSeat::CapabilityFlags</db:type>
<db:parameter>capabilityFlags</db:parameter>
<db:initializer>DefaultCapabilities</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSeat(QWaylandCompositor *compositor, QWaylandSeat::CapabilityFlags capabilityFlags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> for the given <db:code role="parameter">compositor</db:code> and <db:code role="parameter">capabilityFlags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QWaylandSeat">
<db:title>[override virtual] QWaylandSeat::~QWaylandSeat()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWaylandSeat</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWaylandSeat() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link></db:para>
</db:section>
<db:section xml:id="capabilities">
<db:title>QWaylandSeat::CapabilityFlags QWaylandSeat::capabilities() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandSeat::CapabilityFlags</db:type>
<db:methodname>capabilities</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSeat::CapabilityFlags capabilities() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the capability flags for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
</db:section>
<db:section xml:id="compositor">
<db:title>QWaylandCompositor *QWaylandSeat::compositor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandCompositor *</db:type>
<db:methodname>compositor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandCompositor * compositor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the compositor for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
</db:section>
<db:section xml:id="cursorSurfaceRequest">
<db:title>void QWaylandSeat::cursorSurfaceRequest(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>hotspotX</db:emphasis>, int <db:emphasis>hotspotY</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>cursorSurfaceRequest</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotspotX</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>hotspotY</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cursorSurfaceRequest(QWaylandSurface *surface, int hotspotX, int hotspotY)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the client has requested for a specific <db:code role="parameter">surface</db:code> to be the mouse cursor. For example, when the user hovers over a particular surface, and you want the cursor to change into a resize arrow.</db:para>
<db:para>Both <db:code role="parameter">hotspotX</db:code> and <db:code role="parameter">hotspotY</db:code> are offsets from the top-left of a pointer surface, where a click should happen. For example, if the requested cursor surface is an arrow, the parameters indicate where the arrow's tip is, on that surface.</db:para>
</db:section>
<db:section xml:id="drag">
<db:title>QWaylandDrag *QWaylandSeat::drag() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandDrag *</db:type>
<db:methodname>drag</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">drag</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandDrag * drag() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the drag object for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qwaylandseat.xml#drag-prop">drag</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="fromSeatResource">
<db:title>[static] QWaylandSeat *QWaylandSeat::fromSeatResource(struct ::wl_resource *<db:emphasis>resource</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QWaylandSeat *</db:type>
<db:methodname>fromSeatResource</db:methodname>
<db:methodparam>
<db:type>struct ::wl_resource *</db:type>
<db:parameter>resource</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSeat * fromSeatResource(struct ::wl_resource *resource)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> corresponding to the <db:code role="parameter">resource</db:code>. The <db:code role="parameter">resource</db:code> is expected to have the type wl_seat.</db:para>
</db:section>
<db:section xml:id="initialize">
<db:title>[virtual] void QWaylandSeat::initialize()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>initialize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void initialize()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Initializes parts of the seat corresponding to the capabilities set in the constructor, or through setCapabilities().</db:para>
<db:note>
<db:para>Normally, this function is called automatically after the seat and compositor have been created, so calling it manually is usually unnecessary.</db:para>
</db:note>
</db:section>
<db:section xml:id="isInitialized">
<db:title>bool QWaylandSeat::isInitialized() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isInitialized</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isInitialized() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link> is initialized; false otherwise.</db:para>
<db:para>The value <db:code>true</db:code> indicates that it's now possible for clients to start using the seat.</db:para>
</db:section>
<db:section xml:id="keyboard">
<db:title>QWaylandKeyboard *QWaylandSeat::keyboard() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandKeyboard *</db:type>
<db:methodname>keyboard</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandKeyboard * keyboard() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the keyboard for this input device.</db:para>
</db:section>
<db:section xml:id="keyboardFocus">
<db:title>QWaylandSurface *QWaylandSeat::keyboardFocus() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandSurface *</db:type>
<db:methodname>keyboardFocus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurface * keyboardFocus() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current focused surface for keyboard input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandseat.xml#setKeyboardFocus">setKeyboardFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyboardFocusChanged">
<db:title>void QWaylandSeat::keyboardFocusChanged(QWaylandSurface *<db:emphasis>newFocus</db:emphasis>, QWaylandSurface *<db:emphasis>oldFocus</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>keyboardFocusChanged</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>newFocus</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>oldFocus</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyboardFocusChanged(QWaylandSurface *newFocus, QWaylandSurface *oldFocus)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when <db:link xlink:href="qwaylandseat.xml#setKeyboardFocus">setKeyboardFocus</db:link>() is called.</db:para>
<db:para><db:code role="parameter">newFocus</db:code> has the surface that received keyboard focus; or <db:code>nullptr</db:code> if no surface has focus. <db:code role="parameter">oldFocus</db:code> has the surface that lost keyboard focus; or <db:code>nullptr</db:code> if no surface had focus.</db:para>
</db:section>
<db:section xml:id="keymap">
<db:title>QWaylandKeymap *QWaylandSeat::keymap()</db:title>
<db:methodsynopsis>
<db:type>QWaylandKeymap *</db:type>
<db:methodname>keymap</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">keymap</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandKeymap * keymap()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the keymap object for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qwaylandseat.xml#keymap-prop">keymap</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="mouseFocus">
<db:title>QWaylandView *QWaylandSeat::mouseFocus() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandView *</db:type>
<db:methodname>mouseFocus</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandView * mouseFocus() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the view that currently has mouse focus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandseat.xml#setMouseFocus">setMouseFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mouseFocusChanged">
<db:title>void QWaylandSeat::mouseFocusChanged(QWaylandView *<db:emphasis>newFocus</db:emphasis>, QWaylandView *<db:emphasis>oldFocus</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mouseFocusChanged</db:methodname>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>newFocus</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>oldFocus</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseFocusChanged(QWaylandView *newFocus, QWaylandView *oldFocus)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the mouse focus has changed from <db:code role="parameter">oldFocus</db:code> to <db:code role="parameter">newFocus</db:code>.</db:para>
</db:section>
<db:section xml:id="pointer">
<db:title>QWaylandPointer *QWaylandSeat::pointer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandPointer *</db:type>
<db:methodname>pointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandPointer * pointer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the pointer device for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
</db:section>
<db:section xml:id="sendFullKeyEvent">
<db:title>void QWaylandSeat::sendFullKeyEvent(QKeyEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendFullKeyEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendFullKeyEvent(QKeyEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">event</db:code> to the keyboard device.</db:para>
</db:section>
<db:section xml:id="sendFullTouchEvent">
<db:title>void QWaylandSeat::sendFullTouchEvent(QWaylandSurface *<db:emphasis>surface</db:emphasis>, QTouchEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendFullTouchEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTouchEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendFullTouchEvent(QWaylandSurface *surface, QTouchEvent *event)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends the <db:code role="parameter">event</db:code> to the specified <db:code role="parameter">surface</db:code> on the touch device.</db:para>
<db:warning>
<db:para>This API will automatically map <db:link xlink:href="qeventpoint.xml#id-prop">QEventPoint::id</db:link>() to a sequential id before sending it to the client. It should therefore not be used in combination with the other API using explicit ids, as collisions might occur.</db:para>
</db:warning>
</db:section>
<db:section xml:id="sendKeyEvent">
<db:title>[since 5.12] void QWaylandSeat::sendKeyEvent(int <db:emphasis>qtKey</db:emphasis>, bool <db:emphasis>pressed</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendKeyEvent</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>qtKey</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>pressed</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendKeyEvent(int qtKey, bool pressed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a key press (if <db:code role="parameter">pressed</db:code> is <db:code>true</db:code>) or release (if <db:code role="parameter">pressed</db:code> is <db:code>false</db:code>) event of a key <db:code role="parameter">qtKey</db:code> to the keyboard device.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="sendKeyPressEvent">
<db:title>void QWaylandSeat::sendKeyPressEvent(uint <db:emphasis>code</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendKeyPressEvent</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendKeyPressEvent(uint code)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a key press event with the key <db:code role="parameter">code</db:code> to the keyboard device.</db:para>
</db:section>
<db:section xml:id="sendKeyReleaseEvent">
<db:title>void QWaylandSeat::sendKeyReleaseEvent(uint <db:emphasis>code</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendKeyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>code</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendKeyReleaseEvent(uint code)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a key release event with the key <db:code role="parameter">code</db:code> to the keyboard device.</db:para>
</db:section>
<db:section xml:id="sendMouseMoveEvent">
<db:title>void QWaylandSeat::sendMouseMoveEvent(QWaylandView *<db:emphasis>view</db:emphasis>, const QPointF &amp;<db:emphasis>localPos</db:emphasis>, const QPointF &amp;<db:emphasis>outputSpacePos</db:emphasis> = QPointF())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendMouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>localPos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>outputSpacePos</db:parameter>
<db:initializer>QPointF()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendMouseMoveEvent(QWaylandView *view, const QPointF &amp;localPos, const QPointF &amp;outputSpacePos)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the mouse focus to <db:code role="parameter">view</db:code> and sends a mouse move event to the pointer device with the local position <db:code role="parameter">localPos</db:code> and output space position <db:code role="parameter">outputSpacePos</db:code>.</db:para>
</db:section>
<db:section xml:id="sendMousePressEvent">
<db:title>void QWaylandSeat::sendMousePressEvent(Qt::MouseButton <db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendMousePressEvent</db:methodname>
<db:methodparam>
<db:type>Qt::MouseButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendMousePressEvent(Qt::MouseButton button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a mouse press event for <db:code role="parameter">button</db:code> to the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>'s pointer device.</db:para>
</db:section>
<db:section xml:id="sendMouseReleaseEvent">
<db:title>void QWaylandSeat::sendMouseReleaseEvent(Qt::MouseButton <db:emphasis>button</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendMouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>Qt::MouseButton</db:type>
<db:parameter>button</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendMouseReleaseEvent(Qt::MouseButton button)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a mouse release event for <db:code role="parameter">button</db:code> to the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>'s pointer device.</db:para>
</db:section>
<db:section xml:id="sendMouseWheelEvent">
<db:title>void QWaylandSeat::sendMouseWheelEvent(Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>delta</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendMouseWheelEvent</db:methodname>
<db:methodparam>
<db:type>Qt::Orientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>delta</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendMouseWheelEvent(Qt::Orientation orientation, int delta)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a mouse wheel event to the <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>'s pointer device with the given <db:code role="parameter">orientation</db:code> and <db:code role="parameter">delta</db:code>.</db:para>
</db:section>
<db:section xml:id="sendTouchCancelEvent">
<db:title>void QWaylandSeat::sendTouchCancelEvent(QWaylandClient *<db:emphasis>client</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendTouchCancelEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendTouchCancelEvent(QWaylandClient *client)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a cancel event to the touch device of a <db:code role="parameter">client</db:code>.</db:para>
</db:section>
<db:section xml:id="sendTouchFrameEvent">
<db:title>void QWaylandSeat::sendTouchFrameEvent(QWaylandClient *<db:emphasis>client</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sendTouchFrameEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandClient *</db:type>
<db:parameter>client</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sendTouchFrameEvent(QWaylandClient *client)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a frame event to the touch device of a <db:code role="parameter">client</db:code> to indicate the end of a series of touch up, down, and motion events.</db:para>
</db:section>
<db:section xml:id="sendTouchPointEvent">
<db:title>uint QWaylandSeat::sendTouchPointEvent(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>id</db:emphasis>, const QPointF &amp;<db:emphasis>point</db:emphasis>, Qt::TouchPointState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendTouchPointEvent</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TouchPointState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendTouchPointEvent(QWaylandSurface *surface, int id, const QPointF &amp;point, Qt::TouchPointState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch point event to the <db:code role="parameter">surface</db:code> on a touch device with the given <db:code role="parameter">id</db:code>, <db:code role="parameter">point</db:code> and <db:code role="parameter">state</db:code>.</db:para>
<db:warning>
<db:para>This API should not be used in combination with forwarding of touch events using <db:link xlink:href="">QWaylandQuickItem::touchEventsEnabled</db:link> or <db:link xlink:href="qwaylandseat.xml#sendFullTouchEvent">sendFullTouchEvent</db:link>, as it might lead to conflicting touch ids.</db:para>
</db:warning>
<db:para>Returns the serial for the touch up or touch down event.</db:para>
</db:section>
<db:section xml:id="sendTouchPointMoved">
<db:title>uint QWaylandSeat::sendTouchPointMoved(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>id</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendTouchPointMoved</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendTouchPointMoved(QWaylandSurface *surface, int id, const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch moved event for the touch point <db:code role="parameter">id</db:code> on <db:code role="parameter">surface</db:code> with position <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>You need to send a touch frame event when you are done sending touch events.</db:para>
</db:note>
<db:warning>
<db:para>This API should not be used in combination with forwarding of touch events using <db:link xlink:href="">QWaylandQuickItem::touchEventsEnabled</db:link> or <db:link xlink:href="qwaylandseat.xml#sendFullTouchEvent">sendFullTouchEvent</db:link>, as it might lead to conflicting touch ids.</db:para>
</db:warning>
<db:para>Returns the serial for the touch motion event.</db:para>
</db:section>
<db:section xml:id="sendTouchPointPressed">
<db:title>uint QWaylandSeat::sendTouchPointPressed(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>id</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendTouchPointPressed</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendTouchPointPressed(QWaylandSurface *surface, int id, const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch pressed event for the touch point <db:code role="parameter">id</db:code> on <db:code role="parameter">surface</db:code> with position <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>You need to send a touch frame event when you are done sending touch events.</db:para>
</db:note>
<db:warning>
<db:para>This API should not be used in combination with forwarding of touch events using <db:link xlink:href="">QWaylandQuickItem::touchEventsEnabled</db:link> or <db:link xlink:href="qwaylandseat.xml#sendFullTouchEvent">sendFullTouchEvent</db:link>, as it might lead to conflicting touch ids.</db:para>
</db:warning>
<db:para>Returns the serial for the touch down event.</db:para>
</db:section>
<db:section xml:id="sendTouchPointReleased">
<db:title>uint QWaylandSeat::sendTouchPointReleased(QWaylandSurface *<db:emphasis>surface</db:emphasis>, int <db:emphasis>id</db:emphasis>, const QPointF &amp;<db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>uint</db:type>
<db:methodname>sendTouchPointReleased</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint sendTouchPointReleased(QWaylandSurface *surface, int id, const QPointF &amp;position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sends a touch released event for the touch point <db:code role="parameter">id</db:code> on <db:code role="parameter">surface</db:code> with position <db:code role="parameter">position</db:code>.</db:para>
<db:note>
<db:para>You need to send a touch frame event when you are done sending touch events.</db:para>
</db:note>
<db:warning>
<db:para>This API should not be used in combination with forwarding of touch events using <db:link xlink:href="">QWaylandQuickItem::touchEventsEnabled</db:link> or <db:link xlink:href="qwaylandseat.xml#sendFullTouchEvent">sendFullTouchEvent</db:link>, as it might lead to conflicting touch ids.</db:para>
</db:warning>
<db:para>Returns the serial for the touch up event.</db:para>
</db:section>
<db:section xml:id="setKeyboardFocus">
<db:title>bool QWaylandSeat::setKeyboardFocus(QWaylandSurface *<db:emphasis>surface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setKeyboardFocus</db:methodname>
<db:methodparam>
<db:type>QWaylandSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setKeyboardFocus(QWaylandSurface *surface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current keyboard focus to <db:code role="parameter">surface</db:code>. Returns a boolean indicating if the operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandseat.xml#keyboardFocus">keyboardFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMouseFocus">
<db:title>void QWaylandSeat::setMouseFocus(QWaylandView *<db:emphasis>view</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMouseFocus</db:methodname>
<db:methodparam>
<db:type>QWaylandView *</db:type>
<db:parameter>view</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMouseFocus(QWaylandView *view)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current mouse focus to <db:code role="parameter">view</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaylandseat.xml#mouseFocus">mouseFocus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="touch">
<db:title>QWaylandTouch *QWaylandSeat::touch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QWaylandTouch *</db:type>
<db:methodname>touch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandTouch * touch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the touch device for this <db:link xlink:href="qwaylandseat.xml">QWaylandSeat</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
