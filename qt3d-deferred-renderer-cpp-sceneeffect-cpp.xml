<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Deferred Renderer C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;sceneeffect.h&quot;

#include &lt;Qt3DRender/QGraphicsApiFilter&gt;
#include &lt;Qt3DRender/QShaderProgram&gt;
#include &lt;QUrl&gt;

SceneEffect::SceneEffect(Qt3DCore::QNode *parent)
    : Qt3DRender::QEffect(parent)
    , m_gl3Technique(new Qt3DRender::QTechnique())
    , m_gl2Technique(new Qt3DRender::QTechnique())
    , m_gl2Pass(new Qt3DRender::QRenderPass())
    , m_gl3Pass(new Qt3DRender::QRenderPass())
    , m_passCriterion(new Qt3DRender::QAnnotation(this))
{

    m_gl3Technique-&gt;graphicsApiFilter()-&gt;setProfile(Qt3DRender::QGraphicsApiFilter::NoProfile);
    m_gl3Technique-&gt;graphicsApiFilter()-&gt;setApi(Qt3DRender::QGraphicsApiFilter::OpenGL);
    m_gl3Technique-&gt;graphicsApiFilter()-&gt;setMajorVersion(3);
    m_gl3Technique-&gt;graphicsApiFilter()-&gt;setMinorVersion(3);

    m_gl2Technique-&gt;graphicsApiFilter()-&gt;setApi(Qt3DRender::QGraphicsApiFilter::OpenGL);
    m_gl2Technique-&gt;graphicsApiFilter()-&gt;setMajorVersion(2);
    m_gl2Technique-&gt;graphicsApiFilter()-&gt;setMinorVersion(0);
    m_gl2Technique-&gt;graphicsApiFilter()-&gt;setProfile(Qt3DRender::QGraphicsApiFilter::NoProfile);

    m_passCriterion-&gt;setName(QStringLiteral(&quot;pass&quot;));
    m_passCriterion-&gt;setValue(QStringLiteral(&quot;geometry&quot;));

    Qt3DRender::QShaderProgram *gl3Shader = new Qt3DRender::QShaderProgram();
    gl3Shader-&gt;setVertexShaderCode(Qt3DRender::QShaderProgram::loadSource(QUrl(QStringLiteral(&quot;qrc:/geometry_gl3.vert&quot;))));
    gl3Shader-&gt;setFragmentShaderCode(Qt3DRender::QShaderProgram::loadSource(QUrl(QStringLiteral(&quot;qrc:/geometry_gl3.frag&quot;))));

    m_gl3Pass-&gt;addAnnotation(m_passCriterion);
    m_gl3Pass-&gt;setShaderProgram(gl3Shader);
    m_gl3Technique-&gt;addPass(m_gl3Pass);

    Qt3DRender::QShaderProgram *gl2Shader = new Qt3DRender::QShaderProgram();
    gl2Shader-&gt;setVertexShaderCode(Qt3DRender::QShaderProgram::loadSource(QUrl(QStringLiteral(&quot;qrc:/geometry_gl2.vert&quot;))));
    gl2Shader-&gt;setFragmentShaderCode(Qt3DRender::QShaderProgram::loadSource(QUrl(QStringLiteral(&quot;qrc:/geometry_gl2.frag&quot;))));

    m_gl2Pass-&gt;addAnnotation(m_passCriterion);
    m_gl2Pass-&gt;setShaderProgram(gl2Shader);
    m_gl2Technique-&gt;addPass(m_gl2Pass);

    addTechnique(m_gl3Technique);
    addTechnique(m_gl2Technique);
}

QList&lt;Qt3DRender::QAnnotation *&gt; SceneEffect::passCriteria() const
{
    return QList&lt;Qt3DRender::QAnnotation *&gt;() &lt;&lt; m_passCriterion;
}

</db:programlisting>
</db:article>
