<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello Vulkan Triangle Example</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows the basics of rendering with <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> and the Vulkan API.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The <db:emphasis>Hello Vulkan Triangle Example</db:emphasis> creates a full graphics pipeline, including a vertex and fragment shader, to render a triangle.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/hellovulkantriangle.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="startup">
<db:title>Startup</db:title>
<db:para>Each Qt application using Vulkan will have to have a <db:code>Vulkan instance</db:code> which encapsulates application-level state and initializes a Vulkan library.</db:para>
<db:para>A <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> must always be associated with a <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> and hence the example performs instance creation before the window. The <db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> object must also outlive the window.</db:para>
<db:programlisting language="cpp">    QVulkanInstance inst;
    inst.setLayers({ &quot;VK_LAYER_KHRONOS_validation&quot; });
    if (!inst.create())
        qFatal(&quot;Failed to create Vulkan instance: %d&quot;, inst.errorCode());
</db:programlisting>
<db:para>The example enables validation layers, when supported. When the requested layers are not present, the request will be ignored. Additional layers and extensions can be enabled in a similar manner.</db:para>
<db:programlisting language="cpp">    VulkanWindow w;
    w.setVulkanInstance(&amp;amp;inst);

    w.resize(1024, 768);
    w.show();
</db:programlisting>
<db:para>Once the instance is ready, it is time to create a window. Note that <db:code>w</db:code> lives on the stack and is declared after <db:code>inst</db:code>.</db:para>
</db:section>
<db:section xml:id="the-qvulkanwindow-subclass">
<db:title>The QVulkanWindow Subclass</db:title>
<db:para>To add custom functionality to a <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link>, subclassing is used. This follows the existing patterns from <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link> and <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>. However, <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> utilizes a separate <db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link> object.</db:para>
<db:para>The <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> subclass reimplements the factory function <db:link xlink:href="qvulkanwindow.xml#createRenderer">QVulkanWindow::createRenderer</db:link>(). This simply returns a new instance of the <db:link xlink:href="qvulkanwindowrenderer.xml">QVulkanWindowRenderer</db:link> subclass. In order to be able to access various Vulkan resources via the window object, a pointer to the window is passed and stored via the constructor.</db:para>
<db:programlisting language="cpp">class VulkanWindow : public QVulkanWindow
{
public:
    QVulkanWindowRenderer *createRenderer() override;
};
</db:programlisting>
</db:section>
<db:section xml:id="the-actual-rendering">
<db:title>The Actual Rendering</db:title>
<db:para><db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> subclasses queue their draw calls in their reimplementation of <db:link xlink:href="qvulkanwindowrenderer.xml#startNextFrame">QVulkanWindowRenderer::startNextFrame</db:link>(). Once done, they are required to call back <db:link xlink:href="qvulkanwindow.xml#frameReady">QVulkanWindow::frameReady</db:link>(). The example has no asynchronous command generation, so the frameReady() call is made directly from startNextFrame(). To get continuous updates, the example simply invokes <db:link xlink:href="qwindow.xml#requestUpdate">QWindow::requestUpdate</db:link>() in order to schedule a repaint.</db:para>
<db:para>The example also demonstrates multisample antialiasing. Based on the supported sample counts reported by <db:link xlink:href="qvulkanwindow.xml#supportedSampleCounts">QVulkanWindow::supportedSampleCounts</db:link>() the example chooses between 8x, 4x, or no multisampling. Once configured via QVulkanWindow::setSamples(), <db:link xlink:href="qvulkanwindow.xml">QVulkanWindow</db:link> takes care of the rest: the additional multisample color buffers are created automatically, and resolving into the swapchain buffers is performed at the end of the default render pass for each frame.</db:para>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/gui/hellovulkantriangle?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
