<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>TreeView QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a tree view to display data from a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
<db:para>This type was introduced in Qt 6.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>TableView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>TreeView is part of <db:simplelist><db:member>qtquick-views</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> has a model that defines the data to be displayed, and a delegate that defines how the data should be displayed.</db:para>
<db:para><db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> inherits <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. This means that even if the model has a parent-child tree structure, <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> is internally using a proxy model that converts that structure into a flat table model that can be rendered by <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. Each node in the tree ends up occupying one row in the table, where the first column renders the tree itself. By indenting each delegate item in that column according to its parent-child depth in the model, it will end up looking like a tree, even if it's technically still just a flat list of items.</db:para>
<db:para>To allow for maximum flexibility, <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> itself will not position the delegate items into a tree structure. This burden is placed on the delegate. <db:link xlink:href="">Qt Quick Controls</db:link> offers a ready-made TreeViewDelegate that can be used for this, which has the advantage that it works out-of-the-box and renders a tree which follows the style of the platform where the application runs.</db:para>
<db:para>Even if TreeViewDelegate is customizable, there might be situations where you want to render the tree in a different way, or ensure that the delegate ends up as minimal as possible, perhaps for performance reasons. Creating your own delegate from scratch is easy, since <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> offers a set of properties that can be used to position and render each node in the tree correctly.</db:para>
<db:para>An example of a custom delegate is shown below:</db:para>
<db:programlisting language="qml">import QtQuick

Window {
    width: 600
    height: 400
    visible: true

    TreeView {
        anchors.fill: parent
        // The model needs to be a QAbstractItemModel
        // model: yourTreeModel

        delegate: Item {
            id: treeDelegate

            implicitWidth: padding + label.x + label.implicitWidth + padding
            implicitHeight: label.implicitHeight * 1.5

            readonly property real indent: 20
            readonly property real padding: 5

            // Assigned to by TreeView:
            required property TreeView treeView
            required property bool isTreeNode
            required property bool expanded
            required property int hasChildren
            required property int depth

            TapHandler {
                onTapped: treeView.toggleExpanded(row)
            }

            Text {
                id: indicator
                visible: treeDelegate.isTreeNode &amp;amp;&amp;amp; treeDelegate.hasChildren
                x: padding + (treeDelegate.depth * treeDelegate.indent)
                anchors.verticalCenter: label.verticalCenter
                text: &quot;â–¸&quot;
                rotation: treeDelegate.expanded ? 90 : 0
            }

            Text {
                id: label
                x: padding + (treeDelegate.isTreeNode ? (treeDelegate.depth + 1) * treeDelegate.indent : 0)
                width: treeDelegate.width - treeDelegate.padding - x
                clip: true
                text: model.display
            }
        }
    }
}
</db:programlisting>
<db:para>The properties that are marked as required will be filled in by <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>, and are similar to attached properties. By marking them as required, the delegate indirectly informs <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> that it should take responsibility for assigning them values. The following required properties can be added to a delegate:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>required property TreeView treeView - Points to the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> that contains the delegate item.</db:para>
</db:listitem>
<db:listitem>
<db:para>required property bool isTreeNode - Is true if the delegate item represents a node in the tree. Only one column in the view will be used to draw the tree, and therefore, only delegate items in that column will have this property set to true. A node in the tree should typically be indented according to its depth, and show an indicator if hasChildren is true. Delegate items in other columns will have this property set to false, and will show data from the remaining columns in the model (and typically not be indented).</db:para>
</db:listitem>
<db:listitem>
<db:para>required property bool expanded - Is true if the model item drawn by the delegate is expanded in the view.</db:para>
</db:listitem>
<db:listitem>
<db:para>required property int hasChildren - Is true if the model item drawn by the delegate has children in the model.</db:para>
</db:listitem>
<db:listitem>
<db:para>required property int depth - Contains the depth of the model item drawn by the delegate. The depth of a model item is the same as the number of ancestors it has in the model.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>See also <db:link xlink:href="qtqml-syntax-objectattributes.xml#required-properties">Required Properties</db:link>.</db:para>
<db:note>
<db:para>A <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> only accepts a model that inherits <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="collapsed-signal">
<db:title>collapsed(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">row</db:code> is collapsed in the view.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onCollapsed</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#expanded-signal">expanded</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#expand-method">expand</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#collapse-method">collapse</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#toggleExpanded-method">toggleExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expanded-signal">
<db:title>expanded(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>This signal is emitted when a <db:code role="parameter">row</db:code> is expanded in the view.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onExpanded</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#collapsed-signal">collapsed</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#expand-method">expand</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#collapse-method">collapse</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#toggleExpanded-method">toggleExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="cellAtIndex-method">
<db:title>point cellAtIndex(<db:emphasis>modelIndex</db:emphasis>)</db:title>
<db:para>Convenience function for doing:</db:para>
<db:para>Qt.point(columnAtIndex(<db:code role="parameter">modelIndex</db:code>), rowAtIndex(<db:code role="parameter">modelIndex</db:code>))</db:para>
<db:para>A cell is simply a <db:link xlink:href="qml-point.xml">point</db:link> that combines row and column into a single type. Note that point.x will map to the column, and point.y will map to the row.</db:para>
</db:section>
<db:section xml:id="collapse-method">
<db:title>collapse(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>Collapses the tree node at the given <db:code role="parameter">row</db:code> in the view.</db:para>
<db:para><db:code role="parameter">row</db:code> should be the row in the view (table row), and not a row in the model.</db:para>
<db:note>
<db:para>this function will not affect the model, only the visual representation in the view.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#expand-method">expand</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#isExpanded-method">isExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnAtIndex-method">
<db:title>int columnAtIndex(<db:emphasis>modelIndex</db:emphasis>)</db:title>
<db:para>Returns the column in the view that maps to <db:code role="parameter">modelIndex</db:code> in the model.</db:para>
<db:para>The assigned model, which is a tree model, is converted to a flat table model internally so that it can be shown in a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> (which <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> inherits). This function can be used whenever you need to know which column in the view the given model index maps to.</db:para>
<db:note>
<db:para><db:code role="parameter">modelIndex</db:code> must be a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#rowAtIndex-method">rowAtIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#modelIndex-method">modelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth-method">
<db:title>int depth(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>Returns the depth (the number of parents up to the root) of the given <db:code role="parameter">row</db:code>.</db:para>
<db:para><db:code role="parameter">row</db:code> should be the row in the view (table row), and not a row in the model. If <db:code role="parameter">row</db:code> is not between 0 and <db:link xlink:href="qml-qtquick-tableview.xml#rows-prop">rows</db:link>, the return value will be -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#modelIndex-method">modelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expand-method">
<db:title>expand(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>Expands the tree node at the given <db:code role="parameter">row</db:code> in the view.</db:para>
<db:para><db:code role="parameter">row</db:code> should be the row in the view (table row), and not a row in the model.</db:para>
<db:note>
<db:para>this function will not affect the model, only the visual representation in the view.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#collapse-method">collapse</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#isExpanded-method">isExpanded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isExpanded-method">
<db:title>bool isExpanded(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>Returns if the given <db:code role="parameter">row</db:code> in the view is shown as expanded.</db:para>
<db:para><db:code role="parameter">row</db:code> should be the row in the view (table row), and not a row in the model. If <db:code role="parameter">row</db:code> is not between 0 and <db:link xlink:href="qml-qtquick-tableview.xml#rows-prop">rows</db:link>, the return value will be false.</db:para>
</db:section>
<db:section xml:id="modelIndex-method">
<db:title>QModelIndex modelIndex(<db:emphasis>row</db:emphasis>, <db:emphasis>column</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> that maps to <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> in the view.</db:para>
<db:para><db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> should be the row and column in the view (table row and table column), and not a row and column in the model.</db:para>
<db:para>The assigned model, which is a tree model, is converted to a flat table model internally so that it can be shown in a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> (which <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> inherits). This function can be used whenever you need to know which index in the tree model maps to the given row and column in the view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#rowAtIndex-method">rowAtIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#columnAtIndex-method">columnAtIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modelIndex-method-1">
<db:title>QModelIndex modelIndex(point <db:emphasis>cell</db:emphasis>)</db:title>
<db:para>Convenience function for doing:</db:para>
<db:programlisting language="cpp">modelIndex(cell.y, cell.x)
</db:programlisting>
<db:para>A cell is simply a <db:link xlink:href="qml-point.xml">point</db:link> that combines row and column into a single type. Note that point.x will map to the column, and point.y will map to the row.</db:para>
</db:section>
<db:section xml:id="rowAtIndex-method">
<db:title>int rowAtIndex(<db:emphasis>modelIndex</db:emphasis>)</db:title>
<db:para>Returns the row in the view that maps to <db:code role="parameter">modelIndex</db:code> in the model.</db:para>
<db:para>The assigned model, which is a tree model, is converted to a flat table model internally so that it can be shown in a <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> (which <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> inherits). This function can be used whenever you need to know which row in the view the given model index maps to.</db:para>
<db:note>
<db:para><db:code role="parameter">modelIndex</db:code> must be a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#columnAtIndex-method">columnAtIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-treeview.xml#modelIndex-method">modelIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toggleExpanded-method">
<db:title>toggleExpanded(<db:emphasis>row</db:emphasis>)</db:title>
<db:para>Toggles if the tree node at the given <db:code role="parameter">row</db:code> should be expanded. This is a convenience for doing:</db:para>
<db:programlisting language="cpp">if (isExpanded(row))
    collapse(row)
else
    expand(row)
</db:programlisting>
<db:para><db:code role="parameter">row</db:code> should be the row in the view (table row), and not a row in the model.</db:para>
</db:section>
</db:section>
</db:article>
