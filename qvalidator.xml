<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QValidator Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qvalidator.xml">QValidator</db:link> class provides validation of input text.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdoublevalidator.xml" xlink:role="class">QDoubleValidator</db:link>, <db:link xlink:href="qintvalidator.xml" xlink:role="class">QIntValidator</db:link>, <db:link xlink:href="qregexpvalidator.xml" xlink:role="class">QRegExpValidator</db:link>, and <db:link xlink:href="qregularexpressionvalidator.xml" xlink:role="class">QRegularExpressionValidator</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class itself is abstract. Two subclasses, <db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> and <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link>, provide basic numeric-range checking, and <db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link> provides general checking using a custom regular expression.</db:para>
<db:para>If the built-in validators aren't sufficient, you can subclass <db:link xlink:href="qvalidator.xml">QValidator</db:link>. The class has two virtual functions: <db:link xlink:href="qvalidator.xml#validate">validate</db:link>() and <db:link xlink:href="qvalidator.xml#fixup">fixup</db:link>().</db:para>
<db:para><db:link xlink:href="qvalidator.xml#validate">validate</db:link>() must be implemented by every subclass. It returns <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> or <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> depending on whether its argument is valid (for the subclass's definition of valid).</db:para>
<db:para>These three states require some explanation. An <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> string is <db:emphasis>clearly</db:emphasis> invalid. <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> is less obvious: the concept of validity is difficult to apply when the string is incomplete (still being edited). <db:link xlink:href="qvalidator.xml">QValidator</db:link> defines <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> as the property of a string that is neither clearly invalid nor acceptable as a final result. <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> means that the string is acceptable as a final result. One might say that any string that is a plausible intermediate state during entry of an <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> string is <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>.</db:para>
<db:para>Here are some examples:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For a line edit that accepts integers from 10 to 1000 inclusive, 42 and 123 are <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, the empty string and 5 are <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, and &quot;asdf&quot; and 1114 is <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>For an editable combobox that accepts URLs, any well-formed URL is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, &quot;http://example.com/,&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> (it might be a cut and paste action that accidentally took in a comma at the end), the empty string is <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> (the user might select and delete all of the text in preparation for entering a new URL) and &quot;http:///./&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>For a spin box that accepts lengths, &quot;11cm&quot; and &quot;1in&quot; are <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, &quot;11&quot; and the empty string are <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, and &quot;http://example.com&quot; and &quot;hour&quot; are <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para><db:link xlink:href="qvalidator.xml#fixup">fixup</db:link>() is provided for validators that can repair some user errors. The default implementation does nothing. <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, for example, will call <db:link xlink:href="qvalidator.xml#fixup">fixup</db:link>() if the user presses Enter (or Return) and the content is not currently valid. This allows the <db:link xlink:href="qvalidator.xml#fixup">fixup</db:link>() function the opportunity of performing some magic to make an <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> string <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>.</db:para>
<db:para>A validator has a locale, set with <db:link xlink:href="qvalidator.xml#setLocale">setLocale</db:link>(). It is typically used to parse localized data. For example, <db:link xlink:href="qintvalidator.xml">QIntValidator</db:link> and <db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link> use it to parse localized representations of integers and doubles.</db:para>
<db:para><db:link xlink:href="qvalidator.xml">QValidator</db:link> is typically used with <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> and <db:link xlink:href="qcombobox.xml">QComboBox</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Line Edits Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="State-enum">
<db:title>enum QValidator::State</db:title>
<db:para>This enum type defines the states in which a validated string can exist.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvalidator.xml">QValidator</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The string is <db:emphasis>clearly</db:emphasis> invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvalidator.xml">QValidator</db:link></db:emphasis>::Intermediate</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The string is a plausible intermediate value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qvalidator.xml">QValidator</db:link></db:emphasis>::Acceptable</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The string is acceptable as a final result; i.e. it is valid.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QValidator">
<db:title>[explicit] QValidator::QValidator(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Sets up the validator. The <db:code role="parameter">parent</db:code> parameter is passed on to the <db:link xlink:href="qobject.xml">QObject</db:link> constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QValidator">
<db:title>[virtual noexcept] QValidator::~QValidator()</db:title>
<db:para>Destroys the validator, freeing any storage and other resources used.</db:para>
</db:section>
<db:section xml:id="changed">
<db:title>void QValidator::changed()</db:title>
<db:para>This signal is emitted when any property that may affect the validity of a string has changed.</db:para>
</db:section>
<db:section xml:id="fixup">
<db:title>[virtual] void QValidator::fixup(QString &amp;<db:emphasis>input</db:emphasis>) const</db:title>
<db:para>This function attempts to change <db:code role="parameter">input</db:code> to be valid according to this validator's rules. It need not result in a valid string: callers of this function must re-test afterwards; the default does nothing.</db:para>
<db:para>Reimplementations of this function can change <db:code role="parameter">input</db:code> even if they do not produce a valid string. For example, an ISBN validator might want to delete every character except digits and &quot;-&quot;, even if the result is still not a valid ISBN; a surname validator might want to remove whitespace from the start and end of the string, even if the resulting string is not in the list of accepted surnames.</db:para>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QValidator::locale() const</db:title>
<db:para>Returns the locale for the validator. The locale is by default initialized to the same as QLocale().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalidator.xml#setLocale">setLocale</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#QLocale">QLocale::QLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QValidator::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">locale</db:code> that will be used for the validator. Unless setLocale has been called, the validator will use the default locale set with <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(). If a default locale has not been set, it is the operating system's locale.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvalidator.xml#locale">locale</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="validate">
<db:title>[pure virtual] QValidator::State QValidator::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>This virtual function returns <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> if <db:code role="parameter">input</db:code> is invalid according to this validator's rules, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> if it is likely that a little more editing will make the input acceptable (e.g. the user types &quot;4&quot; into a widget which accepts integers between 10 and 99), and <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> if the input is valid.</db:para>
<db:para>The function can change both <db:code role="parameter">input</db:code> and <db:code role="parameter">pos</db:code> (the cursor position) if required.</db:para>
</db:section>
</db:section>
</db:article>
