<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for iOS</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides insight into Qt's iOS port and how to use it.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt's iOS port allows you to run Qt applications on iOS devices, such as iPhones, iPads, and iPod Touches.</db:para>
<db:anchor xml:id="ios-supported-configurations"/>
<db:section xml:id="supported-configurations">
<db:title>Supported Configurations</db:title>
<db:para>The following configurations are supported.</db:para>
<db:informaltable style="generic" width="80%">
<db:thead>
<db:tr>
<db:th>
<db:para>Target Platform</db:para>
</db:th>
<db:th>
<db:para>Architecture</db:para>
</db:th>
<db:th>
<db:para>Build Environment</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>iOS 14, 15, 16</db:para>
</db:td>
<db:td>
<db:para>armv8 (arm64)</db:para>
</db:td>
<db:td>
<db:para>Xcode 14 (iOS 16 SDK)</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>Qt supports you in building, testing, and deploying applications for iOS. Qt applications are typically defined using the <db:link xlink:href="cmake-manual.xml">CMake</db:link> or <db:link xlink:href="qmake-manual.xml">qmake</db:link> build tools. Both tools can generate an .xcodeproj file that can then be loaded and built from the command line, or with Xcode. <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link> also directly supports building, running, debugging, and profiling CMake and qmake projects for iOS.</db:para>
<db:para>The minimum deployment target for Qt applications is specified in <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link>.</db:para>
<db:section xml:id="setting-up-the-development-environment">
<db:title>Setting Up the Development Environment</db:title>
<db:para>You can download the Qt installers from the <db:link xlink:href="http://qt.io/download">Downloads</db:link> page. For more information, see <db:link xlink:href="gettingstarted.xml">Getting Started with Qt</db:link>.</db:para>
<db:para>Before installing Qt, you first need to install Xcode. You will find it in the Mac App Store <db:link xlink:href="http://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;mt=12">here</db:link>.</db:para>
<db:note>
<db:para>As recommended by Apple, you should always use the latest Xcode version when building your applications for the App Store. In practice this means you also need the latest version of macOS to develop apps with Qt, due to Xcode's system requirements.</db:para>
</db:note>
<db:para>For running Qt applications on your Mac or in the simulator that comes with Xcode, this is all you need. However, for running applications on a mobile device and/or publishing your applications in the App Store, you must join the <db:link xlink:href="https://developer.apple.com/programs/">Apple Developer Program</db:link>, and set up developer certificates and provisioning profiles. The easiest solution is to use a profile that takes any App ID (a *).</db:para>
<db:para>Before building any Qt applications, you should test that Xcode is set up correctly, for example, by running one of the standard Xcode application templates on your device.</db:para>
</db:section>
<db:section xml:id="building-applications-from-the-command-line">
<db:title>Building Applications from the Command Line</db:title>
<db:para>Use CMake or qmake to define how to build your iOS application. Both CMake and qmake can generate an xcodeproj file, which can then be loaded and built from the command line.</db:para>
<db:section xml:id="using-cmake">
<db:title>Using CMake</db:title>
<db:para>The qt-cmake convenience script located in &lt;Qt-dir&gt;/&lt;version&gt;/ios/bin/ will take care of setting up the toolchain and correct architectures for you.</db:para>
<db:para>Using qt-cmake convenience script:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;Qt-dir&amp;gt;/&amp;lt;version&amp;gt;/ios/bin/qt-cmake &amp;lt;source-dir&amp;gt;
</db:programlisting>
<db:para>Using the generated xcodeproj file, you can either use Xcode to build your application or run xcodebuild from the command line. For a list of available targets and schemes for your application, run the following command:</db:para>
<db:programlisting language="cpp" role="bad">xcodebuild -list -project &amp;lt;your-app&amp;gt;.xcodeproj
</db:programlisting>
<db:para>Then, run xcodebuild build, passing in your application details:</db:para>
<db:programlisting language="cpp" role="bad">xcodebuild build -allowProvisioningUpdates -project &amp;lt;your-app&amp;gt;.xcodeproj -scheme &amp;lt;your-scheme&amp;gt; -configuration Debug -destination &quot;generic/platform=iOS&quot; -destination-timeout 1 ENABLE_ONLY_ACTIVE_RESOURCES=NO
</db:programlisting>
</db:section>
<db:section xml:id="using-qmake">
<db:title>Using qmake</db:title>
<db:para>First, define how to build the application using qmake. Then, use the generated xcodeproj file to build the application, either in Xcode or from the command line.</db:para>
<db:programlisting language="cpp" role="bad">qmake &amp;lt;your-app&amp;gt;.pro
</db:programlisting>
<db:para>qmake creates a wrapper Makefile that in turns calls xcodebuild, so you can run make to build your application:</db:para>
<db:programlisting language="cpp" role="bad">make -j8
</db:programlisting>
<db:para>Note that you must re-import the project if its setup changes, for example, when adding or removing source files.</db:para>
<db:section xml:id="customizing-xcode-project-settings">
<db:title>Customizing Xcode project settings</db:title>
<db:para>The QMAKE_MAC_XCODE_SETTINGS qmake variable can be used to customize Xcode settings, for example:</db:para>
<db:programlisting language="cpp" role="bad">development_team.name = DEVELOPMENT_TEAM
development_team.value = &amp;lt;your-team-id&amp;gt;
QMAKE_MAC_XCODE_SETTINGS += development_team
</db:programlisting>
<db:para>Other qmake variables are also useful:</db:para>
<db:programlisting language="cpp" role="bad">QMAKE_TARGET_BUNDLE_PREFIX = com.&amp;lt;your-company&amp;gt;
QMAKE_BUNDLE = &amp;lt;your-app&amp;gt;
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section xml:id="building-applications-with-qt-creator">
<db:title>Building Applications with Qt Creator</db:title>
<db:para>You can find information on how to set up and run Apple mobile device applications in Qt Creator's manual:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-developing-ios.html">Connecting Apple Mobile Devices</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>As mentioned previously, you must have Xcode installed.</db:para>
</db:section>
<db:section xml:id="running-applications-in-xcode">
<db:title>Running Applications in Xcode</db:title>
<db:para>The Xcode projects generated by qmake and CMake support running the application on both iOS devices and in the iOS simulator.</db:para>
<db:note>
<db:para>As the default architecture of the Qt for iOS simulator libraries is x86_64, the application must run under Rosetta on Apple Silicon Macs. If the Rosetta-based run destinations are not listed in Xcode's run destination menu they can be enabled via the Product &gt; Destination &gt; Destination Architectures menu.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="using-objective-c-code-in-qt-applications">
<db:title>Using Objective-C Code in Qt Applications</db:title>
<db:para>Clang, the compiler used for applications on Apple Platforms, allows mixing C++ and Objective-C code. To enable this mode use the .mm extension for the relevant source files and add them to your project as usual.</db:para>
<db:para>With CMake:</db:para>
<db:programlisting language="cpp" role="bad">target_sources(myapp PRIVATE objc_code.mm)
</db:programlisting>
<db:para>With qmake:</db:para>
<db:programlisting language="cpp" role="bad">SOURCES += objc_code.mm
</db:programlisting>
<db:para>You can then use Objective-C frameworks from Apple's Developer Library in your Qt applications.</db:para>
<db:para>To expose functionality to the rest of your application, without having to rename all your source files, declare helper functions in a header, and implement the functionality in an Objective-C++ source file:</db:para>
<db:programlisting language="cpp">// objc_code.h
QString localizedHostName();

// objc_code.mm
#include &amp;lt;Foundation/NSHost.h&amp;gt;
QString localizedHostName()
{
    return QString::fromNSString(NSHost.currentHost.localizedName);
}
</db:programlisting>
</db:section>
<db:section xml:id="examples-for-ios">
<db:title>Examples for iOS</db:title>
<db:para>In Qt Creator, tested examples on iOS can be looked up. Use the ios keyword to search for examples in the Qt Creator Welcome mode. Note that some examples may have limited functionality.</db:para>
<db:para>For a list of examples known to work on iOS devices, visit <db:link xlink:href="examples-ios.xml">Qt for iOS Examples</db:link>.</db:para>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:para>The following topics provide more details about Qt for iOS:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="porting-to-ios.xml">Porting a Qt Quick Application</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="ios-platform-notes.xml">Platform Notes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="ios-building-from-source.xml">Qt for iOS - Building from Source</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
