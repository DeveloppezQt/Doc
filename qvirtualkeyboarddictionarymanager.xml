<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVirtualKeyboardDictionaryManager Class</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Dictionary management for application-defined dictionaries.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVirtualKeyboardDictionaryManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS VirtualKeyboard)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::VirtualKeyboard)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += virtualkeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class allows you to manage dictionaries for virtual keyboard input methods. Dictionaries are application-defined and can be activated in the desired context.</db:para>
<db:note>
<db:para>Dictionaries do not refer to the built-in dictionaries of the input method, but to the application's own dictionaries (for example, a phonebook application).</db:para>
</db:note>
<db:para>The following operations are supported by the dictionary manager:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Create dictionaries using the <db:code>createDictionary()</db:code> function.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add or modify content of the dictionary instance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Activate dictionaries by adding them to the list of <db:link xlink:href="qvirtualkeyboarddictionarymanager.xml#baseDictionaries-prop">base dictionaries</db:link> or <db:link xlink:href="qvirtualkeyboarddictionarymanager.xml#extraDictionaries-prop">extra dictionaries</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To activate dictionaries from QML, use the <db:link xlink:href="qml-qtquick-virtualkeyboard-virtualkeyboard.xml">VirtualKeyboard</db:link> attached type.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="createDictionary">
<db:title>QVirtualKeyboardDictionary *QVirtualKeyboardDictionaryManager::createDictionary(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVirtualKeyboardDictionary *</db:type>
<db:methodname>createDictionary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardDictionary * createDictionary(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Create a dictionary with the given <db:code role="parameter">name</db:code> or return the dictionary if it already exists.</db:para>
<db:para>The dictionary instance is owned by the dictionary manager and must not be destroyed manually. To free memory allocated for the dictionary, the application may reset the contents of the dictionary.</db:para>
</db:section>
<db:section xml:id="dictionary">
<db:title>QVirtualKeyboardDictionary *QVirtualKeyboardDictionaryManager::dictionary(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVirtualKeyboardDictionary *</db:type>
<db:methodname>dictionary</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardDictionary * dictionary(const QString &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an existing dictionary if it exists.</db:para>
</db:section>
<db:section xml:id="instance">
<db:title>[static] QVirtualKeyboardDictionaryManager *QVirtualKeyboardDictionaryManager::instance()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QVirtualKeyboardDictionaryManager *</db:type>
<db:methodname>instance</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVirtualKeyboardDictionaryManager * instance()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the singleton instance of the <db:link xlink:href="qvirtualkeyboarddictionarymanager.xml">QVirtualKeyboardDictionaryManager</db:link>.</db:para>
<db:para>All the functionalities must be called from the main thread.</db:para>
</db:section>
</db:section>
</db:article>
