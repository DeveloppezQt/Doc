<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebEngine Features</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Summarizes Qt WebEngine features.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt WebEngine supports the following features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#audio-and-video-codecs">Audio and Video Codecs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#chromium-devtools">Chromium DevTools</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#client-certificates">Client Certificates</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#custom-schemes">Custom Schemes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#drag-and-drop">Drag and Drop</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#favicon">Favicon</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#fullscreen">Fullscreen</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#hardware-acceleration">Hardware Acceleration</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#html5-drm">HTML5 DRM</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#html5-geolocation">HTML5 Geolocation</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#html5-websockets">HTML5 WebSockets</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#http-2-protocol">HTTP/2 Protocol</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#local-storage">Local Storage</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#native-dialogs">Native Dialogs</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#pepper-plugin-api">Pepper Plugin API</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#pdf-file-viewing">PDF File Viewing</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#page-lifecycle-api">Page Lifecycle API</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#print-to-pdf">Print to PDF</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#process-models">Process Models</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#spellchecker">Spellchecker</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#touch">Touch</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#view-source">View Source</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#web-notifications">Web Notifications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#webgl">WebGL</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#webrtc-feature">WebRTC</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="audio-and-video-codecs">
<db:title>Audio and Video Codecs</db:title>
<db:para>Qt WebEngine supports the MPEG-4 Part 14 (MP4) file format only if the required proprietary audio and video codecs, such as H.264 and MPEG layer-3 (MP3), have been enabled. Proprietary codecs can be enabled by passing the following option to the <db:code>configure</db:code> tool when configuring Qt:</db:para>
<db:programlisting language="cpp" role="bad">-webengine-proprietary-codecs
</db:programlisting>
<db:para>For example, the following option could be passed when configuring Qt for building it at the top level:</db:para>
<db:programlisting language="cpp" role="bad">configure -webengine-proprietary-codecs
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="configure-options.xml">Qt Configure Options</db:link>.</db:para>
<db:para>When using cmake to build just the Qt WebEngine module, the following command can be used to configure and build (in this example, the Qt WebEngine source code is located in <db:code>C:\qt\qtwebengine</db:code>):</db:para>
<db:programlisting language="cpp" role="bad">qt-configure-module C:\qt\qtwebengine -webengine-proprietary-codecs
cmake --build . --parallel
</db:programlisting>
<db:warning>
<db:para>When distributing proprietary codec libraries, you must acquire licenses for them.</db:para>
</db:warning>
<db:para><db:link xlink:href="http://ffmpeg.org/">FFmpeg</db:link> is a cross-platform solution to record, convert, and stream audio and video. It can be configured for use with several codecs, which rises licensing issues during distribution with the codec libraries. For some codecs, open source implementations, such as <db:link xlink:href="http://www.openh264.org/">OpenH264</db:link>, are available.</db:para>
</db:section>
<db:section xml:id="chromium-devtools">
<db:title>Chromium DevTools</db:title>
<db:para>The Chromium DevTools provide the ability to inspect and debug layout and performance issues of any web content.</db:para>
<db:para>This feature can be tested by launching a Qt WebEngine application with the command line option <db:code>--remote-debugging-port=[your-port]</db:code> or by setting the environment variable <db:code>QTWEBENGINE_REMOTE_DEBUGGING</db:code>, and then using a Chromium based browser (such as <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>) to connect to <db:code>http://localhost:[your-port]</db:code>.</db:para>
<db:note>
<db:para>Any <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> command line options should be specified after the <db:code>--webEngineArgs</db:code> option, which is used to separate the user's application specific options from the <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link>'s ones.</db:para>
</db:note>
<db:programlisting language="cpp" role="bad">--webEngineArgs --remote-debugging-port=5000
</db:programlisting>
<db:para>The Chromium DevTools page can also be shown within the application. To set this up, you can call either <db:link xlink:href="qwebenginepage.xml#setInspectedPage">QWebEnginePage::setInspectedPage</db:link>() to the page to be inspected, which implicitly loads the DevTools into the <db:code>this</db:code> page, or <db:link xlink:href="qwebenginepage.xml#setDevToolsPage">QWebEnginePage::setDevToolsPage</db:link>() to let the <db:code>this</db:code> page be inspected.</db:para>
<db:para>The respective QML properties are <db:link xlink:href="qml-qtwebengine-webengineview.xml#devToolsView-prop">WebEngineView.devToolsView</db:link> and <db:link xlink:href="qml-qtwebengine-webengineview.xml#inspectedView-prop">WebEngineView.inspectedView</db:link>.</db:para>
<db:para>For more information, see <db:link xlink:href="qtwebengine-debugging.xml">Qt WebEngine Debugging and Profiling</db:link>.</db:para>
</db:section>
<db:section xml:id="client-certificates">
<db:title>Client Certificates</db:title>
<db:para>Some web servers, in particular many intranet sites, require the client to authenticate itself with a certificate, called a <db:emphasis>client certificate</db:emphasis>. Qt WebEngine will read the client certificates installed in the system settings in macOS and Windows, and on Linux those installed into the NSS database. Certificates can be installed into the NSS database using the <db:code>pk12util</db:code> tool.</db:para>
<db:para>By default, Qt WebEngine will not offer any client certificates to servers, as doing so uniquely identifies the user and might violate privacy expectations.</db:para>
<db:para>To activate support for client certificates, an application needs to listen to the <db:link xlink:href="qwebenginepage.xml#selectClientCertificate">QWebEnginePage::selectClientCertificate</db:link> or <db:link xlink:href="qml-qtwebengine-webengineview.xml#selectClientCertificate-signal">WebEngineView.selectClientCertificate</db:link> signals and select one of the offered certificates. For applications that can navigate to untrusted web sites, it is recommended to always give the user a choice before uniquely identifying them to a remote server.</db:para>
<db:para>In addition to the client certificate stored in system settings, Qt WebEngine offers also the in-memory store. The <db:link xlink:href="qwebengineclientcertificatestore.xml">QWebEngineClientCertificateStore</db:link> instance can be obtained with the <db:link xlink:href="qwebengineprofile.xml#clientCertificateStore">QWebEngineProfile::clientCertificateStore</db:link>() method. An application can use this class to add a new certificate with a <db:link xlink:href="qwebengineclientcertificatestore.xml#add">QWebEngineClientCertificateStore::add</db:link>() call. Note that during the <db:code>selectClientCertificate</db:code> calls, Qt WebEngine lists both system and in-memory stored clients certificates.</db:para>
<db:para>See also <db:link xlink:href="qtwebengine-webenginewidgets-clientcertificate-example.xml">Client Certificate Example</db:link> for more implementation details.</db:para>
</db:section>
<db:section xml:id="custom-schemes">
<db:title>Custom Schemes</db:title>
<db:para>Qt WebEngine makes it possible for the application to define its own custom URL schemes with specialized security policies and transport mechanisms.</db:para>
<db:para>Custom schemes can be used to implement alternative network protocols with all the usual web security policies, privileged internal schemes for displaying user interface components or debugging information, sandboxed schemes with extra restrictions, and so on.</db:para>
<db:para>For more information, see <db:link xlink:href="qwebengineurlscheme.xml">QWebEngineUrlScheme</db:link> and <db:link xlink:href="qwebengineurlschemehandler.xml">QWebEngineUrlSchemeHandler</db:link>.</db:para>
</db:section>
<db:section xml:id="drag-and-drop">
<db:title>Drag and Drop</db:title>
<db:para>Qt WebEngine supports HTML5 drag and drop.</db:para>
<db:para>This feature can be tested by opening an HTML5 drag and drop demo, such as <db:link xlink:href="http://html5demos.com/drag">HTML5 Demos - Drag and Drop</db:link>, <db:link xlink:href="http://html5demos.com/drag-anything">HTML5 Demos - Simple Drag and Drop</db:link>, or <db:link xlink:href="http://html5demos.com/dnd-upload">HTML5 Demos - Drag and Drop, Automatic Upload</db:link>, in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>.</db:para>
<db:para>Dragging files into the browser is not actually part of HTML5, but it is supported. It can be tested by opening <db:link xlink:href="http://html5demos.com/file-api">HTML5 Demos - File API</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.7.0.</db:para>
</db:section>
<db:section xml:id="favicon">
<db:title>Favicon</db:title>
<db:para>Qt WebEngine supports the web site URL icon, <db:emphasis>favicon</db:emphasis>. Each icon is stored in the internal database for each <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> and can be accessed using a <db:link xlink:href="qwebenginepage.xml#icon-prop">QWebEnginePage::icon</db:link>() call or a <db:link xlink:href="qml-qtwebengine-webengineview.xml#icon-prop">WebEngineView.icon</db:link> property for the currently loaded content.</db:para>
<db:para>Moreover Qt WebEngine provides API for accessing already stored icons in the internal profile's database.</db:para>
<db:note>
<db:para>The icon database is not available for off-the-record profiles.</db:para>
</db:note>
<db:section xml:id="qml-favicon-handling">
<db:title>QML Favicon Handling</db:title>
<db:para>For accessing icons a <db:code>QQuickImageProvider</db:code> is registered. This provider can be accessed by a special URL where the scheme is &quot;image:&quot; and the host is &quot;favicon&quot;.</db:para>
<db:programlisting language="qml">Image {
    source: &quot;image://favicon/url&quot;
}
</db:programlisting>
<db:para>The <db:code>url</db:code> can be the URL of the favicon:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;image://favicon/https://www.qt.io/hubfs/2016_Qt_Logo/qt_logo_green_rgb_16x16.png&quot;
}
</db:programlisting>
<db:para>The <db:code>url</db:code> also can be a page URL to access its icon:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;image://favicon/https://www.qt.io/&quot;
}
</db:programlisting>
<db:para>If more than one icon is available, the <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> property can be specified to choose the icon with the desired size. If <db:link xlink:href="qml-qtquick-image.xml#sourceSize-prop">Image::sourceSize</db:link> is not specified or 0, the largest available icon will be chosen.</db:para>
<db:para>The image provider looks up the requested icon in the existing <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> instances. First, it tries to match the currently displayed icons. If no match has been found it requests the icon from the database. Each profile has its own icon database and it is stored in the persistent storage thus the stored icons can be accessed without network connection too. The icon must be previously loaded to be stored in the database.</db:para>
</db:section>
<db:section xml:id="c-favicon-handling">
<db:title>C++ Favicon Handling</db:title>
<db:para>A user can request an icon from the previously loaded content for each <db:link xlink:href="qwebengineprofile.xml">QWebEngineProfile</db:link> using the <db:link xlink:href="qwebengineprofile.xml#requestIconForPageURL">QWebEngineProfile::requestIconForPageURL</db:link>() or <db:link xlink:href="qwebengineprofile.xml#requestIconForIconURL">QWebEngineProfile::requestIconForIconURL</db:link>() calls. Note that the profile's database is stored in the persistent storage and can be accessed without a network connection.</db:para>
</db:section>
</db:section>
<db:section xml:id="fullscreen">
<db:title>Fullscreen</db:title>
<db:para>Qt WebEngine supports viewing web content in fullscreen mode. For more information, see <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#fullscreenSupportEnabled-prop">WebEngineSettings.fullscreenSupportEnabled</db:link>, <db:link xlink:href="qml-qtwebengine-webengineview.xml#fullScreenRequested-signal">WebEngineView.fullScreenRequested</db:link>, <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::FullScreenSupportEnabled</db:link>, and <db:link xlink:href="qwebenginepage.xml#fullScreenRequested">QWebEnginePage::fullScreenRequested</db:link>.</db:para>
<db:para>This feature can be tested by playing a video from YouTube in <db:link xlink:href="qtwebengine-webenginewidgets-videoplayer-example.xml">Video Player</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>, and clicking the full screen icon to go into fullscreen mode.</db:para>
<db:para>Support for this feature was added in Qt 5.6.0.</db:para>
</db:section>
<db:section xml:id="hardware-acceleration">
<db:title>Hardware Acceleration</db:title>
<db:para><db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> tries to use hardware acceleration for rendering the content. It uses <db:code>OpenGL</db:code> or <db:code>OpenGLES</db:code> APIs to execute rendering calls on the GPU. As a fallback, software rendering is used whenever the hardware does not meet the required set of OpenGL functionality. A user can check the current hardware acceleration state by loading the <db:code>chrome://gpu</db:code> internal page. Moreover, the acceleration can be explicitly disabled with <db:code>QTWEBENGINE_CHROMIUM_FLAGS</db:code> using the <db:code>disable-gpu</db:code> switch. For example on Linux:</db:para>
<db:programlisting language="cpp" role="bad">export QTWEBENGINE_CHROMIUM_FLAGS=--disable-gpu
</db:programlisting>
</db:section>
<db:section xml:id="html5-drm">
<db:title>HTML5 DRM</db:title>
<db:para>Qt WebEngine supports viewing DRM protected videos if the <db:link xlink:href="http://www.widevine.com">Widevine CDM</db:link> plugin has been installed. CDM plugin is a replacement of Flash based plugins for displaying DRM-protected content. It comes only in a binary format, so it can hide DRM decryption implementation details. It can be obtained from a third party or from a Google Chrome installation.</db:para>
<db:para>Qt WebEngine on startup looks for the <db:link xlink:href="http://www.widevine.com">Widevine CDM</db:link> plugin in well know locations, like default Google Chrome installation directory or Linux distro specific paths. However, plugin location can be also passed with <db:code>QTWEBENGINE_CHROMIUM_FLAGS</db:code> using <db:code>widevine-path</db:code>.</db:para>
<db:para>On Windows:</db:para>
<db:programlisting language="cpp" role="bad">set QTWEBENGINE_CHROMIUM_FLAGS=--widevine-path=&quot;C:/some path/widevinecdm.dll&quot;
</db:programlisting>
<db:para>On Linux:</db:para>
<db:programlisting language="cpp" role="bad">export QTWEBENGINE_CHROMIUM_FLAGS=--widevine-path=&quot;/some path/libwidevinecdm.so&quot;
</db:programlisting>
<db:para>On macOS:</db:para>
<db:programlisting language="cpp" role="bad">export QTWEBENGINE_CHROMIUM_FLAGS=--widevine-path=&quot;/some path/libwidevinecdm.dylib&quot;
</db:programlisting>
<db:para>The video format most commonly used by DRM services, H.264, requires proprietary audio and video codecs. For more information about enabling the codecs, see <db:link xlink:href="qtwebengine-features.xml#audio-and-video-codecs">Audio and Video Codecs</db:link>.</db:para>
<db:para>This feature can be tested by playing a video in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link> from <db:link xlink:href="http://demo.castlabs.com/">castLabs</db:link>, <db:link xlink:href="http://ssdemo04.swankmp.net/">Swank Motion Pictures, Inc.</db:link>, or <db:link xlink:href="https://bitmovin.com/demos/drm">Bitmovin Player</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.7.0.</db:para>
</db:section>
<db:section xml:id="html5-geolocation">
<db:title>HTML5 Geolocation</db:title>
<db:para>Qt WebEngine supports JavaScript Geolocation API with <db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link> as a backend. HTML5 geolocation is disabled by default. To explicitly allow it, the application needs to listen to <db:link xlink:href="qwebenginepage.xml#featurePermissionRequested">QWebEnginePage::featurePermissionRequested</db:link>. Use <db:link xlink:href="qwebenginepage.xml#Feature-enum">QWebEnginePage::Geolocation</db:link> with a <db:link xlink:href="qwebenginepage.xml#setFeaturePermission">QWebEnginePage::setFeaturePermission</db:link>() call or <db:link xlink:href="qml-qtwebengine-webengineview.xml#Feature-prop">WebEngineView::Feature</db:link> with a <db:link xlink:href="qml-qtwebengine-webengineview.xml#grantFeaturePermission-method">WebEngineView.grantFeaturePermission</db:link>() call to grant the required permission.</db:para>
<db:para>If Qt WebEngine was built with Qt Positioning support then this feature can be tested by using <db:link xlink:href="qtwebengine-webenginewidgets-maps-example.xml">Maps</db:link> and allowing it to find the current position of the user.</db:para>
<db:para>See <db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link> for a possible backend setup like the GPS or IP based positioning.</db:para>
<db:para>Support for this feature was added in Qt 5.5.0.</db:para>
</db:section>
<db:section xml:id="html5-websockets">
<db:title>HTML5 WebSockets</db:title>
<db:para>Qt WebEngine supports the WebSocket JavaScript API to communicate with WebSocket servers using the <db:code>ws://</db:code> or <db:code>wss://</db:code> protocols. Moreover, integration with Qt WebChannel and Qt WebSockets enables communication between JavaScript and the native side of the application.</db:para>
<db:para>The Qt WebChannel module has a great example for a <db:link xlink:href="qtwebchannel-chatserver-cpp-example.xml">chat server</db:link> and its web based <db:link xlink:href="qtwebchannel-chatclient-html-example.xml">chat client</db:link>. The client works out of the box in the example browsers of Qt WebEngine (such as <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>).</db:para>
</db:section>
<db:section xml:id="http-2-protocol">
<db:title>HTTP/2 Protocol</db:title>
<db:para>Qt WebEngine supports the Chromium implementation of the <db:link xlink:href="https://http2.github.io/">HTTP/2</db:link> protocol.</db:para>
<db:para>This feature can be tested by opening an HTTP/2 demo, such as the <db:link xlink:href="https://http2.akamai.com/demo">Akamai HTTP/2 Demo</db:link>, in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>.</db:para>
</db:section>
<db:section xml:id="local-storage">
<db:title>Local Storage</db:title>
<db:para>Qt WebEngine supports saving key-value pairs in a <db:code>Local Storage</db:code> with no expiration date. This is a part of the <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API">Web Storage API</db:link>, where a user can access a <db:code>Storage</db:code> object for the given domains using the <db:code>Window.localStorage</db:code> JavaScript property. The stored data will persist even after the page or the browser application is closed.</db:para>
<db:para>Note that the <db:code>Local</db:code> Storage can be also disabled with a <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::LocalStorageEnabled</db:link> setting. Moreover, the storage path can be adjusted with a <db:link xlink:href="qwebengineprofile.xml#setPersistentStoragePath">QWebEngineProfile::setPersistentStoragePath</db:link> call.</db:para>
<db:programlisting language="cpp">QWebEngineProfile profile(&quot;MyProfile&quot;);
profile.settings()-&amp;gt;setAttribute(QWebEngineSettings::LocalStorageEnabled, isEnabled);
profile.setPersistentStoragePath(&quot;/path/to/storage&quot;);
</db:programlisting>
<db:para>Qt WebEngine offers also an easy way of investigating the content of the <db:code>Local Storage</db:code> with <db:link xlink:href="qtwebengine-debugging.xml#qt-webengine-developer-tools">Qt WebEngine Developer Tools</db:link> by visiting the <db:guilabel>Application</db:guilabel> panel and expanding the <db:guilabel>Local Storage</db:guilabel> menu.</db:para>
</db:section>
<db:section xml:id="native-dialogs">
<db:title>Native Dialogs</db:title>
<db:para>A web page might request dialogs for the following functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Entering user credentials for HTTP and proxy authentication</db:para>
</db:listitem>
<db:listitem>
<db:para>Displaying JavaScript alerts, confirmation dialogs, and prompts</db:para>
</db:listitem>
<db:listitem>
<db:para>Picking colors</db:para>
</db:listitem>
<db:listitem>
<db:para>Selecting files</db:para>
</db:listitem>
<db:listitem>
<db:para>Displaying form validation messages</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt WebEngine provides standard dialogs for these functions. In widget-based applications, the standard dialogs are based on <db:link xlink:href="qdialog.xml">QDialog</db:link>, whereas in Qt Quick applications, they can be based either on Qt Quick Controls 1 or Qt Quick Controls 2 (since Qt 5.8). The latter are used only on <db:code>eglfs</db:code> platforms.</db:para>
<db:para>To explicitly force either dialogs based on Qt Quick Controls 1 or Qt Quick Controls 2, set the <db:code>QTWEBENGINE_DIALOG_SET</db:code> environment variable to either <db:code>QtQuickControls1</db:code> or <db:code>QtQuickControls2</db:code>.</db:para>
<db:para>Qt WebEngine Widgets dialogs can be customized by reimplementing the <db:link xlink:href="qwebenginepage.xml#chooseFiles">QWebEnginePage::chooseFiles</db:link>(), <db:link xlink:href="qwebenginepage.xml#javaScriptAlert">QWebEnginePage::javaScriptAlert</db:link>(), <db:link xlink:href="qwebenginepage.xml#javaScriptConfirm">QWebEnginePage::javaScriptConfirm</db:link>(), and <db:link xlink:href="qwebenginepage.xml#javaScriptPrompt">QWebEnginePage::javaScriptPrompt</db:link>() functions.</db:para>
<db:para>Since Qt 5.8, Qt Quick dialogs can be customized by connecting to the <db:link xlink:href="qml-qtwebengine-webengineview.xml#authenticationDialogRequested-signal">WebEngineView::authenticationDialogRequested</db:link>(), <db:link xlink:href="qml-qtwebengine-webengineview.xml#javaScriptDialogRequested-signal">WebEngineView::javaScriptDialogRequested</db:link>(), <db:link xlink:href="qml-qtwebengine-webengineview.xml#colorDialogRequested-signal">WebEngineView::colorDialogRequested</db:link>(), <db:link xlink:href="qml-qtwebengine-webengineview.xml#fileDialogRequested-signal">WebEngineView::fileDialogRequested</db:link>(), and WebEngineView::formValidationMessageRequested() signals. For an example, see <db:link xlink:href="qtwebengine-webenginequick-customdialogs-example.xml">WebEngine Qt Quick Custom Dialogs Example</db:link>.</db:para>
</db:section>
<db:section xml:id="pepper-plugin-api">
<db:title>Pepper Plugin API</db:title>
<db:para>Qt WebEngine supports loading Pepper Plugin API (PPAPI) plugins if <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#pluginsEnabled-prop">WebEngineSettings::pluginsEnabled</db:link> or <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::PluginsEnabled</db:link> is set.</db:para>
<db:para>The plugins must be loaded manually using the Chromium command line syntax with the <db:code>--register-pepper-plugins</db:code> argument. The argument value is a list of entries, separated by commas, that contain the file path and one or several MIME types, separated by semicolons:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;file-path-plugin1&amp;gt;;&amp;lt;mime-type-plugin1&amp;gt;,&amp;lt;file-path-plugin2&amp;gt;;&amp;lt;mime-type1-plugin2&amp;gt;;&amp;lt;mime-type2-plugin2&amp;gt;
</db:programlisting>
<db:para>For example:</db:para>
<db:programlisting language="cpp" role="bad">--webEngineArgs --register-pepper-plugins=&quot;libppapi_example.so;application/x-ppapi-example&quot;
</db:programlisting>
<db:para>The MIME type is important because it determines which embeds the plugin is used for.</db:para>
<db:para>Support for this feature was added in Qt 5.6.0.</db:para>
</db:section>
<db:section xml:id="pdf-file-viewing">
<db:title>PDF File Viewing</db:title>
<db:para>Qt WebEngine supports viewing PDF documents by navigating to them. This feature uses the Chromium extensions API and PDF viewer plugin to display the PDF documents. It can be tested in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>.</db:para>
<db:para>Loading plugins needs to be enabled using <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::PluginsEnabled</db:link> or <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#pluginsEnabled-prop">WebEngineSettings::pluginsEnabled</db:link> in order to use this feature.</db:para>
<db:para>This feature can be turned on (default) or off via the <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::PdfViewerEnabled</db:link> or <db:link xlink:href="qml-qtwebengine-webenginesettings.xml#pdfViewerEnabled-prop">WebEngineSettings::pdfViewerEnabled</db:link> setting.</db:para>
<db:para>Support for this feature was added in Qt 5.13.0.</db:para>
</db:section>
<db:section xml:id="page-lifecycle-api">
<db:title>Page Lifecycle API</db:title>
<db:para>Qt WebEngine supports the <db:link xlink:href="https://wicg.github.io/page-lifecycle/spec.html">Page Lifecycle API specification</db:link>, a work-in-progress extension to the HTML standard for allowing user agents to reduce their resource consumption by freezing or discarding background pages. The feature is exposed both in the Widgets and QML APIs.</db:para>
<db:para>For an example of the QML API in use, see the <db:link xlink:href="qtwebengine-webenginequick-lifecycle-example.xml">WebEngine Lifecycle Example</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.14.0.</db:para>
<db:section xml:id="overview-of-lifecycle-states">
<db:title>Overview of Lifecycle States</db:title>
<db:para>Each <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> item (or <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> object) can be in one of three <db:emphasis>lifecycle states</db:emphasis>: active, frozen, or discarded. These states, like the sleep states of a CPU, control the resource usage of web views.</db:para>
<db:para>The <db:emphasis>active</db:emphasis> state is the normal, unrestricted state of a web view. All visible web views are always in the active state, as are all web views that have not yet finished loading. Only invisible, idle web views can be transitioned to other lifecycle states.</db:para>
<db:para>The <db:emphasis>frozen</db:emphasis> state is a low CPU usage state. In this state, most HTML task sources are suspended (frozen) and, as a result, most DOM event processing and JavaScript execution will also be suspended. The web view must be invisible in order to be frozen as rendering is not possible in this state.</db:para>
<db:para>The <db:emphasis>discarded</db:emphasis> state is an extreme resource-saving state. In this state, the browsing context of the web view will be discarded and the corresponding renderer subprocess shut down. CPU and memory usage in this state is reduced virtually to zero. On exiting this state the web page will be automatically reloaded. The process of entering and exiting the discarded state is similar to serializing the browsing history of the web view and destroying the view, then creating a new view and restoring its history.</db:para>
<db:para>See also <db:link xlink:href="qml-qtwebengine-webengineview.xml#LifecycleState-prop">WebEngineView::LifecycleState</db:link>. The equivalent in the Widgets API is <db:link xlink:href="qwebenginepage.xml#LifecycleState-enum">QWebEnginePage::LifecycleState</db:link>.</db:para>
</db:section>
<db:section xml:id="the-lifecyclestate-and-recommendedstate-properties">
<db:title>The <db:code>lifecycleState</db:code> and <db:code>recommendedState</db:code> Properties</db:title>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">lifecycleState</db:link> property of the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type is a read-write property that controls the current lifecycle state of the web view. This property is designed to place as few restrictions as possible on what states can be transitioned to. For example, it is allowed to freeze a web view that is currently playing music in the background, stopping the music. In order to implement a less aggressive resource-saving strategy that avoids interrupting user-visible background activity, the <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link> property must be used.</db:para>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link> property of the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> type is a read-only property that calculates a safe limit on the <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">lifecycleState</db:link> property, taking into account the current activity of the web view. So, in the example of a web view playing music in the background, the recommended state will be <db:code>Active</db:code> since a more aggressive state would stop the music. If the application wants to avoid interrupting background activity, then it should avoid putting the web view into a more aggressively resource-saving lifecycle state than what's given by <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link>.</db:para>
<db:para>See also <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">WebEngineView::lifecycleState</db:link> and <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">WebEngineView::recommendedState</db:link>. The equivalents in the Widgets API are <db:link xlink:href="qwebenginepage.xml#lifecycleState-propx">QWebEnginePage::lifecycleState</db:link> and <db:link xlink:href="qwebenginepage.xml#recommendedState-prop">QWebEnginePage::recommendedState</db:link>.</db:para>
</db:section>
<db:section xml:id="the-dom-extensions">
<db:title>The DOM Extensions</db:title>
<db:para>The <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-propx">lifecycleState</db:link> property is connected to the <db:link xlink:href="https://wicg.github.io/page-lifecycle/spec.html">Page Lifecycle API specification</db:link>, which specifies two new DOM events, <db:code>freeze</db:code> and <db:code>resume</db:code>, and adds a new <db:code>Document.wasDiscarded</db:code> boolean property. The <db:code>freeze</db:code> and <db:code>resume</db:code> events are fired when transitioning from the <db:code>Active</db:code> to the <db:code>Frozen state</db:code>, and vice-versa. The <db:code>Document.wasDiscarded</db:code> property is set to <db:code>true</db:code> when transitioning from the <db:code>Discarded</db:code> state to the <db:code>Active</db:code> state.</db:para>
</db:section>
</db:section>
<db:section xml:id="print-to-pdf">
<db:title>Print to PDF</db:title>
<db:para>Qt WebEngine supports printing a web page to a PDF file. For more information, see <db:link xlink:href="qwebenginepage.xml#printToPdf">QWebEnginePage::printToPdf</db:link>() and <db:link xlink:href="qml-qtwebengine-webengineview.xml#printToPdf-method">WebEngineView.printToPdf</db:link>.</db:para>
<db:para>This feature can be tested using <db:link xlink:href="qtwebengine-webenginewidgets-html2pdf-example.xml">Html2Pdf</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.7.0.</db:para>
</db:section>
<db:section xml:id="process-models">
<db:title>Process Models</db:title>
<db:para>Qt WebEngine uses multiple OS processes to isolate web sites from each other and from the client application, improving security and robustness. The following process models, or ways to divide web sites between OS processes, are supported:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#process-per-site-instance">Process per Site Instance</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#process-per-site">Process per Site</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtwebengine-features.xml#single-process">Single Process</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="process-per-site-instance">
<db:title>Process per Site Instance</db:title>
<db:para>This is the default model. Pages from separate sites are put into separate processes and separate visits to the same site are also isolated.</db:para>
<db:para>Two web pages are considered as belonging to the same site if they originate from the same registered domain name (for example, <db:code>wikipedia.org</db:code>) and scheme (for example, <db:code>https</db:code>). This is similar to the same-origin policy but subdomains are ignored. For example, both <db:code>https://en.wikipedia.org/</db:code> and <db:code>https://de.wikipedia.org/</db:code> would belong to the same site.</db:para>
<db:para>A site instance is a collection of web pages belonging to the same site. When the application explicitly loads a URL into Qt WebEngine (via <db:link xlink:href="qwebenginepage.xml#url-prop">QWebEnginePage::setUrl</db:link>, for example), a new site instance is created for the page. However, when the user clicks same-site links on the page, the existing site instance is merely extended with more pages.</db:para>
<db:para>For instance, in the <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> example, when a user opens two tabs and explicitly enters <db:code>https://en.wikipedia.org/</db:code> into the URL bars, both tabs will have their own separate OS processes (because explicitly entering a URL creates a new site instance). However, when the user then middle-clicks some same-site links to open more tabs, these new tabs will share the same OS process (because user interaction extends the existing site instance).</db:para>
</db:section>
<db:section xml:id="process-per-site">
<db:title>Process per Site</db:title>
<db:para>Pages from separate sites are put into separate processes. Unlike Process per Site Instance, all visits to the same site will share an OS process.</db:para>
<db:para>The benefit of this model is reduced memory consumption, because more web pages will share processes. The drawbacks include reduced security, robustness, and responsiveness.</db:para>
<db:para>To enable this model, use the command-line argument <db:code>--process-per-site</db:code>. See <db:link xlink:href="qtwebengine-debugging.xml#using-command-line-arguments">Using Command-Line Arguments</db:link>.</db:para>
</db:section>
<db:section xml:id="single-process">
<db:title>Single Process</db:title>
<db:para>For debugging purposes only, a single process mode can be enabled using the command-line argument <db:code>--single-process</db:code>. See <db:link xlink:href="qtwebengine-debugging.xml#using-command-line-arguments">Using Command-Line Arguments</db:link> and <db:link xlink:href="qtwebengine-debugging.xml">Qt WebEngine Debugging and Profiling</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="spellchecker">
<db:title>Spellchecker</db:title>
<db:para>Qt WebEngine supports integrating spellchecking support into HTML forms to enable users to submit spellchecked messages. When the user clicks on an underlined misspelled word, the default context menu displays up to four suggestions. Selecting one will replace the misspelled word.</db:para>
<db:para>To be able to check the spelling, the spellchecker needs dictionaries. It supports dictionaries from the <db:link xlink:href="https://sourceforge.net/projects/hunspell/">Hunspell project</db:link>, but they have to be compiled into a special binary format. A Hunspell dictionary consists of two files:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:code>.dic</db:code> file that is a dictionary containing words for the language</db:para>
</db:listitem>
<db:listitem>
<db:para>An <db:code>.aff</db:code> file that defines the meaning of special flags in the dictionary</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These two files can be converted into the <db:code>bdic</db:code> format by using the <db:code>qwebengine_convert_dict</db:code> tool that is shipped together with Qt. When the Qt WebEngine spellchecker initializes, it will try to load the <db:code>bdict</db:code> dictionaries and to check them for consistency.</db:para>
<db:para>If <db:code>QTWEBENGINE_DICTIONARIES_PATH</db:code> is set, the spellchecker uses the dictionaries in the specified directory without looking anywere else. Otherwise, it uses the <db:emphasis>qtwebengine_dictionaries</db:emphasis> directory relative to the executable if it exists. If it does not exist, it will look in <db:code>QT_INSTALL_PREFIX/qtwebengine_dictionaries</db:code>.</db:para>
<db:para>On macOS, depending on how Qt WebEngine is configured at build time, there are two possibilities how spellchecking data is found:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Hunspell dictionaries (default) - .bdic dictionaries are used, just like on other platforms</db:para>
</db:listitem>
<db:listitem>
<db:para>Native dictionaries - the macOS spellchecking APIs are used (which means the results will depend on the installed OS dictionaries)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Thus, in the macOS Hunspell case, Qt WebEngine will look in the <db:emphasis>qtwebengine_dictionaries</db:emphasis> subdirectory located inside the application bundle <db:code>Resources</db:code> directory, and also in the <db:code>Resources</db:code> directory located inside the Qt framework bundle.</db:para>
<db:para>To summarize, in case of Hunspell usage, the following paths are considered:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QTWEBENGINE_DICTIONARIES_PATH</db:code>, if set</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()/qtwebengine_dictionaries or <db:link xlink:href="qcoreapplication.xml#applicationDirPath">QCoreApplication::applicationDirPath</db:link>()/../Contents/Resources/qtwebengine_dictionaries (on macOS)</db:para>
</db:listitem>
<db:listitem>
<db:para>[<db:link xlink:href="qlibraryinfo.xml#LibraryPath-enum">QLibraryInfo::DataPath</db:link>]/qtwebengine_dictionaries or path/to/<db:link xlink:href="qtwebenginecore-module.xml">QtWebEngineCore</db:link>.framework/Resources/qtwebengine_dictionaries (Qt framework bundle on macOS)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Spellchecking is disabled by default and can be enabled per profile by using the <db:link xlink:href="qwebengineprofile.xml#setSpellCheckEnabled">QWebEngineProfile::setSpellCheckEnabled</db:link>() method in widget-based applications and the <db:link xlink:href="qquickwebengineprofile.xml#spellCheckEnabled-prop">WebEngineProfile.spellCheckEnabled</db:link> property in Qt Quick applications.</db:para>
<db:para>The current language used for spellchecking is defined per profile, and can be set using the <db:link xlink:href="qwebengineprofile.xml#setSpellCheckLanguages">QWebEngineProfile::setSpellCheckLanguages</db:link>() method or the <db:link xlink:href="qquickwebengineprofile.xml#spellCheckLanguages">WebEngineProfile.spellCheckLanguages</db:link> property.</db:para>
<db:para>This feature can be tested by building and running the <db:link xlink:href="qtwebengine-webenginewidgets-spellchecker-example.xml">Spellchecker Example</db:link>.</db:para>
<db:para>Qt WebEngine can be compiled also without spellchecker support with the use of a <db:code>webengine-spellchecker</db:code> configure switch.</db:para>
<db:programlisting language="cpp" role="bad">qt-configure-module path\to\qtwebengine\sources -no-webengine-spellchecker
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="configure-options.xml">Qt Configure Options</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.8.0.</db:para>
</db:section>
<db:section xml:id="touch">
<db:title>Touch</db:title>
<db:para>Qt WebEngine supports touch devices for navigating and interacting with web pages.</db:para>
<db:para>Applications can prohibit the use of touch events in the following ways:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Passing the flag <db:code>--touch-events=disabled</db:code> on the command line will disable touch event support in JavaScript API (meaning <db:code>ontouchstart</db:code> and related handlers will not be present in the <db:code>document.window</db:code> object). Touch events will still be delivered to web pages.</db:para>
</db:listitem>
<db:listitem>
<db:para>Installing an event filter object using <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link> on the <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> view focus proxy object, and filtering out all touch events.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="view-source">
<db:title>View Source</db:title>
<db:para>Qt WebEngine supports viewing the HTML source of a web page.</db:para>
<db:para>This feature can be used from custom menus or assigned to custom events. For more information, see <db:link xlink:href="qml-qtwebengine-webengineview.xml#WebAction-prop">WebEngineView::WebAction</db:link>, and <db:link xlink:href="qwebenginepage.xml#WebAction-enum">QWebEnginePage::WebAction</db:link>.</db:para>
<db:para>This feature can be tested by opening a web page in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>, and then selecting <db:code>Page Source</db:code> in the context menu. The <db:code>Page Source</db:code> context menu entry opens the source view in a new tab.</db:para>
<db:para>For opening the source view in the current tab, URLs with <db:link xlink:href="https://www.iana.org/assignments/uri-schemes/prov/view-source">view-source URI scheme</db:link> are also supported. For example, you can type the following URL to the URL bar to view the HTML source of the qt.io web page:</db:para>
<db:programlisting language="cpp" role="bad">view-source:https://www.qt.io/
</db:programlisting>
<db:para>Auto-completion of incomplete URLs with <db:link xlink:href="https://www.iana.org/assignments/uri-schemes/prov/view-source">view-source URI scheme</db:link> makes the usage of this feature more comfortable. For example, the following incomplete URL also loads the source view of the qt.io web page:</db:para>
<db:programlisting language="cpp" role="bad">view-source:qt.io
</db:programlisting>
<db:para>Support for this feature was added in Qt 5.8.0.</db:para>
</db:section>
<db:section xml:id="web-notifications">
<db:title>Web Notifications</db:title>
<db:para>Qt <db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> supports JavaScript <db:link xlink:href="https://www.w3.org/TR/notifications">Web Notifications API</db:link>. The application has to explicitly allow the feature by using <db:link xlink:href="qwebenginepage.xml#Feature-enum">QWebEnginePage::Notifications</db:link> or <db:link xlink:href="qml-qtwebengine-webengineview.xml#Feature-prop">WebEngineView.Notifications</db:link>.</db:para>
<db:para>Support for this feature was added in Qt 5.13.0.</db:para>
</db:section>
<db:section xml:id="webgl">
<db:title>WebGL</db:title>
<db:para>Qt WebEngine supports WebGL for some graphics stacks setups. A user can visit the chrome://gpu page using the <db:link xlink:href="qtwebengine-qmlmodule.xml">QtWebEngine</db:link> powered application. The <db:emphasis>Graphics Feature Status</db:emphasis> overview states if WebGL is supported for the current platform setup. A user can also check the <db:link xlink:href="https://webglreport.com">WebGL Report</db:link>.</db:para>
<db:para>The WebGL support is enabled by default. You can disable it with the <db:link xlink:href="qwebenginesettings.xml#WebAttribute-enum">QWebEngineSettings::WebGLEnabled</db:link> setting.</db:para>
<db:anchor xml:id="webrtc-feature"/>
</db:section>
<db:section xml:id="webrtc">
<db:title>WebRTC</db:title>
<db:para>WebRTC provides browsers with Real-Time Communications (RTC) capabilities via simple APIs. For more information, see <db:link xlink:href="qml-qtwebengine-webengineview.xml#Feature-prop">WebEngineView.Feature</db:link>, and <db:link xlink:href="qwebenginepage.xml#Feature-enum">QWebEnginePage::Feature</db:link>.</db:para>
<db:para>This feature can be tested by setting up a webcam or microphone and then opening <db:code>https://test.webrtc.org/</db:code> in <db:link xlink:href="qtwebengine-webenginewidgets-simplebrowser-example.xml">Simple Browser</db:link> or <db:link xlink:href="qtwebengine-webenginequick-quicknanobrowser-example.xml">Nano Browser</db:link>.</db:para>
</db:section>
</db:article>
