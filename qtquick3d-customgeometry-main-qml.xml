<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Geometry Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates providing custom vertex data from C++ and QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls
import QtQuick.Layouts
import QtQuick3D
import QtQuick3D.Helpers
import CustomGeometryExample

ApplicationWindow {
    id: window
    width: 1280
    height: 720
    visible: true
    title: &quot;Custom Geometry Example&quot;

    property bool isLandscape: width &amp;gt; height

    View3D {
        id: v3d
        anchors.left: window.isLandscape ? controlsPane.right : parent.left
        anchors.top: window.isLandscape ? parent.top : controlsPane.bottom
        anchors.right: parent.right
        anchors.bottom: parent.bottom

        camera: camera

        environment: SceneEnvironment {
            id: env
            backgroundMode: SceneEnvironment.Color
            clearColor: &quot;#002b36&quot;
        }

        Node {
            id: originNode
            PerspectiveCamera {
                id: cameraNode
                z: 600
            }
        }

        DirectionalLight {
            id: directionalLight
            color: Qt.rgba(0.4, 0.2, 0.6, 1.0)
            ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
        }

        PointLight {
            id: pointLight
            position: Qt.vector3d(0, 0, 100)
            color: Qt.rgba(0.1, 1.0, 0.1, 1.0)
            ambientColor: Qt.rgba(0.2, 0.2, 0.2, 1.0)
        }

        Model {
            id: gridModel
            visible: false
            scale: Qt.vector3d(100, 100, 100)
            geometry: GridGeometry {
                id: grid
                horizontalLines: 20
                verticalLines: 20
            }
            materials: [
                DefaultMaterial {
                    lineWidth: sliderLineWidth.value
                }
            ]
        }

        Model {
            id: triangleModel
            visible: false
            scale: Qt.vector3d(100, 100, 100)
            geometry: ExampleTriangleGeometry {
                normals: cbNorm.checked
                normalXY: sliderNorm.value
                uv: cbUV.checked
                uvAdjust: sliderUV.value
            }
            materials: [
                DefaultMaterial {
                    Texture {
                        id: baseColorMap
                        source: &quot;qt_logo_rect.png&quot;
                    }
                    cullMode: DefaultMaterial.NoCulling
                    diffuseMap: cbTexture.checked ? baseColorMap : null
                    specularAmount: 0.5
                }
            ]
        }

        Model {
            id: pointModel
            visible: false
            scale: Qt.vector3d(100, 100, 100)
            geometry: ExamplePointGeometry { }
            materials: [
                DefaultMaterial {
                    lighting: DefaultMaterial.NoLighting
                    cullMode: DefaultMaterial.NoCulling
                    diffuseColor: &quot;yellow&quot;
                    pointSize: sliderPointSize.value
                }
            ]
        }

        Model {
            id: torusModel
            visible: false
            geometry: TorusMesh {
                radius: radiusSlider.value
                tubeRadius: tubeRadiusSlider.value
                segments: segmentsSlider.value
                rings: ringsSlider.value
            }
            materials: [
                PrincipledMaterial {
                    id: torusMaterial
                    baseColor: &quot;#dc322f&quot;
                    metalness: 0.0
                    roughness: 0.1
                }
            ]
        }

        OrbitCameraController {
            origin: originNode
            camera: cameraNode
        }
    }

    Pane {
        id: controlsPane
        width: window.isLandscape ? implicitWidth : window.width
        height: window.isLandscape ? window.height : implicitHeight
        ColumnLayout {
            GroupBox {
                title: &quot;Mode&quot;
                ButtonGroup {
                    id: modeGroup
                    buttons: [ radioGridGeom, radioCustGeom, radioPointGeom, radioQMLGeom ]
                }
                ColumnLayout {
                    RadioButton {
                        id: radioGridGeom
                        text: &quot;GridGeometry&quot;
                        checked: true
                    }
                    RadioButton {
                        id: radioCustGeom
                        text: &quot;Custom geometry from application (triangle)&quot;
                        checked: false
                    }
                    RadioButton {
                        id: radioPointGeom
                        text: &quot;Custom geometry from application (points)&quot;
                        checked: false
                    }
                    RadioButton {
                        id: radioQMLGeom
                        text: &quot;Custom geometry from QML&quot;
                        checked: false
                    }
                }
            }

            Pane {
                id: gridSettings
                visible: false
                ColumnLayout {
                    Button {
                        text: &quot;+ Y Cells&quot;
                        onClicked: grid.horizontalLines += 1
                        Layout.alignment: Qt.AlignHCenter

                    }
                    RowLayout {
                        Layout.alignment: Qt.AlignHCenter
                        Button  {
                            text: &quot;- X Cells&quot;
                            onClicked: grid.verticalLines -= 1
                        }
                        Button {
                            text: &quot;+ X Cells&quot;
                            onClicked: grid.verticalLines += 1
                        }
                    }
                    Button  {
                        text: &quot;- Y Cells&quot;
                        onClicked: grid.horizontalLines -= 1
                        Layout.alignment: Qt.AlignHCenter
                    }

                    Label {
                        text: &quot;Line width (if supported)&quot;
                    }
                    Slider {
                        Layout.fillWidth: true
                        id: sliderLineWidth
                        from: 1.0
                        to: 10.0
                        stepSize: 0.5
                        value: 1.0
                    }
                }
            }
            Pane {
                id: triangleSettings
                visible: false
                ColumnLayout {
                    CheckBox {
                        id: cbNorm
                        text: &quot;provide normals in geometry&quot;
                        checked: false
                    }
                    RowLayout {
                        enabled: cbNorm.checked
                        Label {
                            Layout.fillWidth: true
                            text: &quot;Normal adjust: &quot;
                        }
                        Slider {
                            id: sliderNorm

                            from: 0.0
                            to: 1.0
                            stepSize: 0.01
                            value: 0.0
                        }
                    }
                    CheckBox {
                        id: cbTexture
                        text: &quot;enable base color map&quot;
                        checked: false
                    }
                    CheckBox {
                        id: cbUV
                        text: &quot;provide UV in geometry&quot;
                        checked: false
                    }
                    RowLayout {
                        enabled: cbUV.checked
                        Label {
                            Layout.fillWidth: true
                            text: &quot;UV adjust:&quot;
                        }
                        Slider {
                            id: sliderUV
                            from: 0.0
                            to: 1.0
                            stepSize: 0.01
                            value: 0.0
                        }
                    }
                }

            }
            Pane {
                id: pointSettings
                visible: false
                RowLayout {
                    ColumnLayout {
                        RowLayout {
                            Label {
                                text: &quot;Point size (if supported)&quot;
                            }
                            Slider {
                                id: sliderPointSize
                                from: 1.0
                                to: 16.0
                                stepSize: 1.0
                                value: 1.0
                            }
                        }
                    }
                }
            }
            Pane {
                id: torusSettings
                visible: false
                ColumnLayout {
                    Label {
                        text: &quot;Radius: (&quot; + radiusSlider.value + &quot;)&quot;
                    }
                    Slider {
                        id: radiusSlider
                        from: 1.0
                        to: 1000.0
                        stepSize: 1.0
                        value: 200
                    }
                    Label {
                        text: &quot;Tube Radius: (&quot; + tubeRadiusSlider.value + &quot;)&quot;
                    }
                    Slider {
                        id: tubeRadiusSlider
                        from: 1.0
                        to: 500.0
                        stepSize: 1.0
                        value: 50
                    }
                    Label {
                        text: &quot;Rings: (&quot; + ringsSlider.value + &quot;)&quot;
                    }
                    Slider {
                        id: ringsSlider
                        from: 3
                        to: 35
                        stepSize: 1.0
                        value: 20
                    }
                    Label {
                        text: &quot;Segments: (&quot; + segmentsSlider.value + &quot;)&quot;
                    }
                    Slider {
                        id: segmentsSlider
                        from: 3
                        to: 35
                        stepSize: 1.0
                        value: 20
                    }
                    CheckBox {
                        id: wireFrameCheckbox
                        text: &quot;Wireframe Mode&quot;
                        checked: false
                        onCheckedChanged: {
                            env.debugSettings.wireframeEnabled = checked
                            torusMaterial.cullMode = checked ? Material.NoCulling : Material.BackFaceCulling

                        }
                    }
                }

            }
        }
        states: [
            State {
                name: &quot;gridMode&quot;
                when: radioGridGeom.checked
                PropertyChanges {
                    gridModel.visible: true
                    gridSettings.visible: true
                    env.debugSettings.wireframeEnabled: false
                    originNode.position: Qt.vector3d(0, 0, 0)
                    originNode.rotation: Qt.quaternion(1, 0, 0, 0)
                    cameraNode.z: 600

                }
            },
            State {
                name: &quot;triangleMode&quot;
                when: radioCustGeom.checked
                PropertyChanges {
                    triangleModel.visible: true
                    triangleSettings.visible: true
                    env.debugSettings.wireframeEnabled: false
                    originNode.position: Qt.vector3d(0, 0, 0)
                    originNode.rotation: Qt.quaternion(1, 0, 0, 0)
                    cameraNode.z: 600
                }
            },
            State {
                name: &quot;pointMode&quot;
                when: radioPointGeom.checked
                PropertyChanges {
                    pointModel.visible: true
                    pointSettings.visible: true
                    env.debugSettings.wireframeEnabled: false
                    originNode.position: Qt.vector3d(0, 0, 0)
                    originNode.rotation: Qt.quaternion(1, 0, 0, 0)
                    cameraNode.z: 600
                }
            },
            State {
                name: &quot;qmlMode&quot;
                when: radioQMLGeom.checked
                PropertyChanges {
                    torusModel.visible: true
                    torusSettings.visible: true
                    directionalLight.eulerRotation: Qt.vector3d(-40, 0, 0)
                    directionalLight.color: &quot;white&quot;
                    pointLight.color: &quot;white&quot;
                    pointLight.position: Qt.vector3d(0, 0, 0)
                    originNode.position: Qt.vector3d(0, 0, 0)
                    originNode.eulerRotation: Qt.vector3d(-40, 0, 0)
                    cameraNode.z: 600
                }
            }
        ]
    }
}

</db:programlisting>
</db:article>
