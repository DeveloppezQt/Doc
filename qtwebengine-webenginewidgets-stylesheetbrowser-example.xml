<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine StyleSheet Browser Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to inject CSS into web pages using user scripts.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stylesheetbrowser.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>StyleSheet Browser</db:emphasis> demonstrates how to use the <db:link xlink:href="qtwebenginewidgets-module.xml">Qt WebEngine C++ classes</db:link> to inject user stylesheets into web pages.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="working-with-stylesheets">
<db:title>Working With Stylesheets</db:title>
<db:para>We use JavaScript to create and append CSS elements to the documents. After declaring the script source, <db:link xlink:href="qwebenginepage.xml#runJavaScript">QWebEnginePage::runJavaScript</db:link>() can run it immediately and apply newly created styles on the current content of the web view. Encapsulating the script into a <db:link xlink:href="qwebenginescript.xml">QWebEngineScript</db:link> and adding it to the script collection of <db:link xlink:href="qwebenginepage.xml">QWebEnginePage</db:link> makes its effect permanent.</db:para>
<db:programlisting language="cpp">void MainWindow::insertStyleSheet(const QString &amp;amp;name, const QString &amp;amp;source, bool immediately)
{
    QWebEngineScript script;
    QString s = QString::fromLatin1(&quot;(function() {&quot;\
                                    &quot;    css = document.createElement('style');&quot;\
                                    &quot;    css.type = 'text/css';&quot;\
                                    &quot;    css.id = '%1';&quot;\
                                    &quot;    document.head.appendChild(css);&quot;\
                                    &quot;    css.innerText = '%2';&quot;\
                                    &quot;})()&quot;).arg(name).arg(source.simplified());
    if (immediately)
        ui-&amp;gt;webEngineView-&amp;gt;page()-&amp;gt;runJavaScript(s, QWebEngineScript::ApplicationWorld);

    script.setName(name);
    script.setSourceCode(s);
    script.setInjectionPoint(QWebEngineScript::DocumentReady);
    script.setRunsOnSubFrames(true);
    script.setWorldId(QWebEngineScript::ApplicationWorld);
    ui-&amp;gt;webEngineView-&amp;gt;page()-&amp;gt;scripts().insert(script);
}
</db:programlisting>
<db:para>Removing stylesheets can be done similarly:</db:para>
<db:programlisting language="cpp">void MainWindow::removeStyleSheet(const QString &amp;amp;name, bool immediately)
{
    QString s = QString::fromLatin1(&quot;(function() {&quot;\
                                    &quot;    var element = document.getElementById('%1');&quot;\
                                    &quot;    element.outerHTML = '';&quot;\
                                    &quot;    delete element;&quot;\
                                    &quot;})()&quot;).arg(name);
    if (immediately)
        ui-&amp;gt;webEngineView-&amp;gt;page()-&amp;gt;runJavaScript(s, QWebEngineScript::ApplicationWorld);

    const QList&amp;lt;QWebEngineScript&amp;gt; scripts = ui-&amp;gt;webEngineView-&amp;gt;page()-&amp;gt;scripts().find(name);
    if (!scripts.isEmpty())
        ui-&amp;gt;webEngineView-&amp;gt;page()-&amp;gt;scripts().remove(scripts.first());
}
</db:programlisting>
</db:section>
<db:section xml:id="files-and-attributions">
<db:title>Files and Attributions</db:title>
<db:para>The example uses icons from the Tango Icon Library:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="">Tango Icon Library</db:link></db:para>
</db:td>
<db:td>
<db:para>Public Domain</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginewidgets/stylesheetbrowser?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
