<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Callout Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to draw an additional element (a callout) on top of the chart.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;callout.h&quot;
#include &amp;lt;QtGui/QPainter&amp;gt;
#include &amp;lt;QtGui/QFontMetrics&amp;gt;
#include &amp;lt;QtWidgets/QGraphicsSceneMouseEvent&amp;gt;
#include &amp;lt;QtGui/QMouseEvent&amp;gt;
#include &amp;lt;QtCharts/QChart&amp;gt;

Callout::Callout(QChart *chart):
    QGraphicsItem(chart),
    m_chart(chart)
{
}

QRectF Callout::boundingRect() const
{
    QPointF anchor = mapFromParent(m_chart-&amp;gt;mapToPosition(m_anchor));
    QRectF rect;
    rect.setLeft(qMin(m_rect.left(), anchor.x()));
    rect.setRight(qMax(m_rect.right(), anchor.x()));
    rect.setTop(qMin(m_rect.top(), anchor.y()));
    rect.setBottom(qMax(m_rect.bottom(), anchor.y()));
    return rect;
}

void Callout::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option)
    Q_UNUSED(widget)
    QPainterPath path;
    path.addRoundedRect(m_rect, 5, 5);

    QPointF anchor = mapFromParent(m_chart-&amp;gt;mapToPosition(m_anchor));
    if (!m_rect.contains(anchor)) {
        QPointF point1, point2;

        // establish the position of the anchor point in relation to m_rect
        bool above = anchor.y() &amp;lt;= m_rect.top();
        bool aboveCenter = anchor.y() &amp;gt; m_rect.top() &amp;amp;&amp;amp; anchor.y() &amp;lt;= m_rect.center().y();
        bool belowCenter = anchor.y() &amp;gt; m_rect.center().y() &amp;amp;&amp;amp; anchor.y() &amp;lt;= m_rect.bottom();
        bool below = anchor.y() &amp;gt; m_rect.bottom();

        bool onLeft = anchor.x() &amp;lt;= m_rect.left();
        bool leftOfCenter = anchor.x() &amp;gt; m_rect.left() &amp;amp;&amp;amp; anchor.x() &amp;lt;= m_rect.center().x();
        bool rightOfCenter = anchor.x() &amp;gt; m_rect.center().x() &amp;amp;&amp;amp; anchor.x() &amp;lt;= m_rect.right();
        bool onRight = anchor.x() &amp;gt; m_rect.right();

        // get the nearest m_rect corner.
        qreal x = (onRight + rightOfCenter) * m_rect.width();
        qreal y = (below + belowCenter) * m_rect.height();
        bool cornerCase = (above &amp;amp;&amp;amp; onLeft) || (above &amp;amp;&amp;amp; onRight) || (below &amp;amp;&amp;amp; onLeft) || (below &amp;amp;&amp;amp; onRight);
        bool vertical = qAbs(anchor.x() - x) &amp;gt; qAbs(anchor.y() - y);

        qreal x1 = x + leftOfCenter * 10 - rightOfCenter * 20 + cornerCase * !vertical * (onLeft * 10 - onRight * 20);
        qreal y1 = y + aboveCenter * 10 - belowCenter * 20 + cornerCase * vertical * (above * 10 - below * 20);;
        point1.setX(x1);
        point1.setY(y1);

        qreal x2 = x + leftOfCenter * 20 - rightOfCenter * 10 + cornerCase * !vertical * (onLeft * 20 - onRight * 10);;
        qreal y2 = y + aboveCenter * 20 - belowCenter * 10 + cornerCase * vertical * (above * 20 - below * 10);;
        point2.setX(x2);
        point2.setY(y2);

        path.moveTo(point1);
        path.lineTo(anchor);
        path.lineTo(point2);
        path = path.simplified();
    }
    painter-&amp;gt;setBrush(QColor(255, 255, 255));
    painter-&amp;gt;drawPath(path);
    painter-&amp;gt;drawText(m_textRect, m_text);
}

void Callout::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    event-&amp;gt;setAccepted(true);
}

void Callout::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
{
    if (event-&amp;gt;buttons() &amp;amp; Qt::LeftButton){
        setPos(mapToParent(event-&amp;gt;pos() - event-&amp;gt;buttonDownPos(Qt::LeftButton)));
        event-&amp;gt;setAccepted(true);
    } else {
        event-&amp;gt;setAccepted(false);
    }
}

void Callout::setText(const QString &amp;amp;text)
{
    m_text = text;
    QFontMetrics metrics(m_font);
    m_textRect = metrics.boundingRect(QRect(0, 0, 150, 150), Qt::AlignLeft, m_text);
    m_textRect.translate(5, 5);
    prepareGeometryChange();
    m_rect = m_textRect.adjusted(-5, -5, 5, 5);
}

void Callout::setAnchor(QPointF point)
{
    m_anchor = point;
}

void Callout::updateGeometry()
{
    prepareGeometryChange();
    setPos(m_chart-&amp;gt;mapToPosition(m_anchor) + QPoint(10, -50));
}

</db:programlisting>
</db:article>
