<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_generate_deploy_qml_app_script</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Generate a deployment script for a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-generate-deploy-qml-app-script"/>
<db:para>Generate a deployment script for a QML application.</db:para>
<db:para>The command is defined in the <db:code>Qml</db:code> component of the <db:code>Qt6</db:code> package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Qml)
</db:programlisting>
<db:para>This command was introduced in Qt 6.3.</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:warning>
<db:para>If you are using a CMake version lower than 3.19, make sure that you pass the <db:code>MANUAL_FINALIZATION</db:code> option to <db:link xlink:href="qt-add-executable.xml">qt6_add_executable()</db:link>, and then call <db:link xlink:href="qt-finalize-target.xml">qt6_finalize_target()</db:link> before calling this function.</db:para>
</db:warning>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_generate_deploy_qml_app_script(
    TARGET target
    FILENAME_VARIABLE var_name
    [NO_UNSUPPORTED_PLATFORM_ERROR]
    [DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM]
    [MACOS_BUNDLE_POST_BUILD]
)
</db:programlisting>
<db:para>If <db:link xlink:href="">versionless commands</db:link> are disabled, use <db:code>qt6_generate_deploy_qml_app_script()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para>Installing an executable target that is also a QML module requires deploying a number of things in addition to the target itself. Qt libraries and other libraries from the project, Qt plugins, and the runtime parts of all QML modules the application uses may all need to be installed too. The installed layout is also going to be different for macOS app bundles compared to other platforms. The <db:code>qt_generate_deploy_qml_app_script()</db:code> is a convenience command intended to simplify that process, similar to what <db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link> does for non-QML applications.</db:para>
<db:para>The command expects the application to follow Qt's recommended install directory structure fairly closely. That structure is based on CMake's default install layout, as determined by <db:link xlink:href="https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html">GNUInstallDirs</db:link> (except for macOS app bundles, which follow Apple's requirements instead). QML modules are installed to the appropriate location for the platform. For macOS bundles, each QML module's <db:code>qmldir</db:code> file is installed under the appropriate subdirectory below <db:code>Resources/qml</db:code> and the module's plugin (if present) is installed under <db:code>PlugIns</db:code>. The app bundle is assumed to be installed directly to the base installation location (see the <db:link xlink:href="qt-query-qml-module.xml#example">Example</db:link> further below). For all other platforms, both the <db:code>qmldir</db:code> and the module's plugin are installed under the appropriate subdirectory below <db:code>qml</db:code>, which itself is relative to the base installation location.</db:para>
<db:para><db:code>qt_generate_deploy_qml_app_script()</db:code> generates a script whose name will be stored in the variable named by the <db:code>FILENAME_VARIABLE</db:code> option. That script is only written at CMake generate-time. It is intended to be used with the <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#script">install(SCRIPT)</db:link> command, which should come after the application's target has been installed using <db:link xlink:href="https://cmake.org/cmake/help/latest/command/install.html#targets">install(TARGETS)</db:link>.</db:para>
<db:para>The deployment script will call <db:link xlink:href="qt-deploy-qml-imports.xml#qt-deploy-qml-imports">qt_deploy_qml_imports()</db:link> with a suitable set of options for the standard install layout. For macOS app bundles and Windows targets, it will then also call <db:link xlink:href="qt-deploy-runtime-dependencies.xml#qt-deploy-runtime-dependencies">qt_deploy_runtime_dependencies()</db:link>, again with suitable options for the standard install layout.</db:para>
<db:para>Calling <db:code>qt_generate_deploy_qml_app_script()</db:code> for a platform that is not supported by <db:code>qt_deploy_runtime_dependencies</db:code> will result in a fatal error, unless the <db:code>NO_UNSUPPORTED_PLATFORM_ERROR</db:code> option is given. When the option is given and the project is built for an unsupported platform, neither QML modules nor regular runtime dependencies will be installed. To ensure that the QML modules are still installed, specify both the <db:code>NO_UNSUPPORTED_PLATFORM_ERROR</db:code> and <db:code>DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM</db:code> options. The latter option will ensure that QML modules built as part of the project are still installed.</db:para>
<db:para>The <db:code>MACOS_BUNDLE_POST_BUILD</db:code> option enables an extra step when <db:code>target</db:code> is a macOS app bundle. A post-build rule will be created which uses the deployment script to deploy enough of the imported QML modules to allow the application to run directly from the build directory (essentially just the <db:code>qmldir</db:code> files and symlinks to plugins). This is usually desirable to support development of the application. <db:code>MACOS_BUNDLE_POST_BUILD</db:code> is ignored for all other platforms.</db:para>
<db:para>For deploying a non-QML application, use <db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link> instead. It is an error to call both <db:code>qt_generate_deploy_qml_app_script()</db:code> and <db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link> for the same target.</db:para>
</db:section>
<db:section xml:id="example">
<db:title>Example</db:title>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 6.3 REQUIRED COMPONENTS Core Qml)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)
qt_add_qml_module(MyApp
    URI Application
    VERSION 1.0
    QML_FILES main.qml MyThing.qml
)

install(TARGETS MyApp
    BUNDLE  DESTINATION .
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

qt_generate_deploy_qml_app_script(
    TARGET MyApp
    FILENAME_VARIABLE deploy_script
    MACOS_BUNDLE_POST_BUILD
    NO_UNSUPPORTED_PLATFORM_ERROR
    DEPLOY_USER_QML_MODULES_ON_UNSUPPORTED_PLATFORM
)
install(SCRIPT ${deploy_script})
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-standard-project-setup.xml#qt6-standard-project-setup">qt_standard_project_setup()</db:link></db:member>
<db:member><db:link xlink:href="qt-generate-deploy-app-script.xml#qt6-generate-deploy-app-script">qt_generate_deploy_app_script()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
