<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGRenderNode Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> class represents a set of custom rendering commands targeting the graphics API that is in use by the scenegraph.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGRenderNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgnode.xml" xlink:role="class">QSGNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> allows creating scene graph nodes that perform their own custom rendering via <db:link xlink:href="qrhi.xml">QRhi</db:link> (the common approach from Qt 6.6 on), directly via a 3D graphics API such as OpenGL, Vulkan, or Metal, or, when the <db:code>software</db:code> backend is in use, via <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> is the enabler for one of the three ways to integrate custom 2D/3D rendering into a Qt Quick scene. The other two options are to perform the rendering <db:code>before</db:code> or <db:code>after</db:code> the Qt Quick scene's own rendering, or to generate a whole separate render pass targeting a dedicated render target (a texture) and then have an item in the scene display the texture. The <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link>-based approach is similar to the former, in the sense that no additional render passes or render targets are involved, and allows injecting custom rendering commands &quot;inline&quot; with the Qt Quick scene's own rendering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-scenegraph-customrendernode-example.xml">Scene Graph - Custom QSGRenderNode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RenderingFlag-enum">
<db:title>enum QSGRenderNode::RenderingFlag</db:title>
<db:bridgehead renderas="sect2">flags QSGRenderNode::RenderingFlags</db:bridgehead>
<db:para>Possible values for the bitmask returned from <db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::BoundedRectRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() does not render outside the area reported from <db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>() in item coordinates. Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the <db:code>software</db:code> backend can continue to use the more optimal partial update path when all render nodes in the scene have this flag set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::DepthAwareRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Indicates that the implementations of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() conforms to scenegraph expectations by only generating a Z value of 0 in scene coordinates which is then transformed by the matrices retrieved from RenderState::projectionMatrix() and <db:link xlink:href="qsgrendernode.xml#matrix">matrix</db:link>(), as described in the notes for <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(). Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the batching OpenGL renderer can continue to use a more optimal path when all render nodes in the scene have this flag set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::OpaqueRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Indicates that the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() writes out opaque pixels for the entire area reported from <db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>(). By default the renderers must assume that <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can also output semi or fully transparent pixels. Setting this flag can improve performance in some cases.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::NoExternalRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Indicates that the implementation of <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() and <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() use the <db:link xlink:href="qrhi.xml">QRhi</db:link> family of APIs, instead of directly calling a 3D API such as OpenGL, Vulkan, or Metal.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RenderingFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RenderingFlag&gt;. </db:code>It stores an OR combination of <db:code>RenderingFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#render">render</db:link>()</db:member>
<db:member><db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>()</db:member>
<db:member><db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>()</db:member>
<db:member><db:link xlink:href="qrhi.xml">QRhi</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StateFlag-enum">
<db:title>enum QSGRenderNode::StateFlag</db:title>
<db:bridgehead renderas="sect2">flags QSGRenderNode::StateFlags</db:bridgehead>
<db:para>This enum is a bit mask identifying several states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::DepthState</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Depth</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::StencilState</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Stencil</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ScissorState</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Scissor</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ColorState</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Color</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::BlendState</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Blend</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::CullState</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Cull</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ViewportState</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>View poirt</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::RenderTargetState</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Render target</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>StateFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;StateFlag&gt;. </db:code>It stores an OR combination of <db:code>StateFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QSGRenderNode">
<db:title>[override virtual noexcept] QSGRenderNode::~QSGRenderNode()</db:title>
<db:para>Destructs the render node. Derived classes are expected to perform cleanup similar to <db:link xlink:href="qsgrendernode.xml#releaseResources">releaseResources</db:link>() in here.</db:para>
<db:para>When a low-level graphics API is in use, the scenegraph will make sure there is a CPU-side wait for the GPU to complete all work submitted to the scenegraph's graphics command queue before the scenegraph's nodes are deleted. Therefore there is no need to issue additional waits here, unless the <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() implementation is using additional command queues.</db:para>
<db:para>With <db:link xlink:href="qrhi.xml">QRhi</db:link> and resources such as <db:link xlink:href="qrhibuffer.xml">QRhiBuffer</db:link>, <db:link xlink:href="qrhitexture.xml">QRhiTexture</db:link>, <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link>, etc., it is often good practice to use smart pointers, such as std::unique_ptr, which can often avoid the need to implement a destructor, and lead to more compact source code. Keep in mind however that implementing <db:link xlink:href="qsgrendernode.xml#releaseResources">releaseResources</db:link>(), most likely issuing a number of reset() calls on the unique_ptrs, is still important.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#releaseResources">releaseResources</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changedStates">
<db:title>[virtual] QSGRenderNode::StateFlags QSGRenderNode::changedStates() const</db:title>
<db:para>When the underlying rendering API is OpenGL, this function should return a mask where each bit represents graphics states changed by the <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() function:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>DepthState</db:para>
</db:td>
<db:td>
<db:para>depth write mask, depth test enabled, depth comparison function</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>StencilState</db:para>
</db:td>
<db:td>
<db:para>stencil write masks, stencil test enabled, stencil operations, stencil comparison functions</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ScissorState</db:para>
</db:td>
<db:td>
<db:para>scissor enabled, scissor test enabled</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ColorState</db:para>
</db:td>
<db:td>
<db:para>clear color, color write mask</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>BlendState</db:para>
</db:td>
<db:td>
<db:para>blend enabled, blend function</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>CullState</db:para>
</db:td>
<db:td>
<db:para>front face, cull face enabled</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ViewportState</db:para>
</db:td>
<db:td>
<db:para>viewport</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>RenderTargetState</db:para>
</db:td>
<db:td>
<db:para>render target</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>With APIs other than OpenGL, the only relevant values are the ones that correspond to dynamic state changes recorded on the command list/buffer. For example, RSSetViewports, RSSetScissorRects, OMSetBlendState, OMSetDepthStencilState in case of D3D11, or vkCmdSetViewport, vkCmdSetScissor, vkCmdSetBlendConstants, vkCmdSetStencilRef in case of Vulkan, and only when such commands were added to the scenegraph's command list queried via the QSGRendererInterface::CommandList resource enum. States set in pipeline state objects do not need to be reported here. Similarly, draw call related settings (pipeline states, descriptor sets, vertex or index buffer bindings, root signature, descriptor heaps, etc.) are always set again by the scenegraph so <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can freely change them.</db:para>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">RenderTargetState</db:link> is no longer supported with APIs like Vulkan. This is by nature. <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() is invoked while the Qt Quick scenegraph's main command buffer is recording a renderpass, so there is no possibility of changing the target and starting another renderpass (on that command buffer at least). Therefore returning a value with <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">RenderTargetState</db:link> set is not sensible.</db:para>
<db:note>
<db:para>The <db:code>software</db:code> backend exposes its <db:link xlink:href="qpainter.xml">QPainter</db:link> and saves and restores before and after invoking <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(). Therefore reporting any changed states from here is not necessary.</db:para>
</db:note>
<db:para>The function is called by the renderer so it can reset the states after rendering this node. This makes the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() simpler since it does not have to query and restore these states.</db:para>
<db:para>The default implementation returns 0, meaning no relevant state was changed in <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
<db:note>
<db:para>This function may be called before <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
</db:note>
<db:note>
<db:para>With Qt 6 and <db:link xlink:href="qrhi.xml">QRhi</db:link>-based rendering the only relevant values are <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">ViewportState</db:link> and <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">ScissorState</db:link>. Other values can be returned but are ignored in practice.</db:para>
</db:note>
</db:section>
<db:section xml:id="clipList">
<db:title>const QSGClipNode *QSGRenderNode::clipList() const</db:title>
<db:para>Returns the current clip list.</db:para>
</db:section>
<db:section xml:id="commandBuffer">
<db:title>[since 6.6] QRhiCommandBuffer *QSGRenderNode::commandBuffer() const</db:title>
<db:para>Returns the current command buffer.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#renderTarget">renderTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[virtual] QSGRenderNode::RenderingFlags QSGRenderNode::flags() const</db:title>
<db:para>Returns flags describing the behavior of this render node.</db:para>
<db:para>The default implementation returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">RenderingFlag</db:link></db:member>
<db:member><db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inheritedOpacity">
<db:title>qreal QSGRenderNode::inheritedOpacity() const</db:title>
<db:para>Returns the current effective opacity.</db:para>
</db:section>
<db:section xml:id="matrix">
<db:title>const QMatrix4x4 *QSGRenderNode::matrix() const</db:title>
<db:para>Returns pointer to the current model-view matrix.</db:para>
</db:section>
<db:section xml:id="prepare">
<db:title>[virtual, since 6.0] void QSGRenderNode::prepare()</db:title>
<db:para>Called from the frame preparation phase. There is a call to this function before each invocation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
<db:para>Unlike <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(), this function is called before the scenegraph starts recording the render pass for the current frame on the underlying command buffer. This is useful when doing rendering with graphics APIs, such as Vulkan, where copy type of operations will need to be recorded before the render pass.</db:para>
<db:para>The default implementation is empty.</db:para>
<db:para>When implementing a <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> that uses <db:link xlink:href="qrhi.xml">QRhi</db:link> to render, query the <db:link xlink:href="qrhi.xml">QRhi</db:link> object from the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> via <db:link xlink:href="qquickwindow.xml#rhi">QQuickWindow::rhi</db:link>(). To get a <db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link> for submitting work to, call <db:link xlink:href="qsgrendernode.xml#commandBuffer">commandBuffer</db:link>(). To query information about the active render target, call <db:link xlink:href="qsgrendernode.xml#renderTarget">renderTarget</db:link>(). See the <db:link xlink:href="qtquick-scenegraph-customrendernode-example.xml">{Scene Graph - Custom QSGRenderNode}</db:link> example for details.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="projectionMatrix">
<db:title>[since 6.5] const QMatrix4x4 *QSGRenderNode::projectionMatrix() const</db:title>
<db:para>Returns pointer to the current projection matrix.</db:para>
<db:para>In <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() this is the same matrix that is returned from RenderState::projectionMatrix(). This getter exists so that <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() also has a way to query the projection matrix.</db:para>
<db:para>When working with a modern graphics API, or Qt's own graphics abstraction layer, it is more than likely that one will want to load <db:code>*projectionMatrix() * *matrix()</db:code> into a uniform buffer. That is however something that needs to be done in <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>(), so outside the recording of a render pass. That is why both matrices are queriable directly from the <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link>, both in <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() and <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="rect">
<db:title>[virtual] QRectF QSGRenderNode::rect() const</db:title>
<db:para>Returns the bounding rectangle in item coordinates for the area <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() touches. The value is only in use when <db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>() includes <db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">BoundedRectRendering</db:link>, ignored otherwise.</db:para>
<db:para>Reporting the rectangle in combination with <db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">BoundedRectRendering</db:link> is particularly important with the <db:code>software</db:code> backend because otherwise having a rendernode in the scene would trigger fullscreen updates, skipping all partial update optimizations.</db:para>
<db:para>For rendernodes covering the entire area of a corresponding <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> the return value will be (0, 0, item-&gt;width(), item-&gt;height()).</db:para>
<db:note>
<db:para>Nodes are also free to render outside the boundaries specified by the item's width and height, since the scenegraph nodes are not bounded by the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> geometry, as long as this is reported correctly from this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[virtual] void QSGRenderNode::releaseResources()</db:title>
<db:para>This function is called when all custom graphics resources allocated by this node have to be freed immediately. In case the node does not directly allocate graphics resources (buffers, textures, render targets, fences, etc.) through the graphics API that is in use, there is nothing to do here.</db:para>
<db:para>Failing to release all custom resources can lead to incorrect behavior in graphics device loss scenarios on some systems since subsequent reinitialization of the graphics system may fail.</db:para>
<db:note>
<db:para>Some scenegraph backends may choose not to call this function. Therefore it is expected that <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> implementations perform cleanup both in their destructor and in releaseResources().</db:para>
</db:note>
<db:para>Unlike with the destructor, it is expected that <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can reinitialize all resources it needs when called after a call to releaseResources().</db:para>
<db:para>With OpenGL, the scenegraph's OpenGL context will be current both when calling the destructor and this function.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>[pure virtual] void QSGRenderNode::render(const QSGRenderNode::RenderState *<db:emphasis>state</db:emphasis>)</db:title>
<db:para>This function is called by the renderer and should paint this node with directly invoking commands in the graphics API (OpenGL, Direct3D, etc.) currently in use.</db:para>
<db:para>The effective opacity can be retrieved with <db:link xlink:href="qsgrendernode.xml#inheritedOpacity">inheritedOpacity</db:link>().</db:para>
<db:para>The projection matrix is available through <db:code role="parameter">state</db:code>, while the model-view matrix can be fetched with <db:link xlink:href="qsgrendernode.xml#matrix">matrix</db:link>(). The combined matrix is then the projection matrix times the model-view matrix. The correct stacking of the items in the scene is ensured by the projection matrix.</db:para>
<db:para>When using the provided matrices, the coordinate system for vertex data follows the usual <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> conventions: top-left is (0, 0), bottom-right is the corresponding <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>'s width() and height() minus one. For example, assuming a two float (x-y) per vertex coordinate layout, a triangle covering half of the item can be specified as (width - 1, height - 1), (0, 0), (0, height - 1) using counter-clockwise direction.</db:para>
<db:note>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> is provided as a means to implement custom 2D or 2.5D Qt Quick items. It is not intended for integrating true 3D content into the Qt Quick scene. That use case is better supported by <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>, <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>(), or the equivalents of those for APIs other than OpenGL.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> can perform significantly better than texture-based approaches (such as, <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>), especially on systems where the fragment processing power is limited. This is because it avoids rendering to a texture and then drawing a textured quad. Rather, <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> allows recording draw calls in line with the scenegraph's other commands, avoiding an additional render target and the potentially expensive texturing and blending.</db:para>
</db:note>
<db:para>Clip information is calculated before the function is called. Implementations wishing to take clipping into account can set up scissoring or stencil based on the information in <db:code role="parameter">state</db:code>. The stencil buffer is filled with the necessary clip shapes, but it is up to the implementation to enable stencil testing.</db:para>
<db:para>Some scenegraph backends, software in particular, use no scissor or stencil. There the clip region is provided as an ordinary <db:link xlink:href="qregion.xml">QRegion</db:link>.</db:para>
<db:para>When implementing a <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> that uses <db:link xlink:href="qrhi.xml">QRhi</db:link> to render, query the <db:link xlink:href="qrhi.xml">QRhi</db:link> object from the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> via <db:link xlink:href="qquickwindow.xml#rhi">QQuickWindow::rhi</db:link>(). To get a <db:link xlink:href="qrhicommandbuffer.xml">QRhiCommandBuffer</db:link> for submitting work to, call <db:link xlink:href="qsgrendernode.xml#commandBuffer">commandBuffer</db:link>(). To query information about the active render target, call <db:link xlink:href="qsgrendernode.xml#renderTarget">renderTarget</db:link>(). See the <db:link xlink:href="qtquick-scenegraph-customrendernode-example.xml">{Scene Graph - Custom QSGRenderNode}</db:link> example for details.</db:para>
<db:para>With Qt 6 and its <db:link xlink:href="qrhi.xml">QRhi</db:link>-based scene graph renderer, no assumptions should be made about the active (OpenGL) state when this function is called, even when OpenGL is in use. Assume nothing about the pipelines and dynamic states bound on the command list/buffer when this function is called.</db:para>
<db:note>
<db:para>Depth writes are expected to be disabled. Enabling depth writes can lead to unexpected results, depending on the scenegraph backend in use and the content in the scene, so exercise caution with this.</db:para>
</db:note>
<db:note>
<db:para>In Qt 6, <db:link xlink:href="qsgrendernode.xml#changedStates">changedStates</db:link>() has limited use. See the documentation for <db:link xlink:href="qsgrendernode.xml#changedStates">changedStates</db:link>() for more information.</db:para>
</db:note>
<db:para>With some graphics APIs, including when using <db:link xlink:href="qrhi.xml">QRhi</db:link> directly, it can be necessary to reimplement <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() in addition, or alternatively connect to the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal. These are called/emitted before recording the beginning of a renderpass on the command buffer (vkCmdBeginRenderPass with Vulkan, or starting to encode via MTLRenderCommandEncoder in case of Metal. Recording copy operations cannot be done inside render() with such APIs. Rather, do such operations either in <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() or the slot connected to beforeRendering (with DirectConnection).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:member>
<db:member><db:link xlink:href="qquickwindow.xml#rendererInterface">QQuickWindow::rendererInterface</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="renderTarget">
<db:title>[since 6.6] QRhiRenderTarget *QSGRenderNode::renderTarget() const</db:title>
<db:para>Returns the current render target.</db:para>
<db:para>This is provided mainly to enable <db:link xlink:href="qsgrendernode.xml#prepare">prepare</db:link>() and <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() implementations that use <db:link xlink:href="qrhi.xml">QRhi</db:link> accessing the <db:link xlink:href="qrhirendertarget.xml">QRhiRenderTarget</db:link>'s <db:link xlink:href="qrhirenderpassdescriptor.xml">renderPassDescriptor</db:link> or <db:link xlink:href="">pixel size</db:link>.</db:para>
<db:para>To build a <db:link xlink:href="qrhigraphicspipeline.xml">QRhiGraphicsPipeline</db:link>, which implies having to provide a <db:link xlink:href="qrhirenderpassdescriptor.xml">QRhiRenderPassDescriptor</db:link>, query the renderPassDescriptor from the render target. Be aware however that the render target may change over the lifetime of the custom <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> and the <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link>. For example, consider what happens when dynamically setting <db:code>layer.enabled: true</db:code> on the item or an ancestor of it: this triggers rendering into a texture, not directly to the window, which means the <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> is going to work with a different render target from then on. The new render target may then have a different pixel format, which can make already built graphics pipelines incompatible. This can be handled with logic such as the following:</db:para>
<db:programlisting language="cpp">if (m_pipeline &amp;&amp; renderTarget()-&gt;renderPassDescriptor()-&gt;serializedFormat() != m_renderPassFormat) {
    delete m_pipeline;
    m_pipeline = nullptr;
}
if (!m_pipeline) {
    // Build a new QRhiGraphicsPipeline.
    // ...
    // Store the serialized format for fast and simple comparisons later on.
    m_renderPassFormat = renderTarget()-&gt;renderPassDescriptor()-&gt;serializedFormat();
}
</db:programlisting>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#commandBuffer">commandBuffer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
