<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGRenderNode Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> class represents a set of custom rendering commands targeting the graphics API that is in use by the scenegraph.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGRenderNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgnode.xml" xlink:role="class">QSGNode</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RenderingFlag-enum">
<db:title>enum QSGRenderNode::RenderingFlag</db:title>
<db:bridgehead renderas="sect2">flags QSGRenderNode::RenderingFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>RenderingFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>BoundedRectRendering</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DepthAwareRendering</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpaqueRendering</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoExternalRendering</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSGRenderNode::RenderingFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>Possible values for the bitmask returned from <db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::BoundedRectRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() does not render outside the area reported from <db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>() in item coordinates. Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the software backend can continue to use the more optimal partial update path when all render nodes in the scene have this flag set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::DepthAwareRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Indicates that the implementations of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() conforms to scenegraph expectations by only generating a Z value of 0 in scene coordinates which is then transformed by the matrices retrieved from <db:link xlink:href="qsgrendernode-renderstate.xml#projectionMatrix">RenderState::projectionMatrix</db:link>() and <db:link xlink:href="qsgrendernode.xml#matrix">matrix</db:link>(), as described in the notes for <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(). Such node implementations can lead to more efficient rendering, depending on the scenegraph backend. For example, the batching OpenGL renderer can continue to use a more optimal path when all render nodes in the scene have this flag set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::OpaqueRendering</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Indicates that the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() writes out opaque pixels for the entire area reported from <db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>(). By default the renderers must assume that <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can also output semi or fully transparent pixels. Setting this flag can improve performance in some cases.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RenderingFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RenderingFlag&gt;. </db:code>It stores an OR combination of <db:code>RenderingFlag</db:code> values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#render">render</db:link>()</db:member>
<db:member><db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="StateFlag-enum">
<db:title>enum QSGRenderNode::StateFlag</db:title>
<db:bridgehead renderas="sect2">flags QSGRenderNode::StateFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>StateFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>DepthState</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StencilState</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ScissorState</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ColorState</db:enumidentifier>
<db:enumvalue>0x08</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlendState</db:enumidentifier>
<db:enumvalue>0x10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CullState</db:enumidentifier>
<db:enumvalue>0x20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ViewportState</db:enumidentifier>
<db:enumvalue>0x40</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RenderTargetState</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QSGRenderNode::StateFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum is a bit mask identifying several states.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::DepthState</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Depth</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::StencilState</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>Stencil</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ScissorState</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>Scissor</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ColorState</db:code></db:para>
</db:td>
<db:td><db:code>0x08</db:code></db:td>
<db:td>
<db:para>Color</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::BlendState</db:code></db:para>
</db:td>
<db:td><db:code>0x10</db:code></db:td>
<db:td>
<db:para>Blend</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::CullState</db:code></db:para>
</db:td>
<db:td><db:code>0x20</db:code></db:td>
<db:td>
<db:para>Cull</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::ViewportState</db:code></db:para>
</db:td>
<db:td><db:code>0x40</db:code></db:td>
<db:td>
<db:para>View poirt</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link></db:emphasis>::RenderTargetState</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>Render target</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>StateFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;StateFlag&gt;. </db:code>It stores an OR combination of <db:code>StateFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QSGRenderNode">
<db:title>[override virtual] QSGRenderNode::~QSGRenderNode()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSGRenderNode</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSGRenderNode() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructs the render node. Derived classes are expected to perform cleanup similar to <db:link xlink:href="qsgrendernode.xml#releaseResources">releaseResources</db:link>() in here.</db:para>
<db:para>When a low-level graphics API is in use, the scenegraph will make sure there is a CPU-side wait for the GPU to complete all work submitted to the scenegraph's graphics command queue before the scenegraph's nodes are deleted. Therefore there is no need to issue additional waits here, unless the <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() implementation is using additional command queues.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#releaseResources">releaseResources</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changedStates">
<db:title>[virtual] QSGRenderNode::StateFlags QSGRenderNode::changedStates() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSGRenderNode::StateFlags</db:type>
<db:methodname>changedStates</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGRenderNode::StateFlags changedStates() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>When the underlying rendering API is OpenGL, this function should return a mask where each bit represents graphics states changed by the <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() function:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">DepthState</db:link> - depth write mask, depth test enabled, depth comparison function</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">StencilState</db:link> - stencil write masks, stencil test enabled, stencil operations, stencil comparison functions</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">ScissorState</db:link> - scissor enabled, scissor test enabled</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">ColorState</db:link> - clear color, color write mask</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">BlendState</db:link> - blend enabled, blend function</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">CullState</db:link> - front face, cull face enabled</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">ViewportState</db:link> - viewport</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">RenderTargetState</db:link> - render target</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With APIs other than OpenGL, the only relevant values are the ones that correspond to dynamic state changes recorded on the command list/buffer. For example, RSSetViewports, RSSetScissorRects, OMSetBlendState, OMSetDepthStencilState in case of D3D11, or vkCmdSetViewport, vkCmdSetScissor, vkCmdSetBlendConstants, vkCmdSetStencilRef in case of Vulkan, and only when such commands were added to the scenegraph's command list queried via the QSGRendererInterface::CommandList resource enum. States set in pipeline state objects do not need to be reported here. Similarly, draw call related settings (pipeline states, descriptor sets, vertex or index buffer bindings, root signature, descriptor heaps, etc.) are always set again by the scenegraph so <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can freely change them.</db:para>
<db:note>
<db:para><db:link xlink:href="qsgrendernode.xml#StateFlag-enum">RenderTargetState</db:link> is no longer supported with APIs like Vulkan. This is by nature. <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() is invoked while the Qt Quick scenegraph's main command buffer is recording a renderpass, so there is no possibility of changing the target and starting another renderpass (on that command buffer at least). Therefore returning a value with <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">RenderTargetState</db:link> set is not sensible.</db:para>
</db:note>
<db:para>The software backend exposes its <db:link xlink:href="qpainter.xml">QPainter</db:link> and saves and restores before and after invoking <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(). Therefore reporting any changed states from here is not necessary.</db:para>
<db:para>The function is called by the renderer so it can reset the states after rendering this node. This makes the implementation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() simpler since it does not have to query and restore these states.</db:para>
<db:para>The default implementation returns 0, meaning no relevant state was changed in <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
<db:note>
<db:para>This function may be called before <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
</db:note>
</db:section>
<db:section xml:id="clipList">
<db:title>const QSGClipNode *QSGRenderNode::clipList() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QSGClipNode *</db:type>
<db:methodname>clipList</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QSGClipNode * clipList() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current clip list.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>[virtual] QSGRenderNode::RenderingFlags QSGRenderNode::flags() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSGRenderNode::RenderingFlags</db:type>
<db:methodname>flags</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGRenderNode::RenderingFlags flags() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns flags describing the behavior of this render node.</db:para>
<db:para>The default implementation returns 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">RenderingFlag</db:link></db:member>
<db:member><db:link xlink:href="qsgrendernode.xml#rect">rect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inheritedOpacity">
<db:title>qreal QSGRenderNode::inheritedOpacity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>inheritedOpacity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal inheritedOpacity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current effective opacity.</db:para>
</db:section>
<db:section xml:id="matrix">
<db:title>const QMatrix4x4 *QSGRenderNode::matrix() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QMatrix4x4 *</db:type>
<db:methodname>matrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QMatrix4x4 * matrix() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns pointer to the current model-view matrix.</db:para>
</db:section>
<db:section xml:id="prepare">
<db:title>[virtual, since 6.0] void QSGRenderNode::prepare()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>prepare</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void prepare()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Called from the frame preparation phase. There is a call to this function before each invocation of <db:link xlink:href="qsgrendernode.xml#render">render</db:link>().</db:para>
<db:para>Unlike <db:link xlink:href="qsgrendernode.xml#render">render</db:link>(), this function is called before the scenegraph starts recording the render pass for the current frame on the underlying command buffer. This is useful when doing rendering with graphics APIs, such as Vulkan, where copy type of operations will need to be recorded before the render pass.</db:para>
<db:para>The default implementation is empty.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="rect">
<db:title>[virtual] QRectF QSGRenderNode::rect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>rect</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF rect() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle in item coordinates for the area <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() touches. The value is only in use when <db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>() includes <db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">BoundedRectRendering</db:link>, ignored otherwise.</db:para>
<db:para>Reporting the rectangle in combination with <db:link xlink:href="qsgrendernode.xml#RenderingFlag-enum">BoundedRectRendering</db:link> is particularly important with the <db:code>software</db:code> backend because otherwise having a rendernode in the scene would trigger fullscreen updates, skipping all partial update optimizations.</db:para>
<db:para>For rendernodes covering the entire area of a corresponding <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> the return value will be (0, 0, item-&gt;width(), item-&gt;height()).</db:para>
<db:note>
<db:para>Nodes are also free to render outside the boundaries specified by the item's width and height, since the scenegraph nodes are not bounded by the <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> geometry, as long as this is reported correctly from this function.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendernode.xml#flags">flags</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="releaseResources">
<db:title>[virtual] void QSGRenderNode::releaseResources()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>releaseResources</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void releaseResources()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called when all custom graphics resources allocated by this node have to be freed immediately. In case the node does not directly allocate graphics resources (buffers, textures, render targets, fences, etc.) through the graphics API that is in use, there is nothing to do here.</db:para>
<db:para>Failing to release all custom resources can lead to incorrect behavior in graphics device loss scenarios on some systems since subsequent reinitialization of the graphics system may fail.</db:para>
<db:note>
<db:para>Some scenegraph backends may choose not to call this function. Therefore it is expected that <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> implementations perform cleanup both in their destructor and in releaseResources().</db:para>
</db:note>
<db:para>Unlike with the destructor, it is expected that <db:link xlink:href="qsgrendernode.xml#render">render</db:link>() can reinitialize all resources it needs when called after a call to releaseResources().</db:para>
<db:para>With OpenGL, the scenegraph's OpenGL context will be current both when calling the destructor and this function.</db:para>
</db:section>
<db:section xml:id="render">
<db:title>[pure virtual] void QSGRenderNode::render(const QSGRenderNode::RenderState *<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>render</db:methodname>
<db:methodparam>
<db:type>const QSGRenderNode::RenderState *</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void render(const QSGRenderNode::RenderState *state) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called by the renderer and should paint this node with directly invoking commands in the graphics API (OpenGL, Direct3D, etc.) currently in use.</db:para>
<db:para>The effective opacity can be retrieved with <db:link xlink:href="qsgrendernode.xml#inheritedOpacity">inheritedOpacity</db:link>().</db:para>
<db:para>The projection matrix is available through <db:code role="parameter">state</db:code>, while the model-view matrix can be fetched with <db:link xlink:href="qsgrendernode.xml#matrix">matrix</db:link>(). The combined matrix is then the projection matrix times the model-view matrix. The correct stacking of the items in the scene is ensured by the projection matrix.</db:para>
<db:para>When using the provided matrices, the coordinate system for vertex data follows the usual <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> conventions: top-left is (0, 0), bottom-right is the corresponding <db:link xlink:href="qquickitem.xml">QQuickItem</db:link>'s width() and height() minus one. For example, assuming a two float (x-y) per vertex coordinate layout, a triangle covering half of the item can be specified as (width - 1, height - 1), (0, 0), (0, height - 1) using counter-clockwise direction.</db:para>
<db:note>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> is provided as a means to implement custom 2D or 2.5D Qt Quick items. It is not intended for integrating true 3D content into the Qt Quick scene. That use case is better supported by <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>, <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>(), or the equivalents of those for APIs other than OpenGL.</db:para>
</db:note>
<db:note>
<db:para><db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> can perform significantly better than texture-based approaches (such as, <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link>), especially on systems where the fragment processing power is limited. This is because it avoids rendering to a texture and then drawing a textured quad. Rather, <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> allows recording draw calls in line with the scenegraph's other commands, avoiding an additional render target and the potentially expensive texturing and blending.</db:para>
</db:note>
<db:para>Clip information is calculated before the function is called. Implementations wishing to take clipping into account can set up scissoring or stencil based on the information in <db:code role="parameter">state</db:code>. The stencil buffer is filled with the necessary clip shapes, but it is up to the implementation to enable stencil testing.</db:para>
<db:para>Some scenegraph backends, software in particular, use no scissor or stencil. There the clip region is provided as an ordinary <db:link xlink:href="qregion.xml">QRegion</db:link>.</db:para>
<db:para>With the legacy, direct OpenGL based renderer, the following states are set on the render thread's context before this function is called:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>glColorMask(true, true, true, true)</db:para>
</db:listitem>
<db:listitem>
<db:para>glDepthMask(false)</db:para>
</db:listitem>
<db:listitem>
<db:para>glDisable(GL_DEPTH_TEST)</db:para>
</db:listitem>
<db:listitem>
<db:para>glStencilFunc(GL_EQUAL, state.stencilValue, 0xff); glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP) depending on clip</db:para>
</db:listitem>
<db:listitem>
<db:para>glScissor(state.scissorRect.x(), state.scissorRect.y(), state.scissorRect.width(), state.scissorRect.height()) depending on clip</db:para>
</db:listitem>
<db:listitem>
<db:para>glEnable(GL_BLEND)</db:para>
</db:listitem>
<db:listitem>
<db:para>glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA)</db:para>
</db:listitem>
<db:listitem>
<db:para>glDisable(GL_CULL_FACE)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>States that are not listed above, but are covered by <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">StateFlags</db:link>, can have arbitrary values.</db:para>
<db:note>
<db:para>There is no state set with other graphics APIs, considering that many of them do not have a concept of the traditional OpenGL state machine. Rather, it is up to the implementation to create pipeline state objects with the desired blending, scissor, and stencil tests enabled. Note that this also includes OpenGL via the RHI. New <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link> implementations are recommended to set all scissor, stencil and blend state explicitly (as shown in the above list), even if they are targeting OpenGL.</db:para>
</db:note>
<db:para><db:link xlink:href="qsgrendernode.xml#changedStates">changedStates</db:link>() should return which states this function changes. If a state is not covered by <db:link xlink:href="qsgrendernode.xml#StateFlag-enum">StateFlags</db:link>, the state should be set to the default value according to the OpenGL specification. For other APIs, see the documentation for <db:link xlink:href="qsgrendernode.xml#changedStates">changedStates</db:link>() for more information.</db:para>
<db:note>
<db:para>Depth writes are disabled when this function is called (glDepthMask(false) with OpenGL). Enabling depth writes can lead to unexpected results, depending on the scenegraph backend in use and the content in the scene, so exercise caution with this.</db:para>
</db:note>
<db:para>For APIs other than OpenGL, it will likely be necessary to query certain API-specific resources (for example, the graphics device or the command list/buffer to add the commands to). This is done via <db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link>.</db:para>
<db:para>Assume nothing about the pipelines and dynamic states bound on the command list/buffer when this function is called.</db:para>
<db:para>With some graphics APIs it can be necessary to also connect to the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal, because that is emitted before recording the beginning of a renderpass on the command buffer (vkCmdBeginRenderPass with Vulkan, or starting to encode via MTLRenderCommandEncoder in case of Metal). Recording copy operations cannot be done inside render() with such APIs. Rather, do it in the slot connected (with DirectConnection) to the beforeRendering signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsgrendererinterface.xml">QSGRendererInterface</db:link></db:member>
<db:member><db:link xlink:href="qquickwindow.xml#rendererInterface">QQuickWindow::rendererInterface</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
