<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Shell Extensions - Qt Wayland Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Wayland Compositor Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In Wayland, <db:emphasis>shells</db:emphasis> are extensions which provide <db:emphasis>surface semantics</db:emphasis>. This means that they provide ways for the server and client to communicate about surfaces. Surfaces, in this context, are often also referred to as &quot;windows&quot;, which is typically the representation of the surface in the compositor.</db:para>
<db:para>Shell extensions provide tools for the client and server to communicate about certain things:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>They can provide a way for the client to inform the server about the purpose of a surface: Is it a tool-tip, a pop-up menu, or a regular application window, for instance? Based on this, the server can decide on the geometry of the window and how the user can interact with it.</db:para>
</db:listitem>
<db:listitem>
<db:para>They can also provide protocols for manipulating the surface, such as resizing, moving, and hiding them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Like other extensions, support for shells is added to a compositor by instantiating them as direct children of the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> top-level object. The shell extensions supported by Qt are: <db:link xlink:href="qml-qtwayland-compositor-wlshell-wlshell.xml">WlShell</db:link>, <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> and <db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> is an appropriate shell for desktop-style systems, where any number of applications can connect and where windows can be manually resized and repositioned by the user.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link> is a minimalistic protocol, originally intended for In-vehicle Infotainment systems. It is useful for embedded systems, where a pre-defined set of applications can run, often with pre-assigned screen real estate. For some more details on this protocol, see the <db:link xlink:href="qtwaylandcompositor-ivi-compositor-example.xml">IVI Compositor example</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> is a specialized shell for Qt applications which supports the window management features available in Qt. It may be suitable on a platform where both the compositor and client applications are written with Qt, and where applications are trusted not to abuse features such as manual window positioning and &quot;bring-to-front&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtwayland-compositor-wlshell-wlshell.xml">WlShell</db:link> is mostly useful for compatibility with third-party applications. This is also a desktop-style shell, but it has been deprecated and replaced by <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When designing an embedded system from the bottom up, there are no rules determining which shell extension to use. It will typically be either <db:link xlink:href="qml-qtwayland-compositor-xdgshell-xdgshell.xml">XdgShell</db:link> or <db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link>. The decision should be influenced by what features the system will need, and whether there are applications involved which are not written in Qt and which have their own requirements.</db:para>
<db:para>A Qt Wayland Compositor can also support multiple shell extensions at once. See the <db:link xlink:href="qtwaylandcompositor-minimal-qml-example.xml">Minimal QML example</db:link> for an example where all three shell extensions listed above are supported.</db:para>
</db:article>
