<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlAbstractUrlInterceptor Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>allows you to control QML file loading.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlAbstractUrlInterceptor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link> is an interface which can be used to alter URLs before they are used by the QML engine. This is primarily useful for altering file urls into other file urls, such as selecting different graphical assets for the current platform.</db:para>
<db:para>Relative URLs are intercepted after being resolved against the file path of the current QML context. URL interception also occurs after setting the base path for a loaded QML file. This means that the content loaded for that QML file uses the intercepted URL, but inside the file the pre-intercepted URL is used for resolving relative paths. This allows for interception of .qml file loading without needing all paths (or local types) inside intercepted content to insert a different relative path.</db:para>
<db:para>Compared to setNetworkAccessManagerFactory, <db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link> affects all URLs and paths, including local files and embedded resource files. <db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link> is synchronous, and for asynchronous files must return a url with an asynchronous scheme (such as http or a custom scheme handled by your own custom <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>). You can use a <db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link> to change file URLs into networked URLs which are handled by your own custom <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:para>To implement support for a custom networked scheme, see setNetworkAccessManagerFactory.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DataType-enum">
<db:title>enum QQmlAbstractUrlInterceptor::DataType</db:title>
<db:enumsynopsis>
<db:enumname>DataType</db:enumname>
<db:enumitem>
<db:enumidentifier>QmlFile</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>JavaScriptFile</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>QmldirFile</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UrlString</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies where URL interception is taking place.</db:para>
<db:para>Because QML loads qmldir files for locating types, there are two URLs involved in loading a QML type. The URL of the (possibly implicit) qmldir used for locating the type and the URL of the file which defines the type. Intercepting both leads to either complex URL replacement or double URL replacements for the same file.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link></db:emphasis>::QmldirFile</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The URL being intercepted is for a Qmldir file. Intercepting this, but not the QmlFile, allows for swapping out entire sub trees.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link></db:emphasis>::JavaScriptFile</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The URL being intercepted is an import for a Javascript file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link></db:emphasis>::QmlFile</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The URL being intercepted is for a Qml file. Intercepting this, but not the Qmldir file, leaves the base dir of a QML file untouched and acts like replacing the file with another file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link></db:emphasis>::UrlString</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>The URL being intercepted is a url property in a QML file, and not being used to load a file through the engine.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlAbstractUrlInterceptor">
<db:title>QQmlAbstractUrlInterceptor::QQmlAbstractUrlInterceptor()</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlAbstractUrlInterceptor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlAbstractUrlInterceptor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructor for <db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QQmlAbstractUrlInterceptor">
<db:title>[virtual] QQmlAbstractUrlInterceptor::~QQmlAbstractUrlInterceptor()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlAbstractUrlInterceptor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlAbstractUrlInterceptor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor for <db:link xlink:href="qqmlabstracturlinterceptor.xml">QQmlAbstractUrlInterceptor</db:link>.</db:para>
</db:section>
<db:section xml:id="intercept">
<db:title>[pure virtual] QUrl QQmlAbstractUrlInterceptor::intercept(const QUrl &amp;<db:emphasis>url</db:emphasis>, QQmlAbstractUrlInterceptor::DataType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>intercept</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QQmlAbstractUrlInterceptor::DataType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl intercept(const QUrl &amp;url, QQmlAbstractUrlInterceptor::DataType type) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>A pure virtual function where you can intercept the <db:code role="parameter">url</db:code>. The returned value is taken as the new value for the url. The type of url being intercepted is given by the <db:code role="parameter">type</db:code> variable.</db:para>
<db:para>Your implementation of this function must be thread-safe, as it can be called from multiple threads at the same time.</db:para>
</db:section>
</db:section>
</db:article>
