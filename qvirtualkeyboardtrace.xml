<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QVirtualKeyboardTrace Class</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Trace is a data model for touch input data.</db:para>
<db:para>This class was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QVirtualKeyboardTrace</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtQuick.VirtualKeyboard 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS VirtualKeyboard)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::VirtualKeyboard)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += virtualkeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-virtualkeyboard-trace.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Trace provides the data model for coordinate data and other optional data associated with a single stroke.</db:para>
<db:para>A typical use case for the trace object is as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> or other input device initiates the trace event by calling <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceBegin-method">InputEngine.traceBegin</db:link>() method.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the current input method accepts the event it creates a trace object and configures the required data channels (if any).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> collects the data for the Trace object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> calls the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceEnd-method">InputEngine.traceEnd</db:link>() method to finish the trace and passing the trace object back to input method.</db:para>
</db:listitem>
<db:listitem>
<db:para>The input method processes the data and discards the object when it is no longer needed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The coordinate data is retrieved using the <db:link xlink:href="qvirtualkeyboardtrace.xml#points">points</db:link>() function.</db:para>
<db:para>In addition to coordinate based data, it is possible to attach an arbitrary data channel for each data point.</db:para>
<db:para>The data channels must be defined before the points are added. The data channels supported by the <db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> are listed below:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>&quot;t&quot;</db:code> Collects time for each data point. The time is the number of milliseconds since 1970/01/01:</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, to configure the object to collect the times for each point:</db:para>
<db:programlisting language="cpp">QVirtualKeyboardTrace *trace = new QVirtualKeyboardTrace(this);
trace-&amp;gt;setChannels(QStringList() &amp;lt;&amp;lt; &quot;t&quot;);
</db:programlisting>
<db:para>The collected data can be accessed using the <db:link xlink:href="qvirtualkeyboardtrace.xml#channelData">channelData</db:link>() function:</db:para>
<db:programlisting language="cpp">QVariantList timeData = trace-&amp;gt;channelData(&quot;t&quot;);
</db:programlisting>
<db:para><db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> objects are owned by their creator, which is the input method in normal case. This means the objects are constructed in the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#traceBegin-method">InputMethod.traceBegin</db:link>() (QML) method.</db:para>
<db:para>By definition, the trace object can be destroyed at earliest in the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#traceEnd-method">InputMethod.traceEnd</db:link>() (QML) method.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="canceled-prop">
<db:title>canceled : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>canceled</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isCanceled</db:synopsisinfo>
<db:synopsisinfo role="setter">setCanceled</db:synopsisinfo>
<db:synopsisinfo role="notifier">canceledChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>defines whether the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> is canceled.</db:para>
<db:para>The input data should not be processed from the Traces whose <db:code>canceled</db:code> property set to true.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isCanceled</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCanceled</db:emphasis>(<db:type>bool</db:type> <db:emphasis>canceled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">canceledChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isCanceled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="channels-prop">
<db:title>channels : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>channels</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">channels</db:synopsisinfo>
<db:synopsisinfo role="setter">setChannels</db:synopsisinfo>
<db:synopsisinfo role="notifier">channelsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>list of data channels in the QQTrace.</db:para>
<db:para>This property must be initialized before the data is added.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold">channels</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setChannels</db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>channels</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">channelsChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="final-prop">
<db:title>final : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>final</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isFinal</db:synopsisinfo>
<db:synopsisinfo role="setter">setFinal</db:synopsisinfo>
<db:synopsisinfo role="notifier">finalChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>defines whether the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> can accept more data. If the value is <db:code>true</db:code>, no more data is accepted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isFinal</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFinal</db:emphasis>(<db:type>bool</db:type> <db:emphasis>final</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">finalChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>isFinal</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>length</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">length</db:synopsisinfo>
<db:synopsisinfo role="notifier">lengthChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of of points in the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">length</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">lengthChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>length</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="opacity-prop">
<db:title>opacity : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>opacity</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">opacity</db:synopsisinfo>
<db:synopsisinfo role="setter">setOpacity</db:synopsisinfo>
<db:synopsisinfo role="notifier">opacityChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines how opaque the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link> is.</db:para>
<db:para>A lower value results in a more transparent trace: <db:code>0.0</db:code> is fully transparent, and <db:code>1.0</db:code> is fully opaque.</db:para>
<db:para>This property is useful for making older traces more transparent as new ones are added.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">opacity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOpacity</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>opacity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">opacityChanged</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>opacity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="traceId-prop">
<db:title>traceId : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>traceId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">traceId</db:synopsisinfo>
<db:synopsisinfo role="setter">setTraceId</db:synopsisinfo>
<db:synopsisinfo role="notifier">traceIdChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>unique id of this <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">traceId</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTraceId</db:emphasis>(<db:type>int</db:type> <db:emphasis>id</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">traceIdChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>traceId</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addPoint">
<db:title>int QVirtualKeyboardTrace::addPoint(const QPointF &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>addPoint</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addPoint(const QPointF &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a <db:code role="parameter">point</db:code> to the <db:link xlink:href="qvirtualkeyboardtrace.xml">QVirtualKeyboardTrace</db:link>.</db:para>
<db:para>The method returns index of the point added, or -1 if the points cannot be added (i.e. the <db:link xlink:href="qvirtualkeyboardtrace.xml#final-prop">final</db:link> is true).</db:para>
<db:note>
<db:para>The returned index is required to associate additional data with the point using the <db:link xlink:href="qvirtualkeyboardtrace.xml#setChannelData">setChannelData</db:link>() method.</db:para>
</db:note>
</db:section>
<db:section xml:id="channelData">
<db:title>QVariantList QVirtualKeyboardTrace::channelData(const QString &amp;<db:emphasis>channel</db:emphasis>, int <db:emphasis>pos</db:emphasis> = 0, int <db:emphasis>count</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantList</db:type>
<db:methodname>channelData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantList channelData(const QString &amp;channel, int pos, int count) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns data from the specified <db:code role="parameter">channel</db:code>. If no other parameters are given, the method returns all the data.</db:para>
<db:para>If the <db:code role="parameter">pos</db:code> parameter is given, the method returns data starting at the position. The <db:code role="parameter">count</db:code> parameter limits how many items are returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvirtualkeyboardtrace.xml#setChannelData">setChannelData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="points">
<db:title>QVariantList QVirtualKeyboardTrace::points(int <db:emphasis>pos</db:emphasis> = 0, int <db:emphasis>count</db:emphasis> = -1) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariantList</db:type>
<db:methodname>points</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pos</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantList points(int pos, int count) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns list of points. If no parameters are given, the method returns all the data.</db:para>
<db:para>If the <db:code role="parameter">pos</db:code> parameter is given, the method returns points starting at the position. The <db:code role="parameter">count</db:code> parameter limits how many points are returned.</db:para>
<db:para>The returned list contains <db:link xlink:href="qpointf.xml">QPointF</db:link> types.</db:para>
</db:section>
<db:section xml:id="setChannelData">
<db:title>void QVirtualKeyboardTrace::setChannelData(const QString &amp;<db:emphasis>channel</db:emphasis>, int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setChannelData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>channel</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setChannelData(const QString &amp;channel, int index, const QVariant &amp;data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">data</db:code> for the point at <db:code role="parameter">index</db:code> in the given data <db:code role="parameter">channel</db:code>.</db:para>
<db:para>If this method is not called for each data point, the channel data will be padded with empty values. However, the data cannot be added at arbitrary index, i.e., it must be added in synchronously with the point data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvirtualkeyboardtrace.xml#channelData">channelData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startHideTimer">
<db:title>[since QtQuick.VirtualKeyboard.Styles 6.1] void QVirtualKeyboardTrace::startHideTimer(int <db:emphasis>delayMs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>startHideTimer</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>delayMs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void startHideTimer(int delayMs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a timer to set opacity to zero after <db:code role="parameter">delayMs</db:code>. If called again within <db:code role="parameter">delayMs</db:code>, the timer is restarted.</db:para>
<db:para>With this function the input method can hide the trace from screen before destroying the trace object, for example, to indicate that the trace has been processed.</db:para>
<db:para>This function was introduced in QtQuick.VirtualKeyboard.Styles 6.1.</db:para>
</db:section>
</db:section>
</db:article>
