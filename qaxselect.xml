<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAxSelect Class</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaxselect.xml">QAxSelect</db:link> class provides a selection dialog for registered COM components.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAxSelect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS AxContainer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::AxContainer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += axcontainer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdialog.xml" xlink:role="class">QDialog</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qaxselect.xml">QAxSelect</db:link> dialog can be used to provide users with a way to browse the registered COM components of the system and select one. It also provides a combo box for selecting desired sandboxing level. The CLSID of the selected component can then be used in the application to e.g. initialize a <db:link xlink:href="qaxwidget.xml">QAxWidget</db:link>:</db:para>
<db:programlisting language="cpp">QAxSelect select;
if (select.exec()) {
    QAxWidget *container = new QAxWidget;
    container-&amp;gt;setControl(select.clsid());
    container-&amp;gt;show();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaxwidget.xml">QAxWidget</db:link></db:member>
<db:member><db:link xlink:href="activeqt-index.xml">ActiveQt Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SandboxingLevel-enum">
<db:title>enum QAxSelect::SandboxingLevel</db:title>
<db:enumsynopsis>
<db:enumname>SandboxingLevel</db:enumname>
<db:enumitem>
<db:enumidentifier>SandboxingNone</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SandboxingProcess</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SandboxingLowIntegrity</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SandboxingAppContainer</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The SandboxingLevel enumeration defines the desired level of ActiveX sandboxing.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxselect.xml">QAxSelect</db:link></db:emphasis>::SandboxingNone</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No specific sandboxing desired</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxselect.xml">QAxSelect</db:link></db:emphasis>::SandboxingProcess</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Run ActiveX control in a separate process</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxselect.xml">QAxSelect</db:link></db:emphasis>::SandboxingLowIntegrity</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Run ActiveX control in a separate low-integrity process</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaxselect.xml">QAxSelect</db:link></db:emphasis>::SandboxingAppContainer</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>[since 6.5] Run ActiveX control in a separate AppContainer-isolated process</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Sandboxing requires that the ActiveX is either built as an EXE, or as a DLL with AppID &quot;DllSurrogate&quot; enabled.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAxSelect">
<db:title>[explicit] QAxSelect::QAxSelect(QWidget *<db:emphasis>parent</db:emphasis> = nullptr, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = Qt::WindowFlags())</db:title>
<db:constructorsynopsis>
<db:methodname>QAxSelect</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::WindowFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::WindowFlags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAxSelect(QWidget *parent, Qt::WindowFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qaxselect.xml">QAxSelect</db:link> object. Dialog parent widget and window flags can be optionally specified with <db:code role="parameter">parent</db:code> and <db:code role="parameter">flags</db:code> parameters, respectively.</db:para>
</db:section>
<db:section xml:id="dtor.QAxSelect">
<db:title>[override virtual] QAxSelect::~QAxSelect()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAxSelect</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAxSelect() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qaxselect.xml">QAxSelect</db:link> object.</db:para>
</db:section>
<db:section xml:id="clsid">
<db:title>QString QAxSelect::clsid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>clsid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString clsid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the CLSID of the selected COM component.</db:para>
</db:section>
<db:section xml:id="sandboxingLevel">
<db:title>QAxSelect::SandboxingLevel QAxSelect::sandboxingLevel() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QAxSelect::SandboxingLevel</db:type>
<db:methodname>sandboxingLevel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QAxSelect::SandboxingLevel sandboxingLevel() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the desired level of sandboxing for the ActiveX control.</db:para>
</db:section>
</db:section>
</db:article>
