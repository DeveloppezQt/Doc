<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QDBusPendingReply Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> class contains the reply to an asynchronous method call.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusPendingReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> is a template class with up to 8 template parameters. Those parameters are the types that will be used to extract the contents of the reply's data.</db:para>
<db:para>This class is similar in functionality to <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link>, but with two important differences:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> accepts exactly one return type, whereas <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> can have from 1 to 8 types</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> only works on already completed replies, whereas <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> allows one to wait for replies from pending calls</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Where with <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> you would write:</db:para>
<db:programlisting language="cpp">QDBusReply&lt;QString&gt; reply = interface-&gt;call(&quot;RemoteMethod&quot;);
if (reply.isValid())
    // use the returned value
    useValue(reply.value());
else
    // call failed. Show an error condition.
    showError(reply.error());
</db:programlisting>
<db:para>with <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>, the equivalent code (including the blocking wait for the reply) would be:</db:para>
<db:programlisting language="cpp">    QDBusPendingReply&lt;QString&gt; reply = interface-&gt;asyncCall(&quot;RemoteMethod&quot;);
    reply.waitForFinished();
    if (reply.isError())
        // call failed. Show an error condition.
        showError(reply.error());
    else
        // use the returned value
        useValue(reply.value());
</db:programlisting>
<db:para>For method calls that have more than one output argument, with <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link>, you would write:</db:para>
<db:programlisting language="cpp">QString reply = interface-&gt;call(&quot;RemoteMethod&quot;);
</db:programlisting>
<db:para>whereas with <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>, all of the output arguments should be template parameters:</db:para>
<db:programlisting language="cpp">    QDBusPendingReply&lt;bool, QString&gt; reply = interface-&gt;asyncCall(&quot;RemoteMethod&quot;);
    reply.waitForFinished();
    if (!reply.isError()) {
        if (reply.argumentAt&lt;0&gt;())
            showSuccess(reply.argumentAt&lt;1&gt;());
        else
            showFailure(reply.argumentAt&lt;1&gt;());
    }
</db:programlisting>
<db:para><db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> objects can be associated with QDBusPendingCallWatcher objects, which emit signals when the reply arrives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QDBusPendingCallWatcher</db:member>
<db:member><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link></db:member>
<db:member><db:link xlink:href="">QDBusAbstractInterface::asyncCall()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
