<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusPendingReply Class</db:title>
<db:subtitle>template &lt;typename Types&gt; class QDBusPendingReply</db:subtitle>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> class contains the reply to an asynchronous method call.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusPendingReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Dbus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Dbus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdbuspendingreplybase.xml" xlink:role="class">QDBusPendingReplyBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> is a variadic template class. The template parameters are the types that will be used to extract the contents of the reply's data.</db:para>
<db:para>This class is similar in functionality to <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link>, but with two important differences:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> accepts exactly one return type, whereas <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> can have any number of types</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> only works on already completed replies, whereas <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> allows one to wait for replies from pending calls</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Where with <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> you would write:</db:para>
<db:programlisting language="cpp">QDBusReply&amp;lt;QString&amp;gt; reply = interface-&amp;gt;call(&quot;RemoteMethod&quot;);
if (reply.isValid())
    // use the returned value
    useValue(reply.value());
else
    // call failed. Show an error condition.
    showError(reply.error());
</db:programlisting>
<db:para>with <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>, the equivalent code (including the blocking wait for the reply) would be:</db:para>
<db:programlisting language="cpp">    QDBusPendingReply&amp;lt;QString&amp;gt; reply = iface-&amp;gt;asyncCall(&quot;RemoteMethod&quot;);
    reply.waitForFinished();
    if (reply.isError())
        // call failed. Show an error condition.
        showErrorD(reply.error());
    else
        // use the returned value
        useValue(reply.value());
</db:programlisting>
<db:para>For method calls that have more than one output argument, with <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link>, you would write:</db:para>
<db:programlisting language="cpp">reply = interface-&amp;gt;call(&quot;RemoteMethod&quot;);
</db:programlisting>
<db:para>whereas with <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link>, all of the output arguments should be template parameters:</db:para>
<db:programlisting language="cpp">    QDBusPendingReply&amp;lt;bool, QString&amp;gt; reply = iface-&amp;gt;asyncCall(&quot;RemoteMethod&quot;);
    reply.waitForFinished();
    if (!reply.isError()) {
        if (reply.argumentAt&amp;lt;0&amp;gt;())
            showSuccess(reply.argumentAt&amp;lt;1&amp;gt;());
        else
            showFailure(reply.argumentAt&amp;lt;1&amp;gt;());
    }
</db:programlisting>
<db:para><db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> objects can be associated with <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link> objects, which emit signals when the reply arrives.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link></db:member>
<db:member><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="anonymous-enum">
<db:title>enum QDBusPendingReply::anonymous</db:title>
<db:enumsynopsis>
<db:enumname>anonymous</db:enumname>
<db:enumitem>
<db:enumidentifier>Count</db:enumidentifier>
<db:enumvalue>std::is_same_v&lt;typename Select&lt;0&gt;::Type, void&gt; ? 0 : sizeof...(Types)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link></db:emphasis>::Count</db:code></db:para>
</db:td>
<db:td><db:code>std::is_same_v&lt;typename Select&lt;0&gt;::Type, void&gt; ? 0 : sizeof...(Types)</db:code></db:td>
<db:td>
<db:para>The number of arguments the reply is expected to have</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusPendingReply">
<db:title>QDBusPendingReply::QDBusPendingReply()</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingReply</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object. Without assigning a <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> object to this reply, <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> cannot do anything. All functions return their failure values.</db:para>
</db:section>
<db:section xml:id="QDBusPendingReply-1">
<db:title>QDBusPendingReply::QDBusPendingReply(const QDBusPendingReply&lt;Types...&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingReply</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingReply&lt;Types...&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply(const QDBusPendingReply&lt;Types...&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of the <db:code role="parameter">other</db:code> <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object. Just like <db:link xlink:href="qdbuspendingcall.xml">QDBusPendingCall</db:link> and <db:link xlink:href="qdbuspendingcallwatcher.xml">QDBusPendingCallWatcher</db:link>, this <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object will share the same pending call reference. All copies share the same return values.</db:para>
</db:section>
<db:section xml:id="QDBusPendingReply-2">
<db:title>QDBusPendingReply::QDBusPendingReply(const QDBusPendingCall &amp;<db:emphasis>call</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingReply</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>call</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply(const QDBusPendingCall &amp;call)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object that will take its contents from the <db:code role="parameter">call</db:code> pending asynchronous call. This <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object will share the same pending call reference as <db:code role="parameter">call</db:code>.</db:para>
</db:section>
<db:section xml:id="QDBusPendingReply-3">
<db:title>QDBusPendingReply::QDBusPendingReply(const QDBusMessage &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusPendingReply</db:methodname>
<db:methodparam>
<db:type>const QDBusMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply(const QDBusMessage &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object that will take its contents from the message <db:code role="parameter">message</db:code>. In this case, this object will be already in its finished state and the reply's contents will be accessible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml#isFinished">isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="argumentAt-1">
<db:title>QVariant QDBusPendingReply::argumentAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>argumentAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant argumentAt(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the argument at position <db:code role="parameter">index</db:code> in the reply's contents. If the reply doesn't have that many elements, this function's return value is undefined (will probably cause an assertion failure), so it is important to verify that the processing is finished and the reply is valid.</db:para>
<db:para>If the reply does not contain an argument at position <db:code role="parameter">index</db:code> or if the reply was an error, this function returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>. Since D-Bus messages can never contain invalid QVariants, this return can be used to detect an error condition.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>[constexpr] int QDBusPendingReply::count() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the number of arguments the reply is supposed to have. This number matches the number of non-void template parameters in this class.</db:para>
<db:para>If the reply arrives with a different number of arguments (or with different types), it will be transformed into an error reply indicating a bad signature.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QDBusError QDBusPendingReply::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusError</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusError error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the error content of the reply message, if it has finished processing. If the reply message has not finished processing or if it contains a normal reply message (non-error), this function returns an invalid <db:link xlink:href="qdbuserror.xml">QDBusError</db:link>.</db:para>
</db:section>
<db:section xml:id="isError">
<db:title>bool QDBusPendingReply::isError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the reply contains an error message, false if it contains a normal method reply.</db:para>
<db:para>If the pending call has not finished processing, this function also returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="isFinished">
<db:title>bool QDBusPendingReply::isFinished() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFinished() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the pending call has finished processing and the reply has been received. If this function returns <db:code>true</db:code>, the <db:link xlink:href="qdbuspendingreply.xml#isError">isError</db:link>(), <db:link xlink:href="qdbuspendingreply.xml#error">error</db:link>() and <db:link xlink:href="qdbuspendingreply.xml#reply">reply</db:link>() methods should return valid information.</db:para>
<db:para>Note that this function only changes state if you call <db:link xlink:href="qdbuspendingreply.xml#waitForFinished">waitForFinished</db:link>() or if an external D-Bus event happens, which in general only happens if you return to the event loop execution.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingcallwatcher.xml#isFinished">QDBusPendingCallWatcher::isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDBusPendingReply::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the reply contains a normal reply message, false if it contains anything else.</db:para>
<db:para>If the pending call has not finished processing, this function return false.</db:para>
</db:section>
<db:section xml:id="reply">
<db:title>QDBusMessage QDBusPendingReply::reply() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusMessage</db:type>
<db:methodname>reply</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusMessage reply() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the reply message received for the asynchronous call that was sent, if it has finished processing. If the pending call is not finished, this function returns a <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> of type <db:link xlink:href="qdbusmessage.xml#MessageType-enum">QDBusMessage::InvalidMessage</db:link>.</db:para>
<db:para>After it has finished processing, the message type will either be an error message or a normal method reply message.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>typename Select&lt;0&gt;::Type QDBusPendingReply::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>typename Select&lt;0&gt;::Type</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename Select&lt;0&gt;::Type value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first argument in this reply, cast to type <db:code>Types[0]</db:code> (the first template parameter of this class). This is equivalent to calling <db:link xlink:href="qdbuspendingreply.xml#argumentAt-1">argumentAt</db:link>&lt;0&gt;().</db:para>
<db:para>This function is provided as a convenience, matching the <db:link xlink:href="qdbusreply.xml#value">QDBusReply::value</db:link>() function.</db:para>
<db:para>Note that, if the reply hasn't arrived, this function causes the calling thread to block until the reply is processed.</db:para>
<db:para>If the reply is an error reply, this function returns a default-constructed <db:code>Types[0]</db:code> object, which may be indistinguishable from a valid value. To reliably determine whether the message was an error, use <db:link xlink:href="qdbuspendingreply.xml#isError">isError</db:link>().</db:para>
</db:section>
<db:section xml:id="waitForFinished">
<db:title>void QDBusPendingReply::waitForFinished()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>waitForFinished</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void waitForFinished()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Suspends the execution of the calling thread until the reply is received and processed. After this function returns, <db:link xlink:href="qdbuspendingreply.xml#isFinished">isFinished</db:link>() should return true, indicating the reply's contents are ready to be processed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingcallwatcher.xml#waitForFinished">QDBusPendingCallWatcher::waitForFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-typename-Select-lt0-gt-3a-3aType">
<db:title>typename Select&lt;0&gt;::Type QDBusPendingReply::operator typename Select&lt;0&gt;::Type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>typename Select&lt;0&gt;::Type</db:type>
<db:methodname>operator typename Select&lt;0&gt;::Type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename Select&lt;0&gt;::Type operator typename Select&lt;0&gt;::Type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the first argument in this reply, cast to type <db:code>Types[0]</db:code> (the first template parameter of this class). This is equivalent to calling <db:link xlink:href="qdbuspendingreply.xml#argumentAt-1">argumentAt</db:link>&lt;0&gt;().</db:para>
<db:para>This function is provided as a convenience, matching the <db:link xlink:href="qdbusreply.xml#value">QDBusReply::value</db:link>() function.</db:para>
<db:para>Note that, if the reply hasn't arrived, this function causes the calling thread to block until the reply is processed.</db:para>
<db:para>If the reply is an error reply, this function returns a default-constructed <db:code>Types[0]</db:code> object, which may be indistinguishable from a valid value. To reliably determine whether the message was an error, use <db:link xlink:href="qdbuspendingreply.xml#isError">isError</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDBusPendingReply&lt;Types...&gt; &amp;QDBusPendingReply::operator=(const QDBusPendingReply&lt;Types...&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusPendingReply&lt;Types...&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingReply&lt;Types...&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply&lt;Types...&gt; &amp; operator=(const QDBusPendingReply&lt;Types...&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of <db:code role="parameter">other</db:code> and drops the reference to the current pending call. If the current reference is to an unfinished pending call and this is the last reference, the pending call will be canceled and there will be no way of retrieving the reply's contents, when they arrive.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDBusPendingReply&lt;Types...&gt; &amp;QDBusPendingReply::operator=(const QDBusPendingCall &amp;<db:emphasis>call</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusPendingReply&lt;Types...&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>call</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply&lt;Types...&gt; &amp; operator=(const QDBusPendingCall &amp;call)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object take its contents from the <db:code role="parameter">call</db:code> pending call and drops the reference to the current pending call. If the current reference is to an unfinished pending call and this is the last reference, the pending call will be canceled and there will be no way of retrieving the reply's contents, when they arrive.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QDBusPendingReply&lt;Types...&gt; &amp;QDBusPendingReply::operator=(const QDBusMessage &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusPendingReply&lt;Types...&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusMessage &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusPendingReply&lt;Types...&gt; &amp; operator=(const QDBusMessage &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object take its contents from the <db:code role="parameter">message</db:code> message and drops the reference to the current pending call. If the current reference is to an unfinished pending call and this is the last reference, the pending call will be canceled and there will be no way of retrieving the reply's contents, when they arrive.</db:para>
<db:para>After this function is finished, the <db:link xlink:href="qdbuspendingreply.xml">QDBusPendingReply</db:link> object will be in its &quot;finished&quot; state and the <db:code role="parameter">message</db:code> contents will be accessible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbuspendingreply.xml#isFinished">isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
