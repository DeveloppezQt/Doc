<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanUniqueIdDescription Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> class describes the rules for accessing a unique identifier in a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanUniqueIdDescription</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A unique identifier is used to distinguish different CAN bus frames and apply proper <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link>s to encode or decode them. Different CAN protocols can use different parts of the CAN frame as a unique identifier (e.g. the DBC protocol uses the whole FrameId as a unique identifier).</db:para>
<db:para>This class contains parameters to specify the unique identifier position within a CAN frame in a flexible way:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The part of the frame which will be used to extract the unique identifier (FrameId or payload).</db:para>
</db:listitem>
<db:listitem>
<db:para>The start bit of the unique identifier, relative to the selected part of the frame. The bits are counted starting from the LSB.</db:para>
</db:listitem>
<db:listitem>
<db:para>The number of bits used to represent the unique identifier.</db:para>
</db:listitem>
<db:listitem>
<db:para>The endian used to extract the value.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Check the <db:link xlink:href="qcansignaldescription.xml#data-endianness-processing">Data Endianness Processing</db:link> section of the <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> documentation to see how the start bit value depends on the data endianness. The approach that is described there is also used for unique id description.</db:para>
<db:para>The actual value of a unique identifier is represented by the <db:link xlink:href="qtcanbus.xml#UniqueId-enum">QtCanBus::UniqueId</db:link> type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanUniqueIdDescription">
<db:title>QCanUniqueIdDescription::QCanUniqueIdDescription()</db:title>
<db:constructorsynopsis>
<db:methodname>QCanUniqueIdDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty unique identifier description.</db:para>
</db:section>
<db:section xml:id="QCanUniqueIdDescription-1">
<db:title>QCanUniqueIdDescription::QCanUniqueIdDescription(const QCanUniqueIdDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanUniqueIdDescription</db:methodname>
<db:methodparam>
<db:type>const QCanUniqueIdDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription(const QCanUniqueIdDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a unique identifier description with the values copied from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QCanUniqueIdDescription-2">
<db:title>QCanUniqueIdDescription::QCanUniqueIdDescription(QCanUniqueIdDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanUniqueIdDescription</db:methodname>
<db:methodparam>
<db:type>QCanUniqueIdDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription(QCanUniqueIdDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a unique identifier description by moving from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QCanUniqueIdDescription">
<db:title>QCanUniqueIdDescription::~QCanUniqueIdDescription()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCanUniqueIdDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCanUniqueIdDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this unique identifier description.</db:para>
</db:section>
<db:section xml:id="bitLength">
<db:title>quint8 QCanUniqueIdDescription::bitLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint8</db:type>
<db:methodname>bitLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint8 bitLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit length of the unique identifier.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setBitLength">setBitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setStartBit">setStartBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="endian">
<db:title>QSysInfo::Endian QCanUniqueIdDescription::endian() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSysInfo::Endian</db:type>
<db:methodname>endian</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSysInfo::Endian endian() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data endian of the unique identifier.</db:para>
<db:para>By default, <db:link xlink:href="qsysinfo.xml#Endian-enum">LittleEndian</db:link> is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setEndian">setEndian</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#Endian-enum">QSysInfo::Endian</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QCanUniqueIdDescription::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when this unique identifier description is valid and <db:code>false</db:code> otherwise.</db:para>
<db:para>A valid unique identifier description <db:emphasis>must</db:emphasis> have a <db:link xlink:href="qcanuniqueiddescription.xml#bitLength">bitLength</db:link>() which is greater than zero and does not exceed the number of bits of the <db:link xlink:href="qtcanbus.xml#UniqueId-enum">QtCanBus::UniqueId</db:link> type.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#bitLength">bitLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBitLength">
<db:title>void QCanUniqueIdDescription::setBitLength(quint8 <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBitLength</db:methodname>
<db:methodparam>
<db:type>quint8</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBitLength(quint8 length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bit length of the unique identifier to <db:code role="parameter">length</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setStartBit">setStartBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setEndian">
<db:title>void QCanUniqueIdDescription::setEndian(QSysInfo::Endian <db:emphasis>endian</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setEndian</db:methodname>
<db:methodparam>
<db:type>QSysInfo::Endian</db:type>
<db:parameter>endian</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setEndian(QSysInfo::Endian endian)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data endian of the unique identifier to <db:code role="parameter">endian</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#endian">endian</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#Endian-enum">QSysInfo::Endian</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSource">
<db:title>void QCanUniqueIdDescription::setSource(QtCanBus::DataSource <db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>QtCanBus::DataSource</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSource(QtCanBus::DataSource source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data source of the unique identifier to <db:code role="parameter">source</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#source">source</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataSource-enum">QtCanBus::DataSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartBit">
<db:title>void QCanUniqueIdDescription::setStartBit(quint16 <db:emphasis>bit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStartBit</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>bit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStartBit(quint16 bit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the start bit of the unique identifier in the <db:link xlink:href="qcanuniqueiddescription.xml#source">source</db:link>() to <db:code role="parameter">bit</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setBitLength">setBitLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source">
<db:title>QtCanBus::DataSource QCanUniqueIdDescription::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtCanBus::DataSource</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtCanBus::DataSource source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data source of the unique identifier.</db:para>
<db:para>By default, <db:link xlink:href="qtcanbus.xml#DataSource-enum">FrameId</db:link> is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setSource">setSource</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataSource-enum">QtCanBus::DataSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startBit">
<db:title>quint16 QCanUniqueIdDescription::startBit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>startBit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 startBit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the start bit of the unique identifier in the <db:link xlink:href="qcanuniqueiddescription.xml#source">source</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setStartBit">setStartBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml#setBitLength">setBitLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCanUniqueIdDescription &amp;QCanUniqueIdDescription::operator=(const QCanUniqueIdDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanUniqueIdDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCanUniqueIdDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription &amp; operator=(const QCanUniqueIdDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the values from <db:code role="parameter">other</db:code> to this unique identifier description.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCanUniqueIdDescription &amp;QCanUniqueIdDescription::operator=(QCanUniqueIdDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanUniqueIdDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCanUniqueIdDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription &amp; operator=(QCanUniqueIdDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns the values from <db:code role="parameter">other</db:code> to this unique identifier description.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
