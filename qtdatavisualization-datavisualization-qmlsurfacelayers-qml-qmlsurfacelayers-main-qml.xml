<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Surface Multiseries Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using multiple series with <db:link xlink:href="qml-qtdatavisualization-surface3d.xml">Surface3D</db:link> in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.1
import QtQuick.Layouts 1.0
import QtQuick.Controls 1.0
import QtQuick.Controls.Styles 1.0
import QtDataVisualization 1.0
import &quot;.&quot;

Item {
    id: mainview
    width: 1280
    height: 720

    property real fontSize: 12

    Item {
        id: surfaceView
        width: mainview.width - buttonLayout.width
        height: mainview.height
        anchors.right: mainview.right;

        ColorGradient {
            id: layerOneGradient
            ColorGradientStop { position: 0.0; color: &quot;black&quot; }
            ColorGradientStop { position: 0.31; color: &quot;tan&quot; }
            ColorGradientStop { position: 0.32; color: &quot;green&quot; }
            ColorGradientStop { position: 0.40; color: &quot;darkslategray&quot; }
            ColorGradientStop { position: 1.0; color: &quot;white&quot; }
        }

        ColorGradient {
            id: layerTwoGradient
            ColorGradientStop { position: 0.315; color: &quot;blue&quot; }
            ColorGradientStop { position: 0.33; color: &quot;white&quot; }
        }

        ColorGradient {
            id: layerThreeGradient
            ColorGradientStop { position: 0.0; color: &quot;red&quot; }
            ColorGradientStop { position: 0.15; color: &quot;black&quot; }
        }

        Surface3D {
            id: surfaceLayers
            width: surfaceView.width
            height: surfaceView.height
            theme: Theme3D {
                type: Theme3D.ThemeEbony
                font.pointSize: 35
                colorStyle: Theme3D.ColorStyleRangeGradient
            }
            shadowQuality: AbstractGraph3D.ShadowQualityNone
            selectionMode: AbstractGraph3D.SelectionRow | AbstractGraph3D.SelectionSlice
            scene.activeCamera.cameraPreset: Camera3D.CameraPresetIsometricLeft
            axisY.min: 20
            axisY.max: 200
            axisX.segmentCount: 5
            axisX.subSegmentCount: 2
            axisX.labelFormat: &quot;%i&quot;
            axisZ.segmentCount: 5
            axisZ.subSegmentCount: 2
            axisZ.labelFormat: &quot;%i&quot;
            axisY.segmentCount: 5
            axisY.subSegmentCount: 2
            axisY.labelFormat: &quot;%i&quot;

            Surface3DSeries {
                id: layerOneSeries
                baseGradient: layerOneGradient
                HeightMapSurfaceDataProxy {
                    heightMapFile: &quot;:/heightmaps/layer_1.png&quot;
                }
                flatShadingEnabled: false
                drawMode: Surface3DSeries.DrawSurface
                visible: layerOneToggle.checked // bind to checkbox state
            }

            Surface3DSeries {
                id: layerTwoSeries
                baseGradient: layerTwoGradient
                HeightMapSurfaceDataProxy {
                    heightMapFile: &quot;:/heightmaps/layer_2.png&quot;
                }
                flatShadingEnabled: false
                drawMode: Surface3DSeries.DrawSurface
                visible: layerTwoToggle.checked // bind to checkbox state
            }

            Surface3DSeries {
                id: layerThreeSeries
                baseGradient: layerThreeGradient
                HeightMapSurfaceDataProxy {
                    heightMapFile: &quot;:/heightmaps/layer_3.png&quot;
                }
                flatShadingEnabled: false
                drawMode: Surface3DSeries.DrawSurface
                visible: layerThreeToggle.checked // bind to checkbox state
            }
        }
    }

    ColumnLayout {
        id: buttonLayout
        anchors.top: parent.top
        anchors.left: parent.left
        spacing: 0

        GroupBox {
            flat: true
            Layout.fillWidth: true
            Column {
                spacing: 10

                Label {
                    font.pointSize: fontSize
                    font.bold: true
                    text: &quot;Layer Selection&quot;
                }

                CheckBox {
                    id: layerOneToggle
                    checked: true
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Ground Layer&quot;
                        }
                    }
                }

                CheckBox {
                    id: layerTwoToggle
                    checked: true
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Sea Layer&quot;
                        }
                    }
                }

                CheckBox {
                    id: layerThreeToggle
                    checked: true
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Tectonic Layer&quot;
                        }
                    }
                }
            }
        }

        GroupBox {
            flat: true
            Layout.fillWidth: true
            Column {
                spacing: 10

                Label {
                    font.pointSize: fontSize
                    font.bold: true
                    text: &quot;Layer Style&quot;
                }

                CheckBox {
                    id: layerOneGrid
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Ground as Grid&quot;
                        }
                    }
                    onCheckedChanged: {
                        if (checked)
                            layerOneSeries.drawMode = Surface3DSeries.DrawWireframe
                        else
                            layerOneSeries.drawMode = Surface3DSeries.DrawSurface
                    }
                }

                CheckBox {
                    id: layerTwoGrid
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Sea as Grid&quot;
                        }
                    }
                    onCheckedChanged: {
                        if (checked)
                            layerTwoSeries.drawMode = Surface3DSeries.DrawWireframe
                        else
                            layerTwoSeries.drawMode = Surface3DSeries.DrawSurface
                    }
                }

                CheckBox {
                    id: layerThreeGrid
                    style: CheckBoxStyle {
                        label: Label {
                            font.pointSize: fontSize
                            text: &quot;Show Tectonic as Grid&quot;
                        }
                    }
                    onCheckedChanged: {
                        if (checked)
                            layerThreeSeries.drawMode = Surface3DSeries.DrawWireframe
                        else
                            layerThreeSeries.drawMode = Surface3DSeries.DrawSurface
                    }
                }
            }
        }

        NewButton {
            id: sliceButton
            text: &quot;Slice All Layers&quot;
            fontSize: fontSize
            Layout.fillWidth: true
            Layout.minimumHeight: 40
            onClicked: {
                if (surfaceLayers.selectionMode &amp;amp; AbstractGraph3D.SelectionMultiSeries) {
                    surfaceLayers.selectionMode = AbstractGraph3D.SelectionRow
                            | AbstractGraph3D.SelectionSlice
                    text = &quot;Slice All Layers&quot;
                } else {
                    surfaceLayers.selectionMode = AbstractGraph3D.SelectionRow
                            | AbstractGraph3D.SelectionSlice
                            | AbstractGraph3D.SelectionMultiSeries
                    text = &quot;Slice One Layer&quot;
                }
            }
        }

        NewButton {
            id: shadowButton
            fontSize: fontSize
            Layout.fillWidth: true
            Layout.minimumHeight: 40
            text: surfaceLayers.shadowsSupported ? &quot;Show Shadows&quot; : &quot;Shadows not supported&quot;
            enabled: surfaceLayers.shadowsSupported
            onClicked: {
                if (surfaceLayers.shadowQuality === AbstractGraph3D.ShadowQualityNone) {
                    surfaceLayers.shadowQuality = AbstractGraph3D.ShadowQualityLow
                    text = &quot;Hide Shadows&quot;
                } else {
                    surfaceLayers.shadowQuality = AbstractGraph3D.ShadowQualityNone
                    text = &quot;Show Shadows&quot;
                }
            }
        }

        NewButton {
            id: renderModeButton
            fontSize: fontSize
            text: &quot;Switch Render Mode&quot;
            Layout.fillWidth: true
            Layout.minimumHeight: 40
            onClicked: {
                var modeText = &quot;Indirect &quot;
                var aaText
                if (surfaceLayers.renderingMode === AbstractGraph3D.RenderIndirect &amp;amp;&amp;amp;
                        surfaceLayers.msaaSamples === 0) {
                    surfaceLayers.renderingMode = AbstractGraph3D.RenderDirectToBackground
                    modeText = &quot;BackGround &quot;
                } else if (surfaceLayers.renderingMode === AbstractGraph3D.RenderIndirect &amp;amp;&amp;amp;
                           surfaceLayers.msaaSamples === 4) {
                    surfaceLayers.renderingMode = AbstractGraph3D.RenderIndirect
                    surfaceLayers.msaaSamples = 0
                } else if (surfaceLayers.renderingMode === AbstractGraph3D.RenderIndirect &amp;amp;&amp;amp;
                           surfaceLayers.msaaSamples === 8) {
                    surfaceLayers.renderingMode = AbstractGraph3D.RenderIndirect
                    surfaceLayers.msaaSamples = 4
                } else {
                    surfaceLayers.renderingMode = AbstractGraph3D.RenderIndirect
                    surfaceLayers.msaaSamples = 8
                }

                if (surfaceLayers.msaaSamples &amp;lt;= 0) {
                    aaText = &quot;No AA&quot;
                } else {
                    aaText = surfaceLayers.msaaSamples + &quot;xMSAA&quot;
                }

                renderLabel.text = modeText + aaText
            }
        }

        TextField {
            id: renderLabel
            font.pointSize: fontSize
            Layout.fillWidth: true
            Layout.minimumHeight: 40
            enabled: false
            horizontalAlignment: TextInput.AlignHCenter
            text: &quot;Indirect, &quot; + surfaceLayers.msaaSamples + &quot;xMSAA&quot;
        }
    }
}

</db:programlisting>
</db:article>
