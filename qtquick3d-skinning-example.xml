<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Simple Skinning Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to render a simple skinning animation in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/skinning.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Generally most <db:link xlink:href="quick3d-vertex-skinning.xml">skin animations</db:link> will be designed by modeling tools, and Quick3D also supports glTF formats through the <db:link xlink:href="qtquick3d-tool-balsam.xml">Balsam importer</db:link> and <db:link xlink:href="https://doc.qt.io/qtdesignstudio/studio-3d-design-mode.html">Qt Design Studio</db:link>. This example shows how each property is used for the skin animation in Quick3D.</db:para>
<db:note>
<db:para>All the data in this example come from <db:link xlink:href="https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_020_Skins.md">gfTF-Tutorial Skins</db:link>.</db:para>
</db:note>
<db:section xml:id="make-a-skinning-geometry">
<db:title>Make a skinning geometry.</db:title>
<db:para>To use custom geometry data, we will define a geometry having positions, joints, weights, and indexes.</db:para>
<db:programlisting language="cpp">Q_OBJECT
QML_NAMED_ELEMENT(SkinGeometry)
Q_PROPERTY(QList&amp;lt;QVector3D&amp;gt; positions READ positions WRITE setPositions NOTIFY positionsChanged)
Q_PROPERTY(QList&amp;lt;qint32&amp;gt; joints READ joints WRITE setJoints NOTIFY jointsChanged)
Q_PROPERTY(QList&amp;lt;float&amp;gt; weights READ weights WRITE setWeights NOTIFY weightsChanged)
Q_PROPERTY(QList&amp;lt;quint32&amp;gt; indexes READ indexes WRITE setIndexes NOTIFY indexesChanged)
</db:programlisting>
<db:para>Each position is a vertex position and each vertex has 4 joints' indexes and corresponding weights.</db:para>
</db:section>
<db:section xml:id="set-up-skinned-data-in-qml">
<db:title>Set up skinned data in QML</db:title>
<db:section xml:id="position-data-and-indexes">
<db:title>Position data and indexes</db:title>
<db:para>We will draw 8 triangles with 10 vertexes. The table below shows the QML code and a visualization of the vertexes.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>QML Code</db:para>
</db:th>
<db:th>
<db:para>Visualized</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">positions: [
    Qt.vector3d(0.0, 0.0, 0.0), // vertex 0
    Qt.vector3d(1.0, 0.0, 0.0), // vertex 1
    Qt.vector3d(0.0, 0.5, 0.0), // vertex 2
    Qt.vector3d(1.0, 0.5, 0.0), // vertex 3
    Qt.vector3d(0.0, 1.0, 0.0), // vertex 4
    Qt.vector3d(1.0, 1.0, 0.0), // vertex 5
    Qt.vector3d(0.0, 1.5, 0.0), // vertex 6
    Qt.vector3d(1.0, 1.5, 0.0), // vertex 7
    Qt.vector3d(0.0, 2.0, 0.0), // vertex 8
    Qt.vector3d(1.0, 2.0, 0.0)  // vertex 9
]
indexes: [
    0, 1, 3, // triangle 0
    0, 3, 2, // triangle 1
    2, 3, 5, // triangle 2
    2, 5, 4, // triangle 3
    4, 5, 7, // triangle 4
    4, 7, 6, // triangle 5
    6, 7, 9, // triangle 6
    6, 9, 8  // triangle 7
]
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:alt>&quot;Vertex positions and geomery&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/vertexinfo.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="joints-and-weights-data">
<db:title>Joints and weights data</db:title>
<db:para>Every vertex needs to specify the indexes of the joints that should have an influence on it during the skinning process. For each vertex we store these indexes as 4D vectors (Qt limits the number of joints that may influence a vertex to 4). Our geometry will have just two joint nodes (0 and 1), but since we use 4D vectors we set the remaining two joint indexes and their weights to 0.</db:para>
<db:programlisting language="qml">joints: [
    0, 1, 0, 0, // vertex 0
    0, 1, 0, 0, // vertex 1
    0, 1, 0, 0, // vertex 2
    0, 1, 0, 0, // vertex 3
    0, 1, 0, 0, // vertex 4
    0, 1, 0, 0, // vertex 5
    0, 1, 0, 0, // vertex 6
    0, 1, 0, 0, // vertex 7
    0, 1, 0, 0, // vertex 8
    0, 1, 0, 0  // vertex 9
]
</db:programlisting>
<db:para>Corresponding weight values are as below.</db:para>
<db:programlisting language="qml">weights: [
    1.00, 0.00, 0.0, 0.0, // vertex 0
    1.00, 0.00, 0.0, 0.0, // vertex 1
    0.75, 0.25, 0.0, 0.0, // vertex 2
    0.75, 0.25, 0.0, 0.0, // vertex 3
    0.50, 0.50, 0.0, 0.0, // vertex 4
    0.50, 0.50, 0.0, 0.0, // vertex 5
    0.25, 0.75, 0.0, 0.0, // vertex 6
    0.25, 0.75, 0.0, 0.0, // vertex 7
    0.00, 1.00, 0.0, 0.0, // vertex 8
    0.00, 1.00, 0.0, 0.0  // vertex 9
]
</db:programlisting>
</db:section>
<db:section xml:id="skeleton-and-joint-hierarchy">
<db:title>Skeleton and Joint hierarchy</db:title>
<db:para>For skinning, we add a <db:emphasis>skeleton</db:emphasis> property to the <db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link>:</db:para>
<db:programlisting language="qml">skeleton: qmlskeleton
Skeleton {
    id: qmlskeleton
    Joint {
        id: joint0
        index: 0
        skeletonRoot: qmlskeleton
        Joint {
            id: joint1
            index: 1
            skeletonRoot: qmlskeleton
            eulerRotation.z: 45
        }
    }
}
</db:programlisting>
<db:para>The two <db:link xlink:href="qml-qtquick3d-joint.xml">Joint</db:link>s are connected in a <db:link xlink:href="qml-qtquick3d-skeleton.xml">Skeleton</db:link>. We will rotate <db:code>joint1</db:code> 45 degrees around the z-axis. The images below show how the joints are placed in the geometry and how the initial skeleton is oriented.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Joints in the geometry</db:para>
</db:th>
<db:th>
<db:para>Initial skeleton</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:alt>&quot;2 joints in the geometry&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/jointinfo.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:alt>&quot;Initial Skeleton&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/jointinfo2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="placing-models-using-inversebindposes">
<db:title>Placing models using inverseBindPoses</db:title>
<db:para>Once a model has a valid <db:link xlink:href="qml-qtquick3d-model.xml#skeleton-prop">skeleton</db:link>, it is necessary to define the <db:emphasis>initial pose</db:emphasis> of the skeleton. This defines the baseline for the skeletal animation: moving a joint from its initial position causes the model's vertexes to move according to the <db:code>joints</db:code> and <db:code>weights</db:code> tables. The geometry of each node is specified in a peculiar way: <db:link xlink:href="qml-qtquick3d-model.xml#inverseBindPoses-prop">Model.inverseBindPoses</db:link> is set to the <db:emphasis>inverse</db:emphasis> of the matrix that would transform the joint to its initial position. In order to move it to the center, we will simply set the same transform for both joints: a matrix that translates -0.5 along the x-axis and -1.0 along the y-axis.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>QML code</db:para>
</db:th>
<db:th>
<db:para>Initial position</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">inverseBindPoses: [
    Qt.matrix4x4(1, 0, 0, -0.5,
                 0, 1, 0, -1,
                 0, 0, 1, 0,
                 0, 0, 0, 1),
    Qt.matrix4x4(1, 0, 0, -0.5,
                 0, 1, 0, -1,
                 0, 0, 1, 0,
                 0, 0, 0, 1)
]
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:alt>&quot;Initial position&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/inverseBindPoses.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:alt>&quot;Transformed by InversebindPoses&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/inverseBindPoses2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="animate-with-joint-nodes">
<db:title>Animate with Joint nodes</db:title>
<db:para>Now that we have prepared a skinned object, we can animate it by changing the <db:link xlink:href="qml-qtquick3d-joint.xml">Joint</db:link>s' properties, specifically <db:emphasis>eulerRotation</db:emphasis>.</db:para>
<db:programlisting language="qml">Timeline {
    id: timeline0
    startFrame: 0
    endFrame: 1000
    currentFrame: 0
    enabled: true
    animations: [
        TimelineAnimation {
            duration: 5000
            from: 0
            to: 1000
            running: true
        }
    ]

    KeyframeGroup {
        target: joint1
        property: &quot;eulerRotation.z&quot;

        Keyframe {
            frame: 0
            value: 0
        }
        Keyframe {
            frame: 250
            value: 90
        }
        Keyframe {
            frame: 750
            value: -90
        }
        Keyframe {
            frame: 1000
            value: 0
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="a-more-complete-approach-to-skinning">
<db:title>A more complete approach to skinning</db:title>
<db:para>Skeleton is a resource but it's hierarchy and position is used for the Model's transformation.</db:para>
<db:para>Instead of a <db:link xlink:href="qml-qtquick3d-skeleton.xml">Skeleton</db:link> node, we can use the resource type <db:link xlink:href="qml-qtquick3d-skin.xml">Skin</db:link>. Since the <db:link xlink:href="qml-qtquick3d-skin.xml">Skin</db:link> type is not a spatial node in the scene, its position will not affect the model. A minimal working Skin node will normally consist of a node list, joints and an optional inverse bind matrices, inverseBindPoses.</db:para>
<db:para>Using the <db:link xlink:href="qml-qtquick3d-skin.xml">Skin</db:link> item the previous example can be written like this:</db:para>
<db:programlisting language="qml">skin: Skin {
    id: skin0
    joints: [
        joint0,
        joint1
    ]
    inverseBindPoses: [
        Qt.matrix4x4(1, 0, 0, -0.5,
                     0, 1, 0, -1,
                     0, 0, 1, 0,
                     0, 0, 0, 1),
        Qt.matrix4x4(1, 0, 0, -0.5,
                     0, 1, 0, -1,
                     0, 0, 1, 0,
                     0, 0, 0, 1)
    ]
}
</db:programlisting>
<db:para>From the code snippet we can see that the <db:link xlink:href="qml-qtquick3d-skin.xml">Skin</db:link> only has two lists, a joints and an inverseBindPoses, which differs from the <db:link xlink:href="qml-qtquick3d-skeleton.xml">Skeleton</db:link> approach, as it does not have any hierarchy and just uses existing node's hierarchy.</db:para>
<db:programlisting language="qml">Node {
    id: joint0
    Node {
        id: joint1
        eulerRotation.z: 45
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="skinning/CMakeLists.txt">skinning/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/SimpleSkinning.qml">skinning/SimpleSkinning.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/SimpleSkinningNew.qml">skinning/SimpleSkinningNew.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/main.cpp">skinning/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/main.qml">skinning/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/qml.qrc">skinning/qml.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/skingeometry.cpp">skinning/skingeometry.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/skingeometry.h">skinning/skingeometry.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="skinning/skinning.pro">skinning/skinning.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
