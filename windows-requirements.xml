<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Windows - Requirements</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Requirements of the Windows environment.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This page describes the required libraries and environment for <db:link xlink:href="windows.xml">Qt for Windows</db:link>.</db:para>
<db:section xml:id="libraries">
<db:title>Libraries</db:title>
<db:para>The following third-party libraries may be used when running Qt 5 applications on Windows.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://site.icu-project.org/">ICU</db:link>: Qt 5 can make use of the ICU library for enhanced UNICODE and Globalization support (see <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>, <db:link xlink:href="qcollator.xml#setNumericMode">QCollator::setNumericMode</db:link>()).</db:para>
<db:para>At compile time, the <db:emphasis>include</db:emphasis> and <db:emphasis>lib</db:emphasis> folders of the ICU installation must be appended to the INCLUDE and LIB environment variables. At run-time, the ICU DLLs need to be found by copying the DLLs to the application folder or by adding the <db:emphasis>bin</db:emphasis> folder of the ICU installation to the PATH environment variable.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://chromium.googlesource.com/angle/angle/+/master/README.md">ANGLE</db:link>: This library converts OpenGL ES 2.0 API calls to DirectX 11 or DirectX 9 calls (depending on availability), removing the need to install graphics drivers on the target machines.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Support for Secure Sockets Layer (SSL) communication is provided by the <db:link xlink:href="http://www.openssl.org/">OpenSSL Toolkit</db:link>, which must be obtained separately. See <db:link xlink:href="ssl.xml">Secure Sockets Layer (SSL) Classes</db:link> for instructions on building Qt with SSL support.</db:para>
<db:section xml:id="icu">
<db:title>ICU</db:title>
<db:para>From Qt 5.3 and onwards, configure does not link Qt Core against ICU libraries anymore by default. This reduces the size of a self-contained application package considerably.</db:para>
<db:para>Letting Qt Core utilize the ICU libraries however has following advantages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Behavior matches other platforms more closely.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extended set of text codecs (see <db:link xlink:href="qtextcodec.xml">QTextCodec</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qlocale.xml#toUpper">QLocale::toUpper</db:link>(), <db:link xlink:href="qlocale.xml#toLower">QLocale::toLower</db:link>() always use case conversion rules specific to the locale.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcollator.xml#setNumericMode">QCollator::setNumericMode</db:link>() does work consistently on all Windows versions.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To explicitly enable the use of ICU in Qt Core, pass -icu to configure:</db:para>
<db:programlisting language="cpp">configure -icu
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="graphics-drivers">
<db:title>Graphics Drivers</db:title>
<db:para>For <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> 2 to work, a graphics driver that provides OpenGL 2.1 or higher is required. The default driver from Windows is OpenGL 1.1. Qt includes a version of the <db:link xlink:href="https://chromium.googlesource.com/angle/angle/+/master/README.md">ANGLE</db:link> project which is included from the Windows Qt installers. ANGLE implements the OpenGL ES 2.0 API on top of DirectX 11 or DirectX 9.</db:para>
<db:para>ANGLE requires that the DirectX SDK is installed when building Qt. If MSVC is used, the DirectX SDK will be provided by the Windows SDK. In this case, you will need at least Windows SDK 10. For MinGW builds, you have to install the DirectX SDK provided by Microsoft.</db:para>
<db:para>ANGLE chooses the render backend depending on availability. DirectX 11 is usually preferable. However, some graphics cards may not fully support it. For these cases, the environment variable QT_ANGLE_PLATFORM (introduced in Qt 5.4) can be used to control the render backend. Possible values are d3d11, d3d9 and warp.</db:para>
<db:para>To use a custom version of ANGLE, set the ANGLE_DIR environment variable to point to the ANGLE source tree before building Qt.</db:para>
<db:para>If you installed additional OpenGL drivers from your hardware vendor, then you may want to consider using this version of OpenGL instead of ANGLE. To use OpenGL, pass the command line options -opengl desktop to the configure script.</db:para>
<db:programlisting language="cpp">configure -opengl desktop
</db:programlisting>
<db:para>To use an OpenGL ES 2.0 emulator instead of ANGLE, use the configure options: -opengl es2 -no-angle.</db:para>
<db:programlisting language="cpp">configure -opengl es2 -no-angle
</db:programlisting>
<db:section xml:id="dynamically-loading-graphics-drivers">
<db:title>Dynamically Loading Graphics Drivers</db:title>
<db:para>In addition to the build time configuration, Qt supports choosing and loading the OpenGL implementation at runtime. To use this mode, pass -opengl dynamic to the configure script.</db:para>
<db:programlisting language="cpp">configure -opengl dynamic
</db:programlisting>
<db:note>
<db:para>As of Qt 5.5 this is the configuration used by the official, pre-built binary packages of Qt. It is strongly recommended to use it also in custom builds, especially for Qt binaries that are deployed alongside applications.</db:para>
</db:note>
<db:note>
<db:para>Combining -opengl dynamic with -static is also possible, but be aware that ANGLE will not be statically linked into the applications in this case, it will still be built as a shared library.</db:para>
</db:note>
<db:para>This configuration is the most flexible because no dependencies or assumptions are hardcoded about the OpenGL implementation during build time. It allows robust application deployment. When a given environment fails to provide a proper OpenGL 2.0 implementation, it will fall back automatically to ANGLE. This fallback will be completely transparent to the application, and will allow Qt Quick or other OpenGL code to function by translating to Direct3D. Such a fallback could, for example, take place on a Windows 7 PC with no additional graphics drivers installed. On other machines, where there is sufficient OpenGL support, the normal desktop OpenGL drivers will be used. Additionally, pure software-based OpenGL implementations may be available as additional fallbacks in the future, allowing running Qt Quick applications without a GPU.</db:para>
<db:para>When configured with -opengl dynamic, neither Qt nor the applications built using qmake will link to the opengl32 (standard desktop OpenGL) or QtANGLE libraries. Instead, the appropriate library is chosen at runtime. By default, Qt will determine whether the system's opengl32.dll provides OpenGL 2 functions. If these are present, opengl32.dll is used, otherwise the ANGLE libraries (libEGL.dll and libGLESv2.dll) will be used. In case the ANGLE libraries are missing or initialization fails for some reason, an additional fallback is attempted by trying to load opengl32sw.dll. See below for details.</db:para>
<db:para>The loading mechanism can be configured through the QT_OPENGL environment variable and the following application attributes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt::AA_UseDesktopOpenGL Equivalent to setting QT_OPENGL to desktop.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::AA_UseOpenGLES Equivalent to setting QT_OPENGL to angle.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::AA_UseSoftwareOpenGL Equivalent to setting QT_OPENGL to software.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a certain configuration is requested explicitly, no checks are done at application startup, that is, the system-provided opengl32.dll will not be examined.</db:para>
<db:para>The dynamic loading has a significant impact on applications that contain native OpenGL calls: they may fail to link since qmake no longer automatically adds opengl32.lib or libGLESv2.lib. Instead, applications are expected to use the OpenGL functions via the <db:link xlink:href="qopenglfunctions.xml">QOpenGLFunctions</db:link> class. Thus the direct dependency on the OpenGL library is removed and all calls will be routed during runtime to the implementation chosen by Qt.</db:para>
<db:para>Applications that require a certain OpenGL implementation (for example, desktop OpenGL due to relying on features provided by OpenGL 3.0 or higher) should set the application attributes Qt::AA_UseOpenGLES or Qt::AA_UseDesktopOpenGL before instantiating <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> or <db:link xlink:href="qapplication.xml">QApplication</db:link>. When these attributes are set, no other OpenGL implementations are considered. Additionally, if they wish to, such applications are free to make direct OpenGL function calls by adding opengl32.lib to their .pro project files: <db:emphasis>LIBS += opengl32.lib</db:emphasis> (Visual Studio) or <db:emphasis>LIBS += -lopengl32</db:emphasis> (MinGW). The result is, from the application's perspective, equivalent to the -opengl desktop build configuration of Qt.</db:para>
<db:para>Qt::AA_UseSoftwareOpenGL is special in the sense that it will try to load an OpenGL implementation with a non-standard name. The default name is opengl32sw.dll. This allows shipping a software-only OpenGL implementation, for example a build of <db:link xlink:href="http://www.mesa3d.org/llvmpipe.html">Mesa with llvmpipe</db:link>, under this name. If necessary, the filename can be overridden by setting the QT_OPENGL_DLL environment variable.</db:para>
<db:para>It is possible to provide a JSON-format configuration file specifying which OpenGL implementation to use depending on the graphics card and driver version. The location is given by the environment variable QT_OPENGL_BUGLIST. Relative paths are resolved using QLibraryInfo::SettingsPath or QStandardPaths::ConfigLocation. The file utilizes the format of the driver bug list used in <db:link xlink:href="http://www.chromium.org/Home">The Chromium Projects</db:link>. It consists of a list of entries each of which specifies a set of conditions and a list of feature keywords. Typically, device id and vendor id are used to match a specific graphics card. They can be found in the output of the qtdiag or dxdiag tool.</db:para>
<db:para>The following feature keywords are relevant for choosing the OpenGL implementation:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>disable_desktopgl - Disables OpenGL. This ensures that Qt does not attempt to use regular OpenGL (opengl32.dll), and that it starts with ANGLE right away. This is useful to prevent bad OpenGL drivers from crashing the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_angle - Disables ANGLE. Ensures that Qt does not attempt to use ANGLE (and so Direct3D).</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_d3d11 - Disables the D3D11 rasterizer in ANGLE. Instead, the next D3D rendering option is tried first. The default order is: D3D11, D3D9, WARP, reference implementation.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_d3d9 - Disables the D3D9 rasterizer in ANGLE</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_rotation - Forces the application to run in landscape orientation always. It applies to OpengGL only and has no effect when using ANGLE or Software OpenGL implementations. This is intended for drivers that have issues with rotation. This feature keyword was introduced in Qt 5.6.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A sample file looks like:</db:para>
<db:programlisting language="cpp" role="bad">{
&quot;entries&quot;: [
{
  &quot;id&quot;: 1,
  &quot;description&quot;: &quot;Disable D3D11 on older nVidia drivers&quot;,
  &quot;os&quot;: {
    &quot;type&quot;: &quot;win&quot;
  },
  &quot;vendor_id&quot;: &quot;0x10de&quot;,
  &quot;device_id&quot;: [&quot;0x0DE9&quot;],
  &quot;driver_version&quot;: {
    &quot;op&quot;: &quot;&amp;lt;=&quot;,
    &quot;value&quot;: &quot;8.17.12.6973&quot;
  },
  &quot;features&quot;: [
    &quot;disable_d3d11&quot;
  ]
},
...
</db:programlisting>
<db:para>When QT_OPENGL_BUGLIST is not specified, a built-in list will be used. This typically includes some older, less-capable graphics cards with disable_desktopgl set, in order to prevent Qt from using their unstable desktop OpenGL implementations and instead fall back to ANGLE right away.</db:para>
<db:para>In practice the most common combinations are expected to be the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>disable_desktopgl - In case the system provides OpenGL 2.0 or newer, but the driver is known to be unstable and prone to crash.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_desktopgl, disable_angle - When no accelerated path is desired. This ensures that the only option Qt tries is the sofware rasterizer (opengl32sw.dll). Can be useful in virtual machines and applications that are deployed on a wide range of old systems.</db:para>
</db:listitem>
<db:listitem>
<db:para>disable_d3d11, disable_d3d9 - When the accelerated D3D options are known to be unstable and WARP is desired (when available). Can be useful in virtual machines.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The supported keys for matching a given card or driver are the following. Note that some of these are specific to Qt.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>os.type - Operating system: win, linux, macosx, android</db:para>
</db:listitem>
<db:listitem>
<db:para>os.version - Kernel version</db:para>
</db:listitem>
<db:listitem>
<db:para>os.release - Specifies a list of operating system releases on Windows: xp, vista, 7, 8, 8.1, 10.</db:para>
</db:listitem>
<db:listitem>
<db:para>vendor_id - Vendor from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>device_id - List of PCI device IDs.</db:para>
</db:listitem>
<db:listitem>
<db:para>driver_version - Driver version from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>driver_description - Matches when the value is a substring of the driver description from the adapter identifier</db:para>
</db:listitem>
<db:listitem>
<db:para>gl_vendor - Matches when the value is a substring of the GL_VENDOR string</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="building-from-source">
<db:title>Building from Source</db:title>
<db:para>These tools are not needed to run Qt 5 applications, but they are required for building Qt 5 from source.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://www.activestate.com/Products/activeperl/index.mhtml">ActivePerl</db:link> - Install a recent version of ActivePerl (<db:link xlink:href="http://www.activestate.com/activeperl">download page</db:link>) and add the installation location to your PATH.</db:para>
</db:listitem>
<db:listitem>
<db:para>Python - Install Python from the <db:link xlink:href="http://www.python.org/download/">here</db:link> and add the installation location to your PATH.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Please make sure that the perl executable from ActivePerl is found in the path before the perl executable provided by msysgit, since the latter is outdated.</db:para>
</db:note>
<db:para>ANGLE depends on these extra tools from the <db:link xlink:href="http://gnuwin32.sourceforge.net/packages.html">GnuWin32</db:link> and <db:link xlink:href="http://sourceforge.net/projects/winflexbison/">Win flex-bison</db:link> projects, which are provided for your convenience in the <db:emphasis>gnuwin32/bin</db:emphasis> folder:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://gnuwin32.sourceforge.net/downlinks/gperf.php">GPerf</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://sourceforge.net/projects/winflexbison/files/win_flex_bison-2.5.5.zip/download">Bison, Flex</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:emphasis>gnuwin32/bin</db:emphasis> folder should be added to the PATH variable.</db:para>
<db:note>
<db:para>If you are building qtbase outside of qt5.git, you will need to download <db:emphasis>win_bison</db:emphasis> and <db:emphasis>win_flex</db:emphasis> from the link above and rename them to <db:emphasis>bison</db:emphasis> and <db:emphasis>flex</db:emphasis>.</db:para>
</db:note>
<db:para>For instructions for building the Qt 5 source, read the <db:link xlink:href="windows-building.xml">Qt for Windows - Building from Source</db:link> page.</db:para>
</db:section>
<db:section xml:id="compilers">
<db:title>Compilers</db:title>
<db:section xml:id="visual-studio">
<db:title>Visual Studio</db:title>
<db:para>Qt can be built with Visual Studio 2015 (Update 2), Visual Studio 2017, and Build Tools for Visual Studio 2017 (see also <db:link xlink:href="supported-platforms.xml">Supported Platforms</db:link>).</db:para>
</db:section>
<db:section xml:id="intel-c-compiler-windows-altix">
<db:title>Intel C++ Compiler (Windows, Altix)</db:title>
<db:para>Qt has been tested successfully with:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Windows - Intel(R) C++ Compiler for 32-bit applications, Version 9.1.040.</db:para>
</db:listitem>
<db:listitem>
<db:para>Altix - Intel(R) C++ Itanium(R) Compiler for Itanium(R)-based applications Version 8.1 Build 20050406 Package ID: l_cc_pc_8.1.030</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="gcc-mingw-builds">
<db:title>GCC (MinGW-builds)</db:title>
<db:para>The minimum version of MinGW-builds supported is GCC 4.9.1 (<db:link xlink:href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.1/threads-posix/sjlj/x86_64-4.9.1-release-posix-sjlj-rt_v3-rev3.7z/download">64bit</db:link>, <db:link xlink:href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.9.1/threads-posix/sjlj/i686-4.9.1-release-posix-sjlj-rt_v3-rev3.7z/download">32bit</db:link>), available from its <db:link xlink:href="https://sourceforge.net/projects/mingw-w64/files">download page</db:link>.</db:para>
<db:para>For more information about the MinGW builds, visit the <db:emphasis>Reference Configuration</db:emphasis> section of the <db:link xlink:href="supported-platforms.xml#reference-configurations">supported platforms</db:link> page.</db:para>
</db:section>
<db:section xml:id="clang-clang-cl">
<db:title>Clang(clang-cl)</db:title>
<db:para>Qt has been tested successfully with Clang 3.8(llvm svn rev. 256453 and clang svn rev. 256453). Visual Studio 2015 Update 1 was used to build clang. Mkspec is using the clang-cl tool to build Qt. Clang 3.8 does not support precompiled headers.</db:para>
</db:section>
<db:section xml:id="building-qt-webengine">
<db:title>Building Qt WebEngine</db:title>
<db:para><db:link xlink:href="qtwebengine-index.xml">Qt WebEngine</db:link> has additional build requirements which are listed in the <db:link xlink:href="qtwebengine-platform-notes.xml">Qt WebEngine Platform Notes</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="qdoc-dependencies">
<db:title>QDoc Dependencies</db:title>
<db:para>Since version 5.11, <db:link xlink:href="qdoc-index.xml">QDoc</db:link> uses Clang to parse C++ code. If you wish to build QDoc manually, refer to <db:link xlink:href="qdoc-guide-clang.xml">Installing Clang for QDoc</db:link> for specific build requirements.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="windows-requirements.xml#qdoc-dependencies">QDoc Dependencies</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
