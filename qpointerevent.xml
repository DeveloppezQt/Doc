<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPointerEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A base class for pointer events.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointerEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qinputevent.xml" xlink:role="class">QInputEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsinglepointevent.xml" xlink:role="class">QSinglePointEvent</db:link> and <db:link xlink:href="qtouchevent.xml" xlink:role="class">QTouchEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="addPassiveGrabber">
<db:title>bool QPointerEvent::addPassiveGrabber(const QEventPoint &amp;<db:emphasis>point</db:emphasis>, QObject *<db:emphasis>grabber</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addPassiveGrabber</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>grabber</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addPassiveGrabber(const QEventPoint &amp;point, QObject *grabber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Informs the delivery logic that the given <db:code role="parameter">grabber</db:code> is to receive all future update events and the release event containing the given <db:code role="parameter">point</db:code>, regardless where else those events may be delivered.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:para>Returns <db:code>false</db:code> if <db:code role="parameter">grabber</db:code> was already added, <db:code>true</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="allPointsAccepted">
<db:title>bool QPointerEvent::allPointsAccepted() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>allPointsAccepted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool allPointsAccepted() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if isPointAccepted() is <db:code>true</db:code> for every point in <db:link xlink:href="qpointerevent.xml#points">points</db:link>(); otherwise <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="allPointsGrabbed">
<db:title>bool QPointerEvent::allPointsGrabbed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>allPointsGrabbed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool allPointsGrabbed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if every point in <db:link xlink:href="qpointerevent.xml#points">points</db:link>() has an <db:link xlink:href="qpointerevent.xml#exclusiveGrabber">exclusiveGrabber</db:link>().</db:para>
</db:section>
<db:section xml:id="clearPassiveGrabbers">
<db:title>void QPointerEvent::clearPassiveGrabbers(const QEventPoint &amp;<db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearPassiveGrabbers</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearPassiveGrabbers(const QEventPoint &amp;point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all passive grabbers from the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#addPassiveGrabber">QPointerEvent::addPassiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exclusiveGrabber">
<db:title>QObject *QPointerEvent::exclusiveGrabber(const QEventPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QObject *</db:type>
<db:methodname>exclusiveGrabber</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QObject * exclusiveGrabber(const QEventPoint &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the object which has been set to receive all future update events and the release event containing the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#setExclusiveGrabber">setExclusiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="passiveGrabbers">
<db:title>QList&lt;QPointer&lt;QObject&gt;&gt; QPointerEvent::passiveGrabbers(const QEventPoint &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QPointer&lt;QObject&gt;&gt;</db:type>
<db:methodname>passiveGrabbers</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QPointer&lt;QObject&gt;&gt; passiveGrabbers(const QEventPoint &amp;point) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of objects that have been requested to receive all future update events and the release event containing the given <db:code role="parameter">point</db:code>.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#addPassiveGrabber">QPointerEvent::addPassiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point">
<db:title>QEventPoint &amp;QPointerEvent::point(qsizetype <db:emphasis>i</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QEventPoint &amp;</db:type>
<db:methodname>point</db:methodname>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint &amp; point(qsizetype i)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qeventpoint.xml">QEventPoint</db:link> reference for the point at index <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="pointById">
<db:title>QEventPoint *QPointerEvent::pointById(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QEventPoint *</db:type>
<db:methodname>pointById</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QEventPoint * pointById(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the point whose <db:link xlink:href="qeventpoint.xml#id-prop">id</db:link> matches the given <db:code role="parameter">id</db:code>, or <db:code>nullptr</db:code> if no such point is found.</db:para>
</db:section>
<db:section xml:id="pointCount">
<db:title>qsizetype QPointerEvent::pointCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qsizetype</db:type>
<db:methodname>pointCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qsizetype pointCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of points in this pointer event.</db:para>
</db:section>
<db:section xml:id="pointerType">
<db:title>QPointingDevice::PointerType QPointerEvent::pointerType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointingDevice::PointerType</db:type>
<db:methodname>pointerType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDevice::PointerType pointerType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of point that generated the event.</db:para>
</db:section>
<db:section xml:id="pointingDevice">
<db:title>const QPointingDevice *QPointerEvent::pointingDevice() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QPointingDevice *</db:type>
<db:methodname>pointingDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QPointingDevice * pointingDevice() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source device from which this event originates.</db:para>
<db:para>This is the same as <db:link xlink:href="qinputevent.xml#device">QInputEvent::device</db:link>() but typecast for convenience.</db:para>
</db:section>
<db:section xml:id="points">
<db:title>const QList&lt;QEventPoint&gt; &amp;QPointerEvent::points() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QList&lt;QEventPoint&gt; &amp;</db:type>
<db:methodname>points</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QList&lt;QEventPoint&gt; &amp; points() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of points in this pointer event.</db:para>
</db:section>
<db:section xml:id="removePassiveGrabber">
<db:title>bool QPointerEvent::removePassiveGrabber(const QEventPoint &amp;<db:emphasis>point</db:emphasis>, QObject *<db:emphasis>grabber</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removePassiveGrabber</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>grabber</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removePassiveGrabber(const QEventPoint &amp;point, QObject *grabber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the passive <db:code role="parameter">grabber</db:code> from the given <db:code role="parameter">point</db:code> if it was previously added. Returns <db:code>true</db:code> if it had been a passive grabber before, <db:code>false</db:code> if not.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#addPassiveGrabber">QPointerEvent::addPassiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAccepted">
<db:title>[override virtual] void QPointerEvent::setAccepted(bool <db:emphasis>accepted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setAccepted</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>accepted</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAccepted(bool accepted) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements an access function for property: <db:link xlink:href="qevent.xml#accepted-prop" role="property">QEvent::accepted</db:link>.</db:para>
</db:section>
<db:section xml:id="setExclusiveGrabber">
<db:title>void QPointerEvent::setExclusiveGrabber(const QEventPoint &amp;<db:emphasis>point</db:emphasis>, QObject *<db:emphasis>exclusiveGrabber</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExclusiveGrabber</db:methodname>
<db:methodparam>
<db:type>const QEventPoint &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>exclusiveGrabber</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExclusiveGrabber(const QEventPoint &amp;point, QObject *exclusiveGrabber)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Informs the delivery logic that the given <db:code role="parameter">exclusiveGrabber</db:code> is to receive all future update events and the release event containing the given <db:code role="parameter">point</db:code>, and that delivery to other items can be skipped.</db:para>
<db:para>It's mainly for use in Qt Quick at this time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#exclusiveGrabber">exclusiveGrabber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
