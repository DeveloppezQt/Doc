<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Reflection Probes Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of reflection probes in Qt Quick 3D.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls

Item {
    width: settingsDrawer.width
    height: parent.height

    property int timeSlicingIndex: timeSlicingComboBox.currentIndex
    property int refreshModeIndex: refreshModeComboBox.currentIndex
    property int qualityIndex: qualityComboBox.currentIndex
    property vector3d probeSize: Qt.vector3d(probeSizeXSlider.value, probeSizeYSlider.value, probeSizeZSlider.value)
    property vector3d probePosition: Qt.vector3d(probePositionXSlider.value, probePositionYSlider.value, probePositionZSlider.value)
    property bool probeParallaxCorrection: parallaxCheckBox.checked
    property real sphereRoughness: materialRoughnessSlider.value
    property bool sphereReceivesReflection: sphereReceivesReflectionsCheckBox.checked
    property bool floorReceivesReflection: floorReceivesReflectionsCheckBox.checked
    property bool spriteParticlesEnabled: particleSystemSpriteCheckBox.checked
    property bool modelParticlesEnabled: particleSystemModelCheckBox.checked

    property real iconSize: 50

    Button {
        x: settingsDrawer.visible ? (settingsDrawer.x + settingsDrawer.width) : 0
        anchors.top: parent.top
        width: iconSize
        height: width
        icon.width: width * 0.3
        icon.height: height * 0.3
        icon.source: &quot;res/icon_settings.png&quot;
        icon.color: &quot;transparent&quot;
        background: Rectangle {
            color: &quot;transparent&quot;
        }
        onClicked: {
            settingsDrawer.visible = !settingsDrawer.visible;
        }
    }

    Drawer {
        id: settingsDrawer
        edge: Qt.LeftEdge
        interactive: false
        modal: false

        enter: Transition {
            NumberAnimation {
                property: &quot;position&quot;
                to: 1.0
                duration: 400
                easing.type: Easing.InOutQuad
            }
        }

        exit: Transition {
            NumberAnimation {
                property: &quot;position&quot;
                to: 0.0
                duration: 400
                easing.type: Easing.InOutQuad
            }
        }

        ScrollView {
            anchors.fill: parent
            ScrollBar.vertical.policy: ScrollBar.AlwaysOn
            padding: 10
            background: Rectangle {
                color: &quot;white&quot;
            }

            Flickable {
                clip: true
                contentWidth: settingsArea.width
                contentHeight: settingsArea.height

                Column {
                    id: settingsArea
                    spacing: 5

                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        text: &quot;Reflection Map&quot;
                        font.pixelSize: 14
                    }

                    Item { width: 1; height: 10 }

                    Text {
                        text: &quot;Time Slicing&quot;
                    }

                    ComboBox {
                        id: timeSlicingComboBox
                        width: 200
                        model: [ &quot;None&quot;, &quot;All Faces At Once&quot;, &quot;Individual Faces&quot; ]
                    }

                    Text {
                        text: &quot;Refresh Mode&quot;
                    }

                    ComboBox {
                        id: refreshModeComboBox
                        width: 200
                        model: [ &quot;Every Frame&quot;, &quot;First Frame&quot; ]
                    }

                    Text {
                        text: &quot;Reflection Map Quality&quot;
                    }

                    ComboBox {
                        id: qualityComboBox
                        width: 200
                        model: [ &quot;Very Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;, &quot;Very High&quot; ]
                    }

                    Item { width: 1; height: 10 }

                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        text: &quot;Floor Reflection Probe&quot;
                        font.pixelSize: 14
                    }

                    Item { width: 1; height: 10 }

                    CheckBox {
                        id: parallaxCheckBox
                        checked: true
                        text: qsTr(&quot;Parallax Correction&quot;)
                    }

                    Text {
                        text: &quot;Box Size (&quot; + probeSizeXSlider.value + &quot;, &quot; + probeSizeYSlider.value + &quot;, &quot; + probeSizeZSlider.value + &quot;)&quot;
                    }

                    Slider {
                        id: probeSizeXSlider
                        from: 0
                        value: 1000
                        to: 1000
                        stepSize: 1
                    }

                    Slider {
                        id: probeSizeYSlider
                        from: 0
                        value: 950
                        to: 1000
                        stepSize: 1
                    }

                    Slider {
                        id: probeSizeZSlider
                        from: 0
                        value: 650
                        to: 1000
                        stepSize: 1
                    }

                    Text {
                        text: &quot;Position (&quot; + probePositionXSlider.value + &quot;, &quot; + probePositionYSlider.value + &quot;, &quot; + probePositionZSlider.value + &quot;)&quot;
                    }

                    Slider {
                        id: probePositionXSlider
                        from: 0
                        value: 0
                        to: 500
                        stepSize: 1
                    }

                    Slider {
                        id: probePositionYSlider
                        from: 0
                        value: 0
                        to: 500
                        stepSize: 1
                    }

                    Slider {
                        id: probePositionZSlider
                        from: 0
                        value: 0
                        to: 500
                        stepSize: 1
                    }

                    Item { width: 1; height: 10 }

                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        text: &quot;Particles&quot;
                        font.pixelSize: 14
                    }

                    CheckBox {
                        id: particleSystemSpriteCheckBox
                        checked: false
                        text: qsTr(&quot;Sprite Particles&quot;)
                    }

                    CheckBox {
                        id: particleSystemModelCheckBox
                        checked: false
                        text: qsTr(&quot;Model Particles&quot;)
                    }

                    Item { width: 1; height: 10 }

                    Text {
                        anchors.horizontalCenter: parent.horizontalCenter
                        text: &quot;Model&quot;
                        font.pixelSize: 14
                    }

                    Item { width: 1; height: 10 }

                    Text {
                        text: &quot;Sphere Roughness : &quot; + materialRoughnessSlider.value.toFixed(2);
                    }

                    Slider {
                        id: materialRoughnessSlider
                        from: 0
                        to: 1.0
                        value: 0.1
                    }

                    CheckBox {
                        id: sphereReceivesReflectionsCheckBox
                        checked: true
                        text: qsTr(&quot;Sphere receives reflections&quot;)
                    }

                    CheckBox {
                        id: floorReceivesReflectionsCheckBox
                        checked: true
                        text: qsTr(&quot;Floor receives reflections&quot;)
                    }
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
