<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Volumetric rendering Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Rendering volumetric objects.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#ifndef VOLUMETRICMODIFIER_H
#define VOLUMETRICMODIFIER_H

#include &amp;lt;QtDataVisualization/q3dscatter.h&amp;gt;
#include &amp;lt;QtDataVisualization/qcustom3dvolume.h&amp;gt;
#include &amp;lt;QtCore/QTimer&amp;gt;
#include &amp;lt;QtGui/QRgb&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtWidgets/QSlider&amp;gt;
#include &amp;lt;QtWidgets/QRadioButton&amp;gt;

using namespace QtDataVisualization;

class VolumetricModifier : public QObject
{
    Q_OBJECT
public:
    explicit VolumetricModifier(Q3DScatter *scatter);
    ~VolumetricModifier();

    void setFpsLabel(QLabel *fpsLabel);
    void setMediumDetailRB(QRadioButton *button);
    void setHighDetailRB(QRadioButton *button);
    void setSliceLabels(QLabel *xLabel, QLabel *yLabel, QLabel *zLabel);
    void setAlphaMultiplierLabel(QLabel *label);

public Q_SLOTS:
    void sliceX(int enabled);
    void sliceY(int enabled);
    void sliceZ(int enabled);
    void adjustSliceX(int value);
    void adjustSliceY(int value);
    void adjustSliceZ(int value);
    void handleFpsChange(qreal fps);
    void handleTimeout();
    void toggleLowDetail(bool enabled);
    void toggleMediumDetail(bool enabled);
    void toggleHighDetail(bool enabled);
    void setFpsMeasurement(bool enabled);
    void setSliceSliders(QSlider *sliderX, QSlider *sliderY, QSlider *sliderZ);
    void changeColorTable(int enabled);
    void setPreserveOpacity(bool enabled);
    void setTransparentGround(bool enabled);
    void setUseHighDefShader(bool enabled);
    void adjustAlphaMultiplier(int value);
    void toggleAreaAll(bool enabled);
    void toggleAreaMine(bool enabled);
    void toggleAreaMountain(bool enabled);
    void setDrawSliceFrames(int enabled);

private:

    void initHeightMap(QString fileName, QVector&amp;lt;uchar&amp;gt; &amp;amp;layerData);
    void initMineShaftArray();
    int createVolume(int textureSize, int startIndex, int count,
                      QVector&amp;lt;uchar&amp;gt; *textureData);
    int excavateMineShaft(int textureSize, int startIndex, int count,
                          QVector&amp;lt;uchar&amp;gt; *textureData);
    void excavateMineBlock(int textureSize, int dataIndex, int size, QVector&amp;lt;uchar&amp;gt; *textureData);
    void handleSlicingChanges();

    Q3DScatter *m_graph;
    QCustom3DVolume *m_volumeItem;
    int m_sliceIndexX;
    int m_sliceIndexY;
    int m_sliceIndexZ;
    bool m_slicingX;
    bool m_slicingY;
    bool m_slicingZ;
    QLabel *m_fpsLabel;
    QRadioButton *m_mediumDetailRB;
    QRadioButton *m_highDetailRB;
    QVector&amp;lt;uchar&amp;gt; *m_lowDetailData;
    QVector&amp;lt;uchar&amp;gt; *m_mediumDetailData;
    QVector&amp;lt;uchar&amp;gt; *m_highDetailData;
    QTimer m_timer;
    int m_mediumDetailIndex;
    int m_highDetailIndex;
    int m_mediumDetailShaftIndex;
    int m_highDetailShaftIndex;
    QSlider *m_sliceSliderX;
    QSlider *m_sliceSliderY;
    QSlider *m_sliceSliderZ;
    QVector&amp;lt;QRgb&amp;gt; m_colorTable1;
    QVector&amp;lt;QRgb&amp;gt; m_colorTable2;
    bool m_usingPrimaryTable;
    QLabel *m_sliceLabelX;
    QLabel *m_sliceLabelY;
    QLabel *m_sliceLabelZ;
    QLabel *m_alphaMultiplierLabel;
    QVector&amp;lt;uchar&amp;gt; m_magmaLayer;
    QVector&amp;lt;uchar&amp;gt; m_waterLayer;
    QVector&amp;lt;uchar&amp;gt; m_groundLayer;
    QVector&amp;lt;QPair&amp;lt;QVector3D, QVector3D&amp;gt; &amp;gt; m_mineShaftArray;
};

#endif

</db:programlisting>
</db:article>
