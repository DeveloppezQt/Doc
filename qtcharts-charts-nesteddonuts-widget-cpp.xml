<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Nested Donuts Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create a nested donuts chart using the <db:link xlink:href="qpieseries.xml">QPieSeries</db:link> API.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &quot;widget.h&quot;
#include &amp;lt;QtCharts/QChartView&amp;gt;
#include &amp;lt;QtCharts/QChart&amp;gt;
#include &amp;lt;QtCharts/QLegend&amp;gt;
#include &amp;lt;QtCharts/QPieSeries&amp;gt;
#include &amp;lt;QtCharts/QPieSlice&amp;gt;
#include &amp;lt;QtCore/QRandomGenerator&amp;gt;
#include &amp;lt;QtWidgets/QGridLayout&amp;gt;
#include &amp;lt;QtCore/QTimer&amp;gt;

QT_CHARTS_USE_NAMESPACE

Widget::Widget(QWidget *parent)
    : QWidget(parent)
{
    setMinimumSize(800, 600);

    QChartView *chartView = new QChartView;
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
    QChart *chart = chartView-&amp;gt;chart();
    chart-&amp;gt;legend()-&amp;gt;setVisible(false);
    chart-&amp;gt;setTitle(&quot;Nested donuts demo&quot;);
    chart-&amp;gt;setAnimationOptions(QChart::AllAnimations);

    qreal minSize = 0.1;
    qreal maxSize = 0.9;
    int donutCount = 5;

    for (int i = 0; i &amp;lt; donutCount; i++) {
        QPieSeries *donut = new QPieSeries;
        int sliceCount =  3 + QRandomGenerator::global()-&amp;gt;bounded(3);
        for (int j = 0; j &amp;lt; sliceCount; j++) {
            qreal value = 100 + QRandomGenerator::global()-&amp;gt;bounded(100);
            QPieSlice *slice = new QPieSlice(QString(&quot;%1&quot;).arg(value), value);
            slice-&amp;gt;setLabelVisible(true);
            slice-&amp;gt;setLabelColor(Qt::white);
            slice-&amp;gt;setLabelPosition(QPieSlice::LabelInsideTangential);
            connect(slice, &amp;amp;QPieSlice::hovered, this, &amp;amp;Widget::explodeSlice);
            donut-&amp;gt;append(slice);
            donut-&amp;gt;setHoleSize(minSize + i * (maxSize - minSize) / donutCount);
            donut-&amp;gt;setPieSize(minSize + (i + 1) * (maxSize - minSize) / donutCount);
        }
        m_donuts.append(donut);
        chartView-&amp;gt;chart()-&amp;gt;addSeries(donut);
    }

    // create main layout
    QGridLayout *mainLayout = new QGridLayout;
    mainLayout-&amp;gt;addWidget(chartView, 1, 1);
    setLayout(mainLayout);

    updateTimer = new QTimer(this);
    connect(updateTimer, &amp;amp;QTimer::timeout, this, &amp;amp;Widget::updateRotation);
    updateTimer-&amp;gt;start(1250);
}

Widget::~Widget()
{

}

void Widget::updateRotation()
{
    for (int i = 0; i &amp;lt; m_donuts.count(); i++) {
        QPieSeries *donut = m_donuts.at(i);
        qreal phaseShift =  -50 + QRandomGenerator::global()-&amp;gt;bounded(100);
        donut-&amp;gt;setPieStartAngle(donut-&amp;gt;pieStartAngle() + phaseShift);
        donut-&amp;gt;setPieEndAngle(donut-&amp;gt;pieEndAngle() + phaseShift);
    }
}

void Widget::explodeSlice(bool exploded)
{
    QPieSlice *slice = qobject_cast&amp;lt;QPieSlice *&amp;gt;(sender());
    if (exploded) {
        updateTimer-&amp;gt;stop();
        qreal sliceStartAngle = slice-&amp;gt;startAngle();
        qreal sliceEndAngle = slice-&amp;gt;startAngle() + slice-&amp;gt;angleSpan();

        QPieSeries *donut = slice-&amp;gt;series();
        qreal seriesIndex = m_donuts.indexOf(donut);
        for (int i = seriesIndex + 1; i &amp;lt; m_donuts.count(); i++) {
            m_donuts.at(i)-&amp;gt;setPieStartAngle(sliceEndAngle);
            m_donuts.at(i)-&amp;gt;setPieEndAngle(360 + sliceStartAngle);
        }
    } else {
        for (int i = 0; i &amp;lt; m_donuts.count(); i++) {
            m_donuts.at(i)-&amp;gt;setPieStartAngle(0);
            m_donuts.at(i)-&amp;gt;setPieEndAngle(360);
        }
        updateTimer-&amp;gt;start();
    }
    slice-&amp;gt;setExploded(exploded);
}

</db:programlisting>
</db:article>
