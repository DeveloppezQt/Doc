<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Video Overview</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Video playback.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="video-features">
<db:title>Video Features</db:title>
<db:para>Qt Multimedia offers both high and low level C++ classes for playing and manipulating video data, and QML types for playback and recording. Some of the classes presented here overlap with what is presented in the <db:link xlink:href="cameraoverview.xml">Camera Overview</db:link> and <db:link xlink:href="audiooverview.xml">Audio Overview</db:link>.</db:para>
</db:section>
<db:section xml:id="video-implementation-details">
<db:title>Video Implementation Details</db:title>
<db:anchor xml:id="multimedia-playing-video"/>
<db:section xml:id="playing-video-in-c">
<db:title>Playing Video in C++</db:title>
<db:para>You can use the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class to decode a video file, and display it using <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link>, <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link>, or a custom class.</db:para>
<db:para>Here's an example of using <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link>:</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
player-&amp;gt;setSource(QUrl(&quot;http://example.com/myclip1.mp4&quot;));

videoWidget = new QVideoWidget;
player-&amp;gt;setVideoOutput(videoWidget);

videoWidget-&amp;gt;show();
player-&amp;gt;play();
</db:programlisting>
<db:para>And an example with <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link>:</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer(this);

QGraphicsVideoItem *item = new QGraphicsVideoItem;
player-&amp;gt;setVideoOutput(item);
graphicsView-&amp;gt;scene()-&amp;gt;addItem(item);
graphicsView-&amp;gt;show();

player-&amp;gt;setSource(QUrl(&quot;http://example.com/myclip4.ogv&quot;));
player-&amp;gt;play();
</db:programlisting>
</db:section>
<db:section xml:id="playing-video-in-qml">
<db:title>Playing Video in QML</db:title>
<db:para>You can use <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> to render content that is provided by either a <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> or a <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link>. The <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> is a visual component that can be embedded into a QQuickScene or <db:link xlink:href="qml-qtquick-window.xml">Window</db:link>, while all media decoding and playback control is handled by the <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> or <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link>. A <db:link xlink:href="qml-qtmultimedia-video.xml">Video</db:link> element has been provided for convenience. It combines <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link>, <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> and <db:link xlink:href="qml-qtmultimedia-audiooutput.xml">AudioOutput</db:link> elements in one item.</db:para>
</db:section>
<db:section xml:id="working-with-low-level-video-frames">
<db:title>Working with Low Level Video Frames</db:title>
<db:para>Qt Multimedia offers a number of low level classes to make handling video frames a bit easier. These classes are primarily used when writing code that processes video or camera frames (for example, detecting barcodes, or applying a fancy vignette effect), or needs to display video in a special way that is otherwise unsupported.</db:para>
<db:para>The <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link> class encapsulates a video frame and allows the contents to be mapped into system memory for manipulation or processing. Using your own <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> allows you to receive these frames from <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> and <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
</db:section>
<db:section xml:id="recording-video">
<db:title>Recording Video</db:title>
<db:para>The central class for any type of capturing or recording of audio and video is <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> (or the <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link> QML type). You can connect a <db:link xlink:href="qcamera.xml">QCamera</db:link> (Camera in QML) and a <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> (<db:link xlink:href="qml-qtmultimedia-mediarecorder.xml">MediaRecorder</db:link>)to the session and then ask the media recorder to start recording.</db:para>
</db:section>
</db:section>
<db:section xml:id="supported-media-formats">
<db:title>Supported Media Formats</db:title>
<db:para>What media formats are supported ultimately depends on the configuration of the target system.</db:para>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:para>By default what is available on a MS Windows target depends on the version of <db:link xlink:href="https://en.wikipedia.org/wiki/Windows_Media_Player">Windows Media Player</db:link> that was packaged with the OS. See the <db:link xlink:href="https://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9">Windows Media Player documentation</db:link> for official information.</db:para>
<db:para>Independent of Windows Media Player, there are of course numerous codec packs that could be installed. See the <db:link xlink:href="https://www.codecguide.com/guides.htm">codec guide</db:link> site for some examples.</db:para>
</db:section>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:para>See <db:link xlink:href="https://developer.android.com/guide/topics/media/media-formats">Android supported media formats</db:link> for this information.</db:para>
</db:section>
<db:section xml:id="linux">
<db:title>Linux</db:title>
<db:para>On Linux this is about installing the correct <db:link xlink:href="https://gstreamer.freedesktop.org/">GStreamer</db:link> plugins.</db:para>
<db:section xml:id="minimum-required-gstreamer-plugins">
<db:title>Minimum Required GStreamer Plugins</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>gstreamer1.0-plugins-base</db:para>
</db:listitem>
<db:listitem>
<db:para>gstreamer1.0-plugins-good</db:para>
</db:listitem>
<db:listitem>
<db:para>gstreamer1.0-plugins-pulseaudio</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For a Linux desktop target, it is strongly recommended to have <db:code>gstreamer1.0-libav</db:code> for good codec coverage and <db:code>gstreamer1.0-vaapi</db:code> to get hardware acceleration.</db:para>
<db:para>On embedded Linux, the required set of plugins could be somewhat different.</db:para>
</db:section>
</db:section>
<db:section xml:id="determining-supported-media-formats-at-runtime">
<db:title>Determining Supported Media Formats at Runtime</db:title>
<db:para>You can determine what formats are available on a target system at runtime using the static <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> API.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use <db:link xlink:href="qmediaformat.xml#isSupported">QMediaFormat::isSupported</db:link>() on a <db:link xlink:href="qmediaformat.xml#ConversionMode-enum">QMediaFormat::ConversionMode</db:link> to query a specific format.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:link xlink:href="qmediaformat.xml#supportedFileFormats">QMediaFormat::supportedFileFormats</db:link>() on a default constructed <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> to get all the supported file formats.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>There are both C++ and QML examples available.</db:para>
<db:section xml:id="c-examples">
<db:title>C++ Examples</db:title>
<db:variablelist role="video_examples">
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-camera-example.xml" xlink:role="page">Camera Example</db:link></db:term>
<db:listitem>
<db:para>Shows how to capture a still image or record video. or video.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-player-example.xml" xlink:role="page">Media Player Example</db:link></db:term>
<db:listitem>
<db:para>Playing audio and video.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-examples">
<db:title>QML Examples</db:title>
<db:variablelist role="video_examples_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qtdoc-demos-mediaplayer-example.xml" xlink:role="page">Media Player Example</db:link></db:term>
<db:listitem>
<db:para>Playing audio and video using Qt Quick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml" xlink:role="page">QML Media Player Example</db:link></db:term>
<db:listitem>
<db:para>Playing audio and video using Qt Quick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtmultimedia-video-recorder-example.xml" xlink:role="page">QML Video Recorder</db:link></db:term>
<db:listitem>
<db:para>Recording audio and video using Qt Quick.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
<db:section xml:id="reference-documentation">
<db:title>Reference Documentation</db:title>
<db:section xml:id="c-classes">
<db:title>C++ Classes</db:title>
<db:variablelist role="multimedia_video">
<db:varlistentry>
<db:term><db:link xlink:href="qmediacapturesession.xml" xlink:role="class">QMediaCaptureSession</db:link></db:term>
<db:listitem>
<db:para>The QMediaCaptureSession class allows capturing of audio and video content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmediaplayer.xml" xlink:role="class">QMediaPlayer</db:link></db:term>
<db:listitem>
<db:para>The QMediaPlayer class allows the playing of a media files.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmediarecorder.xml" xlink:role="class">QMediaRecorder</db:link></db:term>
<db:listitem>
<db:para>The QMediaRecorder class is used for encoding and recording a capture session.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qscreencapture.xml" xlink:role="class">QScreenCapture</db:link></db:term>
<db:listitem>
<db:para>The QScreenCapture class is used for capturing a screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvideoframe.xml" xlink:role="class">QVideoFrame</db:link></db:term>
<db:listitem>
<db:para>The QVideoFrame class represents a frame of video data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvideoframeformat.xml" xlink:role="class">QVideoFrameFormat</db:link></db:term>
<db:listitem>
<db:para>The QVideoFrameFormat class specifies the stream format of a video presentation surface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvideosink.xml" xlink:role="class">QVideoSink</db:link></db:term>
<db:listitem>
<db:para>The QVideoSink class represents a generic sink for video data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qvideowidget.xml" xlink:role="class">QVideoWidget</db:link></db:term>
<db:listitem>
<db:para>The QVideoWidget class provides a widget which presents video produced by a media object.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qml-types">
<db:title>QML Types</db:title>
<db:variablelist role="multimedia_video_qml">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-capturesession.xml" xlink:role="">CaptureSession</db:link></db:term>
<db:listitem>
<db:para>Allows capturing of audio and video content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-mediaplayer.xml" xlink:role="">MediaPlayer</db:link></db:term>
<db:listitem>
<db:para>Adds media playback to a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-mediarecorder.xml" xlink:role="">MediaRecorder</db:link></db:term>
<db:listitem>
<db:para>For encoding and recording media generated in a CaptureSession.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-screencapture.xml" xlink:role="">ScreenCapture</db:link></db:term>
<db:listitem>
<db:para>The ScreenCapture type is used for capturing a screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-video.xml" xlink:role="">Video</db:link></db:term>
<db:listitem>
<db:para>A convenience type for showing a specified video.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtmultimedia-videooutput.xml" xlink:role="">VideoOutput</db:link></db:term>
<db:listitem>
<db:para>Render video or camera viewfinder.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-cameradevice.xml" xlink:role="">cameraDevice</db:link></db:term>
<db:listitem>
<db:para>Describes a camera device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-cameraformat.xml" xlink:role="">cameraFormat</db:link></db:term>
<db:listitem>
<db:para>Describes a video format supported by a camera device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-mediametadata.xml" xlink:role="">mediaMetaData</db:link></db:term>
<db:listitem>
<db:para>Provides meta-data for media files.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
