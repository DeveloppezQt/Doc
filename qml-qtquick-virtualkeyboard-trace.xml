<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Trace QML Type</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Trace is a data model for touch input data.</db:para>
<db:para>This type was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VirtualKeyboard 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtQuick.VirtualKeyboard 2.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Trace is part of <db:simplelist><db:member>qtvirtualkeyboard-qml</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Trace provides the data model for coordinate data and other optional data associated with a single stroke.</db:para>
<db:para>A typical use case for the trace object is as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> or other input device initiates the trace event by calling <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceBegin-method">InputEngine.traceBegin</db:link>() method.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the current input method accepts the event it creates a trace object and configures the required data channels (if any).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> collects the data for the trace object.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> calls the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml#traceEnd-method">InputEngine.traceEnd</db:link>() method to finish the trace and passing the trace object back to input method.</db:para>
</db:listitem>
<db:listitem>
<db:para>The input method processes the data and discards the object when it is no longer needed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The coordinate data is retrieved using the <db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#points-method">points</db:link>() function.</db:para>
<db:para>In addition to coordinate based data, it is possible to attach an arbitrary data channel for each data point.</db:para>
<db:para>The data channels must be defined before the points are added. The data channels supported by the <db:link xlink:href="qml-qtquick-virtualkeyboard-traceinputarea.xml">TraceInputArea</db:link> are listed below:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>&quot;t&quot;</db:code> Collects time for each data point. The time is the number of milliseconds since 1970/01/01:</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example, to configure the object to collect the times for each point:</db:para>
<db:programlisting language="cpp">Trace *trace = new Trace(this);
trace-&gt;setChannels(QStringList() &lt;&lt; &quot;t&quot;);
</db:programlisting>
<db:para>The collected data can be accessed using the <db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#channelData-method">channelData</db:link>() function:</db:para>
<db:programlisting language="cpp">QVariantList timeData = trace-&gt;channelData(&quot;t&quot;);
</db:programlisting>
<db:para>Trace objects are owned by their creator, which is the input method in normal case. This means the objects are constructed in the <db:link xlink:href="">InputMethod.traceBegin()</db:link> (QML) method.</db:para>
<db:para>By definition, the trace object can be destroyed at earliest in the <db:link xlink:href="">InputMethod.traceEnd()</db:link> (QML) method.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="channels-prop">
<db:title>channels : list&lt;strings&gt;</db:title>
<db:para>List of additional data channels in the Trace. This property must be initialized before the data is added.</db:para>
</db:section>
<db:section xml:id="isCanceled-prop">
<db:title>isCanceled : bool</db:title>
<db:para>This property defines whether the Trace is canceled. The input data should not be processed from the Traces whose isCanceled property set to true.</db:para>
</db:section>
<db:section xml:id="isFinal-prop">
<db:title>isFinal : bool</db:title>
<db:para>This property defines whether the Trace can accept more data. If the value is true, no more data is accepted.</db:para>
</db:section>
<db:section xml:id="length-prop">
<db:title>[read-only] length : int</db:title>
<db:para>The number of points in the Trace.</db:para>
</db:section>
<db:section xml:id="traceId-prop">
<db:title>traceId : int</db:title>
<db:para>Unique id of this Trace.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="addPoint-method">
<db:title>int addPoint(point <db:emphasis>point</db:emphasis>)</db:title>
<db:para>Adds a <db:code role="parameter">point</db:code> to the Trace.</db:para>
<db:para>The method returns index of the point added, or -1 if the points cannot be added (i.e. the <db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#isFinal-prop">isFinal</db:link> is true).</db:para>
<db:note>
<db:para>The returned index is required to associate additional data with the point using the <db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#setChannelData-method">setChannelData</db:link>() function.</db:para>
</db:note>
</db:section>
<db:section xml:id="channelData-method">
<db:title>var channelData(string <db:emphasis>channel</db:emphasis>, int <db:emphasis>pos</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Returns data from the specified <db:code role="parameter">channel</db:code>. If no other parameters are given, the function returns all the data.</db:para>
<db:para>If the <db:code role="parameter">pos</db:code> parameter is given, the function returns data starting at the position. The <db:code role="parameter">count</db:code> parameter limits how many items are returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#setChannelData-method">setChannelData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="points-method">
<db:title>var points(int <db:emphasis>pos</db:emphasis>, int <db:emphasis>count</db:emphasis>)</db:title>
<db:para>Returns list of points. If no parameters are given, the function returns all the points.</db:para>
<db:para>If the <db:code role="parameter">pos</db:code> parameter is given, the function returns points starting at the position. The <db:code role="parameter">count</db:code> parameter limits how many points are returned.</db:para>
<db:para>The returned list contains <db:code>point</db:code> types.</db:para>
</db:section>
<db:section xml:id="setChannelData-method">
<db:title>void setChannelData(int <db:emphasis>index</db:emphasis>, string <db:emphasis>channel</db:emphasis>, var <db:emphasis>data</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">data</db:code> for the point at <db:code role="parameter">index</db:code> in the given data <db:code role="parameter">channel</db:code>.</db:para>
<db:para>If this method is not called for each data point, the channel data will be padded with empty values. However, the data cannot be added at arbitrary index, i.e., it must be added in synchronously with the point data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-virtualkeyboard-trace.xml#channelData-method">channelData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
