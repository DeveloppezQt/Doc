<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTreeWidgetItemIterator Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link> class provides a way to iterate over the items in a <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> instance.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTreeWidgetItemIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTreeWidgetItemIterator is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The iterator will walk the items in a pre-order traversal order, thus visiting the parent node <db:emphasis>before</db:emphasis> it continues to the child nodes.</db:para>
<db:para>For example, the following code examples each item in a tree, checking the text in the first column against a user-specified search string:</db:para>
<db:programlisting language="cpp">    QTreeWidgetItemIterator it(treeWidget);
    while (*it) {
        if ((*it)-&amp;gt;text(0) == itemText)
            (*it)-&amp;gt;setSelected(true);
        ++it;
    }
</db:programlisting>
<db:para>It is also possible to filter out certain types of node by passing certain <db:link xlink:href="qtreewidgetitemiterator.xml#IteratorFlag-enum">flags</db:link> to the constructor of <db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qtreewidgetitem.xml">QTreeWidgetItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="IteratorFlag-enum">
<db:title>enum QTreeWidgetItemIterator::IteratorFlag</db:title>
<db:bridgehead renderas="sect2">flags QTreeWidgetItemIterator::IteratorFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>IteratorFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>All</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Hidden</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotHidden</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Selected</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unselected</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Selectable</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotSelectable</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DragEnabled</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DragDisabled</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DropEnabled</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DropDisabled</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HasChildren</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoChildren</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Checked</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotChecked</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Enabled</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Disabled</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Editable</db:enumidentifier>
<db:enumvalue>0x00010000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotEditable</db:enumidentifier>
<db:enumvalue>0x00020000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UserFlag</db:enumidentifier>
<db:enumvalue>0x01000000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QTreeWidgetItemIterator::IteratorFlags</db:typedefname>
</db:typedefsynopsis>
<db:para>These flags can be passed to a <db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link> constructor (OR-ed together if more than one is used), so that the iterator will only iterate over items that match the given flags.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::All</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Hidden</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::NotHidden</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Selected</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Unselected</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Selectable</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::NotSelectable</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::DragEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::DragDisabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::DropEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::DropDisabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::HasChildren</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::NoChildren</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Checked</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::NotChecked</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Enabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Disabled</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::Editable</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::NotEditable</db:code></db:para>
</db:td>
<db:td><db:code>0x00020000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtreewidgetitemiterator.xml">QTreeWidgetItemIterator</db:link></db:emphasis>::UserFlag</db:code></db:para>
</db:td>
<db:td><db:code>0x01000000</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>IteratorFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;IteratorFlag&gt;. </db:code>It stores an OR combination of <db:code>IteratorFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTreeWidgetItemIterator-1">
<db:title>[explicit] QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidget *<db:emphasis>widget</db:emphasis>, QTreeWidgetItemIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = All)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItemIterator</db:methodname>
<db:methodparam>
<db:type>QTreeWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItemIterator::IteratorFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>All</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator(QTreeWidget *widget, QTreeWidgetItemIterator::IteratorFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an iterator for the given <db:code role="parameter">widget</db:code> that uses the specified <db:code role="parameter">flags</db:code> to determine which items are found during iteration. The iterator is set to point to the first top-level item contained in the widget, or the next matching item if the top-level item doesn't match the flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitemiterator.xml#IteratorFlag-enum">QTreeWidgetItemIterator::IteratorFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItemIterator-2">
<db:title>[explicit] QTreeWidgetItemIterator::QTreeWidgetItemIterator(QTreeWidgetItem *<db:emphasis>item</db:emphasis>, QTreeWidgetItemIterator::IteratorFlags <db:emphasis>flags</db:emphasis> = All)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItemIterator</db:methodname>
<db:methodparam>
<db:type>QTreeWidgetItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTreeWidgetItemIterator::IteratorFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>All</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator(QTreeWidgetItem *item, QTreeWidgetItemIterator::IteratorFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an iterator for the given <db:code role="parameter">item</db:code> that uses the specified <db:code role="parameter">flags</db:code> to determine which items are found during iteration. The iterator is set to point to <db:code role="parameter">item</db:code>, or the next matching item if <db:code role="parameter">item</db:code> doesn't match the flags.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtreewidgetitemiterator.xml#IteratorFlag-enum">QTreeWidgetItemIterator::IteratorFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTreeWidgetItemIterator">
<db:title>QTreeWidgetItemIterator::QTreeWidgetItemIterator(const QTreeWidgetItemIterator &amp;<db:emphasis>it</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTreeWidgetItemIterator</db:methodname>
<db:methodparam>
<db:type>const QTreeWidgetItemIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator(const QTreeWidgetItemIterator &amp;it)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an iterator for the same <db:link xlink:href="qtreewidget.xml">QTreeWidget</db:link> as <db:code role="parameter">it</db:code>. The current iterator item is set to point on the current item of <db:code role="parameter">it</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTreeWidgetItemIterator">
<db:title>QTreeWidgetItemIterator::~QTreeWidgetItemIterator()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTreeWidgetItemIterator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTreeWidgetItemIterator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the iterator.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>QTreeWidgetItem *QTreeWidgetItemIterator::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTreeWidgetItem *</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItem * operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Dereference operator. Returns a pointer to the current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b">
<db:title>QTreeWidgetItemIterator &amp;QTreeWidgetItemIterator::operator++()</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItemIterator &amp;</db:type>
<db:methodname>operator++</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator &amp; operator++()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix ++ operator (++it) advances the iterator to the next matching item and returns a reference to the resulting iterator. Sets the current pointer to nullptr if the current item is the last matching item.</db:para>
</db:section>
<db:section xml:id="operator-2b-2b-1">
<db:title>const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator++(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const QTreeWidgetItemIterator</db:type>
<db:methodname>operator++</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QTreeWidgetItemIterator operator++(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The postfix ++ operator (it++) advances the iterator to the next matching item and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QTreeWidgetItemIterator &amp;QTreeWidgetItemIterator::operator+=(int <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItemIterator &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator &amp; operator+=(int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go forward by <db:code role="parameter">n</db:code> matching items. (If n is negative, the iterator goes backward.)</db:para>
<db:para>If the current item is beyond the last item, the current item pointer is set to nullptr. Returns the resulting iterator.</db:para>
</db:section>
<db:section xml:id="operator--">
<db:title>QTreeWidgetItemIterator &amp;QTreeWidgetItemIterator::operator--()</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItemIterator &amp;</db:type>
<db:methodname>operator--</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator &amp; operator--()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The prefix – operator (–it) advances the iterator to the previous matching item and returns a reference to the resulting iterator. Sets the current pointer to nullptr if the current item is the first matching item.</db:para>
</db:section>
<db:section xml:id="operator---1">
<db:title>const QTreeWidgetItemIterator QTreeWidgetItemIterator::operator--(<db:emphasis>int</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const QTreeWidgetItemIterator</db:type>
<db:methodname>operator--</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QTreeWidgetItemIterator operator--(int)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The postfix – operator (it–) makes the preceding matching item current and returns an iterator to the previously current item.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QTreeWidgetItemIterator &amp;QTreeWidgetItemIterator::operator-=(int <db:emphasis>n</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItemIterator &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator &amp; operator-=(int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes the iterator go backward by <db:code role="parameter">n</db:code> matching items. (If n is negative, the iterator goes forward.)</db:para>
<db:para>If the current item is ahead of the last item, the current item pointer is set to nullptr. Returns the resulting iterator.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QTreeWidgetItemIterator &amp;QTreeWidgetItemIterator::operator=(const QTreeWidgetItemIterator &amp;<db:emphasis>it</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTreeWidgetItemIterator &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QTreeWidgetItemIterator &amp;</db:type>
<db:parameter>it</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QTreeWidgetItemIterator &amp; operator=(const QTreeWidgetItemIterator &amp;it)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assignment. Makes a copy of <db:code role="parameter">it</db:code> and returns a reference to its iterator.</db:para>
</db:section>
</db:section>
</db:article>
