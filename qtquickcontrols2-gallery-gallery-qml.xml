<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls 2 - Gallery</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A gallery of controls.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.6
import QtQuick.Layouts 1.3
import QtQuick.Controls 2.1
import QtQuick.Controls.Material 2.1
import QtQuick.Controls.Universal 2.1
import Qt.labs.settings 1.0

ApplicationWindow {
    id: window
    width: 360
    height: 520
    visible: true
    title: &quot;Qt Quick Controls 2&quot;

    Settings {
        id: settings
        property string style: &quot;Default&quot;
    }

    Shortcut {
        sequence: &quot;Esc&quot;
        enabled: stackView.depth &gt; 1
        onActivated: {
            stackView.pop()
            listView.currentIndex = -1
        }
    }

    header: ToolBar {
        Material.foreground: &quot;white&quot;

        RowLayout {
            spacing: 20
            anchors.fill: parent

            ToolButton {
                contentItem: Image {
                    fillMode: Image.Pad
                    horizontalAlignment: Image.AlignHCenter
                    verticalAlignment: Image.AlignVCenter
                    source: stackView.depth &gt; 1 ? &quot;images/back.png&quot; : &quot;images/drawer.png&quot;
                }
                onClicked: {
                    if (stackView.depth &gt; 1) {
                        stackView.pop()
                        listView.currentIndex = -1
                    } else {
                        drawer.open()
                    }
                }
            }

            Label {
                id: titleLabel
                text: listView.currentItem ? listView.currentItem.text : &quot;Gallery&quot;
                font.pixelSize: 20
                elide: Label.ElideRight
                horizontalAlignment: Qt.AlignHCenter
                verticalAlignment: Qt.AlignVCenter
                Layout.fillWidth: true
            }

            ToolButton {
                contentItem: Image {
                    fillMode: Image.Pad
                    horizontalAlignment: Image.AlignHCenter
                    verticalAlignment: Image.AlignVCenter
                    source: &quot;images/menu.png&quot;
                }
                onClicked: optionsMenu.open()

                Menu {
                    id: optionsMenu
                    x: parent.width - width
                    transformOrigin: Menu.TopRight

                    MenuItem {
                        text: &quot;Settings&quot;
                        onTriggered: settingsDialog.open()
                    }
                    MenuItem {
                        text: &quot;About&quot;
                        onTriggered: aboutDialog.open()
                    }
                }
            }
        }
    }

    Drawer {
        id: drawer
        width: Math.min(window.width, window.height) / 3 * 2
        height: window.height
        dragMargin: stackView.depth &gt; 1 ? 0 : undefined

        ListView {
            id: listView

            focus: true
            currentIndex: -1
            anchors.fill: parent

            delegate: ItemDelegate {
                width: parent.width
                text: model.title
                highlighted: ListView.isCurrentItem
                onClicked: {
                    listView.currentIndex = index
                    stackView.push(model.source)
                    drawer.close()
                }
            }

            model: ListModel {
                ListElement { title: &quot;BusyIndicator&quot;; source: &quot;qrc:/pages/BusyIndicatorPage.qml&quot; }
                ListElement { title: &quot;Button&quot;; source: &quot;qrc:/pages/ButtonPage.qml&quot; }
                ListElement { title: &quot;CheckBox&quot;; source: &quot;qrc:/pages/CheckBoxPage.qml&quot; }
                ListElement { title: &quot;ComboBox&quot;; source: &quot;qrc:/pages/ComboBoxPage.qml&quot; }
                ListElement { title: &quot;Dial&quot;; source: &quot;qrc:/pages/DialPage.qml&quot; }
                ListElement { title: &quot;Dialog&quot;; source: &quot;qrc:/pages/DialogPage.qml&quot; }
                ListElement { title: &quot;Delegates&quot;; source: &quot;qrc:/pages/DelegatePage.qml&quot; }
                ListElement { title: &quot;Frame&quot;; source: &quot;qrc:/pages/FramePage.qml&quot; }
                ListElement { title: &quot;GroupBox&quot;; source: &quot;qrc:/pages/GroupBoxPage.qml&quot; }
                ListElement { title: &quot;PageIndicator&quot;; source: &quot;qrc:/pages/PageIndicatorPage.qml&quot; }
                ListElement { title: &quot;ProgressBar&quot;; source: &quot;qrc:/pages/ProgressBarPage.qml&quot; }
                ListElement { title: &quot;RadioButton&quot;; source: &quot;qrc:/pages/RadioButtonPage.qml&quot; }
                ListElement { title: &quot;RangeSlider&quot;; source: &quot;qrc:/pages/RangeSliderPage.qml&quot; }
                ListElement { title: &quot;ScrollBar&quot;; source: &quot;qrc:/pages/ScrollBarPage.qml&quot; }
                ListElement { title: &quot;ScrollIndicator&quot;; source: &quot;qrc:/pages/ScrollIndicatorPage.qml&quot; }
                ListElement { title: &quot;Slider&quot;; source: &quot;qrc:/pages/SliderPage.qml&quot; }
                ListElement { title: &quot;SpinBox&quot;; source: &quot;qrc:/pages/SpinBoxPage.qml&quot; }
                ListElement { title: &quot;StackView&quot;; source: &quot;qrc:/pages/StackViewPage.qml&quot; }
                ListElement { title: &quot;SwipeView&quot;; source: &quot;qrc:/pages/SwipeViewPage.qml&quot; }
                ListElement { title: &quot;Switch&quot;; source: &quot;qrc:/pages/SwitchPage.qml&quot; }
                ListElement { title: &quot;TabBar&quot;; source: &quot;qrc:/pages/TabBarPage.qml&quot; }
                ListElement { title: &quot;TextArea&quot;; source: &quot;qrc:/pages/TextAreaPage.qml&quot; }
                ListElement { title: &quot;TextField&quot;; source: &quot;qrc:/pages/TextFieldPage.qml&quot; }
                ListElement { title: &quot;ToolTip&quot;; source: &quot;qrc:/pages/ToolTipPage.qml&quot; }
                ListElement { title: &quot;Tumbler&quot;; source: &quot;qrc:/pages/TumblerPage.qml&quot; }
            }

            ScrollIndicator.vertical: ScrollIndicator { }
        }
    }

    StackView {
        id: stackView
        anchors.fill: parent

        initialItem: Pane {
            id: pane

            Image {
                id: logo
                width: pane.availableWidth / 2
                height: pane.availableHeight / 2
                anchors.centerIn: parent
                anchors.verticalCenterOffset: -50
                fillMode: Image.PreserveAspectFit
                source: &quot;images/qt-logo.png&quot;
            }

            Label {
                text: &quot;Qt Quick Controls 2 provides a set of controls that can be used to build complete interfaces in Qt Quick.&quot;
                anchors.margins: 20
                anchors.top: logo.bottom
                anchors.left: parent.left
                anchors.right: parent.right
                anchors.bottom: arrow.top
                horizontalAlignment: Label.AlignHCenter
                verticalAlignment: Label.AlignVCenter
                wrapMode: Label.Wrap
            }

            Image {
                id: arrow
                source: &quot;images/arrow.png&quot;
                anchors.left: parent.left
                anchors.bottom: parent.bottom
            }
        }
    }

    Dialog {
        id: settingsDialog
        x: Math.round((window.width - width) / 2)
        y: Math.round(window.height / 6)
        width: Math.round(Math.min(window.width, window.height) / 3 * 2)
        modal: true
        focus: true
        title: &quot;Settings&quot;

        standardButtons: Dialog.Ok | Dialog.Cancel
        onAccepted: {
            settings.style = styleBox.displayText
            settingsDialog.close()
        }
        onRejected: {
            styleBox.currentIndex = styleBox.styleIndex
            settingsDialog.close()
        }

        contentItem: ColumnLayout {
            id: settingsColumn
            spacing: 20

            RowLayout {
                spacing: 10

                Label {
                    text: &quot;Style:&quot;
                }

                ComboBox {
                    id: styleBox
                    property int styleIndex: -1
                    model: [&quot;Default&quot;, &quot;Material&quot;, &quot;Universal&quot;]
                    Component.onCompleted: {
                        styleIndex = find(settings.style, Qt.MatchFixedString)
                        if (styleIndex !== -1)
                            currentIndex = styleIndex
                    }
                    Layout.fillWidth: true
                }
            }

            Label {
                text: &quot;Restart required&quot;
                color: &quot;#e41e25&quot;
                opacity: styleBox.currentIndex !== styleBox.styleIndex ? 1.0 : 0.0
                horizontalAlignment: Label.AlignHCenter
                verticalAlignment: Label.AlignVCenter
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
        }
    }

    Dialog {
        id: aboutDialog
        modal: true
        focus: true
        title: &quot;About&quot;
        x: (window.width - width) / 2
        y: window.height / 6
        width: Math.min(window.width, window.height) / 3 * 2
        contentHeight: aboutColumn.height

        Column {
            id: aboutColumn
            spacing: 20

            Label {
                width: aboutDialog.availableWidth
                text: &quot;The Qt Quick Controls 2 module delivers the next generation user interface controls based on Qt Quick.&quot;
                wrapMode: Label.Wrap
                font.pixelSize: 12
            }

            Label {
                width: aboutDialog.availableWidth
                text: &quot;In comparison to the desktop-oriented Qt Quick Controls 1, Qt Quick Controls 2 &quot;
                    + &quot;are an order of magnitude simpler, lighter and faster, and are primarily targeted &quot;
                    + &quot;towards embedded and mobile platforms.&quot;
                wrapMode: Label.Wrap
                font.pixelSize: 12
            }
        }
    }
}

</db:programlisting>
</db:article>
