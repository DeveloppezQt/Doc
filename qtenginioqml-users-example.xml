<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Enginio QML Examples - Users</db:title>
<db:productname>QtEnginioQml</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio from QML</db:titleabbrev>
<db:abstract>
<db:para>The Users example introduces user registration, authentication, and browsing.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>This example will demonstrate how to register and authenticate a user, and what kind of information is attached to an authenticated session. This is a simple example, and data access rights management is not covered here. For such information, please refer to the Social Todo example.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/users-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>There is no special need for the backend setup. This example will use only predefined structures, which are the same for every backend.</db:para>
<db:para>The example is an application that shows users registered in the backend, allows registration of new users, and shows how to login in separate tabs.</db:para>
<db:para>Each backend contains the &quot;users&quot; object type, which defines a structure that stores all basic data about an application's users. The collection of &quot;users&quot; is not really different from any other collection. Therefore, we do not need any special methods to manipulate it. Typical data associated with a user is:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>username</db:code> - required name used for logging in.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>email</db:code> - unique email address of a user.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>firstName</db:code>, lastName - user's credentials (optional).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>password</db:code> - write-only property, this value is used during authentication.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code>users</db:code> object can be extended by custom properties too.</db:para>
<db:note>
<db:para><db:emphasis>username</db:emphasis> and <db:emphasis>password</db:emphasis> are always required and cannot be empty.</db:para>
</db:note>
</db:section>
<db:section xml:id="general-example-structure">
<db:title>General Example Structure</db:title>
<db:para>This example uses QtEnginio library together with Qt Quick Controls, therefore both have to be imported.</db:para>
<db:programlisting language="qml">import Enginio 1.0
import QtQuick.Controls 1.0
import QtQuick.Layouts 1.0
</db:programlisting>
<db:para>We will also use a common <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> connection as shown here:</db:para>
<db:programlisting language="qml">EnginioClient {
    id: enginioClient
    backendId: backendHelper.backendId

    onError: console.debug(JSON.stringify(reply.data))
}
</db:programlisting>
<db:para>The example is organized into separate tabs by using <db:link xlink:href="qml-qtquick-controls-tabview.xml">TabView</db:link>. Each tab shows a different functionality.</db:para>
</db:section>
<db:section xml:id="browsing-user-data">
<db:title>Browsing User Data</db:title>
<db:para>The most convenient method to browse users is to use <db:link xlink:href="qml-enginio-enginiomodel.xml">EnginioModel</db:link>. The model can automatically download all data that we need. It is sufficient to set three properties: <db:link xlink:href="qml-enginio-enginiomodel.xml#client-prop">client</db:link>, <db:link xlink:href="qml-enginio-enginiomodel.xml#query-prop">query</db:link> and <db:link xlink:href="qml-enginio-enginiomodel.xml#operation-prop">operation</db:link> as shown below:</db:para>
<db:programlisting language="qml">model: EnginioModel {
    id: enginioModel
    client: enginioClient
    operation: Enginio.UserOperation
    query: {&quot;objectType&quot;: &quot;users&quot; }
}
</db:programlisting>
<db:para>The model is used directly by <db:link xlink:href="qml-qtquick-controls-tableview.xml">TableView</db:link>, in which we define data that will be shown.</db:para>
<db:programlisting language="qml">TableViewColumn { title: &quot;First name&quot;; role: &quot;firstName&quot; }
TableViewColumn { title: &quot;Last name&quot;; role: &quot;lastName&quot; }
TableViewColumn { title: &quot;Login&quot;; role: &quot;username&quot; }
TableViewColumn { title: &quot;Email&quot;; role: &quot;email&quot; }
</db:programlisting>
</db:section>
<db:section xml:id="user-authentication">
<db:title>User Authentication</db:title>
<db:para>Authentication is quite easy. The only thing that needs to be done is to assign an identity, for example, <db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link> object to <db:link xlink:href="qml-enginio-enginioclient.xml#identity-prop">EnginioClient::identity</db:link>. After a while, <db:link xlink:href="qml-enginio-enginioclient.xml#authenticationState-prop">EnginioClient::authenticationState</db:link> will change and <db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticated-signal">sessionAuthenticated</db:link> or <db:link xlink:href="qml-enginio-enginioclient.xml#sessionAuthenticationError-signal">sessionAuthenticationError</db:link> will be emitted.</db:para>
<db:para>The first thing we need to do is to create an identity object: <db:link xlink:href="qml-enginio-enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:para>
<db:programlisting language="qml">EnginioOAuth2Authentication {
    id: identity
    user: login.text
    password: password.text
}
</db:programlisting>
<db:para>Then, depending on the state of the application, we assign the object to our enginioClient instance. There are four possible states, defined by <db:link xlink:href="enginio.xml#AuthenticationState-enum">Enginio::AuthenticationState</db:link>. After assigning the Identity object, the state changes from the initial <db:code>NotAuthenticated</db:code> to <db:code>Authenticating</db:code>.</db:para>
<db:programlisting language="qml">enginioClient.identity = identity
</db:programlisting>
<db:para>Once the authentication query has finished, the state changes to <db:code>Authenticated</db:code> or <db:code>AuthenticationFailure</db:code> depending on the authentication result. Null assignment to the <db:link xlink:href="qml-enginio-enginioclient.xml#identity-prop">identity</db:link> causes the session to terminate immediately:</db:para>
<db:programlisting language="qml">enginioClient.identity = null
</db:programlisting>
<db:para>For educational purposes, in the example we also show a log window with data attached to a session that is changing state.</db:para>
<db:programlisting language="qml">Connections {
    target: enginioClient
    onSessionAuthenticated: {
        data.text = data.text + &quot;User '&quot;+ login.text +&quot;' is logged in.\n\n&quot; + JSON.stringify(reply.data, undefined, 2) + &quot;\n\n&quot;
    }
    onSessionAuthenticationError: {
        data.text = data.text + &quot;Authentication of user '&quot;+ login.text +&quot;' failed.\n\n&quot; + JSON.stringify(reply.data, undefined, 2) + &quot;\n\n&quot;
    }
    onSessionTerminated: {
        data.text = data.text + &quot;Session closed.\n\n&quot;
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="registering-a-new-user">
<db:title>Registering a New User</db:title>
<db:para>Registration of a new user is as simple as adding a new object to the <db:code>users</db:code> collection. It can be achieved by using the <db:link xlink:href="qml-enginio-enginioclient.xml#create-method">create</db:link> function, as shown below:</db:para>
<db:programlisting language="qml">var reply = enginioClient.create(
            { &quot;username&quot;: login.text,
              &quot;password&quot;: password.text,
              &quot;email&quot;: userEmail.text,
              &quot;firstName&quot;: userFirstName.text,
              &quot;lastName&quot;: userLastName.text
            }, Enginio.UserOperation)
</db:programlisting>
<db:para>We could also use the <db:link xlink:href="qml-enginio-enginiomodel.xml#append-method">EnginioModel::append</db:link> method in the browsing example to accomplish the same task.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="users/Browse.qml">users/Browse.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="users/Login.qml">users/Login.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="users/Register.qml">users/Register.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="users/users.pro">users/users.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="users/users.qml">users/users.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="users/users.qrc">users/users.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
