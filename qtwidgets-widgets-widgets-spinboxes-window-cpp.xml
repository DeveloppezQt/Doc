<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Spin Boxes Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Spin Boxes example shows how to use the many different types of spin boxes available in Qt, from a simple <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> widget to more complex editors like the <db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link> widget.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;window.h&quot;

Window::Window()
{
    createSpinBoxes();
    createDateTimeEdits();
    createDoubleSpinBoxes();

    QHBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;addWidget(spinBoxesGroup);
    layout-&amp;gt;addWidget(editsGroup);
    layout-&amp;gt;addWidget(doubleSpinBoxesGroup);
    setLayout(layout);

    setWindowTitle(tr(&quot;Spin Boxes&quot;));
}

void Window::createSpinBoxes()
{
    spinBoxesGroup = new QGroupBox(tr(&quot;Spinboxes&quot;));

    QLabel *integerLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg(-20).arg(20));
    QSpinBox *integerSpinBox = new QSpinBox;
    integerSpinBox-&amp;gt;setRange(-20, 20);
    integerSpinBox-&amp;gt;setSingleStep(1);
    integerSpinBox-&amp;gt;setValue(0);

    QLabel *zoomLabel = new QLabel(tr(&quot;Enter a zoom value between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000));
    QSpinBox *zoomSpinBox = new QSpinBox;
    zoomSpinBox-&amp;gt;setRange(0, 1000);
    zoomSpinBox-&amp;gt;setSingleStep(10);
    zoomSpinBox-&amp;gt;setSuffix(&quot;%&quot;);
    zoomSpinBox-&amp;gt;setSpecialValueText(tr(&quot;Automatic&quot;));
    zoomSpinBox-&amp;gt;setValue(100);

    QLabel *priceLabel = new QLabel(tr(&quot;Enter a price between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(999));
    QSpinBox *priceSpinBox = new QSpinBox;
    priceSpinBox-&amp;gt;setRange(0, 999);
    priceSpinBox-&amp;gt;setSingleStep(1);
    priceSpinBox-&amp;gt;setPrefix(&quot;$&quot;);
    priceSpinBox-&amp;gt;setValue(99);

    groupSeparatorSpinBox = new QSpinBox;
    groupSeparatorSpinBox-&amp;gt;setRange(-99999999, 99999999);
    groupSeparatorSpinBox-&amp;gt;setValue(1000);
    groupSeparatorSpinBox-&amp;gt;setGroupSeparatorShown(true);
    QCheckBox *groupSeparatorChkBox = new QCheckBox;
    groupSeparatorChkBox-&amp;gt;setText(tr(&quot;Show group separator&quot;));
    groupSeparatorChkBox-&amp;gt;setChecked(true);
    connect(groupSeparatorChkBox, &amp;amp;QCheckBox::toggled, groupSeparatorSpinBox,
            &amp;amp;QSpinBox::setGroupSeparatorShown);

    QLabel *hexLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg('-' + QString::number(31, 16)).arg(QString::number(31, 16)));
    QSpinBox *hexSpinBox = new QSpinBox;
    hexSpinBox-&amp;gt;setRange(-31, 31);
    hexSpinBox-&amp;gt;setSingleStep(1);
    hexSpinBox-&amp;gt;setValue(0);
    hexSpinBox-&amp;gt;setDisplayIntegerBase(16);

    QVBoxLayout *spinBoxLayout = new QVBoxLayout;
    spinBoxLayout-&amp;gt;addWidget(integerLabel);
    spinBoxLayout-&amp;gt;addWidget(integerSpinBox);
    spinBoxLayout-&amp;gt;addWidget(zoomLabel);
    spinBoxLayout-&amp;gt;addWidget(zoomSpinBox);
    spinBoxLayout-&amp;gt;addWidget(priceLabel);
    spinBoxLayout-&amp;gt;addWidget(priceSpinBox);
    spinBoxLayout-&amp;gt;addWidget(hexLabel);
    spinBoxLayout-&amp;gt;addWidget(hexSpinBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorChkBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorSpinBox);
    spinBoxesGroup-&amp;gt;setLayout(spinBoxLayout);
}

void Window::createDateTimeEdits()
{
    editsGroup = new QGroupBox(tr(&quot;Date and time spin boxes&quot;));

    QLabel *dateLabel = new QLabel;
    QDateEdit *dateEdit = new QDateEdit(QDate::currentDate());
    dateEdit-&amp;gt;setDateRange(QDate(2005, 1, 1), QDate(2010, 12, 31));
    dateLabel-&amp;gt;setText(tr(&quot;Appointment date (between %0 and %1):&quot;)
                       .arg(dateEdit-&amp;gt;minimumDate().toString(Qt::ISODate))
                       .arg(dateEdit-&amp;gt;maximumDate().toString(Qt::ISODate)));

    QLabel *timeLabel = new QLabel;
    QTimeEdit *timeEdit = new QTimeEdit(QTime::currentTime());
    timeEdit-&amp;gt;setTimeRange(QTime(9, 0, 0, 0), QTime(16, 30, 0, 0));
    timeLabel-&amp;gt;setText(tr(&quot;Appointment time (between %0 and %1):&quot;)
                       .arg(timeEdit-&amp;gt;minimumTime().toString(Qt::ISODate))
                       .arg(timeEdit-&amp;gt;maximumTime().toString(Qt::ISODate)));

    meetingLabel = new QLabel;
    meetingEdit = new QDateTimeEdit(QDateTime::currentDateTime());

    QLabel *formatLabel = new QLabel(tr(&quot;Format string for the meeting date &quot;
                                        &quot;and time:&quot;));
    QComboBox *formatComboBox = new QComboBox;
    formatComboBox-&amp;gt;addItem(&quot;yyyy-MM-dd hh:mm:ss (zzz 'ms')&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss MM/dd/yyyy&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss dd/MM/yyyy&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm:ss&quot;);
    formatComboBox-&amp;gt;addItem(&quot;hh:mm ap&quot;);

    connect(formatComboBox, SIGNAL(activated(QString)),
            this, SLOT(setFormatString(QString)));

    setFormatString(formatComboBox-&amp;gt;currentText());

    QVBoxLayout *editsLayout = new QVBoxLayout;
    editsLayout-&amp;gt;addWidget(dateLabel);
    editsLayout-&amp;gt;addWidget(dateEdit);
    editsLayout-&amp;gt;addWidget(timeLabel);
    editsLayout-&amp;gt;addWidget(timeEdit);
    editsLayout-&amp;gt;addWidget(meetingLabel);
    editsLayout-&amp;gt;addWidget(meetingEdit);
    editsLayout-&amp;gt;addWidget(formatLabel);
    editsLayout-&amp;gt;addWidget(formatComboBox);
    editsGroup-&amp;gt;setLayout(editsLayout);
}

void Window::setFormatString(const QString &amp;amp;formatString)
{
    meetingEdit-&amp;gt;setDisplayFormat(formatString);
    if (meetingEdit-&amp;gt;displayedSections() &amp;amp; QDateTimeEdit::DateSections_Mask) {
        meetingEdit-&amp;gt;setDateRange(QDate(2004, 11, 1), QDate(2005, 11, 30));
        meetingLabel-&amp;gt;setText(tr(&quot;Meeting date (between %0 and %1):&quot;)
            .arg(meetingEdit-&amp;gt;minimumDate().toString(Qt::ISODate))
            .arg(meetingEdit-&amp;gt;maximumDate().toString(Qt::ISODate)));
    } else {
        meetingEdit-&amp;gt;setTimeRange(QTime(0, 7, 20, 0), QTime(21, 0, 0, 0));
        meetingLabel-&amp;gt;setText(tr(&quot;Meeting time (between %0 and %1):&quot;)
            .arg(meetingEdit-&amp;gt;minimumTime().toString(Qt::ISODate))
            .arg(meetingEdit-&amp;gt;maximumTime().toString(Qt::ISODate)));
    }
}

void Window::createDoubleSpinBoxes()
{
    doubleSpinBoxesGroup = new QGroupBox(tr(&quot;Double precision spinboxes&quot;));

    QLabel *precisionLabel = new QLabel(tr(&quot;Number of decimal places &quot;
                                           &quot;to show:&quot;));
    QSpinBox *precisionSpinBox = new QSpinBox;
    precisionSpinBox-&amp;gt;setRange(0, 100);
    precisionSpinBox-&amp;gt;setValue(2);

    QLabel *doubleLabel = new QLabel(tr(&quot;Enter a value between &quot;
        &quot;%1 and %2:&quot;).arg(-20).arg(20));
    doubleSpinBox = new QDoubleSpinBox;
    doubleSpinBox-&amp;gt;setRange(-20.0, 20.0);
    doubleSpinBox-&amp;gt;setSingleStep(1.0);
    doubleSpinBox-&amp;gt;setValue(0.0);

    QLabel *scaleLabel = new QLabel(tr(&quot;Enter a scale factor between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000.0));
    scaleSpinBox = new QDoubleSpinBox;
    scaleSpinBox-&amp;gt;setRange(0.0, 1000.0);
    scaleSpinBox-&amp;gt;setSingleStep(10.0);
    scaleSpinBox-&amp;gt;setSuffix(&quot;%&quot;);
    scaleSpinBox-&amp;gt;setSpecialValueText(tr(&quot;No scaling&quot;));
    scaleSpinBox-&amp;gt;setValue(100.0);

    QLabel *priceLabel = new QLabel(tr(&quot;Enter a price between &quot;
        &quot;%1 and %2:&quot;).arg(0).arg(1000));
    priceSpinBox = new QDoubleSpinBox;
    priceSpinBox-&amp;gt;setRange(0.0, 1000.0);
    priceSpinBox-&amp;gt;setSingleStep(1.0);
    priceSpinBox-&amp;gt;setPrefix(&quot;$&quot;);
    priceSpinBox-&amp;gt;setValue(99.99);

    connect(precisionSpinBox, SIGNAL(valueChanged(int)),
            this, SLOT(changePrecision(int)));

    groupSeparatorSpinBox_d = new QDoubleSpinBox;
    groupSeparatorSpinBox_d-&amp;gt;setRange(-99999999, 99999999);
    groupSeparatorSpinBox_d-&amp;gt;setDecimals(2);
    groupSeparatorSpinBox_d-&amp;gt;setValue(1000.00);
    groupSeparatorSpinBox_d-&amp;gt;setGroupSeparatorShown(true);
    QCheckBox *groupSeparatorChkBox = new QCheckBox;
    groupSeparatorChkBox-&amp;gt;setText(tr(&quot;Show group separator&quot;));
    groupSeparatorChkBox-&amp;gt;setChecked(true);
    connect(groupSeparatorChkBox, &amp;amp;QCheckBox::toggled, groupSeparatorSpinBox_d,
            &amp;amp;QDoubleSpinBox::setGroupSeparatorShown);

    QVBoxLayout *spinBoxLayout = new QVBoxLayout;
    spinBoxLayout-&amp;gt;addWidget(precisionLabel);
    spinBoxLayout-&amp;gt;addWidget(precisionSpinBox);
    spinBoxLayout-&amp;gt;addWidget(doubleLabel);
    spinBoxLayout-&amp;gt;addWidget(doubleSpinBox);
    spinBoxLayout-&amp;gt;addWidget(scaleLabel);
    spinBoxLayout-&amp;gt;addWidget(scaleSpinBox);
    spinBoxLayout-&amp;gt;addWidget(priceLabel);
    spinBoxLayout-&amp;gt;addWidget(priceSpinBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorChkBox);
    spinBoxLayout-&amp;gt;addWidget(groupSeparatorSpinBox_d);
    doubleSpinBoxesGroup-&amp;gt;setLayout(spinBoxLayout);
}

void Window::changePrecision(int decimals)
{
    doubleSpinBox-&amp;gt;setDecimals(decimals);
    scaleSpinBox-&amp;gt;setDecimals(decimals);
    priceSpinBox-&amp;gt;setDecimals(decimals);
}

</db:programlisting>
</db:article>
