<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using lupdate</db:title>
<db:productname>QtLinguist</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Linguist Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-manager.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Release managers"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="linguist-lrelease.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Using lrelease"/></db:extendedlink>
<db:abstract>
<db:para>Qt Linguist Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="lupdate"/>
<db:para>The <db:code>lupdate</db:code> command line tool finds translatable strings in source, header, and UI files and generates or updates TS files.</db:para>
<db:para>When building with qmake, specify the files to process at the command line or in a .pro file.</db:para>
<db:para>When building with CMake, use <db:link xlink:href="cmake-commands-qtlinguisttools.xml">CMake commands</db:link> to add targets that create or update TS files and transform them into QM files. The <db:code>lupdate</db:code> tool is run with the <db:link xlink:href="linguist-lupdate.xml#lupdate-options">options</db:link> you pass to the commands when you build the target.</db:para>
<db:para>For more information about specifying translations in project files, see <db:link xlink:href="localization.xml">Localizing Applications</db:link>.</db:para>
<db:section xml:id="lupdate-syntax">
<db:title>lupdate syntax</db:title>
<db:programlisting language="cpp" role="bad">lupdate [options] [project-file]...
lupdate [options] [source-file|path|@lst-file]... -ts ts-files|@lst-file
</db:programlisting>
<db:para>Where:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>options</db:code> means one or several <db:link xlink:href="linguist-lupdate.xml#lupdate-options">lupdate options</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>project-file</db:code> is the project configuration file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>source-file</db:code> is a file that contains translatable strings.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>path</db:code> is the path to a folder that contains translation source files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>@lst-file</db:code> reads additional file names (one per line) or includepaths (one per line and prefixed with <db:code>-I</db:code>) from <db:emphasis>lst-file</db:emphasis>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ts-files</db:code> are the TS files to generate or update.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>To view the latest help, enter:</db:para>
<db:programlisting language="cpp" role="bad">lupdate -help
</db:programlisting>
<db:section xml:id="lupdate-options">
<db:title>lupdate options</db:title>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Option</db:para>
</db:th>
<db:th>
<db:para>Action</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:code>-help</db:code></db:para>
</db:td>
<db:td>
<db:para>Display up-to-date help information and exit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-no-obsolete</db:code></db:para>
</db:td>
<db:td>
<db:para>Drop all obsolete and vanished strings.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-extensions &lt;ext&gt;[,&lt;ext&gt;]...</db:code></db:para>
</db:td>
<db:td>
<db:para>Process files with the given extensions, only. Use commas to separate extensions in the list. Do not use whitespace. The default value is: <db:code>java,jui,ui,c,c++,cc,cpp,cxx,ch,h,h++,hh,hpp,hxx,js,qs,qml,qrc</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-pluralonly</db:code></db:para>
</db:td>
<db:td>
<db:para>Only include plural form messages.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-silent</db:code></db:para>
</db:td>
<db:td>
<db:para>Do not explain what is being done.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-no-sort</db:code></db:para>
</db:td>
<db:td>
<db:para>Do not sort contexts in TS files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-no-recursive</db:code></db:para>
</db:td>
<db:td>
<db:para>Do not recursively scan directories.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-recursive</db:code></db:para>
</db:td>
<db:td>
<db:para>Recursively scan directories (default).</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-I &lt;includepath&gt; or -I&lt;includepath&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Look for include files in this additional location. You can specify multiple paths.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-locations {absolute|relative|none}</db:code></db:para>
</db:td>
<db:td>
<db:para>Specify or override the way to save source code references in TS files.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>absolute</db:code> means that the source file path is relative to the target file, but the line number is absolute.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>relative</db:code> means that the source file path is relative to the target file. The line number is relative to other entries in the same source file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>none</db:code> stores no information about source location.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If you do not specify the location, <db:code>lupdate</db:code> determines it from existing TS files. The default value for new files is <db:code>absolute</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-no-ui-lines</db:code></db:para>
</db:td>
<db:td>
<db:para>Do not record line numbers in references to UI files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-disable-heuristic {sametext|similartext}</db:code></db:para>
</db:td>
<db:td>
<db:para>Disable the named merge heuristic. Can be specified multiple times.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-project &lt;filename&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Name of a file containing the project's description in JSON format. You can use the <db:code>lprodump</db:code> tool to generate the file from a .pro file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-pro &lt;filename&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Name of a .pro file. Useful for files with the .pro file syntax but some other file suffix. Projects are recursed into and merged. This option is deprecated. Use the <db:code>lupdate-pro</db:code> tool instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-pro-out &lt;directory&gt;</db:code></db:para>
</db:td>
<db:td>
<db:para>Virtual output directory for processing subsequent .pro files.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-pro-debug</db:code></db:para>
</db:td>
<db:td>
<db:para>Trace processing .pro files. Specify twice for more verbosity.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-source-language &lt;language&gt;[_&lt;region&gt;]</db:code></db:para>
</db:td>
<db:td>
<db:para>Specify the language of the source strings for new files. Defaults to POSIX if not specified.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-target-language &lt;language&gt;[_&lt;region&gt;]</db:code></db:para>
</db:td>
<db:td>
<db:para>Specify the language of the translations for new files. If you do not specify the language, <db:code>lupdate</db:code> determines it from the file name.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-tr-function-alias &lt;function&gt;{+=,=}&lt;alias&gt;[,&lt;function&gt;{+=,=}&lt;alias&gt;]...</db:code></db:para>
</db:td>
<db:td>
<db:para>With <db:code>+=</db:code>, recognize <db:code>&lt;alias&gt;</db:code> as an alternative spelling of <db:code>&lt;function&gt;</db:code>. With <db:code>=,</db:code> recognize <db:code>&lt;alias&gt;</db:code> as the only spelling of <db:code>&lt;function&gt;</db:code>.</db:para>
<db:para>Available <db:code>&lt;function&gt;</db:code> values (with their currently defined aliases) are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Q_DECLARE_TR_FUNCTIONS</db:code> (<db:code>=Q_DECLARE_TR_FUNCTIONS</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TR_N_NOOP</db:code> (<db:code>=QT_TR_N_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRID_N_NOOP</db:code> (<db:code>=QT_TRID_N_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_N_NOOP</db:code> (<db:code>=QT_TRANSLATE_N_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_N_NOOP3</db:code> (<db:code>=QT_TRANSLATE_N_NOOP3</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TR_NOOP</db:code> (<db:code>=QT_TR_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRID_NOOP</db:code> (<db:code>=QT_TRID_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_NOOP</db:code> (<db:code>=QT_TRANSLATE_NOOP</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_NOOP3</db:code> (<db:code>=QT_TRANSLATE_NOOP3</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TR_NOOP_UTF8</db:code> (<db:code>=QT_TR_NOOP_UTF8</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_NOOP_UTF8</db:code> (<db:code>=QT_TRANSLATE_NOOP_UTF8</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QT_TRANSLATE_NOOP3_UTF8</db:code> (<db:code>=QT_TRANSLATE_NOOP3_UTF8</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>findMessage</db:code> (<db:code>=findMessage</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qtTrId</db:code> (<db:code>=qtTrId</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>tr</db:code> (<db:code>=tr</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>trUtf8</db:code> (<db:code>=trUtf8</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>translate</db:code> (<db:code>=translate</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qsTr</db:code> (<db:code>=qsTr</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qsTrId</db:code> (<db:code>=qsTrId</db:code>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>qsTranslate</db:code> (<db:code>=qsTranslate</db:code>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-ts &lt;ts-file&gt;...</db:code></db:para>
</db:td>
<db:td>
<db:para>Specify the output files. This overrides <db:code>TRANSLATIONS</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-version</db:code></db:para>
</db:td>
<db:td>
<db:para>Display the version of <db:code>lupdate</db:code> and exit.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-clang-parser [compilation-database-dir]</db:code></db:para>
</db:td>
<db:td>
<db:para>Use clang to parse .cpp files. Otherwise, use a custom parser. This option needs a clang compilation database (<db:code>compile_commands.json</db:code>) for the files to be parsed. Specify the path to the directory containing this file on the command line, directly after the <db:code>-clang-parser</db:code> option, or in the project file.</db:para>
<db:para>When using qmake, set the <db:code>LUPDATE_COMPILE_COMMANDS_PATH</db:code> variable in the .pro file.</db:para>
<db:para>A directory specified on the command line takes precedence. If you do not specify a path, <db:code>lupdate</db:code> searches for the compilation database from all parent paths of the first input file.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:code>-project-roots &lt;directory&gt;...</db:code></db:para>
</db:td>
<db:td>
<db:para>Specify one or more project root directories. Only files below a project root are considered for translation when using the <db:code>-clang-parser</db:code> option.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:section xml:id="using-lupdate-with-cmake">
<db:title>Using lupdate with CMake</db:title>
<db:para>When building with CMake, use <db:link xlink:href="cmake-commands-qtlinguisttools.xml">CMake commands</db:link> to add translations on targets to the CMakeLists.txt file, and then build the targets.</db:para>
<db:para>Select one of the following options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Use <db:link xlink:href="qtlinguist-cmake-qt-add-translations.xml">qt_add_translations</db:link> on a target, such as <db:emphasis>app</db:emphasis>. This calls <db:link xlink:href="qtlinguist-cmake-qt-add-lupdate.xml">qt_add_lupdate</db:link> and <db:link xlink:href="qtlinguist-cmake-qt-add-lrelease.xml">qt_add_lrelease</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Use <db:code>qt_add_lupdate</db:code> on a target.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Build a target (for example, <db:code>app_lupdate</db:code>) to update the .ts files for it. To update the .ts files for all targets, build the target <db:code>update_translations</db:code>.</db:para>
</db:section>
<db:section xml:id="using-lupdate-with-qmake">
<db:title>Using lupdate with qmake</db:title>
<db:para>To generate a translation file for a single QML file:</db:para>
<db:programlisting language="cpp" role="bad">lupdate main.qml -ts main_en.ts
</db:programlisting>
<db:para>To make a translation file for another language, for example French, copy main_en.ts to main_fr.ts, and translate the strings in the French TS file.</db:para>
<db:para><db:code>lupdate</db:code> processes QML files that are listed in the <db:code>.qrc</db:code> file:</db:para>
<db:programlisting language="cpp" role="bad">RESOURCES += qml.qrc
</db:programlisting>
<db:para>To have all QML files processed by <db:code>lupdate</db:code>:</db:para>
<db:programlisting language="cpp" role="bad">lupdate application.qrc -ts myapp_en.ts
</db:programlisting>
<db:para>To process all QML files without using a <db:code>.qrc</db:code> file:</db:para>
<db:programlisting language="cpp" role="bad">lupdate -extensions qml -ts myapp_en.ts
</db:programlisting>
<db:para>To check for translatable strings in both QML and C++ source files:</db:para>
<db:programlisting language="cpp" role="bad">lupdate qml.qrc filevalidator.cpp -ts myapp_en.ts
</db:programlisting>
<db:para>To generate .ts files that will be used for English and French without specifying the languages in the project file:</db:para>
<db:programlisting language="cpp" role="bad">lupdate qml.qrc filevalidator.cpp -ts myapp_en.ts myapp_fr.ts
</db:programlisting>
<db:para>Give the TS files to the translator who uses <db:emphasis>Qt Linguist</db:emphasis> to read the files and insert the translations.</db:para>
</db:section>
</db:section>
<db:section xml:id="xliff-format-files">
<db:title>XLIFF format files</db:title>
<db:para>The TS file format is a simple human-readable XML format that you can use with version control systems. In addition, <db:code>lupdate</db:code> can process Localization Interchange File Format (XLIFF) files (<db:code>.xlf</db:code>).</db:para>
<db:note>
<db:para>Only XLIFF versions 1.1 and 1.2 are currently supported.</db:para>
</db:note>
<db:para>You can open and edit XLIFF files in <db:emphasis>Qt Linguist</db:emphasis>.</db:para>
</db:section>
</db:article>
