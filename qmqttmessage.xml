<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMqttMessage Class</db:title>
<db:productname>QtMqtt</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt MQTT Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmqttmessage.xml">QMqttMessage</db:link> class provides information about a message received from a message broker based on a subscription.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMqttMessage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += mqtt</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An MQTT message is created inside the module and returned via the <db:link xlink:href="">QMqttSubscription::messageReceived()</db:link> signal.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="duplicate-prop">
<db:title>[read-only] duplicate : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>duplicate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duplicate</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the message is a duplicate.</db:para>
<db:para>Duplicate messages indicate that the message has been sent earlier, but it has not been confirmed yet. Hence, the broker assumes that it needs to resend to verify the transport of the message itself. Duplicate messages can only occur if the QoS level is one or two.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">duplicate</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="id-prop">
<db:title>[read-only] id : const quint16</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint16</db:type>
<db:varname>id</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">id</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ID of the message.</db:para>
<db:para>IDs are used for messages with a QoS level above zero.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint16-typedef">quint16</db:link></db:type> <db:emphasis role="bold">id</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="payload-prop">
<db:title>[read-only] payload : const QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>payload</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">payload</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the payload of a message.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis role="bold">payload</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qos-prop">
<db:title>[read-only] qos : const quint8</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>quint8</db:type>
<db:varname>qos</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">qos</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the QoS level of a message.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#quint8-typedef">quint8</db:link></db:type> <db:emphasis role="bold">qos</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="retain-prop">
<db:title>[read-only] retain : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>retain</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">retain</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the message has been retained.</db:para>
<db:para>A retained message is kept on the broker for future clients to subscribe. Consequently, a retained message has been created previously and is not a live update. A broker can store only one retained message per topic.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">retain</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="topic-prop">
<db:title>[read-only] topic : const QMqttTopicName</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMqttTopicName</db:type>
<db:varname>topic</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">topic</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the topic of a message.</db:para>
<db:para>In case a wildcard has been used for a subscription, describes the topic matching this subscription. This property never contains wildcards.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMqttTopicName</db:type> <db:emphasis role="bold">topic</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMqttMessage">
<db:title>QMqttMessage::QMqttMessage()</db:title>
<db:constructorsynopsis>
<db:methodname>QMqttMessage</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttMessage()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new MQTT message.</db:para>
</db:section>
<db:section xml:id="QMqttMessage-1">
<db:title>QMqttMessage::QMqttMessage(const QMqttMessage &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMqttMessage</db:methodname>
<db:methodparam>
<db:type>const QMqttMessage &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttMessage(const QMqttMessage &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new MQTT message that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="publishProperties">
<db:title>[since 5.12] int QMqttMessage::publishProperties() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>publishProperties</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int publishProperties() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the publish properties received as part of the message.</db:para>
<db:note>
<db:para>This function only specifies the properties when a publish message is received. Messages with a QoS value of 1 or 2 can contain additional properties when a message is released. Those can be obtained by the QMqttClient::messageStatusChanged signal.</db:para>
</db:note>
<db:note>
<db:para>This function will only provide valid data when the client specifies <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::MQTT_5_0</db:link> as <db:link xlink:href="qmqttclient.xml#ProtocolVersion-enum">QMqttClient::ProtocolVersion</db:link>.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QMqttMessage::operator!=(const QMqttMessage &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QMqttMessage &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QMqttMessage &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the message and <db:code role="parameter">other</db:code> are not equal, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMqttMessage &amp;QMqttMessage::operator=(const QMqttMessage &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QMqttMessage &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QMqttMessage &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QMqttMessage &amp; operator=(const QMqttMessage &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object a copy of <db:code role="parameter">other</db:code> and returns the new value of this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QMqttMessage::operator==(const QMqttMessage &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QMqttMessage &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QMqttMessage &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the message and <db:code role="parameter">other</db:code> are equal, otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
