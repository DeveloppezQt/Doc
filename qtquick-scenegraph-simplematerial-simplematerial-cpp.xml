<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Scene Graph - Simple Material</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to define a scene graph material to fill a shape.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;qguiapplication.h&gt;

#include &lt;qsgmaterial.h&gt;
#include &lt;qsgnode.h&gt;

#include &lt;qquickitem.h&gt;
#include &lt;qquickview.h&gt;

#include &lt;qsgsimplerectnode.h&gt;

#include &lt;qsgsimplematerial.h&gt;

struct State
{
    QColor color;

    int compare(const State *other) const {
        uint rgb = color.rgba();
        uint otherRgb = other-&gt;color.rgba();

        if (rgb == otherRgb) {
            return 0;
        } else if (rgb &lt; otherRgb) {
            return -1;
        } else {
            return 1;
        }
    }
};

class Shader : public QSGSimpleMaterialShader&lt;State&gt;
{
    QSG_DECLARE_SIMPLE_COMPARABLE_SHADER(Shader, State);
public:

    const char *vertexShader() const {
        return
                &quot;attribute highp vec4 aVertex;                              \n&quot;
                &quot;attribute highp vec2 aTexCoord;                            \n&quot;
                &quot;uniform highp mat4 qt_Matrix;                              \n&quot;
                &quot;varying highp vec2 texCoord;                               \n&quot;
                &quot;void main() {                                              \n&quot;
                &quot;    gl_Position = qt_Matrix * aVertex;                     \n&quot;
                &quot;    texCoord = aTexCoord;                                  \n&quot;
                &quot;}&quot;;
    }

    const char *fragmentShader() const {
        return
                &quot;uniform lowp float qt_Opacity;                             \n&quot;
                &quot;uniform lowp vec4 color;                                   \n&quot;
                &quot;varying highp vec2 texCoord;                               \n&quot;
                &quot;void main ()                                               \n&quot;
                &quot;{                                                          \n&quot;
                &quot;    gl_FragColor = texCoord.y * texCoord.x * color * qt_Opacity;  \n&quot;
                &quot;}&quot;;
    }
    QList&lt;QByteArray&gt; attributes() const
    {
        return QList&lt;QByteArray&gt;() &lt;&lt; &quot;aVertex&quot; &lt;&lt; &quot;aTexCoord&quot;;
    }
    void updateState(const State *state, const State *)
    {
        program()-&gt;setUniformValue(id_color, state-&gt;color);
    }
    void resolveUniforms()
    {
        id_color = program()-&gt;uniformLocation(&quot;color&quot;);
    }

private:
    int id_color;
};

class ColorNode : public QSGGeometryNode
{
public:
    ColorNode()
        : m_geometry(QSGGeometry::defaultAttributes_TexturedPoint2D(), 4)
    {
        setGeometry(&amp;m_geometry);

        QSGSimpleMaterial&lt;State&gt; *material = Shader::createMaterial();
        material-&gt;setFlag(QSGMaterial::Blending);
        setMaterial(material);
        setFlag(OwnsMaterial);
    }

    QSGGeometry m_geometry;
};

class Item : public QQuickItem
{
    Q_OBJECT

    Q_PROPERTY(QColor color READ color WRITE setColor NOTIFY colorChanged)

public:

    Item()
    {
        setFlag(ItemHasContents, true);
    }

    void setColor(const QColor &amp;color) {
        if (m_color != color) {
            m_color = color;
            emit colorChanged();
            update();
        }
    }
    QColor color() const {
        return m_color;
    }

signals:
    void colorChanged();

private:
  QColor m_color;

public:
    QSGNode *updatePaintNode(QSGNode *node, UpdatePaintNodeData *)
    {
        ColorNode *n = static_cast&lt;ColorNode *&gt;(node);
        if (!node)
            n = new ColorNode();

        QSGGeometry::updateTexturedRectGeometry(n-&gt;geometry(), boundingRect(), QRectF(0, 0, 1, 1));
        static_cast&lt;QSGSimpleMaterial&lt;State&gt;*&gt;(n-&gt;material())-&gt;state()-&gt;color = m_color;

        n-&gt;markDirty(QSGNode::DirtyGeometry | QSGNode::DirtyMaterial);

        return n;
    }
};
int main(int argc, char **argv)
{
    QGuiApplication app(argc, argv);

    qmlRegisterType&lt;Item&gt;(&quot;SimpleMaterial&quot;, 1, 0, &quot;SimpleMaterialItem&quot;);

    QQuickView view;
    view.setResizeMode(QQuickView::SizeRootObjectToView);
    view.setSource(QUrl(&quot;qrc:///scenegraph/simplematerial/main.qml&quot;));
    view.show();

    return app.exec();
}

#include &quot;simplematerial.moc&quot;

</db:programlisting>
</db:article>
