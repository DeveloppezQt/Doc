<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextDocumentWriter Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> class provides a format-independent interface for writing a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> to files or other devices.</db:para>
<db:para>This class was introduced in Qt 4.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextDocumentWriter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextDocumentWriter is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>io</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To write a document, construct a <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> object with either a file name or a device object, and specify the document format to be written. You can construct a writer and set the format using <db:link xlink:href="qtextdocumentwriter.xml#setFormat">setFormat</db:link>() later.</db:para>
<db:para>Call <db:link xlink:href="qtextdocumentwriter.xml#write">write</db:link>() to write the document to the device. If the document is successfully written, this function returns <db:code>true</db:code>. However, if an error occurs when writing the document, it will return false.</db:para>
<db:para>Call <db:link xlink:href="qtextdocumentwriter.xml#supportedDocumentFormats">supportedDocumentFormats</db:link>() for a list of formats that <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> can write.</db:para>
<db:para>Since the capabilities of the supported output formats vary considerably, the writer simply outputs the appropriate subset of objects for each format. This typically includes the formatted text and images contained in a document.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextDocumentWriter">
<db:title>QTextDocumentWriter::QTextDocumentWriter()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextDocumentWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocumentWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> object. Before writing, you must call <db:link xlink:href="qtextdocumentwriter.xml#setFormat">setFormat</db:link>() to set a document format, then <db:link xlink:href="qtextdocumentwriter.xml#setDevice">setDevice</db:link>() or <db:link xlink:href="qtextdocumentwriter.xml#setFileName">setFileName</db:link>().</db:para>
</db:section>
<db:section xml:id="QTextDocumentWriter-1">
<db:title>QTextDocumentWriter::QTextDocumentWriter(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QTextDocumentWriter</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocumentWriter(QIODevice *device, const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> object to write to the given <db:code role="parameter">device</db:code> in the document format specified by <db:code role="parameter">format</db:code>.</db:para>
</db:section>
<db:section xml:id="QTextDocumentWriter-2">
<db:title>[explicit] QTextDocumentWriter::QTextDocumentWriter(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QTextDocumentWriter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocumentWriter(const QString &amp;fileName, const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> object that will write to a file with the name <db:code role="parameter">fileName</db:code>, using the document format specified by <db:code role="parameter">format</db:code>. If <db:code role="parameter">format</db:code> is not provided, <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> will detect the document format by inspecting the extension of <db:code role="parameter">fileName</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTextDocumentWriter">
<db:title>QTextDocumentWriter::~QTextDocumentWriter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QTextDocumentWriter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextDocumentWriter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> object.</db:para>
</db:section>
<db:section xml:id="codec">
<db:title>QTextCodec *QTextDocumentWriter::codec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextCodec *</db:type>
<db:methodname>codec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCodec * codec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the codec that is currently assigned to the writer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setCodec">setCodec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="device">
<db:title>QIODevice *QTextDocumentWriter::device() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>device</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * device() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device currently assigned, or <db:code>nullptr</db:code> if no device has been assigned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QTextDocumentWriter::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the currently assigned device is a <db:link xlink:href="qfile.xml">QFile</db:link>, or if <db:link xlink:href="qtextdocumentwriter.xml#setFileName">setFileName</db:link>() has been called, this function returns the name of the file to be written to. In all other cases, it returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>QByteArray QTextDocumentWriter::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the format used for writing documents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCodec">
<db:title>void QTextDocumentWriter::setCodec(QTextCodec *<db:emphasis>codec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCodec</db:methodname>
<db:methodparam>
<db:type>QTextCodec *</db:type>
<db:parameter>codec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCodec(QTextCodec *codec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the codec for this stream to <db:code role="parameter">codec</db:code>. The codec is used for encoding any data that is written. By default, <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> uses UTF-8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#codec">codec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevice">
<db:title>void QTextDocumentWriter::setDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevice(QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the writer's device to the <db:code role="parameter">device</db:code> specified. If a device has already been set, the old device is removed but otherwise left unchanged.</db:para>
<db:para>If the device is not already open, <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> will attempt to open the device in <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode by calling open().</db:para>
<db:note>
<db:para>This will not work for certain devices, such as <db:link xlink:href="qprocess.xml">QProcess</db:link>, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> and <db:link xlink:href="qudpsocket.xml">QUdpSocket</db:link>, where some configuration is required before the device can be opened.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QTextDocumentWriter::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the file to be written to <db:code role="parameter">fileName</db:code>. Internally, <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> will create a <db:link xlink:href="qfile.xml">QFile</db:link> and open it in <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link> mode, and use this file when writing the document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setDevice">setDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QTextDocumentWriter::setFormat(const QByteArray &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QByteArray &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the format used to write documents to the <db:code role="parameter">format</db:code> specified. <db:code role="parameter">format</db:code> is a case insensitive text string. For example:</db:para>
<db:programlisting language="cpp">        QTextDocumentWriter writer;
        writer.setFormat(&quot;odf&quot;); // same as writer.setFormat(&quot;ODF&quot;);
</db:programlisting>
<db:para>You can call <db:link xlink:href="qtextdocumentwriter.xml#supportedDocumentFormats">supportedDocumentFormats</db:link>() for the full list of formats <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link> supports.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDocumentFormats">
<db:title>[static] QList&lt;QByteArray&gt; QTextDocumentWriter::supportedDocumentFormats()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>supportedDocumentFormats</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; supportedDocumentFormats()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of document formats supported by <db:link xlink:href="qtextdocumentwriter.xml">QTextDocumentWriter</db:link>.</db:para>
<db:para>By default, Qt can write the following formats:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>plaintext</db:para>
</db:td>
<db:td>
<db:para>Plain text</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HTML</db:para>
</db:td>
<db:td>
<db:para>HyperText Markup Language</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>markdown</db:para>
</db:td>
<db:td>
<db:para>Markdown (CommonMark or GitHub dialects)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ODF</db:para>
</db:td>
<db:td>
<db:para>OpenDocument Format</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextdocumentwriter.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>bool QTextDocumentWriter::write(const QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(const QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">document</db:code> to the assigned device or file and returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="write-1">
<db:title>bool QTextDocumentWriter::write(const QTextDocumentFragment &amp;<db:emphasis>fragment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>write</db:methodname>
<db:methodparam>
<db:type>const QTextDocumentFragment &amp;</db:type>
<db:parameter>fragment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool write(const QTextDocumentFragment &amp;fragment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the document fragment specified by <db:code role="parameter">fragment</db:code> to the assigned device or file and returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
