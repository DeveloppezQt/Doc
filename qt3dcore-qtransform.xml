<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTransform Class</db:title>
<db:subtitle>Qt3DCore::QTransform</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Used to perform transforms on meshes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTransform</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3DCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3DCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-core-transform.xml" xlink:role="">Transform</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">Qt3DCore::QComponent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link> component is not shareable between multiple <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link>'s. The transformation is held as QVector3D scale, QQuaternion rotation and QVector3D translation components. The transformations are applied to the mesh in that order. When <db:link xlink:href="qt3dcore-qtransform.xml#matrix-prop">QTransform::matrix</db:link> property is set, it is decomposed to these transform components and corresponding signals are emitted.</db:para>
<db:para>Several helper functions are provided to set up the <db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link>; <db:link xlink:href="qt3dcore-qtransform.xml#fromAxisAndAngle">fromAxisAndAngle</db:link> and <db:link xlink:href="qt3dcore-qtransform.xml#fromAxesAndAngles">fromAxesAndAngles</db:link> can be used to set the rotation around specific axes, <db:link xlink:href="qt3dcore-qtransform.xml#fromEulerAngles">fromEulerAngles</db:link> can be used to set the rotation based on euler angles and <db:link xlink:href="qt3dcore-qtransform.xml#rotateAround">rotateAround</db:link> can be used to rotate the object around specific point relative to local origin.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="matrix-prop">
<db:title>matrix : QMatrix4x4</db:title>
<db:para>Holds the QMatrix4x4 of the transform.</db:para>
<db:note>
<db:para>When the matrix property is set, it is decomposed to translation, rotation and scale components.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMatrix4x4</db:type> <db:emphasis role="bold">matrix</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMatrix</db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>matrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">matrixChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotation-prop">
<db:title>rotation : QQuaternion</db:title>
<db:para>Holds the rotation of the transform as QQuaternion.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QQuaternion</db:type> <db:emphasis role="bold">rotation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotation</db:emphasis>(const <db:type>QQuaternion</db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationChanged</db:emphasis>(const <db:type>QQuaternion</db:type> &amp;<db:emphasis>rotation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationX-prop">
<db:title>rotationX : float</db:title>
<db:para>Holds the x rotation of the transform as Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationX</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationX</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationX</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationXChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationX</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationY-prop">
<db:title>rotationY : float</db:title>
<db:para>Holds the y rotation of the transform as Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationY</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationY</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationY</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationYChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationY</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="rotationZ-prop">
<db:title>rotationZ : float</db:title>
<db:para>Holds the z rotation of the transform as Euler angle.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">rotationZ</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setRotationZ</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationZ</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">rotationZChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>rotationZ</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scale-prop">
<db:title>scale : float</db:title>
<db:para>Holds the uniform scale of the transform. If the scale has been set with <db:link xlink:href="qt3dcore-qtransform.xml#scale3D-prop">setScale3D</db:link>, holds the x value only.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold">scale</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScale</db:emphasis>(<db:type>float</db:type> <db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scaleChanged</db:emphasis>(<db:type>float</db:type> <db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="scale3D-prop">
<db:title>scale3D : QVector3D</db:title>
<db:para>Holds the scale of the transform as QVector3D.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">scale3D</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setScale3D</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">scale3DChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>scale</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="translation-prop">
<db:title>translation : QVector3D</db:title>
<db:para>Holds the translation of the transform as QVector3D.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QVector3D</db:type> <db:emphasis role="bold">translation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTranslation</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>translation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">translationChanged</db:emphasis>(const <db:type>QVector3D</db:type> &amp;<db:emphasis>translation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="worldMatrix-prop">
<db:title>[read-only] worldMatrix : const QMatrix4x4</db:title>
<db:para>Holds the world transformation matrix for the transform. This assumes the <db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link> component is being referenced by a <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link>. This makes it more convenient to identify when a <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link> part of a subtree has been transformed in the world even though its local transformation might not have changed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QMatrix4x4</db:type> <db:emphasis role="bold"><db:link xlink:href="qt3dcore-qtransform.xml#worldMatrix">worldMatrix</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">worldMatrixChanged</db:emphasis>(const <db:type>QMatrix4x4</db:type> &amp;<db:emphasis>worldMatrix</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTransform">
<db:title>[explicit] QTransform::QTransform(Qt3DCore::QNode *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="fromAxes">
<db:title>[static] QQuaternion QTransform::fromAxes(const QVector3D &amp;<db:emphasis>xAxis</db:emphasis>, const QVector3D &amp;<db:emphasis>yAxis</db:emphasis>, const QVector3D &amp;<db:emphasis>zAxis</db:emphasis>)</db:title>
<db:para>Creates a QQuaterniom definining a rotation from the axes <db:code role="parameter">xAxis</db:code>, <db:code role="parameter">yAxis</db:code> and <db:code role="parameter">zAxis</db:code>.</db:para>
</db:section>
<db:section xml:id="fromAxesAndAngles">
<db:title>[static] QQuaternion QTransform::fromAxesAndAngles(const QVector3D &amp;<db:emphasis>axis1</db:emphasis>, float <db:emphasis>angle1</db:emphasis>, const QVector3D &amp;<db:emphasis>axis2</db:emphasis>, float <db:emphasis>angle2</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, and <db:code role="parameter">angle2</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="fromAxesAndAngles-1">
<db:title>[static] QQuaternion QTransform::fromAxesAndAngles(const QVector3D &amp;<db:emphasis>axis1</db:emphasis>, float <db:emphasis>angle1</db:emphasis>, const QVector3D &amp;<db:emphasis>axis2</db:emphasis>, float <db:emphasis>angle2</db:emphasis>, const QVector3D &amp;<db:emphasis>axis3</db:emphasis>, float <db:emphasis>angle3</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">axis1</db:code>, <db:code role="parameter">angle1</db:code>, <db:code role="parameter">axis2</db:code>, <db:code role="parameter">angle2</db:code>, <db:code role="parameter">axis3</db:code>, and <db:code role="parameter">angle3</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle">
<db:title>[static] QQuaternion QTransform::fromAxisAndAngle(const QVector3D &amp;<db:emphasis>axis</db:emphasis>, float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="fromAxisAndAngle-1">
<db:title>[static] QQuaternion QTransform::fromAxisAndAngle(float <db:emphasis>x</db:emphasis>, float <db:emphasis>y</db:emphasis>, float <db:emphasis>z</db:emphasis>, float <db:emphasis>angle</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">z</db:code>, and <db:code role="parameter">angle</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles">
<db:title>[static] QQuaternion QTransform::fromEulerAngles(const QVector3D &amp;<db:emphasis>eulerAngles</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">eulerAngles</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="fromEulerAngles-1">
<db:title>[static] QQuaternion QTransform::fromEulerAngles(float <db:emphasis>pitch</db:emphasis>, float <db:emphasis>yaw</db:emphasis>, float <db:emphasis>roll</db:emphasis>)</db:title>
<db:para>Creates a QQuaternion from <db:code role="parameter">pitch</db:code>, <db:code role="parameter">yaw</db:code>, and <db:code role="parameter">roll</db:code>. Returns the resulting QQuaternion.</db:para>
</db:section>
<db:section xml:id="rotateAround">
<db:title>[static] QMatrix4x4 QTransform::rotateAround(const QVector3D &amp;<db:emphasis>point</db:emphasis>, float <db:emphasis>angle</db:emphasis>, const QVector3D &amp;<db:emphasis>axis</db:emphasis>)</db:title>
<db:para>Creates a rotation matrix from <db:code role="parameter">axis</db:code> and <db:code role="parameter">angle</db:code> around <db:code role="parameter">point</db:code>. Returns the resulting QMatrix4x4.</db:para>
</db:section>
<db:section xml:id="rotateFromAxes">
<db:title>[static] QMatrix4x4 QTransform::rotateFromAxes(const QVector3D &amp;<db:emphasis>xAxis</db:emphasis>, const QVector3D &amp;<db:emphasis>yAxis</db:emphasis>, const QVector3D &amp;<db:emphasis>zAxis</db:emphasis>)</db:title>
<db:para>Returns a rotation matrix defined from the axes <db:code role="parameter">xAxis</db:code>, <db:code role="parameter">yAxis</db:code>, <db:code role="parameter">zAxis</db:code>.</db:para>
</db:section>
<db:section xml:id="worldMatrix">
<db:title>QMatrix4x4 QTransform::worldMatrix() const</db:title>
<db:para>Returns the world transformation matrix associated to the <db:link xlink:href="qt3dcore-qtransform.xml">QTransform</db:link> when referenced by a <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link> which may be part of a <db:link xlink:href="qt3dcore-qentity.xml">QEntity</db:link> hierarchy.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qt3dcore-qtransform.xml#worldMatrix-prop">worldMatrix</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
