<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt XML</db:title>
<db:productname>QtXml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Use <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> for reading XML files.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework and align with modern standards.</db:para>
<db:para>Qt 6 enforces XML 1.0 rules more strictly than Qt 5. In Qt 5,the XML parser was more lenient, allowing certain constructs that were not compliant with the XML 1.0 specification. Qt 6 corrects this behavior, ensuring that XML handling follows the standard properly. If your application relies on behavior that was incorrectly permitted in Qt 5, you may need to adjust your XML documents or processing logic accordingly.</db:para>
<db:para>For more details on XML 1.0 rules, see the official W3C XML specification: <db:link xlink:href="https://www.w3.org/TR/xml/">Extensible Markup Language (XML) 1.0 (Fifth Edition)</db:link></db:para>
<db:para>In this topic we summarize those changes in Qt XML, and provide guidance to handle them.</db:para>
<db:section xml:id="simple-api-for-xml-sax-parser">
<db:title>Simple API for XML (SAX) parser</db:title>
<db:para>All <db:emphasis role="bold">SAX</db:emphasis> classes have been removed from Qt XML. Use <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> for reading XML files. Here are some simple steps to port your current code to <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>:</db:para>
<db:para>For example, if you have code like</db:para>
<db:programlisting language="cpp">QFile *file = new QFile(...);
QXmlInputSource *source = new QXmlInputSource(file);

Handler *handler = new Handler;

QXmlSimpleReader xmlReader;
xmlReader.setErrorHandler(handler);
xmlReader.setContentHandler(handler);

if (xmlReader.parse(source)) {
    ... // do processing
} else {
    ... // do error handling
}
</db:programlisting>
<db:para>you can rewrite it as</db:para>
<db:programlisting language="cpp">QFile file = ...;
QXmlStreamReader reader(&amp;file);

while (!reader.atEnd()) {
    reader.readNext();
    ... // do processing
}
if (reader.hasError()) {
    ... // do error handling
}
</db:programlisting>
<db:section xml:id="qdom-and-qdomdocument">
<db:title>QDom and QDomDocument</db:title>
<db:para>As <db:emphasis role="bold">SAX</db:emphasis> classes have been removed from Qt XML, <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> has been re-implemented using <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link>. This causes a few behavioral changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Attribute values will be normalized. For example, &lt;tag attr=&quot; a \n b &quot; /&gt; is equivalent to &lt;tag attr=&quot;a b&quot;/&gt;.</db:para>
</db:listitem>
<db:listitem>
<db:para>Identical qualified attribute names are no longer allowed. This means attributes of an element must have unique names.</db:para>
</db:listitem>
<db:listitem>
<db:para>Undeclared namespace prefixes are no longer allowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more details see: <db:link xlink:href="https://www.w3.org/TR/xml/#AVNormalize">Attribute-Value Normalization in XML 1.0</db:link></db:para>
</db:section>
<db:section xml:id="control-characters">
<db:title>Control characters</db:title>
<db:para>In Qt 6, control characters such as U+0000—U+001F, U+007F, and U+0080—U+009F are now correctly rejected per XML 1.0 rules. They were incorrectly allowed in Qt 5. Before using XML with Qt6 ensure that your XML documents contain only valid XML 1.0-compliant characters. If control characters are necessary, encode them using text-safe format.</db:para>
<db:para>For more details see: <db:link xlink:href="https://www.w3.org/TR/xml/#charsets">Characters in XML 1.0</db:link></db:para>
</db:section>
<db:section xml:id="html-entities-in-xml">
<db:title>HTML Entities in XML</db:title>
<db:para>In Qt 6, HTML entities are no longer valid unless explicitly declared in a Document Type Definition (DTD). In Qt 5, certain HTML-specific entities (e.g., &amp;nbsp;) were allowed, even without declaration. To ensure compatibility in Qt 6 use numeric character references, define required entities in a DTD or if your content relies on HTML entities, process the XML as HTML instead.</db:para>
<db:para>For more details see: <db:link xlink:href="https://www.w3.org/TR/xml/#charencoding">Character Encoding in Entities in XML 1.0</db:link></db:para>
</db:section>
<db:section xml:id="spacing-only-text-nodes">
<db:title>Spacing-only text nodes</db:title>
<db:para>By default, text nodes containing only spacing characters are stripped and won't appear in the <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link>. The Qt 5 way of changing this behavior was using the <db:link xlink:href="qdomdocument.xml#setContent">QDomDocument::setContent</db:link>() overload that allowed a QXmlReader to be supplied. That overload was removed in Qt 6.0, but since Qt 6.5, you can pass <db:link xlink:href="qdomdocument.xml#ParseOption-enum">QDomDocument::ParseOption::PreserveSpacingOnlyNodes</db:link> as a parse option, to specify that spacing-only text nodes must be preserved.</db:para>
<db:para>If you use <db:link xlink:href="qdomdocument.xml">QDomDocument</db:link> and rely on any of these, you must update your code and XML documents accordingly.</db:para>
</db:section>
</db:section>
<db:section xml:id="qt-core5-compatibility-library">
<db:title>Qt Core5 compatibility library</db:title>
<db:para>If your application or library cannot be ported right now, the <db:link xlink:href="qxmlsimplereader.xml">QXmlSimpleReader</db:link> and related classes still exist in Qt5Compat to keep old code-bases working. If you want to use those SAX classes further, you need to link against the new Qt5Compat module and add this line to your <db:link xlink:href="resources.xml#qmake">qmake</db:link> .pro file:</db:para>
<db:programlisting language="cpp">QT += core5compat
</db:programlisting>
<db:para>In case you already ported your application or library to the cmake build system, add the following to your CMakeList.txt:</db:para>
<db:programlisting language="cpp">PUBLIC_LIBRARIES
    Qt::Core5Compat
</db:programlisting>
</db:section>
</db:article>
