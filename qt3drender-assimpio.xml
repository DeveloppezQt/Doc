<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>AssimpIO Class</db:title>
<db:subtitle>Qt3DRender::AssimpIO</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a generic way of loading various 3D assets format into a Qt3D scene.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>AssimpIO</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It should be noted that Assimp aiString is explicitly defined to be UTF-8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>GLTFPIO</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="AssimpIO">
<db:title>AssimpIO::AssimpIO()</db:title>
<db:para>Constructor. Initializes a new instance of <db:link xlink:href="qt3drender-assimpio.xml">AssimpIO</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.AssimpIO">
<db:title>[noexcept] AssimpIO::~AssimpIO()</db:title>
<db:para>Destructor. Cleans the parser properly before destroying it.</db:para>
</db:section>
<db:section xml:id="isFileTypeSupported">
<db:title>bool AssimpIO::isFileTypeSupported(const QUrl &amp;<db:emphasis>source</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the extension of <db:code role="parameter">source</db:code> is supported by the assimp parser.</db:para>
</db:section>
<db:section xml:id="node">
<db:title>Qt3DCore::QEntity *AssimpIO::node(const QString &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Returns a Node from the scene identified by <db:code role="parameter">id</db:code>. Returns <db:code>nullptr</db:code> if the node was not found.</db:para>
</db:section>
<db:section xml:id="scene">
<db:title>Qt3DCore::QEntity *AssimpIO::scene(const QString &amp;<db:emphasis>id</db:emphasis> = QString())</db:title>
<db:para>Returns a Entity node which is the root node of the scene node specified by <db:code role="parameter">id</db:code>. If <db:code role="parameter">id</db:code> is empty, the scene is assumed to be the root node of the scene.</db:para>
<db:para>Returns <db:code>nullptr</db:code> if <db:code role="parameter">id</db:code> was specified but no node matching it was found.</db:para>
</db:section>
<db:section xml:id="setSource">
<db:title>void AssimpIO::setSource(const QUrl &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">source</db:code> used by the parser to load the asset file. If the file is valid, this will trigger parsing of the file.</db:para>
</db:section>
</db:section>
</db:article>
