<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Custom Morphing Animation</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates writing C++ custom geometry with a morph target.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import Example

Window {
    id: window
    visible: true
    width: 1366
    height: 768
    title: qsTr(&quot;Custom Morphing Example&quot;)

    View3D {
        id: view
        anchors.fill: parent

        environment: SceneEnvironment {
            clearColor: &quot;black&quot;
            backgroundMode: SceneEnvironment.Color
        }

        DirectionalLight {
            eulerRotation.x: -10
            NumberAnimation on eulerRotation.y {
                from: 0
                to: 360
                duration: 17000
                loops: Animation.Infinite
            }
            ambientColor: Qt.rgba(0.3, 0.3, 0.3, 1.0)
        }

        PointLight {
            position: Qt.vector3d(-15, 10, 15)
        }

        PerspectiveCamera {
            id: camera
            position.z: 25.0
            position.y: 10.0
            eulerRotation.x: -30
            clipNear: 1.0
            clipFar: 40.0
        }

        PrincipledMaterial {
            id: material
            baseColor: &quot;#af4f1f&quot;
            roughness: 0.3
            specularAmount: 0.6
        }

        MorphTarget {
            id: morphtarget
            attributes: MorphTarget.Position | MorphTarget.Normal
            SequentialAnimation on weight {
                PauseAnimation { duration: 1000 }
                NumberAnimation { from: 0; to: 1; duration: 4000 }
                PauseAnimation { duration: 1000 }
                NumberAnimation { from: 1; to: 0; duration: 4000 }
                loops: Animation.Infinite
            }
        }

        Model {
            y: -1
            geometry: MorphGeometry {}
            morphTargets: [ morphtarget ]
            materials: material
        }
    }
}

</db:programlisting>
</db:article>
