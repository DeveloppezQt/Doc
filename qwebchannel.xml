<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebChannel Class</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Exposes QObjects to remote HTML clients.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebChannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webchannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> fills the gap between C++ applications and HTML/JavaScript applications. By publishing a <db:link xlink:href="qobject.xml">QObject</db:link> derived object to a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> and using the <db:link xlink:href="qtwebchannel-javascript.xml">qwebchannel.js</db:link> on the HTML side, one can transparently access properties and public slots and methods of the <db:link xlink:href="qobject.xml">QObject</db:link>. No manual message passing and serialization of data is required, property updates and signal emission on the C++ side get automatically transmitted to the potentially remotely running HTML clients. On the client side, a JavaScript object will be created for any published C++ <db:link xlink:href="qobject.xml">QObject</db:link>. It mirrors the C++ object's API and thus is intuitively useable.</db:para>
<db:para><db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> transparently supports <db:link xlink:href="qfuture.xml">QFuture</db:link>. When a client calls a method that returns a <db:link xlink:href="qfuture.xml">QFuture</db:link>, <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> will send a response with the <db:link xlink:href="qfuture.xml">QFuture</db:link> result only after the <db:link xlink:href="qfuture.xml">QFuture</db:link> has finished.</db:para>
<db:para>The C++ <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> API makes it possible to talk to any HTML client, which could run on a local or even remote machine. The only limitation is that the HTML client supports the JavaScript features used by <db:code>qwebchannel.js</db:code>. As such, one can interact with basically any modern HTML browser or standalone JavaScript runtime, such as node.js.</db:para>
<db:para>There also exists a declarative <db:link xlink:href="qtwebchannel-qmlmodule.xml">WebChannel API</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebchannel-standalone-example.xml">Qt WebChannel Standalone Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebchannel-javascript.xml">JavaScript API</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blockUpdates-prop">
<db:title>[bindable] blockUpdates : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>blockUpdates</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">blockUpdates</db:synopsisinfo>
<db:synopsisinfo role="setter">setBlockUpdates</db:synopsisinfo>
<db:synopsisinfo role="notifier">blockUpdatesChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>When set to true, updates are blocked and remote clients will not be notified about property changes.</db:para>
<db:para>The changes are recorded and sent to the clients once updates become unblocked again by setting this property to false. By default, updates are not blocked.</db:para>
</db:section>
<db:section xml:id="propertyUpdateInterval-prop">
<db:title>[bindable] propertyUpdateInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>propertyUpdateInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">propertyUpdateInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setPropertyUpdateInterval</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the property update interval.</db:para>
<db:para>This interval can be changed to a different interval in milliseconds by setting it to a positive value. Property updates are batched and sent out after the interval expires. If set to zero, the updates occurring within a single event loop run are batched and sent out on the next run. If negative, updates will be sent immediately. Default value is 50 milliseconds.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebChannel-1">
<db:title>[explicit] QWebChannel::QWebChannel(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebChannel</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebChannel(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> is only fully operational once you connect it to a <db:link xlink:href="qwebchannelabstracttransport.xml">QWebChannelAbstractTransport</db:link>. The HTML clients also need to be setup appropriately using <db:link xlink:href="qtwebchannel-javascript.xml"><db:code>qwebchannel.js</db:code></db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebChannel">
<db:title>[virtual] QWebChannel::~QWebChannel()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QWebChannel</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWebChannel()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
</db:section>
<db:section xml:id="connectTo">
<db:title>void QWebChannel::connectTo(QWebChannelAbstractTransport *<db:emphasis>transport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>connectTo</db:methodname>
<db:methodparam>
<db:type>QWebChannelAbstractTransport *</db:type>
<db:parameter>transport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void connectTo(QWebChannelAbstractTransport *transport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Connects the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> to the given <db:code role="parameter">transport</db:code> object.</db:para>
<db:para>The transport object then handles the communication between the C++ application and a remote HTML client.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannelabstracttransport.xml">QWebChannelAbstractTransport</db:link></db:member>
<db:member><db:link xlink:href="qwebchannel.xml#disconnectFrom">QWebChannel::disconnectFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deregisterObject">
<db:title>void QWebChannel::deregisterObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deregisterObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deregisterObject(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deregisters the given <db:code role="parameter">object</db:code> from the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>Remote clients will receive a <db:code>destroyed</db:code> signal for the given object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectFrom">
<db:title>void QWebChannel::disconnectFrom(QWebChannelAbstractTransport *<db:emphasis>transport</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disconnectFrom</db:methodname>
<db:methodparam>
<db:type>QWebChannelAbstractTransport *</db:type>
<db:parameter>transport</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disconnectFrom(QWebChannelAbstractTransport *transport)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disconnects the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> from the <db:code role="parameter">transport</db:code> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#connectTo">QWebChannel::connectTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerObject">
<db:title>void QWebChannel::registerObject(const QString &amp;<db:emphasis>id</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerObject</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerObject(const QString &amp;id, QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a single object to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>The properties, signals and public methods of the <db:code role="parameter">object</db:code> are published to the remote clients. There, an object with the identifier <db:code role="parameter">id</db:code> is then constructed.</db:para>
<db:note>
<db:para>A property that is <db:code>BINDABLE</db:code> but does not have a <db:code>NOTIFY</db:code> signal will have working property updates on the client side, but no mechanism to register a callback for the change notifications.</db:para>
</db:note>
<db:note>
<db:para>A current limitation is that objects must be registered before any client is initialized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerObjects">
<db:title>void QWebChannel::registerObjects(const QHash&lt;QString, QObject *&gt; &amp;<db:emphasis>objects</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerObjects</db:methodname>
<db:methodparam>
<db:type>const QHash&lt;QString, QObject *&gt; &amp;</db:type>
<db:parameter>objects</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerObjects(const QHash&lt;QString, QObject *&gt; &amp;objects)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers a group of objects to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>The properties, signals and public invokable methods of the objects are published to the remote clients. There, an object with the identifier used as key in the <db:code role="parameter">objects</db:code> map is then constructed.</db:para>
<db:note>
<db:para>A current limitation is that objects must be registered before any client is initialized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registeredObjects">
<db:title>QHash&lt;QString, QObject *&gt; QWebChannel::registeredObjects() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHash&lt;QString, QObject *&gt;</db:type>
<db:methodname>registeredObjects</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHash&lt;QString, QObject *&gt; registeredObjects() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the map of registered objects that are published to remote clients.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
