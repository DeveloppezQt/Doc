<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebChannel Class</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Exposes QObjects to remote HTML clients.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebChannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webchannel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> fills the gap between C++ applications and HTML/JavaScript applications. By publishing a <db:link xlink:href="qobject.xml">QObject</db:link> derived object to a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> and using the <db:link xlink:href="qtwebchannel-javascript.xml">qwebchannel.js</db:link> on the HTML side, one can transparently access properties and public slots and methods of the <db:link xlink:href="qobject.xml">QObject</db:link>. No manual message passing and serialization of data is required, property updates and signal emission on the C++ side get automatically transmitted to the potentially remotely running HTML clients. On the client side, a JavaScript object will be created for any published C++ <db:link xlink:href="qobject.xml">QObject</db:link>. It mirrors the C++ object's API and thus is intuitively useable.</db:para>
<db:para>The C++ <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> API makes it possible to talk to any HTML client, which could run on a local or even remote machine. The only limitation is that the HTML client supports the JavaScript features used by <db:code>qwebchannel.js</db:code>. As such, one can interact with basically any modern HTML browser or standalone JavaScript runtime, such as node.js.</db:para>
<db:para>There also exists a declarative <db:link xlink:href="qtwebchannel-qmlmodule.xml">WebChannel API</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebchannel-standalone-example.xml">Qt WebChannel Standalone Example</db:link></db:member>
<db:member><db:link xlink:href="qtwebchannel-javascript.xml">JavaScript API</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="blockUpdates-prop">
<db:title>blockUpdates : bool</db:title>
<db:para>When set to true, updates are blocked and remote clients will not be notified about property changes.</db:para>
<db:para>The changes are recorded and sent to the clients once updates become unblocked again by setting this property to false. By default, updates are not blocked.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">blockUpdates</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBlockUpdates</db:emphasis>(<db:type>bool</db:type> <db:emphasis>block</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">blockUpdatesChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>block</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebChannel">
<db:title>[explicit] QWebChannel::QWebChannel(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> object with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> is only fully operational once you connect it to a <db:link xlink:href="qwebchannelabstracttransport.xml">QWebChannelAbstractTransport</db:link>. The HTML clients also need to be setup appropriately using <db:link xlink:href="qtwebchannel-javascript.xml"><db:code>qwebchannel.js</db:code></db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QWebChannel">
<db:title>[virtual noexcept] QWebChannel::~QWebChannel()</db:title>
<db:para>Destroys the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
</db:section>
<db:section xml:id="connectTo">
<db:title>void QWebChannel::connectTo(QWebChannelAbstractTransport *<db:emphasis>transport</db:emphasis>)</db:title>
<db:para>Connects the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> to the given <db:code role="parameter">transport</db:code> object.</db:para>
<db:para>The transport object then handles the communication between the C++ application and a remote HTML client.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannelabstracttransport.xml">QWebChannelAbstractTransport</db:link></db:member>
<db:member><db:link xlink:href="qwebchannel.xml#disconnectFrom">QWebChannel::disconnectFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deregisterObject">
<db:title>void QWebChannel::deregisterObject(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Deregisters the given <db:code role="parameter">object</db:code> from the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>Remote clients will receive a <db:code>destroyed</db:code> signal for the given object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disconnectFrom">
<db:title>void QWebChannel::disconnectFrom(QWebChannelAbstractTransport *<db:emphasis>transport</db:emphasis>)</db:title>
<db:para>Disconnects the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> from the <db:code role="parameter">transport</db:code> object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#connectTo">QWebChannel::connectTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerObject">
<db:title>void QWebChannel::registerObject(const QString &amp;<db:emphasis>id</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Registers a single object to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>The properties, signals and public methods of the <db:code role="parameter">object</db:code> are published to the remote clients. There, an object with the identifier <db:code role="parameter">id</db:code> is then constructed.</db:para>
<db:note>
<db:para>A current limitation is that objects must be registered before any client is initialized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerObjects">
<db:title>void QWebChannel::registerObjects(const QHash&lt;QString, QObject *&gt; &amp;<db:emphasis>objects</db:emphasis>)</db:title>
<db:para>Registers a group of objects to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link>.</db:para>
<db:para>The properties, signals and public invokable methods of the objects are published to the remote clients. There, an object with the identifier used as key in the <db:code role="parameter">objects</db:code> map is then constructed.</db:para>
<db:note>
<db:para>A current limitation is that objects must be registered before any client is initialized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registeredObjects">QWebChannel::registeredObjects</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registeredObjects">
<db:title>QHash&lt;QString, QObject *&gt; QWebChannel::registeredObjects() const</db:title>
<db:para>Returns the map of registered objects that are published to remote clients.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebchannel.xml#registerObjects">QWebChannel::registerObjects</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#registerObject">QWebChannel::registerObject</db:link>()</db:member>
<db:member><db:link xlink:href="qwebchannel.xml#deregisterObject">QWebChannel::deregisterObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
