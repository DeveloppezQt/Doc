<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Icons Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Icons example shows how QIcon can generate pixmaps reflecting an icon's state, mode and size.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>These pixmaps are generated from the set of pixmaps made available to the icon, and are used by Qt widgets to show an icon representing a particular action.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Icons example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Contents:</db:para>
<db:section xml:id="qicon-overview">
<db:title>QIcon Overview</db:title>
<db:para>The QIcon class provides scalable icons in different modes and states. An icon's state and mode are depending on the intended use of the icon. Qt currently defines four modes:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Mode</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QIcon::Normal</db:para>
</db:td>
<db:td>
<db:para>Display the pixmap when the user is not interacting with the icon, but the functionality represented by the icon is available.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QIcon::Active</db:para>
</db:td>
<db:td>
<db:para>Display the pixmap when the functionality represented by the icon is available and the user is interacting with the icon, for example, moving the mouse over it or clicking it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QIcon::Disabled</db:para>
</db:td>
<db:td>
<db:para>Display the pixmap when the functionality represented by the icon is not available.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QIcon::Selected</db:para>
</db:td>
<db:td>
<db:para>Display the pixmap when the icon is selected.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>QIcon's states are QIcon::On and QIcon::Off, which will display the pixmap when the widget is in the respective state. The most common usage of QIcon's states are when displaying checkable tool buttons or menu entries (see QAbstractButton::setCheckable() and QAction::setCheckable()). When a tool button or menu entry is checked, the QIcon's state is On, otherwise it's Off. You can, for example, use the QIcon's states to display differing pixmaps depending on whether the tool button or menu entry is checked or not.</db:para>
<db:para>A QIcon can generate smaller, larger, active, disabled, and selected pixmaps from the set of pixmaps it is given. Such pixmaps are used by Qt widgets to show an icon representing a particular action.</db:para>
</db:section>
<db:section xml:id="overview-of-the-icons-application">
<db:title>Overview of the Icons Application</db:title>
<db:para>With the Icons application you get a preview of an icon's generated pixmaps reflecting its different states, modes and size.</db:para>
<db:para>When an image is loaded into the application, it is converted into a pixmap and becomes a part of the set of pixmaps available to the icon. An image can be excluded from this set by checking off the related checkbox. The application provides a sub directory containing sets of images explicitly designed to illustrate how Qt renders an icon in different modes and states.</db:para>
<db:para>The application allows you to manipulate the icon size with some predefined sizes and a spin box. The predefined sizes are style dependent, but most of the styles have the same values. Only the macOS style differs by using 32 pixels instead of 16 pixels for toolbar buttons. You can navigate between the available styles using the <db:guilabel>View</db:guilabel> menu.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the View menu</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons-view-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:guilabel>View</db:guilabel> menu also provide the option to make the application guess the icon state and mode from an image's file name. The <db:guilabel>File</db:guilabel> menu provide the options of adding an image and removing all images. These last options are also available through a context menu that appears if you press the right mouse button within the table of image files. In addition, the <db:guilabel>File</db:guilabel> menu provide an <db:guilabel>Exit</db:guilabel> option, and the <db:guilabel>Help</db:guilabel> menu provide information about the example and about Qt.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Find Files</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_find_normal.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The screenshot above shows the application with one image file loaded. The <db:guilabel>Guess Image Mode/State</db:guilabel> is enabled and the style is Plastique.</db:para>
<db:para>When QIcon is provided with only one available pixmap, that pixmap is used for all the states and modes. In this case the pixmap's icon mode is set to normal, and the generated pixmaps for the normal and active modes will look the same. But in disabled and selected mode, Qt will generate a slightly different pixmap.</db:para>
<db:para>The next screenshot shows the application with an additional file loaded, providing QIcon with two available pixmaps. Note that the new image file's mode is set to disabled. When rendering the <db:guilabel>Disabled</db:guilabel> mode pixmaps, Qt will now use the new image. We can see the difference: The generated disabled pixmap in the first screenshot is slightly darker than the pixmap with the originally set disabled mode in the second screenshot.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Find Files</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_find_normal_disabled.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>When Qt renders the icon's pixmaps it searches through the set of available pixmaps following a particular algorithm. The algorithm is documented in QIcon, but we will describe some particular cases below.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Find Files</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_monkey_active.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In the screenshot above, we have set <db:code>monkey_on_32x32</db:code> to be an Active/On pixmap and <db:code>monkey_off_64x64</db:code> to be Normal/Off. To render the other six mode/state combinations, QIcon uses the search algorithm described in the table below:</db:para>
<db:informaltable style="generic" width="100%">
<db:thead>
<db:tr>
<db:th colspan="2">
<db:para>Requested Pixmap</db:para>
</db:th>
<db:th colspan="8">
<db:para>Preferred Alternatives (mode/state)</db:para>
</db:th>
</db:tr>
<db:tr>
<db:th>
<db:para>Mode</db:para>
</db:th>
<db:th>
<db:para>State</db:para>
</db:th>
<db:th>
<db:para>1</db:para>
</db:th>
<db:th>
<db:para>2</db:para>
</db:th>
<db:th>
<db:para>3</db:para>
</db:th>
<db:th>
<db:para>4</db:para>
</db:th>
<db:th>
<db:para>5</db:para>
</db:th>
<db:th>
<db:para>6</db:para>
</db:th>
<db:th>
<db:para>7</db:para>
</db:th>
<db:th>
<db:para>8</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Normal</db:para>
</db:td>
<db:td>
<db:para>Off</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">N0</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A0</db:para>
</db:td>
<db:td>
<db:para>N1</db:para>
</db:td>
<db:td>
<db:para>A1</db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>On</db:para>
</db:td>
<db:td>
<db:para>N1</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">A1</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>N0</db:para>
</db:td>
<db:td>
<db:para>A0</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Active</db:para>
</db:td>
<db:td>
<db:para>Off</db:para>
</db:td>
<db:td>
<db:para>A0</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">N0</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A1</db:para>
</db:td>
<db:td>
<db:para>N1</db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>On</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">A1</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>N1</db:para>
</db:td>
<db:td>
<db:para>A0</db:para>
</db:td>
<db:td>
<db:para>N0</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Disabled</db:para>
</db:td>
<db:td>
<db:para>Off</db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">N0'</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A0'</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>N1'</db:para>
</db:td>
<db:td>
<db:para>A1'</db:para>
</db:td>
<db:td>
<db:para>S0'</db:para>
</db:td>
<db:td>
<db:para>S1'</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>On</db:para>
</db:td>
<db:td>
<db:para>D1</db:para>
</db:td>
<db:td>
<db:para>N1'</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">A1'</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>D0</db:para>
</db:td>
<db:td>
<db:para>N0'</db:para>
</db:td>
<db:td>
<db:para>A0'</db:para>
</db:td>
<db:td>
<db:para>S1'</db:para>
</db:td>
<db:td>
<db:para>S0'</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>Selected</db:para>
</db:td>
<db:td>
<db:para>Off</db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">N0''</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>A0''</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
<db:td>
<db:para>N1''</db:para>
</db:td>
<db:td>
<db:para>A1''</db:para>
</db:td>
<db:td>
<db:para>D0''</db:para>
</db:td>
<db:td>
<db:para>D1''</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>On</db:para>
</db:td>
<db:td>
<db:para>S1</db:para>
</db:td>
<db:td>
<db:para>N1''</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">A1''</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>S0</db:para>
</db:td>
<db:td>
<db:para>N0''</db:para>
</db:td>
<db:td>
<db:para>A0''</db:para>
</db:td>
<db:td>
<db:para>D1''</db:para>
</db:td>
<db:td>
<db:para>D0''</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In the table, &quot;0&quot; and &quot;1&quot; stand for Off&quot; and &quot;On&quot;, respectively. Single quotes indicates that QIcon generates a disabled (&quot;grayed out&quot;) version of the pixmap; similarly, double quuote indicate that QIcon generates a selected (&quot;blued out&quot;) version of the pixmap.</db:para>
<db:para>The alternatives used in the screenshot above are shown in bold. For example, the Disabled/Off pixmap is derived by graying out the Normal/Off pixmap (<db:code>monkey_off_64x64</db:code>).</db:para>
<db:para>In the next screenshots, we loaded the whole set of monkey images. By checking or unchecking file names from the image list, we get different results:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_monkey.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of the Monkey Files</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_monkey_mess.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of the Monkey Files</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For any given mode/state combination, it is possible to specify several images at different resolutions. When rendering an icon, QIcon will automatically pick the most suitable image and scale it down if necessary. (QIcon never scales up images, because this rarely looks good.)</db:para>
<db:para>The screenshots below shows what happens when we provide QIcon with three images (<db:code>qt_extended_16x16.png</db:code>, <db:code>qt_extended_32x32.png</db:code>, <db:code>qt_extended_48x48.png</db:code>) and try to render the QIcon at various resolutions:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_8x8.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 8 x 8</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_16x16.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 16 x 16</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_17x17.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 17 x 17</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
</db:td>
<db:td>
<db:para>8 x 8</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">16 x 16</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>17 x 17</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_32x32.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 32 x 32</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_33x33.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 33 x 33</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_48x48.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 48 x 48</db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/icons_qt_extended_64x64.png"/>
</db:imageobject>
</db:inlinemediaobject> Qt Extended icon at 64 x 64</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:emphasis role="bold">32 x 32</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>33 x 33</db:para>
</db:td>
<db:td>
<db:para><db:emphasis role="bold">48 x 48</db:emphasis></db:para>
</db:td>
<db:td>
<db:para>64 x 64</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For sizes up to 16 x 16, QIcon uses <db:code>qt_extended_16x16.png</db:code> and scales it down if necessary. For sizes between 17 x 17 and 32 x 32, it uses <db:code>qt_extended_32x32.png</db:code>. For sizes above 32 x 32, it uses <db:code>qt_extended_48x48.png</db:code>.</db:para>
</db:section>
<db:section xml:id="line-by-line-walkthrough">
<db:title>Line-by-Line Walkthrough</db:title>
<db:para>The Icons example consists of four classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>MainWindow</db:code> inherits QMainWindow and is the main application window.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>IconPreviewArea</db:code> is a custom widget that displays all combinations of states and modes for a given icon.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>IconSizeSpinBox</db:code> is a subclass of QSpinBox that lets the user enter icon sizes (e.g., &quot;48 x 48&quot;).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ImageDelegate</db:code> is a subclass of QItemDelegate that provides comboboxes for letting the user set the mode and state associated with an image.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>We will start by reviewing the <db:code>IconPreviewArea</db:code> class before we take a look at the <db:code>MainWindow</db:code> class. Finally, we will review the <db:code>IconSizeSpinBox</db:code> and <db:code>ImageDelegate</db:code> classes.</db:para>
<db:section xml:id="iconpreviewarea-class-definition">
<db:title>IconPreviewArea Class Definition</db:title>
<db:para>An <db:code>IconPreviewArea</db:code> widget consists of a group box containing a grid of QLabel widgets displaying headers and pixmaps.</db:para>
<db:mediaobject>
<db:alt>Screenshot of IconPreviewArea.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_preview_area.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">class IconPreviewArea : public QWidget
{
    Q_OBJECT

public:
    explicit IconPreviewArea(QWidget *parent = nullptr);

    void setIcon(const QIcon &amp;amp;icon);
    void setSize(const QSize &amp;amp;size);

    static QVector&amp;lt;QIcon::Mode&amp;gt; iconModes();
    static QVector&amp;lt;QIcon::State&amp;gt; iconStates();
    static QStringList iconModeNames();
    static QStringList iconStateNames();

private:
    QLabel *createHeaderLabel(const QString &amp;amp;text);
    QLabel *createPixmapLabel();
    void updatePixmapLabels();

    enum { NumModes = 4, NumStates = 2 };

    QIcon icon;
    QSize size;
    QLabel *stateLabels[NumStates];
    QLabel *modeLabels[NumModes];
    QLabel *pixmapLabels[NumModes][NumStates];
};
</db:programlisting>
<db:para>The <db:code>IconPreviewArea</db:code> class inherits QWidget. It displays the generated pixmaps corresponding to an icon's possible states and modes at a given size.</db:para>
<db:programlisting language="cpp">QVector&amp;lt;QIcon::Mode&amp;gt; IconPreviewArea::iconModes()
{
    static const QVector&amp;lt;QIcon::Mode&amp;gt; result = {QIcon::Normal, QIcon::Active, QIcon::Disabled, QIcon::Selected};
    return result;
}

QVector&amp;lt;QIcon::State&amp;gt; IconPreviewArea::iconStates()
{
    static const QVector&amp;lt;QIcon::State&amp;gt; result = {QIcon::Off, QIcon::On};
    return result;
}

QStringList IconPreviewArea::iconModeNames()
{
    static const QStringList result = {tr(&quot;Normal&quot;), tr(&quot;Active&quot;), tr(&quot;Disabled&quot;), tr(&quot;Selected&quot;)};
    return result;
}

QStringList IconPreviewArea::iconStateNames()
{
    static const QStringList result = {tr(&quot;Off&quot;), tr(&quot;On&quot;)};
    return result;
}
</db:programlisting>
<db:para>We would like the table columns to be in the order QIcon::Normal, QIcon::Active, QIcon::Disabled, QIcon::Selected and the rows in the order QIcon::Off, QIcon::On, which does not match the enumeration. The above code provides arrays allowing to map from enumeration value to row/column (by using <db:link xlink:href="qvector.xml#indexOf">QVector::indexOf</db:link>()) and back by using the array index and lists of the matching strings. Qt's containers can be easily populated by using C++ 11 initializer lists.</db:para>
<db:para>We need two public functions to set the current icon and the icon's size. In addition the class has three private functions: We use the <db:code>createHeaderLabel()</db:code> and <db:code>createPixmapLabel()</db:code> functions when constructing the preview area, and we need the <db:code>updatePixmapLabels()</db:code> function to update the preview area when the icon or the icon's size has changed.</db:para>
<db:para>The <db:code>NumModes</db:code> and <db:code>NumStates</db:code> constants reflect QIcon's number of currently defined modes and states.</db:para>
</db:section>
<db:section xml:id="iconpreviewarea-class-implementation">
<db:title>IconPreviewArea Class Implementation</db:title>
<db:programlisting language="cpp">IconPreviewArea::IconPreviewArea(QWidget *parent)
    : QWidget(parent)
{
    QGridLayout *mainLayout = new QGridLayout(this);

    for (int row = 0; row &amp;lt; NumStates; ++row) {
        stateLabels[row] = createHeaderLabel(IconPreviewArea::iconStateNames().at(row));
        mainLayout-&amp;gt;addWidget(stateLabels[row], row + 1, 0);
    }
    Q_ASSERT(NumStates == 2);

    for (int column = 0; column &amp;lt; NumModes; ++column) {
        modeLabels[column] = createHeaderLabel(IconPreviewArea::iconModeNames().at(column));
        mainLayout-&amp;gt;addWidget(modeLabels[column], 0, column + 1);
    }
    Q_ASSERT(NumModes == 4);

    for (int column = 0; column &amp;lt; NumModes; ++column) {
        for (int row = 0; row &amp;lt; NumStates; ++row) {
            pixmapLabels[column][row] = createPixmapLabel();
            mainLayout-&amp;gt;addWidget(pixmapLabels[column][row], row + 1, column + 1);
        }
    }
}
</db:programlisting>
<db:para>In the constructor we create the labels displaying the headers and the icon's generated pixmaps, and add them to a grid layout.</db:para>
<db:para>When creating the header labels, we make sure the enums <db:code>NumModes</db:code> and <db:code>NumStates</db:code> defined in the <db:code>.h</db:code> file, correspond with the number of labels that we create. Then if the enums at some point are changed, the <db:code>Q_ASSERT()</db:code> macro will alert that this part of the <db:code>.cpp</db:code> file needs to be updated as well.</db:para>
<db:para>If the application is built in debug mode, the <db:code>Q_ASSERT()</db:code> macro will expand to</db:para>
<db:programlisting language="cpp">if (!condition)
   qFatal(&quot;ASSERT: &quot;condition&quot; in file ...&quot;);
</db:programlisting>
<db:para>In release mode, the macro simply disappear. The mode can be set in the application's <db:code>.pro</db:code> file. One way to do so is to add an option to <db:code>qmake</db:code> when building the application:</db:para>
<db:programlisting language="cpp">qmake &quot;CONFIG += debug&quot; icons.pro
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">qmake &quot;CONFIG += release&quot; icons.pro
</db:programlisting>
<db:para>Another approach is to add this line directly to the <db:code>.pro</db:code> file.</db:para>
<db:programlisting language="cpp">void IconPreviewArea::setIcon(const QIcon &amp;amp;icon)
{
    this-&amp;gt;icon = icon;
    updatePixmapLabels();
}

void IconPreviewArea::setSize(const QSize &amp;amp;size)
{
    if (size != this-&amp;gt;size) {
        this-&amp;gt;size = size;
        updatePixmapLabels();
    }
}
</db:programlisting>
<db:para>The public <db:code>setIcon()</db:code> and <db:code>setSize()</db:code> functions change the icon or the icon size, and make sure that the generated pixmaps are updated.</db:para>
<db:programlisting language="cpp">QLabel *IconPreviewArea::createHeaderLabel(const QString &amp;amp;text)
{
    QLabel *label = new QLabel(tr(&quot;&amp;lt;b&amp;gt;%1&amp;lt;/b&amp;gt;&quot;).arg(text));
    label-&amp;gt;setAlignment(Qt::AlignCenter);
    return label;
}

QLabel *IconPreviewArea::createPixmapLabel()
{
    QLabel *label = new QLabel;
    label-&amp;gt;setEnabled(false);
    label-&amp;gt;setAlignment(Qt::AlignCenter);
    label-&amp;gt;setFrameShape(QFrame::Box);
    label-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    label-&amp;gt;setBackgroundRole(QPalette::Base);
    label-&amp;gt;setAutoFillBackground(true);
    label-&amp;gt;setMinimumSize(132, 132);
    return label;
}
</db:programlisting>
<db:para>We use the <db:code>createHeaderLabel()</db:code> and <db:code>createPixmapLabel()</db:code> functions to create the preview area's labels displaying the headers and the icon's generated pixmaps. Both functions return the QLabel that is created.</db:para>
<db:programlisting language="cpp">void IconPreviewArea::updatePixmapLabels()
{
    QWindow *window = nullptr;
    if (const QWidget *nativeParent = nativeParentWidget())
        window = nativeParent-&amp;gt;windowHandle();
    for (int column = 0; column &amp;lt; NumModes; ++column) {
        for (int row = 0; row &amp;lt; NumStates; ++row) {
            const QPixmap pixmap =
                icon.pixmap(window, size, IconPreviewArea::iconModes().at(column),
                            IconPreviewArea::iconStates().at(row));
            QLabel *pixmapLabel = pixmapLabels[column][row];
            pixmapLabel-&amp;gt;setPixmap(pixmap);
            pixmapLabel-&amp;gt;setEnabled(!pixmap.isNull());
            QString toolTip;
            if (!pixmap.isNull()) {
                const QSize actualSize = icon.actualSize(size);
                toolTip =
                    tr(&quot;Size: %1x%2\nActual size: %3x%4\nDevice pixel ratio: %5&quot;)
                        .arg(size.width()).arg(size.height())
                        .arg(actualSize.width()).arg(actualSize.height())
                        .arg(pixmap.devicePixelRatioF());
            }
            pixmapLabel-&amp;gt;setToolTip(toolTip);
        }
    }
}
</db:programlisting>
<db:para>We use the private <db:code>updatePixmapLabel()</db:code> function to update the generated pixmaps displayed in the preview area.</db:para>
<db:para>For each mode, and for each state, we retrieve a pixmap using the QIcon::pixmap() function, which generates a pixmap corresponding to the given state, mode and size. We pass the QWindows instance obtained by calling QWidget::windowHandle() on the top level widget (QWidget::nativeParentWidget()) in order to retrieve the pixmap that matches best. We format a tooltip displaying size, actual size and device pixel ratio.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The <db:code>MainWindow</db:code> widget consists of three main elements: an images group box, an icon size group box and a preview area.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Icons example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);

    void loadImages(const QStringList &amp;amp;fileNames);

    void show();

private slots:
    void about();
    void changeStyle(bool checked);
    void changeSize(int, bool);
    void triggerChangeSize();
    void changeIcon();
    void addSampleImages();
    void addOtherImages();
    void removeAllImages();
    void useHighDpiPixmapsChanged(int checkState);
    void screenChanged();

private:
    QWidget *createImagesGroupBox();
    QWidget *createIconSizeGroupBox();
    QWidget *createHighDpiIconSizeGroupBox();
    void createActions();
    void createContextMenu();
    void checkCurrentStyle();
    void addImages(const QString &amp;amp;directory);

    IconPreviewArea *previewArea;

    QTableWidget *imagesTable;

    QButtonGroup *sizeButtonGroup;
    IconSizeSpinBox *otherSpinBox;

    QLabel *devicePixelRatioLabel;
    QLabel *screenNameLabel;

    QAction *addOtherImagesAct;
    QAction *addSampleImagesAct;
    QAction *removeAllImagesAct;
    QAction *guessModeStateAct;
    QAction *nativeFileDialogAct;
    QActionGroup *styleActionGroup;
};
</db:programlisting>
<db:para>The MainWindow class inherits from QMainWindow. We reimplement the constructor, and declare several private slots:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:code>about()</db:code> slot simply provides information about the example.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>changeStyle()</db:code> slot changes the application's GUI style and adjust the style dependent size options.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>changeSize()</db:code> slot changes the size of the preview area's icon.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>changeIcon()</db:code> slot updates the set of pixmaps available to the icon displayed in the preview area.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>addSampleImages()</db:code> slot allows the user to load a new image from the samples provided into the application.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>addOtherImages()</db:code> slot allows the user to load a new image from the directory obtained by calling QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:code>screenChanged()</db:code> updates the display in the <db:guilabel>High DPI</db:guilabel> group box to correctly display the parameters of the current screen the window is located on.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition we declare several private functions to simplify the constructor.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    createActions();

    QGridLayout *mainLayout = new QGridLayout(centralWidget);

    QGroupBox *previewGroupBox = new QGroupBox(tr(&quot;Preview&quot;));
    previewArea = new IconPreviewArea(previewGroupBox);
    QVBoxLayout *previewLayout = new QVBoxLayout(previewGroupBox);
    previewLayout-&amp;gt;addWidget(previewArea);

    mainLayout-&amp;gt;addWidget(previewGroupBox, 0, 0, 1, 2);
    mainLayout-&amp;gt;addWidget(createImagesGroupBox(), 1, 0);
    QVBoxLayout *vBox = new QVBoxLayout;
    vBox-&amp;gt;addWidget(createIconSizeGroupBox());
    vBox-&amp;gt;addWidget(createHighDpiIconSizeGroupBox());
    vBox-&amp;gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding));
    mainLayout-&amp;gt;addLayout(vBox, 1, 1);
    createContextMenu();

    setWindowTitle(tr(&quot;Icons&quot;));
    checkCurrentStyle();
    sizeButtonGroup-&amp;gt;button(OtherSize)-&amp;gt;click();
}
</db:programlisting>
<db:para>In the constructor we first create the main window's central widget and its child widgets, and put them in a grid layout. Then we create the menus with their associated entries and actions.</db:para>
<db:para>We set the window title and determine the current style for the application. We also enable the icon size spin box by clicking the associated radio button, making the current value of the spin box the icon's initial size.</db:para>
<db:programlisting language="cpp">void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Icons&quot;),
            tr(&quot;The &amp;lt;b&amp;gt;Icons&amp;lt;/b&amp;gt; example illustrates how Qt renders an icon in &quot;
               &quot;different modes (active, normal, disabled, and selected) and &quot;
               &quot;states (on and off) based on a set of images.&quot;));
}
</db:programlisting>
<db:para>The <db:code>about()</db:code> slot displays a message box using the static QMessageBox::about() function. In this example it displays a simple box with information about the example.</db:para>
<db:para>The <db:code>about()</db:code> function looks for a suitable icon in four locations: It prefers its parent's icon if that exists. If it doesn't, the function tries the top-level widget containing parent, and if that fails, it tries the active window. As a last resort it uses the QMessageBox's Information icon.</db:para>
<db:programlisting language="cpp">void MainWindow::changeStyle(bool checked)
{
    if (!checked)
        return;

    const QAction *action = qobject_cast&amp;lt;QAction *&amp;gt;(sender());
</db:programlisting>
<db:para>In the <db:code>changeStyle()</db:code> slot we first check the slot's parameter. If it is false we immediately return, otherwise we find out which style to change to, i.e. which action that triggered the slot, using the QObject::sender() function.</db:para>
<db:para>This function returns the sender as a QObject pointer. Since we know that the sender is a QAction object, we can safely cast the QObject. We could have used a C-style cast or a C++ <db:code>static_cast()</db:code>, but as a defensive programming technique we use a <db:link xlink:href="qobject-proxy.xml#qobject_cast-1">qobject_cast</db:link>(). The advantage is that if the object has the wrong type, a null pointer is returned. Crashes due to null pointers are much easier to diagnose than crashes due to unsafe casts.</db:para>
<db:programlisting language="cpp">    QStyle *style = QStyleFactory::create(action-&amp;gt;data().toString());
    Q_ASSERT(style);
    QApplication::setStyle(style);

    const QList&amp;lt;QAbstractButton*&amp;gt; buttons = sizeButtonGroup-&amp;gt;buttons();
    for (QAbstractButton *button : buttons) {
        const QStyle::PixelMetric metric = static_cast&amp;lt;QStyle::PixelMetric&amp;gt;(sizeButtonGroup-&amp;gt;id(button));
        const int value = style-&amp;gt;pixelMetric(metric);
        switch (metric) {
        case QStyle::PM_SmallIconSize:
            button-&amp;gt;setText(tr(&quot;Small (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_LargeIconSize:
            button-&amp;gt;setText(tr(&quot;Large (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_ToolBarIconSize:
            button-&amp;gt;setText(tr(&quot;Toolbars (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_ListViewIconSize:
            button-&amp;gt;setText(tr(&quot;List views (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_IconViewIconSize:
            button-&amp;gt;setText(tr(&quot;Icon views (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_TabBarIconSize:
            button-&amp;gt;setText(tr(&quot;Tab bars (%1 x %1)&quot;).arg(value));
            break;
        default:
            break;
        }
    }

    triggerChangeSize();
}
</db:programlisting>
<db:para>Once we have the action, we extract the style name using QAction::data(). Then we create a QStyle object using the static QStyleFactory::create() function.</db:para>
<db:para>Although we can assume that the style is supported by the QStyleFactory: To be on the safe side, we use the <db:code>Q_ASSERT()</db:code> macro to check if the created style is valid before we use the QApplication::setStyle() function to set the application's GUI style to the new style. QApplication will automatically delete the style object when a new style is set or when the application exits.</db:para>
<db:para>The predefined icon size options provided in the application are style dependent, so we need to update the labels in the icon size group box and in the end call the <db:code>changeSize()</db:code> slot to update the icon's size.</db:para>
<db:programlisting language="cpp">void MainWindow::changeSize(int id, bool checked)
{
    if (!checked)
        return;

    const bool other = id == int(OtherSize);
    const int extent = other
        ? otherSpinBox-&amp;gt;value()
        : QApplication::style()-&amp;gt;pixelMetric(static_cast&amp;lt;QStyle::PixelMetric&amp;gt;(id));

    previewArea-&amp;gt;setSize(QSize(extent, extent));
    otherSpinBox-&amp;gt;setEnabled(other);
}

void MainWindow::triggerChangeSize()
{
    changeSize(sizeButtonGroup-&amp;gt;checkedId(), true);
}
</db:programlisting>
<db:para>The <db:code>changeSize()</db:code> slot sets the size for the preview area's icon.</db:para>
<db:para>It is invoked by the QButtonGroup whose members are radio buttons for controlling the icon size. In <db:code>createIconSizeGroupBox()</db:code>, each button is assigned a QStyle::PixelMetric value as an id, which is passed as a parameter to the slot.</db:para>
<db:para>The special value <db:code>OtherSize</db:code> indicates that the spin box is enabled. If it is, we extract the extent of the new size from the box. If it's not, we query the style for the metric. Then we create a QSize object based on the extent, and use that object to set the size of the preview area's icon.</db:para>
<db:programlisting language="cpp">void MainWindow::addImages(const QString &amp;amp;directory)
{
    QFileDialog fileDialog(this, tr(&quot;Open Images&quot;), directory);
    QStringList mimeTypeFilters;
    const QList&amp;lt;QByteArray&amp;gt; mimeTypes = QImageReader::supportedMimeTypes();
    for (const QByteArray &amp;amp;mimeTypeName : mimeTypes)
        mimeTypeFilters.append(mimeTypeName);
    mimeTypeFilters.sort();
    fileDialog.setMimeTypeFilters(mimeTypeFilters);
    fileDialog.selectMimeTypeFilter(QLatin1String(&quot;image/png&quot;));
    fileDialog.setAcceptMode(QFileDialog::AcceptOpen);
    fileDialog.setFileMode(QFileDialog::ExistingFiles);
    if (!nativeFileDialogAct-&amp;gt;isChecked())
        fileDialog.setOption(QFileDialog::DontUseNativeDialog);
    if (fileDialog.exec() == QDialog::Accepted)
        loadImages(fileDialog.selectedFiles());
</db:programlisting>
<db:para>The function <db:code>addImages()</db:code> is called by the slot addSampleImages() passing the samples directory, or by the slot addOtherImages() passing the directory obtained by querying QStandardPaths::standardLocations().</db:para>
<db:para>The first thing we do is to show a file dialog to the user. We initialize it to show the filters returned by QImageReader::supportedMimeTypes().</db:para>
<db:para>For each of the files the file dialog returns, we add a row to the table widget. The table widget is listing the images the user has loaded into the application.</db:para>
<db:programlisting language="cpp">        const QFileInfo fileInfo(fileName);
        const QString imageName = fileInfo.baseName();
        const QString fileName2x = fileInfo.absolutePath()
            + QLatin1Char('/') + imageName + QLatin1String(&quot;@2x.&quot;) + fileInfo.suffix();
        const QFileInfo fileInfo2x(fileName2x);
        const QImage image(fileName);
        const QString toolTip =
            tr(&quot;Directory: %1\nFile: %2\nFile@2x: %3\nSize: %4x%5&quot;)
               .arg(QDir::toNativeSeparators(fileInfo.absolutePath()), fileInfo.fileName())
               .arg(fileInfo2x.exists() ? fileInfo2x.fileName() : tr(&quot;&amp;lt;None&amp;gt;&quot;))
               .arg(image.width()).arg(image.height());
        QTableWidgetItem *fileItem = new QTableWidgetItem(imageName);
        fileItem-&amp;gt;setData(Qt::UserRole, fileName);
        fileItem-&amp;gt;setIcon(QPixmap::fromImage(image));
        fileItem-&amp;gt;setFlags((fileItem-&amp;gt;flags() | Qt::ItemIsUserCheckable) &amp;amp; ~Qt::ItemIsEditable);
        fileItem-&amp;gt;setToolTip(toolTip);
</db:programlisting>
<db:para>We retrieve the image name using the QFileInfo::baseName() function that returns the base name of the file without the path, and create the first table widget item in the row. We check if a high resolution version of the image exists (identified by the suffix <db:code>@2x</db:code> on the base name) and display that along with the size in the tooltip.</db:para>
<db:para>We add the file's complete name to the item's data. Since an item can hold several information pieces, we need to assign the file name a role that will distinguish it from other data. This role can be Qt::UserRole or any value above it.</db:para>
<db:para>We also make sure that the item is not editable by removing the Qt::ItemIsEditable flag. Table items are editable by default.</db:para>
<db:programlisting language="cpp">        QIcon::Mode mode = QIcon::Normal;
        QIcon::State state = QIcon::Off;
        if (guessModeStateAct-&amp;gt;isChecked()) {
            if (imageName.contains(QLatin1String(&quot;_act&quot;), Qt::CaseInsensitive))
                mode = QIcon::Active;
            else if (imageName.contains(QLatin1String(&quot;_dis&quot;), Qt::CaseInsensitive))
                mode = QIcon::Disabled;
            else if (imageName.contains(QLatin1String(&quot;_sel&quot;), Qt::CaseInsensitive))
                mode = QIcon::Selected;

            if (imageName.contains(QLatin1String(&quot;_on&quot;), Qt::CaseInsensitive))
                state = QIcon::On;
        }
</db:programlisting>
<db:para>Then we create the second and third items in the row making the default mode Normal and the default state Off. But if the <db:guilabel>Guess Image Mode/State</db:guilabel> option is checked, and the file name contains &quot;_act&quot;, &quot;_dis&quot;, or &quot;_sel&quot;, the modes are changed to Active, Disabled, or Selected. And if the file name contains &quot;_on&quot;, the state is changed to On. The sample files in the example's <db:code>images</db:code> subdirectory respect this naming convention.</db:para>
<db:programlisting language="cpp">        imagesTable-&amp;gt;setItem(row, 0, fileItem);
        QTableWidgetItem *modeItem =
            new QTableWidgetItem(IconPreviewArea::iconModeNames().at(IconPreviewArea::iconModes().indexOf(mode)));
        modeItem-&amp;gt;setToolTip(toolTip);
        imagesTable-&amp;gt;setItem(row, 1, modeItem);
        QTableWidgetItem *stateItem =
            new QTableWidgetItem(IconPreviewArea::iconStateNames().at(IconPreviewArea::iconStates().indexOf(state)));
        stateItem-&amp;gt;setToolTip(toolTip);
        imagesTable-&amp;gt;setItem(row, 2, stateItem);
        imagesTable-&amp;gt;openPersistentEditor(modeItem);
        imagesTable-&amp;gt;openPersistentEditor(stateItem);

        fileItem-&amp;gt;setCheckState(Qt::Checked);
    }
}
</db:programlisting>
<db:para>In the end we add the items to the associated row, and use the QTableWidget::openPersistentEditor() function to create comboboxes for the mode and state columns of the items.</db:para>
<db:para>Due to the connection between the table widget's <db:link xlink:href="">itemChanged()</db:link> signal and the <db:code>changeIcon()</db:code> slot, the new image is automatically converted into a pixmap and made part of the set of pixmaps available to the icon in the preview area. So, corresponding to this fact, we need to make sure that the new image's check box is enabled.</db:para>
<db:programlisting language="cpp">void MainWindow::changeIcon()
{
    QIcon icon;

    for (int row = 0; row &amp;lt; imagesTable-&amp;gt;rowCount(); ++row) {
        const QTableWidgetItem *fileItem = imagesTable-&amp;gt;item(row, 0);
        const QTableWidgetItem *modeItem = imagesTable-&amp;gt;item(row, 1);
        const QTableWidgetItem *stateItem = imagesTable-&amp;gt;item(row, 2);

        if (fileItem-&amp;gt;checkState() == Qt::Checked) {
            const int modeIndex = IconPreviewArea::iconModeNames().indexOf(modeItem-&amp;gt;text());
            Q_ASSERT(modeIndex &amp;gt;= 0);
            const int stateIndex = IconPreviewArea::iconStateNames().indexOf(stateItem-&amp;gt;text());
            Q_ASSERT(stateIndex &amp;gt;= 0);
            const QIcon::Mode mode = IconPreviewArea::iconModes().at(modeIndex);
            const QIcon::State state = IconPreviewArea::iconStates().at(stateIndex);
</db:programlisting>
<db:para>The <db:code>changeIcon()</db:code> slot is called when the user alters the set of images listed in the QTableWidget, to update the QIcon object rendered by the <db:code>IconPreviewArea</db:code>.</db:para>
<db:para>We first create a QIcon object, and then we run through the QTableWidget, which lists the images the user has loaded into the application.</db:para>
<db:programlisting language="cpp">            const QString fileName = fileItem-&amp;gt;data(Qt::UserRole).toString();
            QImage image(fileName);
            if (!image.isNull())
                icon.addPixmap(QPixmap::fromImage(image), mode, state);
        }
    }
</db:programlisting>
<db:para>We also extract the image file's name using the QTableWidgetItem::data() function. This function takes a Qt::DataItemRole as an argument to retrieve the right data (remember that an item can hold several pieces of information) and returns it as a QVariant. Then we use the QVariant::toString() function to get the file name as a QString.</db:para>
<db:para>To create a pixmap from the file, we need to first create an image and then convert this image into a pixmap using QPixmap::fromImage(). Once we have the final pixmap, we add it, with its associated mode and state, to the QIcon's set of available pixmaps.</db:para>
<db:programlisting language="cpp">    previewArea-&amp;gt;setIcon(icon);
}
</db:programlisting>
<db:para>After running through the entire list of images, we change the icon of the preview area to the one we just created.</db:para>
<db:programlisting language="cpp">void MainWindow::removeAllImages()
{
    imagesTable-&amp;gt;setRowCount(0);
    changeIcon();
}
</db:programlisting>
<db:para>In the <db:code>removeAllImages()</db:code> slot, we simply set the table widget's row count to zero, automatically removing all the images the user has loaded into the application. Then we update the set of pixmaps available to the preview area's icon using the <db:code>changeIcon()</db:code> slot.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the images group box</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_images_groupbox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>createImagesGroupBox()</db:code> function is implemented to simplify the constructor. The main purpose of the function is to create a QTableWidget that will keep track of the images the user has loaded into the application.</db:para>
<db:programlisting language="cpp">QWidget *MainWindow::createImagesGroupBox()
{
    QGroupBox *imagesGroupBox = new QGroupBox(tr(&quot;Images&quot;));

    imagesTable = new QTableWidget;
    imagesTable-&amp;gt;setSelectionMode(QAbstractItemView::NoSelection);
    imagesTable-&amp;gt;setItemDelegate(new ImageDelegate(this));
</db:programlisting>
<db:para>First we create a group box that will contain the table widget. Then we create a QTableWidget and customize it to suit our purposes.</db:para>
<db:para>We call QAbstractItemView::setSelectionMode() to prevent the user from selecting items.</db:para>
<db:para>The QAbstractItemView::setItemDelegate() call sets the item delegate for the table widget. We create a <db:code>ImageDelegate</db:code> that we make the item delegate for our view.</db:para>
<db:para>The QItemDelegate class can be used to provide an editor for an item view class that is subclassed from QAbstractItemView. Using a delegate for this purpose allows the editing mechanism to be customized and developed independently from the model and view.</db:para>
<db:para>In this example we derive <db:code>ImageDelegate</db:code> from QItemDelegate. QItemDelegate usually provides line editors, while our subclass <db:code>ImageDelegate</db:code>, provides comboboxes for the mode and state fields.</db:para>
<db:programlisting language="cpp">    QStringList labels;
    labels &amp;lt;&amp;lt; tr(&quot;Image&quot;) &amp;lt;&amp;lt; tr(&quot;Mode&quot;) &amp;lt;&amp;lt; tr(&quot;State&quot;);

    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setDefaultSectionSize(90);
    imagesTable-&amp;gt;setColumnCount(3);
    imagesTable-&amp;gt;setHorizontalHeaderLabels(labels);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(0, QHeaderView::Stretch);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(1, QHeaderView::Fixed);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(2, QHeaderView::Fixed);
    imagesTable-&amp;gt;verticalHeader()-&amp;gt;hide();
</db:programlisting>
<db:para>Then we customize the QTableWidget's horizontal header, and hide the vertical header.</db:para>
<db:programlisting language="cpp">    connect(imagesTable, &amp;amp;QTableWidget::itemChanged,
            this, &amp;amp;MainWindow::changeIcon);

    QVBoxLayout *layout = new QVBoxLayout(imagesGroupBox);
    layout-&amp;gt;addWidget(imagesTable);
    return imagesGroupBox;
}
</db:programlisting>
<db:para>At the end, we connect the QTableWidget::itemChanged() signal to the <db:code>changeIcon()</db:code> slot to ensure that the preview area is in sync with the image table.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the icon size group box</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_size_groupbox.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:code>createIconSizeGroupBox()</db:code> function is called from the constructor. It creates the widgets controlling the size of the preview area's icon.</db:para>
<db:programlisting language="cpp">QWidget *MainWindow::createIconSizeGroupBox()
{
    QGroupBox *iconSizeGroupBox = new QGroupBox(tr(&quot;Icon Size&quot;));

    sizeButtonGroup = new QButtonGroup(this);
    sizeButtonGroup-&amp;gt;setExclusive(true);

    connect(sizeButtonGroup, QOverload&amp;lt;int, bool&amp;gt;::of(&amp;amp;QButtonGroup::buttonToggled),
            this, &amp;amp;MainWindow::changeSize);

    QRadioButton *smallRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(smallRadioButton, QStyle::PM_SmallIconSize);
    QRadioButton *largeRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(largeRadioButton, QStyle::PM_LargeIconSize);
    QRadioButton *toolBarRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(toolBarRadioButton, QStyle::PM_ToolBarIconSize);
    QRadioButton *listViewRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(listViewRadioButton, QStyle::PM_ListViewIconSize);
    QRadioButton *iconViewRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(iconViewRadioButton, QStyle::PM_IconViewIconSize);
    QRadioButton *tabBarRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(tabBarRadioButton, QStyle::PM_TabBarIconSize);
    QRadioButton *otherRadioButton = new QRadioButton(tr(&quot;Other:&quot;));
    sizeButtonGroup-&amp;gt;addButton(otherRadioButton, OtherSize);
    otherSpinBox = new IconSizeSpinBox;
    otherSpinBox-&amp;gt;setRange(8, 256);
    const QString spinBoxToolTip =
        tr(&quot;Enter a custom size within %1..%2&quot;)
           .arg(otherSpinBox-&amp;gt;minimum()).arg(otherSpinBox-&amp;gt;maximum());
    otherSpinBox-&amp;gt;setValue(64);
    otherSpinBox-&amp;gt;setToolTip(spinBoxToolTip);
    otherRadioButton-&amp;gt;setToolTip(spinBoxToolTip);
</db:programlisting>
<db:para>First we create a group box that will contain all the widgets; then we create the radio buttons and the spin box. We add the radio buttons to an instance of QButtonGroup, using the value of the QStyle::PixelMetric they represent as an integer id.</db:para>
<db:programlisting language="cpp">enum { OtherSize = QStyle::PM_CustomBase };
</db:programlisting>
<db:para>We introduce an enumeration constant <db:code>OtherSize</db:code> to represent a custom size.</db:para>
<db:para>The spin box is not a regular QSpinBox but an <db:code>IconSizeSpinBox</db:code>. The <db:code>IconSizeSpinBox</db:code> class inherits QSpinBox and reimplements two functions: QSpinBox::textFromValue() and QSpinBox::valueFromText(). The <db:code>IconSizeSpinBox</db:code> is designed to handle icon sizes, e.g., &quot;32 x 32&quot;, instead of plain integer values.</db:para>
<db:programlisting language="cpp">    connect(otherSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            this, &amp;amp;MainWindow::triggerChangeSize);

    QHBoxLayout *otherSizeLayout = new QHBoxLayout;
    otherSizeLayout-&amp;gt;addWidget(otherRadioButton);
    otherSizeLayout-&amp;gt;addWidget(otherSpinBox);
    otherSizeLayout-&amp;gt;addStretch();

    QGridLayout *layout = new QGridLayout(iconSizeGroupBox);
    layout-&amp;gt;addWidget(smallRadioButton, 0, 0);
    layout-&amp;gt;addWidget(largeRadioButton, 1, 0);
    layout-&amp;gt;addWidget(toolBarRadioButton, 2, 0);
    layout-&amp;gt;addWidget(listViewRadioButton, 0, 1);
    layout-&amp;gt;addWidget(iconViewRadioButton, 1, 1);
    layout-&amp;gt;addWidget(tabBarRadioButton, 2, 1);
    layout-&amp;gt;addLayout(otherSizeLayout, 3, 0, 1, 2);
    layout-&amp;gt;setRowStretch(4, 1);
    return iconSizeGroupBox;
}
</db:programlisting>
<db:para>Then we connect all of the radio buttons <db:link xlink:href="">toggled()</db:link> signals and the spin box's <db:link xlink:href="">valueChanged()</db:link> signal to the <db:code>changeSize()</db:code> slot to make sure that the size of the preview area's icon is updated whenever the user changes the icon size. In the end we put the widgets in a layout that we install on the group box.</db:para>
<db:programlisting language="cpp">void MainWindow::createActions()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));

    addSampleImagesAct = new QAction(tr(&quot;Add &amp;amp;Sample Images...&quot;), this);
    addSampleImagesAct-&amp;gt;setShortcut(tr(&quot;Ctrl+A&quot;));
    connect(addSampleImagesAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::addSampleImages);
    fileMenu-&amp;gt;addAction(addSampleImagesAct);

    addOtherImagesAct = new QAction(tr(&quot;&amp;amp;Add Images...&quot;), this);
    addOtherImagesAct-&amp;gt;setShortcut(QKeySequence::Open);
    connect(addOtherImagesAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::addOtherImages);
    fileMenu-&amp;gt;addAction(addOtherImagesAct);

    removeAllImagesAct = new QAction(tr(&quot;&amp;amp;Remove All Images&quot;), this);
    removeAllImagesAct-&amp;gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    connect(removeAllImagesAct, &amp;amp;QAction::triggered,
            this, &amp;amp;MainWindow::removeAllImages);
    fileMenu-&amp;gt;addAction(removeAllImagesAct);

    fileMenu-&amp;gt;addSeparator();

    QAction *exitAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Quit&quot;), this, &amp;amp;QWidget::close);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);

    QMenu *viewMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;View&quot;));

    styleActionGroup = new QActionGroup(this);
    const QStringList styleKeys = QStyleFactory::keys();
    for (const QString &amp;amp;styleName : styleKeys) {
        QAction *action = new QAction(tr(&quot;%1 Style&quot;).arg(styleName), styleActionGroup);
        action-&amp;gt;setData(styleName);
        action-&amp;gt;setCheckable(true);
        connect(action, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::changeStyle);
        viewMenu-&amp;gt;addAction(action);
    }

    QMenu *settingsMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Settings&quot;));

    guessModeStateAct = new QAction(tr(&quot;&amp;amp;Guess Image Mode/State&quot;), this);
    guessModeStateAct-&amp;gt;setCheckable(true);
    guessModeStateAct-&amp;gt;setChecked(true);
    settingsMenu-&amp;gt;addAction(guessModeStateAct);

    nativeFileDialogAct = new QAction(tr(&quot;&amp;amp;Use Native File Dialog&quot;), this);
    nativeFileDialogAct-&amp;gt;setCheckable(true);
    nativeFileDialogAct-&amp;gt;setChecked(true);
    settingsMenu-&amp;gt;addAction(nativeFileDialogAct);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    helpMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);
}
</db:programlisting>
<db:para>In the <db:code>createActions()</db:code> function we create and customize all the actions needed to implement the functionality associated with the menu entries in the application.</db:para>
<db:para>In particular we create the <db:code>styleActionGroup</db:code> based on the currently available GUI styles using QStyleFactory. QStyleFactory::keys() returns a list of valid keys, typically including &quot;windows&quot; and &quot;fusion&quot;. Depending on the platform, &quot;windowsvista&quot; and &quot;macintosh&quot; may be available.</db:para>
<db:para>We create one action for each key, and adds the action to the action group. Also, for each action, we call QAction::setData() with the style name. We will retrieve it later using QAction::data().</db:para>
<db:para>As we go along, we create the <db:guilabel>File</db:guilabel>, <db:guilabel>View</db:guilabel> and <db:guilabel>Help</db:guilabel> menus and add the actions to them.</db:para>
<db:para>The QMenu class provides a menu widget for use in menu bars, context menus, and other popup menus. We put each menu in the application's menu bar, which we retrieve using QMainWindow::menuBar().</db:para>
<db:programlisting language="cpp">void MainWindow::createContextMenu()
{
    imagesTable-&amp;gt;setContextMenuPolicy(Qt::ActionsContextMenu);
    imagesTable-&amp;gt;addAction(addSampleImagesAct);
    imagesTable-&amp;gt;addAction(addOtherImagesAct);
    imagesTable-&amp;gt;addAction(removeAllImagesAct);
}
</db:programlisting>
<db:para>QWidgets have a contextMenuPolicy property that controls how the widget should behave when the user requests a context menu (e.g., by right-clicking). We set the QTableWidget's context menu policy to Qt::ActionsContextMenu, meaning that the QActions associated with the widget should appear in its context menu.</db:para>
<db:para>Then we add the <db:guilabel>Add Image</db:guilabel> and <db:guilabel>Remove All Images</db:guilabel> actions to the table widget. They will then appear in the table widget's context menu.</db:para>
<db:programlisting language="cpp">void MainWindow::checkCurrentStyle()
{
    const QList&amp;lt;QAction *&amp;gt; actions = styleActionGroup-&amp;gt;actions();
    for (QAction *action : actions) {
        const QString styleName = action-&amp;gt;data().toString();
        const std::unique_ptr&amp;lt;QStyle&amp;gt; candidate{QStyleFactory::create(styleName)};
        Q_ASSERT(candidate);
        if (candidate-&amp;gt;metaObject()-&amp;gt;className()
                == QApplication::style()-&amp;gt;metaObject()-&amp;gt;className()) {
            action-&amp;gt;trigger();
            return;
        }
    }
}
</db:programlisting>
<db:para>In the <db:code>checkCurrentStyle()</db:code> function we go through the group of style actions, looking for the current GUI style.</db:para>
<db:para>For each action, we first extract the style name using QAction::data(). Since this is only a QStyleFactory key (e.g., &quot;macintosh&quot;), we cannot compare it directly to the current style's class name. We need to create a QStyle object using the static QStyleFactory::create() function and compare the class name of the created QStyle object with that of the current style. As soon as we are done with a QStyle candidate, we delete it.</db:para>
<db:para>For all QObject subclasses that use the <db:code>Q_OBJECT</db:code> macro, the class name of an object is available through its <db:link xlink:href="">meta-object</db:link>.</db:para>
<db:para>We can assume that the style is supported by QStyleFactory, but to be on the safe side we use the <db:code>Q_ASSERT()</db:code> macro to make sure that QStyleFactory::create() returned a valid pointer.</db:para>
<db:programlisting language="cpp">void MainWindow::show()
{
    QMainWindow::show();
    connect(windowHandle(), &amp;amp;QWindow::screenChanged, this, &amp;amp;MainWindow::screenChanged);
    screenChanged();
}
</db:programlisting>
<db:para>We overload the show() function to set up the updating of the current screen in <db:code>screenChanged()</db:code>. After calling QWidget::show(), the QWindow associated with the QWidget is created and we can connect to its QWindow::screenChanged() signal.</db:para>
</db:section>
<db:section xml:id="iconsizespinbox-class-definition">
<db:title>IconSizeSpinBox Class Definition</db:title>
<db:programlisting language="cpp">class IconSizeSpinBox : public QSpinBox
{
    Q_OBJECT

public:
    explicit IconSizeSpinBox(QWidget *parent = nullptr);

    int valueFromText(const QString &amp;amp;text) const override;
    QString textFromValue(int value) const override;
};
</db:programlisting>
<db:para>The <db:code>IconSizeSpinBox</db:code> class is a subclass of QSpinBox. A plain QSpinBox can only handle integers. But since we want to display the spin box's values in a more sophisticated way, we need to subclass QSpinBox and reimplement the QSpinBox::textFromValue() and QSpinBox::valueFromText() functions.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the icon size spinbox</db:alt>
<db:imageobject>
<db:imagedata fileref="images/icons_size_spinbox.png"/>
</db:imageobject>
</db:mediaobject>
</db:section>
<db:section xml:id="iconsizespinbox-class-implementation">
<db:title>IconSizeSpinBox Class Implementation</db:title>
<db:programlisting language="cpp">IconSizeSpinBox::IconSizeSpinBox(QWidget *parent)
    : QSpinBox(parent)
{
}
</db:programlisting>
<db:para>The constructor is trivial.</db:para>
<db:programlisting language="cpp">QString IconSizeSpinBox::textFromValue(int value) const
{
    return tr(&quot;%1 x %1&quot;).arg(value);
}
</db:programlisting>
<db:para>QSpinBox::textFromValue() is used by the spin box whenever it needs to display a value. The default implementation returns a base 10 representation of the <db:code>value</db:code> parameter.</db:para>
<db:para>Our reimplementation returns a QString of the form &quot;32 x 32&quot;.</db:para>
<db:programlisting language="cpp">int IconSizeSpinBox::valueFromText(const QString &amp;amp;text) const
{
    static const QRegularExpression regExp(tr(&quot;(\\d+)(\\s*[xx]\\s*\\d+)?&quot;));
    Q_ASSERT(regExp.isValid());

    const QRegularExpressionMatch match = regExp.match(text);
    if (match.isValid())
        return match.captured(1).toInt();
    return 0;
}
</db:programlisting>
<db:para>The QSpinBox::valueFromText() function is used by the spin box whenever it needs to interpret text typed in by the user. Since we reimplement the <db:code>textFromValue()</db:code> function we also need to reimplement the <db:code>valueFromText()</db:code> function to interpret the parameter text and return the associated int value.</db:para>
<db:para>We parse the text using a regular expression (a QRegularExpression). We define an expression that matches one or several digits, optionally followed by whitespace, an &quot;x&quot; or the times symbol, whitespace and one or several digits again.</db:para>
<db:para>The first digits of the regular expression are captured using parentheses. This enables us to use the QRegularExpressionMatch::captured() or QRegularExpressionMatch::capturedTexts() functions to extract the matched characters. If the first and second numbers of the spin box value differ (e.g., &quot;16 x 24&quot;), we use the first number.</db:para>
<db:para>When the user presses <db:guilabel>Enter</db:guilabel>, QSpinBox first calls QSpinBox::valueFromText() to interpret the text typed by the user, then QSpinBox::textFromValue() to present it in a canonical format (e.g., &quot;16 x 16&quot;).</db:para>
</db:section>
<db:section xml:id="imagedelegate-class-definition">
<db:title>ImageDelegate Class Definition</db:title>
<db:programlisting language="cpp">class ImageDelegate : public QItemDelegate
{
    Q_OBJECT

public:
    explicit ImageDelegate(QObject *parent = nullptr);
</db:programlisting>
<db:para>The <db:code>ImageDelegate</db:code> class is a subclass of QItemDelegate. The QItemDelegate class provides display and editing facilities for data items from a model. A single QItemDelegate object is responsible for all items displayed in a item view (in our case, a QTableWidget).</db:para>
<db:para>A QItemDelegate can be used to provide an editor for an item view class that is subclassed from QAbstractItemView. Using a delegate for this purpose allows the editing mechanism to be customized and developed independently from the model and view.</db:para>
<db:programlisting language="cpp">    QWidget *createEditor(QWidget *parent, const QStyleOptionViewItem &amp;amp;option,
                          const QModelIndex &amp;amp;index) const override;
    void setEditorData(QWidget *editor, const QModelIndex &amp;amp;index) const override;
    void setModelData(QWidget *editor, QAbstractItemModel *model,
                      const QModelIndex &amp;amp;index) const override;
</db:programlisting>
<db:para>The default implementation of QItemDelegate creates a QLineEdit. Since we want the editor to be a QComboBox, we need to subclass QItemDelegate and reimplement the QItemDelegate::createEditor(), QItemDelegate::setEditorData() and QItemDelegate::setModelData() functions.</db:para>
<db:programlisting language="cpp">private slots:
    void emitCommitData();
};
</db:programlisting>
<db:para>The <db:code>emitCommitData()</db:code> slot is used to emit the QImageDelegate::commitData() signal with the appropriate argument.</db:para>
</db:section>
<db:section xml:id="imagedelegate-class-implementation">
<db:title>ImageDelegate Class Implementation</db:title>
<db:programlisting language="cpp">ImageDelegate::ImageDelegate(QObject *parent)
    : QItemDelegate(parent)
{
}
</db:programlisting>
<db:para>The constructor is trivial.</db:para>
<db:programlisting language="cpp">QWidget *ImageDelegate::createEditor(QWidget *parent,
                                     const QStyleOptionViewItem &amp;amp; /* option */,
                                     const QModelIndex &amp;amp;index) const
{
    QComboBox *comboBox = new QComboBox(parent);
    if (index.column() == 1)
        comboBox-&amp;gt;addItems(IconPreviewArea::iconModeNames());
    else if (index.column() == 2)
        comboBox-&amp;gt;addItems(IconPreviewArea::iconStateNames());

    connect(comboBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated),
            this, &amp;amp;ImageDelegate::emitCommitData);

    return comboBox;
}
</db:programlisting>
<db:para>The default QItemDelegate::createEditor() implementation returns the widget used to edit the item specified by the model and item index for editing. The parent widget and style option are used to control the appearance of the editor widget.</db:para>
<db:para>Our reimplementation creates and populates a combobox instead of the default line edit. The contents of the combobox depends on the column in the table for which the editor is requested. Column 1 contains the QIcon modes, whereas column 2 contains the QIcon states.</db:para>
<db:para>In addition, we connect the combobox's <db:link xlink:href="">activated()</db:link> signal to the <db:code>emitCommitData()</db:code> slot to emit the QAbstractItemDelegate::commitData() signal whenever the user chooses an item using the combobox. This ensures that the rest of the application notices the change and updates itself.</db:para>
<db:programlisting language="cpp">void ImageDelegate::setEditorData(QWidget *editor,
                                  const QModelIndex &amp;amp;index) const
{
    QComboBox *comboBox = qobject_cast&amp;lt;QComboBox *&amp;gt;(editor);
    if (!comboBox)
        return;

    int pos = comboBox-&amp;gt;findText(index.model()-&amp;gt;data(index).toString(),
                                 Qt::MatchExactly);
    comboBox-&amp;gt;setCurrentIndex(pos);
}
</db:programlisting>
<db:para>The QItemDelegate::setEditorData() function is used by QTableWidget to transfer data from a QTableWidgetItem to the editor. The data is stored as a string; we use QComboBox::findText() to locate it in the combobox.</db:para>
<db:para>Delegates work in terms of models, not items. This makes it possible to use them with any item view class (e.g., QListView, QListWidget, QTreeView, etc.). The transition between model and items is done implicitly by QTableWidget; we don't need to worry about it.</db:para>
<db:programlisting language="cpp">void ImageDelegate::setModelData(QWidget *editor, QAbstractItemModel *model,
                                 const QModelIndex &amp;amp;index) const
{
    QComboBox *comboBox = qobject_cast&amp;lt;QComboBox *&amp;gt;(editor);
    if (!comboBox)
        return;

    model-&amp;gt;setData(index, comboBox-&amp;gt;currentText());
}
</db:programlisting>
<db:para>The QItemDelegate::setEditorData() function is used by QTableWidget to transfer data back from the editor to the QTableWidgetItem.</db:para>
<db:programlisting language="cpp">void ImageDelegate::emitCommitData()
{
    emit commitData(qobject_cast&amp;lt;QWidget *&amp;gt;(sender()));
}
</db:programlisting>
<db:para>The <db:code>emitCommitData()</db:code> slot simply emit the QAbstractItemDelegate::commitData() signal for the editor that triggered the slot. This signal must be emitted when the editor widget has completed editing the data, and wants to write it back into the model.</db:para>
</db:section>
<db:section xml:id="the-implementation-of-the-function-main">
<db:title>The Implementation of the Function main()</db:title>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QCoreApplication::setApplicationName(MainWindow::tr(&quot;Icons&quot;));
    QCoreApplication::setApplicationVersion(QT_VERSION_STR);
    QCommandLineParser commandLineParser;
    commandLineParser.setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
    commandLineParser.addHelpOption();
    commandLineParser.addVersionOption();
    QCommandLineOption noHighDpiPixmapOption(&quot;no-highdpi-pixmaps&quot;,
                                             &quot;Disable High DPI image loading (Qt::AA_UseHighDpiPixmaps)&quot;);
    commandLineParser.addOption(noHighDpiPixmapOption);
        commandLineParser.addPositionalArgument(MainWindow::tr(&quot;[file]&quot;), MainWindow::tr(&quot;Icon file(s) to open.&quot;));
    commandLineParser.process(QCoreApplication::arguments());

    if (!commandLineParser.isSet(noHighDpiPixmapOption))
        QCoreApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);

    MainWindow mainWin;
    if (!commandLineParser.positionalArguments().isEmpty())
        mainWin.loadImages(commandLineParser.positionalArguments());

    const QRect availableGeometry = mainWin.screen()-&amp;gt;availableGeometry();
    mainWin.resize(availableGeometry.width() / 2, availableGeometry.height() * 2 / 3);
    mainWin.move((availableGeometry.width() - mainWin.width()) / 2, (availableGeometry.height() - mainWin.height()) / 2);

    mainWin.show();
    return app.exec();
}
</db:programlisting>
<db:para>We use QCommandLineParser to handle any command line options or parameters passed to the application. Then, we resize the main window according to the available screen geometry and show it.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/widgets/icons?h=5.14">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
