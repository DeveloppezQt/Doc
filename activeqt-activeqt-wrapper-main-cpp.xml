<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Wrapper Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Wrapper example demonstrates how to export existing <db:link xlink:href="qwidget.xml">QWidget</db:link> classes as ActiveX controls, and the use of <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> together with the <db:code>QAXFACTORY_EXPORT()</db:code> macro. ActiveX controls in this example are the standard button classes <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>, <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> and <db:link xlink:href="qradiobutton.xml">QRadioButton</db:link> as provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QAxFactory&amp;gt;
#include &amp;lt;QCheckBox&amp;gt;
#include &amp;lt;QRadioButton&amp;gt;
#include &amp;lt;QPushButton&amp;gt;
#include &amp;lt;QToolButton&amp;gt;
#include &amp;lt;QPixmap&amp;gt;
#include &amp;lt;functional&amp;gt;

class ActiveQtFactory : public QAxFactory
{
public:
    ActiveQtFactory(const QUuid &amp;amp;lib, const QUuid &amp;amp;app)
        : QAxFactory(lib, app)
    {}

    QStringList featureList() const
    {
        return m_activeElements.keys();
    }

    QObject *createObject(const QString &amp;amp;key)
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&amp;gt;create();
        return nullptr;
    }

    const QMetaObject *metaObject(const QString &amp;amp;key) const
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&amp;gt;metaObject;
        return nullptr;
    }

    QUuid classID(const QString &amp;amp;key) const
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&amp;gt;classID;
        return QUuid();
    }

    QUuid interfaceID(const QString &amp;amp;key) const
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&amp;gt;interfaceID;
        return QUuid();
    }

    QUuid eventsID(const QString &amp;amp;key) const
    {
        auto it = m_activeElements.find(key);
        if (it != m_activeElements.end())
            return it-&amp;gt;eventsID;
        return QUuid();
    }

private:

    struct ActiveElement {
       QUuid classID;
       QUuid interfaceID;
       QUuid eventsID;
       const QMetaObject *metaObject;
       std::function&amp;lt;QObject *()&amp;gt; create;
    };

    const QHash&amp;lt;QString, ActiveElement&amp;gt; m_activeElements {
        {
            QStringLiteral(&quot;QCheckBox&quot;), {
                QUuid(&quot;{6E795DE9-872D-43CF-A831-496EF9D86C68}&quot;),
                QUuid(&quot;{4FD39DD7-2DE0-43C1-A8C2-27C51A052810}&quot;),
                QUuid(&quot;{FDB6FFBE-56A3-4E90-8F4D-198488418B3A}&quot;),
                &amp;amp;QCheckBox::staticMetaObject,
                []() { return new QCheckBox; }
            }
        },
        {
            QStringLiteral(&quot;QRadioButton&quot;), {
                QUuid(&quot;{AFCF78C8-446C-409A-93B3-BA2959039189}&quot;),
                QUuid(&quot;{7CC8AE30-206C-48A3-A009-B0A088026C2F}&quot;),
                QUuid(&quot;{73EE4860-684C-4A66-BF63-9B9EFFA0CBE5}&quot;),
                &amp;amp;QRadioButton::staticMetaObject,
                []() { return new QRadioButton; }
            }
        },
        {
            QStringLiteral(&quot;QPushButton&quot;), {
                QUuid(&quot;{2B262458-A4B6-468B-B7D4-CF5FEE0A7092}&quot;),
                QUuid(&quot;{06831CC9-59B6-436A-9578-6D53E5AD03D3}&quot;),
                QUuid(&quot;{3CC3F17F-EA59-4B58-BBD3-842D467131DD}&quot;),
                &amp;amp;QPushButton::staticMetaObject,
                []() { return new QPushButton; }
            }
        },
        {
            QStringLiteral(&quot;QToolButton&quot;), {
                QUuid(&quot;{7c0ffe7a-60c3-4666-bde2-5cf2b54390a1}&quot;),
                QUuid(&quot;{6726080f-d63d-4950-a366-9bf33e5cdf84}&quot;),
                QUuid(&quot;{f4d421fd-4ead-4fd9-8a25-440766939639}&quot;),
                &amp;amp;QToolButton::staticMetaObject,
                []() { return new QToolButton; }
            }
        },
    };

};

QAXFACTORY_EXPORT(ActiveQtFactory, &quot;{3B756301-0075-4E40-8BE8-5A81DE2426B7}&quot;, &quot;{AB068077-4924-406a-BBAF-42D91C8727DD}&quot;)

</db:programlisting>
</db:article>
