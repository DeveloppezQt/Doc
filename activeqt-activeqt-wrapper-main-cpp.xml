<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Wrapper Example (ActiveQt)</db:title>
<db:productname>ActiveQt</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>ActiveQt</db:titleabbrev>
<db:abstract>
<db:para>The Wrapper example demonstrates how to export existing QWidget classes as ActiveX controls, and the use of <db:link xlink:href="qaxfactory.xml">QAxFactory</db:link> together with the <db:code>QAXFACTORY_EXPORT()</db:code> macro. ActiveX controls in this example are the standard button classes QPushButton, QCheckBox and QRadioButton as provided by Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QAxFactory&gt;
#include &lt;QCheckBox&gt;
#include &lt;QRadioButton&gt;
#include &lt;QPushButton&gt;
#include &lt;QToolButton&gt;
#include &lt;QPixmap&gt;

/* XPM */
static const char *fileopen[] = {
&quot;    16    13        5            1&quot;,
&quot;. c #040404&quot;,
&quot;# c #808304&quot;,
&quot;a c None&quot;,
&quot;b c #f3f704&quot;,
&quot;c c #f3f7f3&quot;,
&quot;aaaaaaaaa...aaaa&quot;,
&quot;aaaaaaaa.aaa.a.a&quot;,
&quot;aaaaaaaaaaaaa..a&quot;,
&quot;a...aaaaaaaa...a&quot;,
&quot;.bcb.......aaaaa&quot;,
&quot;.cbcbcbcbc.aaaaa&quot;,
&quot;.bcbcbcbcb.aaaaa&quot;,
&quot;.cbcb...........&quot;,
&quot;.bcb.#########.a&quot;,
&quot;.cb.#########.aa&quot;,
&quot;.b.#########.aaa&quot;,
&quot;..#########.aaaa&quot;,
&quot;...........aaaaa&quot;
};

class ActiveQtFactory : public QAxFactory
{
public:
    ActiveQtFactory( const QUuid &amp;lib, const QUuid &amp;app )
        : QAxFactory( lib, app )
    {}
    QStringList featureList() const
    {
        QStringList list;
        list &lt;&lt; &quot;QCheckBox&quot;;
        list &lt;&lt; &quot;QRadioButton&quot;;
        list &lt;&lt; &quot;QPushButton&quot;;
        list &lt;&lt; &quot;QToolButton&quot;;
        return list;
    }
    QObject *createObject(const QString &amp;key)
    {
        if ( key == &quot;QCheckBox&quot; )
            return new QCheckBox(0);
        if ( key == &quot;QRadioButton&quot; )
            return new QRadioButton(0);
        if ( key == &quot;QPushButton&quot; )
            return new QPushButton(0 );
        if ( key == &quot;QToolButton&quot; ) {
            QToolButton *tb = new QToolButton(0);
//          tb-&gt;setIcon( QPixmap(fileopen) );
            return tb;
        }

        return 0;
    }
    const QMetaObject *metaObject( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &amp;QCheckBox::staticMetaObject;
        if ( key == &quot;QRadioButton&quot; )
            return &amp;QRadioButton::staticMetaObject;
        if ( key == &quot;QPushButton&quot; )
            return &amp;QPushButton::staticMetaObject;
        if ( key == &quot;QToolButton&quot; )
            return &amp;QToolButton::staticMetaObject;

        return 0;
    }
    QUuid classID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{6E795DE9-872D-43CF-A831-496EF9D86C68}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{AFCF78C8-446C-409A-93B3-BA2959039189}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{2B262458-A4B6-468B-B7D4-CF5FEE0A7092}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{7c0ffe7a-60c3-4666-bde2-5cf2b54390a1}&quot;;

        return QUuid();
    }
    QUuid interfaceID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{4FD39DD7-2DE0-43C1-A8C2-27C51A052810}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{7CC8AE30-206C-48A3-A009-B0A088026C2F}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{06831CC9-59B6-436A-9578-6D53E5AD03D3}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{6726080f-d63d-4950-a366-9bf33e5cdf84}&quot;;

        return QUuid();
    }
    QUuid eventsID( const QString &amp;key ) const
    {
        if ( key == &quot;QCheckBox&quot; )
            return &quot;{FDB6FFBE-56A3-4E90-8F4D-198488418B3A}&quot;;
        if ( key == &quot;QRadioButton&quot; )
            return &quot;{73EE4860-684C-4A66-BF63-9B9EFFA0CBE5}&quot;;
        if ( key == &quot;QPushButton&quot; )
            return &quot;{3CC3F17F-EA59-4B58-BBD3-842D467131DD}&quot;;
        if ( key == &quot;QToolButton&quot; )
            return &quot;{f4d421fd-4ead-4fd9-8a25-440766939639}&quot;;

        return QUuid();
    }
};

QAXFACTORY_EXPORT( ActiveQtFactory, &quot;{3B756301-0075-4E40-8BE8-5A81DE2426B7}&quot;, &quot;{AB068077-4924-406a-BBAF-42D91C8727DD}&quot; )

</db:programlisting>
</db:article>
