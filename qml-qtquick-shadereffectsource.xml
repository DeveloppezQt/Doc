<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ShaderEffectSource QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Renders a <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> item into a texture and displays it.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Item</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ShaderEffectSource is part of <db:simplelist><db:member>qtquick-effects</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> type renders <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> into a texture and displays it in the scene. <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> is drawn into the texture as though it was a fully opaque root item. Thus <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> itself can be invisible, but still appear in the texture.</db:para>
<db:para><db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> can be used as:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a texture source in a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. This allows you to apply custom shader effects to any <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> item.</db:para>
</db:listitem>
<db:listitem>
<db:para>a cache for a complex item. The complex item can be rendered once into the texture, which can then be animated freely without the need to render the complex item again every frame.</db:para>
</db:listitem>
<db:listitem>
<db:para>an opacity layer. <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> allows you to apply an opacity to items as a group rather than each item individually.</db:para>
</db:listitem>
</db:itemizedlist>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/declarative-shadereffectsource.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    width: 200
    height: 100
    gradient: Gradient {
        GradientStop { position: 0; color: &quot;white&quot; }
        GradientStop { position: 1; color: &quot;black&quot; }
    }
    Row {
        opacity: 0.5
        Item {
            id: foo
            width: 100; height: 100
            Rectangle { x: 5; y: 5; width: 60; height: 60; color: &quot;red&quot; }
            Rectangle { x: 20; y: 20; width: 60; height: 60; color: &quot;orange&quot; }
            Rectangle { x: 35; y: 35; width: 60; height: 60; color: &quot;yellow&quot; }
        }
        ShaderEffectSource {
            width: 100; height: 100
            sourceItem: foo
        }
    }
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> type does not redirect any mouse or keyboard input to <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link>. If you hide the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> by setting <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> to false or <db:link xlink:href="qml-qtquick-item.xml#opacity-prop">opacity</db:link> to zero, it will no longer react to input. In cases where the <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> is meant to replace the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link>, you typically want to hide the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> while still handling input. For this, you can use the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#hideSource-prop">hideSource</db:link> property.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> relies on FBO multisampling support to antialias edges. If the underlying hardware does not support this, which is the case for most embedded graphics chips, edges rendered inside a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> will not be antialiased. One way to remedy this is to double the size of the effect source and render it with <db:code>smooth: true</db:code> (this is the default value of smooth). This will be equivalent to 4x multisampling, at the cost of lower performance and higher memory use.</db:para>
</db:note>
<db:warning>
<db:para>In most cases, using a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> will decrease performance, and in all cases, it will increase video memory usage. Rendering through a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> might also lead to lower quality since some OpenGL implementations support multisampled backbuffer, but not multisampled framebuffer objects.</db:para>
</db:warning>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="format-prop">
<db:title>format : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>format</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the format of the backing texture. Modifying this property makes most sense when the item is used as a source texture of a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA8</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA16F</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA32F</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.Alpha</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGB</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RGBA</db:para>
</db:td>
<db:td>
<db:para>Starting with Qt 6.0, this value is not in use and has the same effect as <db:code>RGBA8</db:code> in practice.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="hideSource-prop">
<db:title>hideSource : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>hideSource</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> is hidden, though it will still be rendered into the texture. As opposed to hiding the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> by setting <db:link xlink:href="qml-qtquick-item.xml#visible-prop">visible</db:link> to false, setting this property to true will not prevent mouse or keyboard input from reaching <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link>. The property is useful when the <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> is anchored on top of, and meant to replace the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link>.</db:para>
</db:section>
<db:section xml:id="live-prop">
<db:title>live : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>live</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, the texture is updated whenever the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> updates. Otherwise, it will be a frozen image, even if <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> is assigned a new item. The property is true by default.</db:para>
</db:section>
<db:section xml:id="mipmap-prop">
<db:title>mipmap : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>mipmap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is true, mipmaps are generated for the texture.</db:para>
<db:note>
<db:para>Some OpenGL ES 2 implementations do not support mipmapping of non-power-of-two textures.</db:para>
</db:note>
</db:section>
<db:section xml:id="recursive-prop">
<db:title>recursive : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>recursive</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Set this property to true if the <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> has a dependency on itself. ShaderEffectSources form a dependency chain, where one <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> can be part of the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> of another. If there is a loop in this chain, a <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> could end up trying to render into the same texture it is using as source, which is not allowed by OpenGL. When this property is set to true, an extra texture is allocated so that <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> can keep a copy of the texture from the previous frame. It can then render into one texture and use the texture from the previous frame as source.</db:para>
<db:para>Setting both this property and <db:link xlink:href="qml-qtquick-shadereffectsource.xml#live-prop">live</db:link> to true will cause the scene graph to render continuously. Since the <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> depends on itself, updating it means that it immediately becomes dirty again.</db:para>
</db:section>
<db:section xml:id="samples-prop">
<db:title>samples : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>samples</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property allows requesting multisampled rendering.</db:para>
<db:para>By default multisampling is enabled whenever multisampling is enabled for the entire window, assuming the scenegraph renderer in use and the underlying graphics API supports this.</db:para>
<db:para>By setting the value to 2, 4, etc. multisampled rendering can be requested for a part of the scene without enabling multisampling for the entire scene. This way multisampling is applied only to a given subtree, which can lead to significant performance gains since multisampling is not applied to other parts of the scene.</db:para>
<db:note>
<db:para>Enabling multisampling can be potentially expensive regardless of the layer's size, as it incurs a hardware and driver dependent performance and memory cost.</db:para>
</db:note>
<db:note>
<db:para>This property is only functional when support for multisample renderbuffers and framebuffer blits is available. Otherwise the value is silently ignored.</db:para>
</db:note>
</db:section>
<db:section xml:id="sourceItem-prop">
<db:title>sourceItem : Item</db:title>
<db:fieldsynopsis>
<db:type>Item</db:type>
<db:varname>sourceItem</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the item to be rendered into the texture. Setting this to null while <db:link xlink:href="qml-qtquick-shadereffectsource.xml#live-prop">live</db:link> is true, will release the texture resources.</db:para>
</db:section>
<db:section xml:id="sourceRect-prop">
<db:title>sourceRect : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>sourceRect</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines which rectangular area of the <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> to render into the texture. The source rectangle can be larger than <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> itself. If the rectangle is null, which is the default, the whole <db:link xlink:href="qml-qtquick-shadereffectsource.xml#sourceItem-prop">sourceItem</db:link> is rendered to texture.</db:para>
</db:section>
<db:section xml:id="textureMirroring-prop">
<db:title>textureMirroring : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>textureMirroring</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines how the generated OpenGL texture should be mirrored. The default value is <db:code>ShaderEffectSource.MirrorVertically</db:code>. Custom mirroring can be useful if the generated texture is directly accessed by custom shaders, such as those specified by <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>. Mirroring has no effect on the UI representation of the <db:link xlink:href="qml-qtquick-shadereffectsource.xml">ShaderEffectSource</db:link> item itself.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.NoMirroring</db:para>
</db:td>
<db:td>
<db:para>No mirroring</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.MirrorHorizontally</db:para>
</db:td>
<db:td>
<db:para>The generated texture is flipped along X-axis.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.MirrorVertically</db:para>
</db:td>
<db:td>
<db:para>The generated texture is flipped along Y-axis.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="textureSize-prop">
<db:title>textureSize : size</db:title>
<db:fieldsynopsis>
<db:type>size</db:type>
<db:varname>textureSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the requested pixel size of the texture. If it is empty, which is the default, the size of the source rectangle is used.</db:para>
<db:note>
<db:para>This value is in pixels since it directly controls the size of a texture object.</db:para>
</db:note>
<db:note>
<db:para>Some platforms have a limit on how small framebuffer objects can be, which means the actual texture size might be larger than the requested size.</db:para>
</db:note>
</db:section>
<db:section xml:id="wrapMode-prop">
<db:title>wrapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>wrapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the OpenGL wrap modes associated with the texture. Modifying this property makes most sense when the item is used as a source texture of a <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>.</db:para>
<db:para>The default value is <db:code>ShaderEffectSource.ClampToEdge</db:code>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.ClampToEdge</db:para>
</db:td>
<db:td>
<db:para>GL_CLAMP_TO_EDGE both horizontally and vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RepeatHorizontally</db:para>
</db:td>
<db:td>
<db:para>GL_REPEAT horizontally, GL_CLAMP_TO_EDGE vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.RepeatVertically</db:para>
</db:td>
<db:td>
<db:para>GL_CLAMP_TO_EDGE horizontally, GL_REPEAT vertically</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ShaderEffectSource.Repeat</db:para>
</db:td>
<db:td>
<db:para>GL_REPEAT both horizontally and vertically</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Some OpenGL ES 2 implementations do not support the GL_REPEAT wrap mode with non-power-of-two textures.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="scheduleUpdate-method">
<db:title>scheduleUpdate()</db:title>
<db:para>Schedules a re-rendering of the texture for the next frame. Use this to update the texture when <db:link xlink:href="qml-qtquick-shadereffectsource.xml#live-prop">live</db:link> is false.</db:para>
</db:section>
</db:section>
</db:article>
