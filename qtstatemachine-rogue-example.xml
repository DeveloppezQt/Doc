<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Rogue</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Rogue example shows how to use the Qt state machine for event handling.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rogue-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example implements a simple text based game. Do you see the <db:code>@</db:code> in the screenshot? That's you, the rogue. The <db:code>#</db:code> characters are walls, and the dots represent floor. In a real game, other ASCII characters would represent all kinds of objects and creatures, for instance, ancient dragons (<db:code>D</db:code>s) or food rations (<db:code>%</db:code>s). But let's not get carried away. In this game, the rogue is simply running around in an empty room.</db:para>
<db:para>The rogue is moved with the keypad (2, 4, 8, 6). That aside, we have implemented a <db:code>quit</db:code> command that triggers if the player types <db:code>q</db:code>. The player is then asked if he/she really wants to quit.</db:para>
<db:para>Most games have commands that need more than one key press (we think of consecutive presses, i.e., not of several keys being pressed at the same time). In this game, only the <db:code>quit</db:code> command falls under this category, but for the sake of argument, let's imagine a fully-fledged game with a rich set of commands. If we were to implement these by catching key events in <db:link xlink:href="qwidget.xml#keyPressEvent">keyPressEvent</db:link>(), we would have to keep a lot of class member variables to track the sequence of keys already typed (or find some other way of deducing the current state of a command). This can easily lead to spaghetti, which is–as we all well know, I'm sure–unpleasant. With a state machine, on the other hand, separate states can wait for a single key press, and that makes our lives a lot simpler.</db:para>
<db:para>The example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Window</db:code> draws the text display of the game and sets up the state machine. The window also has a status bar above the area in which the rouge moves.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>MovementTransition</db:code> is a transition that carries out a single move of the rogue.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Before we embark on a code walkthrough, it is necessary to take a closer look at the design of the machine. Here is a state chart that shows what we want to achieve:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rogue-statechart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The input state waits for a key press to start a new command. When receiving a key it recognizes, it transitions to one of the two commands of the game; though, as we will see, movement is handled by the transition itself. The quit state waits for the player to answer yes or no (by typing <db:code>y</db:code> or <db:code>n</db:code>) when asked whether he/she really wants to quit the game.</db:para>
<db:para>The chart demonstrates how we use one state to wait for a single key press. The press received may trigger one of the transitions connected to the state.</db:para>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The <db:code>Window</db:code> class is a widget that draws the text display of the game. It also sets up the state machine, i.e., creates and connects the states in the machine. It is the key events from this widget that are used by the machine.</db:para>
<db:programlisting language="cpp">class Window : public QWidget
{
    Q_OBJECT
    Q_PROPERTY(QString status READ status WRITE setStatus)

public:
    enum Direction { Up, Down, Left, Right };

    Window();

    void movePlayer(Direction direction);
    void setStatus(const QString &amp;amp;status);
    QString status() const;

    QSize sizeHint() const override;

protected:
    void paintEvent(QPaintEvent *event) override;
</db:programlisting>
<db:para><db:code>Direction</db:code> specifies the direction in which the rogue is to move. We use this in <db:code>movePlayer()</db:code>, which moves the rogue and repaints the window. The game has a status line above the area in which the rogue moves. The <db:code>status</db:code> property contains the text of this line. We use a property because the <db:link xlink:href="qstate.xml">QState</db:link> class allows setting any Qt <db:link xlink:href="properties.xml">property</db:link> when entered. More on this later.</db:para>
<db:programlisting language="cpp">private:
    void buildMachine();
    void setupMap();

    static constexpr int WIDTH = 35;
    static constexpr int HEIGHT = 20;

    QChar map[WIDTH][HEIGHT];
    int pX = 5;
    int pY = 5;

    QStateMachine *machine;
    QString myStatus;
};
</db:programlisting>
<db:para>The <db:code>map</db:code> is an array with the characters that are currently displayed. We set up the array in <db:code>setupMap()</db:code>, and update it when the rogue is moved. <db:code>pX</db:code> and <db:code>pY</db:code> is the current position of the rogue, initially set to (5, 5). <db:code>WIDTH</db:code> and <db:code>HEIGHT</db:code> are constants specifying the dimensions of the map.</db:para>
<db:para>The <db:code>paintEvent()</db:code> function is left out of this walkthrough. We also do not discuss other code that does not concern the state machine (the <db:code>setupMap()</db:code>, <db:code>status()</db:code>, <db:code>setStatus()</db:code>, <db:code>movePlayer()</db:code>, and <db:code>sizeHint()</db:code> functions). If you wish to take a look at the code, click on the link for the <db:code>window.cpp</db:code> file at the top of this page.</db:para>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>Here is the constructor of <db:code>Window</db:code>:</db:para>
<db:programlisting language="cpp">Window::Window()
{
    ...
    setupMap();
    buildMachine();
}
</db:programlisting>
<db:para>Here we set up the map and statemachine. Let's proceed with the <db:code>buildMachine()</db:code> function:</db:para>
<db:programlisting language="cpp">void Window::buildMachine()
{
    machine = new QStateMachine;

    auto inputState = new QState(machine);
    inputState-&amp;gt;assignProperty(this, &quot;status&quot;, &quot;Move the rogue with 2, 4, 6, and 8&quot;);

    auto transition = new MovementTransition(this);
    inputState-&amp;gt;addTransition(transition);
</db:programlisting>
<db:para>We enter <db:code>inputState</db:code> when the machine is started and from the <db:code>quitState</db:code> if the user wants to continue playing. We then set the status to a helpful reminder of how to play the game.</db:para>
<db:para>First, the <db:code>Movement</db:code> transition is added to the input state. This will enable the rogue to be moved with the keypad. Notice that we don't set a target state for the movement transition. This will cause the transition to be triggered (and the <db:link xlink:href="qabstracttransition.xml#onTransition">onTransition</db:link>() function to be invoked), but the machine will not leave the <db:code>inputState</db:code>. If we had set <db:code>inputState</db:code> as the target state, we would first have left and then entered the <db:code>inputState</db:code> again.</db:para>
<db:programlisting language="cpp">    auto quitState = new QState(machine);
    quitState-&amp;gt;assignProperty(this, &quot;status&quot;, &quot;Really quit(y/n)?&quot;);

    auto yesTransition = new QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_Y);
    yesTransition-&amp;gt;setTargetState(new QFinalState(machine));
    quitState-&amp;gt;addTransition(yesTransition);

    auto noTransition = new QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_N);
    noTransition-&amp;gt;setTargetState(inputState);
    quitState-&amp;gt;addTransition(noTransition);
</db:programlisting>
<db:para>When we enter <db:code>quitState</db:code>, we update the status bar of the window.</db:para>
<db:para><db:code>QKeyEventTransition</db:code> is a utility class that removes the hassle of implementing transitions for <db:link xlink:href="qkeyevent.xml">QKeyEvent</db:link>s. We simply need to specify the key on which the transition should trigger and the target state of the transition.</db:para>
<db:programlisting language="cpp">    auto quitTransition = new QKeyEventTransition(this, QEvent::KeyPress, Qt::Key_Q);
    quitTransition-&amp;gt;setTargetState(quitState);
    inputState-&amp;gt;addTransition(quitTransition);
</db:programlisting>
<db:para>The transition from <db:code>inputState</db:code> allows triggering the quit state when the player types <db:code>q</db:code>.</db:para>
<db:programlisting language="cpp">    machine-&amp;gt;setInitialState(inputState);

    connect(machine, &amp;amp;QStateMachine::finished, qApp, &amp;amp;QApplication::quit);

    machine-&amp;gt;start();
}
</db:programlisting>
<db:para>The machine is set up, so it's time to start it.</db:para>
</db:section>
<db:section xml:id="the-movementtransition-class">
<db:title>The MovementTransition Class</db:title>
<db:para><db:code>MovementTransition</db:code> is triggered when the player request the rogue to be moved (by typing 2, 4, 6, or 8) when the machine is in the <db:code>inputState</db:code>.</db:para>
<db:programlisting language="cpp">class MovementTransition : public QEventTransition
{
    Q_OBJECT

public:
    explicit MovementTransition(Window *window)
        : QEventTransition(window, QEvent::KeyPress), window(window)
    {
    }
</db:programlisting>
<db:para>In the constructor, we tell <db:link xlink:href="qeventtransition.xml">QEventTransition</db:link> to only send <db:link xlink:href="qevent.xml#Type-enum">KeyPress</db:link> events to the <db:link xlink:href="qabstracttransition.xml#eventTest">eventTest</db:link>() function:</db:para>
<db:programlisting language="cpp">protected:
    bool eventTest(QEvent *event) override {
        if (event-&amp;gt;type() == QEvent::StateMachineWrapped &amp;amp;&amp;amp;
            static_cast&amp;lt;QStateMachine::WrappedEvent *&amp;gt;(event)-&amp;gt;event()-&amp;gt;type() == QEvent::KeyPress) {
            auto wrappedEvent = static_cast&amp;lt;QStateMachine::WrappedEvent *&amp;gt;(event)-&amp;gt;event();

            auto keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(wrappedEvent);
            int key = keyEvent-&amp;gt;key();

            return key == Qt::Key_2 || key == Qt::Key_8 || key == Qt::Key_6 ||
                   key == Qt::Key_4 || key == Qt::Key_Down || key == Qt::Key_Up ||
                   key == Qt::Key_Right || key == Qt::Key_Left;
        }
        return false;
    }
</db:programlisting>
<db:para>The KeyPress events come wrapped in <db:link xlink:href="qstatemachine-wrappedevent.xml">QStateMachine::WrappedEvent</db:link>s. <db:code>event</db:code> must be confirmed to be a wrapped event because Qt uses other events internally. After that, it is simply a matter of checking which key has been pressed.</db:para>
<db:para>Let's move on to the <db:code>onTransition()</db:code> function:</db:para>
<db:programlisting language="cpp">    void onTransition(QEvent *event) override {
        auto keyEvent = static_cast&amp;lt;QKeyEvent *&amp;gt;(
                static_cast&amp;lt;QStateMachine::WrappedEvent *&amp;gt;(event)-&amp;gt;event());

        int key = keyEvent-&amp;gt;key();
        switch (key) {
            case Qt::Key_Left:
            case Qt::Key_4:
                window-&amp;gt;movePlayer(Window::Left);
                break;
            case Qt::Key_Up:
            case Qt::Key_8:
                window-&amp;gt;movePlayer(Window::Up);
                break;
            case Qt::Key_Right:
            case Qt::Key_6:
                window-&amp;gt;movePlayer(Window::Right);
                break;
            case Qt::Key_Down:
            case Qt::Key_2:
                window-&amp;gt;movePlayer(Window::Down);
                break;
            default:
                ;
        }
    }
</db:programlisting>
<db:para>When <db:code>onTransition()</db:code> is invoked, we know that we have a <db:link xlink:href="qevent.xml#Type-enum">KeyPress</db:link> event with 2, 4, 6, or 8, and can ask <db:code>Window</db:code> to move the player.</db:para>
</db:section>
<db:section xml:id="the-roguelike-tradition">
<db:title>The Roguelike Tradition</db:title>
<db:para>You might have been wondering why the game features a rogue. Well, these kinds of text based dungeon exploration games date back to a game called, yes, &quot;Rogue&quot;. Although outflanked by the technology of modern 3D computer games, roguelikes have a solid community of hard-core, devoted followers.</db:para>
<db:para>Playing these games can be surprisingly addictive (despite the lack of graphics). Angband, the perhaps most well-known rougelike, is found here: <db:link xlink:href="http://rephial.org/">http://rephial.org/</db:link>.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/statemachine/rogue?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
