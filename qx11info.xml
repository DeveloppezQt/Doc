<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QX11Info Class</db:title>
<db:productname>QtX11Extras</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt X11 Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides information about the X display configuration.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QX11Info</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += x11extras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class provides two APIs: a set of non-static functions that provide information about a specific widget or pixmap, and a set of static functions that provide the default information for the application.</db:para>
<db:warning>
<db:para>This class is only available on X11. For querying per-screen information in a portable way, use <db:link xlink:href="qdesktopwidget.xml">QDesktopWidget</db:link>.</db:para>
</db:warning>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="appDpiX">
<db:title>[static] int QX11Info::appDpiX(int <db:emphasis>screen</db:emphasis> = -1)</db:title>
<db:para>Returns the horizontal resolution of the given <db:code role="parameter">screen</db:code> in terms of the number of dots per inch.</db:para>
<db:para>The <db:code role="parameter">screen</db:code> argument is an X screen number. Be aware that if the user's system uses Xinerama (as opposed to traditional X11 multiscreen), there is only one X screen. Use <db:link xlink:href="qdesktopwidget.xml">QDesktopWidget</db:link> to query for information about Xinerama screens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#appDpiY">appDpiY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appDpiY">
<db:title>[static] int QX11Info::appDpiY(int <db:emphasis>screen</db:emphasis> = -1)</db:title>
<db:para>Returns the vertical resolution of the given <db:code role="parameter">screen</db:code> in terms of the number of dots per inch.</db:para>
<db:para>The <db:code role="parameter">screen</db:code> argument is an X screen number. Be aware that if the user's system uses Xinerama (as opposed to traditional X11 multiscreen), there is only one X screen. Use <db:link xlink:href="qdesktopwidget.xml">QDesktopWidget</db:link> to query for information about Xinerama screens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#appDpiX">appDpiX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appRootWindow">
<db:title>[static] unsigned long QX11Info::appRootWindow(int <db:emphasis>screen</db:emphasis> = -1)</db:title>
<db:para>Returns a handle for the applications root window on the given <db:code role="parameter">screen</db:code>.</db:para>
<db:para>The <db:code role="parameter">screen</db:code> argument is an X screen number. Be aware that if the user's system uses Xinerama (as opposed to traditional X11 multiscreen), there is only one X screen. Use <db:link xlink:href="qdesktopwidget.xml">QDesktopWidget</db:link> to query for information about Xinerama screens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qapplication.xml#desktop">QApplication::desktop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appScreen">
<db:title>[static] int QX11Info::appScreen()</db:title>
<db:para>Returns the number of the screen where the application is being displayed.</db:para>
<db:para>This method refers to screens in the original X11 meaning with a different DISPLAY environment variable per screen. This information is only useful if your application needs to know on which X screen it is running.</db:para>
<db:para>In a typical multi-head configuration, multiple physical monitors are combined in one X11 screen. This means this method returns the same number for each of the physical monitors. In such a setup you are interested in the monitor information as provided by the X11 RandR extension. This is available through <db:link xlink:href="qdesktopwidget.xml">QDesktopWidget</db:link> and <db:link xlink:href="qscreen.xml">QScreen</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#display">display</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appTime">
<db:title>[static] unsigned long QX11Info::appTime()</db:title>
<db:para>Returns the X11 time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#setAppTime">setAppTime</db:link>()</db:member>
<db:member><db:link xlink:href="qx11info.xml#appUserTime">appUserTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="appUserTime">
<db:title>[static] unsigned long QX11Info::appUserTime()</db:title>
<db:para>Returns the X11 user time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#setAppUserTime">setAppUserTime</db:link>()</db:member>
<db:member><db:link xlink:href="qx11info.xml#appTime">appTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="connection">
<db:title>[static] xcb_connection_t *QX11Info::connection()</db:title>
<db:para>Returns the default XCB connection for the application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#display">display</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="display">
<db:title>[static] Display *QX11Info::display()</db:title>
<db:para>Returns the default display for the application.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#appScreen">appScreen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="getTimestamp">
<db:title>[static, since 5.2] unsigned long QX11Info::getTimestamp()</db:title>
<db:para>Fetches the current X11 time stamp from the X Server.</db:para>
<db:para>This method creates a property notify event and blocks till it is received back from the X Server.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isPlatformX11">
<db:title>[static, since 5.2] bool QX11Info::isPlatformX11()</db:title>
<db:para>Returns true if the application is currently running on X11.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="nextStartupId">
<db:title>[static, since 5.4] QByteArray QX11Info::nextStartupId()</db:title>
<db:para>Returns the startup ID that will be used for the next window to be shown by this process.</db:para>
<db:para>After the next window is shown, the next startup ID will be empty.</db:para>
<db:para>http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#setNextStartupId">setNextStartupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAppTime">
<db:title>[static] void QX11Info::setAppTime(unsigned long <db:emphasis>time</db:emphasis>)</db:title>
<db:para>Sets the X11 time to the value specified by <db:code role="parameter">time</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#appTime">appTime</db:link>()</db:member>
<db:member><db:link xlink:href="qx11info.xml#setAppUserTime">setAppUserTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAppUserTime">
<db:title>[static] void QX11Info::setAppUserTime(unsigned long <db:emphasis>time</db:emphasis>)</db:title>
<db:para>Sets the X11 user time as specified by <db:code role="parameter">time</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#appUserTime">appUserTime</db:link>()</db:member>
<db:member><db:link xlink:href="qx11info.xml#setAppTime">setAppTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNextStartupId">
<db:title>[static, since 5.4] void QX11Info::setNextStartupId(const QByteArray &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:para>Sets the next startup ID to <db:code role="parameter">id</db:code>.</db:para>
<db:para>This is the startup ID that will be used for the next window to be shown by this process.</db:para>
<db:para>The startup ID of the first window comes from the environment variable DESKTOP_STARTUP_ID. This method is useful for subsequent windows, when the request comes from another process (e.g. via DBus).</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qx11info.xml#nextStartupId">nextStartupId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
