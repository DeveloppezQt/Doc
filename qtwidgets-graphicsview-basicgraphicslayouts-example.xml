<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Basic Graphics Layouts Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to create basic graphics layout.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Basic Graphics Layouts example shows how to use the layout classes in QGraphicsView: QGraphicsLinearLayout and QGraphicsGridLayout. In addition to that it shows how to write your own custom layout item.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Basic Layouts Example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/basicgraphicslayouts-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="window-class-definition">
<db:title>Window Class Definition</db:title>
<db:para>The <db:code>Window</db:code> class is a subclass of QGraphicsWidget. It has a constructor with a QGraphicsWidget <db:code role="parameter">parent</db:code> as its parameter.</db:para>
<db:programlisting language="cpp">class Window : public QGraphicsWidget {
    Q_OBJECT

public:
    Window(QGraphicsWidget *parent = 0);

};
</db:programlisting>
</db:section>
<db:section xml:id="window-class-implementation">
<db:title>Window Class Implementation</db:title>
<db:para>The constructor of <db:code>Window</db:code> instantiates a QGraphicsLinearLayout object, <db:code>windowLayout</db:code>, with vertical orientation. We instantiate another QGraphicsLinearLayout object, <db:code>linear</db:code>, whose parent is <db:code>windowLayout</db:code>. Next, we create a <db:code>LayoutItem</db:code> object, <db:code>item</db:code> and add it to <db:code>linear</db:code> with the <db:link xlink:href="">addItem()</db:link> function. We also provide <db:code>item</db:code> with a stretchFactor.</db:para>
<db:programlisting language="cpp">    QGraphicsLinearLayout *windowLayout = new QGraphicsLinearLayout(Qt::Vertical);
    QGraphicsLinearLayout *linear = new QGraphicsLinearLayout(windowLayout);
    LayoutItem *item = new LayoutItem;
    linear-&gt;addItem(item);
    linear-&gt;setStretchFactor(item, 1);
</db:programlisting>
<db:para>We repeat the process:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>create a new <db:code>LayoutItem</db:code>,</db:para>
</db:listitem>
<db:listitem>
<db:para>add the item <db:code>linear</db:code>, and</db:para>
</db:listitem>
<db:listitem>
<db:para>provide a stretch factor.</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    item = new LayoutItem;
    linear-&gt;addItem(item);
    linear-&gt;setStretchFactor(item, 3);
    windowLayout-&gt;addItem(linear);
</db:programlisting>
<db:para>We then add <db:code>linear</db:code> to <db:code>windowLayout</db:code>, nesting two QGraphicsLinearLayout objects. Apart from the QGraphicsLinearLayout, we also use a QGraphicsGridLayout object, <db:code>grid</db:code>, which is a 4x3 grid with some cells spanning to other rows.</db:para>
<db:para>We create seven <db:code>LayoutItem</db:code> objects and place them into <db:code>grid</db:code> with the <db:link xlink:href="">addItem()</db:link> function as shown in the code snippet below:</db:para>
<db:programlisting language="cpp">    QGraphicsGridLayout *grid = new QGraphicsGridLayout(windowLayout);
    item = new LayoutItem;
    grid-&gt;addItem(item, 0, 0, 4, 1);
    item = new LayoutItem;
    item-&gt;setMaximumHeight(item-&gt;minimumHeight());
    grid-&gt;addItem(item, 0, 1, 2, 1, Qt::AlignVCenter);
    item = new LayoutItem;
    item-&gt;setMaximumHeight(item-&gt;minimumHeight());
    grid-&gt;addItem(item, 2, 1, 2, 1, Qt::AlignVCenter);
    item = new LayoutItem;
    grid-&gt;addItem(item, 0, 2);
    item = new LayoutItem;
    grid-&gt;addItem(item, 1, 2);
    item = new LayoutItem;
    grid-&gt;addItem(item, 2, 2);
    item = new LayoutItem;
    grid-&gt;addItem(item, 3, 2);
    windowLayout-&gt;addItem(grid);
</db:programlisting>
<db:para>The first item we add to <db:code>grid</db:code> is placed in the top left cell, spanning four rows. The next two items are placed in the second column, and they span two rows. Each item's <db:link xlink:href="">maximumHeight()</db:link> and <db:link xlink:href="">minimumHeight()</db:link> are set to be equal so that they do not expand vertically. As a result, these items will not fit vertically in their cells. So, we specify that they should be vertically aligned in the center of the cell using <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignVCenter</db:link>.</db:para>
<db:para>Finally, <db:code>grid</db:code> itself is added to <db:code>windowLayout</db:code>. Unlike QGridLayout::addItem(), QGraphicsGridLayout::addItem() requires a row and a column for its argument, specifying which cell the item should be positioned in. Also, if the <db:code>rowSpan</db:code> and <db:code>columnSpan</db:code> arguments are omitted, they will default to 1.</db:para>
<db:para>Note that we do not specify a parent for each <db:code>LayoutItem</db:code> that we construct, as all these items will be added to <db:code>windowLayout</db:code>. When we add an item to a layout, it will be automatically reparented to the widget on which the layout is installed.</db:para>
<db:programlisting language="cpp">    setLayout(windowLayout);
    setWindowTitle(tr(&quot;Basic Graphics Layouts Example&quot;));
</db:programlisting>
<db:para>Now that we have set up <db:code>grid</db:code> and added it to <db:code>windowLayout</db:code>, we install <db:code>windowLayout</db:code> onto the window object using QGraphicsWidget::setLayout() and we set the window title.</db:para>
</db:section>
<db:section xml:id="layoutitem-class-definition">
<db:title>LayoutItem Class Definition</db:title>
<db:para>The <db:code>LayoutItem</db:code> class is a subclass of QGraphicsLayoutItem and QGraphicsItem. It has a constructor, a destructor, and some required reimplementations. Since it inherits QGraphicsLayoutItem it must reimplement {QGraphicsLayoutItem::setGeometry()}{setGeometry()} and {QGraphicsLayoutItem::sizeHint()}{sizeHint()}. In addition to that it inherits QGraphicsItem, so it must reimplement {QGraphicsItem::boundingRect()}{boundingRect()} and {QGraphicsItem::paint()}{paint()}.</db:para>
<db:programlisting language="cpp">class LayoutItem : public QGraphicsLayoutItem, public QGraphicsItem
{
public:
    LayoutItem(QGraphicsItem *parent = 0);
    ~LayoutItem();
    // Inherited from QGraphicsLayoutItem
    void setGeometry(const QRectF &amp;geom);
    QSizeF sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint = QSizeF()) const;

    // Inherited from QGraphicsItem
    QRectF boundingRect() const;
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);

private:
    QPixmap *m_pix;
};
</db:programlisting>
<db:para>The <db:code>LayoutItem</db:code> class also has a private instance of QPixmap, <db:code>m_pix</db:code>.</db:para>
</db:section>
<db:section xml:id="layoutitem-class-implementation">
<db:title>LayoutItem Class Implementation</db:title>
<db:para>In <db:code>LayoutItem</db:code>'s constructor, <db:code>m_pix</db:code> is instantiated and the <db:code>block.png</db:code> image is loaded into it.</db:para>
<db:programlisting language="cpp">LayoutItem::LayoutItem(QGraphicsItem *parent/* = 0*/)
    : QGraphicsLayoutItem(), QGraphicsItem(parent)
{
    m_pix = new QPixmap(QLatin1String(&quot;:/images/block.png&quot;));
    setGraphicsItem(this);
}
</db:programlisting>
<db:para>We use the <db:link xlink:href="qtglobal.xml#Q_UNUSED">Q_UNUSED</db:link>() macro to prevent the compiler from generating warnings regarding unused parameters.</db:para>
<db:programlisting language="cpp">void LayoutItem::paint(QPainter *painter,
    const QStyleOptionGraphicsItem *option, QWidget *widget /*= 0*/)
{
    Q_UNUSED(widget);
    Q_UNUSED(option);

    QRectF frame(QPointF(0,0), geometry().size());
    qreal w = m_pix-&gt;width();
    qreal h = m_pix-&gt;height();
    QGradientStops stops;
</db:programlisting>
<db:para>The idea behind the <db:code>paint()</db:code> function is to paint the background rect then paint a rect around the pixmap.</db:para>
<db:programlisting language="cpp">    // paint a background rect (with gradient)
    QLinearGradient gradient(frame.topLeft(), frame.topLeft() + QPointF(200,200));
    stops &lt;&lt; QGradientStop(0.0, QColor(60, 60,  60));
    stops &lt;&lt; QGradientStop(frame.height() / 2 / frame.height(), QColor(102, 176, 54));

    //stops &lt;&lt; QGradientStop(((frame.height() + h)/2 )/frame.height(), QColor(157, 195,  55));
    stops &lt;&lt; QGradientStop(1.0, QColor(215, 215, 215));
    gradient.setStops(stops);
    painter-&gt;setBrush(QBrush(gradient));
    painter-&gt;drawRoundedRect(frame, 10.0, 10.0);

    // paint a rect around the pixmap (with gradient)
    QPointF pixpos = frame.center() - (QPointF(w, h) / 2);
    QRectF innerFrame(pixpos, QSizeF(w, h));
    innerFrame.adjust(-4, -4, 4, 4);
    gradient.setStart(innerFrame.topLeft());
    gradient.setFinalStop(innerFrame.bottomRight());
    stops.clear();
    stops &lt;&lt; QGradientStop(0.0, QColor(215, 255, 200));
    stops &lt;&lt; QGradientStop(0.5, QColor(102, 176, 54));
    stops &lt;&lt; QGradientStop(1.0, QColor(0, 0,  0));
    gradient.setStops(stops);
    painter-&gt;setBrush(QBrush(gradient));
    painter-&gt;drawRoundedRect(innerFrame, 10.0, 10.0);
    painter-&gt;drawPixmap(pixpos, *m_pix);
}
</db:programlisting>
<db:para>The reimplementation of <db:link xlink:href="">boundingRect()</db:link> will set the top left corner at (0,0), and the size of it will be the size of the layout items <db:link xlink:href="">geometry()</db:link>. This is the area that we paint within.</db:para>
<db:programlisting language="cpp">QRectF LayoutItem::boundingRect() const
{
    return QRectF(QPointF(0,0), geometry().size());
}
</db:programlisting>
<db:para>The reimplementation of <db:link xlink:href="">setGeometry()</db:link> simply calls its baseclass implementation. However, since this will change the boundingRect we must also call <db:link xlink:href="">prepareGeometryChange()</db:link>. Finally, we move the item according to <db:code>geom.topLeft()</db:code>.</db:para>
<db:programlisting language="cpp">void LayoutItem::setGeometry(const QRectF &amp;geom)
{
    prepareGeometryChange();
    QGraphicsLayoutItem::setGeometry(geom);
    setPos(geom.topLeft());
}
</db:programlisting>
<db:para>Since we don't want the size of the item to be smaller than the pixmap, we must make sure that we return a size hint that is larger than <db:code>m_pix</db:code>. We also add some extra space around for borders that we will paint later. Alternatively, you could scale the pixmap to prevent the item from becoming smaller than the pixmap. The preferred size is the same as the minimum size hint, while we set maximum to be a large value</db:para>
<db:programlisting language="cpp">QSizeF LayoutItem::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const
{
    switch (which) {
    case Qt::MinimumSize:
    case Qt::PreferredSize:
        // Do not allow a size smaller than the pixmap with two frames around it.
        return m_pix-&gt;size() + QSize(12, 12);
    case Qt::MaximumSize:
        return QSizeF(1000,1000);
    default:
        break;
    }
    return constraint;
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/basicgraphicslayouts.pro">graphicsview/basicgraphicslayouts/basicgraphicslayouts.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/basicgraphicslayouts.qrc">graphicsview/basicgraphicslayouts/basicgraphicslayouts.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/layoutitem.cpp">graphicsview/basicgraphicslayouts/layoutitem.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/layoutitem.h">graphicsview/basicgraphicslayouts/layoutitem.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/main.cpp">graphicsview/basicgraphicslayouts/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/window.cpp">graphicsview/basicgraphicslayouts/window.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/window.h">graphicsview/basicgraphicslayouts/window.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="graphicsview/basicgraphicslayouts/images/block.png">graphicsview/basicgraphicslayouts/images/block.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
