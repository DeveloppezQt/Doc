<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QResource Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qresource.xml">QResource</db:link> class provides an interface for reading directly from resources.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QResource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QResource is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qresource.xml">QResource</db:link> is an object that represents a set of data (and possibly children) relating to a single resource entity. <db:link xlink:href="qresource.xml">QResource</db:link> gives direct access to the bytes in their raw format. In this way direct access allows reading data without buffer copying or indirection. Indirection is often useful when interacting with the resource entity as if it is a file, this can be achieved with <db:link xlink:href="qfile.xml">QFile</db:link>. The data and children behind a <db:link xlink:href="qresource.xml">QResource</db:link> are normally compiled into an application/library, but it is also possible to load a resource at runtime. When loaded at run time the resource file will be loaded as one big set of data and then given out in pieces via references into the resource tree.</db:para>
<db:para>A <db:link xlink:href="qresource.xml">QResource</db:link> can either be loaded with an absolute path, either treated as a file system rooted with a <db:code>/</db:code> character, or in resource notation rooted with a <db:code>:</db:code> character. A relative resource can also be opened which will be found in the list of paths returned by QDir::searchPaths().</db:para>
<db:para>A <db:link xlink:href="qresource.xml">QResource</db:link> that is representing a file will have data backing it, this data can possibly be compressed, in which case <db:link xlink:href="qbytearray.xml#qUncompress">qUncompress</db:link>() must be used to access the real data; this happens implicitly when accessed through a <db:link xlink:href="qfile.xml">QFile</db:link>. A <db:link xlink:href="qresource.xml">QResource</db:link> that is representing a directory will have only children and no data.</db:para>
<db:section xml:id="dynamic-resource-loading">
<db:title>Dynamic Resource Loading</db:title>
<db:para>A resource can be left out of an application's binary and loaded when it is needed at run-time by using the <db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>() function. The resource file passed into <db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>() must be a binary resource as created by rcc. Further information about binary resources can be found in <db:link xlink:href="resources.xml">The Qt Resource System</db:link> documentation.</db:para>
<db:para>This can often be useful when loading a large set of application icons that may change based on a setting, or that can be edited by a user and later recreated. The resource is immediately loaded into memory, either as a result of a single file read operation, or as a memory mapped file.</db:para>
<db:para>This approach can prove to be a significant performance gain as only a single file will be loaded, and pieces of data will be given out via the path requested in <db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>().</db:para>
<db:para>The <db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>() function removes a reference to a particular file. If there are QResources that currently reference resources related to the unregistered file, they will continue to be valid but the resource file itself will be removed from the resource roots, and thus no further <db:link xlink:href="qresource.xml">QResource</db:link> can be created pointing into this resource data. The resource itself will be unmapped from memory when the last <db:link xlink:href="qresource.xml">QResource</db:link> that points to it is destroyed.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QResource">
<db:title>[noexcept] QResource::~QResource()</db:title>
<db:para>Releases the resources of the <db:link xlink:href="qresource.xml">QResource</db:link> object.</db:para>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QResource::absoluteFilePath() const</db:title>
<db:para>Returns the real path that this <db:link xlink:href="qresource.xml">QResource</db:link> represents, if the resource was found via the QDir::searchPaths() it will be indicated in the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="children">
<db:title>[protected] int QResource::children() const</db:title>
<db:para>Returns a list of all resources in this directory, if the resource represents a file the list will be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isDir">isDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>const uchar *QResource::data() const</db:title>
<db:para>Returns direct access to a read only segment of data that this resource represents. If the resource is compressed the data returns is compressed and <db:link xlink:href="qbytearray.xml#qUncompress">qUncompress</db:link>() must be used to access the data. If the resource is a directory 0 is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isCompressed">isCompressed</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QResource::fileName() const</db:title>
<db:para>Returns the full path to the file that this <db:link xlink:href="qresource.xml">QResource</db:link> represents as it was passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCompressed">
<db:title>bool QResource::isCompressed() const</db:title>
<db:para>Returns <db:code>true</db:code> if the resource represents a file and the data backing it is in a compressed format, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDir">
<db:title>[protected] bool QResource::isDir() const</db:title>
<db:para>Returns <db:code>true</db:code> if the resource represents a directory and thus may have <db:link xlink:href="qresource.xml#children">children</db:link>() in it, false if it represents a file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFile">
<db:title>[protected] bool QResource::isFile() const</db:title>
<db:para>Returns <db:code>true</db:code> if the resource represents a file and thus has data backing it, false if it represents a directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isDir">isDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QResource::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the resource really exists in the resource hierarchy, false otherwise.</db:para>
</db:section>
<db:section xml:id="locale">
<db:title>int QResource::locale() const</db:title>
<db:para>Returns the locale used to locate the data for the <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
</db:section>
<db:section xml:id="registerResource">
<db:title>[static] bool QResource::registerResource(const QString &amp;<db:emphasis>rccFileName</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:para>Registers the resource with the given <db:code role="parameter">rccFileName</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns <db:code>true</db:code> if the file is successfully opened; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerResource-1">
<db:title>[static, since 4.3] bool QResource::registerResource(const uchar *<db:emphasis>rccData</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:para>Registers the resource with the given <db:code role="parameter">rccData</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns <db:code>true</db:code> if the file is successfully opened; otherwise returns <db:code>false</db:code>.</db:para>
<db:warning>
<db:para>The data must remain valid throughout the life of any <db:link xlink:href="qfile.xml">QFile</db:link> that may reference the resource data.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QResource::setFileName(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:para>Sets a <db:link xlink:href="qresource.xml">QResource</db:link> to point to <db:code role="parameter">file</db:code>. <db:code role="parameter">file</db:code> can either be absolute, in which case it is opened directly, if relative then the file will be tried to be found in QDir::searchPaths().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QResource::size() const</db:title>
<db:para>Returns the size of the data backing the resource.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterResource">
<db:title>[static] bool QResource::unregisterResource(const QString &amp;<db:emphasis>rccFileName</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:para>Unregisters the resource with the given <db:code role="parameter">rccFileName</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns <db:code>true</db:code> if the resource is successfully unloaded and no references exist for the resource; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterResource-1">
<db:title>[static, since 4.3] bool QResource::unregisterResource(const uchar *<db:emphasis>rccData</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:para>Unregisters the resource with the given <db:code role="parameter">rccData</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns <db:code>true</db:code> if the resource is successfully unloaded and no references exist into the resource; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QResource</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qresource.xml">QResource</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="addSearchPath">
<db:title>[static, deprecated] void QResource::addSearchPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use QDir::addSearchPath() with a prefix instead.</db:para>
<db:para>Adds <db:code role="parameter">path</db:code> to the search paths searched in to find resources that are not specified with an absolute path. The <db:code role="parameter">path</db:code> must be an absolute path (start with <db:code>/</db:code>).</db:para>
<db:para>The default search path is to search only in the root (<db:code>:/</db:code>). The last path added will be consulted first upon next <db:link xlink:href="qresource.xml">QResource</db:link> creation.</db:para>
</db:section>
<db:section xml:id="searchPaths">
<db:title>[static, deprecated] int QResource::searchPaths()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use QDir::searchPaths() instead.</db:para>
<db:para>Returns the current search path list. This list is consulted when creating a relative resource.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QDir::addSearchPath()</db:link></db:member>
<db:member><db:link xlink:href="">QDir::setSearchPaths()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
