<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QResource Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qresource.xml">QResource</db:link> class provides an interface for reading directly from resources.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QResource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QResource is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qresource.xml">QResource</db:link> is an object that represents a set of data (and possibly children) relating to a single resource entity. <db:link xlink:href="qresource.xml">QResource</db:link> gives direct access to the bytes in their raw format. In this way direct access allows reading data without buffer copying or indirection. Indirection is often useful when interacting with the resource entity as if it is a file, this can be achieved with <db:link xlink:href="qfile.xml">QFile</db:link>. The data and children behind a <db:link xlink:href="qresource.xml">QResource</db:link> are normally compiled into an application/library, but it is also possible to load a resource at runtime. When loaded at run time the resource file will be loaded as one big set of data and then given out in pieces via references into the resource tree.</db:para>
<db:para>A <db:link xlink:href="qresource.xml">QResource</db:link> can either be loaded with an absolute path, either treated as a file system rooted with a / character, or in resource notation rooted with a : character. A relative resource can also be opened which will be found in the list of paths returned by <db:link xlink:href="qdir.xml#searchPaths">QDir::searchPaths</db:link>().</db:para>
<db:para>A <db:link xlink:href="qresource.xml">QResource</db:link> that is representing a file will have data backing it, this data can possibly be compressed, in which case <db:link xlink:href="qbytearray.xml#qUncompress-2">qUncompress</db:link>() must be used to access the real data; this happens implicitly when accessed through a <db:link xlink:href="qfile.xml">QFile</db:link>. A <db:link xlink:href="qresource.xml">QResource</db:link> that is representing a directory will have only children and no data.</db:para>
<db:section xml:id="dynamic-resource-loading">
<db:title>Dynamic Resource Loading</db:title>
<db:para>A resource can be left out of an application's binary and loaded when it is needed at run-time by using the <db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>() function. The resource file passed into <db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>() must be a binary resource as created by rcc. Further information about binary resources can be found in <db:link xlink:href="resources.xml">The Qt Resource System</db:link> documentation.</db:para>
<db:para>This can often be useful when loading a large set of application icons that may change based on a setting, or that can be edited by a user and later recreated. The resource is immediately loaded into memory, either as a result of a single file read operation, or as a memory mapped file.</db:para>
<db:para>This approach can prove to be a significant performance gain as only a single file will be loaded, and pieces of data will be given out via the path requested in <db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>().</db:para>
<db:para>The <db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>() function removes a reference to a particular file. If there are <db:link xlink:href="qresource.xml">QResource</db:link> objects that currently reference resources related to the unregistered file, they will continue to be valid but the resource file itself will be removed from the resource roots, and thus no further <db:link xlink:href="qresource.xml">QResource</db:link> can be created pointing into this resource data. The resource itself will be unmapped from memory when the last <db:link xlink:href="qresource.xml">QResource</db:link> that points to it is destroyed.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="resources.xml">The Qt Resource System</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Compression-enum">
<db:title>enum QResource::Compression</db:title>
<db:enumsynopsis>
<db:enumname>Compression</db:enumname>
<db:enumitem>
<db:enumidentifier>NoCompression</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ZlibCompression</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ZstdCompression</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used by <db:link xlink:href="qresource.xml#compressionAlgorithm">compressionAlgorithm</db:link>() to indicate which algorithm the RCC tool used to compress the payload.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qresource.xml">QResource</db:link></db:emphasis>::NoCompression</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Contents are not compressed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qresource.xml">QResource</db:link></db:emphasis>::ZlibCompression</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Contents are compressed using <db:link xlink:href="https://zlib.net">zlib</db:link> and can be decompressed using the <db:link xlink:href="qbytearray.xml#qUncompress-2">qUncompress</db:link>() function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qresource.xml">QResource</db:link></db:emphasis>::ZstdCompression</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Contents are compressed using <db:link xlink:href="http://facebook.github.io/zstd/">zstd</db:link>. To decompress, use the ZSTD_decompress function from the zstd library.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#compressionAlgorithm">compressionAlgorithm</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QResource">
<db:title>QResource::QResource(const QString &amp;<db:emphasis>file</db:emphasis> = QString(), const QLocale &amp;<db:emphasis>locale</db:emphasis> = QLocale())</db:title>
<db:constructorsynopsis>
<db:methodname>QResource</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
<db:initializer>QLocale()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QResource(const QString &amp;file, const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qresource.xml">QResource</db:link> pointing to <db:code role="parameter">file</db:code>. <db:code role="parameter">locale</db:code> is used to load a specific localization of a resource data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml#searchPaths">QDir::searchPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QResource">
<db:title>QResource::~QResource()</db:title>
<db:destructorsynopsis>
<db:methodname>~QResource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QResource()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Releases the resources of the <db:link xlink:href="qresource.xml">QResource</db:link> object.</db:para>
</db:section>
<db:section xml:id="absoluteFilePath">
<db:title>QString QResource::absoluteFilePath() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>absoluteFilePath</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString absoluteFilePath() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the real path that this <db:link xlink:href="qresource.xml">QResource</db:link> represents, if the resource was found via the <db:link xlink:href="qdir.xml#searchPaths">QDir::searchPaths</db:link>() it will be indicated in the path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="children">
<db:title>[protected] QStringList QResource::children() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>children</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList children() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all resources in this directory, if the resource represents a file the list will be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isDir">isDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compressionAlgorithm">
<db:title>QResource::Compression QResource::compressionAlgorithm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QResource::Compression</db:type>
<db:methodname>compressionAlgorithm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QResource::Compression compressionAlgorithm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the compression type that this resource is compressed with, if any. If it is not compressed, this function returns <db:link xlink:href="qresource.xml#Compression-enum">QResource::NoCompression</db:link>.</db:para>
<db:para>If this function returns <db:link xlink:href="qresource.xml#Compression-enum">QResource::ZlibCompression</db:link>, you may decompress the data using the <db:link xlink:href="qbytearray.xml#qUncompress-2">qUncompress</db:link>() function. Up until Qt 5.13, this was the only possible compression algorithm.</db:para>
<db:para>If this function returns <db:link xlink:href="qresource.xml#Compression-enum">QResource::ZstdCompression</db:link>, you need to use the Zstandard library functions (&lt;zstd.h&gt; header). Qt does not provide a wrapper.</db:para>
<db:para>See <db:link xlink:href="http://facebook.github.io/zstd/zstd_manual.html">Zstandard manual</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>const uchar *QResource::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const uchar *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const uchar * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns direct access to a segment of read-only data, that this resource represents. If the resource is compressed, the data returned is also compressed. The caller must then decompress the data or use <db:link xlink:href="qresource.xml#uncompressedData">uncompressedData</db:link>(). If the resource is a directory, nullptr is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#uncompressedData">uncompressedData</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QResource::fileName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>fileName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString fileName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the full path to the file that this <db:link xlink:href="qresource.xml">QResource</db:link> represents as it was passed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDir">
<db:title>[protected] bool QResource::isDir() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDir</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDir() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the resource represents a directory and thus may have <db:link xlink:href="qresource.xml#children">children</db:link>() in it, false if it represents a file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFile">
<db:title>[protected] bool QResource::isFile() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFile</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFile() const</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the resource represents a file and thus has data backing it, false if it represents a directory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#isDir">isDir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QResource::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the resource really exists in the resource hierarchy, false otherwise.</db:para>
</db:section>
<db:section xml:id="lastModified">
<db:title>QDateTime QResource::lastModified() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>lastModified</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime lastModified() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date and time when the file was last modified before packaging into a resource.</db:para>
</db:section>
<db:section xml:id="locale">
<db:title>QLocale QResource::locale() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLocale</db:type>
<db:methodname>locale</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLocale locale() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the locale used to locate the data for the <db:link xlink:href="qresource.xml">QResource</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#setLocale">setLocale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerResource">
<db:title>[static] bool QResource::registerResource(const QString &amp;<db:emphasis>rccFileName</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>registerResource</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rccFileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mapRoot</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerResource(const QString &amp;rccFileName, const QString &amp;mapRoot)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the resource with the given <db:code role="parameter">rccFileName</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns true if the file is successfully opened; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerResource-1">
<db:title>[static] bool QResource::registerResource(const uchar *<db:emphasis>rccData</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>registerResource</db:methodname>
<db:methodparam>
<db:type>const uchar *</db:type>
<db:parameter>rccData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mapRoot</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerResource(const uchar *rccData, const QString &amp;mapRoot)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the resource with the given <db:code role="parameter">rccData</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns true if the file is successfully opened; otherwise returns false.</db:para>
<db:warning>
<db:para>The data must remain valid throughout the life of any <db:link xlink:href="qfile.xml">QFile</db:link> that may reference the resource data.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#unregisterResource">unregisterResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QResource::setFileName(const QString &amp;<db:emphasis>file</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFileName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>file</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFileName(const QString &amp;file)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:link xlink:href="qresource.xml">QResource</db:link> to point to <db:code role="parameter">file</db:code>. <db:code role="parameter">file</db:code> can either be absolute, in which case it is opened directly, if relative then the file will be tried to be found in <db:link xlink:href="qdir.xml#searchPaths">QDir::searchPaths</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#absoluteFilePath">absoluteFilePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QResource::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a <db:link xlink:href="qresource.xml">QResource</db:link> to only load the localization of resource to for <db:code role="parameter">locale</db:code>. If a resource for the specific locale is not found then the C locale is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#locale">locale</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>qint64 QResource::size() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>size</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 size() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the stored data backing the resource.</db:para>
<db:para>If the resource is compressed, this function returns the size of the compressed data. See <db:link xlink:href="qresource.xml#uncompressedSize">uncompressedSize</db:link>() for the uncompressed size.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#uncompressedSize">uncompressedSize</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uncompressedData">
<db:title>QByteArray QResource::uncompressedData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>uncompressedData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray uncompressedData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the resource data, decompressing it first, if the data was stored compressed. If the resource is a directory or an error occurs while decompressing, a null <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is returned.</db:para>
<db:note>
<db:para>If the data was compressed, this function will decompress every time it is called. The result is not cached between calls.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#uncompressedSize">uncompressedSize</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#compressionAlgorithm">compressionAlgorithm</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uncompressedSize">
<db:title>qint64 QResource::uncompressedSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>uncompressedSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 uncompressedSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the data in this resource. If the data was not compressed, this function returns the same as <db:link xlink:href="qresource.xml#size">size</db:link>(). If it was, then this function extracts the size of the original uncompressed data from the stored stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#uncompressedData">uncompressedData</db:link>()</db:member>
<db:member><db:link xlink:href="qresource.xml#isFile">isFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterResource">
<db:title>[static] bool QResource::unregisterResource(const QString &amp;<db:emphasis>rccFileName</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>unregisterResource</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>rccFileName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mapRoot</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unregisterResource(const QString &amp;rccFileName, const QString &amp;mapRoot)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unregisters the resource with the given <db:code role="parameter">rccFileName</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns true if the resource is successfully unloaded and no references exist for the resource; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterResource-1">
<db:title>[static] bool QResource::unregisterResource(const uchar *<db:emphasis>rccData</db:emphasis>, const QString &amp;<db:emphasis>mapRoot</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>unregisterResource</db:methodname>
<db:methodparam>
<db:type>const uchar *</db:type>
<db:parameter>rccData</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mapRoot</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool unregisterResource(const uchar *rccData, const QString &amp;mapRoot)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unregisters the resource with the given <db:code role="parameter">rccData</db:code> at the location in the resource tree specified by <db:code role="parameter">mapRoot</db:code>, and returns true if the resource is successfully unloaded and no references exist into the resource; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qresource.xml#registerResource">registerResource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
