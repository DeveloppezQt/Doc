<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Customizing Qt Widgets Using Style Sheets</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="stylesheet-designer.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Qt Designer Integration"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="stylesheet-reference.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Qt Style Sheets Reference"/></db:extendedlink>
<db:abstract>
<db:para>Qt Widgets Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>When using style sheets, every widget is treated as a box with four concentric rectangles: the margin rectangle, the border rectangle, the padding rectangle, and the content rectangle. The box model describes this in further detail.</db:para>
<db:anchor xml:id="box-model"/>
<db:section xml:id="the-box-model">
<db:title>The Box Model</db:title>
<db:para>The four concentric rectangles appear conceptually as below:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stylesheet-boxmodel.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para>The margin falls outside the border.</db:para>
</db:listitem>
<db:listitem>
<db:para>The border is drawn between the margin and the padding.</db:para>
</db:listitem>
<db:listitem>
<db:para>The padding falls inside the border, between the border and the actual contents.</db:para>
</db:listitem>
<db:listitem>
<db:para>The content is what is left from the original widget or subcontrol once we have removed the margin, the border, and the padding.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="stylesheet-reference.xml#margin-prop">margin</db:link>, <db:link xlink:href="stylesheet-reference.xml#border-width-prop">border-width</db:link>, and <db:link xlink:href="stylesheet-reference.xml#padding-prop">padding</db:link> properties all default to zero. In that case, all four rectangles (margin, border, padding, and content) coincide exactly.</db:para>
<db:para>You can specify a background for the widget using the <db:link xlink:href="stylesheet-reference.xml#background-image-prop">background-image</db:link> property. By default, the background-image is drawn only for the area inside the border. This can be changed using the <db:link xlink:href="stylesheet-reference.xml#background-clip-prop">background-clip</db:link> property. You can use <db:link xlink:href="stylesheet-reference.xml#background-repeat-prop">background-repeat</db:link> and <db:link xlink:href="stylesheet-reference.xml#background-origin-prop">background-origin</db:link> to control the repetition and origin of the background image.</db:para>
<db:para>A background-image does not scale with the size of the widget. To provide a &quot;skin&quot; or background that scales along with the widget size, one must use <db:link xlink:href="stylesheet-reference.xml#border-image-prop">border-image</db:link>. Since the border-image property provides an alternate background, it is not required to specify a background-image when border-image is specified. In the case, when both of them are specified, the border-image draws over the background-image.</db:para>
<db:para>In addition, the <db:link xlink:href="stylesheet-reference.xml#image-prop">image</db:link> property may be used to draw an image over the border-image. The image specified does not tile or stretch and when its size does not match the size of the widget, its alignment is specified using the <db:link xlink:href="stylesheet-reference.xml#image-position-prop">image-position</db:link> property. Unlike background-image and border-image, one may specify a SVG in the image property, in which case the image is scaled automatically according to the widget size.</db:para>
<db:para>The steps to render a rule are as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Set clip for entire rendering operation (border-radius)</db:para>
</db:listitem>
<db:listitem>
<db:para>Draw the background (background-image)</db:para>
</db:listitem>
<db:listitem>
<db:para>Draw the border (border-image, border)</db:para>
</db:listitem>
<db:listitem>
<db:para>Draw overlay image (image)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="sub-controls">
<db:title>Sub-controls</db:title>
<db:para>A widget is considered as a hierarchy (tree) of subcontrols drawn on top of each other. For example, the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> draws the drop-down sub-control followed by the down-arrow sub-control. A <db:link xlink:href="qcombobox.xml">QComboBox</db:link> is thus rendered as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Render the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> { } rule</db:para>
</db:listitem>
<db:listitem>
<db:para>Render the QComboBox::drop-down { } rule</db:para>
</db:listitem>
<db:listitem>
<db:para>Render the QComboBox::down-arrow { } rule</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Sub-controls share a parent-child relationship. In the case of <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, the parent of down-arrow is the drop-down and the parent of drop-down is the widget itself. Sub-controls are positioned within their parent using the <db:link xlink:href="stylesheet-reference.xml#subcontrol-position-prop">subcontrol-position</db:link> and <db:link xlink:href="stylesheet-reference.xml#subcontrol-origin-prop">subcontrol-origin</db:link> properties.</db:para>
<db:para>Once positioned, sub-controls can be styled using the <db:link xlink:href="stylesheet-customizing.xml#box-model">box model</db:link>.</db:para>
<db:note>
<db:para>With complex widgets such as <db:link xlink:href="qcombobox.xml">QComboBox</db:link> and <db:link xlink:href="qscrollbar.xml">QScrollBar</db:link>, if one property or sub-control is customized, <db:emphasis role="bold">all</db:emphasis> the other properties or sub-controls must be customized as well.</db:para>
</db:note>
</db:section>
</db:article>
