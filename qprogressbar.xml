<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QProgressBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> widget provides a horizontal or vertical progress bar.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProgressBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProgressBar is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-progressbar.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A progress bar is used to give the user an indication of the progress of an operation and to reassure them that the application is still running.</db:para>
<db:para>The progress bar uses the concept of <db:emphasis>steps</db:emphasis>. You set it up by specifying the minimum and maximum possible step values, and it will display the percentage of steps that have been completed when you later give it the current step value. The percentage is calculated by dividing the progress (<db:link xlink:href="qprogressbar.xml#value-prop">value</db:link>() - <db:link xlink:href="qprogressbar.xml#minimum-prop">minimum</db:link>()) divided by <db:link xlink:href="qprogressbar.xml#maximum-prop">maximum</db:link>() - <db:link xlink:href="qprogressbar.xml#minimum-prop">minimum</db:link>().</db:para>
<db:para>You can specify the minimum and maximum number of steps with <db:link xlink:href="qprogressbar.xml#minimum-prop">setMinimum</db:link>() and <db:link xlink:href="qprogressbar.xml#maximum-prop">setMaximum</db:link>. The current number of steps is set with <db:link xlink:href="qprogressbar.xml#value-prop">setValue</db:link>(). The progress bar can be rewound to the beginning with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:para>If minimum and maximum both are set to 0, the bar shows a busy indicator instead of a percentage of steps. This is useful, for example, when using <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to download items when they are unable to determine the size of the item being downloaded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Direction-enum">
<db:title>enum QProgressBar::Direction</db:title>
<db:para>Specifies the reading direction of the <db:link xlink:href="qprogressbar.xml#text-prop">text</db:link> for vertical progress bars.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:emphasis>::TopToBottom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The text is rotated 90 degrees clockwise.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:emphasis>::BottomToTop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The text is rotated 90 degrees counter-clockwise.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that whether or not the text is drawn is dependent on the style. Currently CleanLooks and Plastique draw the text. Mac, Windows and WindowsVista style do not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#textDirection-prop">textDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="alignment-prop">
<db:title>alignment : Qt::Alignment</db:title>
<db:para>This property holds the alignment of the progress bar</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis role="bold">alignment</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAlignment</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::Alignment</db:link></db:type> <db:emphasis>alignment</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="format-prop">
<db:title>format : QString</db:title>
<db:para>This property holds the string used to generate the current text</db:para>
<db:para>%p - is replaced by the percentage completed. %v - is replaced by the current value. %m - is replaced by the total number of steps.</db:para>
<db:para>The default value is &quot;%p%&quot;.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">format</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setFormat</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>format</db:emphasis>)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">resetFormat</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#text-prop">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invertedAppearance-prop">
<db:title>invertedAppearance : bool</db:title>
<db:para>This property holds whether or not a progress bar shows its progress inverted</db:para>
<db:para>If this property is true, the progress bar grows in the other direction (e.g. from right to left). By default, the progress bar is not inverted.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">invertedAppearance</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setInvertedAppearance</db:emphasis>(<db:type>bool</db:type> <db:emphasis>invert</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#orientation-prop">orientation</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#layoutDirection-prop">layoutDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximum-prop">
<db:title>maximum : int</db:title>
<db:para>This property holds the progress bar's maximum value</db:para>
<db:para>When setting this property, the <db:link xlink:href="qprogressbar.xml#minimum-prop">minimum</db:link> is adjusted if necessary to ensure that the range remains valid. If the current value falls outside the new range, the progress bar is reset with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maximum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMaximum</db:emphasis>(<db:type>int</db:type> <db:emphasis>maximum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minimum-prop">
<db:title>minimum : int</db:title>
<db:para>This property holds the progress bar's minimum value</db:para>
<db:para>When setting this property, the <db:link xlink:href="qprogressbar.xml#maximum-prop">maximum</db:link> is adjusted if necessary to ensure that the range remains valid. If the current value falls outside the new range, the progress bar is reset with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minimum</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMinimum</db:emphasis>(<db:type>int</db:type> <db:emphasis>minimum</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : Qt::Orientation</db:title>
<db:para>This property holds the orientation of the progress bar</db:para>
<db:para>The orientation must be <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> (the default) or <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrientation</db:emphasis>(<db:emphasis>Qt::Orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#invertedAppearance-prop">invertedAppearance</db:link></db:member>
<db:member><db:link xlink:href="qprogressbar.xml#textDirection-prop">textDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="text-prop">
<db:title>[read-only] text : const QString</db:title>
<db:para>This property holds the descriptive text shown with the progress bar</db:para>
<db:para>The text returned is the same as the text displayed in the center (or in some styles, to the left) of the progress bar.</db:para>
<db:para>The progress shown in the text may be smaller than the minimum value, indicating that the progress bar is in the &quot;reset&quot; state before any progress is set.</db:para>
<db:para>In the default implementation, the text either contains a percentage value that indicates the progress so far, or it is blank because the progress bar is in the reset state.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>virtual <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">text</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="textDirection-prop">
<db:title>textDirection : Direction</db:title>
<db:para>This property holds the reading direction of the <db:link xlink:href="qprogressbar.xml#text-prop">text</db:link> for vertical progress bars</db:para>
<db:para>This property has no impact on horizontal progress bars. By default, the reading direction is <db:link xlink:href="qprogressbar.xml#Direction-enum">QProgressBar::TopToBottom</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qprogressbar.xml#Direction-enum">QProgressBar::Direction</db:link></db:type> <db:emphasis role="bold">textDirection</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextDirection</db:emphasis>(<db:type><db:link xlink:href="qprogressbar.xml#Direction-enum">QProgressBar::Direction</db:link></db:type> <db:emphasis>textDirection</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#orientation-prop">orientation</db:link></db:member>
<db:member><db:link xlink:href="qprogressbar.xml#textVisible-prop">textVisible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="textVisible-prop">
<db:title>textVisible : bool</db:title>
<db:para>This property holds whether the current completed percentage should be displayed</db:para>
<db:para>This property may be ignored by the style (e.g., QMacStyle never draws the text).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isTextVisible</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setTextVisible</db:emphasis>(<db:type>bool</db:type> <db:emphasis>visible</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#textDirection-prop">textDirection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-prop">
<db:title>value : int</db:title>
<db:para>This property holds the progress bar's current value</db:para>
<db:para>Attempting to change the current value to one outside the minimum-maximum range has no effect on the current value.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">value</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setValue</db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qprogressbar.xml#valueChanged">valueChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>value</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProgressBar">
<db:title>[explicit] QProgressBar::QProgressBar(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a progress bar with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>By default, the minimum step value is set to 0, and the maximum to 100.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QProgressBar">
<db:title>[virtual noexcept] QProgressBar::~QProgressBar()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QProgressBar::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[virtual protected] void QProgressBar::initStyleOption(QStyleOptionProgressBar *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionprogressbar.xml">QStyleOptionProgressBar</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QProgressBar::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QProgressBar::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QProgressBar::reset()</db:title>
<db:para>Reset the progress bar. The progress bar &quot;rewinds&quot; and shows no progress.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QProgressBar::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:para>Sets the progress bar's minimum and maximum values to <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> respectively.</db:para>
<db:para>If <db:code role="parameter">maximum</db:code> is smaller than <db:code role="parameter">minimum</db:code>, <db:code role="parameter">minimum</db:code> becomes the only legal value.</db:para>
<db:para>If the current value falls outside the new range, the progress bar is reset with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:para>The <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> can be set to undetermined state by using setRange(0, 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#minimum-prop">minimum</db:link></db:member>
<db:member><db:link xlink:href="qprogressbar.xml#maximum-prop">maximum</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QProgressBar::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QProgressBar::valueChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value shown in the progress bar changes. <db:code role="parameter">value</db:code> is the new value shown by the progress bar.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qprogressbar.xml#value-prop">value</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
</db:article>
