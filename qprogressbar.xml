<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QProgressBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link> widget provides a horizontal or vertical progress bar.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QProgressBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QProgressBar is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A progress bar is used to give the user an indication of the progress of an operation and to reassure them that the application is still running.</db:para>
<db:para>The progress bar uses the concept of <db:emphasis>steps</db:emphasis>. You set it up by specifying the minimum and maximum possible step values, and it will display the percentage of steps that have been completed when you later give it the current step value. The percentage is calculated by dividing the progress (value() - minimum()) divided by maximum() - minimum().</db:para>
<db:para>You can specify the minimum and maximum number of steps with setMinimum() and setMaximum. The current number of steps is set with setValue(). The progress bar can be rewound to the beginning with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:para>If minimum and maximum both are set to 0, the bar shows a busy indicator instead of a percentage of steps. This is useful, for example, when using <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to download items when they are unable to determine the size of the item being downloaded.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/macintosh-progressbar.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Macintosh style progress bar</db:para>
</db:td>
<db:td>
<db:para>A progress bar shown in the Macintosh widget style.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/windowsvista-progressbar.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Windows Vista style progress bar</db:para>
</db:td>
<db:td>
<db:para>A progress bar shown in the Windows Vista widget style.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-progressbar.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style progress bar</db:para>
</db:td>
<db:td>
<db:para>A progress bar shown in the Fusion widget style.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressdialog.xml">QProgressDialog</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Progress Indicator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Direction-enum">
<db:title>[since 4.1] enum QProgressBar::Direction</db:title>
<db:para>Specifies the reading direction of the text for vertical progress bars.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:emphasis>::TopToBottom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The text is rotated 90 degrees clockwise.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qprogressbar.xml">QProgressBar</db:link></db:emphasis>::BottomToTop</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The text is rotated 90 degrees counter-clockwise.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Note that whether or not the text is drawn is dependent on the style. Currently CleanLooks and Plastique draw the text. Mac, Windows and WindowsXP style do not.</db:para>
<db:para>This enum was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>textDirection</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QProgressBar">
<db:title>[explicit] QProgressBar::QProgressBar(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a progress bar with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>By default, the minimum step value is set to 0, and the maximum to 100.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qprogressbar.xml#setRange">setRange</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QProgressBar">
<db:title>[virtual noexcept] QProgressBar::~QProgressBar()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QProgressBar::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QProgressBar::initStyleOption(QStyleOptionProgressBar *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qprogressbar.xml">QProgressBar</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionprogressbar.xml">QStyleOptionProgressBar</db:link> or <db:link xlink:href="qstyleoptionprogressbar.xml#QStyleOptionProgressBarV2-typedef">QStyleOptionProgressBarV2</db:link>, but don't want to fill in all the information themselves. This function will check the version of the <db:link xlink:href="qstyleoptionprogressbar.xml">QStyleOptionProgressBar</db:link> and fill in the additional values for a <db:link xlink:href="qstyleoptionprogressbar.xml#QStyleOptionProgressBarV2-typedef">QStyleOptionProgressBarV2</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QProgressBar::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QProgressBar::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QProgressBar::reset()</db:title>
<db:para>Reset the progress bar. The progress bar &quot;rewinds&quot; and shows no progress.</db:para>
</db:section>
<db:section xml:id="setRange">
<db:title>void QProgressBar::setRange(int <db:emphasis>minimum</db:emphasis>, int <db:emphasis>maximum</db:emphasis>)</db:title>
<db:para>Sets the progress bar's minimum and maximum values to <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> respectively.</db:para>
<db:para>If <db:code role="parameter">maximum</db:code> is smaller than <db:code role="parameter">minimum</db:code>, <db:code role="parameter">minimum</db:code> becomes the only legal value.</db:para>
<db:para>If the current value falls outside the new range, the progress bar is reset with <db:link xlink:href="qprogressbar.xml#reset">reset</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>minimum</db:member>
<db:member>maximum</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QProgressBar::sizeHint() const</db:title>
</db:section>
<db:section xml:id="valueChanged">
<db:title>void QProgressBar::valueChanged(int <db:emphasis>value</db:emphasis>)</db:title>
<db:para>This signal is emitted when the value shown in the progress bar changes. <db:code role="parameter">value</db:code> is the new value shown by the progress bar.</db:para>
</db:section>
</db:section>
</db:article>
