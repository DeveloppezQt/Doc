<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using TinyCAN Plugin</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of how to use the TinyCAN plugin.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The TinyCAN plugin encapsulates the low-level API to work with the <db:link xlink:href="http://www.mhs-elektronik.de/">MHS Elektronik</db:link> CAN adapters.</db:para>
<db:note>
<db:para>The TinyCAN adapters use virtual serial ports. To communicate with TinyCAN adapters in Linux, the user must have appropriate access rights. Usually these rights are given to all users in the group &quot;dialout&quot;.</db:para>
</db:note>
<db:section xml:id="creating-can-bus-devices">
<db:title>Creating CAN Bus Devices</db:title>
<db:para>At first it is necessary to check that <db:link xlink:href="qcanbus.xml">QCanBus</db:link> provides the desired plugin:</db:para>
<db:programlisting language="cpp">if (QCanBus::instance()-&amp;gt;plugins().contains(QStringLiteral(&quot;tinycan&quot;))) {
    // plugin available
}
</db:programlisting>
<db:para>Where <db:emphasis>tinycan</db:emphasis> is the plugin name.</db:para>
<db:para>Next, a connection to a specific interface can be established:</db:para>
<db:programlisting language="cpp">QCanBusDevice *device = QCanBus::instance()-&amp;gt;createDevice(
    QStringLiteral(&quot;tinycan&quot;), QStringLiteral(&quot;can0.0&quot;));
device-&amp;gt;connectDevice();
</db:programlisting>
<db:para>Where <db:emphasis>can0.0</db:emphasis> is the active CAN interface name. TinyCAN currently only provides the interface <db:emphasis>can0.0</db:emphasis>, which maps to INDEX_CAN_KANAL_A in the TinyCAN plugin.</db:para>
<db:note>
<db:para>The function availableDevices() currently always returns one device &quot;can0.0&quot; as there is no way to detect the available CAN adapters for now.</db:para>
</db:note>
<db:note>
<db:para>Only the USB adapters are currently supported by this plugin.</db:para>
</db:note>
<db:para>The device is now open for writing and reading CAN frames:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame;
frame.setFrameId(8);
QByteArray payload(&quot;A36E&quot;);
frame.setPayload(payload);
device-&amp;gt;writeFrame(frame);
</db:programlisting>
<db:para>The reading can be done using the <db:link xlink:href="qcanbusdevice.xml#readFrame">readFrame</db:link>() method. The <db:link xlink:href="qcanbusdevice.xml#framesReceived">framesReceived</db:link>() signal is emitted when at least one new frame is available for reading:</db:para>
<db:programlisting language="cpp">QCanBusFrame frame = device-&amp;gt;readFrame();
</db:programlisting>
<db:para>TinyCAN supports the following configurations that can be controlled through <db:link xlink:href="qcanbusdevice.xml#setConfigurationParameter">setConfigurationParameter</db:link>():</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Configuration parameter key</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qcanbusdevice.xml#ConfigurationKey-enum">QCanBusDevice::BitRateKey</db:link></db:para>
</db:td>
<db:td>
<db:para>Determines the bit rate of the CAN bus connection. The following bit rates are supported: 10000, 20000, 50000, 100000, 125000, 250000, 500000, 800000, 1000000.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>TinyCAN supports the following additional functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcanbusdevice.xml#resetController">QCanBusDevice::resetController</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
