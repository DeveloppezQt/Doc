<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Platform and Compiler Notes - Android</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>Platform and Compiler Notes</db:para>
<db:para>This page contains information particular to building Qt applications for and running them on the <db:link xlink:href="android-support.xml">Android</db:link> platform. Qt supports Android versions 4.1 (API level 16) or later.</db:para>
<db:section xml:id="android-development-in-qt-creator">
<db:title>Android Development in Qt Creator</db:title>
<db:para>The easiest way to develop with Qt for Android is to use <db:link xlink:href="http://doc.qt.io/qtcreator/creator-developing-android.html">Qt Creator</db:link>. When you apply a <db:emphasis role="bold">Qt for Android Kit</db:emphasis> to a Qt Creator project, it will create and maintain a set of files which are required to make your application run on Android.</db:para>
<db:para>The files added to your project are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis>.java</db:emphasis> files will serve as the entry point into your application and automatically load Qt to execute the native code in your application</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis>AndroidManifest.xml</db:emphasis> which provides meta-information about your application</db:para>
</db:listitem>
<db:listitem>
<db:para>Other XML files detailing the dependencies of your application</db:para>
</db:listitem>
<db:listitem>
<db:para>Resource files</db:para>
</db:listitem>
<db:listitem>
<db:para>Depending on the deployment method selected in Qt Creator, additional files like libraries and QML files can be included in the project.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Qt Creator adds these files in a subdirectory of your project called <db:emphasis role="bold">android</db:emphasis>. The contents of the <db:emphasis role="bold">android</db:emphasis> folder is used as basis for your app's distributable application package.</db:para>
</db:section>
<db:section xml:id="application-package">
<db:title>Application Package</db:title>
<db:para>On Android, apps are distributed in packages called <db:emphasis>APK</db:emphasis>. Qt Creator builds the <db:emphasis>APK</db:emphasis> for you, but if you for some reason want to do this manually, you must first make sure that the appropriate packaging and build files are in place. For more detailed information about how the packaging is done, see <db:link xlink:href="deployment-android.xml">Deploying an Application on Android</db:link>.</db:para>
</db:section>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>Qt Creator currently supports three methods of deployment for Android apps: the default deployment method is suitable for distribution of the APK file. With this deployment method, the necessary Qt libraries and files will be copied into your project directory, and bundled as part of the APK, so that you get a stand-alone, distributable application package.</db:para>
<db:section xml:id="deployment-with-ministro">
<db:title>Deployment with Ministro</db:title>
<db:para>The second method is suitable if you want to minimize the size of your APK, and can be selected by opening the <db:emphasis role="bold">Run</db:emphasis> settings of your project, expanding <db:emphasis role="bold">Deploy Configurations</db:emphasis> and removing the tick from the <db:emphasis role="bold">Use local Qt libraries</db:emphasis> check box. In this case, your application will have an external dependency called <db:emphasis role="bold">Ministro</db:emphasis>. If a user downloads your application, and it is the first application on their device to depend on Ministro, they will be asked to install it before they can run your application. Ministro downloads Qt libraries from a repository of your choice. The repository URL can be set by editing the file <db:emphasis>android/res/values/libs.xml</db:emphasis> which is created by Qt Creator when configuring your project. Ministro will then serve as a central repository for Qt libraries, and several apps can share the libraries to limit the amount of duplication. Note that using this deployment method requires a repository for the libraries you want to distribute.</db:para>
</db:section>
<db:section xml:id="deployment-for-debugging">
<db:title>Deployment for Debugging</db:title>
<db:para>The third method is more convenient when you are simply testing your application on a device physically connected to your development machine (or an emulator). It will copy the Qt libraries into a temporary directory on your device and run the application against these instead. An APK built in this way is not distributable, since it relies on the device being prepared to contain the Qt libraries in the correct location. However, since the Qt libraries are only copied into the device once, it benefits from a faster turn-around time, so it's more suited for testing changes to your application during development. This deployment method can be selected by opening the <db:emphasis role="bold">Run</db:emphasis> settings of your project, expanding <db:emphasis role="bold">Deploy Configurations</db:emphasis> and choosing <db:emphasis role="bold">Deploy local Qt libraries</db:emphasis>. Make sure the <db:emphasis role="bold">Use local Qt libraries</db:emphasis> check box is also ticked.</db:para>
</db:section>
</db:section>
<db:section xml:id="plugins-and-imports-special-considerations">
<db:title>Plugins and Imports Special Considerations</db:title>
<db:para>If an application uses plugins or imports that depend on other modules, these modules have to be listed in the application's dependencies. This is because Qt Creator does not know ahead of time which imports or plugins your application will end up loading.</db:para>
<db:para>For example, if your application's QML code imports <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link>, then the Qt Multimedia module must explicitly be made a dependency of the application. You can do this by adding it to the application .pro file:</db:para>
<db:programlisting language="cpp">QT += multimedia
</db:programlisting>
<db:para>It is also possible to manually enable dependencies on Qt libraries by opening the <db:emphasis role="bold">Run</db:emphasis> settings of your project, expanding <db:emphasis role="bold">Package configurations</db:emphasis> and selecting the <db:emphasis role="bold">Libraries</db:emphasis> tab. Manually check the libraries that are dependencies of your project.</db:para>
</db:section>
<db:section xml:id="text-special-considerations">
<db:title>Text Special Considerations</db:title>
<db:para>Because of a bug in some OpenGL drivers, the mechanism used by Qt to cache text glyphs does not work as expected on all Android devices, causing text to appear scrambled. To remedy this, a workaround is in place, which increases memory consumption and can also affect text rendering performance. Before Qt 5.3.2, the workaround was enabled only for a particular set of devices. It is now used by default on all devices.</db:para>
<db:para>You can disable the workaround by setting the QT_ANDROID_DISABLE_GLYPH_CACHE_WORKAROUND environment variable to 1. You should do so only after verifying that text appears correctly on all targeted devices.</db:para>
</db:section>
<db:section xml:id="opengl-special-considerations">
<db:title>OpenGL Special Considerations</db:title>
<db:para>There are some special considerations to be made when OpenGL is used. The platform plugin only supports full screen top-level OpenGL windows. This means that even dialogs and popups will be shown as full screen. There may also be drawing errors if you try to stack windows that have animations or otherwise require updating their UI while they are obscured by another window.</db:para>
<db:para>It is recommended that you try to avoid multiple top-level windows in the case of Android apps, as there is no traditional window system on this platform.</db:para>
<db:note>
<db:para>Embedding a QGLWidget inside a widget hierarchy is not supported. When QGLWidget is in use, it must be the top-level widget.</db:para>
</db:note>
<db:note>
<db:para>Avoid using the legacy QGLWidget. For embedding OpenGL or Qt Quick content into a widget-based user interface, prefer using <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> and <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
</db:note>
<db:para>Modern devices often support OpenGL ES 3.0 or 3.1 in addition to 2.0. To get a suitable OpenGL context, set the requested version via <db:link xlink:href="qsurfaceformat.xml#setVersion">QSurfaceFormat::setVersion</db:link>(). Note however that the header files are only available in recent API levels, for example to include gl31.h, you need to target API level 21. Keep in mind also that using OpenGL ES 3.x features will result in the application breaking on older devices that only support 2.0.</db:para>
</db:section>
<db:section xml:id="multimedia-special-considerations">
<db:title>Multimedia Special Considerations</db:title>
<db:para>The <db:link xlink:href="qtmultimediawidgets-index.xml">Qt Multimedia Widgets</db:link> module is not supported on Android, which means video display is only available using the <db:link xlink:href="qml-qtmultimedia-videooutput.xml">VideoOutput</db:link> and the <db:link xlink:href="qml-qtmultimedia-video.xml">Video</db:link> QML Type.</db:para>
</db:section>
<db:section xml:id="assets-file-system">
<db:title>Assets File System</db:title>
<db:para>Qt for Android provides a special, virtual file system which is based on the <db:emphasis>assets</db:emphasis> mechanism in Android. Files that are put under <db:emphasis>assets</db:emphasis> in the <db:emphasis>android</db:emphasis> folder created by Qt Creator, will be packaged as part of your application package. These can be accessed in Qt by prefixing the paths with assets:/. For instance, to access the image <db:emphasis>logo.png</db:emphasis> in the folder <db:emphasis>assets/images</db:emphasis>, you can use QPixmap(&quot;assets:/images/logo.png&quot;).</db:para>
<db:para>If using the assets mechanism is not required for your app, the recommended way of distributing resources with your Qt app is to use <db:link xlink:href="resources.xml">The Qt Resource System</db:link>, which is a cross-platform mechanism for distributing resources with your app.</db:para>
</db:section>
<db:section xml:id="supported-architectures">
<db:title>Supported Architectures</db:title>
<db:para>Qt for Android currently has binaries for ARMv7 and x86. Make sure you select the correct architecture for the device or emulator you are targeting, otherwise your application will crash. The MIPS archictecture is currently not supported by Qt.</db:para>
<db:para>If you want to support several different architectures in your application, the recommendation is to build separate APKs for each architecture, so that each APK only contains the binaries required for the targeted architecture. For more information about this, see the Android documentation about <db:link xlink:href="http://developer.android.com/google/play/publishing/multiple-apks.html">Multiple APK Support</db:link>.</db:para>
</db:section>
</db:article>
