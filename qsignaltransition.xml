<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSignalTransition Class</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> class provides a transition based on a Qt signal.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS StateMachine)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::StateMachine)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += statemachine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSignalTransition is part of <db:simplelist><db:member>statemachine</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Typically you would use the overload of <db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>() that takes a sender and signal as arguments, rather than creating <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> objects directly. <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> is part of <db:link xlink:href="qtstatemachine-overview.xml">Qt State Machine Framework</db:link>.</db:para>
<db:para>You can subclass <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> and reimplement <db:link xlink:href="qsignaltransition.xml#eventTest">eventTest</db:link>() to make a signal transition conditional; the event object passed to <db:link xlink:href="qsignaltransition.xml#eventTest">eventTest</db:link>() will be a <db:link xlink:href="qstatemachine-signalevent.xml">QStateMachine::SignalEvent</db:link> object. Example:</db:para>
<db:programlisting language="cpp">class CheckedTransition : public QSignalTransition
{
public:
    CheckedTransition(QCheckBox *check)
        : QSignalTransition(check, SIGNAL(stateChanged(int))) {}
protected:
    bool eventTest(QEvent *e) {
        if (!QSignalTransition::eventTest(e))
            return false;
        QStateMachine::SignalEvent *se = static_cast&amp;lt;QStateMachine::SignalEvent*&amp;gt;(e);
        return (se-&amp;gt;arguments().at(0).toInt() == Qt::Checked);
    }
};

...

QCheckBox *check = new QCheckBox();
check-&amp;gt;setTristate(true);

QState *s1 = new QState();
QState *s2 = new QState();
CheckedTransition *t1 = new CheckedTransition(check);
t1-&amp;gt;setTargetState(s2);
s1-&amp;gt;addTransition(t1);
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="senderObject-prop">
<db:title>senderObject : const QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>const QObject*</db:type>
<db:varname>senderObject</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">senderObject</db:synopsisinfo>
<db:synopsisinfo role="setter">setSenderObject</db:synopsisinfo>
<db:synopsisinfo role="notifier">senderObjectChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the sender object that this signal transition is associated with</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>const <db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#senderObject">senderObject</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#setSenderObject">setSenderObject</db:link></db:emphasis>(const <db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis>sender</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#senderObjectChanged">senderObjectChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
<db:section xml:id="signal-prop">
<db:title>signal : QByteArray</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QByteArray</db:type>
<db:varname>signal</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">signal</db:synopsisinfo>
<db:synopsisinfo role="setter">setSignal</db:synopsisinfo>
<db:synopsisinfo role="notifier">signalChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the signal that this signal transition is associated with</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#signal">signal</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#setSignal">setSignal</db:link></db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>signal</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qsignaltransition.xml#signalChanged">signalChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalTransition">
<db:title>QSignalTransition::QSignalTransition(QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalTransition</db:methodname>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalTransition(QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new signal transition with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QSignalTransition-1">
<db:title>QSignalTransition::QSignalTransition(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalTransition</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalTransition(const QObject *sender, const char *signal, QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new signal transition associated with the given <db:code role="parameter">signal</db:code> of the given <db:code role="parameter">sender</db:code>, and with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QSignalTransition-2">
<db:title>[since 5.7] QSignalTransition::QSignalTransition(const QObject *<db:emphasis>sender</db:emphasis>, PointerToMemberFunction <db:emphasis>signal</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QSignalTransition</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>PointerToMemberFunction</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QState *</db:type>
<db:parameter>sourceState</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSignalTransition(const QObject *sender, PointerToMemberFunction signal, QState *sourceState)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a new signal transition associated with the given <db:code role="parameter">signal</db:code> of the given <db:code role="parameter">sender</db:code> object and with the given <db:code role="parameter">sourceState</db:code>. This constructor is enabled if the compiler supports delegating constructors, as indicated by the presence of the macro Q_COMPILER_DELEGATING_CONSTRUCTORS.</db:para>
<db:para>This function was introduced in Qt 5.7.</db:para>
</db:section>
<db:section xml:id="dtor.QSignalTransition">
<db:title>[virtual] QSignalTransition::~QSignalTransition()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QSignalTransition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSignalTransition()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this signal transition.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSignalTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#event" role="function">QAbstractTransition::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventTest">
<db:title>[override virtual protected] bool QSignalTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>eventTest</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool eventTest(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#eventTest" role="function">QAbstractTransition::eventTest(QEvent *event)</db:link>.</db:para>
<db:para>The default implementation returns <db:code>true</db:code> if the <db:code role="parameter">event</db:code> is a <db:link xlink:href="qstatemachine-signalevent.xml">QStateMachine::SignalEvent</db:link> object and the event's sender and signal index match this transition, and returns <db:code>false</db:code> otherwise.</db:para>
</db:section>
<db:section xml:id="onTransition">
<db:title>[override virtual protected] void QSignalTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>onTransition</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void onTransition(QEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#onTransition" role="function">QAbstractTransition::onTransition(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="senderObject">
<db:title>const QObject *QSignalTransition::senderObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QObject *</db:type>
<db:methodname>senderObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">senderObject</db:synopsisinfo>
<db:synopsisinfo role="signature">const QObject * senderObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sender object associated with this signal transition.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsignaltransition.xml#senderObject-prop">senderObject</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#setSenderObject">setSenderObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="senderObjectChanged">
<db:title>[since 5.4] void QSignalTransition::senderObjectChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>senderObjectChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">senderObject</db:synopsisinfo>
<db:synopsisinfo role="signature">void senderObjectChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the <db:link xlink:href="qsignaltransition.xml#senderObject">senderObject</db:link> property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsignaltransition.xml#senderObject-prop">senderObject</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-qsignaltransition.xml#senderObject-prop">QSignalTransition::senderObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSenderObject">
<db:title>void QSignalTransition::setSenderObject(const QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSenderObject</db:methodname>
<db:methodparam>
<db:type>const QObject *</db:type>
<db:parameter>sender</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">senderObject</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSenderObject(const QObject *sender)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">sender</db:code> object associated with this signal transition.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsignaltransition.xml#senderObject-prop">senderObject</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#senderObject">senderObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSignal">
<db:title>void QSignalTransition::setSignal(const QByteArray &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSignal</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>signal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">signal</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSignal(const QByteArray &amp;signal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">signal</db:code> associated with this signal transition.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qsignaltransition.xml#signal-prop">signal</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#signal">signal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signal">
<db:title>QByteArray QSignalTransition::signal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>signal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">signal</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray signal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the signal associated with this signal transition.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qsignaltransition.xml#signal-prop">signal</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#setSignal">setSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalChanged">
<db:title>[since 5.4] void QSignalTransition::signalChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>signalChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">signal</db:synopsisinfo>
<db:synopsisinfo role="signature">void signalChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the signal property is changed.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qsignaltransition.xml#signal-prop">signal</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtqml-statemachine-qsignaltransition.xml#signal-prop">QSignalTransition::signal</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
