<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSignalTransition Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> class provides a transition based on a Qt signal.</db:para>
<db:para>This class was introduced in Qt 4.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSignalTransition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracttransition.xml" xlink:role="class">QAbstractTransition</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSignalTransition is part of <db:simplelist><db:member><db:link xlink:href="statemachine.xml">State Machine Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Typically you would use the overload of <db:link xlink:href="qstate.xml#addTransition">QState::addTransition</db:link>() that takes a sender and signal as arguments, rather than creating <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> objects directly. <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> is part of <db:link xlink:href="statemachine-api.xml">The State Machine Framework</db:link>.</db:para>
<db:para>You can subclass <db:link xlink:href="qsignaltransition.xml">QSignalTransition</db:link> and reimplement <db:link xlink:href="qsignaltransition.xml#eventTest">eventTest</db:link>() to make a signal transition conditional; the event object passed to <db:link xlink:href="qsignaltransition.xml#eventTest">eventTest</db:link>() will be a <db:link xlink:href="qstatemachine-signalevent.xml">QStateMachine::SignalEvent</db:link> object. Example:</db:para>
<db:programlisting language="cpp">class CheckedTransition : public QSignalTransition
{
public:
    CheckedTransition(QCheckBox *check)
        : QSignalTransition(check, SIGNAL(stateChanged(int))) {}
protected:
    bool eventTest(QEvent *e) {
        if (!QSignalTransition::eventTest(e))
            return false;
        QStateMachine::SignalEvent *se = static_cast&lt;QStateMachine::SignalEvent*&gt;(e);
        return (se-&gt;arguments().at(0).toInt() == Qt::Checked);
    }
};

...

QCheckBox *check = new QCheckBox();
check-&gt;setTristate(true);

QState *s1 = new QState();
QState *s2 = new QState();
CheckedTransition *t1 = new CheckedTransition(check);
t1-&gt;setTargetState(s2);
s1-&gt;addTransition(t1);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSignalTransition">
<db:title>QSignalTransition::QSignalTransition(QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new signal transition with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="QSignalTransition-1">
<db:title>QSignalTransition::QSignalTransition(const QObject *<db:emphasis>sender</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>, QState *<db:emphasis>sourceState</db:emphasis> = 0)</db:title>
<db:para>Constructs a new signal transition associated with the given <db:code role="parameter">signal</db:code> of the given <db:code role="parameter">sender</db:code>, and with the given <db:code role="parameter">sourceState</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSignalTransition">
<db:title>[virtual noexcept] QSignalTransition::~QSignalTransition()</db:title>
<db:para>Destroys this signal transition.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSignalTransition::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#event" role="function">QAbstractTransition::event(QEvent *e)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventTest">
<db:title>[override virtual protected] bool QSignalTransition::eventTest(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#eventTest" role="function">QAbstractTransition::eventTest(QEvent *event)</db:link>.</db:para>
<db:para>The default implementation returns true if the <db:code role="parameter">event</db:code> is a <db:link xlink:href="qstatemachine-signalevent.xml">QStateMachine::SignalEvent</db:link> object and the event's sender and signal index match this transition, and returns false otherwise.</db:para>
</db:section>
<db:section xml:id="onTransition">
<db:title>[override virtual protected] void QSignalTransition::onTransition(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstracttransition.xml#onTransition" role="function">QAbstractTransition::onTransition(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="senderObject">
<db:title>QObject *QSignalTransition::senderObject() const</db:title>
<db:para>Returns the sender object associated with this signal transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#setSenderObject">setSenderObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSenderObject">
<db:title>void QSignalTransition::setSenderObject(const QObject *<db:emphasis>sender</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">sender</db:code> object associated with this signal transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#senderObject">senderObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSignal">
<db:title>void QSignalTransition::setSignal(const QByteArray &amp;<db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">signal</db:code> associated with this signal transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#signal">signal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signal">
<db:title>QByteArray QSignalTransition::signal() const</db:title>
<db:para>Returns the signal associated with this signal transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsignaltransition.xml#setSignal">setSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
