<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPixelFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> is a class for describing different pixel layouts in graphics buffers.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPixelFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In Qt there is a often a need to represent the layout of the pixels in a graphics buffer. Internally <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> stores everything in a 64 bit datastructure. This gives performance but also some limitations.</db:para>
<db:para><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> can describe 5 color channels and 1 alpha channel, each can use 6 bits to describe the size of the color channel.</db:para>
<db:para>The position of the alpha channel is described with a separate enum. This is to make it possible to describe QImage formats like ARGB32, and also describe typical OpenGL formats like RBGA8888.</db:para>
<db:para>How pixels are suppose to be read is determined by the TypeInterpretation enum. It describes if color values are suppose to be read byte per byte, or if a pixel is suppose to be read as a complete int and then masked.</db:para>
<db:para>There is no support for describing YUV's macro pixels. Instead a list of YUV formats has been made. When a <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> is describing a YUV format, the bitsPerPixel value has been deduced by the YUV Layout enum. Also, the color channels should all be set to zero except the fifth color channel that should store the bitsPerPixel value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>TypeInterpretation</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPixelFormat">
<db:title>[default] QPixelFormat::QPixelFormat()</db:title>
<db:para>Creates a null pixelformat. This format maps to QImage::Format_Invalid.</db:para>
</db:section>
<db:section xml:id="QPixelFormat-1">
<db:title>[default] QPixelFormat::QPixelFormat(int <db:emphasis>colorModel</db:emphasis>, int <db:emphasis>firstSize</db:emphasis>, int <db:emphasis>secondSize</db:emphasis>, int <db:emphasis>thirdSize</db:emphasis>, int <db:emphasis>fourthSize</db:emphasis>, int <db:emphasis>fifthSize</db:emphasis>, int <db:emphasis>alphaSize</db:emphasis>, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis>, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis>, QPixelFormat::AlphaPremultiplied <db:emphasis>premultiplied</db:emphasis>, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis>, QPixelFormat::ByteOrder <db:emphasis>byteOrder</db:emphasis> = CurrentSystemEndian, int <db:emphasis>subEnum</db:emphasis> = 0)</db:title>
<db:para>Creates a <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> which assigns its data to the attributes. <db:code role="parameter">colorModel</db:code> will be put into a buffer which is 4 bits long.</db:para>
<db:para><db:code role="parameter">firstSize</db:code> <db:code role="parameter">secondSize</db:code> <db:code role="parameter">thirdSize</db:code> <db:code role="parameter">fourthSize</db:code> <db:code role="parameter">fifthSize</db:code> <db:code role="parameter">alphaSize</db:code> are all meant to represent the size of a channel. The channels will be used for different uses dependent on the <db:code role="parameter">colorModel</db:code>. For RGB the firstSize will represent the Red channel. On CMYK it will represent the value of the Cyan channel.</db:para>
<db:para><db:code role="parameter">alphaUsage</db:code> represents if the alpha channel is used or not.</db:para>
<db:para><db:code role="parameter">alphaPosition</db:code> is the position of the alpha channel.</db:para>
<db:para><db:code role="parameter">premultiplied</db:code> represents if the alpha channel is already multiplied with the color channels.</db:para>
<db:para><db:code role="parameter">typeInterpretation</db:code> is how the pixel is interpreted.</db:para>
<db:para><db:code role="parameter">byteOrder</db:code> represents the endianness of the pixelformat. This defaults to CurrentSystemEndian.</db:para>
<db:para><db:code role="parameter">subEnum</db:code> is used for colorModels that have to store some extra information with supplying an extra enum. This is used by YUV to store the YUV type The default value is 0.</db:para>
</db:section>
</db:section>
</db:article>
