<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPixelFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> is a class for describing different pixel layouts in graphics buffers.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPixelFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In Qt there is a often a need to represent the layout of the pixels in a graphics buffer. Internally <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> stores everything in a 64 bit datastructure. This gives performance but also some limitations.</db:para>
<db:para><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> can describe 5 color channels and 1 alpha channel, each can use 6 bits to describe the size of the color channel.</db:para>
<db:para>The position of the alpha channel is described with a separate enum. This is to make it possible to describe <db:link xlink:href="qimage.xml">QImage</db:link> formats like ARGB32, and also describe typical OpenGL formats like RBGA8888.</db:para>
<db:para>How pixels are suppose to be read is determined by the <db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">TypeInterpretation</db:link> enum. It describes if color values are suppose to be read byte per byte, or if a pixel is suppose to be read as a complete int and then masked.</db:para>
<db:para>There is no support for describing YUV's macro pixels. Instead a list of YUV formats has been made. When a <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> is describing a YUV format, the <db:link xlink:href="qpixelformat.xml#bitsPerPixel">bitsPerPixel</db:link> value has been deduced by the YUV Layout enum. Also, the color channels should all be set to zero except the fifth color channel that should store the <db:link xlink:href="qpixelformat.xml#bitsPerPixel">bitsPerPixel</db:link> value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AlphaPosition-enum">
<db:title>enum QPixelFormat::AlphaPosition</db:title>
<db:para>This enum type is used to describe the alpha channels position relative to the color channels.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::AtBeginning</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The alpha channel will be put in front of the color channels . E.g. ARGB.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::AtEnd</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The alpha channel will be put in the back of the color channels. E.g. RGBA.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="AlphaPremultiplied-enum">
<db:title>enum QPixelFormat::AlphaPremultiplied</db:title>
<db:para>This enum type describes the boolean state if the alpha channel is multiplied into the color channels or not.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::NotPremultiplied</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The alpha channel is not multiplied into the color channels.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Premultiplied</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The alpha channel is multiplied into the color channels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="AlphaUsage-enum">
<db:title>enum QPixelFormat::AlphaUsage</db:title>
<db:para>This enum describes if the alpha channel is used or not. Sometimes the pixelformat will have a size for the alpha channel, but the pixel format does actually not use the alpha channel. For example RGB32 is such a format. The RGB channels are 8 bits each, and there is no alpha channel. But the complete size for each pixel is 32. Therefore the alpha channel size is 8, but the alpha channel is ignored. Its important to note that in such situations the position of the alpha channel is significant.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::IgnoresAlpha</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The alpha channel is not used.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::UsesAlpha</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The alpha channel is used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ByteOrder-enum">
<db:title>enum QPixelFormat::ByteOrder</db:title>
<db:para>This enum describes the ByteOrder of the pixel format. This enum is mostly ignored but have some use cases for YUV formats. BGR formats have their own color model, and should not be described by using the opposite endianness on an RGB format.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::LittleEndian</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The byte order is little endian.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::BigEndian</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The byte order is big endian.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::CurrentSystemEndian</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This enum will not be stored, but is converted in the constructor to the endian enum that matches the enum of the current system.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ColorModel-enum">
<db:title>enum QPixelFormat::ColorModel</db:title>
<db:para>This enum type is used to describe the color model of the pixelformat. Alpha was added in 5.5.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::RGB</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The color model is RGB.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::BGR</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This is logically the opposite endian version of RGB. However, for ease of use it has its own model.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Indexed</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The color model uses a color palette.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Grayscale</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The color model is Grayscale.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::CMYK</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The color model is CMYK.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::HSL</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The color model is HSL.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::HSV</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The color model is HSV.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The color model is YUV.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Alpha</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>There is no color model, only alpha is used.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="TypeInterpretation-enum">
<db:title>enum QPixelFormat::TypeInterpretation</db:title>
<db:para>This enum describes how each pixel is interpreted. If a pixel is read as a full 32 bit unsigned integer and then each channel is masked out, or if each byte is read as unsigned char values. Typically <db:link xlink:href="qimage.xml">QImage</db:link> formats interpret one pixel as an unsigned integer and then the color channels are masked out. OpenGL on the other hand typically interpreted pixels &quot;one byte after the other&quot;, Ie. unsigned byte.</db:para>
<db:para><db:link xlink:href="qimage.xml">QImage</db:link> also have the format Format_RGBA8888 (and its derivatives), where the pixels are interpreted as unsigned bytes. OpenGL has extensions that makes it possible to upload pixel buffers in an unsigned integer format.</db:para>
<db:mediaobject>
<db:alt>An unsigned integer ARGB32 pixel.</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qpixelformat-argb32buffer.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The image above shows a ARGB pixel in memory read as an unsigned integer. However, if this pixel was read byte for byte on a little endian system the first byte would be the byte containing the B-channel. The next byte would be the G-channel, then the R-channel and finally the A-channel. This shows that on little endian systems, how each pixel is interpreted is significant for integer formats. This is not the case on big endian systems.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::UnsignedInteger</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::UnsignedShort</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::UnsignedByte</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::FloatingPoint</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="YUVLayout-enum">
<db:title>enum QPixelFormat::YUVLayout</db:title>
<db:para>YUV is not represented by describing the size of the color channels. This is because YUV often use macro pixels, making the concept of sperate color channels invalid. Instead the different YUV layouts are described with this enum.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV444</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV422</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV411</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV420P</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUV420SP</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YV12</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::UYVY</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::YUYV</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::NV12</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::NV21</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::IMC1</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::IMC2</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::IMC3</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::IMC4</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Y8</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link></db:emphasis>::Y16</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPixelFormat">
<db:title>[noexcept] QPixelFormat::QPixelFormat()</db:title>
<db:para>Creates a null pixelformat. This format maps to <db:link xlink:href="qimage.xml#Format-enum">QImage::Format_Invalid</db:link>.</db:para>
</db:section>
<db:section xml:id="QPixelFormat-1">
<db:title>[noexcept] QPixelFormat::QPixelFormat(QPixelFormat::ColorModel <db:emphasis>colorModel</db:emphasis>, uchar <db:emphasis>firstSize</db:emphasis>, uchar <db:emphasis>secondSize</db:emphasis>, uchar <db:emphasis>thirdSize</db:emphasis>, uchar <db:emphasis>fourthSize</db:emphasis>, uchar <db:emphasis>fifthSize</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis>, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis>, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis>, QPixelFormat::AlphaPremultiplied <db:emphasis>premultiplied</db:emphasis>, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis>, QPixelFormat::ByteOrder <db:emphasis>byteOrder</db:emphasis> = CurrentSystemEndian, uchar <db:emphasis>subEnum</db:emphasis> = 0)</db:title>
<db:para>Creates a <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> which assigns its data to the attributes. <db:code role="parameter">colorModel</db:code> will be put into a buffer which is 4 bits long.</db:para>
<db:para><db:code role="parameter">firstSize</db:code> <db:code role="parameter">secondSize</db:code> <db:code role="parameter">thirdSize</db:code> <db:code role="parameter">fourthSize</db:code> <db:code role="parameter">fifthSize</db:code> <db:code role="parameter">alphaSize</db:code> are all meant to represent the size of a channel. The channels will be used for different uses dependent on the <db:code role="parameter">colorModel</db:code>. For RGB the firstSize will represent the Red channel. On CMYK it will represent the value of the Cyan channel.</db:para>
<db:para><db:code role="parameter">alphaUsage</db:code> represents if the alpha channel is used or not.</db:para>
<db:para><db:code role="parameter">alphaPosition</db:code> is the position of the alpha channel.</db:para>
<db:para><db:code role="parameter">premultiplied</db:code> represents if the alpha channel is already multiplied with the color channels.</db:para>
<db:para><db:code role="parameter">typeInterpretation</db:code> is how the pixel is interpreted.</db:para>
<db:para><db:code role="parameter">byteOrder</db:code> represents the endianness of the pixelformat. This defaults to <db:link xlink:href="qpixelformat.xml#ByteOrder-enum">CurrentSystemEndian</db:link>.</db:para>
<db:para><db:code role="parameter">subEnum</db:code> is used for colorModels that have to store some extra information with supplying an extra enum. This is used by YUV to store the YUV type The default value is 0.</db:para>
</db:section>
<db:section xml:id="alphaPosition">
<db:title>[noexcept] QPixelFormat::AlphaPosition QPixelFormat::alphaPosition() const</db:title>
<db:para>Accessor function for alphaPosition.</db:para>
</db:section>
<db:section xml:id="alphaSize">
<db:title>[noexcept] uchar QPixelFormat::alphaSize() const</db:title>
<db:para>Accessor function for the alpha channel size.</db:para>
</db:section>
<db:section xml:id="alphaUsage">
<db:title>[noexcept] QPixelFormat::AlphaUsage QPixelFormat::alphaUsage() const</db:title>
<db:para>Accessor function for alphaUsage.</db:para>
</db:section>
<db:section xml:id="bitsPerPixel">
<db:title>[noexcept] uchar QPixelFormat::bitsPerPixel() const</db:title>
<db:para>Accessor function for the bits used per pixel. This function returns the sum of the color channels + the size of the alpha channel.</db:para>
</db:section>
<db:section xml:id="blackSize">
<db:title>[noexcept] uchar QPixelFormat::blackSize() const</db:title>
<db:para>Accessor function for the black/key color channel.</db:para>
</db:section>
<db:section xml:id="blueSize">
<db:title>[noexcept] uchar QPixelFormat::blueSize() const</db:title>
<db:para>Accessor function for the size of the blue color channel.</db:para>
</db:section>
<db:section xml:id="brightnessSize">
<db:title>[noexcept] uchar QPixelFormat::brightnessSize() const</db:title>
<db:para>Accessor function for the brightness channel size.</db:para>
</db:section>
<db:section xml:id="byteOrder">
<db:title>[noexcept] QPixelFormat::ByteOrder QPixelFormat::byteOrder() const</db:title>
<db:para>The byte order is almost always set the the byte order of the current system. However, it can be useful to describe some YUV formats. This function should never return <db:link xlink:href="qpixelformat.xml#ByteOrder-enum">QPixelFormat::CurrentSystemEndian</db:link> as this value is translated to a endian value in the constructor.</db:para>
</db:section>
<db:section xml:id="channelCount">
<db:title>[noexcept] uchar QPixelFormat::channelCount() const</db:title>
<db:para>Accessor function for getting the channelCount. Channel Count is deduced by color channels with a size &gt; 0 and if the size of the alpha channel is &gt; 0.</db:para>
</db:section>
<db:section xml:id="colorModel">
<db:title>[noexcept] QPixelFormat::ColorModel QPixelFormat::colorModel() const</db:title>
<db:para>Accessor function for getting the colorModel.</db:para>
</db:section>
<db:section xml:id="cyanSize">
<db:title>[noexcept] uchar QPixelFormat::cyanSize() const</db:title>
<db:para>Accessor function for the cyan color channel.</db:para>
</db:section>
<db:section xml:id="greenSize">
<db:title>[noexcept] uchar QPixelFormat::greenSize() const</db:title>
<db:para>Accessor function for the size of the green color channel.</db:para>
</db:section>
<db:section xml:id="hueSize">
<db:title>[noexcept] uchar QPixelFormat::hueSize() const</db:title>
<db:para>Accessor function for the hue channel size.</db:para>
</db:section>
<db:section xml:id="lightnessSize">
<db:title>[noexcept] uchar QPixelFormat::lightnessSize() const</db:title>
<db:para>Accessor function for the lightness channel size.</db:para>
</db:section>
<db:section xml:id="magentaSize">
<db:title>[noexcept] uchar QPixelFormat::magentaSize() const</db:title>
<db:para>Accessor function for the megenta color channel.</db:para>
</db:section>
<db:section xml:id="premultiplied">
<db:title>[noexcept] QPixelFormat::AlphaPremultiplied QPixelFormat::premultiplied() const</db:title>
<db:para>Accessor function for the <db:link xlink:href="qpixelformat.xml#AlphaPremultiplied-enum">AlphaPremultiplied</db:link> enum. This indicates if the alpha channel is multiplied in to the color channels.</db:para>
</db:section>
<db:section xml:id="redSize">
<db:title>[noexcept] uchar QPixelFormat::redSize() const</db:title>
<db:para>Accessor function for the size of the red color channel.</db:para>
</db:section>
<db:section xml:id="saturationSize">
<db:title>[noexcept] uchar QPixelFormat::saturationSize() const</db:title>
<db:para>Accessor function for the saturation channel size.</db:para>
</db:section>
<db:section xml:id="typeInterpretation">
<db:title>[noexcept] QPixelFormat::TypeInterpretation QPixelFormat::typeInterpretation() const</db:title>
<db:para>Accessor function for the type representation of a color channel or a pixel.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yellowSize">
<db:title>[noexcept] uchar QPixelFormat::yellowSize() const</db:title>
<db:para>Accessor function for the yellow color channel.</db:para>
</db:section>
<db:section xml:id="yuvLayout">
<db:title>[noexcept] QPixelFormat::YUVLayout QPixelFormat::yuvLayout() const</db:title>
<db:para>Accessor function for the <db:link xlink:href="qpixelformat.xml#YUVLayout-enum">YUVLayout</db:link>. It is difficult to describe the color channels of a YUV pixel format since YUV color model uses macro pixels. Instead the layout of the pixels are stored as an enum.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qPixelFormatAlpha">
<db:title>[noexcept, since 5.5] QPixelFormat qPixelFormatAlpha(uchar <db:emphasis>channelSize</db:emphasis>, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::UnsignedInteger)</db:title>
<db:para>Constructor function for creating an Alpha format. A mask format can be described by passing 1 to <db:code role="parameter">channelSize</db:code>. Its also possible to define very accurate alpha formats using doubles to describe each pixel by passing 8 as <db:code role="parameter">channelSize</db:code> and <db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">FloatingPoint</db:link> as <db:code role="parameter">typeInterpretation</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">QPixelFormat::TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPixelFormatCmyk">
<db:title>[noexcept] QPixelFormat qPixelFormatCmyk(uchar <db:emphasis>channelSize</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis> = 0, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis> = QPixelFormat::IgnoresAlpha, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis> = QPixelFormat::AtBeginning, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::UnsignedInteger)</db:title>
<db:para>Constructor function for creating CMYK formats. The channel count will be 4 or 5 depending on if <db:code role="parameter">alphaSize</db:code> is bigger than zero or not. The CMYK color channels will all be set to the value of <db:code role="parameter">channelSize</db:code>.</db:para>
<db:para><db:code role="parameter">alphaUsage</db:code> <db:code role="parameter">alphaPosition</db:code> and <db:code role="parameter">typeInterpretation</db:code> are all accessible with the accessors with the same name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">QPixelFormat::TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPixelFormatGrayscale">
<db:title>[noexcept] QPixelFormat qPixelFormatGrayscale(uchar <db:emphasis>channelSize</db:emphasis>, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::UnsignedInteger)</db:title>
<db:para>Constructor function for creating a Grayscale format. Monochrome formats can be described by passing 1 to <db:code role="parameter">channelSize</db:code>. Its also possible to define very accurate grayscale formats using doubles to describe each pixel by passing 8 as <db:code role="parameter">channelSize</db:code> and <db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">FloatingPoint</db:link> as <db:code role="parameter">typeInterpretation</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">QPixelFormat::TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPixelFormatHsl">
<db:title>[noexcept] QPixelFormat qPixelFormatHsl(uchar <db:emphasis>channelSize</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis> = 0, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis> = QPixelFormat::IgnoresAlpha, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis> = QPixelFormat::AtBeginning, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::FloatingPoint)</db:title>
<db:para>Constructor function for creating HSL formats. The channel count will be 3 or 4 depending on if <db:code role="parameter">alphaSize</db:code> is bigger than 0.</db:para>
<db:para><db:code role="parameter">channelSize</db:code> will set the <db:link xlink:href="qpixelformat.xml#hueSize">hueSize</db:link> <db:link xlink:href="qpixelformat.xml#saturationSize">saturationSize</db:link> and <db:link xlink:href="qpixelformat.xml#lightnessSize">lightnessSize</db:link> to the same value.</db:para>
<db:para><db:code role="parameter">alphaUsage</db:code> <db:code role="parameter">alphaPosition</db:code> and <db:code role="parameter">typeInterpretation</db:code> are all accessible with the accessors with the same name.</db:para>
</db:section>
<db:section xml:id="qPixelFormatHsv">
<db:title>[noexcept] QPixelFormat qPixelFormatHsv(uchar <db:emphasis>channelSize</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis> = 0, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis> = QPixelFormat::IgnoresAlpha, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis> = QPixelFormat::AtBeginning, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::FloatingPoint)</db:title>
<db:para>Constructor function for creating HSV formats. The channel count will be 3 or 4 depending on if <db:code role="parameter">alphaSize</db:code> is bigger than 0.</db:para>
<db:para><db:code role="parameter">channelSize</db:code> will set the <db:link xlink:href="qpixelformat.xml#hueSize">hueSize</db:link> <db:link xlink:href="qpixelformat.xml#saturationSize">saturationSize</db:link> and <db:link xlink:href="qpixelformat.xml#brightnessSize">brightnessSize</db:link> to the same value.</db:para>
<db:para><db:code role="parameter">alphaUsage</db:code> <db:code role="parameter">alphaPosition</db:code> and <db:code role="parameter">typeInterpretation</db:code> are all accessible with the accessors with the same name.</db:para>
</db:section>
<db:section xml:id="qPixelFormatRgba">
<db:title>[noexcept] QPixelFormat qPixelFormatRgba(uchar <db:emphasis>redSize</db:emphasis>, uchar <db:emphasis>greenSize</db:emphasis>, uchar <db:emphasis>blueSize</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis>, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis>, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis>, QPixelFormat::AlphaPremultiplied <db:emphasis>premultiplied</db:emphasis> = QPixelFormat::NotPremultiplied, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::UnsignedInteger)</db:title>
<db:para>Constructor function making an RGB pixelformat. <db:code role="parameter">redSize</db:code> <db:code role="parameter">greenSize</db:code> <db:code role="parameter">blueSize</db:code> represent the size of each color channel. <db:code role="parameter">alphaSize</db:code> describes the alpha channel size and its position is described with <db:code role="parameter">alphaPosition</db:code>. <db:code role="parameter">alphaUsage</db:code> is used to determine if the alpha channel is used or not. Setting the alpha channel size to 8 and <db:link xlink:href="qpixelformat.xml#alphaUsage">alphaUsage</db:link> to <db:link xlink:href="qpixelformat.xml#AlphaUsage-enum">IgnoresAlpha</db:link> is how it is possible to create a 32 bit format where the rgb channels only use 24 bits combined. <db:code role="parameter">premultiplied</db:code> <db:code role="parameter">typeInterpretation</db:code> are accessible with accessors with the same name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpixelformat.xml#TypeInterpretation-enum">QPixelFormat::TypeInterpretation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qPixelFormatYuv">
<db:title>QPixelFormat qPixelFormatYuv(QPixelFormat::YUVLayout <db:emphasis>yuvLayout</db:emphasis>, uchar <db:emphasis>alphaSize</db:emphasis> = 0, QPixelFormat::AlphaUsage <db:emphasis>alphaUsage</db:emphasis> = QPixelFormat::IgnoresAlpha, QPixelFormat::AlphaPosition <db:emphasis>alphaPosition</db:emphasis> = QPixelFormat::AtBeginning, QPixelFormat::AlphaPremultiplied <db:emphasis>premultiplied</db:emphasis> = QPixelFormat::NotPremultiplied, QPixelFormat::TypeInterpretation <db:emphasis>typeInterpretation</db:emphasis> = QPixelFormat::UnsignedByte, QPixelFormat::ByteOrder <db:emphasis>byteOrder</db:emphasis> = QPixelFormat::LittleEndian)</db:title>
<db:para>Constructor function for creating a <db:link xlink:href="qpixelformat.xml">QPixelFormat</db:link> describing a YUV format with <db:code role="parameter">yuvLayout</db:code>. <db:code role="parameter">alphaSize</db:code> describes the size of a potential alpha channel and is position is described with <db:code role="parameter">alphaPosition</db:code>. The &quot;first&quot; &quot;second&quot; .. &quot;fifth&quot; channels are all set to 0. <db:code role="parameter">alphaUsage</db:code> <db:code role="parameter">premultiplied</db:code> <db:code role="parameter">typeInterpretation</db:code> and <db:code role="parameter">byteOrder</db:code> will work as with other formats.</db:para>
</db:section>
</db:section>
</db:article>
