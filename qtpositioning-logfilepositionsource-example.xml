<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Log File Position Source (C++)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Logfile Position Source shows how to create and work with a custom NMEA position source, for platforms without GPS.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The data is read from a file which has positional data in NMEA format. The resulting time and position information is then displayed to the screen as simple text in date/time and latitude/longitude format.</db:para>
<db:para>This example class reads position data from a text file, <db:emphasis>log.txt</db:emphasis>. The file specifies position data using a simple text format: it contains one position update per line, where each line contains a date/time, a latitude and a longitude, separated by spaces. The date/time is in ISO 8601 format and the latitude and longitude are in degrees decimal format. Here is an excerpt from <db:emphasis>log.txt</db:emphasis>:</db:para>
<db:programlisting language="cpp">2009-08-24T22:25:01 -27.576082 153.092415
2009-08-24T22:25:02 -27.576223 153.092530
2009-08-24T22:25:03 -27.576364 153.092648
</db:programlisting>
<db:para>The class reads this data and distributes it via the <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() signal.</db:para>
<db:para>Here is the definition of the <db:code>LogFilePositionSource</db:code> class:</db:para>
<db:programlisting language="cpp">class LogFilePositionSource : public QGeoPositionInfoSource
{
    Q_OBJECT
public:
    LogFilePositionSource(QObject *parent = 0);

    QGeoPositionInfo lastKnownPosition(bool fromSatellitePositioningMethodsOnly = false) const;

    PositioningMethods supportedPositioningMethods() const;
    int minimumUpdateInterval() const;
    Error error() const;

public slots:
    virtual void startUpdates();
    virtual void stopUpdates();

    virtual void requestUpdate(int timeout = 5000);

private slots:
    void readNextPosition();

private:
    QFile *logFile;
    QTimer *timer;
    QGeoPositionInfo lastPosition;
};

</db:programlisting>
<db:para>The main methods overrided by the subclass are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeopositioninfosource.xml#startUpdates">startUpdates</db:link>(): called by client applications to start regular position updates.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeopositioninfosource.xml#stopUpdates">stopUpdates</db:link>(): called by client applications to stop regular position updates.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeopositioninfosource.xml#requestUpdate">requestUpdate</db:link>(): called by client applications to request a single update, with a specified timeout.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When a position update is available, the subclass emits the <db:link xlink:href="qgeopositioninfosource.xml#positionUpdated">positionUpdated</db:link>() signal.</db:para>
<db:para>Here are the key methods in the class implementation:</db:para>
<db:programlisting language="cpp">LogFilePositionSource::LogFilePositionSource(QObject *parent)
    : QGeoPositionInfoSource(parent),
      logFile(new QFile(this)),
      timer(new QTimer(this))
{
    connect(timer, SIGNAL(timeout()), this, SLOT(readNextPosition()));

    logFile-&gt;setFileName(&quot;:/simplelog.txt&quot;);
    if (!logFile-&gt;open(QIODevice::ReadOnly))
        qWarning() &lt;&lt; &quot;Error: cannot open source file&quot; &lt;&lt; logFile-&gt;fileName();
}

void LogFilePositionSource::startUpdates()
{
    int interval = updateInterval();
    if (interval &lt; minimumUpdateInterval())
        interval = minimumUpdateInterval();

    timer-&gt;start(interval);
}

void LogFilePositionSource::stopUpdates()
{
    timer-&gt;stop();
}

void LogFilePositionSource::requestUpdate(int /*timeout*/)
{
    // For simplicity, ignore timeout - assume that if data is not available
    // now, no data will be added to the file later
    if (logFile-&gt;canReadLine())
        readNextPosition();
    else
        emit updateTimeout();
}

void LogFilePositionSource::readNextPosition()
{
    QByteArray line = logFile-&gt;readLine().trimmed();
    if (!line.isEmpty()) {
        QList&lt;QByteArray&gt; data = line.split(' ');
        double latitude;
        double longitude;
        bool hasLatitude = false;
        bool hasLongitude = false;
        QDateTime timestamp = QDateTime::fromString(QString(data.value(0)), Qt::ISODate);
        latitude = data.value(1).toDouble(&amp;hasLatitude);
        longitude = data.value(2).toDouble(&amp;hasLongitude);

        if (hasLatitude &amp;&amp; hasLongitude &amp;&amp; timestamp.isValid()) {
            QGeoCoordinate coordinate(latitude, longitude);
            QGeoPositionInfo info(coordinate, timestamp);
            if (info.isValid()) {
                lastPosition = info;
                emit positionUpdated(info);
            }
        }
    }
}

</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/clientapplication.cpp">logfilepositionsource/clientapplication.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/clientapplication.h">logfilepositionsource/clientapplication.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/logfile.qrc">logfilepositionsource/logfile.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/logfilepositionsource.cpp">logfilepositionsource/logfilepositionsource.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/logfilepositionsource.h">logfilepositionsource/logfilepositionsource.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/logfilepositionsource.pro">logfilepositionsource/logfilepositionsource.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="logfilepositionsource/main.cpp">logfilepositionsource/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
