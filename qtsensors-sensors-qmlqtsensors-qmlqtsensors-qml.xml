<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Sensors - QML example</db:title>
<db:productname>QtSensors</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Sensors Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtsensors-module.xml">QtSensors</db:link> - QML example demonstrates the QML sensors types in the <db:link xlink:href="qtsensors-module.xml">QtSensors</db:link> 5 import.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtSensors module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

/* Layout
                                                                                  mainWnd
                                                                                 /
---------------------------------------------------------------------------------
|--------------------------------------------------------------------------------
||                                  labelTitle                                  |
|--------------------------------------------------------------------------------
|-------------------------------------------------------------------------------- &amp;lt;---- tiltLine
|--------------------------------------------------------------------------------
||                                  labelTilt                                   |
|--------------------------------------------------------------------------------
|         / accuracyRect                               / speedRect
|-------------------------------------------||----------------------------------|
|| Accuracy &amp;lt;----- textAccuracy             || Speed &amp;lt;-----textSpeed            |
||  value   &amp;lt;- textAccuracyValue            ||  value    &amp;lt;- textSpeedValue      |
|| ----------------- ------------------     || --------------- ---------------- |
|| | accuracyLower | | accuracyHigher |     || | speedLower  | | speedHigher  | |
|| ----------------- ------------------     || --------------- ---------------- |
|------------------------------------------ ||----------------------------------|
| -----------
| |Calibrate|    &amp;lt;------------------ calibrate
| -----------
| ---------
| |Degree |    &amp;lt;-------------------- useRadian                   X Rotation: 0  &amp;lt;------------------ xrottext
| ---------
| ---------
| |Start  |    &amp;lt;-------------------- tiltStart                   Y Rotation: 0  &amp;lt;------------------ yrottext
| ---------
|-------------------------------------------------------------------------------- &amp;lt;---- ambientlightLine
|--------------------------------------------------------------------------------
||                                  labelAmbientLight                           |
|--------------------------------------------------------------------------------
| ---------
| |Start  |    &amp;lt;-------------------- ablStart                    Ambient light: -  &amp;lt;--------------- abltext
| ---------
|-------------------------------------------------------------------------------- &amp;lt;---- proximityLine
|--------------------------------------------------------------------------------
||                                  labelProximityLight                           |
|--------------------------------------------------------------------------------
| ---------
| |Start  |    &amp;lt;-------------------- proxiStart                  Proximity: -  &amp;lt;--------------- proxitext
| ---------
------------------------------------------------------------------------------
*/

//Import the declarative plugins
import QtQuick 2.0
import &quot;components&quot;

import QtSensors 5.0

ApplicationWindow {

    // Sensor types used
    TiltSensor {
        id: tilt
        active: false
    }

    AmbientLightSensor {
        id: ambientlight
        active: false
        onReadingChanged: {
            if (reading.lightLevel == AmbientLightReading.Dark)
                ambientlighttext.text = &quot;Ambient light: Dark&quot;;
            else if (reading.lightLevel == AmbientLightReading.Twilight)
                ambientlighttext.text = &quot;Ambient light: Twilight&quot;;
            else if (reading.lightLevel == AmbientLightReading.Light)
                ambientlighttext.text = &quot;Ambient light: Light&quot;;
            else if (reading.lightLevel == AmbientLightReading.Bright)
                ambientlighttext.text = &quot;Ambient light: Bright&quot;;
            else if (reading.lightLevel == AmbientLightReading.Sunny)
                ambientlighttext.text = &quot;Ambient light: Sunny&quot;;
            else
                ambientlighttext.text = &quot;Ambient light: Unknown&quot;;
        }
    }

    ProximitySensor {
        id: proxi
        active: false
    }

    Column {
        spacing: 10
        anchors.fill: parent
        anchors.margins: 5

        Text {
            id: labelTitle
            width: parent.width
            horizontalAlignment: Text.AlignHCenter
            font.pixelSize: 30
            font.bold: true
            text: &quot;QML QtSensors&quot;
        }

        // Tilt region
        Divider { label: &quot;TiltSensor&quot; }

        Row {
            spacing: 20
            width: parent.width
            anchors.margins: 5
            Button {
                id: calibrate
                height: 30
                width: 80
                text: &quot;Calibrate&quot;
                onClicked: tilt.calibrate();
            }
            Text {
                id: xrottext
                height: 30
                verticalAlignment: Text.AlignVCenter
                text: &quot;X Rotation: &quot; + (tilt.reading ? tilt.reading.xRotation.toFixed(2) + &quot;°&quot; : &quot;Unknown&quot;)
            }
        }
        Row {
            spacing: 20
            width: parent.width
            anchors.margins: 5
            Button {
                id: tiltStart
                height: 30
                width: 80
                text: tilt.active ? &quot;Stop&quot; : &quot;Start&quot;
                onClicked: {
                    tilt.active = (tiltStart.text === &quot;Start&quot;);
                }
            }
            Text {
                id: yrottext
                height: 30
                verticalAlignment: Text.AlignVCenter
                text: &quot;Y Rotation: &quot; + (tilt.reading ? tilt.reading.yRotation.toFixed(2) + &quot;°&quot; : &quot;Unknown&quot;)
            }
        }

        Divider { label: &quot;AmbientLightSensor&quot; }

        Row {
            spacing: 20
            width: parent.width
            anchors.margins: 5

            Button{
                id: ambientlightStart
                height: 30
                width: 80
                text: ambientlight.active ? &quot;Stop&quot; : &quot;Start&quot;
                onClicked: {
                    ambientlight.active = (ambientlightStart.text === &quot;Start&quot; ? true : false);
                }
            }

            Text {
                id: ambientlighttext
                height: 30
                verticalAlignment: Text.AlignVCenter
                text: &quot;Ambient light: Unknown&quot;
            }
        }

        // Proximity region
        Divider { label: &quot;ProximitySensor&quot; }

        Row {
            spacing: 20
            width: parent.width
            anchors.margins: 5

            Button {
                id: proxiStart
                height: 30
                width: 80
                text: proxi.active ? &quot;Stop&quot; : &quot;Start&quot;

                onClicked: {
                    proxi.active = (proxiStart.text === &quot;Start&quot;  ? true: false);
                }
            }

            Text {
                id: proxitext
                height: 30
                verticalAlignment: Text.AlignVCenter
                text: &quot;Proximity: &quot; +
                      (proxi.active ? (proxi.reading.near ? &quot;Near&quot; : &quot;Far&quot;) : &quot;Unknown&quot;)
            }
        }
    }
}

</db:programlisting>
</db:article>
