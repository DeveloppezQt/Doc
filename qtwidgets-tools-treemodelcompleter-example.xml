<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Tree Model Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tree Model Completer example shows how to provide completion facilities for a hierarchical model, using a period as the separator to access Child, GrandChild and GrandGrandChild level objects.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/treemodelcompleter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Similar to the <db:link xlink:href="qtwidgets-tools-completer-example.xml">Completer Example</db:link>, we provide <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects to enable selection for completion mode and case sensitivity, as well as a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> for wrap completions.</db:para>
<db:section xml:id="the-resource-file">
<db:title>The Resource File</db:title>
<db:para>The contents of the TreeModelCompleter is read from <db:emphasis>treemodel.txt</db:emphasis>. This file is embedded within the <db:emphasis>treemodelcompleter.qrc</db:emphasis> resource file, which contains the following:</db:para>
<db:programlisting language="cpp">&lt;!DOCTYPE RCC&gt;&lt;RCC version=&quot;1.0&quot;&gt;
&lt;qresource prefix=&quot;/&quot;&gt;
   &lt;file&gt;resources/treemodel.txt&lt;/file&gt;
&lt;/qresource&gt;
&lt;/RCC&gt;

</db:programlisting>
</db:section>
<db:section xml:id="treemodelcompleter-class-definition">
<db:title>TreeModelCompleter Class Definition</db:title>
<db:para>The <db:code>TreeModelCompleter</db:code> is a subclass of <db:link xlink:href="qcompleter.xml">QCompleter</db:link> with two constructors - one with <db:code role="parameter">parent</db:code> as an argument and another with <db:code role="parameter">parent</db:code> and <db:code role="parameter">model</db:code> as arguments.</db:para>
<db:programlisting language="cpp">class TreeModelCompleter : public QCompleter
{
    Q_OBJECT
    Q_PROPERTY(QString separator READ separator WRITE setSeparator)

public:
    explicit TreeModelCompleter(QObject *parent = 0);
    explicit TreeModelCompleter(QAbstractItemModel *model, QObject *parent = 0);

    QString separator() const;
public slots:
    void setSeparator(const QString &amp;separator);

protected:
    QStringList splitPath(const QString &amp;path) const;
    QString pathFromIndex(const QModelIndex &amp;index) const;

private:
    QString sep;
};
</db:programlisting>
<db:para>The class reimplements the protected functions <db:link xlink:href="qcompleter.xml#splitPath">splitPath</db:link>() and <db:link xlink:href="qcompleter.xml#pathFromIndex">pathFromIndex</db:link>() to suit a tree model. For more information on customizing <db:link xlink:href="qcompleter.xml">QCompleter</db:link> to suit tree models, refer to <db:link xlink:href="qcompleter.xml#handling-tree-models">Handling Tree Models</db:link>.</db:para>
<db:para><db:code>TreeModelCompleter</db:code> also has a separator property which is declared using the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro. The separator has READ and WRITE attributes and the corresponding functions <db:code>separator()</db:code> and <db:code>setSeparator()</db:code>. For more information on <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>(), refer to <db:link xlink:href="properties.xml#qt-s-property-system">Qt's Property System</db:link>.</db:para>
</db:section>
<db:section xml:id="treemodelcompleter-class-implementation">
<db:title>TreeModelCompleter Class Implementation</db:title>
<db:para>The first constructor constructs a <db:code>TreeModelCompleter</db:code> object with a parent while the second constructor constructs an object with a parent and a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, <db:code role="parameter">model</db:code>.</db:para>
<db:programlisting language="cpp">TreeModelCompleter::TreeModelCompleter(QObject *parent)
    : QCompleter(parent)
{
}

TreeModelCompleter::TreeModelCompleter(QAbstractItemModel *model, QObject *parent)
    : QCompleter(model, parent)
{
}
</db:programlisting>
<db:para>The <db:code>separator()</db:code> function is a getter function that returns the separator string.</db:para>
<db:programlisting language="cpp">QString TreeModelCompleter::separator() const
{
    return sep;
}
</db:programlisting>
<db:para>As mentioned earlier, the <db:code>splitPath()</db:code> function is reimplemented because the default implementation is more suited to QDirModel or list models. In order for <db:link xlink:href="qcompleter.xml">QCompleter</db:link> to split the path into a list of strings that are matched at each level, we split it using <db:link xlink:href="qstring.xml#split">QString::split</db:link>() with <db:code>sep</db:code> as its separator.</db:para>
<db:programlisting language="cpp">QStringList TreeModelCompleter::splitPath(const QString &amp;path) const
{
    if (sep.isNull()) {
        return QCompleter::splitPath(path);
    }

    return path.split(sep);
}
</db:programlisting>
<db:para>The <db:code>pathFromIndex()</db:code> function returns data for the completionRole() for a tree model. This function is reimplemented as its default implementation is more suitable for list models. If there is no separator, we use <db:link xlink:href="qcompleter.xml">QCompleter</db:link>'s default implementation, otherwise we use the <db:link xlink:href="">prepend()</db:link> function to navigate upwards and accumulate the data. The function then returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link>, <db:code>dataList</db:code>, using a separator to join objects of different levels.</db:para>
<db:programlisting language="cpp">QString TreeModelCompleter::pathFromIndex(const QModelIndex &amp;index) const
{
    if (sep.isNull()) {
        return QCompleter::pathFromIndex(index);
    }

    // navigate up and accumulate data
    QStringList dataList;
    for (QModelIndex i = index; i.isValid(); i = i.parent()) {
        dataList.prepend(model()-&gt;data(i, completionRole()).toString());
    }

    return dataList.join(sep);
}
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The <db:code>MainWindow</db:code> class is a subclass of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and implements five custom slots: <db:code>about()</db:code>, <db:code>changeCase()</db:code>, <db:code>changeMode()</db:code>, <db:code>highlight()</db:code>, and <db:code>updateContentsLabel()</db:code>.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = 0);

private slots:
    void about();
    void changeCase(int);
    void changeMode(int);
    void highlight(const QModelIndex&amp;);
    void updateContentsLabel(const QString&amp;);
</db:programlisting>
<db:para>In addition, the class has two private functions, <db:code>createMenu()</db:code> and <db:code>modelFromFile()</db:code>, as well as private instances of <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, <db:link xlink:href="qlabel.xml">QLabel</db:link>, <db:code>TreeModelCompleter</db:code> and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>.</db:para>
<db:programlisting language="cpp">private:
    void createMenu();
    QAbstractItemModel *modelFromFile(const QString&amp; fileName);

    QTreeView *treeView;
    QComboBox *caseCombo;
    QComboBox *modeCombo;
    QLabel *contentsLabel;
    TreeModelCompleter *completer;
    QLineEdit *lineEdit;
};
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The <db:code>MainWindow</db:code>'s constructor creates a <db:code>MainWindow</db:code> object with a parent and initializes the <db:code>completer</db:code> and <db:code>lineEdit</db:code>. The <db:code>createMenu()</db:code> function is invoked to set up the &quot;File&quot; menu and &quot;Help&quot; menu. The <db:code>completer</db:code>'s model is set to the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> obtained from <db:code>modelFromFile()</db:code>, and the <db:link xlink:href="qcompleter.xml#highlighted">highlighted</db:link>() signal is connected to <db:code>MainWindow</db:code>'s <db:code>highlight()</db:code> slot.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), completer(0), lineEdit(0)
{
    createMenu();

    completer = new TreeModelCompleter(this);
    completer-&gt;setModel(modelFromFile(&quot;:/resources/treemodel.txt&quot;));
    completer-&gt;setSeparator(QLatin1String(&quot;.&quot;));
    QObject::connect(completer, SIGNAL(highlighted(QModelIndex)),
                     this, SLOT(highlight(QModelIndex)));

    QWidget *centralWidget = new QWidget;

    QLabel *modelLabel = new QLabel;
    modelLabel-&gt;setText(tr(&quot;Tree Model&lt;br&gt;(Double click items to edit)&quot;));

    QLabel *modeLabel = new QLabel;
    modeLabel-&gt;setText(tr(&quot;Completion Mode&quot;));
    modeCombo = new QComboBox;
    modeCombo-&gt;addItem(tr(&quot;Inline&quot;));
    modeCombo-&gt;addItem(tr(&quot;Filtered Popup&quot;));
    modeCombo-&gt;addItem(tr(&quot;Unfiltered Popup&quot;));
    modeCombo-&gt;setCurrentIndex(1);

    QLabel *caseLabel = new QLabel;
    caseLabel-&gt;setText(tr(&quot;Case Sensitivity&quot;));
    caseCombo = new QComboBox;
    caseCombo-&gt;addItem(tr(&quot;Case Insensitive&quot;));
    caseCombo-&gt;addItem(tr(&quot;Case Sensitive&quot;));
    caseCombo-&gt;setCurrentIndex(0);
</db:programlisting>
<db:para>The <db:link xlink:href="qlabel.xml">QLabel</db:link> objects <db:code>modelLabel</db:code>, <db:code>modeLabel</db:code> and <db:code>caseLabel</db:code> are instantiated. Also, the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects, <db:code>modeCombo</db:code> and <db:code>caseCombo</db:code>, are instantiated and populated. By default, the <db:code>completer</db:code>'s mode is &quot;Filtered Popup&quot; and the case is insensitive.</db:para>
<db:programlisting language="cpp">    QLabel *separatorLabel = new QLabel;
    separatorLabel-&gt;setText(tr(&quot;Tree Separator&quot;));

    QLineEdit *separatorLineEdit = new QLineEdit;
    separatorLineEdit-&gt;setText(completer-&gt;separator());
    connect(separatorLineEdit, SIGNAL(textChanged(QString)),
            completer, SLOT(setSeparator(QString)));

    QCheckBox *wrapCheckBox = new QCheckBox;
    wrapCheckBox-&gt;setText(tr(&quot;Wrap around completions&quot;));
    wrapCheckBox-&gt;setChecked(completer-&gt;wrapAround());
    connect(wrapCheckBox, SIGNAL(clicked(bool)), completer, SLOT(setWrapAround(bool)));

    contentsLabel = new QLabel;
    contentsLabel-&gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    connect(separatorLineEdit, SIGNAL(textChanged(QString)),
            this, SLOT(updateContentsLabel(QString)));

    treeView = new QTreeView;
    treeView-&gt;setModel(completer-&gt;model());
    treeView-&gt;header()-&gt;hide();
    treeView-&gt;expandAll();

    connect(modeCombo, SIGNAL(activated(int)), this, SLOT(changeMode(int)));
    connect(caseCombo, SIGNAL(activated(int)), this, SLOT(changeCase(int)));

    lineEdit = new QLineEdit;
    lineEdit-&gt;setCompleter(completer);
</db:programlisting>
<db:para>We use a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> to place all the objects in the <db:code>MainWindow</db:code>.</db:para>
<db:programlisting language="cpp">    QGridLayout *layout = new QGridLayout;
    layout-&gt;addWidget(modelLabel, 0, 0); layout-&gt;addWidget(treeView, 0, 1);
    layout-&gt;addWidget(modeLabel, 1, 0);  layout-&gt;addWidget(modeCombo, 1, 1);
    layout-&gt;addWidget(caseLabel, 2, 0);  layout-&gt;addWidget(caseCombo, 2, 1);
    layout-&gt;addWidget(separatorLabel, 3, 0); layout-&gt;addWidget(separatorLineEdit, 3, 1);
    layout-&gt;addWidget(wrapCheckBox, 4, 0);
    layout-&gt;addWidget(contentsLabel, 5, 0, 1, 2);
    layout-&gt;addWidget(lineEdit, 6, 0, 1, 2);
    centralWidget-&gt;setLayout(layout);
    setCentralWidget(centralWidget);

    changeCase(caseCombo-&gt;currentIndex());
    changeMode(modeCombo-&gt;currentIndex());

    setWindowTitle(tr(&quot;Tree Model Completer&quot;));
    lineEdit-&gt;setFocus();
}
</db:programlisting>
<db:para>The <db:code>createMenu()</db:code> function sets up the <db:link xlink:href="qaction.xml">QAction</db:link> objects required and adds them to the &quot;File&quot; menu and &quot;Help&quot; menu. The <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signals from these actions are connected to their respective slots.</db:para>
<db:programlisting language="cpp">void MainWindow::createMenu()
{
    QAction *exitAction = new QAction(tr(&quot;Exit&quot;), this);
    QAction *aboutAct = new QAction(tr(&quot;About&quot;), this);
    QAction *aboutQtAct = new QAction(tr(&quot;About Qt&quot;), this);

    connect(exitAction, SIGNAL(triggered()), qApp, SLOT(quit()));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));

    QMenu* fileMenu = menuBar()-&gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&gt;addAction(exitAction);

    QMenu* helpMenu = menuBar()-&gt;addMenu(tr(&quot;About&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}
</db:programlisting>
<db:para>The <db:code>changeMode()</db:code> function accepts an <db:code role="parameter">index</db:code> corresponding to the user's choice of completion mode and changes the <db:code>completer</db:code>'s mode accordingly.</db:para>
<db:programlisting language="cpp">void MainWindow::changeMode(int index)
{
    QCompleter::CompletionMode mode;
    if (index == 0)
        mode = QCompleter::InlineCompletion;
    else if (index == 1)
        mode = QCompleter::PopupCompletion;
    else
        mode = QCompleter::UnfilteredPopupCompletion;

    completer-&gt;setCompletionMode(mode);
}
</db:programlisting>
<db:para>The <db:code>about()</db:code> function provides a brief description on the Tree Model Completer example.</db:para>
<db:programlisting language="cpp">void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;This example demonstrates how &quot;
        &quot;to use a QCompleter with a custom tree model.&quot;));
}
</db:programlisting>
<db:para>The <db:code>changeCase()</db:code> function alternates between <db:link xlink:href="qt.xml#CaseSensitivity-enum">Case Sensitive</db:link> and <db:link xlink:href="qt.xml#CaseSensitivity-enum">Case Insensitive</db:link> modes, depending on the value of <db:code role="parameter">cs</db:code>.</db:para>
<db:programlisting language="cpp">void MainWindow::changeCase(int cs)
{
    completer-&gt;setCaseSensitivity(cs ? Qt::CaseSensitive : Qt::CaseInsensitive);
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title><db:code>main()</db:code> Function</db:title>
<db:para>The <db:code>main()</db:code> function instantiates <db:code>MainWindow</db:code> and invokes the <db:link xlink:href="qwidget.xml#show">show</db:link>() function to display it.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(treemodelcompleter);

    QApplication app(argc, argv);
    MainWindow window;
    window.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/main.cpp">tools/treemodelcompleter/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/mainwindow.cpp">tools/treemodelcompleter/mainwindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/mainwindow.h">tools/treemodelcompleter/mainwindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/treemodelcompleter.cpp">tools/treemodelcompleter/treemodelcompleter.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/treemodelcompleter.h">tools/treemodelcompleter/treemodelcompleter.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/treemodelcompleter.pro">tools/treemodelcompleter/treemodelcompleter.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/treemodelcompleter/treemodelcompleter.qrc">tools/treemodelcompleter/treemodelcompleter.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
