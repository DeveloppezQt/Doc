<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Tree Model Completer Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Tree Model Completer example shows how to provide completion facilities for a hierarchical model, using a period as the separator to access Child, GrandChild and GrandGrandChild level objects.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/treemodelcompleter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Similar to the <db:link xlink:href="qtwidgets-tools-completer-example.xml">Completer Example</db:link>, we provide <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects to enable selection for completion mode and case sensitivity, as well as a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> for wrap completions.</db:para>
<db:section xml:id="the-resource-file">
<db:title>The Resource File</db:title>
<db:para>The contents of the TreeModelCompleter is read from <db:emphasis>treemodel.txt</db:emphasis>. This file is embedded within the <db:emphasis>treemodelcompleter.qrc</db:emphasis> resource file, which contains the following:</db:para>
<db:programlisting language="cpp">&amp;lt;!DOCTYPE RCC&amp;gt;&amp;lt;RCC version=&quot;1.0&quot;&amp;gt;
&amp;lt;qresource prefix=&quot;/&quot;&amp;gt;
   &amp;lt;file&amp;gt;resources/treemodel.txt&amp;lt;/file&amp;gt;
&amp;lt;/qresource&amp;gt;
&amp;lt;/RCC&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="treemodelcompleter-class-definition">
<db:title>TreeModelCompleter Class Definition</db:title>
<db:para>The TreeModelCompleter is a subclass of <db:link xlink:href="qcompleter.xml">QCompleter</db:link> with two constructors - one with <db:code role="parameter">parent</db:code> as an argument and another with <db:code role="parameter">parent</db:code> and <db:code role="parameter">model</db:code> as arguments.</db:para>
<db:programlisting language="cpp">class TreeModelCompleter : public QCompleter
{
    Q_OBJECT
    Q_PROPERTY(QString separator READ separator WRITE setSeparator)

public:
    explicit TreeModelCompleter(QObject *parent = nullptr);
    explicit TreeModelCompleter(QAbstractItemModel *model, QObject *parent = nullptr);

    QString separator() const;
public slots:
    void setSeparator(const QString &amp;amp;separator);

protected:
    QStringList splitPath(const QString &amp;amp;path) const override;
    QString pathFromIndex(const QModelIndex &amp;amp;index) const override;

private:
    QString sep;
};
</db:programlisting>
<db:para>The class reimplements the protected functions <db:link xlink:href="qcompleter.xml#splitPath">splitPath</db:link>() and <db:link xlink:href="qcompleter.xml#pathFromIndex">pathFromIndex</db:link>() to suit a tree model. For more information on customizing <db:link xlink:href="qcompleter.xml">QCompleter</db:link> to suit tree models, refer to <db:link xlink:href="qcompleter.xml#handling-tree-models">Handling Tree Models</db:link>.</db:para>
<db:para>TreeModelCompleter also has a separator property which is declared using the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>() macro. The separator has READ and WRITE attributes and the corresponding functions separator() and setSeparator(). For more information on <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link>(), refer to <db:link xlink:href="properties.xml">Qt's Property System</db:link>.</db:para>
</db:section>
<db:section xml:id="treemodelcompleter-class-implementation">
<db:title>TreeModelCompleter Class Implementation</db:title>
<db:para>The first constructor constructs a TreeModelCompleter object with a parent while the second constructor constructs an object with a parent and a <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, <db:code role="parameter">model</db:code>.</db:para>
<db:programlisting language="cpp">TreeModelCompleter::TreeModelCompleter(QObject *parent)
    : QCompleter(parent)
{
}

TreeModelCompleter::TreeModelCompleter(QAbstractItemModel *model, QObject *parent)
    : QCompleter(model, parent)
{
}
</db:programlisting>
<db:para>The separator() function is a getter function that returns the separator string.</db:para>
<db:programlisting language="cpp">QString TreeModelCompleter::separator() const
{
    return sep;
}
</db:programlisting>
<db:para>As mentioned earlier, the splitPath() function is reimplemented because the default implementation is more suited to <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> or list models. In order for <db:link xlink:href="qcompleter.xml">QCompleter</db:link> to split the path into a list of strings that are matched at each level, we split it using <db:link xlink:href="qstring.xml#split">QString::split</db:link>() with sep as its separator.</db:para>
<db:programlisting language="cpp">QStringList TreeModelCompleter::splitPath(const QString &amp;amp;path) const
{
    return (sep.isNull() ? QCompleter::splitPath(path) : path.split(sep));
}
</db:programlisting>
<db:para>The pathFromIndex() function returns data for the completionRole() for a tree model. This function is reimplemented as its default implementation is more suitable for list models. If there is no separator, we use <db:link xlink:href="qcompleter.xml">QCompleter</db:link>'s default implementation, otherwise we use the <db:link xlink:href="qlist.xml#prepend">prepend</db:link>() function to navigate upwards and accumulate the data. The function then returns a <db:link xlink:href="qstringlist.xml">QStringList</db:link>, dataList, using a separator to join objects of different levels.</db:para>
<db:programlisting language="cpp">QString TreeModelCompleter::pathFromIndex(const QModelIndex &amp;amp;index) const
{
    if (sep.isNull())
        return QCompleter::pathFromIndex(index);

    // navigate up and accumulate data
    QStringList dataList;
    for (QModelIndex i = index; i.isValid(); i = i.parent())
        dataList.prepend(model()-&amp;gt;data(i, completionRole()).toString());

    return dataList.join(sep);
}
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The MainWindow class is a subclass of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> and implements five custom slots: about(), changeCase(), changeMode(), highlight(), and updateContentsLabel().</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);

private slots:
    void about();
    void changeCase(int);
    void changeMode(int);
    void highlight(const QModelIndex &amp;amp;index);
    void updateContentsLabel(const QString &amp;amp;sep);
</db:programlisting>
<db:para>In addition, the class has two private functions, createMenu() and modelFromFile(), as well as private instances of <db:link xlink:href="qtreeview.xml">QTreeView</db:link>, <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, <db:link xlink:href="qlabel.xml">QLabel</db:link>, TreeModelCompleter and <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>.</db:para>
<db:programlisting language="cpp">private:
    void createMenu();
    QAbstractItemModel *modelFromFile(const QString &amp;amp;fileName);

    QTreeView *treeView = nullptr;
    QComboBox *caseCombo = nullptr;
    QComboBox *modeCombo = nullptr;
    QLabel *contentsLabel = nullptr;
    TreeModelCompleter *completer = nullptr;
    QLineEdit *lineEdit = nullptr;
};
</db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The MainWindow's constructor creates a MainWindow object with a parent and initializes the completer and lineEdit. The createMenu() function is invoked to set up the &quot;File&quot; menu and &quot;Help&quot; menu. The completer's model is set to the <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link> obtained from modelFromFile(), and the <db:link xlink:href="qcompleter.xml#highlighted">highlighted</db:link>() signal is connected to MainWindow's highlight() slot.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    createMenu();

    completer = new TreeModelCompleter(this);
    completer-&amp;gt;setModel(modelFromFile(&quot;:/resources/treemodel.txt&quot;));
    completer-&amp;gt;setSeparator(QLatin1String(&quot;.&quot;));
    QObject::connect(completer, QOverload&amp;lt;const QModelIndex &amp;amp;&amp;gt;::of(&amp;amp;TreeModelCompleter::highlighted),
                     this, &amp;amp;MainWindow::highlight);

    QWidget *centralWidget = new QWidget;

    QLabel *modelLabel = new QLabel;
    modelLabel-&amp;gt;setText(tr(&quot;Tree Model&amp;lt;br&amp;gt;(Double click items to edit)&quot;));

    QLabel *modeLabel = new QLabel;
    modeLabel-&amp;gt;setText(tr(&quot;Completion Mode&quot;));
    modeCombo = new QComboBox;
    modeCombo-&amp;gt;addItem(tr(&quot;Inline&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Filtered Popup&quot;));
    modeCombo-&amp;gt;addItem(tr(&quot;Unfiltered Popup&quot;));
    modeCombo-&amp;gt;setCurrentIndex(1);

    QLabel *caseLabel = new QLabel;
    caseLabel-&amp;gt;setText(tr(&quot;Case Sensitivity&quot;));
    caseCombo = new QComboBox;
    caseCombo-&amp;gt;addItem(tr(&quot;Case Insensitive&quot;));
    caseCombo-&amp;gt;addItem(tr(&quot;Case Sensitive&quot;));
    caseCombo-&amp;gt;setCurrentIndex(0);
</db:programlisting>
<db:para>The <db:link xlink:href="qlabel.xml">QLabel</db:link> objects modelLabel, modeLabel and caseLabel are instantiated. Also, the <db:link xlink:href="qcombobox.xml">QComboBox</db:link> objects, modeCombo and caseCombo, are instantiated and populated. By default, the completer's mode is &quot;Filtered Popup&quot; and the case is insensitive.</db:para>
<db:programlisting language="cpp">    QLabel *separatorLabel = new QLabel;
    separatorLabel-&amp;gt;setText(tr(&quot;Tree Separator&quot;));

    QLineEdit *separatorLineEdit = new QLineEdit;
    separatorLineEdit-&amp;gt;setText(completer-&amp;gt;separator());
    connect(separatorLineEdit, &amp;amp;QLineEdit::textChanged,
            completer, &amp;amp;TreeModelCompleter::setSeparator);

    QCheckBox *wrapCheckBox = new QCheckBox;
    wrapCheckBox-&amp;gt;setText(tr(&quot;Wrap around completions&quot;));
    wrapCheckBox-&amp;gt;setChecked(completer-&amp;gt;wrapAround());
    connect(wrapCheckBox, &amp;amp;QAbstractButton::clicked, completer, &amp;amp;QCompleter::setWrapAround);

    contentsLabel = new QLabel;
    contentsLabel-&amp;gt;setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Fixed);
    connect(separatorLineEdit, &amp;amp;QLineEdit::textChanged,
            this, &amp;amp;MainWindow::updateContentsLabel);

    treeView = new QTreeView;
    treeView-&amp;gt;setModel(completer-&amp;gt;model());
    treeView-&amp;gt;header()-&amp;gt;hide();
    treeView-&amp;gt;expandAll();

    connect(modeCombo, &amp;amp;QComboBox::activated,
            this, &amp;amp;MainWindow::changeMode);
    connect(caseCombo, &amp;amp;QComboBox::activated,
            this, &amp;amp;MainWindow::changeMode);

    lineEdit = new QLineEdit;
    lineEdit-&amp;gt;setCompleter(completer);
</db:programlisting>
<db:para>We use a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> to place all the objects in the MainWindow.</db:para>
<db:programlisting language="cpp">    QGridLayout *layout = new QGridLayout;
    layout-&amp;gt;addWidget(modelLabel, 0, 0); layout-&amp;gt;addWidget(treeView, 0, 1);
    layout-&amp;gt;addWidget(modeLabel, 1, 0);  layout-&amp;gt;addWidget(modeCombo, 1, 1);
    layout-&amp;gt;addWidget(caseLabel, 2, 0);  layout-&amp;gt;addWidget(caseCombo, 2, 1);
    layout-&amp;gt;addWidget(separatorLabel, 3, 0); layout-&amp;gt;addWidget(separatorLineEdit, 3, 1);
    layout-&amp;gt;addWidget(wrapCheckBox, 4, 0);
    layout-&amp;gt;addWidget(contentsLabel, 5, 0, 1, 2);
    layout-&amp;gt;addWidget(lineEdit, 6, 0, 1, 2);
    centralWidget-&amp;gt;setLayout(layout);
    setCentralWidget(centralWidget);

    changeCase(caseCombo-&amp;gt;currentIndex());
    changeMode(modeCombo-&amp;gt;currentIndex());

    setWindowTitle(tr(&quot;Tree Model Completer&quot;));
    lineEdit-&amp;gt;setFocus();
}
</db:programlisting>
<db:para>The createMenu() function sets up the <db:link xlink:href="qaction.xml">QAction</db:link> objects required and adds them to the &quot;File&quot; menu and &quot;Help&quot; menu. The <db:link xlink:href="qaction.xml#triggered">triggered</db:link>() signals from these actions are connected to their respective slots.</db:para>
<db:programlisting language="cpp">void MainWindow::createMenu()
{
    QAction *exitAction = new QAction(tr(&quot;Exit&quot;), this);
    QAction *aboutAct = new QAction(tr(&quot;About&quot;), this);
    QAction *aboutQtAct = new QAction(tr(&quot;About Qt&quot;), this);

    connect(exitAction, &amp;amp;QAction::triggered, qApp, &amp;amp;QApplication::quit);
    connect(aboutAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::about);
    connect(aboutQtAct, &amp;amp;QAction::triggered, qApp, &amp;amp;QApplication::aboutQt);

    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;File&quot;));
    fileMenu-&amp;gt;addAction(exitAction);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;About&quot;));
    helpMenu-&amp;gt;addAction(aboutAct);
    helpMenu-&amp;gt;addAction(aboutQtAct);
}
</db:programlisting>
<db:para>The changeMode() function accepts an <db:code role="parameter">index</db:code> corresponding to the user's choice of completion mode and changes the completer's mode accordingly.</db:para>
<db:programlisting language="cpp">void MainWindow::changeMode(int index)
{
    QCompleter::CompletionMode mode;
    if (index == 0)
        mode = QCompleter::InlineCompletion;
    else if (index == 1)
        mode = QCompleter::PopupCompletion;
    else
        mode = QCompleter::UnfilteredPopupCompletion;

    completer-&amp;gt;setCompletionMode(mode);
}
</db:programlisting>
<db:para>The about() function provides a brief description on the Tree Model Completer example.</db:para>
<db:programlisting language="cpp">void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About&quot;), tr(&quot;This example demonstrates how &quot;
        &quot;to use a QCompleter with a custom tree model.&quot;));
}
</db:programlisting>
<db:para>The changeCase() function alternates between <db:link xlink:href="qt.xml#CaseSensitivity-enum">Case Sensitive</db:link> and <db:link xlink:href="qt.xml#CaseSensitivity-enum">Case Insensitive</db:link> modes, depending on the value of <db:code role="parameter">cs</db:code>.</db:para>
<db:programlisting language="cpp">void MainWindow::changeCase(int cs)
{
    completer-&amp;gt;setCaseSensitivity(cs ? Qt::CaseSensitive : Qt::CaseInsensitive);
}
</db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main() function instantiates MainWindow and invokes the <db:link xlink:href="qwidget.xml#show">show</db:link>() function to display it.</db:para>
<db:programlisting language="cpp">int main(int argc, char *argv[])
{
    Q_INIT_RESOURCE(treemodelcompleter);

    QApplication app(argc, argv);
    MainWindow window;
    window.show();
    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tools/treemodelcompleter?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
