<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtShell Compositor</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> Compositor shows how to use the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> shell extension.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> Compositor is a desktop-style Wayland compositor example implementing a complete Qt Wayland Compositor which uses the specialized <db:link xlink:href="qtwaylandcompositor-shellextensions.xml">shell extension protocol</db:link> called <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtshell.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>The compositor is implemented with Qt Quick and QML.</db:para>
<db:section xml:id="making-the-connection">
<db:title>Making the Connection</db:title>
<db:para>The example lists <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> as the only extension to the <db:link xlink:href="qml-qtwayland-compositor-waylandcompositor.xml">WaylandCompositor</db:link> object. This means that any client connecting to the server must also support this extension, thus they should be Qt applications running against the same version of Qt as the compositor.</db:para>
<db:programlisting language="qml">QtShell {
    onQtShellSurfaceCreated: (qtShellSurface) =&amp;gt; screen.handleShellSurface(qtShellSurface)
}
</db:programlisting>
<db:para>When a client connects to the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> interface, it creates a <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml">QtShellSurface</db:link>. The compositor is notified of this by the emission of the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml#qtShellSurfaceCreated-signal">qtShellSurfaceCreated</db:link> signal. The example then adds the shell surface to a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> for easy access later.</db:para>
<db:programlisting language="qml">property ListModel shellSurfaces: ListModel {}
function handleShellSurface(shellSurface) {
    shellSurfaces.append({shellSurface: shellSurface});
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> is used as the model for a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> which creates the Qt Quick items required to display the client contents on screen.</db:para>
<db:programlisting language="qml">Repeater {
    id: chromeRepeater
    model: output.shellSurfaces
    // Chrome displays a shell surface on the screen (See Chrome.qml)
    Chrome {
        shellSurface: modelData
        onClientDestroyed:
        {
            output.shellSurfaces.remove(index)
        }
    }
}
</db:programlisting>
<db:para>It uses the local <db:code>Chrome</db:code> type, which handles window states and decorations.</db:para>
</db:section>
<db:section xml:id="chrome">
<db:title>Chrome</db:title>
<db:para>The <db:code>Chrome</db:code> is the type that ensures the client contents are visible and also handles window state, position, size, and so on. It uses the built-in <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link> as a basis, which automatically handles window state (maximized, minimized, fullscreen) and window activation (ensuring that only a single window is active at the time).</db:para>
<db:para>Its behavior can be customized to some extent, but it is also possible to write the <db:code>Chrome</db:code> functionality from scratch, building from a basic <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type instead. <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link> is a convenience class which provides typical compositor behavior, and saves us the time of implementing this logic in the example.</db:para>
<db:para>However the <db:code>Chrome</db:code> is written, it should have a <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> to hold the client contents.</db:para>
<db:programlisting language="qml">ShellSurfaceItem {
    id: shellSurfaceItemId
    anchors.top: titleBar.bottom
    anchors.bottom: bottomResizeHandle.top
    anchors.left: leftResizeHandle.right
    anchors.right: rightResizeHandle.left

    moveItem: chrome

    staysOnBottom: shellSurface.windowFlags &amp;amp; Qt.WindowStaysOnBottomHint
    staysOnTop: !staysOnBottom &amp;amp;&amp;amp; shellSurface.windowFlags &amp;amp; Qt.WindowStaysOnTopHint
}
shellSurfaceItem: shellSurfaceItemId
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> is the visual representation of the client's contents in the Qt Quick scene. Its size should usually match the size of the client's buffer, otherwise it may look stretched or squeezed. <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link> will automatically be sized to the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml">QtShellSurface</db:link>'s <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml#windowGeometry-prop">windowGeometry</db:link>, which is size of the client's buffer plus the size of the frame margins. The frame margins are reserved areas on the sides of the <db:code>Chrome</db:code> which can be used to contain window decorations.</db:para>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link> is therefore anchored to the window decorations to fill the area reserved for the client buffer.</db:para>
</db:section>
<db:section xml:id="window-decorations">
<db:title>Window Decorations</db:title>
<db:para>The window decoration is usually a frame around a client's contents which adds information (such as a window title) and the possibility of user interaction (such as resizing, closing, moving the window, and so on.)</db:para>
<db:para>With <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link>, window decorations are always drawn by the compositor and not by the client. In order for sizes and positions to be communicated correctly, <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> also needs to know how much of the window is reserved for these decorations. This can be handled automatically by <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link>, or manually, by setting <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml#frameMarginLeft-prop">frameMarginLeft</db:link>, <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml#frameMarginRight-prop">frameMarginRight</db:link>, <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml#frameMarginTop-prop">frameMarginTop</db:link> and <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml#frameMarginBottom-prop">frameMarginBottom</db:link>.</db:para>
<db:para>For typical cases where there are resize handles around the window and a title bar at the top, it is more convenient to rely on the default frame margins. The <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshell.xml">QtShell</db:link> Compositor example does this.</db:para>
<db:para>First, we create Qt Quick items to represent the different parts of the window's decorations. On the left side, for example, there should be a resize handle that the user can grab and drag in order to resize the window.</db:para>
<db:programlisting language="qml">Rectangle {
    id: leftResizeHandle
    color: &quot;gray&quot;
    width: visible ? 5 : 0
    anchors.topMargin: 5
    anchors.bottomMargin: 5
    anchors.left: parent.left
    anchors.top: parent.top
    anchors.bottom: parent.bottom
}
</db:programlisting>
<db:para>We simply make this a five-pixel wide rectangle in the example, anchored to the top, bottom and left side of the <db:code>Chrome</db:code>.</db:para>
<db:para>Similarly, we add Qt Quick items that represent the right, top, bottom, top-left, top-right, bottom-left and bottom-right resize handles. We also add a title bar. When the decorations have been created and anchored correctly to the sides of the <db:code>Chrome</db:code>, we set corresponding properties in <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link>.</db:para>
<db:programlisting language="qml">leftResizeHandle: leftResizeHandle
rightResizeHandle: rightResizeHandle
topResizeHandle: topResizeHandle
bottomResizeHandle: bottomResizeHandle
bottomLeftResizeHandle: bottomLeftResizeHandle
bottomRightResizeHandle: bottomRightResizeHandle
topLeftResizeHandle: topLeftResizeHandle
topRightResizeHandle: topRightResizeHandle
titleBar: titleBar
</db:programlisting>
<db:para>When the decoration properties are set, the default resizing and repositioning behavior will be added automatically. The user will be able to interact with the resize handles in order to resize the window, and drag the title bar to reposition it. The frame margins of the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml">QtShellSurface</db:link> will also be set automatically to account for the size of the decorations (as long as none of the frame margins properties have been set explicitly.)</db:para>
<db:para>The visibility of the decorations will be handled automatically by the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link> based on the window flags of the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml">QtShellSurface</db:link>.</db:para>
</db:section>
<db:section xml:id="window-management">
<db:title>Window Management</db:title>
<db:para>As part of the decorations, it is common to have tool buttons which manage the window state and life span. In the example, these are added to the title bar.</db:para>
<db:programlisting language="qml">RowLayout {
    id: rowLayout
    anchors.right: parent.right
    anchors.rightMargin: 5

    ToolButton {
        text: &quot;-&quot;
        Layout.margins: 5
        visible: (chrome.windowFlags &amp;amp; Qt.WindowMinimizeButtonHint) != 0
        onClicked: {
            chrome.toggleMinimized()
        }
    }

    ToolButton {
        text: &quot;+&quot;
        Layout.margins: 5
        visible: (chrome.windowFlags &amp;amp; Qt.WindowMaximizeButtonHint) != 0
        onClicked: {
            chrome.toggleMaximized()
        }
    }

    ToolButton {
        id: xButton
        text: &quot;X&quot;
        Layout.margins: 5
        visible: (chrome.windowFlags &amp;amp; Qt.WindowCloseButtonHint) != 0
        onClicked: shellSurface.sendClose()
    }
}
</db:programlisting>
<db:para>The visibility of each button is conditional on the window flag for that button, and when each of them is clicked, we simply call the corresponding method in <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml">QtShellChrome</db:link>. The exception is the &quot;close&quot; button, which calls the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml#sendClose-method">sendClose</db:link>() method in <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellsurface.xml">QtShellSurface</db:link>. This instructs the client to close itself, and ensures a graceful shutdown of the application.</db:para>
<db:programlisting language="qml">Row {
    id: taskbar
    height: 40
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: parent.bottom

    Repeater {
        anchors.fill: parent
        model: output.shellSurfaces

        ToolButton {
            anchors.verticalCenter: parent.verticalCenter
            text: modelData.windowTitle
            onClicked: {
                var item = chromeRepeater.itemAt(index)
                if ((item.windowState &amp;amp; Qt.WindowMinimized) != 0)
                    item.toggleMinimized()
                chromeRepeater.itemAt(index).activate()
            }
        }
    }
}
</db:programlisting>
<db:para>As an additional window management tool, the example has a &quot;task bar&quot;. This is just a row of tool buttons at the bottom with the window titles. The buttons can be clicked to de-minimize applications and bring them to the front if they are obscured by other windows. Similarly to the <db:code>Chrome</db:code>, we use a <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> for creating the tool buttons and use the shell surface list as model for this. For simplicity, the example does not have any handling of overflow (when there are too many applications for the task bar), but in a proper compositor, this is also something that should be considered.</db:para>
<db:para>Finally, to avoid maximized applications expanding to fill the area covered by the task bar, we create a special item to manage the parts of the <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link> real estate that is available to client windows.</db:para>
<db:programlisting language="qml">Item {
    id: usableArea
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.bottom: taskbar.top
}
</db:programlisting>
<db:para>It is simply anchored to the sides of the <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link>, but its bottom anchor is at the top of the task bar.</db:para>
<db:para>In the <db:code>Chrome</db:code>, we use this area to define the <db:link xlink:href="qml-qtwayland-compositor-qtshell-qtshellchrome.xml#maximizedRect-prop">maximizedRect</db:link> of the window.</db:para>
<db:programlisting language="qml">maximizedRect: Qt.rect(usableArea.x,
                       usableArea.y,
                       usableArea.width,
                       usableArea.height)
</db:programlisting>
<db:para>By default, this property will match the full <db:link xlink:href="qml-qtwayland-compositor-waylandoutput.xml">WaylandOutput</db:link>. In our case, however, we do not want to include the task bar in the available area, so we override the default.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwayland.git/tree/examples/wayland/qtshell?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
