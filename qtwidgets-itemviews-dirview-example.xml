<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Dir View Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates the usage of a tree view.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Dir View example shows a tree view of the local file system. It uses the <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> class to provide file and directory information.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dirview-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="cpp">    QCommandLineParser parser;
    parser.setApplicationDescription(&quot;Qt Dir View Example&quot;);
    parser.addHelpOption();
    parser.addVersionOption();
    QCommandLineOption dontUseCustomDirectoryIconsOption(&quot;c&quot;, &quot;Set QFileIconProvider::DontUseCustomDirectoryIcons&quot;);
    parser.addOption(dontUseCustomDirectoryIconsOption);
    parser.addPositionalArgument(&quot;directory&quot;, &quot;The directory to start in.&quot;);
    parser.process(app);
    const QString rootPath = parser.positionalArguments().isEmpty()
</db:programlisting>
<db:para>The example supports a number of command line options. These options include:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Application description</db:para>
</db:listitem>
<db:listitem>
<db:para>-help option</db:para>
</db:listitem>
<db:listitem>
<db:para>-version option</db:para>
</db:listitem>
<db:listitem>
<db:para>if the optionc {-c} is specified, the application will not use custom directory options</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">    QFileSystemModel model;
    model.setRootPath(&quot;&quot;);
    if (parser.isSet(dontUseCustomDirectoryIconsOption))
        model.iconProvider()-&amp;gt;setOptions(QFileIconProvider::DontUseCustomDirectoryIcons);
    QTreeView tree;
    tree.setModel(&amp;amp;model);
</db:programlisting>
<db:para>Declares model as data model for reading the local filesystem. model.setRootPath(&quot;&quot;) sets the current folder as the folder from which model will start reading. <db:link xlink:href="qtreeview.xml">QTreeView</db:link> object tree visualizes the filesystem in a tree structure.</db:para>
<db:programlisting language="cpp">    tree.setAnimated(false);
    tree.setIndentation(20);
    tree.setSortingEnabled(true);
    const QSize availableSize = QApplication::desktop()-&amp;gt;availableGeometry(&amp;amp;tree).size();
    tree.resize(availableSize / 2);
    tree.setColumnWidth(0, tree.width() / 3);

    tree.setWindowTitle(QObject::tr(&quot;Dir View&quot;));
</db:programlisting>
<db:para>Sets layout options for animation, indentation, sorting, and sizing of the filesystem tree.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="itemviews/dirview/dirview.pro">itemviews/dirview/dirview.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="itemviews/dirview/main.cpp">itemviews/dirview/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
