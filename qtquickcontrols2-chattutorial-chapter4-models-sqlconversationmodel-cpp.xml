<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls 2 - Chat Tutorial</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Tutorial about writing a basic chat client using Qt Quick Controls 2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;sqlconversationmodel.h&quot;

#include &lt;QDateTime&gt;
#include &lt;QDebug&gt;
#include &lt;QSqlError&gt;
#include &lt;QSqlRecord&gt;
#include &lt;QSqlQuery&gt;

static const char *conversationsTableName = &quot;Conversations&quot;;

static void createTable()
{
    if (QSqlDatabase::database().tables().contains(conversationsTableName)) {
        // The table already exists; we don't need to do anything.
        return;
    }

    QSqlQuery query;
    if (!query.exec(
        &quot;CREATE TABLE IF NOT EXISTS 'Conversations' (&quot;
        &quot;'author' TEXT NOT NULL,&quot;
        &quot;'recipient' TEXT NOT NULL,&quot;
        &quot;'timestamp' TEXT NOT NULL,&quot;
        &quot;'message' TEXT NOT NULL,&quot;
        &quot;FOREIGN KEY('author') REFERENCES Contacts ( name ),&quot;
        &quot;FOREIGN KEY('recipient') REFERENCES Contacts ( name )&quot;
        &quot;)&quot;)) {
        qFatal(&quot;Failed to query database: %s&quot;, qPrintable(query.lastError().text()));
    }

    query.exec(&quot;INSERT INTO Conversations VALUES('Me', 'Ernest Hemingway', '2016-01-07T14:36:06', 'Hello!')&quot;);
    query.exec(&quot;INSERT INTO Conversations VALUES('Ernest Hemingway', 'Me', '2016-01-07T14:36:16', 'Good afternoon.')&quot;);
    query.exec(&quot;INSERT INTO Conversations VALUES('Me', 'Albert Einstein', '2016-01-01T11:24:53', 'Hi!')&quot;);
    query.exec(&quot;INSERT INTO Conversations VALUES('Albert Einstein', 'Me', '2016-01-07T14:36:16', 'Good morning.')&quot;);
    query.exec(&quot;INSERT INTO Conversations VALUES('Hans Gude', 'Me', '2015-11-20T06:30:02', 'God morgen. Har du fått mitt maleri?')&quot;);
    query.exec(&quot;INSERT INTO Conversations VALUES('Me', 'Hans Gude', '2015-11-20T08:21:03', 'God morgen, Hans. Ja, det er veldig fint. Tusen takk! &quot;
               &quot;Hvor mange timer har du brukt på den?')&quot;);
}

SqlConversationModel::SqlConversationModel(QObject *parent) :
    QSqlTableModel(parent)
{
    createTable();
    setTable(conversationsTableName);
    setSort(2, Qt::DescendingOrder);
    // Ensures that the model is sorted correctly after submitting a new row.
    setEditStrategy(QSqlTableModel::OnManualSubmit);
}

QString SqlConversationModel::recipient() const
{
    return m_recipient;
}

void SqlConversationModel::setRecipient(const QString &amp;recipient)
{
    if (recipient == m_recipient)
        return;

    m_recipient = recipient;

    const QString filterString = QString::fromLatin1(
        &quot;(recipient = '%1' AND author = 'Me') OR (recipient = 'Me' AND author='%1')&quot;).arg(m_recipient);
    setFilter(filterString);
    select();

    emit recipientChanged();
}

QVariant SqlConversationModel::data(const QModelIndex &amp;index, int role) const
{
    if (role &lt; Qt::UserRole)
        return QSqlTableModel::data(index, role);

    const QSqlRecord sqlRecord = record(index.row());
    return sqlRecord.value(role - Qt::UserRole);
}

QHash&lt;int, QByteArray&gt; SqlConversationModel::roleNames() const
{
    QHash&lt;int, QByteArray&gt; names;
    names[Qt::UserRole] = &quot;author&quot;;
    names[Qt::UserRole + 1] = &quot;recipient&quot;;
    names[Qt::UserRole + 2] = &quot;timestamp&quot;;
    names[Qt::UserRole + 3] = &quot;message&quot;;
    return names;
}

void SqlConversationModel::sendMessage(const QString &amp;recipient, const QString &amp;message)
{
    const QString timestamp = QDateTime::currentDateTime().toString(Qt::ISODate);

    QSqlRecord newRecord = record();
    newRecord.setValue(&quot;author&quot;, &quot;Me&quot;);
    newRecord.setValue(&quot;recipient&quot;, recipient);
    newRecord.setValue(&quot;timestamp&quot;, timestamp);
    newRecord.setValue(&quot;message&quot;, message);
    if (!insertRecord(rowCount(), newRecord)) {
        qWarning() &lt;&lt; &quot;Failed to send message:&quot; &lt;&lt; lastError().text();
        return;
    }

    submitAll();
}

</db:programlisting>
</db:article>
