<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickRenderTarget Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> class provides an opaque container for native graphics resources specifying a render target, and associated metadata.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickRenderTarget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickRenderTarget">
<db:title>QQuickRenderTarget::QQuickRenderTarget()</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickRenderTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a default <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> that does not reference any native objects.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickRenderTarget">
<db:title>QQuickRenderTarget::~QQuickRenderTarget()</db:title>
<db:destructorsynopsis>
<db:methodname>~QQuickRenderTarget</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickRenderTarget()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>[since 6.3] qreal QQuickRenderTarget::devicePixelRatio() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>devicePixelRatio</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal devicePixelRatio() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device pixel ratio for the render target. This is the ratio between <db:emphasis>device pixels</db:emphasis> and <db:emphasis>device independent pixels</db:emphasis>.</db:para>
<db:para>The default device pixel ratio is 1.0.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#setDevicePixelRatio">setDevicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D11Texture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromD3D11Texture(void *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromD3D11Texture</db:methodname>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromD3D11Texture(void *texture, uint format, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D11 texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the DXGI_FORMAT of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D11Texture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromD3D11Texture(void *<db:emphasis>texture</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromD3D11Texture</db:methodname>
<db:methodparam>
<db:type>void *</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromD3D11Texture(void *texture, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D11 texture object specified by <db:code role="parameter">texture</db:code>. The texture is assumed to have a format of DXGI_FORMAT_R8G8B8A8_UNORM.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMetalTexture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromMetalTexture(MTLTexture *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromMetalTexture</db:methodname>
<db:methodparam>
<db:type>MTLTexture *</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromMetalTexture(MTLTexture *texture, uint format, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Metal texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the MTLPixelFormat of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMetalTexture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromMetalTexture(MTLTexture *<db:emphasis>texture</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromMetalTexture</db:methodname>
<db:methodparam>
<db:type>MTLTexture *</db:type>
<db:parameter>texture</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromMetalTexture(MTLTexture *texture, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Metal texture object specified by <db:code role="parameter">texture</db:code>. The texture is assumed to have a format of MTLPixelFormatRGBA8Unorm.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLRenderBuffer">
<db:title>[static, since 6.2] QQuickRenderTarget QQuickRenderTarget::fromOpenGLRenderBuffer(uint <db:emphasis>renderbufferId</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromOpenGLRenderBuffer</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>renderbufferId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromOpenGLRenderBuffer(uint renderbufferId, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL renderbuffer object specified by <db:code role="parameter">renderbufferId</db:code>.</db:para>
<db:para>The renderbuffer will be used as the color attachment for the internal framebuffer object. This function is provided to allow targeting renderbuffers that are created by the application with some external buffer underneath, such as an EGLImageKHR. Once the application has called <db:link xlink:href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image.txt">glEGLImageTargetRenderbufferStorageOES</db:link>, the renderbuffer can be passed to this function.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample renderbuffer.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLTexture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromOpenGLTexture(uint <db:emphasis>textureId</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromOpenGLTexture</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>textureId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromOpenGLTexture(uint textureId, uint format, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL texture object specified by <db:code role="parameter">textureId</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the native internal format of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:para>The OpenGL object name <db:code role="parameter">textureId</db:code> must be a valid name in the rendering context used by the Qt Quick scenegraph.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLTexture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromOpenGLTexture(uint <db:emphasis>textureId</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromOpenGLTexture</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>textureId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromOpenGLTexture(uint textureId, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL texture object specified by <db:code role="parameter">textureId</db:code>. The texture is assumed to have a format of GL_RGBA (GL_RGBA8).</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:para>The OpenGL object name <db:code role="parameter">textureId</db:code> must be a valid name in the rendering context used by the Qt Quick scenegraph.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromPaintDevice">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromPaintDevice(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromPaintDevice</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromPaintDevice(QPaintDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a paint device object specified by <db:code role="parameter">device</db:code>.</db:para>
<db:para>This option of redirecting rendering to a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> is available only when running with the <db:code>software</db:code> backend of Qt Quick.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not take ownship of <db:code role="parameter">device</db:code>, it is the caller's responsibility to ensure the object exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVulkanImage">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromVulkanImage(VkImage <db:emphasis>image</db:emphasis>, VkImageLayout <db:emphasis>layout</db:emphasis>, VkFormat <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromVulkanImage</db:methodname>
<db:methodparam>
<db:type>VkImage</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>VkImageLayout</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>VkFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromVulkanImage(VkImage image, VkImageLayout layout, VkFormat format, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Vulkan image object specified by <db:code role="parameter">image</db:code>. The current <db:code role="parameter">layout</db:code> of the image must be provided as well.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the VkFormat of the image. Only image formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The image is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVulkanImage-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromVulkanImage(VkImage <db:emphasis>image</db:emphasis>, VkImageLayout <db:emphasis>layout</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickRenderTarget</db:type>
<db:methodname>fromVulkanImage</db:methodname>
<db:methodparam>
<db:type>VkImage</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>VkImageLayout</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSize &amp;</db:type>
<db:parameter>pixelSize</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>sampleCount</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickRenderTarget fromVulkanImage(VkImage image, VkImageLayout layout, const QSize &amp;pixelSize, int sampleCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing n Vulkan image object specified by <db:code role="parameter">image</db:code>. The image is assumed to have a format of VK_FORMAT_R8G8B8A8_UNORM.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specific the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQuickRenderTarget::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> is default constructed, referencing no native objects.</db:para>
</db:section>
<db:section xml:id="mirrorVertically">
<db:title>[since 6.4] bool QQuickRenderTarget::mirrorVertically() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>mirrorVertically</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool mirrorVertically() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns Returns whether the render target is mirrored vertically.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#setMirrorVertically">setMirrorVertically</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevicePixelRatio">
<db:title>[since 6.3] void QQuickRenderTarget::setDevicePixelRatio(qreal <db:emphasis>ratio</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDevicePixelRatio</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>ratio</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDevicePixelRatio(qreal ratio)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the device pixel ratio for this render target to <db:code role="parameter">ratio</db:code>. This is the ratio between <db:emphasis>device pixels</db:emphasis> and <db:emphasis>device independent pixels</db:emphasis>.</db:para>
<db:para>Note that the specified device pixel ratio value will be ignored if <db:link xlink:href="qquickrendercontrol.xml#renderWindow">QQuickRenderControl::renderWindow</db:link>() is re-implemented to return a valid <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#devicePixelRatio">devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMirrorVertically">
<db:title>[since 6.4] void QQuickRenderTarget::setMirrorVertically(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMirrorVertically</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMirrorVertically(bool enable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of the render target contents should be mirrored vertically to <db:code role="parameter">enable</db:code> when drawing. This allows easy integration of third-party rendering code that does not follow the standard expectations.</db:para>
<db:note>
<db:para>This function should not be used when using the <db:code>software</db:code> backend.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#mirrorVertically">mirrorVertically</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QQuickRenderTarget &amp;<db:emphasis>a</db:emphasis>, const QQuickRenderTarget &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QQuickRenderTarget &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuickRenderTarget &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QQuickRenderTarget &amp;a, const QQuickRenderTarget &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> refer to a different set of native objects, or the associated data (size, sample count) does not match.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QQuickRenderTarget &amp;<db:emphasis>a</db:emphasis>, const QQuickRenderTarget &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QQuickRenderTarget &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QQuickRenderTarget &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QQuickRenderTarget &amp;a, const QQuickRenderTarget &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> refer to the same set of native objects and have matching associated data (size, sample count).</db:para>
</db:section>
</db:section>
</db:article>
