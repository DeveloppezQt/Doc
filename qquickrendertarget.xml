<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickRenderTarget Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> class provides an opaque container for native graphics resources specifying a render target, and associated metadata.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickRenderTarget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickgraphicsdevice.xml">QQuickGraphicsDevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>[since 6.8] enum QQuickRenderTarget::Flag</db:title>
<db:bridgehead renderas="sect2">flags QQuickRenderTarget::Flags</db:bridgehead>
<db:para>Flags for the static <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> constructor functions.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link></db:emphasis>::<db:emphasis role="bold">Flag</db:emphasis>::MultisampleResolve</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>Indicates that the <db:code>sampleCount</db:code> argument is not the number of samples for the provided texture (and that the texture is still a non-multisample texture), but rather the desired samples for multisample antialiasing. Triggers automatically creating and managing an intermediate multisample texture (or texture array) as the color buffer, transparently to the application. The samples are resolved into the provided texture at the end of the render pass automatically. When this flag is not set, and the <db:code>sampleCount</db:code> argument is greater than 1, it implies the provided texture is multisample. The flag has no effect is the <db:code>sampleCount</db:code> is 1 (indicating that multisampling is not involved).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.8.</db:para>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickRenderTarget">
<db:title>QQuickRenderTarget::QQuickRenderTarget()</db:title>
<db:para>Constructs a default <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> that does not reference any native objects.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickRenderTarget">
<db:title>[noexcept] QQuickRenderTarget::~QQuickRenderTarget()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="depthTexture">
<db:title>[since 6.8] QRhiTexture *QQuickRenderTarget::depthTexture() const</db:title>
<db:para>Returns the currently set depth texture or, in most cases, <db:code>nullptr</db:code>.</db:para>
<db:para>The value is only non-null when <db:link xlink:href="qquickrendertarget.xml#setDepthTexture">setDepthTexture</db:link>() was called.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#setDepthTexture">setDepthTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>[since 6.3] qreal QQuickRenderTarget::devicePixelRatio() const</db:title>
<db:para>Returns the device pixel ratio for the render target. This is the ratio between <db:emphasis>device pixels</db:emphasis> and <db:emphasis>device independent pixels</db:emphasis>.</db:para>
<db:para>The default device pixel ratio is 1.0.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#setDevicePixelRatio">setDevicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D11Texture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromD3D11Texture(void *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D11 texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the DXGI_FORMAT of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D11Texture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromD3D11Texture(void *<db:emphasis>texture</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D11 texture object specified by <db:code role="parameter">texture</db:code>. The texture is assumed to have a format of DXGI_FORMAT_R8G8B8A8_UNORM.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D11Texture-2">
<db:title>[static, since 6.8] QQuickRenderTarget QQuickRenderTarget::fromD3D11Texture(void *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, QSize <db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis>, QQuickRenderTarget::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D11 texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the DXGI_FORMAT of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture, except when <db:code role="parameter">flags</db:code> contains <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link>. In that case, <db:code role="parameter">texture</db:code> is assumed to be a non-multisample 2D texture and <db:code role="parameter">sampleCount</db:code> defines the number of samples desired. The resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> will use an intermediate, automatically created multisample texture as its color attachment, and will resolve the samples into <db:code role="parameter">texture</db:code>. This is the recommended approach to perform MSAA when the native texture is not already multisample.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically. When the color buffer is multisample, the depth-stencil buffer will automatically be multisample too.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml#fromD3D11Texture">fromD3D11Texture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D12Texture">
<db:title>[static, since 6.6] QQuickRenderTarget QQuickRenderTarget::fromD3D12Texture(void *<db:emphasis>texture</db:emphasis>, int <db:emphasis>resourceState</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D12 texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">resourceState</db:code> must a valid bitmask with bits from D3D12_RESOURCE_STATES, specifying the resource's current state.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the DXGI_FORMAT of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromD3D12Texture-1">
<db:title>[static, since 6.8] QQuickRenderTarget QQuickRenderTarget::fromD3D12Texture(void *<db:emphasis>texture</db:emphasis>, int <db:emphasis>resourceState</db:emphasis>, uint <db:emphasis>format</db:emphasis>, uint <db:emphasis>viewFormat</db:emphasis>, QSize <db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis>, int <db:emphasis>arraySize</db:emphasis>, QQuickRenderTarget::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a D3D12 2D texture or 2D texture array object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">resourceState</db:code> must a valid bitmask with bits from D3D12_RESOURCE_STATES, specifying the resource's current state.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the DXGI_FORMAT of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">viewFormat</db:code> is the DXGI_FORMAT used for the render target view (RTV). Often the same as <db:code role="parameter">format</db:code>. Functional only when <db:link xlink:href="https://microsoft.github.io/DirectX-Specs/d3d/RelaxedCasting.html">relaxed format casting</db:link> is supported by the driver, the argument is ignored otherwise. In practice support is expected to be always available on Windows 10 1703 and newer.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures and 2D texture arrays are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture, except when <db:code role="parameter">flags</db:code> contains <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link>. In that case, <db:code role="parameter">texture</db:code> is assumed to be a non-multisample 2D texture or 2D texture array, and <db:code role="parameter">sampleCount</db:code> defines the number of samples desired. The resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> will use an intermediate, automatically created multisample texture (or texture array) as its color attachment, and will resolve the samples into <db:code role="parameter">texture</db:code>. This is the recommended approach to perform MSAA when the native D3D12 texture is not already multisample.</db:para>
<db:para>The number of array elements (layers) is given in <db:code role="parameter">arraySize</db:code>. When greater than 1, it implies multiview rendering (<db:link xlink:href="https://microsoft.github.io/DirectX-Specs/d3d/ViewInstancing.html">view instancing</db:link>), which can be relevant with VR/AR especially. <db:code role="parameter">arraySize</db:code> is the number of views, typically <db:code>2</db:code>. See <db:link xlink:href="qsgmaterial.xml#viewCount">QSGMaterial::viewCount</db:link>() for details on enabling multiview rendering within the Qt Quick scenegraph.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically. When the color buffer is multisample, the depth-stencil buffer will automatically be multisample too. For multiview rendering, the depth-stencil texture will automatically be made an array with a matching <db:code role="parameter">arraySize</db:code>.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMetalTexture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromMetalTexture(MTLTexture *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Metal texture object specified by <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the MTLPixelFormat of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMetalTexture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromMetalTexture(MTLTexture *<db:emphasis>texture</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Metal texture object specified by <db:code role="parameter">texture</db:code>. The texture is assumed to have a format of MTLPixelFormatRGBA8Unorm.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMetalTexture-2">
<db:title>[static, since 6.8] QQuickRenderTarget QQuickRenderTarget::fromMetalTexture(MTLTexture *<db:emphasis>texture</db:emphasis>, uint <db:emphasis>format</db:emphasis>, uint <db:emphasis>viewFormat</db:emphasis>, QSize <db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis>, int <db:emphasis>arraySize</db:emphasis>, QQuickRenderTarget::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Metal 2D texture or 2D texture array given in <db:code role="parameter">texture</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the MTLPixelFormat of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">viewFormat</db:code> is usually set to the same value as <db:code role="parameter">format</db:code>. In some cases, such as when rendering into a texture with a <db:code>_SRGB</db:code> format and the implicit linear-&gt;sRGB conversion on shader writes is not wanted, the value can be different. Note however that the value may be ignored by Qt, when at run time <db:link xlink:href="qrhi.xml">QRhi</db:link> reports that the <db:link xlink:href="qrhi.xml#Feature-enum">QRhi::TextureViewFormat</db:link> feature is unsupported.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures and 2D texture arrays are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture, except when <db:code role="parameter">flags</db:code> contains <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link>. In that case, <db:code role="parameter">texture</db:code> is assumed to be a non-multisample 2D texture or 2D texture array, and <db:code role="parameter">sampleCount</db:code> defines the number of samples desired. The resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> will use an intermediate, automatically created multisample texture (or texture array) as its color attachment, and will resolve the samples into <db:code role="parameter">texture</db:code>. This is the recommended approach to perform MSAA when the native Metal texture is not already multisample.</db:para>
<db:para>The number of array elements (layers) is given in <db:code role="parameter">arraySize</db:code>. When greater than 1, it implies multiview rendering, which can be relevant with VR/AR especially. <db:code role="parameter">arraySize</db:code> is the number of views, typically <db:code>2</db:code>. See <db:link xlink:href="qsgmaterial.xml#viewCount">QSGMaterial::viewCount</db:link>() for details on enabling multiview rendering within the Qt Quick scenegraph.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically. When the color buffer is multisample, the depth-stencil buffer will automatically be multisample too. For multiview rendering, the depth-stencil texture will automatically be made an array with a matching <db:code role="parameter">arraySize</db:code>.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLRenderBuffer">
<db:title>[static, since 6.2] QQuickRenderTarget QQuickRenderTarget::fromOpenGLRenderBuffer(uint <db:emphasis>renderbufferId</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL renderbuffer object specified by <db:code role="parameter">renderbufferId</db:code>.</db:para>
<db:para>The renderbuffer will be used as the color attachment for the internal framebuffer object. This function is provided to allow targeting renderbuffers that are created by the application with some external buffer underneath, such as an EGLImageKHR. Once the application has called <db:link xlink:href="https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image.txt">glEGLImageTargetRenderbufferStorageOES</db:link>, the renderbuffer can be passed to this function.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample renderbuffer.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLTexture">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromOpenGLTexture(uint <db:emphasis>textureId</db:emphasis>, uint <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL texture object specified by <db:code role="parameter">textureId</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the native internal format of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:para>The OpenGL object name <db:code role="parameter">textureId</db:code> must be a valid name in the rendering context used by the Qt Quick scenegraph.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLTexture-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromOpenGLTexture(uint <db:emphasis>textureId</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL texture object specified by <db:code role="parameter">textureId</db:code>. The texture is assumed to have a format of GL_RGBA (GL_RGBA8).</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:para>The OpenGL object name <db:code role="parameter">textureId</db:code> must be a valid name in the rendering context used by the Qt Quick scenegraph.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromOpenGLTexture-2">
<db:title>[static, since 6.8] QQuickRenderTarget QQuickRenderTarget::fromOpenGLTexture(uint <db:emphasis>textureId</db:emphasis>, uint <db:emphasis>format</db:emphasis>, QSize <db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis>, int <db:emphasis>arraySize</db:emphasis>, QQuickRenderTarget::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an OpenGL 2D texture or texture array object specified by <db:code role="parameter">textureId</db:code>.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the native internal format of the texture. Only texture formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures and 2D texture arrays are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture, except when <db:code role="parameter">flags</db:code> contains <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link>. In that case, <db:code role="parameter">textureId</db:code> is assumed to be a non-multisample 2D texture or 2D texture array, and <db:code role="parameter">sampleCount</db:code> defines the number of samples desired. The resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> will use an intermediate, automatically created multisample texture (or texture array) as its color attachment, and will resolve the samples into <db:code role="parameter">textureId</db:code>. This is the recommended approach to perform MSAA when the native OpenGL texture is not already multisample.</db:para>
<db:para>When <db:code role="parameter">arraySize</db:code> is greater than 1, it implies multiview rendering (<db:link xlink:href="https://registry.khronos.org/OpenGL/extensions/OVR/OVR_multiview.txt">GL_OVR_multiview</db:link>, <db:link xlink:href="">QRhiColorAttachment::setMultiViewCount()</db:link>), which can be relevant with VR/AR especially. In this case <db:code role="parameter">arraySize</db:code> is the number of views, typically <db:code>2</db:code>. See <db:link xlink:href="qsgmaterial.xml#viewCount">QSGMaterial::viewCount</db:link>() for details on enabling multiview rendering within the Qt Quick scenegraph.</db:para>
<db:para>A depth-stencil buffer, if applicable, is created and used automatically. When the color buffer is multisample, the depth-stencil buffer will automatically be multisample too. For multiview rendering, the depth-stencil texture will automatically be made an array with a matching <db:code role="parameter">arraySize</db:code>.</db:para>
<db:para>The OpenGL object name <db:code role="parameter">textureId</db:code> must be a valid 2D texture name in the rendering context used by the Qt Quick scenegraph. When <db:code role="parameter">arraySize</db:code> is greater than 1, <db:code role="parameter">textureId</db:code> must be a valid 2D texture array name.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:note>
<db:para>The implementation of this overload is not compatible with OpenGL ES 2.0 or 3.0, and requires OpenGL ES 3.1 at minimum. (or OpenGL 3.0 on desktop)</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
<db:member><db:link xlink:href="qquickrendertarget.xml#fromOpenGLTexture">fromOpenGLTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromPaintDevice">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromPaintDevice(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a paint device object specified by <db:code role="parameter">device</db:code>.</db:para>
<db:para>This option of redirecting rendering to a <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> is available only when running with the <db:code>software</db:code> backend of Qt Quick.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not take ownship of <db:code role="parameter">device</db:code>, it is the caller's responsibility to ensure the object exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRhiRenderTarget">
<db:title>[static, since 6.6] QQuickRenderTarget QQuickRenderTarget::fromRhiRenderTarget(QRhiRenderTarget *<db:emphasis>renderTarget</db:emphasis>)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing an existing <db:code role="parameter">renderTarget</db:code>.</db:para>
<db:para><db:code role="parameter">renderTarget</db:code> will in most cases be a <db:link xlink:href="qrhitexturerendertarget.xml">QRhiTextureRenderTarget</db:link>, which allows directing the Qt Quick scene's rendering into a <db:link xlink:href="qrhitexture.xml">QRhiTexture</db:link>.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own <db:code role="parameter">renderTarget</db:code> and any underlying native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the referenced resources exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVulkanImage">
<db:title>[static, since 6.4] QQuickRenderTarget QQuickRenderTarget::fromVulkanImage(VkImage <db:emphasis>image</db:emphasis>, VkImageLayout <db:emphasis>layout</db:emphasis>, VkFormat <db:emphasis>format</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Vulkan image object specified by <db:code role="parameter">image</db:code>. The current <db:code role="parameter">layout</db:code> of the image must be provided as well.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the VkFormat of the image. Only image formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The image is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVulkanImage-1">
<db:title>[static] QQuickRenderTarget QQuickRenderTarget::fromVulkanImage(VkImage <db:emphasis>image</db:emphasis>, VkImageLayout <db:emphasis>layout</db:emphasis>, const QSize &amp;<db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis> = 1)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Vulkan image object specified by <db:code role="parameter">image</db:code>. The image is assumed to have a format of VK_FORMAT_R8G8B8A8_UNORM.</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromVulkanImage-2">
<db:title>[static, since 6.8] QQuickRenderTarget QQuickRenderTarget::fromVulkanImage(VkImage <db:emphasis>image</db:emphasis>, VkImageLayout <db:emphasis>layout</db:emphasis>, VkFormat <db:emphasis>format</db:emphasis>, VkFormat <db:emphasis>viewFormat</db:emphasis>, QSize <db:emphasis>pixelSize</db:emphasis>, int <db:emphasis>sampleCount</db:emphasis>, int <db:emphasis>arraySize</db:emphasis>, QQuickRenderTarget::Flags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a new <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> referencing a Vulkan image object specified by <db:code role="parameter">image</db:code>. The current <db:code role="parameter">layout</db:code> of the image must be provided as well. The image must be either a 2D texture or 2D texture array.</db:para>
<db:para><db:code role="parameter">format</db:code> specifies the VkFormat of the image. Only image formats that are supported by Qt's rendering infrastructure should be used.</db:para>
<db:para><db:code role="parameter">viewFormat</db:code> is usually set to the same value as <db:code role="parameter">format</db:code>. In some cases, such as when rendering into a texture with a <db:code>_SRGB</db:code> format and the implicit linear-&gt;sRGB conversion on shader writes is not wanted, the value can be different. (for example, a <db:code role="parameter">format</db:code> of <db:code>VK_FORMAT_R8G8B8A8_SRGB</db:code> and <db:code role="parameter">viewFormat</db:code> of <db:code>VK_FORMAT_R8G8B8A8_UNORM</db:code>).</db:para>
<db:para><db:code role="parameter">pixelSize</db:code> specifies the size of the image, in pixels. Currently only 2D textures are supported.</db:para>
<db:para><db:code role="parameter">sampleCount</db:code> specifies the number of samples. 0 or 1 means no multisampling, while a value like 4 or 8 states that the native object is a multisample texture, except when <db:code role="parameter">flags</db:code> contains <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link>. In that case, <db:code role="parameter">image</db:code> is assumed to be a non-multisample 2D texture or 2D texture array, and <db:code role="parameter">sampleCount</db:code> defines the number of samples desired. The resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> will use an intermediate, automatically created multisample texture (or texture array) as its color attachment, and will resolve the samples into <db:code role="parameter">image</db:code>. This is the recommended approach to perform MSAA when the native Vulkan image is not already multisample.</db:para>
<db:para>The number of array elements (layers) is given in <db:code role="parameter">arraySize</db:code>. When greater than 1, it implies multiview rendering (<db:link xlink:href="https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_multiview.html">VK_KHR_multiview</db:link>), which can be relevant with VR/AR especially. <db:code role="parameter">arraySize</db:code> is the number of views, typically <db:code>2</db:code>. See <db:link xlink:href="qsgmaterial.xml#viewCount">QSGMaterial::viewCount</db:link>() for details on enabling multiview rendering within the Qt Quick scenegraph.</db:para>
<db:para>The texture is used as the first color attachment of the render target used by the Qt Quick scenegraph. A depth-stencil buffer, if applicable, is created and used automatically. When the color buffer is multisample, the depth-stencil buffer will automatically be multisample too. For multiview rendering, the depth-stencil texture will automatically be made an array with a matching <db:code role="parameter">arraySize</db:code>.</db:para>
<db:note>
<db:para>the resulting <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> does not own any native resources, it merely contains references and the associated metadata of the size and sample count. It is the caller's responsibility to ensure that the native resource exists as long as necessary.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>()</db:member>
<db:member><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QQuickRenderTarget::isNull() const</db:title>
<db:para>Returns true if this <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link> is default constructed, referencing no native objects.</db:para>
</db:section>
<db:section xml:id="mirrorVertically">
<db:title>[since 6.4] bool QQuickRenderTarget::mirrorVertically() const</db:title>
<db:para>Returns Returns whether the render target is mirrored vertically.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#setMirrorVertically">setMirrorVertically</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepthTexture">
<db:title>[since 6.8] void QQuickRenderTarget::setDepthTexture(QRhiTexture *<db:emphasis>texture</db:emphasis>)</db:title>
<db:para>Requests using the given <db:code role="parameter">texture</db:code> as the depth or depth-stencil buffer. Ownership of <db:code role="parameter">texture</db:code> is not taken.</db:para>
<db:para>The request is only taken into account when relevant. For example, calling this function has no effect with <db:link xlink:href="qquickrendertarget.xml#fromRhiRenderTarget">fromRhiRenderTarget</db:link>(), <db:link xlink:href="qquickrendertarget.xml#fromPaintDevice">fromPaintDevice</db:link>(), or <db:link xlink:href="qquickrendertarget.xml#fromOpenGLRenderBuffer">fromOpenGLRenderBuffer</db:link>().</db:para>
<db:para>Normally a depth-stencil buffer is created automatically, transparently to the user of <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link>. Therefore, there is no need to call this function in most cases when working with <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link>. In special circumstances, it can however become essential to be able to provide a texture to render depth (or depth and stencil) data into, instead of letting Qt Quick create its own intermediate textures or buffers. An example of this is <db:link xlink:href="https://www.khronos.org/openxr/">OpenXR</db:link> and its extensions such as <db:link xlink:href="https://registry.khronos.org/OpenXR/specs/1.0/html/xrspec.html#XR_KHR_composition_layer_depth">XR_KHR_composition_layer_depth</db:link>. In order to &quot;submit the depth buffer&quot; to the XR compositor, one has to, in practice, retrieve an already created depth (depth-stencil) texture from OpenXR (from the XrSwapchain) and use that texture as the render target for depth data. That would not be possible without this function.</db:para>
<db:note>
<db:para>The <db:code role="parameter">texture</db:code> is always expected to be a non-multisample 2D texture or texture array (for multiview). If MSAA is involved, the samples are resolved into <db:code role="parameter">texture</db:code> at the end of the render pass, regardless of having the <db:link xlink:href="qquickrendertarget.xml#Flag-enum">MultisampleResolve</db:link> flag set or not. MSAA is only supported for depth (depth-stencil) textures when the underlying 3D API supports this, and this support is not universally available. See <db:link xlink:href="qrhi.xml#Feature-enum">the relevant QRhi feature flag</db:link> for details. When this is not supported and multisampling is requested in combination with a custom depth texture, <db:code role="parameter">texture</db:code> is not going to be touched during rendering and a warning is printed.</db:para>
</db:note>
<db:note>
<db:para>When it comes to OpenGL and OpenGL ES, using depth textures is not functional on OpenGL ES 2.0 and requires at least OpenGL ES 3.0. Multisample (MSAA) support is not available without at least OpenGL ES 3.1, or OpenGL 3.0 on desktop.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#depthTexture">depthTexture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDevicePixelRatio">
<db:title>[since 6.3] void QQuickRenderTarget::setDevicePixelRatio(qreal <db:emphasis>ratio</db:emphasis>)</db:title>
<db:para>Sets the device pixel ratio for this render target to <db:code role="parameter">ratio</db:code>. This is the ratio between <db:emphasis>device pixels</db:emphasis> and <db:emphasis>device independent pixels</db:emphasis>.</db:para>
<db:para>Note that the specified device pixel ratio value will be ignored if <db:link xlink:href="qquickrendercontrol.xml#renderWindow">QQuickRenderControl::renderWindow</db:link>() is re-implemented to return a valid <db:link xlink:href="qwindow.xml">QWindow</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#devicePixelRatio">devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMirrorVertically">
<db:title>[since 6.4] void QQuickRenderTarget::setMirrorVertically(bool <db:emphasis>enable</db:emphasis>)</db:title>
<db:para>Sets the size of the render target contents should be mirrored vertically to <db:code role="parameter">enable</db:code> when drawing. This allows easy integration of third-party rendering code that does not follow the standard expectations.</db:para>
<db:note>
<db:para>This function should not be used when using the <db:code>software</db:code> backend.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickrendertarget.xml#mirrorVertically">mirrorVertically</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QQuickRenderTarget &amp;<db:emphasis>a</db:emphasis>, const QQuickRenderTarget &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> refer to a different set of native objects, or the associated data (size, sample count) does not match.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QQuickRenderTarget &amp;<db:emphasis>a</db:emphasis>, const QQuickRenderTarget &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">a</db:code> and <db:code role="parameter">b</db:code> refer to the same set of native objects and have matching associated data (size, sample count).</db:para>
</db:section>
</db:section>
</db:article>
