<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoAreaMonitorSource Class</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> class enables the detection of proximity changes for a specified set of coordinates.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoAreaMonitorSource</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += positioning</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoAreaMonitorSource is part of <db:simplelist><db:member>QtPositioning-positioning</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> emits signals when the current position is in range, or has moved out of range, of a specified area. Each area is specified by a <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> object. For example:</db:para>
<db:programlisting language="cpp">public:
    MyClass() : QObject()
    {
        QGeoAreaMonitorSource *monitor = QGeoAreaMonitorSource::createDefaultSource(this);
        if (monitor) {
            connect(monitor, SIGNAL(areaEntered(QGeoAreaMonitorInfo,QGeoPositionInfo)),
                    this, SLOT(areaEntered(QGeoAreaMonitorInfo,QGeoPositionInfo)));
            connect(monitor, SIGNAL(areaExited(QGeoAreaMonitorInfo,QGeoPositionInfo)),
                    this, SLOT(areaExited(QGeoAreaMonitorInfo,QGeoPositionInfo)));

            QGeoAreaMonitorInfo bigBen(&quot;Big Ben&quot;);
            QGeoCoordinate position(51.50104, -0.124632);
            bigBen.setArea(QGeoCircle(position, 100));

            monitor-&gt;startMonitoring(bigBen);

        } else {
            qDebug() &lt;&lt; &quot;Could not create default area monitor&quot;;
        }
    }

public Q_SLOTS:
    void areaEntered(const QGeoAreaMonitorInfo &amp;mon, const QGeoPositionInfo &amp;update)
    {
        Q_UNUSED(mon)

        qDebug() &lt;&lt; &quot;Now within 100 meters, current position is&quot; &lt;&lt; update.coordinate();
    }

    void areaExited(const QGeoAreaMonitorInfo &amp;mon, const QGeoPositionInfo &amp;update)
    {
        Q_UNUSED(mon)

        qDebug() &lt;&lt; &quot;No longer within 100 meters, current position is&quot; &lt;&lt; update.coordinate();
    }
</db:programlisting>
<db:para><db:code>QGeoAreaMonitorSource</db:code> follows a singleton pattern. Each instance of the class with the same <db:link xlink:href="qgeoareamonitorsource.xml#sourceName">sourceName</db:link>() shares the same area monitoring backend. If a new <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> object is added via <db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>() or <db:link xlink:href="qgeoareamonitorsource.xml#requestUpdate">requestUpdate</db:link>() it can be retrieved by another instance of this class (provided that they are sourced from the same area monitor provider plug-in). The same singleton pattern applies to the <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> instance used by this class. The following code snippet emphasizes the behavior:</db:para>
<db:programlisting language="cpp">QGeoAreaMonitorSource *s1 = QGeoAreaMonitorSource::createSource(&quot;blah&quot;, this);
QGeoAreaMonitorSource *s2 = QGeoAreaMonitorSource::createSource(&quot;blah&quot;, this);
QVERIFY(s1-&gt;positionInfoSource() == s2-&gt;positionInfoSource);
</db:programlisting>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="AreaMonitorFeature-enum">
<db:title>enum QGeoAreaMonitorSource::AreaMonitorFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoAreaMonitorSource::AreaMonitorFeatures</db:bridgehead>
<db:para>Defines the types of area monitoring capabilities.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::PersistentAreaMonitorFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> instances can be made persistent. A persistent monitor continues to be active even when the application managing the monitor is not running.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::AnyAreaMonitorFeature</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>Matches all possible area monitoring features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>AreaMonitorFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;AreaMonitorFeature&gt;. </db:code>It stores an OR combination of <db:code>AreaMonitorFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="Error-enum">
<db:title>enum QGeoAreaMonitorSource::Error</db:title>
<db:para>Defines the types of positioning methods.</db:para>
<db:para>The Error enumeration represents the errors which can occur.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::AccessError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The connection setup to the remote area monitoring backend failed because the application lacked the required privileges.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::InsufficientPositionInfo</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The area monitoring source could not retrieve a location fix or the accuracy of the fix is not high enough to provide an effective area monitoring.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link></db:emphasis>::UnknownSourceError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoAreaMonitorSource">
<db:title>[explicit] QGeoAreaMonitorSource::QGeoAreaMonitorSource(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates a monitor with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoAreaMonitorSource">
<db:title>[virtual noexcept] QGeoAreaMonitorSource::~QGeoAreaMonitorSource()</db:title>
<db:para>Destroys the monitor.</db:para>
</db:section>
<db:section xml:id="activeMonitors">
<db:title>[pure virtual] QList&lt;QGeoAreaMonitorInfo&gt; QGeoAreaMonitorSource::activeMonitors() const</db:title>
<db:para>Returns the list of all active monitors known to the <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> object.</db:para>
<db:para>An active monitor was started via <db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>() the source object will emit the required signals such as <db:link xlink:href="qgeoareamonitorsource.xml#areaEntered">areaEntered</db:link>() or <db:link xlink:href="qgeoareamonitorsource.xml#areaExited">areaExited</db:link>(). Multiple <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instances within the same application share the same active monitor objects.</db:para>
<db:para>Unless an active <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> <db:link xlink:href="qgeoareamonitorinfo.xml#isPersistent">isPersistent</db:link>() an active <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> will be stopped once the current application terminates.</db:para>
</db:section>
<db:section xml:id="activeMonitors-1">
<db:title>[pure virtual] QList&lt;QGeoAreaMonitorInfo&gt; QGeoAreaMonitorSource::activeMonitors(const QGeoShape &amp;<db:emphasis>lookupArea</db:emphasis>) const</db:title>
<db:para>Returns the list of all active monitors known to the <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> object whose center lies within <db:code role="parameter">lookupArea</db:code>. If <db:code role="parameter">lookupArea</db:code> is empty the returned list will be empty.</db:para>
<db:para>An active monitor was started via <db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>() and the source object will emit the required signals such as <db:link xlink:href="qgeoareamonitorsource.xml#areaEntered">areaEntered</db:link>() or <db:link xlink:href="qgeoareamonitorsource.xml#areaExited">areaExited</db:link>(). Multiple <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instances within the same application share the same monitor objects.</db:para>
<db:para>Unless an active <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> <db:link xlink:href="qgeoareamonitorinfo.xml#isPersistent">isPersistent</db:link>() an active <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> will be stopped once the current application terminates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoshape.xml">QGeoShape</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="areaEntered">
<db:title>void QGeoAreaMonitorSource::areaEntered(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>, const QGeoPositionInfo &amp;<db:emphasis>update</db:emphasis>)</db:title>
<db:para>Emitted when the current position has moved from a position outside of the active <db:code role="parameter">monitor</db:code> to a position within the monitored area.</db:para>
<db:para>The <db:code role="parameter">update</db:code> holds the new position.</db:para>
</db:section>
<db:section xml:id="areaExited">
<db:title>void QGeoAreaMonitorSource::areaExited(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>, const QGeoPositionInfo &amp;<db:emphasis>update</db:emphasis>)</db:title>
<db:para>Emitted when the current position has moved from a position within the active <db:code role="parameter">monitor</db:code> to a position outside the monitored area.</db:para>
<db:para>The <db:code role="parameter">update</db:code> holds the new position.</db:para>
</db:section>
<db:section xml:id="availableSources">
<db:title>[static] QStringList QGeoAreaMonitorSource::availableSources()</db:title>
<db:para>Returns a list of available monitor plugins, including the default system backend if one is available.</db:para>
</db:section>
<db:section xml:id="createDefaultSource">
<db:title>[static] QGeoAreaMonitorSource *QGeoAreaMonitorSource::createDefaultSource(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates and returns a monitor with the given <db:code role="parameter">parent</db:code> that monitors areas using resources on the underlying system.</db:para>
<db:para>Returns 0 if the system has no support for position monitoring.</db:para>
</db:section>
<db:section xml:id="createSource">
<db:title>[static] QGeoAreaMonitorSource *QGeoAreaMonitorSource::createSource(const QString &amp;<db:emphasis>sourceName</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Creates and returns a monitor with the given <db:code role="parameter">parent</db:code>, by loading the plugin named <db:code role="parameter">sourceName</db:code>.</db:para>
<db:para>Returns 0 if the plugin cannot be found.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[pure virtual] QGeoAreaMonitorSource::Error QGeoAreaMonitorSource::error() const</db:title>
<db:para>Returns the type of error that last occurred.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QGeoAreaMonitorSource::error(QGeoAreaMonitorSource::Error <db:emphasis>areaMonitoringError</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred. The <db:code role="parameter">areaMonitoringError</db:code> parameter describes the type of error that occurred.</db:para>
</db:section>
<db:section xml:id="monitorExpired">
<db:title>void QGeoAreaMonitorSource::monitorExpired(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>)</db:title>
<db:para>Emitted when <db:code role="parameter">monitor</db:code> has expired. An expired area monitor is automatically removed from the list of <db:link xlink:href="qgeoareamonitorsource.xml#activeMonitors">activeMonitors</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#activeMonitors">activeMonitors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionInfoSource">
<db:title>[virtual] QGeoPositionInfoSource *QGeoAreaMonitorSource::positionInfoSource() const</db:title>
<db:para>Returns the current <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> used by this <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> object. The function will return <db:link xlink:href="qgeopositioninfosource.xml#createDefaultSource">QGeoPositionInfoSource::createDefaultSource</db:link>() if no other object has been set.</db:para>
<db:para>The function returns 0 if not even a default <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> exists.</db:para>
<db:para>Any usage of the returned <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> instance should account for the fact that it may reside in a different thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link></db:member>
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#setPositionInfoSource">setPositionInfoSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestUpdate">
<db:title>[pure virtual] bool QGeoAreaMonitorSource::requestUpdate(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>, const char *<db:emphasis>signal</db:emphasis>)</db:title>
<db:para>Enables single shot area monitoring. Area monitoring for <db:code role="parameter">monitor</db:code> will be performed until this <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instance emits <db:code role="parameter">signal</db:code> for the first time. Once the signal was emitted, <db:code role="parameter">monitor</db:code> is automatically removed from the list of <db:link xlink:href="qgeoareamonitorsource.xml#activeMonitors">activeMonitors</db:link>(). If <db:code role="parameter">monitor</db:code> is invalid or has an expiry date that has been passed this function returns false.</db:para>
<db:programlisting language="cpp">QGeoAreaMonitor singleShotMonitor;
QGeoAreaMonitorSource * source = QGeoAreaMonitorSource::createDefaultSource(this);
//...
bool ret = source-&gt;requestUpdate(singleShotMonitor,
                      SIGNAL(areaExited(QGeoAreaMonitor,QGeoPositionInfo)));
</db:programlisting>
<db:para>The above <db:code>singleShotMonitor</db:code> object will cease to send updates once the <db:link xlink:href="qgeoareamonitorsource.xml#areaExited">areaExited</db:link>() signal was emitted for the first time. Until this point in time any other signal may be emitted zero or more times depending on the area context.</db:para>
<db:para>It is not possible to simultanously request updates for more than one signal of the same monitor object. The last call to this function determines the signal upon which the updates cease to continue. At this stage only the <db:link xlink:href="qgeoareamonitorsource.xml#areaEntered">areaEntered</db:link>() and <db:link xlink:href="qgeoareamonitorsource.xml#areaExited">areaExited</db:link>() signals can be used to terminate the monitoring process.</db:para>
<db:para>Requesting persistent monitoring on a <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instance fails if the area monitoring backend doesn't support <db:link xlink:href="qgeoareamonitorsource.xml#AreaMonitorFeature-enum">QGeoAreaMonitorSource::PersistentAreaMonitorFeature</db:link>.</db:para>
<db:para>If <db:code role="parameter">monitor</db:code> was already registered via <db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>() it is converted to a single shot behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>()</db:member>
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#stopMonitoring">stopMonitoring</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPositionInfoSource">
<db:title>[virtual] void QGeoAreaMonitorSource::setPositionInfoSource(QGeoPositionInfoSource *<db:emphasis>newSource</db:emphasis>)</db:title>
<db:para>Sets the new <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> to be used by this <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> object. The area monitoring backend becomes the new <db:link xlink:href="qobject.xml">QObject</db:link> parent for <db:code role="parameter">newSource</db:code>. The previous <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> object will be deleted. All <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instances based on the same <db:link xlink:href="qgeoareamonitorsource.xml#sourceName">sourceName</db:link>() share the same <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> instance.</db:para>
<db:para>This may be useful when it is desirable to manipulate the positioning system used by the area monitoring engine.</db:para>
<db:para>Note that ownership must be taken care of by subclasses of <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link>. Due to the singleton pattern behind this class <db:code role="parameter">newSource</db:code> may be moved to a new thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#positionInfoSource">positionInfoSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceName">
<db:title>QString QGeoAreaMonitorSource::sourceName() const</db:title>
<db:para>Returns the unique name of the area monitor source implementation in use.</db:para>
<db:para>This is the same name that can be passed to <db:link xlink:href="qgeoareamonitorsource.xml#createSource">createSource</db:link>() in order to create a new instance of a particular area monitor source implementation.</db:para>
</db:section>
<db:section xml:id="startMonitoring">
<db:title>[pure virtual] bool QGeoAreaMonitorSource::startMonitoring(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the monitoring of <db:code role="parameter">monitor</db:code> could be successfully started; otherwise returns false. A reason for not being able to start monitoring could be the unavailability of an appropriate default position info source while no alternative <db:link xlink:href="qgeopositioninfosource.xml">QGeoPositionInfoSource</db:link> has been set via <db:link xlink:href="qgeoareamonitorsource.xml#setPositionInfoSource">setPositionInfoSource</db:link>().</db:para>
<db:para>If <db:code role="parameter">monitor</db:code> is already active the existing monitor object will be replaced by the new <db:code role="parameter">monitor</db:code> reference. The identification of <db:link xlink:href="qgeoareamonitorinfo.xml">QGeoAreaMonitorInfo</db:link> instances happens via <db:link xlink:href="qgeoareamonitorinfo.xml#identifier">QGeoAreaMonitorInfo::identifier</db:link>(). Therefore this function can also be used to update active monitors.</db:para>
<db:para>If <db:code role="parameter">monitor</db:code> has an expiry date that has been passed this function returns false. Calling this function for an already via <db:link xlink:href="qgeoareamonitorsource.xml#requestUpdate">requestUpdate</db:link>() registered single shot monitor switches the monitor to a permanent monitoring mode.</db:para>
<db:para>Requesting persistent monitoring on a <db:link xlink:href="qgeoareamonitorsource.xml">QGeoAreaMonitorSource</db:link> instance fails if the area monitoring backend doesn't support <db:link xlink:href="qgeoareamonitorsource.xml#AreaMonitorFeature-enum">QGeoAreaMonitorSource::PersistentAreaMonitorFeature</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoareamonitorsource.xml#stopMonitoring">stopMonitoring</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stopMonitoring">
<db:title>[pure virtual] bool QGeoAreaMonitorSource::stopMonitoring(const QGeoAreaMonitorInfo &amp;<db:emphasis>monitor</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">monitor</db:code> was successfully removed from the list of <db:link xlink:href="qgeoareamonitorsource.xml#activeMonitors">activeMonitors</db:link>(); otherwise returns false. This behavior is independent on whether <db:code role="parameter">monitor</db:code> was registered via <db:link xlink:href="qgeoareamonitorsource.xml#startMonitoring">startMonitoring</db:link>() or <db:link xlink:href="qgeoareamonitorsource.xml#requestUpdate">requestUpdate</db:link>().</db:para>
</db:section>
<db:section xml:id="supportedAreaMonitorFeatures">
<db:title>[pure virtual] QGeoAreaMonitorSource::AreaMonitorFeatures QGeoAreaMonitorSource::supportedAreaMonitorFeatures() const</db:title>
<db:para>Returns the area monitoring features available to this source.</db:para>
</db:section>
</db:section>
</db:article>
