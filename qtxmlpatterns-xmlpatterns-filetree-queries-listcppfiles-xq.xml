<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>File System Example</db:title>
<db:productname>QtXmlPatterns</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt XML Patterns Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using Qt XML Patterns for querying non-XML data that is modeled to look like XML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">declare variable $where as xs:string := string($fileTree/@filePath);
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;All cpp files in: {$where}&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;
      cpp-files found in {$where} sorted by size:
    &amp;lt;/p&amp;gt;
    &amp;lt;ul&amp;gt; {
      for $file in $fileTree//file[@suffix = &quot;cpp&quot;]
      order by xs:integer($file/@size)
      return
        &amp;lt;li&amp;gt;
          {string($file/@fileName)}, size: {string($file/@size)}
        &amp;lt;/li&amp;gt;
    } &amp;lt;/ul&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

</db:programlisting>
</db:article>
