<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPainterPathStroker Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpainterpathstroker.xml">QPainterPathStroker</db:link> class is used to generate fillable outlines for a given painter path.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPainterPathStroker</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPainterPathStroker is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>By calling the <db:link xlink:href="qpainterpathstroker.xml#createStroke">createStroke</db:link>() function, passing a given <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> as argument, a new painter path representing the outline of the given path is created. The newly created painter path can then be filled to draw the original painter path's outline.</db:para>
<db:para>You can control the various design aspects (width, cap styles, join styles and dash pattern) of the outlining using the following functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpainterpathstroker.xml#setWidth">setWidth</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainterpathstroker.xml#setCapStyle">setCapStyle</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainterpathstroker.xml#setJoinStyle">setJoinStyle</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainterpathstroker.xml#setDashPattern">setDashPattern</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qpainterpathstroker.xml#setDashPattern">setDashPattern</db:link>() function accepts both a <db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link> object and a list representation of the pattern as argument.</db:para>
<db:para>In addition you can specify a curve's threshold, controlling the granularity with which a curve is drawn, using the <db:link xlink:href="qpainterpathstroker.xml#setCurveThreshold">setCurveThreshold</db:link>() function. The default threshold is a well adjusted value (0.25), and normally you should not need to modify it. However, you can make the curve's appearance smoother by decreasing its value.</db:para>
<db:para>You can also control the miter limit for the generated outline using the <db:link xlink:href="qpainterpathstroker.xml#setMiterLimit">setMiterLimit</db:link>() function. The miter limit describes how far from each join the miter join can extend. The limit is specified in the units of width so the pixelwise miter limit will be <db:code>miterlimit * width</db:code>. This value is only used if the join style is <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link>.</db:para>
<db:para>The painter path generated by the <db:link xlink:href="qpainterpathstroker.xml#createStroke">createStroke</db:link>() function should only be used for outlining the given painter path. Otherwise it may cause unexpected behavior. Generated outlines also require the <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link> rule which is set by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpen.xml">QPen</db:link></db:member>
<db:member><db:link xlink:href="qbrush.xml">QBrush</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPainterPathStroker">
<db:title>QPainterPathStroker::QPainterPathStroker()</db:title>
<db:constructorsynopsis>
<db:methodname>QPainterPathStroker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPathStroker()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new stroker.</db:para>
</db:section>
<db:section xml:id="QPainterPathStroker-1">
<db:title>[explicit, since 5.3] QPainterPathStroker::QPainterPathStroker(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPainterPathStroker</db:methodname>
<db:methodparam>
<db:type>const QPen &amp;</db:type>
<db:parameter>pen</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPathStroker(const QPen &amp;pen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new stroker based on <db:code role="parameter">pen</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="dtor.QPainterPathStroker">
<db:title>QPainterPathStroker::~QPainterPathStroker()</db:title>
<db:destructorsynopsis>
<db:methodname>~QPainterPathStroker</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPainterPathStroker()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the stroker.</db:para>
</db:section>
<db:section xml:id="capStyle">
<db:title>Qt::PenCapStyle QPainterPathStroker::capStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PenCapStyle</db:type>
<db:methodname>capStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PenCapStyle capStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cap style of the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setCapStyle">setCapStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createStroke">
<db:title>QPainterPath QPainterPathStroker::createStroke(const QPainterPath &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainterPath</db:type>
<db:methodname>createStroke</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainterPath createStroke(const QPainterPath &amp;path) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Generates a new path that is a fillable area representing the outline of the given <db:code role="parameter">path</db:code>.</db:para>
<db:para>The various design aspects of the outline are based on the stroker's properties: <db:link xlink:href="qpainterpathstroker.xml#width">width</db:link>(), <db:link xlink:href="qpainterpathstroker.xml#capStyle">capStyle</db:link>(), <db:link xlink:href="qpainterpathstroker.xml#joinStyle">joinStyle</db:link>(), <db:link xlink:href="qpainterpathstroker.xml#dashPattern">dashPattern</db:link>(), <db:link xlink:href="qpainterpathstroker.xml#curveThreshold">curveThreshold</db:link>() and <db:link xlink:href="qpainterpathstroker.xml#miterLimit">miterLimit</db:link>().</db:para>
<db:para>The generated path should only be used for outlining the given painter path. Otherwise it may cause unexpected behavior. Generated outlines also require the <db:link xlink:href="qt.xml#FillRule-enum">Qt::WindingFill</db:link> rule which is set by default.</db:para>
</db:section>
<db:section xml:id="curveThreshold">
<db:title>qreal QPainterPathStroker::curveThreshold() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>curveThreshold</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal curveThreshold() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the curve flattening threshold for the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setCurveThreshold">setCurveThreshold</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dashOffset">
<db:title>qreal QPainterPathStroker::dashOffset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dashOffset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dashOffset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dash offset for the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setDashOffset">setDashOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dashPattern">
<db:title>QList&lt;qreal&gt; QPainterPathStroker::dashPattern() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;qreal&gt;</db:type>
<db:methodname>dashPattern</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;qreal&gt; dashPattern() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the dash pattern for the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setDashPattern">setDashPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="joinStyle">
<db:title>Qt::PenJoinStyle QPainterPathStroker::joinStyle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::PenJoinStyle</db:type>
<db:methodname>joinStyle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::PenJoinStyle joinStyle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the join style of the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setJoinStyle">setJoinStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="miterLimit">
<db:title>qreal QPainterPathStroker::miterLimit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>miterLimit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal miterLimit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the miter limit for the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setMiterLimit">setMiterLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCapStyle">
<db:title>void QPainterPathStroker::setCapStyle(Qt::PenCapStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCapStyle</db:methodname>
<db:methodparam>
<db:type>Qt::PenCapStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCapStyle(Qt::PenCapStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cap style of the generated outlines to <db:code role="parameter">style</db:code>. If a dash pattern is set, each segment of the pattern is subject to the cap <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#capStyle">capStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurveThreshold">
<db:title>void QPainterPathStroker::setCurveThreshold(qreal <db:emphasis>threshold</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurveThreshold</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>threshold</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurveThreshold(qreal threshold)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Specifies the curve flattening <db:code role="parameter">threshold</db:code>, controlling the granularity with which the generated outlines' curve is drawn.</db:para>
<db:para>The default threshold is a well adjusted value (0.25), and normally you should not need to modify it. However, you can make the curve's appearance smoother by decreasing its value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#curveThreshold">curveThreshold</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDashOffset">
<db:title>void QPainterPathStroker::setDashOffset(qreal <db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDashOffset</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDashOffset(qreal offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the dash offset for the generated outlines to <db:code role="parameter">offset</db:code>.</db:para>
<db:para>See the documentation for <db:link xlink:href="qpen.xml#setDashOffset">QPen::setDashOffset</db:link>() for a description of the dash offset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#dashOffset">dashOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDashPattern">
<db:title>void QPainterPathStroker::setDashPattern(Qt::PenStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDashPattern</db:methodname>
<db:methodparam>
<db:type>Qt::PenStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDashPattern(Qt::PenStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the dash pattern for the generated outlines to <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#dashPattern">dashPattern</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDashPattern-1">
<db:title>void QPainterPathStroker::setDashPattern(const QList&lt;qreal&gt; &amp;<db:emphasis>dashPattern</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDashPattern</db:methodname>
<db:methodparam>
<db:type>const QList&lt;qreal&gt; &amp;</db:type>
<db:parameter>dashPattern</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDashPattern(const QList&lt;qreal&gt; &amp;dashPattern)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the dash pattern for the generated outlines to <db:code role="parameter">dashPattern</db:code>. This function makes it possible to specify custom dash patterns.</db:para>
<db:para>Each element in the list contains the lengths of the dashes and spaces in the stroke, beginning with the first dash in the first element, the first space in the second element, and alternating between dashes and spaces for each following pair of elements.</db:para>
<db:para>The list can contain an odd number of elements, in which case the last element will be extended by the length of the first element when the pattern repeats.</db:para>
</db:section>
<db:section xml:id="setJoinStyle">
<db:title>void QPainterPathStroker::setJoinStyle(Qt::PenJoinStyle <db:emphasis>style</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setJoinStyle</db:methodname>
<db:methodparam>
<db:type>Qt::PenJoinStyle</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setJoinStyle(Qt::PenJoinStyle style)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the join style of the generated outlines to <db:code role="parameter">style</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#joinStyle">joinStyle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMiterLimit">
<db:title>void QPainterPathStroker::setMiterLimit(qreal <db:emphasis>limit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMiterLimit</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>limit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMiterLimit(qreal limit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the miter limit of the generated outlines to <db:code role="parameter">limit</db:code>.</db:para>
<db:para>The miter limit describes how far from each join the miter join can extend. The limit is specified in units of the currently set width. So the pixelwise miter limit will be <db:code>miterlimit * width</db:code>.</db:para>
<db:para>This value is only used if the join style is <db:link xlink:href="qt.xml#PenJoinStyle-enum">Qt::MiterJoin</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#miterLimit">miterLimit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidth">
<db:title>void QPainterPathStroker::setWidth(qreal <db:emphasis>width</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWidth</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWidth(qreal width)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the width of the generated outline painter path to <db:code role="parameter">width</db:code>.</db:para>
<db:para>The generated outlines will extend approximately 50% of <db:code role="parameter">width</db:code> to each side of the given input path's original outline.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#width">width</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>qreal QPainterPathStroker::width() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>width</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal width() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the width of the generated outlines.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainterpathstroker.xml#setWidth">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
