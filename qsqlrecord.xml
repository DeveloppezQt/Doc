<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlRecord Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> class encapsulates a database record.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlRecord</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsqlindex.xml" xlink:role="class">QSqlIndex</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlRecord is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> class encapsulates the functionality and characteristics of a database record (usually a row in a table or view within the database). <db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> supports adding and removing fields as well as setting and retrieving field values.</db:para>
<db:para>The values of a record's fields can be set by name or position with <db:link xlink:href="qsqlrecord.xml#setValue">setValue</db:link>(); if you want to set a field to null use <db:link xlink:href="qsqlrecord.xml#setNull">setNull</db:link>(). To find the position of a field by name use <db:link xlink:href="qsqlrecord.xml#indexOf">indexOf</db:link>(), and to find the name of a field at a particular position use <db:link xlink:href="qsqlrecord.xml#fieldName">fieldName</db:link>(). Use <db:link xlink:href="qsqlrecord.xml#field">field</db:link>() to retrieve a <db:link xlink:href="qsqlfield.xml">QSqlField</db:link> object for a given field. Use <db:link xlink:href="qsqlrecord.xml#contains">contains</db:link>() to see if the record contains a particular field name.</db:para>
<db:para>When queries are generated to be executed on the database only those fields for which <db:link xlink:href="qsqlrecord.xml#isGenerated">isGenerated</db:link>() is true are included in the generated SQL.</db:para>
<db:para>A record can have fields added with <db:link xlink:href="qsqlrecord.xml#append">append</db:link>() or <db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>(), replaced with <db:link xlink:href="qsqlrecord.xml#replace">replace</db:link>(), and removed with <db:link xlink:href="qsqlrecord.xml#remove">remove</db:link>(). All the fields can be removed with <db:link xlink:href="qsqlrecord.xml#clear">clear</db:link>(). The number of fields is given by <db:link xlink:href="qsqlrecord.xml#count">count</db:link>(); all their values can be cleared (to null) using <db:link xlink:href="qsqlrecord.xml#clearValues">clearValues</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlfield.xml">QSqlField</db:link></db:member>
<db:member><db:link xlink:href="qsqlquery.xml#record">QSqlQuery::record</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlRecord">
<db:title>QSqlRecord::QSqlRecord()</db:title>
<db:para>Constructs an empty record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isEmpty">isEmpty</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSqlRecord-1">
<db:title>QSqlRecord::QSqlRecord(const QSqlRecord &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
<db:para><db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This means you can make copies of a record in <db:link xlink:href="containers.xml#constant-time">constant time</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QSqlRecord">
<db:title>[noexcept] QSqlRecord::~QSqlRecord()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QSqlRecord::append(const QSqlField &amp;<db:emphasis>field</db:emphasis>)</db:title>
<db:para>Append a copy of field <db:code role="parameter">field</db:code> to the end of the record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#replace">replace</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>void QSqlRecord::clear()</db:title>
<db:para>Removes all the record's fields.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#clearValues">clearValues</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearValues">
<db:title>void QSqlRecord::clearValues()</db:title>
<db:para>Clears the value of all fields in the record and sets each field to null.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contains">
<db:title>bool QSqlRecord::contains(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if there is a field in the record called <db:code role="parameter">name</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="count">
<db:title>int QSqlRecord::count() const</db:title>
<db:para>Returns the number of fields in the record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="field">
<db:title>QSqlField QSqlRecord::field(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the field at position <db:code role="parameter">index</db:code>. If the <db:code role="parameter">index</db:code> is out of range, function returns a <db:link xlink:href="containers.xml#default-constructed-value">default-constructed value</db:link>.</db:para>
</db:section>
<db:section xml:id="field-1">
<db:title>QSqlField QSqlRecord::field(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the field called <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="fieldName">
<db:title>QString QSqlRecord::fieldName(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the name of the field at position <db:code role="parameter">index</db:code>. If the field does not exist, an empty string is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="indexOf">
<db:title>int QSqlRecord::indexOf(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns the position of the field called <db:code role="parameter">name</db:code> within the record, or -1 if it cannot be found. Field names are not case-sensitive. If more than one field matches, the first one is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#fieldName">fieldName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>void QSqlRecord::insert(int <db:emphasis>pos</db:emphasis>, const QSqlField &amp;<db:emphasis>field</db:emphasis>)</db:title>
<db:para>Inserts the field <db:code role="parameter">field</db:code> at position <db:code role="parameter">pos</db:code> in the record.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#replace">replace</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>bool QSqlRecord::isEmpty() const</db:title>
<db:para>Returns <db:code>true</db:code> if there are no fields in the record; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isGenerated">
<db:title>bool QSqlRecord::isGenerated(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the record has a field called <db:code role="parameter">name</db:code> and this field is to be generated (the default); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#setGenerated">setGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isGenerated-1">
<db:title>bool QSqlRecord::isGenerated(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the record has a field at position <db:code role="parameter">index</db:code> and this field is to be generated (the default); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#setGenerated">setGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSqlRecord::isNull(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the field called <db:code role="parameter">name</db:code> is null or if there is no field called <db:code role="parameter">name</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#setNull">setNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull-1">
<db:title>bool QSqlRecord::isNull(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the field <db:code role="parameter">index</db:code> is null or if there is no field at position <db:code role="parameter">index</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="keyValues">
<db:title>[since 5.1] QSqlRecord QSqlRecord::keyValues(const QSqlRecord &amp;<db:emphasis>keyFields</db:emphasis>) const</db:title>
<db:para>Returns a record containing the fields represented in <db:code role="parameter">keyFields</db:code> set to values that match by field name.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QSqlRecord::remove(int <db:emphasis>pos</db:emphasis>)</db:title>
<db:para>Removes the field at position <db:code role="parameter">pos</db:code>. If <db:code role="parameter">pos</db:code> is out of range, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#replace">replace</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="replace">
<db:title>void QSqlRecord::replace(int <db:emphasis>pos</db:emphasis>, const QSqlField &amp;<db:emphasis>field</db:emphasis>)</db:title>
<db:para>Replaces the field at position <db:code role="parameter">pos</db:code> with the given <db:code role="parameter">field</db:code>. If <db:code role="parameter">pos</db:code> is out of range, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#append">append</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#insert">insert</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGenerated">
<db:title>void QSqlRecord::setGenerated(const QString &amp;<db:emphasis>name</db:emphasis>, bool <db:emphasis>generated</db:emphasis>)</db:title>
<db:para>Sets the generated flag for the field called <db:code role="parameter">name</db:code> to <db:code role="parameter">generated</db:code>. If the field does not exist, nothing happens. Only fields that have <db:code role="parameter">generated</db:code> set to true are included in the SQL that is generated by <db:link xlink:href="qsqlquerymodel.xml">QSqlQueryModel</db:link> for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGenerated-1">
<db:title>void QSqlRecord::setGenerated(int <db:emphasis>index</db:emphasis>, bool <db:emphasis>generated</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the generated flag for the field <db:code role="parameter">index</db:code> to <db:code role="parameter">generated</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isGenerated">isGenerated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNull">
<db:title>void QSqlRecord::setNull(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the value of field <db:code role="parameter">index</db:code> to null. If the field does not exist, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNull-1">
<db:title>void QSqlRecord::setNull(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the value of the field called <db:code role="parameter">name</db:code> to null. If the field does not exist, nothing happens.</db:para>
</db:section>
<db:section xml:id="setValue">
<db:title>void QSqlRecord::setValue(int <db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>val</db:emphasis>)</db:title>
<db:para>Sets the value of the field at position <db:code role="parameter">index</db:code> to <db:code role="parameter">val</db:code>. If the field does not exist, nothing happens.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#value">value</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#setNull">setNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue-1">
<db:title>void QSqlRecord::setValue(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>val</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the value of the field called <db:code role="parameter">name</db:code> to <db:code role="parameter">val</db:code>. If the field does not exist, nothing happens.</db:para>
</db:section>
<db:section xml:id="value">
<db:title>QVariant QSqlRecord::value(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the value of the field located at position <db:code role="parameter">index</db:code> in the record. If <db:code role="parameter">index</db:code> is out of bounds, an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#setValue">setValue</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#fieldName">fieldName</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlrecord.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value-1">
<db:title>QVariant QSqlRecord::value(const QString &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the value of the field called <db:code role="parameter">name</db:code> in the record. If field <db:code role="parameter">name</db:code> does not exist an invalid variant is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#indexOf">indexOf</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSqlRecord::operator!=(const QSqlRecord &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this object is not identical to <db:code role="parameter">other</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QSqlRecord &amp;QSqlRecord::operator=(const QSqlRecord &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Sets the record equal to <db:code role="parameter">other</db:code>.</db:para>
<db:para><db:link xlink:href="qsqlrecord.xml">QSqlRecord</db:link> is <db:link xlink:href="implicit-sharing.xml">implicitly shared</db:link>. This means you can make copies of a record in <db:link xlink:href="containers.xml#constant-time">constant time</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSqlRecord::operator==(const QSqlRecord &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this object is identical to <db:code role="parameter">other</db:code> (i.e., has the same fields in the same order); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlrecord.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
