<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractHttpServer Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>API to subclass to implement an HTTP server.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractHttpServer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhttpserver.xml" xlink:role="class">QHttpServer</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Subclass this class and override <db:code>handleRequest()</db:code> to create an HTTP server. Use <db:code>listen()</db:code> or <db:code>bind()</db:code> to start listening to incoming connections.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractHttpServer">
<db:title>[explicit] QAbstractHttpServer::QAbstractHttpServer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractHttpServer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractHttpServer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an instance of <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> with the parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="bind">
<db:title>void QAbstractHttpServer::bind(QTcpServer *<db:emphasis>server</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bind</db:methodname>
<db:methodparam>
<db:type>QTcpServer *</db:type>
<db:parameter>server</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bind(QTcpServer *server)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Bind the HTTP server to given TCP <db:code role="parameter">server</db:code> over which the transmission happens. It is possible to call this function multiple times with different instances of TCP <db:code role="parameter">server</db:code> to handle multiple connections and ports, for example both SSL and non-encrypted connections.</db:para>
<db:para>After calling this function, every _new_ connection will be handled and forwarded by the HTTP server.</db:para>
<db:para>It is the user's responsibility to call <db:link xlink:href="qtcpserver.xml#listen">QTcpServer::listen</db:link>() on the <db:code role="parameter">server</db:code>.</db:para>
<db:para>If the <db:code role="parameter">server</db:code> is null, then a new, default-constructed TCP server will be constructed, which will be listening on a random port and all interfaces.</db:para>
<db:para>The <db:code role="parameter">server</db:code> will be parented to this HTTP server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcpserver.xml">QTcpServer</db:link></db:member>
<db:member><db:link xlink:href="qtcpserver.xml#listen">QTcpServer::listen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPendingWebSocketConnections">
<db:title>bool QAbstractHttpServer::hasPendingWebSocketConnections() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasPendingWebSocketConnections</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasPendingWebSocketConnections() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the server has pending WebSocket connections; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracthttpserver.xml#newWebSocketConnection">newWebSocketConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracthttpserver.xml#nextPendingWebSocketConnection">nextPendingWebSocketConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="listen">
<db:title>quint16 QAbstractHttpServer::listen(const QHostAddress &amp;<db:emphasis>address</db:emphasis> = QHostAddress::Any, quint16 <db:emphasis>port</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>quint16</db:type>
<db:methodname>listen</db:methodname>
<db:methodparam>
<db:type>const QHostAddress &amp;</db:type>
<db:parameter>address</db:parameter>
<db:initializer>QHostAddress::Any</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>port</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 listen(const QHostAddress &amp;address, quint16 port)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Tries to bind a <db:code>QTcpServer</db:code> to <db:code role="parameter">address</db:code> and <db:code role="parameter">port</db:code>.</db:para>
<db:para>Returns the server port upon success, 0 otherwise.</db:para>
</db:section>
<db:section xml:id="newWebSocketConnection">
<db:title>void QAbstractHttpServer::newWebSocketConnection()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>newWebSocketConnection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void newWebSocketConnection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted every time a new WebSocket connection is available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracthttpserver.xml#hasPendingWebSocketConnections">hasPendingWebSocketConnections</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracthttpserver.xml#nextPendingWebSocketConnection">nextPendingWebSocketConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextPendingWebSocketConnection">
<db:title>std::unique_ptr&lt;QWebSocket&gt; QAbstractHttpServer::nextPendingWebSocketConnection()</db:title>
<db:methodsynopsis>
<db:type>std::unique_ptr&lt;QWebSocket&gt;</db:type>
<db:methodname>nextPendingWebSocketConnection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">std::unique_ptr&lt;QWebSocket&gt; nextPendingWebSocketConnection()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the next pending connection as a connected <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> object. <db:code>nullptr</db:code> is returned if this function is called when there are no pending connections.</db:para>
<db:note>
<db:para>The returned <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> object cannot be used from another thread.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracthttpserver.xml#newWebSocketConnection">newWebSocketConnection</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracthttpserver.xml#hasPendingWebSocketConnections">hasPendingWebSocketConnections</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serverPorts">
<db:title>QList&lt;quint16&gt; QAbstractHttpServer::serverPorts()</db:title>
<db:methodsynopsis>
<db:type>QList&lt;quint16&gt;</db:type>
<db:methodname>serverPorts</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;quint16&gt; serverPorts()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of ports this instance of <db:link xlink:href="qabstracthttpserver.xml">QAbstractHttpServer</db:link> is listening to.</db:para>
<db:para>This function has the same guarantee as <db:link xlink:href="qobject.xml#children">QObject::children</db:link>, the latest server added is the last entry in the vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracthttpserver.xml#servers">servers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="servers">
<db:title>QList&lt;QTcpServer *&gt; QAbstractHttpServer::servers() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTcpServer *&gt;</db:type>
<db:methodname>servers</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTcpServer *&gt; servers() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns list of child TCP servers of this HTTP server.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracthttpserver.xml#serverPorts">serverPorts</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslSetup">
<db:title>void QAbstractHttpServer::sslSetup(const QSslCertificate &amp;<db:emphasis>certificate</db:emphasis>, const QSslKey &amp;<db:emphasis>privateKey</db:emphasis>, QSsl::SslProtocol <db:emphasis>protocol</db:emphasis> = QSsl::SecureProtocols)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sslSetup</db:methodname>
<db:methodparam>
<db:type>const QSslCertificate &amp;</db:type>
<db:parameter>certificate</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>privateKey</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::SslProtocol</db:type>
<db:parameter>protocol</db:parameter>
<db:initializer>QSsl::SecureProtocols</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sslSetup(const QSslCertificate &amp;certificate, const QSslKey &amp;privateKey, QSsl::SslProtocol protocol)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Turns the server into an HTTPS server.</db:para>
<db:para>The next <db:link xlink:href="qabstracthttpserver.xml#listen">listen</db:link>() call will use the given <db:code role="parameter">certificate</db:code>, <db:code role="parameter">privateKey</db:code>, and <db:code role="parameter">protocol</db:code>.</db:para>
</db:section>
<db:section xml:id="sslSetup-1">
<db:title>void QAbstractHttpServer::sslSetup(const QSslConfiguration &amp;<db:emphasis>sslConfiguration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sslSetup</db:methodname>
<db:methodparam>
<db:type>const QSslConfiguration &amp;</db:type>
<db:parameter>sslConfiguration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void sslSetup(const QSslConfiguration &amp;sslConfiguration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Turns the server into an HTTPS server.</db:para>
<db:para>The next <db:link xlink:href="qabstracthttpserver.xml#listen">listen</db:link>() call will use the given <db:code role="parameter">sslConfiguration</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
