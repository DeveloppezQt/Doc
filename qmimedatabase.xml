<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMimeDatabase Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link> class maintains a database of MIME types.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMimeDatabase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The MIME type database is provided by the freedesktop.org shared-mime-info project. If the MIME type database cannot be found on the system, as is the case on most Windows, macOS, and iOS systems, Qt will use its own copy of it.</db:para>
<db:para>Applications which want to define custom MIME types need to install an XML file into the locations searched for MIME definitions. These locations can be queried with</db:para>
<db:programlisting language="cpp">QStandardPaths::locateAll(QStandardPaths::GenericDataLocation, QLatin1String(&quot;mime/packages&quot;),
                          QStandardPaths::LocateDirectory);
</db:programlisting>
<db:para>On a typical Unix system, this will be /usr/share/mime/packages/, but it is also possible to extend the list of directories by setting the environment variable XDG_DATA_DIRS. For instance adding /opt/myapp/share to XDG_DATA_DIRS will result in /opt/myapp/share/mime/packages/ being searched for MIME definitions.</db:para>
<db:para>Here is an example of MIME XML:</db:para>
<db:programlisting language="cpp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;mime-info xmlns=&quot;http://www.freedesktop.org/standards/shared-mime-info&quot;&gt;
  &lt;mime-type type=&quot;application/vnd.qt.qmakeprofile&quot;&gt;
    &lt;comment xml:lang=&quot;en&quot;&gt;Qt qmake Profile&lt;/comment&gt;
    &lt;glob pattern=&quot;*.pro&quot; weight=&quot;50&quot;/&gt;
  &lt;/mime-type&gt;
&lt;/mime-info&gt;
</db:programlisting>
<db:para>For more details about the syntax of XML MIME definitions, including defining &quot;magic&quot; in order to detect MIME types based on data as well, read the Shared Mime Info specification at http://standards.freedesktop.org/shared-mime-info-spec/shared-mime-info-spec-latest.html</db:para>
<db:para>On Unix systems, a binary cache is used for more performance. This cache is generated by the command &quot;update-mime-database path&quot;, where path would be /opt/myapp/share/mime in the above example. Make sure to run this command when installing the MIME type definition file.</db:para>
<db:programlisting language="cpp">QMimeDatabase db;
QMimeType mime = db.mimeTypeForFile(fileName);
if (mime.inherits(&quot;text/plain&quot;)) {
    // The file is plain text, we can display it in a QTextEdit
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmimetype.xml">QMimeType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MatchMode-enum">
<db:title>enum QMimeDatabase::MatchMode</db:title>
<db:para>This enum specifies how matching a file to a MIME type is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link></db:emphasis>::MatchDefault</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>Both the file name and content are used to look for a match</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link></db:emphasis>::MatchExtension</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>Only the file name is used to look for a match</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link></db:emphasis>::MatchContent</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The file content is used to look for a match</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMimeDatabase">
<db:title>QMimeDatabase::QMimeDatabase()</db:title>
<db:para>Constructs a <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link> object.</db:para>
<db:para>It is perfectly OK to create an instance of <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link> every time you need to perform a lookup. The parsing of mimetypes is done on demand (when shared-mime-info is installed) or when the very first instance is constructed (when parsing XML files directly).</db:para>
</db:section>
<db:section xml:id="dtor.QMimeDatabase">
<db:title>[noexcept] QMimeDatabase::~QMimeDatabase()</db:title>
<db:para>Destroys the <db:link xlink:href="qmimedatabase.xml">QMimeDatabase</db:link> object.</db:para>
</db:section>
<db:section xml:id="allMimeTypes">
<db:title>QList&lt;QMimeType&gt; QMimeDatabase::allMimeTypes() const</db:title>
<db:para>Returns the list of all available MIME types.</db:para>
<db:para>This can be useful for showing all MIME types to the user, for instance in a MIME type editor. Do not use unless really necessary in other cases though, prefer using the <db:link xlink:href="qmimedatabase.xml#mimeTypeForData">mimeTypeForXxx</db:link>() methods for performance reasons.</db:para>
</db:section>
<db:section xml:id="mimeTypeForData">
<db:title>QMimeType QMimeDatabase::mimeTypeForData(QIODevice *<db:emphasis>device</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for the data in <db:code role="parameter">device</db:code>.</db:para>
<db:para>A valid MIME type is always returned. If the data in <db:code role="parameter">device</db:code> doesn't match any known MIME type data, the default MIME type (application/octet-stream) is returned.</db:para>
</db:section>
<db:section xml:id="mimeTypeForData-1">
<db:title>QMimeType QMimeDatabase::mimeTypeForData(const QByteArray &amp;<db:emphasis>data</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for <db:code role="parameter">data</db:code>.</db:para>
<db:para>A valid MIME type is always returned. If <db:code role="parameter">data</db:code> doesn't match any known MIME type data, the default MIME type (application/octet-stream) is returned.</db:para>
</db:section>
<db:section xml:id="mimeTypeForFile">
<db:title>QMimeType QMimeDatabase::mimeTypeForFile(const QFileInfo &amp;<db:emphasis>fileInfo</db:emphasis>, QMimeDatabase::MatchMode <db:emphasis>mode</db:emphasis> = MatchDefault) const</db:title>
<db:para>Returns a MIME type for <db:code role="parameter">fileInfo</db:code>.</db:para>
<db:para>A valid MIME type is always returned.</db:para>
<db:para>The default matching algorithm looks at both the file name and the file contents, if necessary. The file extension has priority over the contents, but the contents will be used if the file extension is unknown, or matches multiple MIME types. If <db:code role="parameter">fileInfo</db:code> is a Unix symbolic link, the file that it refers to will be used instead. If the file doesn't match any known pattern or data, the default MIME type (application/octet-stream) is returned.</db:para>
<db:para>When <db:code role="parameter">mode</db:code> is set to <db:link xlink:href="qmimedatabase.xml#MatchMode-enum">MatchExtension</db:link>, only the file name is used, not the file contents. The file doesn't even have to exist. If the file name doesn't match any known pattern, the default MIME type (application/octet-stream) is returned. If multiple MIME types match this file, the first one (alphabetically) is returned.</db:para>
<db:para>When <db:code role="parameter">mode</db:code> is set to <db:link xlink:href="qmimedatabase.xml#MatchMode-enum">MatchContent</db:link>, and the file is readable, only the file contents are used to determine the MIME type. This is equivalent to calling <db:link xlink:href="qmimedatabase.xml#mimeTypeForData">mimeTypeForData</db:link> with a <db:link xlink:href="qfile.xml">QFile</db:link> as input device.</db:para>
<db:para><db:code role="parameter">fileInfo</db:code> may refer to an absolute or relative path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmimetype.xml#isDefault">QMimeType::isDefault</db:link>()</db:member>
<db:member><db:link xlink:href="qmimedatabase.xml#mimeTypeForData">mimeTypeForData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeTypeForFile-1">
<db:title>QMimeType QMimeDatabase::mimeTypeForFile(const QString &amp;<db:emphasis>fileName</db:emphasis>, QMimeDatabase::MatchMode <db:emphasis>mode</db:emphasis> = MatchDefault) const</db:title>
<db:para>Returns a MIME type for the file named <db:code role="parameter">fileName</db:code> using <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="mimeTypeForFileNameAndData">
<db:title>QMimeType QMimeDatabase::mimeTypeForFileNameAndData(const QString &amp;<db:emphasis>fileName</db:emphasis>, QIODevice *<db:emphasis>device</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for the given <db:code role="parameter">fileName</db:code> and <db:code role="parameter">device</db:code> data.</db:para>
<db:para>This overload can be useful when the file is remote, and we started to download some of its data in a device. This allows to do full MIME type matching for remote files as well.</db:para>
<db:para>If the device is not open, it will be opened by this function, and closed after the MIME type detection is completed.</db:para>
<db:para>A valid MIME type is always returned. If <db:code role="parameter">device</db:code> data doesn't match any known MIME type data, the default MIME type (application/octet-stream) is returned.</db:para>
<db:para>This method looks at both the file name and the file contents, if necessary. The file extension has priority over the contents, but the contents will be used if the file extension is unknown, or matches multiple MIME types.</db:para>
</db:section>
<db:section xml:id="mimeTypeForFileNameAndData-1">
<db:title>QMimeType QMimeDatabase::mimeTypeForFileNameAndData(const QString &amp;<db:emphasis>fileName</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for the given <db:code role="parameter">fileName</db:code> and device <db:code role="parameter">data</db:code>.</db:para>
<db:para>This overload can be useful when the file is remote, and we started to download some of its data. This allows to do full MIME type matching for remote files as well.</db:para>
<db:para>A valid MIME type is always returned. If <db:code role="parameter">data</db:code> doesn't match any known MIME type data, the default MIME type (application/octet-stream) is returned.</db:para>
<db:para>This method looks at both the file name and the file contents, if necessary. The file extension has priority over the contents, but the contents will be used if the file extension is unknown, or matches multiple MIME types.</db:para>
</db:section>
<db:section xml:id="mimeTypeForName">
<db:title>QMimeType QMimeDatabase::mimeTypeForName(const QString &amp;<db:emphasis>nameOrAlias</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for <db:code role="parameter">nameOrAlias</db:code> or an invalid one if none found.</db:para>
</db:section>
<db:section xml:id="mimeTypeForUrl">
<db:title>QMimeType QMimeDatabase::mimeTypeForUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>) const</db:title>
<db:para>Returns a MIME type for <db:code role="parameter">url</db:code>.</db:para>
<db:para>If the URL is a local file, this calls <db:link xlink:href="qmimedatabase.xml#mimeTypeForFile">mimeTypeForFile</db:link>.</db:para>
<db:para>Otherwise the matching is done based on the file name only, except for schemes where file names don't mean much, like HTTP. This method always returns the default mimetype for HTTP URLs, use <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> to handle HTTP URLs properly.</db:para>
<db:para>A valid MIME type is always returned. If <db:code role="parameter">url</db:code> doesn't match any known MIME type data, the default MIME type (application/octet-stream) is returned.</db:para>
</db:section>
<db:section xml:id="mimeTypesForFileName">
<db:title>QList&lt;QMimeType&gt; QMimeDatabase::mimeTypesForFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:para>Returns the MIME types for the file name <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>If the file name doesn't match any known pattern, an empty list is returned. If multiple MIME types match this file, they are all returned.</db:para>
<db:para>This function does not try to open the file. To also use the content when determining the MIME type, use <db:link xlink:href="qmimedatabase.xml#mimeTypeForFile">mimeTypeForFile</db:link>() or <db:link xlink:href="qmimedatabase.xml#mimeTypeForFileNameAndData">mimeTypeForFileNameAndData</db:link>() instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmimedatabase.xml#mimeTypeForFile">mimeTypeForFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="suffixForFileName">
<db:title>QString QMimeDatabase::suffixForFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>) const</db:title>
<db:para>Returns the suffix for the file <db:code role="parameter">fileName</db:code>, as known by the MIME database.</db:para>
<db:para>This allows to pre-select &quot;tar.bz2&quot; for foo.tar.bz2, but still only &quot;txt&quot; for my.file.with.dots.txt.</db:para>
</db:section>
</db:section>
</db:article>
