<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt GUI Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>Tab</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Each tab definition is represented by this struct.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="Tab">
<db:title>Tab::Tab()</db:title>
<db:constructorsynopsis>
<db:methodname>Tab</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">Tab()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a default left tab with position 80.</db:para>
</db:section>
<db:section xml:id="Tab-1">
<db:title>Tab::Tab(qreal <db:emphasis>pos</db:emphasis>, TabType <db:emphasis>tabType</db:emphasis>, QChar <db:emphasis>delim</db:emphasis> = QChar())</db:title>
<db:constructorsynopsis>
<db:methodname>Tab</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>TabType</db:type>
<db:parameter>tabType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QChar</db:type>
<db:parameter>delim</db:parameter>
<db:initializer>QChar()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">Tab(qreal pos, TabType tabType, QChar delim)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a tab with the given position, tab type, and delimiter (<db:code role="parameter">pos</db:code>, <db:code role="parameter">tabType</db:code>, <db:code role="parameter">delim</db:code>).</db:para>
<db:note>
<db:para><db:code role="parameter">delim</db:code> is only used when <db:code role="parameter">tabType</db:code> is <db:link xlink:href="qtextoption.xml#TabType-enum">DelimiterTab</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool Tab::operator!=(const Tab &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const Tab &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const Tab &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if tab <db:code role="parameter">other</db:code> is not equal to this tab; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool Tab::operator==(const Tab &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const Tab &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const Tab &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if tab <db:code role="parameter">other</db:code> is equal to this tab; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="delimiter-var">
<db:title>QChar Tab::delimiter</db:title>
<db:fieldsynopsis>
<db:type>QChar</db:type>
<db:varname>delimiter</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If type is DelimitorTab; tab until this char is found in the text.</db:para>
</db:section>
<db:section xml:id="position-var">
<db:title>qreal Tab::position</db:title>
<db:fieldsynopsis>
<db:type>qreal</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Distance from the start of the paragraph. The position of a tab is from the start of the paragraph which implies that when the alignment of the paragraph is set to centered, the tab is interpreted to be moved the same distance as the left ege of the paragraph does. In case the paragraph is set to have a layoutDirection() RightToLeft the position is interpreted to be from the right side of the paragraph with higher numbers moving the tab to the left.</db:para>
</db:section>
<db:section xml:id="type-var">
<db:title>QTextOption::TabType Tab::type</db:title>
<db:fieldsynopsis>
<db:type>QTextOption::TabType</db:type>
<db:varname>type</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Determine which type is used. In a paragraph that has layoutDirection() RightToLeft the type <db:link xlink:href="qtextoption.xml#TabType-enum">LeftTab</db:link> will be interpreted to be a <db:link xlink:href="qtextoption.xml#TabType-enum">RightTab</db:link> and vice versa.</db:para>
</db:section>
</db:section>
</db:article>
