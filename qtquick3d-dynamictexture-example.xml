<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Dynamic Texture Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use a 2D layer as a 3D texture.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/dynamictexture.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to use 2D content from Qt Quick and use it as a texture for 3D objects. The 2D item used in this example is a fancy corkboard and it is textured onto a simple double door.</db:para>
<db:section xml:id="the-2d-scene">
<db:title>The 2D scene</db:title>
<db:para>The 2D content we use for this example is the <db:emphasis>CorkBoard</db:emphasis> scene from Qt Quick's <db:link xlink:href="qtquick-touchinteraction-example.xml">Touch Interaction Example</db:link>. We put it in a Rectangle and show it on top of our <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:programlisting language="qml">Rectangle {
    id: object2d
    width: 500
    height: 700
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.margins: 10

    CorkBoards { }

    clip: true
    layer.enabled: true
}
</db:programlisting>
<db:para>We give the 2D object the name <db:code>object2d</db:code>, so we can refer to it later.</db:para>
</db:section>
<db:section xml:id="the-3d-view">
<db:title>The 3D view</db:title>
<db:para>To use the 2D content in our 3D scene, we first have to put it into a material. The texture is identified by the <db:link xlink:href="qml-qtquick3d-texture.xml#sourceItem-prop">sourceItem</db:link> property, referring back to <db:code>object2d</db:code>.</db:para>
<db:programlisting language="qml">DefaultMaterial {
    id: doorMaterial
    diffuseMap: Texture {
        sourceItem: object2d
    }
}
</db:programlisting>
<db:para>We use the same material for each door, but different meshes. The meshes are designed so that the texture is divided evenly across the doors. In addition to setting the material and the source mesh, we also set the <db:link xlink:href="qml-qtquick3d-model.xml#pickable-prop">pickable</db:link> property, so we can click on the doors to open and close them:</db:para>
<db:programlisting language="qml">Model {
    id: door1
    ...
    source: &quot;meshes/door1.mesh&quot;
    materials: doorMaterial
    pickable: true
</db:programlisting>
<db:para>Finally, we add some interaction to our 3D scene, using <db:link xlink:href="qml-qtquick3d-view3d.xml#pick-method">View3D.pick</db:link>:</db:para>
<db:programlisting language="qml">TapHandler {
    gesturePolicy: TapHandler.WithinBounds
    onTapped: {
        var result = view.pick(point.position.x, point.position.y);
        if (result.objectHit) {
            console.log(&quot;pick dist&quot;, result.distance, &quot;hit&quot;, result.objectHit,
                        &quot;scene pos&quot;, result.scenePosition, &quot;uv&quot;, result.uvPosition);
            var pickedDoor = result.objectHit;
            if (pickedDoor.state === &quot;&quot;)
                pickedDoor.state = &quot;opened&quot;;
            else
                pickedDoor.state = &quot;&quot;;

        }
    }
}
</db:programlisting>
<db:para>Each door will open when clicked and its state is set to <db:code>&quot;opened&quot;</db:code>.</db:para>
<db:programlisting language="qml">states: State {
    name: &quot;opened&quot;
    PropertyChanges {
        target: door1
        eulerRotation.y: 90
    }
}
transitions: Transition {
    to: &quot;opened&quot;
    reversible: true
    SequentialAnimation {
        PropertyAnimation { property: &quot;eulerRotation.y&quot;; duration: 2000 }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/CMakeLists.txt">dynamictexture/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/CorkBoards.qml">dynamictexture/CorkBoards.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/Doors.qml">dynamictexture/Doors.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/content/Panel.qml">dynamictexture/content/Panel.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/dynamictexture.pro">dynamictexture/dynamictexture.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/main.cpp">dynamictexture/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/main.qml">dynamictexture/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/qml.qrc">dynamictexture/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/content/cork.jpg">dynamictexture/content/cork.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/content/note-yellow.png">dynamictexture/content/note-yellow.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="dynamictexture/content/tack.png">dynamictexture/content/tack.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
