<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Accessibility</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="accessible-qwidget.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Accessibility for QWidget Applications"/></db:extendedlink>
<db:abstract>
<db:para>How to make your applications accessible to those with disabilities.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="introduction">
<db:title>Introduction</db:title>
<db:para>Accessibility in computer software is making applications usable for people with different abilities. It is important to take different people's needs into account, for example, in case of low vision, hearing, dexterity, or cognitive problems. Some examples of accessibility measures are keyboard shortcuts, a high-contrast user interface that uses specially selected colors and fonts, or support for assistive tools such as screen readers and braille displays.</db:para>
<db:para>A basic checklist that any application should aim for:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Usability</db:emphasis> - Usability and user centric design generally lead to more usable applications, including improvements for people with various abilities.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Fonts</db:emphasis> - Font settings should follow the system/platform. This allows users to select fonts for readability and increasing the font size.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Colors</db:emphasis> - Provide enough contrast and consider the most common cases of low vision and color blindness. Make sure that the application is usable, for example, for people with red/green blindness, and don't depend on colors only.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Scalable UI</db:emphasis> - A user interface that works in various sizes and properly supports different fonts and accommodates size changes.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Sounds</db:emphasis> - Do not exclusively rely on sound notifications, provide a visual alternative when a sound signal is imperative to using the application.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Spelling</db:emphasis> - Offer spell checking wherever it makes sense, even when only a single word is expected.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:emphasis role="bold">Assistive Technology</db:emphasis> - Support the use of assistive tools (AT). Either use standard widgets/controls which support ATs out of the box, or make sure that your custom widgets and controls support accessibility properly. In order to learn more about this read on below.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This part of the documentation assumes that the basics for accessibility, which go hand in hand with usability, are already in good shape. The rest of this document focuses more specifically on supporting assistive technology.</db:para>
<db:para>Assistive Tools (or ATs) come in great variety and help users with different tasks. For this reason what individual applications offer (with the help of Qt) is a generic API that allows to inspect what is on screen in a semantic way and offers the typical interactions with the UI elements.</db:para>
<db:para>Applications do not usually communicate directly with the assistive tools, but through a platform specific API. Generally the communication with the ATs works though an IPC mechanism. Semantic information about user interface elements, such as buttons and scroll bars, is exposed to the assistive technologies. Qt supports UI Automation on Windows, macOS Accessibility on macOS, and AT-SPI via DBus on Unix/X11. The platform specific technologies are abstracted by Qt, so that applications do not need any platform specific changes to work with the different native APIs. Qt tries to make adding accessibility support to your application as easy as possible, only a few changes from your side may be required to allow even more users to enjoy it.</db:para>
<db:para>The main reason to consult this documentation is to learn how to make custom <db:link xlink:href="qwidget-proxy.xml">QWidget</db:link> subclasses and QQuickItems accessible.</db:para>
<db:para>In this overview document, we will examine the overall Qt accessibility architecture, and how to implement accessibility for custom widgets and elements.</db:para>
</db:section>
<db:section xml:id="making-applications-accessible">
<db:title>Making Applications Accessible</db:title>
<db:para>These two pages focus on giving an overview of how to achieve good accessibility:</db:para>
<db:para><db:link xlink:href="accessible-qwidget.xml">Accessibility for QWidget Applications</db:link></db:para>
<db:para><db:link xlink:href="accessible-qtquick.xml">Accessibility for Qt Quick Applications</db:link></db:para>
<db:para>These classes provide support for accessible applications: <db:variablelist role="accessibility">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-accessible.xml" xlink:role="">Accessible</db:link></db:term>
<db:listitem>
<db:para>Enables accessibility of QML items.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:para>
</db:section>
</db:article>
