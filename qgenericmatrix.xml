<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGenericMatrix Class</db:title>
<db:subtitle>template &lt;int N, int M, typename T&gt; class QGenericMatrix</db:subtitle>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> class is a template class that represents a NxM transformation matrix with N columns and M rows.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGenericMatrix</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGenericMatrix is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member><db:link xlink:href="painting-3d.xml">Rendering in 3D</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template has three parameters:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>N</db:para>
</db:td>
<db:td>
<db:para>Number of columns.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>Number of rows.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>T</db:para>
</db:td>
<db:td>
<db:para>Element type that is visible to users of the class.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGenericMatrix">
<db:title>QGenericMatrix::QGenericMatrix()</db:title>
<db:constructorsynopsis>
<db:methodname>QGenericMatrix</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a NxM identity matrix.</db:para>
</db:section>
<db:section xml:id="QGenericMatrix-2">
<db:title>[explicit] QGenericMatrix::QGenericMatrix(const T *<db:emphasis>values</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGenericMatrix</db:methodname>
<db:methodparam>
<db:type>const T *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix(const T *values)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a matrix from the given N * M floating-point <db:code role="parameter">values</db:code>. The contents of the array <db:code role="parameter">values</db:code> is assumed to be in row-major order.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#copyDataTo">copyDataTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="constData">
<db:title>const T *QGenericMatrix::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant pointer to the raw data of this matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="copyDataTo">
<db:title>void QGenericMatrix::copyDataTo(T *<db:emphasis>values</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>copyDataTo</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>values</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void copyDataTo(T *values) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Retrieves the N * M items in this matrix and copies them to <db:code role="parameter">values</db:code> in row-major order.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>T *QGenericMatrix::data()</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the raw data of this matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#constData">constData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data-1">
<db:title>const T *QGenericMatrix::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant pointer to the raw data of this matrix.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#constData">constData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fill">
<db:title>void QGenericMatrix::fill(T <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fill</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fill(T value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fills all elements of this matrix with <db:code role="parameter">value</db:code>.</db:para>
</db:section>
<db:section xml:id="isIdentity">
<db:title>bool QGenericMatrix::isIdentity() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isIdentity() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is the identity; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#setToIdentity">setToIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setToIdentity">
<db:title>void QGenericMatrix::setToIdentity()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setToIdentity</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setToIdentity()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this matrix to the identity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgenericmatrix.xml#isIdentity">isIdentity</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transposed">
<db:title>QGenericMatrix&lt;M, N, T&gt; QGenericMatrix::transposed() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGenericMatrix&lt;M, N, T&gt;</db:type>
<db:methodname>transposed</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;M, N, T&gt; transposed() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this matrix, transposed about its diagonal.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGenericMatrix::operator!=(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>other</db:emphasis> = N) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGenericMatrix&lt;N, M, T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is not identical to <db:code role="parameter">other</db:code>; false otherwise.</db:para>
</db:section>
<db:section xml:id="operator-28-29">
<db:title>const T &amp;QGenericMatrix::operator()(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T &amp; operator()(int row, int column) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a constant reference to the element at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) in this matrix.</db:para>
</db:section>
<db:section xml:id="operator-28-29-1">
<db:title>T &amp;QGenericMatrix::operator()(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>T &amp;</db:type>
<db:methodname>operator()</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>row</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>column</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator()(int row, int column)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a reference to the element at position (<db:code role="parameter">row</db:code>, <db:code role="parameter">column</db:code>) in this matrix so that the element can be assigned to.</db:para>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>QGenericMatrix&lt;N, M, T&gt; &amp;QGenericMatrix::operator*=(T <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:methodname>operator*=</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; &amp; operator*=(T factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Multiplies all elements of this matrix by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>QGenericMatrix&lt;N, M, T&gt; &amp;QGenericMatrix::operator+=(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>other</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:methodname>operator+=</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; &amp; operator+=(const QGenericMatrix&lt;N, M, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the contents of <db:code role="parameter">other</db:code> to this matrix.</db:para>
</db:section>
<db:section xml:id="operator--eq">
<db:title>QGenericMatrix&lt;N, M, T&gt; &amp;QGenericMatrix::operator-=(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>other</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:methodname>operator-=</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; &amp; operator-=(const QGenericMatrix&lt;N, M, T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Subtracts the contents of <db:code role="parameter">other</db:code> from this matrix.</db:para>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>QGenericMatrix&lt;N, M, T&gt; &amp;QGenericMatrix::operator/=(T <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:methodname>operator/=</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; &amp; operator/=(T divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Divides all elements of this matrix by <db:code role="parameter">divisor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGenericMatrix::operator==(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>other</db:emphasis> = N) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGenericMatrix&lt;N, M, T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this matrix is identical to <db:code role="parameter">other</db:code>; false otherwise.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QMatrix2x2-typedef">
<db:title>QMatrix2x2</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix2x2</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix2x2 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 2 columns, 2 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix2x3-typedef">
<db:title>QMatrix2x3</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix2x3</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix2x3 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 2 columns, 3 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix2x4-typedef">
<db:title>QMatrix2x4</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix2x4</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix2x4 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 2 columns, 4 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix3x2-typedef">
<db:title>QMatrix3x2</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix3x2</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix3x2 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 3 columns, 2 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix3x3-typedef">
<db:title>QMatrix3x3</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix3x3</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix3x3 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 3 columns, 3 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix3x4-typedef">
<db:title>QMatrix3x4</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix3x4</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix3x4 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 3 columns, 4 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix4x2-typedef">
<db:title>QMatrix4x2</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix4x2</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix4x2 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 4 columns, 2 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="QMatrix4x3-typedef">
<db:title>QMatrix4x3</db:title>
<db:typedefsynopsis>
<db:typedefname>QMatrix4x3</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The QMatrix4x3 type defines a convenient instantiation of the <db:link xlink:href="qgenericmatrix.xml">QGenericMatrix</db:link> template for 4 columns, 3 rows, and float as the element type.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>QGenericMatrix&lt;M1, M2, TT&gt; operator*(const QGenericMatrix&lt;NN, M2, TT&gt; &amp;<db:emphasis>m1</db:emphasis> = NN, const QGenericMatrix&lt;M1, NN, TT&gt; &amp;<db:emphasis>m2</db:emphasis> = M1)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;M1, M2, TT&gt;</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;NN, M2, TT&gt; &amp;</db:type>
<db:parameter>m1</db:parameter>
<db:initializer>NN</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QGenericMatrix&lt;M1, NN, TT&gt; &amp;</db:type>
<db:parameter>m2</db:parameter>
<db:initializer>M1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;M1, M2, TT&gt; operator*(const QGenericMatrix&lt;NN, M2, TT&gt; &amp;m1, const QGenericMatrix&lt;M1, NN, TT&gt; &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the product of the NNxM2 matrix <db:code role="parameter">m1</db:code> and the M1xNN matrix <db:code role="parameter">m2</db:code> to produce a M1xM2 matrix result.</db:para>
</db:section>
<db:section xml:id="operator-2a-3">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator*(T <db:emphasis>factor</db:emphasis>, const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator*(T factor, const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of multiplying all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a-4">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator*(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N, T <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator*(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix, T factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of multiplying all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">factor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator+(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>m1</db:emphasis> = N, const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>m2</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>m1</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>m2</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator+(const QGenericMatrix&lt;N, M, T&gt; &amp;m1, const QGenericMatrix&lt;N, M, T&gt; &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the sum of <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--2">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator-(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>m1</db:emphasis> = N, const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>m2</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>m1</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>m2</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator-(const QGenericMatrix&lt;N, M, T&gt; &amp;m1, const QGenericMatrix&lt;N, M, T&gt; &amp;m2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the difference of <db:code role="parameter">m1</db:code> and <db:code role="parameter">m2</db:code>.</db:para>
</db:section>
<db:section xml:id="operator--3">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator-(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator-(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the negation of <db:code role="parameter">matrix</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>QGenericMatrix&lt;N, M, T&gt; operator/(const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N, T <db:emphasis>divisor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGenericMatrix&lt;N, M, T&gt;</db:type>
<db:methodname>operator/</db:methodname>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>T</db:type>
<db:parameter>divisor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGenericMatrix&lt;N, M, T&gt; operator/(const QGenericMatrix&lt;N, M, T&gt; &amp;matrix, T divisor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the result of dividing all elements of <db:code role="parameter">matrix</db:code> by <db:code role="parameter">divisor</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">matrix</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QGenericMatrix&lt;N, M, T&gt; &amp;<db:emphasis>matrix</db:emphasis> = N)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGenericMatrix&lt;N, M, T&gt; &amp;</db:type>
<db:parameter>matrix</db:parameter>
<db:initializer>N</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QGenericMatrix&lt;N, M, T&gt; &amp;matrix)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a NxM matrix from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">matrix</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
