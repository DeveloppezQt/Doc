<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>HorizontalBarChart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a horizontal bar chart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QHorizontalBarChart shows the data in sets as separate bars, which are grouped in categories. QHorizontalBarChart works just like QBarChart, except that the bars are drawn horizontally on the chart.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_horizontalbarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The bar sets are used in the same way in all bar charts. To illustrate the difference between various bar charts, we use the same data in all examples. Data that bar chart visualizes, is defined by QBarSet instances. Here we create the sets and append data to them. The data is appended here with &lt;&lt; operator. Alternatively, the append method could also be used.</db:para>
<db:programlisting language="cpp">    QBarSet *set0 = new QBarSet(&quot;Jane&quot;);
    QBarSet *set1 = new QBarSet(&quot;John&quot;);
    QBarSet *set2 = new QBarSet(&quot;Axel&quot;);
    QBarSet *set3 = new QBarSet(&quot;Mary&quot;);
    QBarSet *set4 = new QBarSet(&quot;Samantha&quot;);

    *set0 &lt;&lt; 1 &lt;&lt; 2 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5 &lt;&lt; 6;
    *set1 &lt;&lt; 5 &lt;&lt; 0 &lt;&lt; 0 &lt;&lt; 4 &lt;&lt; 0 &lt;&lt; 7;
    *set2 &lt;&lt; 3 &lt;&lt; 5 &lt;&lt; 8 &lt;&lt; 13 &lt;&lt; 8 &lt;&lt; 5;
    *set3 &lt;&lt; 5 &lt;&lt; 6 &lt;&lt; 7 &lt;&lt; 3 &lt;&lt; 4 &lt;&lt; 5;
    *set4 &lt;&lt; 9 &lt;&lt; 7 &lt;&lt; 5 &lt;&lt; 3 &lt;&lt; 1 &lt;&lt; 2;
</db:programlisting>
<db:para>We create the series and append the bar sets to it. The series takes ownership of the barsets. The series groups the data from sets to categories. The first values of each set are grouped together in the first category; the second values in the second category, and so on.</db:para>
<db:programlisting language="cpp">    QHorizontalBarSeries *series = new QHorizontalBarSeries();
    series-&gt;append(set0);
    series-&gt;append(set1);
    series-&gt;append(set2);
    series-&gt;append(set3);
    series-&gt;append(set4);
</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title for chart with setTitle and then turn on animations of the series by calling setAnimationOptions(QChart::SeriesAnimations).</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&gt;addSeries(series);
    chart-&gt;setTitle(&quot;Simple horizontal barchart example&quot;);
    chart-&gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have the categories displayed on axis, we need to create a QBarCategoryAxis. Here we create a category axis with a list of categories and set it to be the y-axis of the chart. The chart takes ownership of axis. For the x-axis we use the default axis, which is created and scaled to series data by calling createDefaultAxes of the chart. Note that the call for createDefaultAxes must be done before we set the category axis. Otherwise the default axis will override the category axis.</db:para>
<db:programlisting language="cpp">    QStringList categories;
    categories &lt;&lt; &quot;Jan&quot; &lt;&lt; &quot;Feb&quot; &lt;&lt; &quot;Mar&quot; &lt;&lt; &quot;Apr&quot; &lt;&lt; &quot;May&quot; &lt;&lt; &quot;Jun&quot;;
    QBarCategoryAxis *axisY = new QBarCategoryAxis();
    axisY-&gt;append(categories);
    chart-&gt;setAxisY(axisY, series);
    QValueAxis *axisX = new QValueAxis();
    chart-&gt;setAxisX(axisX, series);
    axisX-&gt;applyNiceNumbers();
</db:programlisting>
<db:para>We also want to show the legend. To do so, we get the legend pointer from chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">    chart-&gt;legend()-&gt;setVisible(true);
    chart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally we add the chart onto a view. We also turn on the antialiasing for the chartView.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>The chart is ready to be shown. We set the chart to be the central widget of the window. We also set the size for the chart window and show it.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(420, 300);
    window.show();
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="horizontalbarchart/horizontalbarchart.pro">horizontalbarchart/horizontalbarchart.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="horizontalbarchart/main.cpp">horizontalbarchart/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
