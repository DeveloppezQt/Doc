<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanFrameProcessor Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link> class can be used to decode a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> or to convert the input data into a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> that is ready to be sent to the receiver.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanFrameProcessor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link> class operates on the CAN message descriptions (represented by the <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> and <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> classes) and a unique identifier description (represented by <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link>). It uses the descriptions to decode the incoming <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> or to encode the user-specified data into the proper payload.</db:para>
<db:para>Before doing any decoding or encoding, the <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link> instance <db:emphasis>must</db:emphasis> be initialized properly. The following data needs to be provided:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>A <db:link xlink:href="qcanuniqueiddescription.xml#isValid">valid</db:link> unique identifier description. Use the <db:link xlink:href="qcanframeprocessor.xml#setUniqueIdDescription">setUniqueIdDescription</db:link>() method to provide a proper description.</db:para>
</db:listitem>
<db:listitem>
<db:para>At least one message description. Use the <db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>() or <db:link xlink:href="qcanframeprocessor.xml#setMessageDescriptions">setMessageDescriptions</db:link>() method to provide message descriptions. All message descriptions <db:emphasis>must</db:emphasis> have distinct unique identifiers. Each message can contain multiple signal descriptions, but signal names within one message <db:emphasis>must</db:emphasis> be unique as well.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml#parseFrame">parseFrame</db:link>() method can be used to process the incoming <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>. The method returns a <db:link xlink:href="qcanframeprocessor-parseresult.xml">ParseResult</db:link> structure which contains the <db:link xlink:href="qcanframeprocessor-parseresult.xml#uniqueId-var">unique identifier</db:link> and the <db:link xlink:href="qcanframeprocessor-parseresult.xml#signalValues-var">signal values</db:link> map. The keys of the map are the <db:link xlink:href="qcansignaldescription.xml#name">signal names</db:link>, and the values of the map are signal values.</db:para>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml#prepareFrame">prepareFrame</db:link>() method can be used to generate a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> object for a specific unique identifier, using the provided signal names and desired values.</db:para>
<db:para>Errors can occur during the encoding or decoding process. In such cases the <db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>() and <db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>() methods can be used to get the information about the error.</db:para>
<db:para>Some non-critical problems may occur as well. Such problems will be logged, but the process will not be stopped. After the process is completed, the <db:link xlink:href="qcanframeprocessor.xml#warnings">warnings</db:link>() method can be used to access the list of all the warnings.</db:para>
<db:note>
<db:para>The last error and error description, as well as the warnings, are reset once the decoding or encoding is started.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link></db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QCanFrameProcessor::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>None</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidFrame</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnsupportedFrameFormat</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Decoding</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Encoding</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum represents the possible errors that can occur while encoding or decoding the <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::InvalidFrame</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The received frame is invalid and cannot be parsed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::UnsupportedFrameFormat</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The format of the received frame is not supported and cannot be parsed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::Decoding</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An error occurred during decoding. Use <db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>() to get a string representation of the error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link></db:emphasis>::<db:emphasis role="bold">Error</db:emphasis>::Encoding</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>An error occurred during encoding. Use <db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>() to get a string representation of the error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanFrameProcessor">
<db:title>QCanFrameProcessor::QCanFrameProcessor()</db:title>
<db:constructorsynopsis>
<db:methodname>QCanFrameProcessor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanFrameProcessor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a CAN frame processor.</db:para>
</db:section>
<db:section xml:id="dtor.QCanFrameProcessor">
<db:title>QCanFrameProcessor::~QCanFrameProcessor()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCanFrameProcessor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCanFrameProcessor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this frame processor.</db:para>
</db:section>
<db:section xml:id="addMessageDescriptions">
<db:title>void QCanFrameProcessor::addMessageDescriptions(const QList&lt;QCanMessageDescription&gt; &amp;<db:emphasis>descriptions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMessageDescriptions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCanMessageDescription&gt; &amp;</db:type>
<db:parameter>descriptions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMessageDescriptions(const QList&lt;QCanMessageDescription&gt; &amp;descriptions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds new message descriptions <db:code role="parameter">descriptions</db:code> to the available message descriptions.</db:para>
<db:para>All message descriptions should have distinct unique ids.</db:para>
<db:para>If some message descriptions have repeated unique ids, only the last description will be used.</db:para>
<db:para>If the parser already had a message description with the same unique id, it will be overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#messageDescriptions">messageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#setMessageDescriptions">setMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#clearMessageDescriptions">clearMessageDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearMessageDescriptions">
<db:title>void QCanFrameProcessor::clearMessageDescriptions()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearMessageDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearMessageDescriptions()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all message descriptions for this frame processor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#messageDescriptions">messageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#setMessageDescriptions">setMessageDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QCanFrameProcessor::Error QCanFrameProcessor::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanFrameProcessor::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanFrameProcessor::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the last error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#prepareFrame">prepareFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#parseFrame">parseFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QCanFrameProcessor::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text description of the last error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#prepareFrame">prepareFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#parseFrame">parseFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="messageDescriptions">
<db:title>QList&lt;QCanMessageDescription&gt; QCanFrameProcessor::messageDescriptions() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QCanMessageDescription&gt;</db:type>
<db:methodname>messageDescriptions</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QCanMessageDescription&gt; messageDescriptions() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns all the message descriptions that are currently used by this frame processor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#setMessageDescriptions">setMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#clearMessageDescriptions">clearMessageDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parseFrame">
<db:title>QCanFrameProcessor::ParseResult QCanFrameProcessor::parseFrame(const QCanBusFrame &amp;<db:emphasis>frame</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanFrameProcessor::ParseResult</db:type>
<db:methodname>parseFrame</db:methodname>
<db:methodparam>
<db:type>const QCanBusFrame &amp;</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanFrameProcessor::ParseResult parseFrame(const QCanBusFrame &amp;frame)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Parses the frame <db:code role="parameter">frame</db:code> using the specified message descriptions.</db:para>
<db:para>The process of parsing is as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml#uniqueIdDescription">uniqueIdDescription</db:link>() is used to extract the unique identifier of the message.</db:para>
</db:listitem>
<db:listitem>
<db:para>The extracted unique identifier is used to search for a suitable <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> from the list of all available <db:link xlink:href="qcanframeprocessor.xml#messageDescriptions">messageDescriptions</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>The matching <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> is used to extract the signal values from the frame.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>This method returns a <db:link xlink:href="qcanframeprocessor-parseresult.xml">QCanFrameProcessor::ParseResult</db:link>, which contains both the extracted unique identifier and a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the signals and their values. The keys of the map are the <db:link xlink:href="qcansignaldescription.xml#name">signal names</db:link>, and the values of the map are signal values.</db:para>
<db:para>If an error occurred during the decoding, a result with empty <db:link xlink:href="qcanframeprocessor-parseresult.xml#signalValues-var">signalValues</db:link> is returned. In such cases, the <db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>() and <db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>() methods can be used to get information about the errors.</db:para>
<db:note>
<db:para>Calling this method clears all previous errors and warnings.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#warnings">warnings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepareFrame">
<db:title>QCanBusFrame QCanFrameProcessor::prepareFrame(QtCanBus::UniqueId <db:emphasis>uniqueId</db:emphasis>, const QVariantMap &amp;<db:emphasis>signalValues</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanBusFrame</db:type>
<db:methodname>prepareFrame</db:methodname>
<db:methodparam>
<db:type>QtCanBus::UniqueId</db:type>
<db:parameter>uniqueId</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>signalValues</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanBusFrame prepareFrame(QtCanBus::UniqueId uniqueId, const QVariantMap &amp;signalValues)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a CAN data frame, using <db:code role="parameter">uniqueId</db:code> and <db:code role="parameter">signalValues</db:code> and returns the constructed <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link>.</db:para>
<db:para>The <db:code role="parameter">signalValues</db:code> parameter <db:emphasis>must</db:emphasis> contain signal names as keys, and expected signal values as values.</db:para>
<db:para>The process of creating the frame is as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The <db:code role="parameter">uniqueId</db:code> is used to find an appropriate message description.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the message description is found, a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> with a payload of the specified size is created. All bytes of the payload, as well as the frame id, are initialized to zeros.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qcanframeprocessor.xml#uniqueIdDescription">uniqueIdDescription</db:link>() is used to encode the <db:code role="parameter">uniqueId</db:code> into the appropriate part of the frame (frame id or payload).</db:para>
</db:listitem>
<db:listitem>
<db:para>The selected message description is used to encode all the <db:code role="parameter">signalValues</db:code> into the frame.</db:para>
</db:listitem>
<db:listitem>
<db:para>The parts of the frame that are not covered by a unique id or existing signal descriptions are untouched (and so still contain zeros).</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If an error occurred during the encoding, an invalid <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> is returned. In such cases, the <db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>() and <db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>() methods can be used to get information about the errors.</db:para>
<db:note>
<db:para>Calling this method clears all previous errors and warnings.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#warnings">warnings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMessageDescriptions">
<db:title>void QCanFrameProcessor::setMessageDescriptions(const QList&lt;QCanMessageDescription&gt; &amp;<db:emphasis>descriptions</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMessageDescriptions</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QCanMessageDescription&gt; &amp;</db:type>
<db:parameter>descriptions</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMessageDescriptions(const QList&lt;QCanMessageDescription&gt; &amp;descriptions)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replaces current message descriptions used by this frame processor with the new message descriptions <db:code role="parameter">descriptions</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#messageDescriptions">messageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#addMessageDescriptions">addMessageDescriptions</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#clearMessageDescriptions">clearMessageDescriptions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUniqueIdDescription">
<db:title>void QCanFrameProcessor::setUniqueIdDescription(const QCanUniqueIdDescription &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setUniqueIdDescription</db:methodname>
<db:methodparam>
<db:type>const QCanUniqueIdDescription &amp;</db:type>
<db:parameter>description</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setUniqueIdDescription(const QCanUniqueIdDescription &amp;description)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the unique identifier description to <db:code role="parameter">description</db:code>.</db:para>
<db:para>The unique identifier description must be valid in order to encode or decode the CAN bus frames. See the <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> class documentation for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#uniqueIdDescription">uniqueIdDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniqueIdDescription">
<db:title>QCanUniqueIdDescription QCanFrameProcessor::uniqueIdDescription() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanUniqueIdDescription</db:type>
<db:methodname>uniqueIdDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanUniqueIdDescription uniqueIdDescription() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unique identifier description.</db:para>
<db:para>The unique identifier description must be valid in order to encode or decode the CAN bus frames. See the <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> class documentation for more details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#setUniqueIdDescription">setUniqueIdDescription</db:link>()</db:member>
<db:member><db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="warnings">
<db:title>QStringList QCanFrameProcessor::warnings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>warnings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList warnings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of warnings generated during the last encoding or decoding call.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcanframeprocessor.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#errorString">errorString</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#prepareFrame">prepareFrame</db:link>()</db:member>
<db:member><db:link xlink:href="qcanframeprocessor.xml#parseFrame">parseFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
