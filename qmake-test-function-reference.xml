<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Test Functions</db:title>
<db:productname>QMake</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>QMake Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qmake-function-reference.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Replace Functions"/></db:extendedlink>
<db:abstract>
<db:para>QMake Manual.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis role="bold">&lt;Unknown command&gt;<db:code>contentspage</db:code></db:emphasis>{qmake Manual}{Contents}  Test functions return a boolean value that you can test for in the conditional parts of scopes. Test functions can be divided into built-in functions and function libraries.</db:para>
<db:para>See also <db:link xlink:href="qmake-function-reference.xml">Replace Functions</db:link>.</db:para>
<db:section xml:id="built-in-test-functions">
<db:title>Built-in Test Functions</db:title>
<db:para>Basic test functions are implemented as built-in functions.</db:para>
<db:section xml:id="cache-variablename-set-add-sub-transient-super-stash-source-variablename">
<db:title>cache(variablename, [set|add|sub] [transient] [super|stash], [source variablename])</db:title>
<db:para>This is an internal function that you will typically not need.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="config-config">
<db:title>CONFIG(config)</db:title>
<db:para>This function can be used to test for variables placed into the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable. This is the same as scopes, but has the added advantage that a second parameter can be passed to test for the active config. As the order of values is important in <db:code>CONFIG</db:code> variables (that is, the last one set will be considered the active config for mutually exclusive values) a second parameter can be used to specify a set of values to consider. For example:</db:para>
<db:programlisting language="cpp">CONFIG = debug
CONFIG += release
CONFIG(release, debug|release):message(Release build!) #will print
CONFIG(debug, debug|release):message(Debug build!) #no print
</db:programlisting>
<db:para>Because release is considered the active setting (for feature parsing) it will be the CONFIG used to generate the build file. In the common case a second parameter is not needed, but for specific mutual exclusive tests it is invaluable.</db:para>
</db:section>
<db:section xml:id="contains-variablename-value">
<db:title>contains(variablename, value)</db:title>
<db:para>Succeeds if the variable <db:code>variablename</db:code> contains the value <db:code>value</db:code>; otherwise fails. It is possible to specify a regular expression for parameter <db:emphasis>value</db:emphasis>.</db:para>
<db:para>You can check the return value of this function using a scope.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">contains( drivers, network ) {
    # drivers contains 'network'
    message( &quot;Configuring for network build...&quot; )
    HEADERS += network.h
    SOURCES += network.cpp
}
</db:programlisting>
<db:para>The contents of the scope are only processed if the <db:code>drivers</db:code> variable contains the value <db:code>network</db:code>. If this is the case, the appropriate files are added to the <db:link xlink:href="qmake-variable-reference.xml#sources">SOURCES</db:link> and <db:link xlink:href="qmake-variable-reference.xml#headers">HEADERS</db:link> variables.</db:para>
<db:anchor xml:id="countfunction"/>
</db:section>
<db:section xml:id="count-variablename-number">
<db:title>count(variablename, number)</db:title>
<db:para>Succeeds if the variable <db:code>variablename</db:code> contains a list with the specified <db:code>number</db:code> of values; otherwise fails.</db:para>
<db:para>This function is used to ensure that declarations inside a scope are only processed if the variable contains the correct number of values. For example:</db:para>
<db:programlisting language="cpp">options = $$find(CONFIG, &quot;debug&quot;) $$find(CONFIG, &quot;release&quot;)
count(options, 2) {
    message(Both release and debug specified.)
}
</db:programlisting>
</db:section>
<db:section xml:id="debug-level-message">
<db:title>debug(level, message)</db:title>
<db:para>Checks whether qmake runs at the specified debug level. If yes, it returns true and prints a debug message.</db:para>
</db:section>
<db:section xml:id="defined-name-type">
<db:title>defined(name[, type])</db:title>
<db:para>Tests whether the function or variable <db:code>name</db:code> is defined. If <db:code>type</db:code> is omitted, checks all functions. To check only variables or particular type of functions, specify <db:code>type</db:code>. It can have the following values:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>test</db:code> only checks test functions</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>replace</db:code> only checks replace functions</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>var</db:code> only checks variables</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="equals-variablename-value">
<db:title>equals(variablename, value)</db:title>
<db:para>Tests whether <db:code>variablename</db:code> equals the string <db:code>value</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">TARGET = helloworld
equals(TARGET, &quot;helloworld&quot;) {
    message(&quot;The target assignment was successful.&quot;)
}
</db:programlisting>
</db:section>
<db:section xml:id="error-string">
<db:title>error(string)</db:title>
<db:para>This function never returns a value. qmake displays <db:code>string</db:code> as an error message to the user and exits. This function should only be used for unrecoverable errors.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">error(An error has occurred in the configuration process.)
</db:programlisting>
</db:section>
<db:section xml:id="eval-string">
<db:title>eval(string)</db:title>
<db:para>Evaluates the contents of the string using qmake syntax rules and returns true. Definitions and assignments can be used in the string to modify the values of existing variables or create new definitions.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">eval(TARGET = myapp) {
    message($$TARGET)
}
</db:programlisting>
<db:note>
<db:para>Quotation marks can be used to delimit the string, and the return value can be discarded if it is not needed.</db:para>
</db:note>
</db:section>
<db:section xml:id="exists-filename">
<db:title>exists(filename)</db:title>
<db:para>Tests whether a file with the given <db:code>filename</db:code> exists. If the file exists, the function succeeds; otherwise it fails. If a regular expression is specified for the filename, this function succeeds if any file matches the regular expression specified.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">exists( $(QTDIR)/lib/libqt-mt* ) {
      message( &quot;Configuring for multi-threaded Qt...&quot; )
      CONFIG += thread
}
</db:programlisting>
<db:note>
<db:para>&quot;/&quot; should be used as a directory separator, regardless of the platform in use.</db:para>
</db:note>
</db:section>
<db:section xml:id="export-variablename">
<db:title>export(variablename)</db:title>
<db:para>Exports the current value of <db:code>variablename</db:code> from the local context of a function to the global context.</db:para>
<db:anchor xml:id="forfunction"/>
</db:section>
<db:section xml:id="for-iterate-list">
<db:title>for(iterate, list)</db:title>
<db:para>Starts a loop that iterates over all values in <db:code>list</db:code>, setting <db:code>iterate</db:code> to each value in turn. As a convenience, if <db:code>list</db:code> is 1..10 then iterate will iterate over the values 1 through 10.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">LIST = 1 2 3
for(a, LIST):exists(file.$${a}):message(I see a file.$${a}!)
</db:programlisting>
</db:section>
<db:section xml:id="greaterthan-variablename-value">
<db:title>greaterThan(variablename, value)</db:title>
<db:para>Tests that the value of <db:code>variablename</db:code> is greater than <db:code>value</db:code>. First, this function attempts a numerical comparison. If at least one of the operands fails to convert, this function does a string comparison.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">ANSWER = 42
greaterThan(ANSWER, 1) {
    message(&quot;The answer might be correct.&quot;)
}
</db:programlisting>
<db:para>It is impossible to compare two numbers as strings directly. As a workaround, construct temporary values with a non-numeric prefix and compare these.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">VALUE = 123
TMP_VALUE = x$$VALUE
greaterThan(TMP_VALUE, x456): message(&quot;Condition may be true.&quot;)
</db:programlisting>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml#lessthan-variablename-value">lessThan()</db:link>.</db:para>
</db:section>
<db:section xml:id="if-condition">
<db:title>if(condition)</db:title>
<db:para>Evaluates <db:code>condition</db:code>. It is used to group boolean expressions.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">if(linux-g++*|macx-g++*):CONFIG(debug, debug|release) {
    message(&quot;We are on Linux or Mac OS, and we are in debug mode.&quot;)
}
</db:programlisting>
</db:section>
<db:section xml:id="include-filename">
<db:title>include(filename)</db:title>
<db:para>Includes the contents of the file specified by <db:code>filename</db:code> into the current project at the point where it is included. This function succeeds if <db:code>filename</db:code> is included; otherwise it fails. The included file is processed immediately.</db:para>
<db:para>You can check whether the file was included by using this function as the condition for a scope. For example:</db:para>
<db:programlisting language="cpp">include( shared.pri )
OPTIONS = standard custom
!include( options.pri ) {
    message( &quot;No custom build options specified&quot; )
OPTIONS -= custom
}
</db:programlisting>
</db:section>
<db:section xml:id="infile-filename-var-val">
<db:title>infile(filename, var, val)</db:title>
<db:para>Succeeds if the file <db:code>filename</db:code> (when parsed by qmake itself) contains the variable <db:code>var</db:code> with a value of <db:code>val</db:code>; otherwise fails. If you do not specify <db:code>val</db:code>, the function tests whether <db:code>var</db:code> has been assigned in the file.</db:para>
</db:section>
<db:section xml:id="isactiveconfig">
<db:title>isActiveConfig</db:title>
<db:para>This is an alias for the <db:code>CONFIG</db:code> function.</db:para>
</db:section>
<db:section xml:id="isempty-variablename">
<db:title>isEmpty(variablename)</db:title>
<db:para>Succeeds if the variable <db:code>variablename</db:code> is empty; otherwise fails. This is the equivalent of <db:code>count( variablename, 0 )</db:code>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">isEmpty( CONFIG ) {
CONFIG += warn_on debug
}
</db:programlisting>
</db:section>
<db:section xml:id="isequal">
<db:title>isEqual</db:title>
<db:para>This is an alias for the <db:code>equals</db:code> function.</db:para>
</db:section>
<db:section xml:id="lessthan-variablename-value">
<db:title>lessThan(variablename, value)</db:title>
<db:para>Tests that the value of <db:code>variablename</db:code> is less than <db:code>value</db:code>. Works as <db:link xlink:href="qmake-test-function-reference.xml#greaterthan-variablename-value">greaterThan()</db:link>.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">ANSWER = 42
lessThan(ANSWER, 1) {
    message(&quot;The answer might be wrong.&quot;)
}
</db:programlisting>
</db:section>
<db:section xml:id="load-feature">
<db:title>load(feature)</db:title>
<db:para>Loads the feature file (<db:code>.prf</db:code>) specified by <db:code>feature</db:code>, unless the feature has already been loaded.</db:para>
</db:section>
<db:section xml:id="log-message">
<db:title>log(message)</db:title>
<db:para>Prints a message on the console. Unlike the <db:code>message</db:code> function, neither prepends text nor appends a line break.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml#message-string">message()</db:link>.</db:para>
</db:section>
<db:section xml:id="message-string">
<db:title>message(string)</db:title>
<db:para>Always succeeds, and displays <db:code>string</db:code> as a general message to the user. Unlike the <db:code>error()</db:code> function, this function allows processing to continue.</db:para>
<db:programlisting language="cpp">message( &quot;This is a message&quot; )
</db:programlisting>
<db:para>The above line causes &quot;This is a message&quot; to be written to the console. The use of quotation marks is optional, but recommended.</db:para>
<db:note>
<db:para>By default, messages are written out for each Makefile generated by qmake for a given project. If you want to ensure that messages only appear once for each project, test the <db:code>build_pass</db:code> variable <db:link xlink:href="qmake-language.xml#scopes">in conjunction with a scope</db:link> to filter out messages during builds. For example:</db:para>
</db:note>
<db:programlisting language="cpp">!build_pass:message( &quot;This is a message&quot; )
</db:programlisting>
</db:section>
<db:section xml:id="mkpath-dirpath">
<db:title>mkpath(dirPath)</db:title>
<db:para>Creates the directory path <db:code>dirPath</db:code>. This function is a wrapper around the QDir::mkpath function.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="requires-condition">
<db:title>requires(condition)</db:title>
<db:para>Evaluates <db:code>condition</db:code>. If the condition is false, qmake skips this project (and its <db:link xlink:href="qmake-variable-reference.xml#subdirs">SUBDIRS</db:link>) when building.</db:para>
<db:note>
<db:para>You can also use the <db:link xlink:href="qmake-variable-reference.xml#requires">REQUIRES</db:link> variable for this purpose. However, we recommend using this function, instead.</db:para>
</db:note>
</db:section>
<db:section xml:id="system-command">
<db:title>system(command)</db:title>
<db:para>Executes the given <db:code>command</db:code> in a secondary shell. Succeeds if the command returns with a zero exit status; otherwise fails. You can check the return value of this function using a scope.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">system(&quot;ls /bin&quot;): HAS_BIN = TRUE
</db:programlisting>
<db:para>See also the replace variant of <db:link xlink:href="qmake-function-reference.xml#system-replace">system()</db:link>.</db:para>
<db:anchor xml:id="touchfunction"/>
</db:section>
<db:section xml:id="touch-filename-reference-filename">
<db:title>touch(filename, reference_filename)</db:title>
<db:para>Updates the time stamp of <db:code>filename</db:code> to match the time stamp of <db:code>reference_filename</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="unset-variablename">
<db:title>unset(variablename)</db:title>
<db:para>Removes <db:code>variablename</db:code> from the current context.</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">NARF = zort
unset(NARF)
!defined(NARF, var) {
    message(&quot;NARF is not defined.&quot;)
}
</db:programlisting>
</db:section>
<db:section xml:id="versionatleast-variablename-versionnumber">
<db:title>versionAtLeast(variablename, versionNumber)</db:title>
<db:para>Tests that the version number from <db:code>variablename</db:code> is greater than or equal to <db:code>versionNumber</db:code>. The version number is considered to be a sequence of non-negative decimal numbers delimited by '.'; any non-numerical tail of the string will be ignored. Comparison is performed segment-wise from left to right; if one version is a prefix of the other, it is considered smaller.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="versionatmost-variablename-versionnumber">
<db:title>versionAtMost(variablename, versionNumber)</db:title>
<db:para>Tests that the version number from <db:code>variablename</db:code> is less than or equal to <db:code>versionNumber</db:code>. Works as <db:link xlink:href="qmake-test-function-reference.xml#versionatleast-variablename-versionnumber">versionAtLeast()</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="warning-string">
<db:title>warning(string)</db:title>
<db:para>Always succeeds, and displays <db:code>string</db:code> as a warning message to the user.</db:para>
</db:section>
<db:section xml:id="write-file-filename-variablename-mode">
<db:title>write_file(filename, [variablename, [mode]])</db:title>
<db:para>Writes the values of <db:code>variablename</db:code> to a file with the name <db:code>filename</db:code>, each value on a separate line. If <db:code>variablename</db:code> is not specified, creates an empty file. If <db:code>mode</db:code> is <db:code>append</db:code> and the file already exists, appends to it instead of replacing it.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
</db:section>
<db:section xml:id="test-function-library">
<db:title>Test Function Library</db:title>
<db:para>Complex test functions are implemented in a library of .prf files.</db:para>
<db:section xml:id="packagesexist-packages">
<db:title>packagesExist(packages)</db:title>
<db:para>Uses the PKGCONFIG mechanism to determine whether or not the given packages exist at the time of project parsing.</db:para>
<db:para>This can be useful to optionally enable or disable features. For example:</db:para>
<db:programlisting language="cpp">packagesExist(sqlite3 QtNetwork QtDeclarative) {
    DEFINES += USE_FANCY_UI
}
</db:programlisting>
<db:para>And then, in the code:</db:para>
<db:programlisting language="cpp">#ifdef USE_FANCY_UI
    // Use the fancy UI, as we have extra packages available
#endif
</db:programlisting>
</db:section>
<db:section xml:id="preparerecursivetarget-target">
<db:title>prepareRecursiveTarget(target)</db:title>
<db:para>Facilitates the creation of project-wide targets similar to the <db:code>install</db:code> target by preparing a target that iterates through all subdirectories. For example:</db:para>
<db:programlisting language="cpp">TEMPLATE = subdirs
SUBDIRS = one two three
prepareRecursiveTarget(check)
</db:programlisting>
<db:para>Subdirs that have <db:code>have_no_default</db:code> or <db:code>no_&lt;target&gt;_target</db:code> specified in their .CONFIG are excluded from this target:</db:para>
<db:programlisting language="cpp">two.CONFIG += no_check_target
</db:programlisting>
<db:para>You must add the prepared target manually to <db:link xlink:href="qmake-variable-reference.xml#qmake-extra-targets">QMAKE_EXTRA_TARGETS</db:link>:</db:para>
<db:programlisting language="cpp">QMAKE_EXTRA_TARGETS += check
</db:programlisting>
<db:para>To make the target global, the code above needs to be included into every subdirs subproject. In addition, to make these targets do anything, non-subdirs subprojects need to include respective code. The easiest way to achieve this is creating a custom feature file. For example:</db:para>
<db:programlisting language="cpp"># &amp;lt;project root&amp;gt;/features/mycheck.prf
equals(TEMPLATE, subdirs) {
    prepareRecursiveTarget(check)
} else {
    check.commands = echo hello user
}
QMAKE_EXTRA_TARGETS += check
</db:programlisting>
<db:para>The feature file needs to be injected into each subproject, for example by .qmake.conf:</db:para>
<db:programlisting language="cpp"># &amp;lt;project root&amp;gt;/.qmake.conf
CONFIG += mycheck
</db:programlisting>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="qtcompiletest-test">
<db:title>qtCompileTest(test)</db:title>
<db:para>Builds a test project. If the test passes, true is returned and <db:code>config_&lt;test&gt;</db:code> is added to the <db:link xlink:href="qmake-variable-reference.xml#config">CONFIG</db:link> variable. Otherwise, false is returned.</db:para>
<db:para>To make this function available, you need to load the respective feature file:</db:para>
<db:programlisting language="cpp"># &amp;lt;project root&amp;gt;/project.pro
load(configure)
</db:programlisting>
<db:para>This also sets the variable QMAKE_CONFIG_TESTS_DIR to the <db:code>config.tests</db:code> subdirectory of the project's parent directory. It is possible to override this value after loading the feature file.</db:para>
<db:para>Inside the tests directory, there has to be one subdirectory per test that contains a simple qmake project. The following code snippet illustrates the .pro file of the project:</db:para>
<db:programlisting language="cpp"># &amp;lt;project root&amp;gt;/config.tests/test/test.pro
SOURCES = main.cpp
LIBS += -ltheFeature
# Note that the test project is built without Qt by default.
</db:programlisting>
<db:para>The following code snippet illustrates the main .cpp file of the project:</db:para>
<db:programlisting language="cpp">// &amp;lt;project root&amp;gt;/config.tests/test/main.cpp
#include &amp;lt;TheFeature/MainHeader.h&amp;gt;
int main() { return featureFunction(); }
</db:programlisting>
<db:para>The following code snippet shows the invocation of the test:</db:para>
<db:programlisting language="cpp"># &amp;lt;project root&amp;gt;/project.pro
qtCompileTest(test)
</db:programlisting>
<db:para>If the test project is built successfully, the test passes.</db:para>
<db:para>The test results are automatically cached, which also makes them available to all subprojects. It is therefore recommended to run all configuration tests in the top-level project file.</db:para>
<db:para>To suppress the re-use of cached results, pass <db:code>CONFIG+=recheck</db:code> to qmake.</db:para>
<db:para>See also <db:link xlink:href="qmake-test-function-reference.xml#load-feature">load()</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="qthavemodule-name">
<db:title>qtHaveModule(name)</db:title>
<db:para>Checks whether the Qt module specified by <db:code>name</db:code> is present. For a list of possible values, see <db:link xlink:href="qmake-variable-reference.xml#qt">QT</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.0.1.</db:para>
</db:section>
</db:section>
</db:article>
