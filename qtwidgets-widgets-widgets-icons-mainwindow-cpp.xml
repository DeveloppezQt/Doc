<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Icons Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Icons example shows how <db:link xlink:href="qicon.xml">QIcon</db:link> can generate pixmaps reflecting an icon's state, mode and size.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;iconpreviewarea.h&quot;
#include &quot;iconsizespinbox.h&quot;
#include &quot;imagedelegate.h&quot;
#include &quot;mainwindow.h&quot;

enum { OtherSize = QStyle::PM_CustomBase };

MainWindow::MainWindow()
{
    QWidget *centralWidget = new QWidget(this);
    setCentralWidget(centralWidget);

    createActions();

    QGridLayout *mainLayout = new QGridLayout(centralWidget);

    QGroupBox *previewGroupBox = new QGroupBox(tr(&quot;Preview&quot;));
    previewArea = new IconPreviewArea(previewGroupBox);
    QVBoxLayout *previewLayout = new QVBoxLayout(previewGroupBox);
    previewLayout-&amp;gt;addWidget(previewArea);

    mainLayout-&amp;gt;addWidget(previewGroupBox, 0, 0, 1, 2);
    mainLayout-&amp;gt;addWidget(createImagesGroupBox(), 1, 0);
    QVBoxLayout *vBox = new QVBoxLayout;
    vBox-&amp;gt;addWidget(createIconSizeGroupBox());
    vBox-&amp;gt;addWidget(createHighDpiIconSizeGroupBox());
    vBox-&amp;gt;addItem(new QSpacerItem(0, 0, QSizePolicy::Ignored, QSizePolicy::MinimumExpanding));
    mainLayout-&amp;gt;addLayout(vBox, 1, 1);
    createContextMenu();

    setWindowTitle(tr(&quot;Icons&quot;));
    checkCurrentStyle();
    sizeButtonGroup-&amp;gt;button(OtherSize)-&amp;gt;click();
}

void MainWindow::show()
{
    QMainWindow::show();
    connect(windowHandle(), &amp;amp;QWindow::screenChanged, this, &amp;amp;MainWindow::screenChanged);
    screenChanged();
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Icons&quot;),
            tr(&quot;The &amp;lt;b&amp;gt;Icons&amp;lt;/b&amp;gt; example illustrates how Qt renders an icon in &quot;
               &quot;different modes (active, normal, disabled, and selected) and &quot;
               &quot;states (on and off) based on a set of images.&quot;));
}

void MainWindow::changeStyle(bool checked)
{
    if (!checked)
        return;

    const QAction *action = qobject_cast&amp;lt;QAction *&amp;gt;(sender());
    QStyle *style = QStyleFactory::create(action-&amp;gt;data().toString());
    Q_ASSERT(style);
    QApplication::setStyle(style);

    foreach (QAbstractButton *button, sizeButtonGroup-&amp;gt;buttons()) {
        const QStyle::PixelMetric metric = static_cast&amp;lt;QStyle::PixelMetric&amp;gt;(sizeButtonGroup-&amp;gt;id(button));
        const int value = style-&amp;gt;pixelMetric(metric);
        switch (metric) {
        case QStyle::PM_SmallIconSize:
            button-&amp;gt;setText(tr(&quot;Small (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_LargeIconSize:
            button-&amp;gt;setText(tr(&quot;Large (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_ToolBarIconSize:
            button-&amp;gt;setText(tr(&quot;Toolbars (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_ListViewIconSize:
            button-&amp;gt;setText(tr(&quot;List views (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_IconViewIconSize:
            button-&amp;gt;setText(tr(&quot;Icon views (%1 x %1)&quot;).arg(value));
            break;
        case QStyle::PM_TabBarIconSize:
            button-&amp;gt;setText(tr(&quot;Tab bars (%1 x %1)&quot;).arg(value));
            break;
        default:
            break;
        }
    }

    triggerChangeSize();
}

void MainWindow::changeSize(int id, bool checked)
{
    if (!checked)
        return;

    const bool other = id == int(OtherSize);
    const int extent = other
        ? otherSpinBox-&amp;gt;value()
        : QApplication::style()-&amp;gt;pixelMetric(static_cast&amp;lt;QStyle::PixelMetric&amp;gt;(id));

    previewArea-&amp;gt;setSize(QSize(extent, extent));
    otherSpinBox-&amp;gt;setEnabled(other);
}

void MainWindow::triggerChangeSize()
{
    changeSize(sizeButtonGroup-&amp;gt;checkedId(), true);
}

void MainWindow::changeIcon()
{
    QIcon icon;

    for (int row = 0; row &amp;lt; imagesTable-&amp;gt;rowCount(); ++row) {
        const QTableWidgetItem *fileItem = imagesTable-&amp;gt;item(row, 0);
        const QTableWidgetItem *modeItem = imagesTable-&amp;gt;item(row, 1);
        const QTableWidgetItem *stateItem = imagesTable-&amp;gt;item(row, 2);

        if (fileItem-&amp;gt;checkState() == Qt::Checked) {
            const int modeIndex = IconPreviewArea::iconModeNames().indexOf(modeItem-&amp;gt;text());
            Q_ASSERT(modeIndex &amp;gt;= 0);
            const int stateIndex = IconPreviewArea::iconStateNames().indexOf(stateItem-&amp;gt;text());
            Q_ASSERT(stateIndex &amp;gt;= 0);
            const QIcon::Mode mode = IconPreviewArea::iconModes().at(modeIndex);
            const QIcon::State state = IconPreviewArea::iconStates().at(stateIndex);

            const QString fileName = fileItem-&amp;gt;data(Qt::UserRole).toString();
            QImage image(fileName);
            if (!image.isNull())
                icon.addPixmap(QPixmap::fromImage(image), mode, state);
        }
    }

    previewArea-&amp;gt;setIcon(icon);
}

void MainWindow::addSampleImages()
{
    addImages(QLatin1String(SRCDIR) + QLatin1String(&quot;/images&quot;));
}

void MainWindow::addOtherImages()
{
    static bool firstInvocation = true;
    QString directory;
    if (firstInvocation) {
        firstInvocation = false;
        directory = QStandardPaths::standardLocations(QStandardPaths::PicturesLocation).value(0, QString());
    }
    addImages(directory);
}

void MainWindow::addImages(const QString &amp;amp;directory)
{
    QFileDialog fileDialog(this, tr(&quot;Open Images&quot;), directory);
    QStringList mimeTypeFilters;
    foreach (const QByteArray &amp;amp;mimeTypeName, QImageReader::supportedMimeTypes())
        mimeTypeFilters.append(mimeTypeName);
    mimeTypeFilters.sort();
    fileDialog.setMimeTypeFilters(mimeTypeFilters);
    fileDialog.selectMimeTypeFilter(QLatin1String(&quot;image/png&quot;));
    fileDialog.setAcceptMode(QFileDialog::AcceptOpen);
    fileDialog.setFileMode(QFileDialog::ExistingFiles);
    if (!nativeFileDialogAct-&amp;gt;isChecked())
        fileDialog.setOption(QFileDialog::DontUseNativeDialog);
    if (fileDialog.exec() == QDialog::Accepted)
        loadImages(fileDialog.selectedFiles());
}

void MainWindow::loadImages(const QStringList &amp;amp;fileNames)
{
    foreach (const QString &amp;amp;fileName, fileNames) {
        const int row = imagesTable-&amp;gt;rowCount();
        imagesTable-&amp;gt;setRowCount(row + 1);
        const QFileInfo fileInfo(fileName);
        const QString imageName = fileInfo.baseName();
        const QString fileName2x = fileInfo.absolutePath()
            + QLatin1Char('/') + imageName + QLatin1String(&quot;@2x.&quot;) + fileInfo.suffix();
        const QFileInfo fileInfo2x(fileName2x);
        const QImage image(fileName);
        const QString toolTip =
            tr(&quot;Directory: %1\nFile: %2\nFile@2x: %3\nSize: %4x%5&quot;)
               .arg(QDir::toNativeSeparators(fileInfo.absolutePath()), fileInfo.fileName())
               .arg(fileInfo2x.exists() ? fileInfo2x.fileName() : tr(&quot;&amp;lt;None&amp;gt;&quot;))
               .arg(image.width()).arg(image.height());
        QTableWidgetItem *fileItem = new QTableWidgetItem(imageName);
        fileItem-&amp;gt;setData(Qt::UserRole, fileName);
        fileItem-&amp;gt;setIcon(QPixmap::fromImage(image));
        fileItem-&amp;gt;setFlags((fileItem-&amp;gt;flags() | Qt::ItemIsUserCheckable) &amp;amp; ~Qt::ItemIsEditable);
        fileItem-&amp;gt;setToolTip(toolTip);

        QIcon::Mode mode = QIcon::Normal;
        QIcon::State state = QIcon::Off;
        if (guessModeStateAct-&amp;gt;isChecked()) {
            if (imageName.contains(QLatin1String(&quot;_act&quot;), Qt::CaseInsensitive))
                mode = QIcon::Active;
            else if (imageName.contains(QLatin1String(&quot;_dis&quot;), Qt::CaseInsensitive))
                mode = QIcon::Disabled;
            else if (imageName.contains(QLatin1String(&quot;_sel&quot;), Qt::CaseInsensitive))
                mode = QIcon::Selected;

            if (imageName.contains(QLatin1String(&quot;_on&quot;), Qt::CaseInsensitive))
                state = QIcon::On;
        }

        imagesTable-&amp;gt;setItem(row, 0, fileItem);
        QTableWidgetItem *modeItem =
            new QTableWidgetItem(IconPreviewArea::iconModeNames().at(IconPreviewArea::iconModes().indexOf(mode)));
        modeItem-&amp;gt;setToolTip(toolTip);
        imagesTable-&amp;gt;setItem(row, 1, modeItem);
        QTableWidgetItem *stateItem =
            new QTableWidgetItem(IconPreviewArea::iconStateNames().at(IconPreviewArea::iconStates().indexOf(state)));
        stateItem-&amp;gt;setToolTip(toolTip);
        imagesTable-&amp;gt;setItem(row, 2, stateItem);
        imagesTable-&amp;gt;openPersistentEditor(modeItem);
        imagesTable-&amp;gt;openPersistentEditor(stateItem);

        fileItem-&amp;gt;setCheckState(Qt::Checked);
    }
}

void MainWindow::useHighDpiPixmapsChanged(int checkState)
{
    QCoreApplication::setAttribute(Qt::AA_UseHighDpiPixmaps, checkState == Qt::Checked);
    changeIcon();
}

void MainWindow::removeAllImages()
{
    imagesTable-&amp;gt;setRowCount(0);
    changeIcon();
}

QWidget *MainWindow::createImagesGroupBox()
{
    QGroupBox *imagesGroupBox = new QGroupBox(tr(&quot;Images&quot;));

    imagesTable = new QTableWidget;
    imagesTable-&amp;gt;setSelectionMode(QAbstractItemView::NoSelection);
    imagesTable-&amp;gt;setItemDelegate(new ImageDelegate(this));

    QStringList labels;
    labels &amp;lt;&amp;lt; tr(&quot;Image&quot;) &amp;lt;&amp;lt; tr(&quot;Mode&quot;) &amp;lt;&amp;lt; tr(&quot;State&quot;);

    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setDefaultSectionSize(90);
    imagesTable-&amp;gt;setColumnCount(3);
    imagesTable-&amp;gt;setHorizontalHeaderLabels(labels);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(0, QHeaderView::Stretch);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(1, QHeaderView::Fixed);
    imagesTable-&amp;gt;horizontalHeader()-&amp;gt;setSectionResizeMode(2, QHeaderView::Fixed);
    imagesTable-&amp;gt;verticalHeader()-&amp;gt;hide();

    connect(imagesTable, &amp;amp;QTableWidget::itemChanged,
            this, &amp;amp;MainWindow::changeIcon);

    QVBoxLayout *layout = new QVBoxLayout(imagesGroupBox);
    layout-&amp;gt;addWidget(imagesTable);
    return imagesGroupBox;
}

QWidget *MainWindow::createIconSizeGroupBox()
{
    QGroupBox *iconSizeGroupBox = new QGroupBox(tr(&quot;Icon Size&quot;));

    sizeButtonGroup = new QButtonGroup(this);
    sizeButtonGroup-&amp;gt;setExclusive(true);

    connect(sizeButtonGroup, QOverload&amp;lt;int, bool&amp;gt;::of(&amp;amp;QButtonGroup::buttonToggled),
            this, &amp;amp;MainWindow::changeSize);

    QRadioButton *smallRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(smallRadioButton, QStyle::PM_SmallIconSize);
    QRadioButton *largeRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(largeRadioButton, QStyle::PM_LargeIconSize);
    QRadioButton *toolBarRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(toolBarRadioButton, QStyle::PM_ToolBarIconSize);
    QRadioButton *listViewRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(listViewRadioButton, QStyle::PM_ListViewIconSize);
    QRadioButton *iconViewRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(iconViewRadioButton, QStyle::PM_IconViewIconSize);
    QRadioButton *tabBarRadioButton = new QRadioButton;
    sizeButtonGroup-&amp;gt;addButton(tabBarRadioButton, QStyle::PM_TabBarIconSize);
    QRadioButton *otherRadioButton = new QRadioButton(tr(&quot;Other:&quot;));
    sizeButtonGroup-&amp;gt;addButton(otherRadioButton, OtherSize);
    otherSpinBox = new IconSizeSpinBox;
    otherSpinBox-&amp;gt;setRange(8, 256);
    const QString spinBoxToolTip =
        tr(&quot;Enter a custom size within %1..%2&quot;)
           .arg(otherSpinBox-&amp;gt;minimum()).arg(otherSpinBox-&amp;gt;maximum());
    otherSpinBox-&amp;gt;setValue(64);
    otherSpinBox-&amp;gt;setToolTip(spinBoxToolTip);
    otherRadioButton-&amp;gt;setToolTip(spinBoxToolTip);

    connect(otherSpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            this, &amp;amp;MainWindow::triggerChangeSize);

    QHBoxLayout *otherSizeLayout = new QHBoxLayout;
    otherSizeLayout-&amp;gt;addWidget(otherRadioButton);
    otherSizeLayout-&amp;gt;addWidget(otherSpinBox);
    otherSizeLayout-&amp;gt;addStretch();

    QGridLayout *layout = new QGridLayout(iconSizeGroupBox);
    layout-&amp;gt;addWidget(smallRadioButton, 0, 0);
    layout-&amp;gt;addWidget(largeRadioButton, 1, 0);
    layout-&amp;gt;addWidget(toolBarRadioButton, 2, 0);
    layout-&amp;gt;addWidget(listViewRadioButton, 0, 1);
    layout-&amp;gt;addWidget(iconViewRadioButton, 1, 1);
    layout-&amp;gt;addWidget(tabBarRadioButton, 2, 1);
    layout-&amp;gt;addLayout(otherSizeLayout, 3, 0, 1, 2);
    layout-&amp;gt;setRowStretch(4, 1);
    return iconSizeGroupBox;
}

void MainWindow::screenChanged()
{
    devicePixelRatioLabel-&amp;gt;setText(QString::number(devicePixelRatioF()));
    if (const QWindow *window = windowHandle()) {
        const QScreen *screen = window-&amp;gt;screen();
        const QString screenDescription =
            tr(&quot;\&quot;%1\&quot; (%2x%3)&quot;).arg(screen-&amp;gt;name())
               .arg(screen-&amp;gt;geometry().width()).arg(screen-&amp;gt;geometry().height());
        screenNameLabel-&amp;gt;setText(screenDescription);
    }
    changeIcon();
}

QWidget *MainWindow::createHighDpiIconSizeGroupBox()
{
    QGroupBox *highDpiGroupBox = new QGroupBox(tr(&quot;High DPI Scaling&quot;));
    QFormLayout *layout = new QFormLayout(highDpiGroupBox);
    devicePixelRatioLabel = new QLabel(highDpiGroupBox);
    screenNameLabel = new QLabel(highDpiGroupBox);
    layout-&amp;gt;addRow(tr(&quot;Screen:&quot;), screenNameLabel);
    layout-&amp;gt;addRow(tr(&quot;Device pixel ratio:&quot;), devicePixelRatioLabel);
    QCheckBox *highDpiPixmapsCheckBox = new QCheckBox(QLatin1String(&quot;Qt::AA_UseHighDpiPixmaps&quot;));
    highDpiPixmapsCheckBox-&amp;gt;setChecked(QCoreApplication::testAttribute(Qt::AA_UseHighDpiPixmaps));
    connect(highDpiPixmapsCheckBox, &amp;amp;QCheckBox::stateChanged, this, &amp;amp;MainWindow::useHighDpiPixmapsChanged);
    layout-&amp;gt;addRow(highDpiPixmapsCheckBox);
    return highDpiGroupBox;
}

void MainWindow::createActions()
{
    QMenu *fileMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;File&quot;));

    addSampleImagesAct = new QAction(tr(&quot;Add &amp;amp;Sample Images...&quot;), this);
    addSampleImagesAct-&amp;gt;setShortcut(tr(&quot;Ctrl+A&quot;));
    connect(addSampleImagesAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::addSampleImages);
    fileMenu-&amp;gt;addAction(addSampleImagesAct);

    addOtherImagesAct = new QAction(tr(&quot;&amp;amp;Add Images...&quot;), this);
    addOtherImagesAct-&amp;gt;setShortcut(QKeySequence::Open);
    connect(addOtherImagesAct, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::addOtherImages);
    fileMenu-&amp;gt;addAction(addOtherImagesAct);

    removeAllImagesAct = new QAction(tr(&quot;&amp;amp;Remove All Images&quot;), this);
    removeAllImagesAct-&amp;gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    connect(removeAllImagesAct, &amp;amp;QAction::triggered,
            this, &amp;amp;MainWindow::removeAllImages);
    fileMenu-&amp;gt;addAction(removeAllImagesAct);

    fileMenu-&amp;gt;addSeparator();

    QAction *exitAct = fileMenu-&amp;gt;addAction(tr(&quot;&amp;amp;Quit&quot;), this, &amp;amp;QWidget::close);
    exitAct-&amp;gt;setShortcuts(QKeySequence::Quit);

    QMenu *viewMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;View&quot;));

    styleActionGroup = new QActionGroup(this);
    foreach (const QString &amp;amp;styleName, QStyleFactory::keys()) {
        QAction *action = new QAction(tr(&quot;%1 Style&quot;).arg(styleName), styleActionGroup);
        action-&amp;gt;setData(styleName);
        action-&amp;gt;setCheckable(true);
        connect(action, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::changeStyle);
        viewMenu-&amp;gt;addAction(action);
    }

    QMenu *settingsMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Settings&quot;));

    guessModeStateAct = new QAction(tr(&quot;&amp;amp;Guess Image Mode/State&quot;), this);
    guessModeStateAct-&amp;gt;setCheckable(true);
    guessModeStateAct-&amp;gt;setChecked(true);
    settingsMenu-&amp;gt;addAction(guessModeStateAct);

    nativeFileDialogAct = new QAction(tr(&quot;&amp;amp;Use Native File Dialog&quot;), this);
    nativeFileDialogAct-&amp;gt;setCheckable(true);
    nativeFileDialogAct-&amp;gt;setChecked(true);
    settingsMenu-&amp;gt;addAction(nativeFileDialogAct);

    QMenu *helpMenu = menuBar()-&amp;gt;addMenu(tr(&quot;&amp;amp;Help&quot;));
    helpMenu-&amp;gt;addAction(tr(&quot;&amp;amp;About&quot;), this, &amp;amp;MainWindow::about);
    helpMenu-&amp;gt;addAction(tr(&quot;About &amp;amp;Qt&quot;), qApp, &amp;amp;QApplication::aboutQt);
}

void MainWindow::createContextMenu()
{
    imagesTable-&amp;gt;setContextMenuPolicy(Qt::ActionsContextMenu);
    imagesTable-&amp;gt;addAction(addSampleImagesAct);
    imagesTable-&amp;gt;addAction(addOtherImagesAct);
    imagesTable-&amp;gt;addAction(removeAllImagesAct);
}

void MainWindow::checkCurrentStyle()
{
    foreach (QAction *action, styleActionGroup-&amp;gt;actions()) {
        QString styleName = action-&amp;gt;data().toString();
        QScopedPointer&amp;lt;QStyle&amp;gt; candidate(QStyleFactory::create(styleName));
        Q_ASSERT(!candidate.isNull());
        if (candidate-&amp;gt;metaObject()-&amp;gt;className()
                == QApplication::style()-&amp;gt;metaObject()-&amp;gt;className()) {
            action-&amp;gt;trigger();
            return;
        }
    }
}

</db:programlisting>
</db:article>
