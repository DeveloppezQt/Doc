<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ReflectionProbe QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines a reflection probe in the scene.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Node</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A reflection probe is used to provide reflections of the current scene to the objects. The probe provides properties to the runtime which are then used to render the scene to a cube map. The cube map is then used as the reflection information for the reflecting objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-reflectionprobes-example.xml">Qt Quick 3D - Reflection Probes Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="boxOffset-prop">
<db:title>boxOffset : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>boxOffset</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Box offset is used to move the box relative to the reflection probe position. Since the probe captures the environment from its position, this property can be used to move the box around without affecting the position where the probe capture the environment. This property alongside with <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#boxSize-prop">ReflectionProbe::boxSize</db:link> will be used to determine the object that fall inside the box. With <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#parallaxCorrection-prop">ReflectionProbe::parallaxCorrection</db:link> turned on, this property can be used to position the box to get more accurate reflections.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#parallaxCorrection-prop">parallaxCorrection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boxSize-prop">
<db:title>boxSize : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>boxSize</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Box size is used to determine which objects get their reflections from this <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml">ReflectionProbe</db:link>. Objects that are inside the box are under the influence of this <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml">ReflectionProbe</db:link>. If an object lies inside more than one reflection probe at the same time, the object is considered to be inside the nearest reflection probe. With <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#parallaxCorrection-prop">ReflectionProbe::parallaxCorrection</db:link> turned on the size is also used to calculate the distance of the reflections in the cube map.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#parallaxCorrection-prop">parallaxCorrection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearColor-prop">
<db:title>clearColor : Color</db:title>
<db:fieldsynopsis>
<db:type>Color</db:type>
<db:varname>clearColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Clear color is the color used to clear the cube map prior rendering the scene.</db:para>
</db:section>
<db:section xml:id="debugView-prop">
<db:title>[since 6.4] debugView : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>debugView</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set to true, a wireframe is rendered to visualize the reflection probe box.</db:para>
<db:para>This property was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="parallaxCorrection-prop">
<db:title>parallaxCorrection : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>parallaxCorrection</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>By default the reflections provided by the reflection probe are assumed to be from an infinite distance similar to the skybox. This works fine for environmental reflections but for tight spaces this causes perspective errors in the reflections. To fix this parallax correction can be turned on. The distance of the reflection is then determined by the <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#boxSize-prop">ReflectionProbe::boxSize</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#boxSize-prop">boxSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quality-prop">
<db:title>quality : ReflectionQuality</db:title>
<db:fieldsynopsis>
<db:type>ReflectionQuality</db:type>
<db:varname>quality</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Quality determines the resolution of the cube map. The qualities are <db:code>ReflectionQuality.VeryLow</db:code>, <db:code>ReflectionQuality.Low</db:code>, <db:code>ReflectionQuality.Medium</db:code>, <db:code>ReflectionQuality.High</db:code> and <db:code>ReflectionQuality.VeryHigh</db:code> corresponding to 128x128, 256x256, 512x512, 1024x1024 and 2048x2048 resolutions.</db:para>
</db:section>
<db:section xml:id="refreshMode-prop">
<db:title>refreshMode : ReflectionRefreshMode</db:title>
<db:fieldsynopsis>
<db:type>ReflectionRefreshMode</db:type>
<db:varname>refreshMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Refresh mode tells the runtime how many times the cube map is rendered. The settings are <db:code>ReflectionRefreshMode.FirstFrame</db:code> and <db:code>ReflectionRefreshMode.EveryFrame</db:code>. With <db:code>ReflectionRefreshMode.FirstFrame</db:code> the scene is rendered once and with <db:code>ReflectionRefreshMode.EveryFrame</db:code> the scene is rendered every frame.</db:para>
<db:note>
<db:para>Use <db:code>ReflectionRefreshMode.FirstFrame</db:code> for improved performance.</db:para>
</db:note>
</db:section>
<db:section xml:id="timeSlicing-prop">
<db:title>timeSlicing : ReflectionTimeSlicing</db:title>
<db:fieldsynopsis>
<db:type>ReflectionTimeSlicing</db:type>
<db:varname>timeSlicing</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Time slicing determines how the cube map render is timed. Options are <db:code>ReflectionTimeSlicing.None</db:code>, <db:code>ReflectionTimeSlicing.AllFacesAtOnce</db:code> and <db:code>ReflectionTimeSlicing.IndividualFaces</db:code>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>ReflectionTimeSlicing.None</db:para>
</db:td>
<db:td>
<db:para>All faces of the cube map are rendered and prefiltered during one frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ReflectionTimeSlicing.AllFacesAtOnce</db:para>
</db:td>
<db:td>
<db:para>All faces are rendered during one frame but the prefiltering is divided to subsquent frames with each mip level handled on their own frame. Rough surface reflections are thus refreshed every sixth frame while smooth surfaces have reflections that refresh every frame.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>ReflectionTimeSlicing.IndividualFaces</db:para>
</db:td>
<db:td>
<db:para>Each face is rendered and prefiltered in a separate frame. Thus all reflections are refreshed every sixth frame.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Use <db:code>ReflectionTimeSlicing.AllFacesAtOnce</db:code> or <db:code>ReflectionTimeSlicing.IndividualFaces</db:code> to increase performance.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="scheduleUpdate-method">
<db:title>scheduleUpdate()</db:title>
<db:para>Updates the reflection probe render when called while <db:link xlink:href="qml-qtquick3d-reflectionprobe.xml#refreshMode-prop">ReflectionProbe::refreshMode</db:link> is set as <db:code>ReflectionRefreshMode.FirstFrame</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
