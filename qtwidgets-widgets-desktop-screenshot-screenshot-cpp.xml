<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Screenshot Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Screenshot example shows how to take a screenshot of the desktop.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &amp;lt;QtWidgets&amp;gt;

#include &quot;screenshot.h&quot;

Screenshot::Screenshot()
    :  screenshotLabel(new QLabel(this))
{
    screenshotLabel-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    screenshotLabel-&amp;gt;setAlignment(Qt::AlignCenter);

    const QRect screenGeometry = QApplication::desktop()-&amp;gt;screenGeometry(this);
    screenshotLabel-&amp;gt;setMinimumSize(screenGeometry.width() / 8, screenGeometry.height() / 8);

    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    mainLayout-&amp;gt;addWidget(screenshotLabel);

    QGroupBox *optionsGroupBox = new QGroupBox(tr(&quot;Options&quot;), this);
    delaySpinBox = new QSpinBox(optionsGroupBox);
    delaySpinBox-&amp;gt;setSuffix(tr(&quot; s&quot;));
    delaySpinBox-&amp;gt;setMaximum(60);

    connect(delaySpinBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QSpinBox::valueChanged),
            this, &amp;amp;Screenshot::updateCheckBox);

    hideThisWindowCheckBox = new QCheckBox(tr(&quot;Hide This Window&quot;), optionsGroupBox);

    QGridLayout *optionsGroupBoxLayout = new QGridLayout(optionsGroupBox);
    optionsGroupBoxLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Screenshot Delay:&quot;), this), 0, 0);
    optionsGroupBoxLayout-&amp;gt;addWidget(delaySpinBox, 0, 1);
    optionsGroupBoxLayout-&amp;gt;addWidget(hideThisWindowCheckBox, 1, 0, 1, 2);

    mainLayout-&amp;gt;addWidget(optionsGroupBox);

    QHBoxLayout *buttonsLayout = new QHBoxLayout;
    newScreenshotButton = new QPushButton(tr(&quot;New Screenshot&quot;), this);
    connect(newScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Screenshot::newScreenshot);
    buttonsLayout-&amp;gt;addWidget(newScreenshotButton);
    QPushButton *saveScreenshotButton = new QPushButton(tr(&quot;Save Screenshot&quot;), this);
    connect(saveScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Screenshot::saveScreenshot);
    buttonsLayout-&amp;gt;addWidget(saveScreenshotButton);
    QPushButton *quitScreenshotButton = new QPushButton(tr(&quot;Quit&quot;), this);
    quitScreenshotButton-&amp;gt;setShortcut(Qt::CTRL + Qt::Key_Q);
    connect(quitScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;QWidget::close);
    buttonsLayout-&amp;gt;addWidget(quitScreenshotButton);
    buttonsLayout-&amp;gt;addStretch();
    mainLayout-&amp;gt;addLayout(buttonsLayout);

    shootScreen();
    delaySpinBox-&amp;gt;setValue(5);

    setWindowTitle(tr(&quot;Screenshot&quot;));
    resize(300, 200);
}

void Screenshot::resizeEvent(QResizeEvent * /* event */)
{
    QSize scaledSize = originalPixmap.size();
    scaledSize.scale(screenshotLabel-&amp;gt;size(), Qt::KeepAspectRatio);
    if (!screenshotLabel-&amp;gt;pixmap() || scaledSize != screenshotLabel-&amp;gt;pixmap()-&amp;gt;size())
        updateScreenshotLabel();
}

void Screenshot::newScreenshot()
{
    if (hideThisWindowCheckBox-&amp;gt;isChecked())
        hide();
    newScreenshotButton-&amp;gt;setDisabled(true);

    QTimer::singleShot(delaySpinBox-&amp;gt;value() * 1000, this, &amp;amp;Screenshot::shootScreen);
}

void Screenshot::saveScreenshot()
{
    const QString format = &quot;png&quot;;
    QString initialPath = QStandardPaths::writableLocation(QStandardPaths::PicturesLocation);
    if (initialPath.isEmpty())
        initialPath = QDir::currentPath();
    initialPath += tr(&quot;/untitled.&quot;) + format;

    QFileDialog fileDialog(this, tr(&quot;Save As&quot;), initialPath);
    fileDialog.setAcceptMode(QFileDialog::AcceptSave);
    fileDialog.setFileMode(QFileDialog::AnyFile);
    fileDialog.setDirectory(initialPath);
    QStringList mimeTypes;
    foreach (const QByteArray &amp;amp;bf, QImageWriter::supportedMimeTypes())
        mimeTypes.append(QLatin1String(bf));
    fileDialog.setMimeTypeFilters(mimeTypes);
    fileDialog.selectMimeTypeFilter(&quot;image/&quot; + format);
    fileDialog.setDefaultSuffix(format);
    if (fileDialog.exec() != QDialog::Accepted)
        return;
    const QString fileName = fileDialog.selectedFiles().first();
    if (!originalPixmap.save(fileName)) {
        QMessageBox::warning(this, tr(&quot;Save Error&quot;), tr(&quot;The image could not be saved to \&quot;%1\&quot;.&quot;)
                             .arg(QDir::toNativeSeparators(fileName)));
    }
}

void Screenshot::shootScreen()
{
    QScreen *screen = QGuiApplication::primaryScreen();
    if (const QWindow *window = windowHandle())
        screen = window-&amp;gt;screen();
    if (!screen)
        return;

    if (delaySpinBox-&amp;gt;value() != 0)
        QApplication::beep();

    originalPixmap = screen-&amp;gt;grabWindow(0);
    updateScreenshotLabel();

    newScreenshotButton-&amp;gt;setDisabled(false);
    if (hideThisWindowCheckBox-&amp;gt;isChecked())
        show();
}

void Screenshot::updateCheckBox()
{
    if (delaySpinBox-&amp;gt;value() == 0) {
        hideThisWindowCheckBox-&amp;gt;setDisabled(true);
        hideThisWindowCheckBox-&amp;gt;setChecked(false);
    } else {
        hideThisWindowCheckBox-&amp;gt;setDisabled(false);
    }
}

void Screenshot::updateScreenshotLabel()
{
    screenshotLabel-&amp;gt;setPixmap(originalPixmap.scaled(screenshotLabel-&amp;gt;size(),
                                                     Qt::KeepAspectRatio,
                                                     Qt::SmoothTransformation));
}

</db:programlisting>
</db:article>
