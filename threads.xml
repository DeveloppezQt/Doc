<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Thread Support in Qt</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="threads-starting.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Starting Threads with QThread"/></db:extendedlink>
<db:abstract>
<db:para>A detailed discussion of thread handling in Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt provides thread support in the form of platform-independent threading classes, a thread-safe way of posting events, and signal-slot connections across threads. This makes it easy to develop portable multithreaded Qt applications and take advantage of multiprocessor machines. Multithreaded programming is also a useful paradigm for performing time-consuming operations without freezing the user interface of an application.</db:para>
<db:para>Earlier versions of Qt offered an option to build the library without thread support. Since Qt 4.0, threads are always enabled.</db:para>
<db:section xml:id="topics">
<db:title>Topics:</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="threads.xml#recommended-reading">Recommended Reading</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads.xml#the-threading-classes">The Threading Classes</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-starting.xml">Starting Threads with QThread</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-synchronizing.xml">Synchronizing Threads</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-reentrancy.xml">Reentrancy and Thread-Safety</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-qobject.xml">Threads and QObjects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-qtconcurrent.xml">Concurrent Programming</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="threads-modules.xml">Thread-Support in Qt Modules</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="recommended-reading">
<db:title>Recommended Reading</db:title>
<db:para>This document is intended for an audience that has knowledge of, and experience with, multithreaded applications. If you are new to threading see our Recommended Reading list:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="http://www.amazon.com/Threads-Primer-Guide-Multithreaded-Programming/dp/0134436989">Threads Primer: A Guide to Multithreaded Programming</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.amazon.com/Thread-Time-MultiThreaded-Programming-Guide/dp/0131900676">Thread Time: The Multithreaded Programming Guide</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.amazon.com/Pthreads-Programming-Standard-Multiprocessing-Nutshell/dp/1565921151a">Pthreads Programming: A POSIX Standard for Better Multiprocessing</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="http://www.amazon.com/WIN32-Multithreaded-Programming-Aaron-Cohen/dp/1565922964">Win32 Multithreaded Programming</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="the-threading-classes">
<db:title>The Threading Classes</db:title>
<db:para>These classes are relevant to threaded applications.</db:para>
<db:variablelist role="thread">
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentfilter.xml" xlink:role="">&lt;QtConcurrentFilter&gt;</db:link></db:term>
<db:listitem>
<db:para>The &lt;QtConcurrentFilter&gt; header provides concurrent Filter and Filter-Reduce.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentmap.xml" xlink:role="">&lt;QtConcurrentMap&gt;</db:link></db:term>
<db:listitem>
<db:para>The &lt;QtConcurrentMap&gt; header provides concurrent Map and MapReduce.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrentrun.xml" xlink:role="">&lt;QtConcurrentRun&gt;</db:link></db:term>
<db:listitem>
<db:para>The &lt;QtConcurrentRun&gt; header provides a way to run a function in a separate thread.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qatomicint.xml" xlink:role="class">QAtomicInt</db:link></db:term>
<db:listitem>
<db:para>The QAtomicInt class provides platform-independent atomic operations on integers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qatomicpointer.xml" xlink:role="class">QAtomicPointer</db:link></db:term>
<db:listitem>
<db:para>The QAtomicPointer class is a template class that provides platform-independent atomic operations on pointers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuture.xml" xlink:role="class">QFuture</db:link></db:term>
<db:listitem>
<db:para>The QFuture class represents the result of an asynchronous computation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuturesynchronizer.xml" xlink:role="class">QFutureSynchronizer</db:link></db:term>
<db:listitem>
<db:para>The QFutureSynchronizer class is a convenience class that simplifies QFuture synchronization.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qfuturewatcher.xml" xlink:role="class">QFutureWatcher</db:link></db:term>
<db:listitem>
<db:para>The QFutureWatcher class allows monitoring a QFuture using signals and slots.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmutex.xml" xlink:role="class">QMutex</db:link></db:term>
<db:listitem>
<db:para>The QMutex class provides access serialization between threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qmutexlocker.xml" xlink:role="class">QMutexLocker</db:link></db:term>
<db:listitem>
<db:para>The QMutexLocker class is a convenience class that simplifies locking and unlocking mutexes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qreadlocker.xml" xlink:role="class">QReadLocker</db:link></db:term>
<db:listitem>
<db:para>The QReadLocker class is a convenience class that simplifies locking and unlocking read-write locks for read access.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qreadwritelock.xml" xlink:role="class">QReadWriteLock</db:link></db:term>
<db:listitem>
<db:para>The QReadWriteLock class provides read-write locking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qrunnable.xml" xlink:role="class">QRunnable</db:link></db:term>
<db:listitem>
<db:para>The QRunnable class is the base class for all runnable objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qsemaphore.xml" xlink:role="class">QSemaphore</db:link></db:term>
<db:listitem>
<db:para>The QSemaphore class provides a general counting semaphore.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthread.xml" xlink:role="class">QThread</db:link></db:term>
<db:listitem>
<db:para>The QThread class provides a platform-independent way to manage threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthreadpool.xml" xlink:role="class">QThreadPool</db:link></db:term>
<db:listitem>
<db:para>The QThreadPool class manages a collection of QThreads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qthreadstorage.xml" xlink:role="class">QThreadStorage</db:link></db:term>
<db:listitem>
<db:para>The QThreadStorage class provides per-thread data storage.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qwaitcondition.xml" xlink:role="class">QWaitCondition</db:link></db:term>
<db:listitem>
<db:para>The QWaitCondition class provides a condition variable for synchronizing threads.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qwritelocker.xml" xlink:role="class">QWriteLocker</db:link></db:term>
<db:listitem>
<db:para>The QWriteLocker class is a convenience class that simplifies locking and unlocking read-write locks for write access.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtconcurrent.xml" xlink:role="namespace">QtConcurrent</db:link></db:term>
<db:listitem>
<db:para>The QtConcurrent namespace provides high-level APIs that make it possible to write multi-threaded programs without using low-level threading primitives.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:note>
<db:para>Qt's threading classes are implemented with native threading APIs; e.g., Win32 and pthreads. Therefore, they can be used with threads of the same native API.</db:para>
</db:note>
</db:section>
</db:article>
