<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>DelegateChooser QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Allows a view to use different delegates for different types of items in the model.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-delegatechooser.xml">DelegateChooser</db:link> is a special <db:link xlink:href="qml-qtqml-component.xml">Component</db:link> type intended for those scenarios where a Component is required by a view and used as a delegate. <db:link xlink:href="qml-delegatechooser.xml">DelegateChooser</db:link> encapsulates a set of <db:link xlink:href="qml-delegatechoice.xml">DelegateChoice</db:link>s. These choices are used to determine the delegate that will be instantiated for each item in the model. The selection of the choice is performed based on the value that a model item has for <db:link xlink:href="qml-delegatechooser.xml#role-prop">role</db:link>, and also based on index.</db:para>
<db:para><db:link xlink:href="qml-delegatechooser.xml">DelegateChooser</db:link> is commonly used when a view needs to display a set of delegates that are significantly different from each other. For example, a typical phone settings view might include toggle switches, sliders, radio buttons, and other visualizations based on the type of each setting. In this case, <db:link xlink:href="qml-delegatechooser.xml">DelegateChooser</db:link> could provide an easy way to associate a different type of delegate with each setting:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import Qt.labs.qmlmodels

ListView {
    width: 200; height: 400

    ListModel {
        id: listModel
        ListElement { type: &quot;info&quot;; ... }
        ListElement { type: &quot;switch&quot;; ... }
        ListElement { type: &quot;swipe&quot;; ... }
        ListElement { type: &quot;switch&quot;; ... }
    }

    DelegateChooser {
        id: chooser
        role: &quot;type&quot;
        DelegateChoice { roleValue: &quot;info&quot;; ItemDelegate { ... } }
        DelegateChoice { roleValue: &quot;switch&quot;; SwitchDelegate { ... } }
        DelegateChoice { roleValue: &quot;swipe&quot;; SwipeDelegate { ... } }
    }

    model: listModel
    delegate: chooser
}
</db:programlisting>
<db:note>
<db:para>This type is intended to transparently work only with <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> and any <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link>-based view. Views (including user-defined views) that aren't internally based on a <db:link xlink:href="qml-qtqml-models-delegatemodel.xml">DelegateModel</db:link> need to explicitly support this type of component to make it function as described.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-delegatechoice.xml">DelegateChoice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="choices-prop">
<db:title>[read-only] choices : list&lt;DelegateChoice&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;DelegateChoice&gt;</db:type>
<db:varname>choices</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The list of DelegateChoices for the chooser.</db:para>
<db:para>The list is treated as an ordered list, where the first <db:link xlink:href="qml-delegatechoice.xml">DelegateChoice</db:link> to match will be used be a view.</db:para>
<db:para>It should not generally be necessary to refer to the <db:code>choices</db:code> property, as it is the default property for <db:link xlink:href="qml-delegatechooser.xml">DelegateChooser</db:link> and thus all child items are automatically assigned to this property.</db:para>
</db:section>
<db:section xml:id="role-prop">
<db:title>role : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>role</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the role or the property name used to determine the delegate for a given model item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-delegatechoice.xml">DelegateChoice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
