<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Qt Quick Local Storage QML Types</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a JavaScript object singleton type for accessing a local SQLite database.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>This is a singleton type for reading and writing to SQLite databases.</db:para>
<db:section xml:id="methods">
<db:title>Methods</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>object <db:emphasis role="bold"><db:link xlink:href="qtquick-localstorage-qmlmodule.xml#opendatabasesync">openDatabaseSync</db:link></db:emphasis>(string name, string version, string description, int estimated_size, jsobject callback(db))</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="detailed-description">
<db:title>Detailed Description</db:title>
<db:para>To use the types in this module, import the module and call the relevant functions using the <db:code>LocalStorage</db:code> type:</db:para>
<db:programlisting language="cpp">import QtQuick.LocalStorage 2.0
import QtQuick 2.0

Item {
    Component.onCompleted: {
        var db = LocalStorage.openDatabaseSync(...)
    }
}
</db:programlisting>
<db:para>These databases are user-specific and QML-specific, but accessible to all QML applications. They are stored in the <db:code>Databases</db:code> subdirectory of QQmlEngine::offlineStoragePath(), currently as SQLite databases.</db:para>
<db:para>Database connections are automatically closed during Javascript garbage collection.</db:para>
<db:para>The API can be used from JavaScript functions in your QML:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import QtQuick.LocalStorage 2.0

Rectangle {
    width: 200
    height: 100

    Text {
        text: &quot;?&quot;
        anchors.horizontalCenter: parent.horizontalCenter

        function findGreetings() {
            var db = LocalStorage.openDatabaseSync(&quot;QQmlExampleDB&quot;, &quot;1.0&quot;, &quot;The Example QML SQL!&quot;, 1000000);

            db.transaction(
                function(tx) {
                    // Create the database if it doesn't already exist
                    tx.executeSql('CREATE TABLE IF NOT EXISTS Greeting(salutation TEXT, salutee TEXT)');

                    // Add (another) greeting row
                    tx.executeSql('INSERT INTO Greeting VALUES(?, ?)', [ 'hello', 'world' ]);

                    // Show all added greetings
                    var rs = tx.executeSql('SELECT * FROM Greeting');

                    var r = &quot;&quot;
                    for(var i = 0; i &lt; rs.rows.length; i++) {
                        r += rs.rows.item(i).salutation + &quot;, &quot; + rs.rows.item(i).salutee + &quot;\n&quot;
                    }
                    text = r
                }
            )
        }

        Component.onCompleted: findGreetings()
    }
}
</db:programlisting>
<db:para>The API conforms to the Synchronous API of the HTML5 Web Database API, <db:link xlink:href="http://www.w3.org/TR/2009/WD-webdatabase-20091029/">W3C Working Draft 29 October 2009</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtquick-localstorage-example.xml">SQL Local Storage example</db:link> demonstrates the basics of using the Offline Storage API.</db:para>
<db:section xml:id="open-or-create-a-databasedata">
<db:title>Open or create a databaseData</db:title>
<db:programlisting language="cpp">import QtQuick.LocalStorage 2.0 as Sql

db = Sql.openDatabaseSync(identifier, version, description, estimated_size, callback(db))
</db:programlisting>
<db:para>The above code returns the database identified by <db:emphasis>identifier</db:emphasis>. If the database does not already exist, it is created, and the function <db:emphasis>callback</db:emphasis> is called with the database as a parameter. <db:emphasis>description</db:emphasis> and <db:emphasis>estimated_size</db:emphasis> are written to the INI file (described below), but are otherwise currently unused.</db:para>
<db:para>May throw exception with code property SQLException.DATABASE_ERR, or SQLException.VERSION_ERR.</db:para>
<db:para>When a database is first created, an INI file is also created specifying its characteristics:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:emphasis role="bold">Key</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Value</db:emphasis></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Name</db:para>
</db:td>
<db:td>
<db:para>The name of the database passed to <db:code>openDatabase()</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Version</db:para>
</db:td>
<db:td>
<db:para>The version of the database passed to <db:code>openDatabase()</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Description</db:para>
</db:td>
<db:td>
<db:para>The description of the database passed to <db:code>openDatabase()</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>EstimatedSize</db:para>
</db:td>
<db:td>
<db:para>The estimated size (in bytes) of the database passed to <db:code>openDatabase()</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Driver</db:para>
</db:td>
<db:td>
<db:para>Currently &quot;QSQLITE&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This data can be used by application tools.</db:para>
</db:section>
<db:section xml:id="db-changeversion-from-to-callback-tx">
<db:title>db.changeVersion(from, to, callback(tx))</db:title>
<db:para>This method allows you to perform a <db:emphasis>Scheme Upgrade</db:emphasis>.</db:para>
<db:para>If the current version of <db:emphasis>db</db:emphasis> is not <db:emphasis>from</db:emphasis>, then an exception is thrown.</db:para>
<db:para>Otherwise, a database transaction is created and passed to <db:emphasis>callback</db:emphasis>. In this function, you can call <db:emphasis>executeSql</db:emphasis> on <db:emphasis>tx</db:emphasis> to upgrade the database.</db:para>
<db:para>May throw exception with code property SQLException.DATABASE_ERR or SQLException.UNKNOWN_ERR.</db:para>
</db:section>
<db:section xml:id="db-transaction-callback-tx">
<db:title>db.transaction(callback(tx))</db:title>
<db:para>This method creates a read/write transaction and passed to <db:emphasis>callback</db:emphasis>. In this function, you can call <db:emphasis>executeSql</db:emphasis> on <db:emphasis>tx</db:emphasis> to read and modify the database.</db:para>
<db:para>If the callback throws exceptions, the transaction is rolled back.</db:para>
</db:section>
<db:section xml:id="db-readtransaction-callback-tx">
<db:title>db.readTransaction(callback(tx))</db:title>
<db:para>This method creates a read-only transaction and passed to <db:emphasis>callback</db:emphasis>. In this function, you can call <db:emphasis>executeSql</db:emphasis> on <db:emphasis>tx</db:emphasis> to read the database (with SELECT statements).</db:para>
</db:section>
<db:section xml:id="results-tx-executesql-statement-values">
<db:title>results = tx.executeSql(statement, values)</db:title>
<db:para>This method executes a SQL <db:emphasis>statement</db:emphasis>, binding the list of <db:emphasis>values</db:emphasis> to SQL positional parameters (&quot;?&quot;).</db:para>
<db:para>It returns a results object, with the following properties:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:emphasis role="bold">Type</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Property</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Value</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis role="bold">Applicability</db:emphasis></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>rows.length</db:para>
</db:td>
<db:td>
<db:para>The number of rows in the result</db:para>
</db:td>
<db:td>
<db:para>SELECT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>var</db:para>
</db:td>
<db:td>
<db:para>rows.item(i)</db:para>
</db:td>
<db:td>
<db:para>Function that returns row <db:emphasis>i</db:emphasis> of the result</db:para>
</db:td>
<db:td>
<db:para>SELECT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>int</db:para>
</db:td>
<db:td>
<db:para>rowsAffected</db:para>
</db:td>
<db:td>
<db:para>The number of rows affected by a modification</db:para>
</db:td>
<db:td>
<db:para>UPDATE, DELETE</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>string</db:para>
</db:td>
<db:td>
<db:para>insertId</db:para>
</db:td>
<db:td>
<db:para>The id of the row inserted</db:para>
</db:td>
<db:td>
<db:para>INSERT</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>May throw exception with code property SQLException.DATABASE_ERR, SQLException.SYNTAX_ERR, or SQLException.UNKNOWN_ERR.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:anchor xml:id="opendatabasesync"/>
<db:programlisting language="cpp">object openDatabaseSync(string name, string version, string description, int estimated_size, jsobject callback(db))
</db:programlisting>
<db:para>Opens or creates a local storage sql database by the given parameters.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>name</db:code> is the database name</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>version</db:code> is the database version</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>description</db:code> is the database display name</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>estimated_size</db:code> is the database's estimated size, in bytes</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>callback</db:code> is an optional parameter, which is invoked if the database has not yet been created.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Returns the created database object.</db:para>
</db:section>
</db:article>
