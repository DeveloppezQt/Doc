<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt for Android: How It Works</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of architecture, toolchain, and other useful information.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>If you're a developer looking for a high level overview of how Qt supports the Android platform, this page is for you.</db:para>
<db:para>The video from the 2021 Qt World Summit gives an overview of Qt for Android.</db:para>
<db:mediaobject>
<db:videoobject>
<?db video="iframe"?>
<db:videodata format="youtube" fileref="nmvurCcsWos">
</db:videodata>
</db:videoobject>
<db:imageobject>
<db:imagedata fileref="images/nmvurCcsWos.jpg">
</db:imagedata>
</db:imageobject>
</db:mediaobject>
<db:para>&quot;A picture of an agenda that links to a YouTube video&quot;</db:para>
<db:section xml:id="architecture">
<db:title>Architecture</db:title>
<db:section xml:id="activities">
<db:title>Activities</db:title>
<db:para>The implementation of Qt for Android is made up of three main parts, and the glue in between:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt Core</db:para>
</db:listitem>
<db:listitem>
<db:para>the Android QPA plugin</db:para>
</db:listitem>
<db:listitem>
<db:para>The Java Android code</db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:alt>&quot;An overview Qt for Android's Architecture&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qt_android_architecture.png"/>
</db:imageobject>
</db:mediaobject>
<db:itemizedlist>
<db:listitem>
<db:para>The default entry point for a Qt app is the QtActivity, which upon starting, will call the QtActivityLoader which will try to load the application by calling the QtActivityDelegate.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtActivityDelegate will make the necessary calls to load the Qt libraries and the main app library with the help of QtNative.</db:para>
</db:listitem>
<db:listitem>
<db:para>QtNative handles the various Java operations that donâ€™t need to be exposed, such as: loading the libraries and handling files.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QtActivityDelegate also handles the different listeners and input handlers and propagate them from Java to Qt.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="services">
<db:title>Services</db:title>
<db:para>The architecture here is similar to that of Activities, but with services specific classes.</db:para>
<db:para>For information on how Qt supports Services in Android see <db:link xlink:href="android-services.xml">Android Services</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="build-configuration">
<db:title>Build configuration</db:title>
<db:para>For more information on configuration Qt for Android Builds see <db:link xlink:href="android-environment-variables.xml">Environment Variables Used by Qt for Android</db:link> and {Qt for Android: CMake}.</db:para>
</db:section>
</db:article>
