<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QIODeviceBase Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base class for <db:link xlink:href="qiodevice.xml">QIODevice</db:link> that provides flags describing the mode in which a device is opened.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIODevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qdatastream.xml" xlink:role="class">QDataStream</db:link>, <db:link xlink:href="qdebug.xml" xlink:role="class">QDebug</db:link>, <db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link>, and <db:link xlink:href="qtextstream.xml" xlink:role="class">QTextStream</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="OpenModeFlag-enum">
<db:title>enum QIODeviceBase::OpenModeFlag</db:title>
<db:bridgehead renderas="sect2">flags QIODeviceBase::OpenMode</db:bridgehead>
<db:enumsynopsis>
<db:enumname>OpenModeFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>NotOpen</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadOnly</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WriteOnly</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReadWrite</db:enumidentifier>
<db:enumvalue>ReadOnly | WriteOnly</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Append</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Truncate</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Text</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Unbuffered</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NewOnly</db:enumidentifier>
<db:enumvalue>0x0040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExistingOnly</db:enumidentifier>
<db:enumvalue>0x0080</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QIODeviceBase::OpenMode</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum is used with <db:link xlink:href="qiodevice.xml#open">QIODevice::open</db:link>() to describe the mode in which a device is opened. It is also returned by <db:link xlink:href="qiodevice.xml#openMode">QIODevice::openMode</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::NotOpen</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>The device is not open.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::ReadOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The device is open for reading.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::WriteOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The device is open for writing. Note that, for file-system subclasses (e.g. <db:link xlink:href="qfile.xml">QFile</db:link>), this mode implies Truncate unless combined with ReadOnly, Append or NewOnly.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::ReadWrite</db:code></db:para>
</db:td>
<db:td><db:code>ReadOnly | WriteOnly</db:code></db:td>
<db:td>
<db:para>The device is open for reading and writing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::Append</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The device is opened in append mode so that all data is written to the end of the file.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::Truncate</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>If possible, the device is truncated before it is opened. All earlier contents of the device are lost.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::Text</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>When reading, the end-of-line terminators are translated to '\n'. When writing, the end-of-line terminators are translated to the local encoding, for example '\r\n' for Win32.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::Unbuffered</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>Any buffer in the device is bypassed.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::NewOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>Fail if the file to be opened already exists. Create and open the file only if it does not exist. There is a guarantee from the operating system that you are the only one creating and opening the file. Note that this mode implies WriteOnly, and combining it with ReadWrite is allowed. This flag currently only affects <db:link xlink:href="qfile.xml">QFile</db:link>. Other classes might use this flag in the future, but until then using this flag with any classes other than <db:link xlink:href="qfile.xml">QFile</db:link> may result in undefined behavior. (since Qt 5.11)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qiodevicebase.xml">QIODeviceBase</db:link></db:emphasis>::ExistingOnly</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>Fail if the file to be opened does not exist. This flag must be specified alongside ReadOnly, WriteOnly, or ReadWrite. Note that using this flag with ReadOnly alone is redundant, as ReadOnly already fails when the file does not exist. This flag currently only affects <db:link xlink:href="qfile.xml">QFile</db:link>. Other classes might use this flag in the future, but until then using this flag with any classes other than <db:link xlink:href="qfile.xml">QFile</db:link> may result in undefined behavior. (since Qt 5.11)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Certain flags, such as Unbuffered and Truncate, are meaningless when used with some subclasses. Some of these restrictions are implied by the type of device that is represented by a subclass. In other cases, the restriction may be due to the implementation, or may be imposed by the underlying platform; for example, <db:link xlink:href="qtcpsocket.xml">QTcpSocket</db:link> does not support Unbuffered mode, and limitations in the native API prevent <db:link xlink:href="qfile.xml">QFile</db:link> from supporting Unbuffered on Windows.</db:para>
<db:para>The <db:code>OpenMode</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;OpenModeFlag&gt;. </db:code>It stores an OR combination of <db:code>OpenModeFlag</db:code> values.</db:para>
</db:section>
</db:section>
</db:article>
