<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPaintEngine Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> class provides an abstract definition of how <db:link xlink:href="qpainter.xml">QPainter</db:link> draws to a given device on a given platform.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPaintEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPaintEngine is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Qt provides several premade implementations of <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> for the different painter backends we support. The primary paint engine provided is the raster paint engine, which contains a software rasterizer which supports the full feature set on all supported platforms. This is the default for painting on <db:link xlink:href="qwidget.xml">QWidget</db:link>-based classes in e.g. on Windows, X11 and macOS, it is the backend for painting on <db:link xlink:href="qimage.xml">QImage</db:link> and it is used as a fallback for paint engines that do not support a certain capability. In addition we provide <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> implementations for OpenGL (accessible through <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>) and printing (which allows using <db:link xlink:href="qpainter.xml">QPainter</db:link> to draw on a <db:link xlink:href="qprinter.xml">QPrinter</db:link> object).</db:para>
<db:para>If one wants to use <db:link xlink:href="qpainter.xml">QPainter</db:link> to draw to a different backend, one must subclass <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> and reimplement all its virtual functions. The <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> implementation is then made available by subclassing <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> and reimplementing the virtual function <db:link xlink:href="qpaintdevice.xml#paintEngine">QPaintDevice::paintEngine</db:link>().</db:para>
<db:para><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> is created and owned by the <db:link xlink:href="qpaintdevice.xml">QPaintDevice</db:link> that created it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpainter.xml">QPainter</db:link></db:member>
<db:member><db:link xlink:href="qpaintdevice.xml#paintEngine">QPaintDevice::paintEngine</db:link>()</db:member>
<db:member><db:link xlink:href="paintsystem.xml">Paint System</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="DirtyFlag-enum">
<db:title>enum QPaintEngine::DirtyFlag</db:title>
<db:bridgehead renderas="sect2">flags QPaintEngine::DirtyFlags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>DirtyFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>DirtyPen</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyBrush</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyBrushOrigin</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyFont</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyBackground</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyBackgroundMode</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyTransform</db:enumidentifier>
<db:enumvalue>0x0040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyClipRegion</db:enumidentifier>
<db:enumvalue>0x0080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyClipPath</db:enumidentifier>
<db:enumvalue>0x0100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyHints</db:enumidentifier>
<db:enumvalue>0x0200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyCompositionMode</db:enumidentifier>
<db:enumvalue>0x0400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyClipEnabled</db:enumidentifier>
<db:enumvalue>0x0800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtyOpacity</db:enumidentifier>
<db:enumvalue>0x1000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllDirty</db:enumidentifier>
<db:enumvalue>0xffff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPaintEngine::DirtyFlags</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyPen</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The pen is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The brush is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyBrushOrigin</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The brush origin is dirty and needs to updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyFont</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The font is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyBackground</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>The background is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyBackgroundMode</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>The background mode is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>The transform is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyClipRegion</db:code></db:para>
</db:td>
<db:td><db:code>0x0080</db:code></db:td>
<db:td>
<db:para>The clip region is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyClipPath</db:code></db:para>
</db:td>
<db:td><db:code>0x0100</db:code></db:td>
<db:td>
<db:para>The clip path is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyHints</db:code></db:para>
</db:td>
<db:td><db:code>0x0200</db:code></db:td>
<db:td>
<db:para>The render hints is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyCompositionMode</db:code></db:para>
</db:td>
<db:td><db:code>0x0400</db:code></db:td>
<db:td>
<db:para>The composition mode is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyClipEnabled</db:code></db:para>
</db:td>
<db:td><db:code>0x0800</db:code></db:td>
<db:td>
<db:para>Whether clipping is enabled or not is dirty and needs to be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::DirtyOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x1000</db:code></db:td>
<db:td>
<db:para>The constant opacity has changed and needs to be updated as part of the state change in <db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::AllDirty</db:code></db:para>
</db:td>
<db:td><db:code>0xffff</db:code></db:td>
<db:td>
<db:para>Convenience enum used internally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These types are used by <db:link xlink:href="qpainter.xml">QPainter</db:link> to trigger lazy updates of the various states in the <db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link> using <db:link xlink:href="qpaintengine.xml#updateState">QPaintEngine::updateState</db:link>().</db:para>
<db:para>A paint engine must update every dirty state.</db:para>
<db:para>The <db:code>DirtyFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;DirtyFlag&gt;. </db:code>It stores an OR combination of <db:code>DirtyFlag</db:code> values.</db:para>
</db:section>
<db:section xml:id="PaintEngineFeature-enum">
<db:title>enum QPaintEngine::PaintEngineFeature</db:title>
<db:bridgehead renderas="sect2">flags QPaintEngine::PaintEngineFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PaintEngineFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>PrimitiveTransform</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PatternTransform</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PixmapTransform</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PatternBrush</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LinearGradientFill</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RadialGradientFill</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConicalGradientFill</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlphaBlend</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PorterDuff</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PainterPaths</db:enumidentifier>
<db:enumvalue>0x00000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Antialiasing</db:enumidentifier>
<db:enumvalue>0x00000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BrushStroke</db:enumidentifier>
<db:enumvalue>0x00000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConstantOpacity</db:enumidentifier>
<db:enumvalue>0x00001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MaskedBrush</db:enumidentifier>
<db:enumvalue>0x00002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PerspectiveTransform</db:enumidentifier>
<db:enumvalue>0x00004000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BlendModes</db:enumidentifier>
<db:enumvalue>0x00008000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ObjectBoundingModeGradients</db:enumidentifier>
<db:enumvalue>0x00010000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RasterOpModes</db:enumidentifier>
<db:enumvalue>0x00020000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PaintOutsidePaintEvent</db:enumidentifier>
<db:enumvalue>0x20000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AllFeatures</db:enumidentifier>
<db:enumvalue>0xffffffff</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QPaintEngine::PaintEngineFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum is used to describe the features or capabilities that the paint engine has. If a feature is not supported by the engine, <db:link xlink:href="qpainter.xml">QPainter</db:link> will do a best effort to emulate that feature through other means and pass on an alpha blended <db:link xlink:href="qimage.xml">QImage</db:link> to the engine with the emulated results. Some features cannot be emulated: AlphaBlend and PorterDuff.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::AlphaBlend</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>The engine can alpha blend primitives.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Antialiasing</db:code></db:para>
</db:td>
<db:td><db:code>0x00000400</db:code></db:td>
<db:td>
<db:para>The engine can use antialiasing to improve the appearance of rendered primitives.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::BlendModes</db:code></db:para>
</db:td>
<db:td><db:code>0x00008000</db:code></db:td>
<db:td>
<db:para>The engine supports blending modes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::BrushStroke</db:code></db:para>
</db:td>
<db:td><db:code>0x00000800</db:code></db:td>
<db:td>
<db:para>The engine supports drawing strokes that contain brushes as fills, not just solid colors (e.g. a dashed gradient line of width 2).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::ConicalGradientFill</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>The engine supports conical gradient fills.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::ConstantOpacity</db:code></db:para>
</db:td>
<db:td><db:code>0x00001000</db:code></db:td>
<db:td>
<db:para>The engine supports the feature provided by <db:link xlink:href="qpainter.xml#setOpacity">QPainter::setOpacity</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::LinearGradientFill</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>The engine supports linear gradient fills.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::MaskedBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x00002000</db:code></db:td>
<db:td>
<db:para>The engine is capable of rendering brushes that has a texture with an alpha channel or a mask.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::ObjectBoundingModeGradients</db:code></db:para>
</db:td>
<db:td><db:code>0x00010000</db:code></db:td>
<db:td>
<db:para>The engine has native support for gradients with coordinate mode <db:link xlink:href="qgradient.xml#CoordinateMode-enum">QGradient::ObjectBoundingMode</db:link>. Otherwise, if QPaintEngine::PatternTransform is supported, object bounding mode gradients are converted to gradients with coordinate mode <db:link xlink:href="qgradient.xml#CoordinateMode-enum">QGradient::LogicalMode</db:link> and a brush transform for the coordinate mapping.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PainterPaths</db:code></db:para>
</db:td>
<db:td><db:code>0x00000200</db:code></db:td>
<db:td>
<db:para>The engine has path support.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PaintOutsidePaintEvent</db:code></db:para>
</db:td>
<db:td><db:code>0x20000000</db:code></db:td>
<db:td>
<db:para>The engine is capable of painting outside of paint events.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PatternBrush</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>The engine is capable of rendering brushes with the brush patterns specified in <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PatternTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>The engine has support for transforming brush patterns.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PerspectiveTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x00004000</db:code></db:td>
<db:td>
<db:para>The engine has support for performing perspective transformations on primitives.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PixmapTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>The engine can transform pixmaps, including rotation and shearing.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PorterDuff</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>The engine supports Porter-Duff operations</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PrimitiveTransform</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>The engine has support for transforming drawing primitives.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::RadialGradientFill</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>The engine supports radial gradient fills.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::RasterOpModes</db:code></db:para>
</db:td>
<db:td><db:code>0x00020000</db:code></db:td>
<db:td>
<db:para>The engine supports bitwise raster operations.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::AllFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0xffffffff</db:code></db:td>
<db:td>
<db:para>All of the above features. This enum value is usually used as a bit mask.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PaintEngineFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PaintEngineFeature&gt;. </db:code>It stores an OR combination of <db:code>PaintEngineFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="PolygonDrawMode-enum">
<db:title>enum QPaintEngine::PolygonDrawMode</db:title>
<db:enumsynopsis>
<db:enumname>PolygonDrawMode</db:enumname>
<db:enumitem>
<db:enumidentifier>OddEvenMode</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WindingMode</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConvexMode</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PolylineMode</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::OddEvenMode</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The polygon should be drawn using OddEven fill rule.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::WindingMode</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The polygon should be drawn using Winding fill rule.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::ConvexMode</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The polygon is a convex polygon and can be drawn using specialized algorithms where available.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PolylineMode</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Only the outline of the polygon should be drawn.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QPaintEngine::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>X11</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Windows</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>QuickDraw</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CoreGraphics</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MacPrinter</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>QWindowSystem</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Picture</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SVG</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Raster</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Direct3D</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Pdf</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenVG</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OpenGL2</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PaintBuffer</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Blitter</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Direct2D</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>User</db:enumidentifier>
<db:enumvalue>50</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MaxUser</db:enumidentifier>
<db:enumvalue>100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::X11</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Windows</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::MacPrinter</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::CoreGraphics</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>macOS's Quartz2D (CoreGraphics)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::QuickDraw</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>macOS's QuickDraw</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::QWindowSystem</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Qt for Embedded Linux</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::OpenGL</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Picture</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para><db:link xlink:href="qpicture.xml">QPicture</db:link> format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::SVG</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Scalable Vector Graphics XML format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Raster</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Direct3D</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Windows only, Direct3D based engine</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Pdf</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Portable Document Format</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::OpenVG</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::User</db:code></db:para>
</db:td>
<db:td><db:code>50</db:code></db:td>
<db:td>
<db:para>First user type ID</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::MaxUser</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>Last user type ID</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::OpenGL2</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::PaintBuffer</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Blitter</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpaintengine.xml">QPaintEngine</db:link></db:emphasis>::Direct2D</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Windows only, Direct2D based engine</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPaintEngine">
<db:title>[explicit] QPaintEngine::QPaintEngine(QPaintEngine::PaintEngineFeatures <db:emphasis>caps</db:emphasis> = PaintEngineFeatures())</db:title>
<db:constructorsynopsis>
<db:methodname>QPaintEngine</db:methodname>
<db:methodparam>
<db:type>QPaintEngine::PaintEngineFeatures</db:type>
<db:parameter>caps</db:parameter>
<db:initializer>PaintEngineFeatures()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine(QPaintEngine::PaintEngineFeatures caps)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a paint engine with the featureset specified by <db:code role="parameter">caps</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPaintEngine">
<db:title>[virtual] QPaintEngine::~QPaintEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPaintEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPaintEngine()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the paint engine.</db:para>
</db:section>
<db:section xml:id="begin">
<db:title>[pure virtual] bool QPaintEngine::begin(QPaintDevice *<db:emphasis>pdev</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>begin</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>pdev</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool begin(QPaintDevice *pdev) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to initialise your paint engine when painting is to start on the paint device <db:code role="parameter">pdev</db:code>. Return true if the initialization was successful; otherwise return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="drawEllipse">
<db:title>[virtual] void QPaintEngine::drawEllipse(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to draw the largest ellipse that can be contained within rectangle <db:code role="parameter">rect</db:code>.</db:para>
<db:para>The default implementation calls <db:link xlink:href="qpaintengine.xml#drawPolygon">drawPolygon</db:link>().</db:para>
</db:section>
<db:section xml:id="drawEllipse-1">
<db:title>[virtual] void QPaintEngine::drawEllipse(const QRect &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawEllipse</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawEllipse(const QRect &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The default implementation of this function calls the floating point version of this function</db:para>
</db:section>
<db:section xml:id="drawImage">
<db:title>[virtual] void QPaintEngine::drawImage(const QRectF &amp;<db:emphasis>rectangle</db:emphasis>, const QImage &amp;<db:emphasis>image</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>, Qt::ImageConversionFlags <db:emphasis>flags</db:emphasis> = Qt::AutoColor)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawImage</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rectangle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>sr</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ImageConversionFlags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Qt::AutoColor</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawImage(const QRectF &amp;rectangle, const QImage &amp;image, const QRectF &amp;sr, Qt::ImageConversionFlags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to draw the part of the <db:code role="parameter">image</db:code> specified by the <db:code role="parameter">sr</db:code> rectangle in the given <db:code role="parameter">rectangle</db:code> using the given conversion flags <db:code role="parameter">flags</db:code>, to convert it to a pixmap.</db:para>
</db:section>
<db:section xml:id="drawLines">
<db:title>[virtual] void QPaintEngine::drawLines(const QLineF *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLineF *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLineF *lines, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The default implementation splits the list of lines in <db:code role="parameter">lines</db:code> into <db:code role="parameter">lineCount</db:code> separate calls to <db:link xlink:href="qpaintengine.xml#drawPath">drawPath</db:link>() or <db:link xlink:href="qpaintengine.xml#drawPolygon">drawPolygon</db:link>() depending on the feature set of the paint engine.</db:para>
</db:section>
<db:section xml:id="drawLines-1">
<db:title>[virtual] void QPaintEngine::drawLines(const QLine *<db:emphasis>lines</db:emphasis>, int <db:emphasis>lineCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawLines</db:methodname>
<db:methodparam>
<db:type>const QLine *</db:type>
<db:parameter>lines</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>lineCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawLines(const QLine *lines, int lineCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The default implementation converts the first <db:code role="parameter">lineCount</db:code> lines in <db:code role="parameter">lines</db:code> to a <db:link xlink:href="qlinef.xml">QLineF</db:link> and calls the floating point version of this function.</db:para>
</db:section>
<db:section xml:id="drawPath">
<db:title>[virtual] void QPaintEngine::drawPath(const QPainterPath &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPath</db:methodname>
<db:methodparam>
<db:type>const QPainterPath &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPath(const QPainterPath &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The default implementation ignores the <db:code role="parameter">path</db:code> and does nothing.</db:para>
</db:section>
<db:section xml:id="drawPixmap">
<db:title>[pure virtual] void QPaintEngine::drawPixmap(const QRectF &amp;<db:emphasis>r</db:emphasis>, const QPixmap &amp;<db:emphasis>pm</db:emphasis>, const QRectF &amp;<db:emphasis>sr</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>sr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPixmap(const QRectF &amp;r, const QPixmap &amp;pm, const QRectF &amp;sr) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to draw the part of the <db:code role="parameter">pm</db:code> specified by the <db:code role="parameter">sr</db:code> rectangle in the given <db:code role="parameter">r</db:code>.</db:para>
</db:section>
<db:section xml:id="drawPoints">
<db:title>[virtual] void QPaintEngine::drawPoints(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPointF *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">pointCount</db:code> points in the buffer <db:code role="parameter">points</db:code></db:para>
</db:section>
<db:section xml:id="drawPoints-1">
<db:title>[virtual] void QPaintEngine::drawPoints(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPoints</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPoints(const QPoint *points, int pointCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">pointCount</db:code> points in the buffer <db:code role="parameter">points</db:code></db:para>
<db:para>The default implementation converts the first <db:code role="parameter">pointCount</db:code> QPoints in <db:code role="parameter">points</db:code> to QPointFs and calls the floating point version of <db:link xlink:href="qpaintengine.xml#drawPoints">drawPoints</db:link>.</db:para>
</db:section>
<db:section xml:id="drawPolygon">
<db:title>[virtual] void QPaintEngine::drawPolygon(const QPointF *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPointF *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPaintEngine::PolygonDrawMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPointF *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this virtual function to draw the polygon defined by the <db:code role="parameter">pointCount</db:code> first points in <db:code role="parameter">points</db:code>, using mode <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>At least one of the drawPolygon() functions must be reimplemented.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawPolygon-1">
<db:title>[virtual] void QPaintEngine::drawPolygon(const QPoint *<db:emphasis>points</db:emphasis>, int <db:emphasis>pointCount</db:emphasis>, QPaintEngine::PolygonDrawMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawPolygon</db:methodname>
<db:methodparam>
<db:type>const QPoint *</db:type>
<db:parameter>points</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointCount</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPaintEngine::PolygonDrawMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawPolygon(const QPoint *points, int pointCount, QPaintEngine::PolygonDrawMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Reimplement this virtual function to draw the polygon defined by the <db:code role="parameter">pointCount</db:code> first points in <db:code role="parameter">points</db:code>, using mode <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>At least one of the <db:link xlink:href="qpaintengine.xml#drawPolygon">drawPolygon</db:link>() functions must be reimplemented.</db:para>
</db:note>
</db:section>
<db:section xml:id="drawRects">
<db:title>[virtual] void QPaintEngine::drawRects(const QRectF *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRectF *</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRectF *rects, int rectCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the first <db:code role="parameter">rectCount</db:code> rectangles in the buffer <db:code role="parameter">rects</db:code>. The default implementation of this function calls <db:link xlink:href="qpaintengine.xml#drawPath">drawPath</db:link>() or <db:link xlink:href="qpaintengine.xml#drawPolygon">drawPolygon</db:link>() depending on the feature set of the paint engine.</db:para>
</db:section>
<db:section xml:id="drawRects-1">
<db:title>[virtual] void QPaintEngine::drawRects(const QRect *<db:emphasis>rects</db:emphasis>, int <db:emphasis>rectCount</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawRects</db:methodname>
<db:methodparam>
<db:type>const QRect *</db:type>
<db:parameter>rects</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>rectCount</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawRects(const QRect *rects, int rectCount)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>The default implementation converts the first <db:code role="parameter">rectCount</db:code> rectangles in the buffer <db:code role="parameter">rects</db:code> to a <db:link xlink:href="qrectf.xml">QRectF</db:link> and calls the floating point version of this function.</db:para>
</db:section>
<db:section xml:id="drawTextItem">
<db:title>[virtual] void QPaintEngine::drawTextItem(const QPointF &amp;<db:emphasis>p</db:emphasis>, const QTextItem &amp;<db:emphasis>textItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawTextItem</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextItem &amp;</db:type>
<db:parameter>textItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTextItem(const QPointF &amp;p, const QTextItem &amp;textItem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function draws the text item <db:code role="parameter">textItem</db:code> at position <db:code role="parameter">p</db:code>. The default implementation of this function converts the text to a <db:link xlink:href="qpainterpath.xml">QPainterPath</db:link> and paints the resulting path.</db:para>
</db:section>
<db:section xml:id="drawTiledPixmap">
<db:title>[virtual] void QPaintEngine::drawTiledPixmap(const QRectF &amp;<db:emphasis>rect</db:emphasis>, const QPixmap &amp;<db:emphasis>pixmap</db:emphasis>, const QPointF &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawTiledPixmap</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>pixmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawTiledPixmap(const QRectF &amp;rect, const QPixmap &amp;pixmap, const QPointF &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to draw the <db:code role="parameter">pixmap</db:code> in the given <db:code role="parameter">rect</db:code>, starting at the given <db:code role="parameter">p</db:code>. The pixmap will be drawn repeatedly until the <db:code role="parameter">rect</db:code> is filled.</db:para>
</db:section>
<db:section xml:id="end">
<db:title>[pure virtual] bool QPaintEngine::end()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool end() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to finish painting on the current paint device. Return true if painting was finished successfully; otherwise return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qpaintengine.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasFeature">
<db:title>bool QPaintEngine::hasFeature(QPaintEngine::PaintEngineFeatures <db:emphasis>feature</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasFeature</db:methodname>
<db:methodparam>
<db:type>QPaintEngine::PaintEngineFeatures</db:type>
<db:parameter>feature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasFeature(QPaintEngine::PaintEngineFeatures feature) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the paint engine supports the specified <db:code role="parameter">feature</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QPaintEngine::isActive() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isActive</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isActive() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the paint engine is actively drawing; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml#setActive">setActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintDevice">
<db:title>QPaintDevice *QPaintEngine::paintDevice() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPaintDevice *</db:type>
<db:methodname>paintDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintDevice * paintDevice() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device that this engine is painting on, if painting is active; otherwise returns <db:code>nullptr</db:code>.</db:para>
</db:section>
<db:section xml:id="painter">
<db:title>QPainter *QPaintEngine::painter() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPainter *</db:type>
<db:methodname>painter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPainter * painter() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paint engine's painter.</db:para>
</db:section>
<db:section xml:id="setActive">
<db:title>void QPaintEngine::setActive(bool <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setActive</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setActive(bool state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the active state of the paint engine to <db:code role="parameter">state</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintengine.xml#isActive">isActive</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>[pure virtual] QPaintEngine::Type QPaintEngine::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPaintEngine::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintEngine::Type type() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to return the paint engine <db:link xlink:href="qpaintengine.xml#Type-enum">Type</db:link>.</db:para>
</db:section>
<db:section xml:id="updateState">
<db:title>[pure virtual] void QPaintEngine::updateState(const QPaintEngineState &amp;<db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateState</db:methodname>
<db:methodparam>
<db:type>const QPaintEngineState &amp;</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateState(const QPaintEngineState &amp;state) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplement this function to update the state of a paint engine.</db:para>
<db:para>When implemented, this function is responsible for checking the paint engine's current <db:code role="parameter">state</db:code> and update the properties that are changed. Use the <db:link xlink:href="qpaintenginestate.xml#state">QPaintEngineState::state</db:link>() function to find out which properties that must be updated, then use the corresponding <db:link xlink:href="qpaintenginestate.xml#getfunction">get function</db:link> to retrieve the current values for the given properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpaintenginestate.xml">QPaintEngineState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
