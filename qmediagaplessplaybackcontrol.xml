<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaGaplessPlaybackControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediagaplessplaybackcontrol.xml">QMediaGaplessPlaybackControl</db:link> class provides access to the gapless playback related control of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaGaplessPlaybackControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaGaplessPlaybackControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> supports gapless playback it will implement <db:link xlink:href="qmediagaplessplaybackcontrol.xml">QMediaGaplessPlaybackControl</db:link>. This control provides a means to set the <db:link xlink:href="qmediagaplessplaybackcontrol.xml#setNextMedia">next media</db:link> or <db:link xlink:href="qmediagaplessplaybackcontrol.xml#setCrossfadeTime">crossfade time</db:link> for smooth transitions between tracks.</db:para>
<db:para>The functionality provided by this control is exposed to application code through the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class.</db:para>
<db:para>The interface name of <db:link xlink:href="qmediagaplessplaybackcontrol.xml">QMediaGaplessPlaybackControl</db:link> is <db:code>org.qt-project.qt.mediagaplessplaybackcontrol/5.0</db:code> as defined in <db:link xlink:href="qmediagaplessplaybackcontrol.xml#QMediaGaplessPlaybackControl_iid">QMediaGaplessPlaybackControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaGaplessPlaybackControl">
<db:title>[explicit protected] QMediaGaplessPlaybackControl::QMediaGaplessPlaybackControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaGaplessPlaybackControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaGaplessPlaybackControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new gapless playback control with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaGaplessPlaybackControl">
<db:title>[virtual] QMediaGaplessPlaybackControl::~QMediaGaplessPlaybackControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaGaplessPlaybackControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaGaplessPlaybackControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a gapless playback control.</db:para>
</db:section>
<db:section xml:id="advancedToNextMedia">
<db:title>void QMediaGaplessPlaybackControl::advancedToNextMedia()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>advancedToNextMedia</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void advancedToNextMedia()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals when the player advances to the next media (the content of next media will be cleared).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#nextMedia">nextMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crossfadeTime">
<db:title>[pure virtual] qreal QMediaGaplessPlaybackControl::crossfadeTime() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>crossfadeTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal crossfadeTime() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns current crossfade time in seconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#setCrossfadeTime">setCrossfadeTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="crossfadeTimeChanged">
<db:title>void QMediaGaplessPlaybackControl::crossfadeTimeChanged(qreal <db:emphasis>crossfadeTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>crossfadeTimeChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>crossfadeTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void crossfadeTimeChanged(qreal crossfadeTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">crossfadeTime</db:code> has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#crossfadeTime">crossfadeTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCrossfadeSupported">
<db:title>[pure virtual] bool QMediaGaplessPlaybackControl::isCrossfadeSupported() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCrossfadeSupported</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCrossfadeSupported() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Indicates whether crossfading is supported or not. If crossfading is not supported, <db:link xlink:href="qmediagaplessplaybackcontrol.xml#setCrossfadeTime">setCrossfadeTime</db:link>() will be ignored and <db:link xlink:href="qmediagaplessplaybackcontrol.xml#crossfadeTime">crossfadeTime</db:link>() will always return 0.</db:para>
</db:section>
<db:section xml:id="nextMedia">
<db:title>[pure virtual] QMediaContent QMediaGaplessPlaybackControl::nextMedia() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaContent</db:type>
<db:methodname>nextMedia</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaContent nextMedia() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the content of the next media</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#setNextMedia">setNextMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nextMediaChanged">
<db:title>void QMediaGaplessPlaybackControl::nextMediaChanged(const QMediaContent &amp;<db:emphasis>media</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>nextMediaChanged</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void nextMediaChanged(const QMediaContent &amp;media)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the next <db:code role="parameter">media</db:code> has changed (either explicitly via <db:link xlink:href="qmediagaplessplaybackcontrol.xml#setNextMedia">setNextMedia</db:link>() or when the player clears the next media while advancing to it).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#nextMedia">nextMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCrossfadeTime">
<db:title>[pure virtual] void QMediaGaplessPlaybackControl::setCrossfadeTime(qreal <db:emphasis>crossfadeTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setCrossfadeTime</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>crossfadeTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCrossfadeTime(qreal crossfadeTime) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">crossfadeTime</db:code> in seconds for smooth transition.</db:para>
<db:para>Positive value means how much time it will take for the next media to transit from silent to full volume and vice versa for current one. So both current and the next one will be playing during this period of time.</db:para>
<db:para>A crossfade time of zero or negative will result in gapless playback (suitable for some continuous media).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#crossfadeTime">crossfadeTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNextMedia">
<db:title>[pure virtual] void QMediaGaplessPlaybackControl::setNextMedia(const QMediaContent &amp;<db:emphasis>media</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setNextMedia</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNextMedia(const QMediaContent &amp;media) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the next <db:code role="parameter">media</db:code> for smooth transition.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediagaplessplaybackcontrol.xml#nextMedia">nextMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QMediaGaplessPlaybackControl_iid">
<db:title>QMediaGaplessPlaybackControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QMediaGaplessPlaybackControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaGaplessPlaybackControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.mediagaplessplaybackcontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qmediagaplessplaybackcontrol.xml">QMediaGaplessPlaybackControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
