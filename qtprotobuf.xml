<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtProtobuf Namespace</db:title>
<db:productname>QtProtobuf</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Protobuf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link> namespace contains type aliases and classes needed to support <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link>.</db:para>
<db:para>This namespace was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtProtobuf</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Protobuf)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Protobuf)</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="WireTypes-enum">
<db:title>enum QtProtobuf::WireTypes</db:title>
<db:enumsynopsis>
<db:enumname>WireTypes</db:enumname>
<db:enumitem>
<db:enumidentifier>Unknown</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Varint</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fixed64</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LengthDelimited</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StartGroup</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndGroup</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fixed32</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>The WireTypes enumeration reflects protobuf default wiretypes.</db:para>
<db:para>The following table shows the values in the enumeration and their corresponding types:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Invalid wire type</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::Varint</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>int32, int64, uint32, uint64, sint32, sint64, bool, enum</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::Fixed64</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>fixed64, sfixed64, double</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::LengthDelimited</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>string, bytes, embedded messages, packed repeated fields</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::StartGroup</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>groups. Deprecated in proto syntax 3. Not supported by <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::EndGroup</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>groups. Deprecated in proto syntax 3. Not supported by <db:link xlink:href="qtprotobuf-module.xml">QtProtobuf</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtprotobuf.xml">QtProtobuf</db:link></db:emphasis>::<db:emphasis role="bold">WireTypes</db:emphasis>::Fixed32</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>fixed32, sfixed32, float</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://protobuf.dev/programming-guides/encoding">encoding</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boolList-typedef">
<db:title>[alias] QtProtobuf::boolList</db:title>
<db:typedefsynopsis>
<db:typedefname>boolList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of bool.</db:para>
</db:section>
<db:section xml:id="doubleList-typedef">
<db:title>[alias] QtProtobuf::doubleList</db:title>
<db:typedefsynopsis>
<db:typedefname>doubleList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of double.</db:para>
</db:section>
<db:section xml:id="fixed32-typedef">
<db:title>[alias] QtProtobuf::fixed32</db:title>
<db:typedefsynopsis>
<db:typedefname>fixed32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>fixed32 is an unsigned 32-bit integer that is represented in protobuf as a fixed size 32-bit field, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Fixed32</db:link>.</db:para>
</db:section>
<db:section xml:id="fixed64-typedef">
<db:title>[alias] QtProtobuf::fixed64</db:title>
<db:typedefsynopsis>
<db:typedefname>fixed64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>fixed64 is an unsigned 64-bit integer that is represented in protobuf as a fixed size 64-bit field, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Fixed64</db:link>.</db:para>
</db:section>
<db:section xml:id="fixed32List-typedef">
<db:title>[alias] QtProtobuf::fixed32List</db:title>
<db:typedefsynopsis>
<db:typedefname>fixed32List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#fixed32-typedef">QtProtobuf::fixed32</db:link>.</db:para>
</db:section>
<db:section xml:id="fixed64List-typedef">
<db:title>[alias] QtProtobuf::fixed64List</db:title>
<db:typedefsynopsis>
<db:typedefname>fixed64List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#fixed64-typedef">QtProtobuf::fixed64</db:link>.</db:para>
</db:section>
<db:section xml:id="floatList-typedef">
<db:title>[alias] QtProtobuf::floatList</db:title>
<db:typedefsynopsis>
<db:typedefname>floatList</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of float.</db:para>
</db:section>
<db:section xml:id="int32-typedef">
<db:title>[alias] QtProtobuf::int32</db:title>
<db:typedefsynopsis>
<db:typedefname>int32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>int32 is a regular signed 32-bit integer that is represented in protobuf as a variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>.</db:para>
</db:section>
<db:section xml:id="int64-typedef">
<db:title>[alias] QtProtobuf::int64</db:title>
<db:typedefsynopsis>
<db:typedefname>int64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>int64 is a regular signed 64-bit integer that is represented in protobuf as a variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>.</db:para>
</db:section>
<db:section xml:id="int32List-typedef">
<db:title>[alias] QtProtobuf::int32List</db:title>
<db:typedefsynopsis>
<db:typedefname>int32List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#int32-typedef">QtProtobuf::int32</db:link>.</db:para>
</db:section>
<db:section xml:id="int64List-typedef">
<db:title>[alias] QtProtobuf::int64List</db:title>
<db:typedefsynopsis>
<db:typedefname>int64List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#int64-typedef">QtProtobuf::int64</db:link>.</db:para>
</db:section>
<db:section xml:id="sfixed32-typedef">
<db:title>[alias] QtProtobuf::sfixed32</db:title>
<db:typedefsynopsis>
<db:typedefname>sfixed32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>sfixed32 is a signed 32-bit integer that is represented in protobuf as a fixed size 32-bit field, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Fixed32</db:link>.</db:para>
</db:section>
<db:section xml:id="sfixed64-typedef">
<db:title>[alias] QtProtobuf::sfixed64</db:title>
<db:typedefsynopsis>
<db:typedefname>sfixed64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>sfixed64 is a signed 64-bit integer that is represented in protobuf as a fixed size 64-bit field, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Fixed64</db:link>.</db:para>
</db:section>
<db:section xml:id="sfixed32List-typedef">
<db:title>[alias] QtProtobuf::sfixed32List</db:title>
<db:typedefsynopsis>
<db:typedefname>sfixed32List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#sfixed32-typedef">QtProtobuf::sfixed32</db:link>.</db:para>
</db:section>
<db:section xml:id="sfixed64List-typedef">
<db:title>[alias] QtProtobuf::sfixed64List</db:title>
<db:typedefsynopsis>
<db:typedefname>sfixed64List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#sfixed64-typedef">QtProtobuf::sfixed64</db:link>.</db:para>
</db:section>
<db:section xml:id="sint32-typedef">
<db:title>[alias] QtProtobuf::sint32</db:title>
<db:typedefsynopsis>
<db:typedefname>sint32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>sint32 is a 32-bit integer with forced sign marker that is represented in protobuf as variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>. sint32 is serialized using ZigZag conversion to reduce size of negative numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://protobuf.dev/programming-guides/encoding/#signed-ints">signed-integers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sint64-typedef">
<db:title>[alias] QtProtobuf::sint64</db:title>
<db:typedefsynopsis>
<db:typedefname>sint64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>sint64 is a 64-bit integer with forced sign marker that is represented in protobuf as variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>. sint64 is serialized using ZigZag conversion to reduce size of negative numbers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="https://protobuf.dev/programming-guides/encoding/#signed-ints">signed-integers</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sint32List-typedef">
<db:title>[alias] QtProtobuf::sint32List</db:title>
<db:typedefsynopsis>
<db:typedefname>sint32List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#sint32-typedef">QtProtobuf::sint32</db:link>.</db:para>
</db:section>
<db:section xml:id="sint64List-typedef">
<db:title>[alias] QtProtobuf::sint64List</db:title>
<db:typedefsynopsis>
<db:typedefname>sint64List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#sint64-typedef">QtProtobuf::sint64</db:link>.</db:para>
</db:section>
<db:section xml:id="uint32-typedef">
<db:title>[alias] QtProtobuf::uint32</db:title>
<db:typedefsynopsis>
<db:typedefname>uint32</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>uint32 is an unsigned 32-bit integer that is represented in protobuf as variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>.</db:para>
</db:section>
<db:section xml:id="uint64-typedef">
<db:title>[alias] QtProtobuf::uint64</db:title>
<db:typedefsynopsis>
<db:typedefname>uint64</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>uint64 is an unsigned 64-bit integer that is represented in protobuf as variable size integer, an alias for <db:link xlink:href="qtprotobuf.xml#WireTypes-enum">WireTypes::Varint</db:link>.</db:para>
</db:section>
<db:section xml:id="uint32List-typedef">
<db:title>[alias] QtProtobuf::uint32List</db:title>
<db:typedefsynopsis>
<db:typedefname>uint32List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#uint32-typedef">QtProtobuf::uint32</db:link>.</db:para>
</db:section>
<db:section xml:id="uint64List-typedef">
<db:title>[alias] QtProtobuf::uint64List</db:title>
<db:typedefsynopsis>
<db:typedefname>uint64List</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for a list of <db:link xlink:href="qtprotobuf.xml#uint64-typedef">QtProtobuf::uint64</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="repeatedValueCompare-1">
<db:title>bool QtProtobuf::repeatedValueCompare(const QHash&lt;K, V&gt; &amp;<db:emphasis>a</db:emphasis>, const QHash&lt;K, V&gt; &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="repeatedValueCompare">bool QtProtobuf::repeatedValueCompare(const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;<db:emphasis>a</db:emphasis>, const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;<db:emphasis>b</db:emphasis>)</db:bridgehead>
<db:para>Compares two <db:code>repeated</db:code> fields (essentially a list) to each other. Returns <db:code>true</db:code> if the two fields are equal, <db:code>false</db:code> otherwise.</db:para>
<db:para>These functions are used in the generated code to implement operator==.</db:para>
</db:section>
<db:section xml:id="qRegisterProtobufTypes">
<db:title>void qRegisterProtobufTypes()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qRegisterProtobufTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qRegisterProtobufTypes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Calling this function registers all, currently known, protobuf types with the serializer registry.</db:para>
<db:note>
<db:para>You should not have to call this function manually, as it is called automatically upon attempting serialization or deserialization of a protobuf message.</db:para>
</db:note>
</db:section>
<db:section xml:id="repeatedValueCompare">
<db:title>bool QtProtobuf::repeatedValueCompare(const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;<db:emphasis>a</db:emphasis>, const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>repeatedValueCompare</db:methodname>
<db:methodparam>
<db:type>const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool repeatedValueCompare(const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;a, const QList&lt;std::shared_ptr&lt;T&gt;&gt; &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="repeatedValueCompare-1">
<db:title>bool QtProtobuf::repeatedValueCompare(const QHash&lt;K, V&gt; &amp;<db:emphasis>a</db:emphasis>, const QHash&lt;K, V&gt; &amp;<db:emphasis>b</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>repeatedValueCompare</db:methodname>
<db:methodparam>
<db:type>const QHash&lt;K, V&gt; &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHash&lt;K, V&gt; &amp;</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool repeatedValueCompare(const QHash&lt;K, V&gt; &amp;a, const QHash&lt;K, V&gt; &amp;b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
</db:section>
</db:article>
