<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Basic Layouts Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to use the standard layout managers.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Basic Layouts</db:emphasis> shows how to use the standard layout managers that are available in Qt: <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>, <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, and <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Basic Layouts example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/basiclayouts-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> class lines up widgets horizontally or vertically. <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> and <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> are convenience subclasses of <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>. <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> lays out widgets in cells by dividing the available space into rows and columns. <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>, on the other hand, sets its children in a two-column form with labels in the left column and input fields in the right column.</db:para>
<db:para>For more information, visit the <db:link xlink:href="layout.xml">Layout Management</db:link> page.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="dialog-class-definition">
<db:title>Dialog Class Definition</db:title>
<db:programlisting language="cpp">class Dialog : public QDialog
{
    Q_OBJECT

public:
    Dialog();

private:
    void createMenu();
    void createHorizontalGroupBox();
    void createGridGroupBox();
    void createFormGroupBox();

    enum { NumGridRows = 3, NumButtons = 4 };

    QMenuBar *menuBar;
    QGroupBox *horizontalGroupBox;
    QGroupBox *gridGroupBox;
    QGroupBox *formGroupBox;
    QTextEdit *smallEditor;
    QTextEdit *bigEditor;
    QLabel *labels[NumGridRows];
    QLineEdit *lineEdits[NumGridRows];
    QPushButton *buttons[NumButtons];
    QDialogButtonBox *buttonBox;

    QMenu *fileMenu;
    QAction *exitAction;
};
</db:programlisting>
<db:para>The Dialog class inherits <db:link xlink:href="qdialog.xml">QDialog</db:link>. It is a custom widget that displays its child widgets using the geometry managers: <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link>, <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link>, and <db:link xlink:href="qformlayout.xml">QFormLayout</db:link>.</db:para>
<db:para>There are four private functions to simplify the class constructor: the createMenu(), createHorizontalGroupBox(), createGridGroupBox(), and createFormGroupBox() functions create several widgets that the example uses to demonstrate how the layout affects their appearances.</db:para>
</db:section>
<db:section xml:id="dialog-class-implementation">
<db:title>Dialog Class Implementation</db:title>
<db:programlisting language="cpp">Dialog::Dialog()
{
    createMenu();
    createHorizontalGroupBox();
    createGridGroupBox();
    createFormGroupBox();
</db:programlisting>
<db:para>In the constructor, we first use the createMenu() function to create and populate a menu bar and the createHorizontalGroupBox() function to create a group box containing four buttons with a horizontal layout. Next we use the createGridGroupBox() function to create a group box containing several line edits and a small text editor which are displayed in a grid layout. Finally, we use the createFormGroupBox() function to create a group box with three labels and three input fields: a line edit, a combo box and a spin box.</db:para>
<db:programlisting language="cpp">    bigEditor = new QTextEdit;
    bigEditor-&gt;setPlainText(tr(&quot;This widget takes up all the remaining space &quot;
                               &quot;in the top-level layout.&quot;));

    buttonBox = new QDialogButtonBox(QDialogButtonBox::Ok
                                     | QDialogButtonBox::Cancel);

    connect(buttonBox, SIGNAL(accepted()), this, SLOT(accept()));
    connect(buttonBox, SIGNAL(rejected()), this, SLOT(reject()));
</db:programlisting>
<db:para>We also create a big text editor and a dialog button box. The <db:link xlink:href="qdialogbuttonbox.xml">QDialogButtonBox</db:link> class is a widget that presents buttons in a layout that is appropriate to the current widget style. The preferred buttons can be specified as arguments to the constructor, using the <db:link xlink:href="qdialogbuttonbox.xml#StandardButton-enum">QDialogButtonBox::StandardButtons</db:link> enum.</db:para>
<db:para>Note that we don't have to specify a parent for the widgets when we create them. The reason is that all the widgets we create here will be added to a layout, and when we add a widget to a layout, it is automatically reparented to the widget the layout is installed on.</db:para>
<db:programlisting language="cpp">    QVBoxLayout *mainLayout = new QVBoxLayout;
</db:programlisting>
<db:para>The main layout is a <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> object. <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> is a convenience class for a box layout with vertical orientation.</db:para>
<db:para>In general, the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> class takes the space it gets (from its parent layout or from the parent widget), divides it up into a series of boxes, and makes each managed widget fill one box. If the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>'s orientation is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> the boxes are placed in a row. If the orientation is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>, the boxes are placed in a column. The corresponding convenience classes are <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> and <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link>, respectively.</db:para>
<db:programlisting language="cpp">    mainLayout-&gt;setMenuBar(menuBar);
</db:programlisting>
<db:para>When we call the <db:link xlink:href="qlayout.xml#setMenuBar">QLayout::setMenuBar</db:link>() function, the layout places the provided menu bar at the top of the parent widget, and outside the widget's <db:link xlink:href="qwidget.xml#contentsRect">content margins</db:link>. All child widgets are placed below the bottom edge of the menu bar.</db:para>
<db:programlisting language="cpp">    mainLayout-&gt;addWidget(horizontalGroupBox);
    mainLayout-&gt;addWidget(gridGroupBox);
    mainLayout-&gt;addWidget(formGroupBox);
    mainLayout-&gt;addWidget(bigEditor);
    mainLayout-&gt;addWidget(buttonBox);
</db:programlisting>
<db:para>We use the <db:link xlink:href="qboxlayout.xml#addWidget">QBoxLayout::addWidget</db:link>() function to add the widgets to the end of layout. Each widget will get at least its minimum size and at most its maximum size. It is possible to specify a stretch factor in the <db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>() function, and any excess space is shared according to these stretch factors. If not specified, a widget's stretch factor is 0.</db:para>
<db:programlisting language="cpp">    setLayout(mainLayout);

    setWindowTitle(tr(&quot;Basic Layouts&quot;));
}
</db:programlisting>
<db:para>We install the main layout on the Dialog widget using the <db:link xlink:href="qwidget.xml#setLayout">QWidget::setLayout</db:link>() function, and all of the layout's widgets are automatically reparented to be children of the Dialog widget.</db:para>
<db:programlisting language="cpp">void Dialog::createMenu()
{
    menuBar = new QMenuBar;

    fileMenu = new QMenu(tr(&quot;&amp;File&quot;), this);
    exitAction = fileMenu-&gt;addAction(tr(&quot;E&amp;xit&quot;));
    menuBar-&gt;addMenu(fileMenu);

    connect(exitAction, SIGNAL(triggered()), this, SLOT(accept()));
}
</db:programlisting>
<db:para>In the private createMenu() function we create a menu bar, and add a pull-down <db:guilabel>File</db:guilabel> menu containing an <db:guilabel>Exit</db:guilabel> option.</db:para>
<db:programlisting language="cpp">void Dialog::createHorizontalGroupBox()
{
    horizontalGroupBox = new QGroupBox(tr(&quot;Horizontal layout&quot;));
    QHBoxLayout *layout = new QHBoxLayout;

    for (int i = 0; i &lt; NumButtons; ++i) {
        buttons[i] = new QPushButton(tr(&quot;Button %1&quot;).arg(i + 1));
        layout-&gt;addWidget(buttons[i]);
    }
    horizontalGroupBox-&gt;setLayout(layout);
}
</db:programlisting>
<db:para>When we create the horizontal group box, we use a <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> as the internal layout. We create the buttons we want to put in the group box, add them to the layout and install the layout on the group box.</db:para>
<db:programlisting language="cpp">void Dialog::createGridGroupBox()
{
    gridGroupBox = new QGroupBox(tr(&quot;Grid layout&quot;));
</db:programlisting>
<db:para>In the createGridGroupBox() function we use a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> which lays out widgets in a grid. It takes the space made available to it (by its parent layout or by the parent widget), divides it up into rows and columns, and puts each widget it manages into the correct cell.</db:para>
<db:programlisting language="cpp">    for (int i = 0; i &lt; NumGridRows; ++i) {
        labels[i] = new QLabel(tr(&quot;Line %1:&quot;).arg(i + 1));
        lineEdits[i] = new QLineEdit;
        layout-&gt;addWidget(labels[i], i + 1, 0);
        layout-&gt;addWidget(lineEdits[i], i + 1, 1);
    }

</db:programlisting>
<db:para>For each row in the grid we create a label and an associated line edit, and add them to the layout. The <db:link xlink:href="qgridlayout.xml#addWidget">QGridLayout::addWidget</db:link>() function differ from the corresponding function in <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>: It needs the row and column specifying the grid cell to put the widget in.</db:para>
<db:programlisting language="cpp">    smallEditor = new QTextEdit;
    smallEditor-&gt;setPlainText(tr(&quot;This widget takes up about two thirds of the &quot;
                                 &quot;grid layout.&quot;));
    layout-&gt;addWidget(smallEditor, 0, 2, 4, 1);
</db:programlisting>
<db:para><db:link xlink:href="qgridlayout.xml#addWidget">QGridLayout::addWidget</db:link>() can in addition take arguments specifying the number of rows and columns the cell will be spanning. In this example, we create a small editor which spans three rows and one column.</db:para>
<db:para>For both the <db:link xlink:href="qboxlayout.xml#addWidget">QBoxLayout::addWidget</db:link>() and <db:link xlink:href="qgridlayout.xml#addWidget">QGridLayout::addWidget</db:link>() functions it is also possible to add a last argument specifying the widget's alignment. By default it fills the whole cell. But we could, for example, align a widget with the right edge by specifying the alignment to be <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignRight</db:link>.</db:para>
<db:programlisting language="cpp">    layout-&gt;setColumnStretch(1, 10);
    layout-&gt;setColumnStretch(2, 20);
    gridGroupBox-&gt;setLayout(layout);
}
</db:programlisting>
<db:para>Each column in a grid layout has a stretch factor. The stretch factor is set using <db:link xlink:href="qgridlayout.xml#setColumnStretch">QGridLayout::setColumnStretch</db:link>() and determines how much of the available space the column will get over and above its necessary minimum.</db:para>
<db:para>In this example, we set the stretch factors for columns 1 and 2. The stretch factor is relative to the other columns in this grid; columns with a higher stretch factor take more of the available space. So column 2 in our grid layout will get more of the available space than column 1, and column 0 will not grow at all since its stretch factor is 0 (the default).</db:para>
<db:para>Columns and rows behave identically; there is an equivalent stretch factor for rows, as well as a <db:link xlink:href="qgridlayout.xml#setRowStretch">QGridLayout::setRowStretch</db:link>() function.</db:para>
<db:programlisting language="cpp">void Dialog::createFormGroupBox()
{
    formGroupBox = new QGroupBox(tr(&quot;Form layout&quot;));
    QFormLayout *layout = new QFormLayout;
    layout-&gt;addRow(new QLabel(tr(&quot;Line 1:&quot;)), new QLineEdit);
    layout-&gt;addRow(new QLabel(tr(&quot;Line 2, long text:&quot;)), new QComboBox);
    layout-&gt;addRow(new QLabel(tr(&quot;Line 3:&quot;)), new QSpinBox);
    formGroupBox-&gt;setLayout(layout);
}
</db:programlisting>
<db:para>In the createFormGroupBox() function, we use a <db:link xlink:href="qformlayout.xml">QFormLayout</db:link> to neatly arrange objects into two columns - name and field. There are three <db:link xlink:href="qlabel.xml">QLabel</db:link> objects for names with three corresponding input widgets as fields: a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link>, a <db:link xlink:href="qcombobox.xml">QComboBox</db:link> and a <db:link xlink:href="qspinbox.xml">QSpinBox</db:link>. Unlike <db:link xlink:href="qboxlayout.xml#addWidget">QBoxLayout::addWidget</db:link>() and <db:link xlink:href="qgridlayout.xml#addWidget">QGridLayout::addWidget</db:link>(), we use <db:link xlink:href="qformlayout.xml#addRow">QFormLayout::addRow</db:link>() to add widgets to the layout.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="layouts/basiclayouts/basiclayouts.pro">layouts/basiclayouts/basiclayouts.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/basiclayouts/dialog.cpp">layouts/basiclayouts/dialog.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/basiclayouts/dialog.h">layouts/basiclayouts/dialog.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="layouts/basiclayouts/main.cpp">layouts/basiclayouts/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
