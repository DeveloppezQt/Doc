<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPlaceContent Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link> class serves as the base class for rich content types.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPlaceContent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qplaceeditorial.xml" xlink:role="class">QPlaceEditorial</db:link>, <db:link xlink:href="qplaceimage.xml" xlink:role="class">QPlaceImage</db:link>, and <db:link xlink:href="qplacereview.xml" xlink:role="class">QPlaceReview</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPlaceContent is part of <db:simplelist><db:member>QtLocation-places</db:member><db:member>QtLocation-places-data</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Rich content such as <db:link xlink:href="qplaceimage.xml">images</db:link>, <db:link xlink:href="qplacereview.xml">reviews</db:link> and <db:link xlink:href="qplaceeditorial.xml">editorials</db:link> inherit from the <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link> class which contains common properties such as an attribution string and content contributor, which may take the form of a <db:link xlink:href="qplaceuser.xml">user</db:link> and/or <db:link xlink:href="qplacesupplier.xml">supplier</db:link>. It is possible that a user from a supplier is contributing content, hence both fields could be filled in simultaneously.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Some providers may <db:emphasis>require</db:emphasis> that the attribution string be displayed to the user whenever a piece of content is viewed.</db:para>
<db:para>Conversion between <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link> and it's subclasses can be easily performed without casting. Due to the way it has been implemented, object slicing is not an issue, the following code is valid:</db:para>
<db:programlisting language="cpp">QPlaceImage image;
image.setUrl(QUrl(&quot;www.example.com&quot;));

QPlaceContent content = image;

QPlaceImage image2;
image2 = content;
qDebug() &lt;&lt; image2.url(); //image2.url() == &quot;www.example.com&quot;
</db:programlisting>
<db:para>The rich content of a place is typically made available as paginated items. The ability to convert between <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link> and it's subclasses means that code which handles the mechanics of paging can be easily shared for each of the sub types.</db:para>
<db:para>At present the <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link> class is not extensible by 3rd parties.</db:para>
<db:para>Note: The Places API considers content objects to be 'retrieve-only' objects. Submission of content to a provider is not a supported use case.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplaceimage.xml">QPlaceImage</db:link></db:member>
<db:member><db:link xlink:href="qplacereview.xml">QPlaceReview</db:link></db:member>
<db:member><db:link xlink:href="qplaceeditorial.xml">QPlaceEditorial</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Collection-typedef">
<db:title>QPlaceContent::Collection</db:title>
<db:para>Synonym for <db:link xlink:href="qmap.xml">QMap</db:link>&lt;int, <db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link>&gt;. The key of the map is an <db:code>int</db:code> representing the index of the content. The value is the content object itself.</db:para>
<db:para>The <db:code>Collection</db:code> is intended to be a container where content items, that have been retrieved as pages, can be stored. This enables a developer to skip pages, for example indexes 0-9 may be stored in the collection, if the user skips to indexes 80-99, these can be stored in the collection as well.</db:para>
</db:section>
<db:section xml:id="Type-enum">
<db:title>enum QPlaceContent::Type</db:title>
<db:para>Defines the type of content.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link></db:emphasis>::NoType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The content object is default constructed, any other content type may be assigned to this content object.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link></db:emphasis>::ImageType</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The content object is an image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link></db:emphasis>::ReviewType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The content object is a review.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qplacecontent.xml">QPlaceContent</db:link></db:emphasis>::EditorialType</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The content object is an editorial</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPlaceContent">
<db:title>QPlaceContent::QPlaceContent()</db:title>
<db:para>Constructs an default content object which has no type.</db:para>
</db:section>
<db:section xml:id="QPlaceContent-1">
<db:title>QPlaceContent::QPlaceContent(const QPlaceContent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPlaceContent">
<db:title>[virtual noexcept] QPlaceContent::~QPlaceContent()</db:title>
<db:para>Destroys the content object.</db:para>
</db:section>
<db:section xml:id="attribution">
<db:title>QString QPlaceContent::attribution() const</db:title>
<db:para>Returns a rich text attribution string.</db:para>
<db:para><db:emphasis role="bold">Note</db:emphasis>: Some providers may require that the attribution of a particular content item always be displayed when the content item is shown.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#setAttribution">setAttribution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribution">
<db:title>void QPlaceContent::setAttribution(const QString &amp;<db:emphasis>attribution</db:emphasis>)</db:title>
<db:para>Sets a rich text <db:code role="parameter">attribution</db:code> string for this content item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#attribution">attribution</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSupplier">
<db:title>void QPlaceContent::setSupplier(const QPlaceSupplier &amp;<db:emphasis>supplier</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">supplier</db:code> of the content.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#supplier">supplier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUser">
<db:title>void QPlaceContent::setUser(const QPlaceUser &amp;<db:emphasis>user</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">user</db:code> who contributed this content.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#user">user</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supplier">
<db:title>QPlaceSupplier QPlaceContent::supplier() const</db:title>
<db:para>Returns the supplier who contributed this content.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#setSupplier">setSupplier</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QPlaceContent::Type QPlaceContent::type() const</db:title>
<db:para>Returns the content type.</db:para>
</db:section>
<db:section xml:id="user">
<db:title>QPlaceUser QPlaceContent::user() const</db:title>
<db:para>Returns the user who contributed this content.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qplacecontent.xml#setUser">setUser</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QPlaceContent::operator!=(const QPlaceContent &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this content object is not equivalent to <db:code role="parameter">other</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QPlaceContent &amp;QPlaceContent::operator=(const QPlaceContent &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> content object to this and returns a reference to this content object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QPlaceContent::operator==(const QPlaceContent &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this content object is equivalent to <db:code role="parameter">other</db:code>, otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
