<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtWin Namespace</db:title>
<db:productname>QtWinExtras</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Windows Extras Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtwin.xml">QtWin</db:link> namespace contains miscellaneous Windows-specific functions.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QtWin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += winextras</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="HBitmapFormat-enum">
<db:title>[since 5.2] enum QtWin::HBitmapFormat</db:title>
<db:enumsynopsis>
<db:enumname>HBitmapFormat</db:enumname>
<db:enumitem>
<db:enumidentifier>HBitmapNoAlpha</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HBitmapPremultipliedAlpha</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HBitmapAlpha</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum defines how the conversion between <db:code>HBITMAP</db:code> and <db:link xlink:href="qpixmap.xml">QPixmap</db:link> is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::HBitmapNoAlpha</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The alpha channel is ignored and always treated as being set to fully opaque. This is preferred if the <db:code>HBITMAP</db:code> is used with standard GDI calls, such as <db:code>BitBlt()</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::HBitmapPremultipliedAlpha</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The <db:code>HBITMAP</db:code> is treated as having an alpha channel and premultiplied colors. This is preferred if the <db:code>HBITMAP</db:code> is accessed through the <db:code>AlphaBlend()</db:code> GDI function.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::HBitmapAlpha</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The <db:code>HBITMAP</db:code> is treated as having a plain alpha channel. This is the preferred format if the <db:code>HBITMAP</db:code> is going to be used as an application icon or a systray icon.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#fromHBITMAP">fromHBITMAP</db:link>()</db:member>
<db:member><db:link xlink:href="qtwin.xml#toHBITMAP">toHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="WindowFlip3DPolicy-enum">
<db:title>[since 5.2] enum QtWin::WindowFlip3DPolicy</db:title>
<db:enumsynopsis>
<db:enumname>WindowFlip3DPolicy</db:enumname>
<db:enumitem>
<db:enumidentifier>FlipDefault</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FlipExcludeBelow</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FlipExcludeAbove</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type specifies the Flip3D window policy.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::FlipDefault</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Let the OS decide whether to include the window in the Flip3D rendering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::FlipExcludeAbove</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Exclude the window from Flip3D and display it above the Flip3D rendering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtwin.xml">QtWin</db:link></db:emphasis>::FlipExcludeBelow</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Exclude the window from Flip3D and display it below the Flip3D rendering.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#setWindowFlip3DPolicy">setWindowFlip3DPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="colorizationColor">
<db:title>[since 5.2] QColor QtWin::colorizationColor(bool *<db:emphasis>opaqueBlend</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>QColor</db:type>
<db:methodname>colorizationColor</db:methodname>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>opaqueBlend</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor colorizationColor(bool *opaqueBlend)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the DWM colorization color. After the function returns, the optional <db:code role="parameter">opaqueBlend</db:code> will contain true if the color is an opaque blend and false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="createMask">
<db:title>[since 5.2] HBITMAP QtWin::createMask(const QBitmap &amp;<db:emphasis>bitmap</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>HBITMAP</db:type>
<db:methodname>createMask</db:methodname>
<db:methodparam>
<db:type>const QBitmap &amp;</db:type>
<db:parameter>bitmap</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HBITMAP createMask(const QBitmap &amp;bitmap)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:code>HBITMAP</db:code> equivalent of the <db:link xlink:href="qbitmap.xml">QBitmap</db:link> <db:code role="parameter">bitmap</db:code>.</db:para>
<db:para>It is the caller's responsibility to free the <db:code>HBITMAP</db:code> data after use.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#toHBITMAP">toHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableBlurBehindWindow">
<db:title>[since 5.2] void QtWin::disableBlurBehindWindow(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void disableBlurBehindWindow(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables the previously enabled blur effect for the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#enableBlurBehindWindow">enableBlurBehindWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="disableBlurBehindWindow-1">
<db:title>[since 5.2] void QtWin::disableBlurBehindWindow(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>disableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void disableBlurBehindWindow(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#disableBlurBehindWindow">QtWin::disableBlurBehindWindow</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="enableBlurBehindWindow">
<db:title>[since 5.2] void QtWin::enableBlurBehindWindow(QWindow *<db:emphasis>window</db:emphasis>, const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableBlurBehindWindow(QWindow *window, const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the blur effect for the specified <db:code role="parameter">region</db:code> of the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#disableBlurBehindWindow">disableBlurBehindWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableBlurBehindWindow-1">
<db:title>[since 5.2] void QtWin::enableBlurBehindWindow(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableBlurBehindWindow(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enables the blur effect for the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#disableBlurBehindWindow">disableBlurBehindWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enableBlurBehindWindow-2">
<db:title>[since 5.2] void QtWin::enableBlurBehindWindow(QWidget *<db:emphasis>window</db:emphasis>, const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableBlurBehindWindow(QWidget *window, const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#enableBlurBehindWindow">QtWin::enableBlurBehindWindow</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="enableBlurBehindWindow-3">
<db:title>[since 5.2] void QtWin::enableBlurBehindWindow(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>enableBlurBehindWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void enableBlurBehindWindow(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#enableBlurBehindWindow">QtWin::enableBlurBehindWindow</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="errorStringFromHresult">
<db:title>[since 5.2] QString QtWin::errorStringFromHresult(HRESULT <db:emphasis>hresult</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>errorStringFromHresult</db:methodname>
<db:methodparam>
<db:type>HRESULT</db:type>
<db:parameter>hresult</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorStringFromHresult(HRESULT hresult)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the code name of the <db:code role="parameter">hresult</db:code> error id specified (usually the name of the WinAPI macro) or an empty string if the message is unknown.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="extendFrameIntoClientArea">
<db:title>[since 5.2] void QtWin::extendFrameIntoClientArea(QWindow *<db:emphasis>window</db:emphasis>, int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>extendFrameIntoClientArea</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void extendFrameIntoClientArea(QWindow *window, int left, int top, int right, int bottom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Extends the glass frame into the client area of the specified <db:code role="parameter">window</db:code> using the <db:code role="parameter">left</db:code>, <db:code role="parameter">top</db:code>, <db:code role="parameter">right</db:code>, and <db:code role="parameter">bottom</db:code> margin values.</db:para>
<db:para>Pass -1 as values for any of the four margins to fully extend the frame, creating a <db:emphasis>sheet of glass</db:emphasis> effect.</db:para>
<db:para>If you want the extended frame to act like a standard window border, you should handle that yourself.</db:para>
<db:note>
<db:para>If <db:code role="parameter">window</db:code> is a <db:link xlink:href="qwidget.xml">QWidget</db:link> handle, set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_NoSystemBackground</db:link> attribute for your widget.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#resetExtendedFrame">resetExtendedFrame</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="extendFrameIntoClientArea-1">
<db:title>[since 5.2] void QtWin::extendFrameIntoClientArea(QWindow *<db:emphasis>window</db:emphasis>, const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>extendFrameIntoClientArea</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void extendFrameIntoClientArea(QWindow *window, const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">QtWin::extendFrameIntoClientArea</db:link>().</db:para>
<db:para>Extends the glass frame into the client area of the specified <db:code role="parameter">window</db:code> using the specified <db:code role="parameter">margins</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="extendFrameIntoClientArea-2">
<db:title>[since 5.2] void QtWin::extendFrameIntoClientArea(QWidget *<db:emphasis>window</db:emphasis>, const QMargins &amp;<db:emphasis>margins</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>extendFrameIntoClientArea</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QMargins &amp;</db:type>
<db:parameter>margins</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void extendFrameIntoClientArea(QWidget *window, const QMargins &amp;margins)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">QtWin::extendFrameIntoClientArea</db:link>().</db:para>
<db:para>Convenience overload that allows passing frame sizes in a <db:code role="parameter">margins</db:code> structure.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="extendFrameIntoClientArea-3">
<db:title>[since 5.2] void QtWin::extendFrameIntoClientArea(QWidget *<db:emphasis>window</db:emphasis>, int <db:emphasis>left</db:emphasis>, int <db:emphasis>top</db:emphasis>, int <db:emphasis>right</db:emphasis>, int <db:emphasis>bottom</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>extendFrameIntoClientArea</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>left</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>top</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>right</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>bottom</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void extendFrameIntoClientArea(QWidget *window, int left, int top, int right, int bottom)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">QtWin::extendFrameIntoClientArea</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="fromHBITMAP">
<db:title>[since 5.2] QPixmap QtWin::fromHBITMAP(HBITMAP <db:emphasis>bitmap</db:emphasis>, QtWin::HBitmapFormat <db:emphasis>format</db:emphasis> = HBitmapNoAlpha)</db:title>
<db:methodsynopsis>
<db:type>QPixmap</db:type>
<db:methodname>fromHBITMAP</db:methodname>
<db:methodparam>
<db:type>HBITMAP</db:type>
<db:parameter>bitmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::HBitmapFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>HBitmapNoAlpha</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap fromHBITMAP(HBITMAP bitmap, QtWin::HBitmapFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> that is equivalent to the given <db:code role="parameter">bitmap</db:code>. The conversion is based on the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#toHBITMAP">toHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHICON">
<db:title>[since 5.2] QPixmap QtWin::fromHICON(HICON <db:emphasis>icon</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPixmap</db:type>
<db:methodname>fromHICON</db:methodname>
<db:methodparam>
<db:type>HICON</db:type>
<db:parameter>icon</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap fromHICON(HICON icon)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qpixmap.xml">QPixmap</db:link> that is equivalent to the given <db:code role="parameter">icon</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#toHICON">toHICON</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromHRGN">
<db:title>[since 5.2] QRegion QtWin::fromHRGN(HRGN <db:emphasis>hrgn</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QRegion</db:type>
<db:methodname>fromHRGN</db:methodname>
<db:methodparam>
<db:type>HRGN</db:type>
<db:parameter>hrgn</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRegion fromHRGN(HRGN hrgn)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qregion.xml">QRegion</db:link> that is equivalent to the given <db:code role="parameter">hrgn</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="imageFromHBITMAP">
<db:title>[since 5.2] QImage QtWin::imageFromHBITMAP(HDC <db:emphasis>hdc</db:emphasis>, HBITMAP <db:emphasis>bitmap</db:emphasis>, int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>imageFromHBITMAP</db:methodname>
<db:methodparam>
<db:type>HDC</db:type>
<db:parameter>hdc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>HBITMAP</db:type>
<db:parameter>bitmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage imageFromHBITMAP(HDC hdc, HBITMAP bitmap, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qimage.xml">QImage</db:link> that is equivalent to the given <db:code role="parameter">bitmap</db:code>. The conversion is based on the specified <db:code>HDC</db:code> context <db:code role="parameter">hdc</db:code> using the specified <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#toHBITMAP">toHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageFromHBITMAP-1">
<db:title>[since 5.12] QImage QtWin::imageFromHBITMAP(HBITMAP <db:emphasis>bitmap</db:emphasis>, QtWin::HBitmapFormat <db:emphasis>format</db:emphasis> = HBitmapNoAlpha)</db:title>
<db:methodsynopsis>
<db:type>QImage</db:type>
<db:methodname>imageFromHBITMAP</db:methodname>
<db:methodparam>
<db:type>HBITMAP</db:type>
<db:parameter>bitmap</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::HBitmapFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>HBitmapNoAlpha</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage imageFromHBITMAP(HBITMAP bitmap, QtWin::HBitmapFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qimage.xml">QImage</db:link> that is equivalent to the given <db:code role="parameter">bitmap</db:code>. The conversion is based on the specified <db:code role="parameter">format</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#imageToHBITMAP">imageToHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="imageToHBITMAP">
<db:title>[since 5.12] HBITMAP QtWin::imageToHBITMAP(const QImage &amp;<db:emphasis>image</db:emphasis>, QtWin::HBitmapFormat <db:emphasis>format</db:emphasis> = HBitmapNoAlpha)</db:title>
<db:methodsynopsis>
<db:type>HBITMAP</db:type>
<db:methodname>imageToHBITMAP</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::HBitmapFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>HBitmapNoAlpha</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HBITMAP imageToHBITMAP(const QImage &amp;image, QtWin::HBitmapFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:code>HBITMAP</db:code> equivalent of the <db:link xlink:href="qimage.xml">QImage</db:link> <db:code role="parameter">image</db:code>, based on the given <db:code role="parameter">format</db:code>. Returns the <db:code>HBITMAP</db:code> handle.</db:para>
<db:para>It is the caller's responsibility to free the <db:code>HBITMAP</db:code> data after use.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#imageFromHBITMAP">imageFromHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCompositionEnabled">
<db:title>[since 5.2] bool QtWin::isCompositionEnabled()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isCompositionEnabled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCompositionEnabled()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the DWM composition state.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isCompositionOpaque">
<db:title>[since 5.2] bool QtWin::isCompositionOpaque()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isCompositionOpaque</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCompositionOpaque()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the colorization color is an opaque blend.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isWindowExcludedFromPeek">
<db:title>[since 5.2] bool QtWin::isWindowExcludedFromPeek(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isWindowExcludedFromPeek</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindowExcludedFromPeek(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the specified <db:code role="parameter">window</db:code> is excluded from Aero Peek.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isWindowExcludedFromPeek-1">
<db:title>[since 5.2] bool QtWin::isWindowExcludedFromPeek(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isWindowExcludedFromPeek</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindowExcludedFromPeek(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#isWindowExcludedFromPeek">QtWin::isWindowExcludedFromPeek</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isWindowPeekDisallowed">
<db:title>[since 5.2] bool QtWin::isWindowPeekDisallowed(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isWindowPeekDisallowed</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindowPeekDisallowed(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if Aero Peek is disallowed on the thumbnail of the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="isWindowPeekDisallowed-1">
<db:title>[since 5.2] bool QtWin::isWindowPeekDisallowed(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>isWindowPeekDisallowed</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isWindowPeekDisallowed(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#isWindowPeekDisallowed">QtWin::isWindowPeekDisallowed</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="markFullscreenWindow">
<db:title>[since 5.2] void QtWin::markFullscreenWindow(QWindow *<db:emphasis>window</db:emphasis>, bool <db:emphasis>fullscreen</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markFullscreenWindow</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fullscreen</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void markFullscreenWindow(QWindow *window, bool fullscreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the specified <db:code role="parameter">window</db:code> as running in the full-screen mode if <db:code role="parameter">fullscreen</db:code> is true, so that the shell handles it correctly. Otherwise, removes the mark.</db:para>
<db:note>
<db:para>You do not usually need to call this function, because the Windows taskbar always tries to determine whether a window is running in the full-screen mode.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="markFullscreenWindow-1">
<db:title>[since 5.2] void QtWin::markFullscreenWindow(QWidget *<db:emphasis>window</db:emphasis>, bool <db:emphasis>fullscreen</db:emphasis> = true)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>markFullscreenWindow</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>fullscreen</db:parameter>
<db:initializer>true</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void markFullscreenWindow(QWidget *window, bool fullscreen)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#markFullscreenWindow">QtWin::markFullscreenWindow</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="realColorizationColor">
<db:title>[since 5.2] QColor QtWin::realColorizationColor()</db:title>
<db:methodsynopsis>
<db:type>QColor</db:type>
<db:methodname>realColorizationColor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QColor realColorizationColor()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the real colorization color, set by the user, using an undocumented registry key. The API-based function <db:code>getColorizationColor()</db:code> returns an alpha-blended color which often turns out a semitransparent gray rather than something similar to what is chosen by the user.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#colorizationColor">colorizationColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetExtendedFrame">
<db:title>[since 5.2] void QtWin::resetExtendedFrame(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetExtendedFrame</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetExtendedFrame(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets the glass frame and restores the <db:code role="parameter">window</db:code> attributes.</db:para>
<db:para>This convenience function calls <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">extendFrameIntoClientArea</db:link>() with margins set to 0.</db:para>
<db:note>
<db:para>You must unset the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_NoSystemBackground</db:link> attribute for <db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">extendFrameIntoClientArea</db:link>() to work.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#extendFrameIntoClientArea">extendFrameIntoClientArea</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="resetExtendedFrame-1">
<db:title>[since 5.2] void QtWin::resetExtendedFrame(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>resetExtendedFrame</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void resetExtendedFrame(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#resetExtendedFrame">QtWin::resetExtendedFrame</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="setCompositionEnabled">
<db:title>[since 5.2] void QtWin::setCompositionEnabled(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCompositionEnabled</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>enabled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCompositionEnabled(bool enabled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether the Windows Desktop composition is <db:code role="parameter">enabled</db:code>.</db:para>
<db:note>
<db:para>The underlying function was declared deprecated as of Windows 8 and takes no effect.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#isCompositionEnabled">isCompositionEnabled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentProcessExplicitAppUserModelID">
<db:title>[since 5.2] void QtWin::setCurrentProcessExplicitAppUserModelID(const QString &amp;<db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCurrentProcessExplicitAppUserModelID</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCurrentProcessExplicitAppUserModelID(const QString &amp;id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the Application User Model ID <db:code role="parameter">id</db:code>.</db:para>
<db:para>For more information, see <db:link xlink:href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd378459.aspx">Application User Model IDs</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="setWindowDisallowPeek">
<db:title>[since 5.2] void QtWin::setWindowDisallowPeek(QWindow *<db:emphasis>window</db:emphasis>, bool <db:emphasis>disallow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowDisallowPeek</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>disallow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowDisallowPeek(QWindow *window, bool disallow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Disables Aero Peek for the specified <db:code role="parameter">window</db:code> when hovering over the taskbar thumbnail of the window with the mouse pointer if <db:code role="parameter">disallow</db:code> is true; otherwise allows it.</db:para>
<db:para>The default is false.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="setWindowDisallowPeek-1">
<db:title>[since 5.2] void QtWin::setWindowDisallowPeek(QWidget *<db:emphasis>window</db:emphasis>, bool <db:emphasis>disallow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowDisallowPeek</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>disallow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowDisallowPeek(QWidget *window, bool disallow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#setWindowDisallowPeek">QtWin::setWindowDisallowPeek</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="setWindowExcludedFromPeek">
<db:title>[since 5.2] void QtWin::setWindowExcludedFromPeek(QWindow *<db:emphasis>window</db:emphasis>, bool <db:emphasis>exclude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowExcludedFromPeek</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>exclude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowExcludedFromPeek(QWindow *window, bool exclude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Excludes the specified <db:code role="parameter">window</db:code> from Aero Peek if <db:code role="parameter">exclude</db:code> is true.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#isWindowExcludedFromPeek">isWindowExcludedFromPeek</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowExcludedFromPeek-1">
<db:title>[since 5.2] void QtWin::setWindowExcludedFromPeek(QWidget *<db:emphasis>window</db:emphasis>, bool <db:emphasis>exclude</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowExcludedFromPeek</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>exclude</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowExcludedFromPeek(QWidget *window, bool exclude)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#setWindowExcludedFromPeek">QtWin::setWindowExcludedFromPeek</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="setWindowFlip3DPolicy">
<db:title>[since 5.2] void QtWin::setWindowFlip3DPolicy(QWindow *<db:emphasis>window</db:emphasis>, QtWin::WindowFlip3DPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowFlip3DPolicy</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::WindowFlip3DPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowFlip3DPolicy(QWindow *window, QtWin::WindowFlip3DPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the Flip3D policy <db:code role="parameter">policy</db:code> for the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#windowFlip3DPolicy">windowFlip3DPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWindowFlip3DPolicy-1">
<db:title>[since 5.2] void QtWin::setWindowFlip3DPolicy(QWidget *<db:emphasis>window</db:emphasis>, QtWin::WindowFlip3DPolicy <db:emphasis>policy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWindowFlip3DPolicy</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::WindowFlip3DPolicy</db:type>
<db:parameter>policy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWindowFlip3DPolicy(QWidget *window, QtWin::WindowFlip3DPolicy policy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#setWindowFlip3DPolicy">QtWin::setWindowFlip3DPolicy</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="stringFromHresult">
<db:title>[since 5.2] QString QtWin::stringFromHresult(HRESULT <db:emphasis>hresult</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>stringFromHresult</db:methodname>
<db:methodparam>
<db:type>HRESULT</db:type>
<db:parameter>hresult</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString stringFromHresult(HRESULT hresult)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a message string that explains the <db:code role="parameter">hresult</db:code> error id specified or an empty string if the explanation cannot be found.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarActivateTab">
<db:title>[since 5.2] void QtWin::taskbarActivateTab(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarActivateTab</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarActivateTab(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Activates an item on the taskbar without activating the <db:code role="parameter">window</db:code> itself.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarActivateTab-1">
<db:title>[since 5.2] void QtWin::taskbarActivateTab(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarActivateTab</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarActivateTab(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#taskbarActivateTab">QtWin::taskbarActivateTab</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarActivateTabAlt">
<db:title>[since 5.2] void QtWin::taskbarActivateTabAlt(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarActivateTabAlt</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarActivateTabAlt(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Marks the item that represents the specified <db:code role="parameter">window</db:code> on the taskbar as active, but does not activate it visually.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarActivateTabAlt-1">
<db:title>[since 5.2] void QtWin::taskbarActivateTabAlt(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarActivateTabAlt</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarActivateTabAlt(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#taskbarActivateTabAlt">QtWin::taskbarActivateTabAlt</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarAddTab">
<db:title>[since 5.2] void QtWin::taskbarAddTab(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarAddTab</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarAddTab(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds an item for the specified <db:code role="parameter">window</db:code> to the taskbar.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarAddTab-1">
<db:title>[since 5.2] void QtWin::taskbarAddTab(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarAddTab</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarAddTab(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#taskbarAddTab">QtWin::taskbarAddTab</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarDeleteTab">
<db:title>[since 5.2] void QtWin::taskbarDeleteTab(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarDeleteTab</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarDeleteTab(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the specified <db:code role="parameter">window</db:code> from the taskbar.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="taskbarDeleteTab-1">
<db:title>[since 5.2] void QtWin::taskbarDeleteTab(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>taskbarDeleteTab</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void taskbarDeleteTab(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#taskbarDeleteTab">QtWin::taskbarDeleteTab</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="toHBITMAP">
<db:title>[since 5.2] HBITMAP QtWin::toHBITMAP(const QPixmap &amp;<db:emphasis>p</db:emphasis>, QtWin::HBitmapFormat <db:emphasis>format</db:emphasis> = HBitmapNoAlpha)</db:title>
<db:methodsynopsis>
<db:type>HBITMAP</db:type>
<db:methodname>toHBITMAP</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QtWin::HBitmapFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>HBitmapNoAlpha</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HBITMAP toHBITMAP(const QPixmap &amp;p, QtWin::HBitmapFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:code>HBITMAP</db:code> equivalent of the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> <db:code role="parameter">p</db:code>, based on the given <db:code role="parameter">format</db:code>. Returns the <db:code>HBITMAP</db:code> handle.</db:para>
<db:para>It is the caller's responsibility to free the <db:code>HBITMAP</db:code> data after use.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#fromHBITMAP">fromHBITMAP</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHICON">
<db:title>[since 5.2] HICON QtWin::toHICON(const QPixmap &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>HICON</db:type>
<db:methodname>toHICON</db:methodname>
<db:methodparam>
<db:type>const QPixmap &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HICON toHICON(const QPixmap &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a <db:code>HICON</db:code> equivalent of the <db:link xlink:href="qpixmap.xml">QPixmap</db:link> <db:code role="parameter">p</db:code>. Returns the <db:code>HICON</db:code> handle.</db:para>
<db:para>It is the caller's responsibility to free the <db:code>HICON</db:code> data after use.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#fromHICON">fromHICON</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toHRGN">
<db:title>[since 5.2] HRGN QtWin::toHRGN(const QRegion &amp;<db:emphasis>region</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>HRGN</db:type>
<db:methodname>toHRGN</db:methodname>
<db:methodparam>
<db:type>const QRegion &amp;</db:type>
<db:parameter>region</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">HRGN toHRGN(const QRegion &amp;region)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a HRGN that is equivalent to the given <db:code role="parameter">region</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="windowFlip3DPolicy">
<db:title>[since 5.2] QtWin::WindowFlip3DPolicy QtWin::windowFlip3DPolicy(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QtWin::WindowFlip3DPolicy</db:type>
<db:methodname>windowFlip3DPolicy</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtWin::WindowFlip3DPolicy windowFlip3DPolicy(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current Flip3D policy for the specified <db:code role="parameter">window</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwin.xml#setWindowFlip3DPolicy">setWindowFlip3DPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowFlip3DPolicy-1">
<db:title>[since 5.2] QtWin::WindowFlip3DPolicy QtWin::windowFlip3DPolicy(QWidget *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QtWin::WindowFlip3DPolicy</db:type>
<db:methodname>windowFlip3DPolicy</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QtWin::WindowFlip3DPolicy windowFlip3DPolicy(QWidget *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtwin.xml#windowFlip3DPolicy">QtWin::windowFlip3DPolicy</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
</db:article>
