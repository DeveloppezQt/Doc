<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>OpenGL Examples from the Qt OpenGL module</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Accessing OpenGL from Qt.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/opengl-examples.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>These examples describe how to use the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module.</db:para>
<db:para>Qt provides support for integration with OpenGL implementations, giving developers the opportunity to display hardware accelerated 3D graphics alongside a more conventional user interface.</db:para>
<db:para>These examples demonstrate the basic techniques used to take advantage of OpenGL in Qt applications.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qtopengl-2dpainting-example.xml" xlink:role="page">2D Painting Example</db:link></db:term>
<db:listitem>
<db:para>The 2D Painting example shows how QPainter and QOpenGLWidget can be used together to display accelerated 2D graphics on supported hardware.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtopengl-cube-example.xml" xlink:role="page">Cube OpenGL ES 2.0 example</db:link></db:term>
<db:listitem>
<db:para>The Cube OpenGL ES 2.0 example shows how to write mouse rotatable textured 3D cube using OpenGL ES 2.0 with Qt. It shows how to handle polygon geometries efficiently and how to write simple vertex and fragment shader for programmable graphics pipeline. In addition it shows how to use quaternions for representing 3D object orientation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtopengl-hellogl2-example.xml" xlink:role="page">Hello GL2 Example</db:link></db:term>
<db:listitem>
<db:para>The Hello GL2 example demonstrates the basic use of the OpenGL-related classes provided with Qt.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtopengl-hellogles3-example.xml" xlink:role="page">Hello GLES3 Example</db:link></db:term>
<db:listitem>
<db:para>The Hello GLES3 example demonstrates easy, cross-platform usage of OpenGL ES 3.0 functions via QOpenGLExtraFunctions in an application that works identically on desktop platforms with OpenGL 3.3 and mobile/embedded devices with OpenGL ES 3.0.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qtopengl-textures-example.xml" xlink:role="page">Textures Example</db:link></db:term>
<db:listitem>
<db:para>The Textures example demonstrates the use of Qt's image classes as textures in applications that use both OpenGL and Qt to display graphics.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
