<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_add_grpc</db:title>
<db:productname>QtGrpc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GRPC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Generates Qt-based C++ services using a protobuf schema.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt-add-grpc"/>
<db:para>Generates Qt-based C++ services using a protobuf schema</db:para>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:para>This command was introduced in Qt 6.5.</db:para>
<db:para>Usually <db:code>qtgrpcgen</db:code> is invoked through the <db:code>qt_add_grpc</db:code> CMake macro.</db:para>
<db:programlisting language="cpp" role="bad">qt_add_grpc(&amp;lt;target&amp;gt; &amp;lt;TARGET_TYPE&amp;gt;
    PROTO_FILES &amp;lt;file&amp;gt; ...
    [COPY_COMMENTS]
    [GENERATE_PACKAGE_SUBFOLDERS]
    [EXTRA_NAMESPACE &amp;lt;namespace&amp;gt;]
    [EXPORT_MACRO &amp;lt;infix&amp;gt;]
    [PROTO_INCLUDES &amp;lt;path&amp;gt; ...]
    [OUTPUT_DIRECTORY &amp;lt;dir&amp;gt;]
    [OUTPUT_HEADERS &amp;lt;var&amp;gt;]
    [OUTPUT_TARGETS &amp;lt;var&amp;gt;]
)
</db:programlisting>
<db:para>The source files are created by <db:code>qtgrpcgen</db:code> and added to the target. If the target already exists, the files are <db:emphasis>added</db:emphasis> to the target source list. If the target doesn't exist, it is created as a library which you must link to.</db:para>
<db:para>The gRPC library that is generated using the <db:code>qt_add_grpc</db:code> command refers to the protobuf symbols that are used in service calls. This means you either need to use a common target in both <db:link xlink:href="qt-add-protobuf.xml">qt_add_protobuf</db:link> and <db:link xlink:href="qt-add-grpc.xml">qt_add_grpc</db:link> calls or link the generated protobuf library to the gRPC one.</db:para>
<db:para>Considering the above statement you may reuse the target for both protobuf and gRPC client code:</db:para>
<db:programlisting language="cpp" role="bad"># Generate the protobuf types first
qt_add_protobuf(test_service_client
    PROTO_FILES
        test_service.protobuf
)
...
# Reuse the protobuf target and extend it with gRPC client
# functionality
qt_add_grpc(test_service_client CLIENT
    PROTO_FILES
        test_service.protobuf
)
</db:programlisting>
<db:para>If you want to have separate targets then you need to link the gRPC client target to the protobuf one:</db:para>
<db:programlisting language="cpp" role="bad"># Generate the protobuf types first
qt_add_protobuf(test_service_protobuf
    PROTO_FILES
        test_service.protobuf
)
...
# Add separate target with the generated code of the gRPC client.
qt_add_grpc(test_service_client CLIENT
    PROTO_FILES
        test_service.protobuf
)
target_link_libraries(test_service_client PRIVATE test_service_protobuf)
</db:programlisting>
<db:section xml:id="arguments">
<db:title>Arguments</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>TARGET_TYPE</db:code> is the type of gRPC code to be generated. Since gRPC supports a client-server architecture, <db:code>CLIENT</db:code> or <db:code>SERVER</db:code> source code may be generated.</db:para>
<db:note>
<db:para>for Qt 6.5 only <db:code>CLIENT</db:code> source code generation is supported.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para><db:code>COPY_COMMENTS</db:code> copies comments from <db:code>.proto</db:code> files. If provided in the parameter list, comments related to messages and fields are copied to generated header files.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>GENERATE_PACKAGE_SUBFOLDERS</db:code> generates a folder structure for the generated files matching the <db:code>.proto</db:code> file's package name. For example, <db:code>package io.qt.test;</db:code> would put the generated files into <db:code>io/qt/test/</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>EXTRA_NAMESPACE</db:code> is an optional namespace that will be used for the generated classes. The classes are always generated in a namespace whose name is the same as the package name specified in the <db:code>.proto</db:code> file. If this option is used, then everything will be nested inside the extra namespace.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>EXPORT_MACRO</db:code> is the base name of the symbol export macro used for the generated code. The generated macro name is constructed as <db:code>QPB_&lt;EXPORT_MACRO&gt;_EXPORT</db:code>. If the option is not set, the macro is not generated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>PROTO_FILES</db:code> is the list of <db:code>.proto</db:code> files that will be used in the generation procedure.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>PROTO_INCLUDES</db:code> is the list of directories that will be searched for dependencies.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>OUTPUT_DIRECTORY</db:code> is the directory where the generated files will be put. By default, the current directory (while evaluating the function) is used.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>OUTPUT_HEADERS</db:code> can be used to specify a variable that will hold the list of headers created by the function. This list can be useful for custom project install rules.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>OUTPUT_TARGETS</db:code> can be used to specify a variable that will hold the list of targets created by the function. This list can be useful for custom project install rules.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtgrpcgen-qt-tool.xml">The qtgrpcgen Tool</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
