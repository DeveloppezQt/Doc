<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drill Down Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Drill Down example shows how to read data from a database as well as submit changes, using the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> and <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> classes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;informationwindow.h&quot;

InformationWindow::InformationWindow(int id, QSqlRelationalTableModel *items,
                                     QWidget *parent)
    : QDialog(parent)
{
    QLabel *itemLabel = new QLabel(tr(&quot;Item: &quot;));
    QLabel *descriptionLabel = new QLabel(tr(&quot;Description: &quot;));
    QLabel *imageFileLabel = new QLabel(tr(&quot;Image file: &quot;));

    createButtons();

    itemText = new QLabel;
    descriptionEditor = new QTextEdit;

    imageFileEditor = new QComboBox;
    imageFileEditor-&gt;setModel(items-&gt;relationModel(1));
    imageFileEditor-&gt;setModelColumn(items-&gt;relationModel(1)-&gt;fieldIndex(&quot;file&quot;));

    mapper = new QDataWidgetMapper(this);
    mapper-&gt;setModel(items);
    mapper-&gt;setSubmitPolicy(QDataWidgetMapper::ManualSubmit);
    mapper-&gt;setItemDelegate(new QSqlRelationalDelegate(mapper));
    mapper-&gt;addMapping(imageFileEditor, 1);
    mapper-&gt;addMapping(itemText, 2, &quot;text&quot;);
    mapper-&gt;addMapping(descriptionEditor, 3);
    mapper-&gt;setCurrentIndex(id);

    connect(descriptionEditor, SIGNAL(textChanged()),
            this, SLOT(enableButtons()));
    connect(imageFileEditor, SIGNAL(currentIndexChanged(int)),
            this, SLOT(enableButtons()));

    QFormLayout *formLayout = new QFormLayout;
    formLayout-&gt;addRow(itemLabel, itemText);
    formLayout-&gt;addRow(imageFileLabel, imageFileEditor);
    formLayout-&gt;addRow(descriptionLabel, descriptionEditor);

    QVBoxLayout *layout = new QVBoxLayout;
    layout-&gt;addLayout(formLayout);
    layout-&gt;addWidget(buttonBox);
    setLayout(layout);

    itemId = id;
    displayedImage = imageFileEditor-&gt;currentText();

    setWindowFlags(Qt::Window);
    enableButtons(false);
    setWindowTitle(itemText-&gt;text());
}

int InformationWindow::id()
{
    return itemId;
}

void InformationWindow::revert()
{
    mapper-&gt;revert();
    enableButtons(false);
}

void InformationWindow::submit()
{
    QString newImage(imageFileEditor-&gt;currentText());

    if (displayedImage != newImage) {
        displayedImage = newImage;
        emit imageChanged(itemId, newImage);
    }

    mapper-&gt;submit();
    mapper-&gt;setCurrentIndex(itemId);

    enableButtons(false);
}

void InformationWindow::createButtons()
{
    closeButton = new QPushButton(tr(&quot;&amp;Close&quot;));
    revertButton = new QPushButton(tr(&quot;&amp;Revert&quot;));
    submitButton = new QPushButton(tr(&quot;&amp;Submit&quot;));

    closeButton-&gt;setDefault(true);

    connect(closeButton, SIGNAL(clicked()), this, SLOT(close()));
    connect(revertButton, SIGNAL(clicked()), this, SLOT(revert()));
    connect(submitButton, SIGNAL(clicked()), this, SLOT(submit()));

    buttonBox = new QDialogButtonBox(this);
    buttonBox-&gt;addButton(submitButton, QDialogButtonBox::AcceptRole);
    buttonBox-&gt;addButton(revertButton, QDialogButtonBox::ResetRole);
    buttonBox-&gt;addButton(closeButton, QDialogButtonBox::RejectRole);
}

void InformationWindow::enableButtons(bool enable)
{
    revertButton-&gt;setEnabled(enable);
    submitButton-&gt;setEnabled(enable);
}

</db:programlisting>
</db:article>
