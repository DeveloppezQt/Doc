<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QExplicitlySharedDataPointer Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QExplicitlySharedDataPointer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.13.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> class represents a pointer to an explicitly shared object.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QExplicitlySharedDataPointer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link>&lt;T&gt; makes writing your own explicitly shared classes easy. <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> implements <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link> reference counting, ensuring that adding QExplicitlySharedDataPointers to your <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link> classes won't make them non-reentrant.</db:para>
<db:para>Except for one big difference, <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> is just like <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>. The big difference is that member functions of <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> <db:emphasis>do not</db:emphasis> do the automatic <db:emphasis>copy on write</db:emphasis> operation (<db:link xlink:href="qexplicitlyshareddatapointer.xml#detach">detach</db:link>()) that non-const members of <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> do before allowing the shared data object to be modified. There is a <db:link xlink:href="qexplicitlyshareddatapointer.xml#detach">detach</db:link>() function available, but if you really want to <db:link xlink:href="qexplicitlyshareddatapointer.xml#detach">detach</db:link>(), you have to call it yourself. This means that QExplicitlySharedDataPointers behave like regular C++ pointers, except that by doing reference counting and not deleting the shared data object until the reference count is 0, they avoid the dangling pointer problem.</db:para>
<db:para>It is instructive to compare <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> with <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> by way of an example. Consider the <db:link xlink:href="qshareddatapointer.xml#employee-example">Employee example</db:link> in <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link>, modified to use explicit sharing as explained in the discussion <db:link xlink:href="qshareddatapointer.xml#implicit-vs-explicit-sharing">Implicit vs Explicit Sharing</db:link>.</db:para>
<db:para>Note that if you use this class but find you are calling <db:link xlink:href="qexplicitlyshareddatapointer.xml#detach">detach</db:link>() a lot, you probably should be using <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> instead.</db:para>
<db:para>In the member function documentation, <db:emphasis>d pointer</db:emphasis> always refers to the internal pointer to the shared data object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>QSharedData</db:member>
<db:member><db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-typedef">
<db:title>QExplicitlySharedDataPointer::Type</db:title>
<db:typedefsynopsis>
<db:typedefname>Type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is the type of the shared data object. The <db:emphasis>d pointer</db:emphasis> points to an object of this type.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QExplicitlySharedDataPointer">
<db:title>QExplicitlySharedDataPointer::QExplicitlySharedDataPointer()</db:title>
<db:constructorsynopsis>
<db:methodname>QExplicitlySharedDataPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> initialized with <db:code>nullptr</db:code> as <db:emphasis>d pointer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="QExplicitlySharedDataPointer-1">
<db:title>[explicit] QExplicitlySharedDataPointer::QExplicitlySharedDataPointer(T *<db:emphasis>data</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QExplicitlySharedDataPointer</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer(T *data)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> with <db:emphasis>d pointer</db:emphasis> set to <db:code role="parameter">data</db:code> and increments <db:code role="parameter">data</db:code>'s reference count.</db:para>
</db:section>
<db:section xml:id="QExplicitlySharedDataPointer-2">
<db:title>QExplicitlySharedDataPointer::QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer&lt;T&gt; &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QExplicitlySharedDataPointer</db:methodname>
<db:methodparam>
<db:type>const QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer&lt;T&gt; &amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This standard copy constructor sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to the <db:emphasis>d pointer</db:emphasis> in <db:code role="parameter">o</db:code> and increments the reference count of the shared data object.</db:para>
</db:section>
<db:section xml:id="QExplicitlySharedDataPointer-3">
<db:title>QExplicitlySharedDataPointer::QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer&lt;X&gt; &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QExplicitlySharedDataPointer</db:methodname>
<db:methodparam>
<db:type>const QExplicitlySharedDataPointer&lt;X&gt; &amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer(const QExplicitlySharedDataPointer&lt;X&gt; &amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This copy constructor is different in that it allows <db:code role="parameter">o</db:code> to be a different type of explicitly shared data pointer but one that has a compatible shared data object.</db:para>
<db:para>By default, the <db:emphasis>d pointer</db:emphasis> of <db:code role="parameter">o</db:code> (of type <db:code>X *</db:code>) gets implicitly converted to the type <db:code>T *</db:code>; the result of this conversion is set as the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis>, and the reference count of the shared data object is incremented.</db:para>
<db:para>However, if the macro <db:code>QT_ENABLE_QEXPLICITLYSHAREDDATAPOINTER_STATICCAST</db:code> is defined before including the <db:code>QExplicitlySharedDataPointer</db:code> header, then the <db:emphasis>d pointer</db:emphasis> of <db:code role="parameter">o</db:code> undergoes a <db:code>static_cast</db:code> to the type <db:code>T *</db:code>. The result of the cast is then set as the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis>, and the reference count of the shared data object is incremented.</db:para>
<db:warning>
<db:para>relying on such <db:code>static_cast</db:code> is potentially dangerous, because it allows code like this to compile:</db:para>
</db:warning>
<db:programlisting language="cpp">    QExplicitlySharedDataPointer&amp;lt;Base&amp;gt; base(new Base);
    QExplicitlySharedDataPointer&amp;lt;Derived&amp;gt; derived(base); // !!! DANGER !!!
</db:programlisting>
<db:para>Starting from Qt 5.4 the cast is disabled by default. It is possible to enable it back by defining the <db:code>QT_ENABLE_QEXPLICITLYSHAREDDATAPOINTER_STATICCAST</db:code> macro, and therefore to allow old code (that relied on this feature) to compile without modifications.</db:para>
</db:section>
<db:section xml:id="QExplicitlySharedDataPointer-4">
<db:title>[since 5.2] QExplicitlySharedDataPointer::QExplicitlySharedDataPointer(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QExplicitlySharedDataPointer</db:methodname>
<db:methodparam>
<db:type>QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> instance, making it point at the same object that <db:code role="parameter">o</db:code> was pointing to.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="dtor.QExplicitlySharedDataPointer">
<db:title>QExplicitlySharedDataPointer::~QExplicitlySharedDataPointer()</db:title>
<db:destructorsynopsis>
<db:methodname>~QExplicitlySharedDataPointer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QExplicitlySharedDataPointer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Decrements the reference count of the shared data object. If the reference count becomes 0, the shared data object is deleted. <db:emphasis>This</db:emphasis> is then destroyed.</db:para>
</db:section>
<db:section xml:id="constData">
<db:title>const T *QExplicitlySharedDataPointer::constData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const T *</db:type>
<db:methodname>constData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const T * constData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const pointer to the shared data object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qexplicitlyshareddatapointer.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>T *QExplicitlySharedDataPointer::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the shared data object.</db:para>
</db:section>
<db:section xml:id="detach">
<db:title>void QExplicitlySharedDataPointer::detach()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>detach</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void detach()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If the shared data object's reference count is greater than 1, this function creates a deep copy of the shared data object and sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to the copy.</db:para>
<db:para>Because <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> does not do the automatic <db:emphasis>copy on write</db:emphasis> operations that members of <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> do, detach() is <db:emphasis>not</db:emphasis> called automatically anywhere in the member functions of this class. If you find that you are calling detach() everywhere in your code, consider using <db:link xlink:href="qshareddatapointer.xml">QSharedDataPointer</db:link> instead.</db:para>
</db:section>
<db:section xml:id="reset">
<db:title>void QExplicitlySharedDataPointer::reset()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reset()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Resets <db:emphasis>this</db:emphasis> to be null - i.e., this function sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to <db:code>nullptr</db:code>, but first it decrements the reference count of the shared data object and deletes the shared data object if the reference count became 0.</db:para>
</db:section>
<db:section xml:id="take">
<db:title>[since 5.12] T *QExplicitlySharedDataPointer::take()</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>take</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * take()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the shared object, and resets <db:emphasis>this</db:emphasis> to be <db:code>nullptr</db:code>. That is, this function sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to <db:code>nullptr</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.12.</db:para>
</db:section>
<db:section xml:id="operator-bool">
<db:title>bool QExplicitlySharedDataPointer::operator bool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator bool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator bool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> is <db:emphasis>not</db:emphasis> null.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QExplicitlySharedDataPointer::operator!=(const QExplicitlySharedDataPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and <db:emphasis>this</db:emphasis> do <db:emphasis>not</db:emphasis> have the same <db:emphasis>d pointer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="operator-not-eq-1">
<db:title>bool QExplicitlySharedDataPointer::operator!=(const T *<db:emphasis>ptr</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const T *</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const T *ptr) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> is <db:emphasis>not</db:emphasis> <db:code role="parameter">ptr</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>T &amp;QExplicitlySharedDataPointer::operator*() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T &amp;</db:type>
<db:methodname>operator*</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T &amp; operator*() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to the shared data object's members.</db:para>
</db:section>
<db:section xml:id="operator--gt">
<db:title>T *QExplicitlySharedDataPointer::operator-&gt;()</db:title>
<db:methodsynopsis>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides access to the shared data object's members.</db:para>
</db:section>
<db:section xml:id="operator--gt-1">
<db:title>T *QExplicitlySharedDataPointer::operator-&gt;() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>T *</db:type>
<db:methodname>operator-&gt;</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">T * operator-&gt;() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Provides const access to the shared data object's members.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QExplicitlySharedDataPointer&lt;T&gt; &amp;QExplicitlySharedDataPointer::operator=(const QExplicitlySharedDataPointer&lt;T&gt; &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer&lt;T&gt; &amp; operator=(const QExplicitlySharedDataPointer&lt;T&gt; &amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to the <db:emphasis>d pointer</db:emphasis> of <db:code role="parameter">o</db:code> and increments the reference count of the shared data object. The reference count of the old shared data object of <db:emphasis>this</db:emphasis> is decremented. If the reference count of the old shared data object becomes 0, the old shared data object is deleted.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QExplicitlySharedDataPointer&lt;T&gt; &amp;QExplicitlySharedDataPointer::operator=(T *<db:emphasis>o</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>T *</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer&lt;T&gt; &amp; operator=(T *o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> to <db:code role="parameter">o</db:code> and increments <db:code role="parameter">o</db:code>'s reference count. The reference count of the old shared data object of <db:emphasis>this</db:emphasis> is decremented. If the reference count of the old shared data object becomes 0, the old shared data object is deleted.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>[default, since 5.2] QExplicitlySharedDataPointer&lt;T&gt; &amp;QExplicitlySharedDataPointer::operator=(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:modifier>default</db:modifier>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QExplicitlySharedDataPointer&lt;T&gt; &amp; operator=(QExplicitlySharedDataPointer&lt;T&gt; &amp;&amp;other) = default</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qexplicitlyshareddatapointer.xml">QExplicitlySharedDataPointer</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QExplicitlySharedDataPointer::operator==(const QExplicitlySharedDataPointer&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QExplicitlySharedDataPointer&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QExplicitlySharedDataPointer&lt;T&gt; &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">other</db:code> and <db:emphasis>this</db:emphasis> have the same <db:emphasis>d pointer</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>bool QExplicitlySharedDataPointer::operator==(const T *<db:emphasis>ptr</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const T *</db:type>
<db:parameter>ptr</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const T *ptr) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:emphasis>d pointer</db:emphasis> of <db:emphasis>this</db:emphasis> is <db:code role="parameter">ptr</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
