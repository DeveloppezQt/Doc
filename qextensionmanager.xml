<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QExtensionManager Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link> class provides extension management facilities for Qt Designer.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QExtensionManager</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link> and <db:link xlink:href="qabstractextensionmanager.xml" xlink:role="class">QAbstractExtensionManager</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In <db:emphasis>Qt Designer</db:emphasis> the extensions are not created until they are required. For that reason, when implementing an extension, you must also create a <db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link>, i.e a class that is able to make an instance of your extension, and register it using <db:emphasis>Qt Designer</db:emphasis>'s extension manager.</db:para>
<db:para>The registration of an extension factory is typically made in the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function:</db:para>
<db:programlisting language="cpp">        void MyPlugin::initialize(QDesignerFormEditorInterface *formEditor)
        {
            if (initialized)
                return;

            QExtensionManager *manager = formEditor-&gt;extensionManager();
            Q_ASSERT(manager != 0);

            manager-&gt;registerExtensions(new MyExtensionFactory(manager),
                                        Q_TYPEID(QDesignerTaskMenuExtension));

            initialized = true;
        }
</db:programlisting>
<db:para>The <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link> is not intended to be instantiated directly. You can retrieve an interface to <db:emphasis>Qt Designer</db:emphasis>'s extension manager using the <db:link xlink:href="qdesignerformeditorinterface.xml#extensionManager">QDesignerFormEditorInterface::extensionManager</db:link>() function. A pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code> in the example above) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter. When implementing a custom widget plugin, you must subclass the <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> to expose your plugin to <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>Then, when an extension is required, <db:emphasis>Qt Designer</db:emphasis>'s extension manager will run through all its registered factories calling <db:link xlink:href="qextensionfactory.xml#createExtension">QExtensionFactory::createExtension</db:link>() for each until the first one that is able to create the requested extension for the selected object, is found. This factory will then make an instance of the extension.</db:para>
<db:para>There are four available types of extensions in <db:emphasis>Qt Designer</db:emphasis>: <db:link xlink:href="qdesignercontainerextension.xml">QDesignerContainerExtension</db:link> , <db:link xlink:href="qdesignermembersheetextension.xml">QDesignerMemberSheetExtension</db:link>, <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link> and <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link>. <db:emphasis>Qt Designer</db:emphasis>'s behavior is the same whether the requested extension is associated with a container, a member sheet, a property sheet or a task menu.</db:para>
<db:para>For a complete example using the <db:link xlink:href="qextensionmanager.xml">QExtensionManager</db:link> class, see the <db:link xlink:href="qtdesigner-taskmenuextension-example.xml">Task Menu Extension example</db:link>. The example shows how to create a custom widget plugin for Qt Designer, and how to to use the <db:link xlink:href="qdesignertaskmenuextension.xml">QDesignerTaskMenuExtension</db:link> class to add custom items to <db:emphasis>Qt Designer</db:emphasis>'s task menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qextensionfactory.xml">QExtensionFactory</db:link></db:member>
<db:member><db:link xlink:href="qabstractextensionmanager.xml">QAbstractExtensionManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QExtensionManager">
<db:title>[explicit] QExtensionManager::QExtensionManager(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs an extension manager with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QExtensionManager">
<db:title>[virtual noexcept] QExtensionManager::~QExtensionManager()</db:title>
<db:para>Destroys the extension manager</db:para>
</db:section>
<db:section xml:id="extension">
<db:title>[override virtual] QObject *QExtensionManager::extension(QObject *<db:emphasis>object</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractextensionmanager.xml#extension" role="function">QAbstractExtensionManager::extension(QObject *object, const QString &amp;iid) const</db:link>.</db:para>
<db:para>Returns the extension specified by <db:code role="parameter">iid</db:code>, for the given <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="registerExtensions">
<db:title>[override virtual] void QExtensionManager::registerExtensions(QAbstractExtensionFactory *<db:emphasis>factory</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis> = QString())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractextensionmanager.xml#registerExtensions" role="function">QAbstractExtensionManager::registerExtensions(QAbstractExtensionFactory *factory, const QString &amp;iid)</db:link>.</db:para>
<db:para>Register the extension specified by the given <db:code role="parameter">factory</db:code> and extension identifier <db:code role="parameter">iid</db:code>.</db:para>
</db:section>
<db:section xml:id="unregisterExtensions">
<db:title>[override virtual] void QExtensionManager::unregisterExtensions(QAbstractExtensionFactory *<db:emphasis>factory</db:emphasis>, const QString &amp;<db:emphasis>iid</db:emphasis> = QString())</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractextensionmanager.xml#unregisterExtensions" role="function">QAbstractExtensionManager::unregisterExtensions(QAbstractExtensionFactory *factory, const QString &amp;iid)</db:link>.</db:para>
<db:para>Unregister the extension specified by the given <db:code role="parameter">factory</db:code> and extension identifier <db:code role="parameter">iid</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qt_extension">
<db:title>QDesignerLanguageExtension *qt_extension(QAbstractExtensionManager *<db:emphasis>manager</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Returns the extension of the given <db:code role="parameter">object</db:code> cast to type T if the object is of type T (or of a subclass); otherwise returns 0. The extension is retrieved using the given extension <db:code role="parameter">manager</db:code>.</db:para>
<db:programlisting language="cpp">       QDesignerPropertySheetExtension *propertySheet;
       QExtensionManager manager = formEditor-&gt;extensionManager();

       propertySheet = qt_extension&lt;QDesignerPropertySheetExtension*&gt;(manager, widget);

       if(propertySheet) {...}
</db:programlisting>
<db:para>When implementing a custom widget plugin, a pointer to <db:emphasis>Qt Designer</db:emphasis>'s current <db:link xlink:href="qdesignerformeditorinterface.xml">QDesignerFormEditorInterface</db:link> object (<db:code>formEditor</db:code>) is provided by the <db:link xlink:href="qdesignercustomwidgetinterface.xml#initialize">QDesignerCustomWidgetInterface::initialize</db:link>() function's parameter.</db:para>
<db:para>If the widget in the example above doesn't have a defined <db:link xlink:href="qdesignerpropertysheetextension.xml">QDesignerPropertySheetExtension</db:link>, <db:code>propertySheet</db:code> will be a null pointer.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_EXTENSION_INTERFACE">
<db:title>Q_DECLARE_EXTENSION_INTERFACE(<db:emphasis>ExtensionName</db:emphasis>, <db:emphasis>Identifier</db:emphasis>)</db:title>
<db:para>Associates the given <db:code role="parameter">Identifier</db:code> (a string literal) to the extension class called <db:code role="parameter">ExtensionName</db:code>. The <db:code role="parameter">Identifier</db:code> must be unique. For example:</db:para>
<db:programlisting language="cpp">   Q_DECLARE_EXTENSION_INTERFACE(MyExtension, &quot;com.mycompany.myproduct.myextension&quot;)
</db:programlisting>
<db:para>Using the company and product names is a good way to ensure uniqueness of the identifier.</db:para>
<db:para>When implementing a custom extension class, you must use Q_DECLARE_EXTENSION_INTERFACE() to enable usage of the <db:link xlink:href="qextensionmanager.xml#qt_extension">qt_extension</db:link>() function. The macro is normally located right after the class definition for <db:code role="parameter">ExtensionName</db:code>, in the associated header file.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtplugin.xml#Q_DECLARE_INTERFACE">Q_DECLARE_INTERFACE</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
