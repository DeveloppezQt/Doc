<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSGMaterial Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> class encapsulates rendering state for a shader program.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSGMaterial</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsgflatcolormaterial.xml" xlink:role="class">QSGFlatColorMaterial</db:link>, <db:link xlink:href="qsgopaquetexturematerial.xml" xlink:role="class">QSGOpaqueTextureMaterial</db:link>, <db:link xlink:href="qsgsimplematerial.xml" xlink:role="class">QSGSimpleMaterial</db:link>, and <db:link xlink:href="qsgvertexcolormaterial.xml" xlink:role="class">QSGVertexColorMaterial</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSGMaterial is part of <db:simplelist><db:member><db:link xlink:href="qtquick-scenegraph-materials.xml">Qt Quick Scene Graph Material Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> API is very low-level. A more convenient API, which provides almost all the same features, is available through <db:link xlink:href="qsgsimplematerialshader.xml">QSGSimpleMaterialShader</db:link>.</db:para>
<db:para>The <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> and <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> subclasses form a tight relationship. For one scene graph (including nested graphs), there is one unique <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> instance which encapsulates the <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> the scene graph uses to render that material, such as a shader to flat coloring of geometry. Each <db:link xlink:href="qsggeometrynode.xml">QSGGeometryNode</db:link> can have a unique <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> containing the how the shader should be configured when drawing that node, such as the actual color to used to render the geometry.</db:para>
<db:para>The <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> has two virtual functions that both need to be implemented. The function <db:link xlink:href="qsgmaterial.xml#type">type</db:link>() should return a unique instance for all instances of a specific subclass. The <db:link xlink:href="qsgmaterial.xml#createShader">createShader</db:link>() function should return a new instance of <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link>, specific to the subclass of <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link>.</db:para>
<db:para>A minimal <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> implementation could look like this:</db:para>
<db:programlisting language="cpp">class Material : public QSGMaterial
{
public:
    QSGMaterialType *type() const { static QSGMaterialType type; return &amp;type; }
    QSGMaterialShader *createShader() const { return new Shader; }
};
</db:programlisting>
<db:note>
<db:para>All classes with QSG prefix should be used solely on the scene graph's rendering thread. See <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#scene-graph-and-rendering">Scene Graph and Rendering</db:link> for more information.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Flag-enum">
<db:title>enum QSGMaterial::Flag</db:title>
<db:bridgehead renderas="sect2">flags QSGMaterial::Flags</db:bridgehead>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:emphasis>::Blending</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Set this flag to true if the material requires GL_BLEND to be enabled during rendering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:emphasis>::RequiresDeterminant</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Set this flag to true if the material relies on the determinant of the matrix of the geometry nodes for rendering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:emphasis>::RequiresFullMatrixExceptTranslate</db:code></db:para>
</db:td>
<db:td><db:code>0x0004 | RequiresDeterminant</db:code></db:td>
<db:td>
<db:para>Set this flag to true if the material relies on the full matrix of the geometry nodes for rendering, except the translation part.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:emphasis>::RequiresFullMatrix</db:code></db:para>
</db:td>
<db:td><db:code>0x0008 | RequiresFullMatrixExceptTranslate</db:code></db:td>
<db:td>
<db:para>Set this flag to true if the material relies on the full matrix of the geometry nodes for rendering.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link></db:emphasis>::CustomCompileStep</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>Starting with Qt 5.2, the scene graph will not always call</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qsgmaterialshader.xml#compile">QSGMaterialShader::compile</db:link>() when its shader program is compiled and linked. Set this flag to enforce that the function is called.</db:para>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="compare">
<db:title>[virtual] int QSGMaterial::compare(const QSGMaterial *<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compares this material to <db:code role="parameter">other</db:code> and returns 0 if they are equal; -1 if this material should sort before <db:code role="parameter">other</db:code> and 1 if <db:code role="parameter">other</db:code> should sort before.</db:para>
<db:para>The scene graph can reorder geometry nodes to minimize state changes. The compare function is called during the sorting process so that the materials can be sorted to minimize state changes in each call to <db:link xlink:href="qsgmaterialshader.xml#updateState">QSGMaterialShader::updateState</db:link>().</db:para>
<db:para>The this pointer and <db:code role="parameter">other</db:code> is guaranteed to have the same <db:link xlink:href="qsgmaterial.xml#type">type</db:link>().</db:para>
</db:section>
<db:section xml:id="createShader">
<db:title>[pure virtual] QSGMaterialShader *QSGMaterial::createShader() const</db:title>
<db:para>This function returns a new instance of a the <db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> implementatation used to render geometry for a specific implementation of <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link>.</db:para>
<db:para>The function will be called only once for each material type that exists in the scene graph and will be cached internally.</db:para>
</db:section>
<db:section xml:id="flags">
<db:title>QSGMaterial::Flags QSGMaterial::flags() const</db:title>
<db:para>Returns the material's flags.</db:para>
</db:section>
<db:section xml:id="setFlag">
<db:title>void QSGMaterial::setFlag(QSGMaterial::Flags <db:emphasis>flags</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>Sets the flags <db:code role="parameter">flags</db:code> on this material if <db:code role="parameter">on</db:code> is true; otherwise clears the attribute.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[pure virtual] QSGMaterialType *QSGMaterial::type() const</db:title>
<db:para>This function is called by the scene graph to return a unique instance per subclass.</db:para>
</db:section>
</db:section>
</db:article>
