<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMutex Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutex.xml">QMutex</db:link> class provides access serialization between threads.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutex</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMutex is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The purpose of a <db:link xlink:href="qmutex.xml">QMutex</db:link> is to protect an object, data structure or section of code so that only one thread can access it at a time (this is similar to the Java synchronized keyword). It is usually best to use a mutex with a <db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link> since this makes it easy to ensure that locking and unlocking are performed consistently.</db:para>
<db:para>For example, say there is a method that prints a message to the user on two lines:</db:para>
<db:programlisting language="cpp">int number = 6;

void method1()
{
    number *= 5;
    number /= 4;
}

void method2()
{
    number *= 3;
    number /= 2;
}
</db:programlisting>
<db:para>If these two methods are called in succession, the following happens:</db:para>
<db:programlisting language="cpp">// method1()
number *= 5;        // number is now 30
number /= 4;        // number is now 7

// method2()
number *= 3;        // number is now 21
number /= 2;        // number is now 10
</db:programlisting>
<db:para>If these two methods are called simultaneously from two threads then the following sequence could result:</db:para>
<db:programlisting language="cpp">// Thread 1 calls method1()
number *= 5;        // number is now 30

// Thread 2 calls method2().
//
// Most likely Thread 1 has been put to sleep by the operating
// system to allow Thread 2 to run.
number *= 3;        // number is now 90
number /= 2;        // number is now 45

// Thread 1 finishes executing.
number /= 4;        // number is now 11, instead of 10
</db:programlisting>
<db:para>If we add a mutex, we should get the result we want:</db:para>
<db:programlisting language="cpp">QMutex mutex;
int number = 6;

void method1()
{
    mutex.lock();
    number *= 5;
    number /= 4;
    mutex.unlock();
}

void method2()
{
    mutex.lock();
    number *= 3;
    number /= 2;
    mutex.unlock();
}
</db:programlisting>
<db:para>Then only one thread can modify number at any given time and the result is correct. This is a trivial example, of course, but applies to any other case where things need to happen in a particular sequence.</db:para>
<db:para>When you call <db:link xlink:href="qmutex.xml#lock">lock</db:link>() in a thread, other threads that try to call <db:link xlink:href="qmutex.xml#lock">lock</db:link>() in the same place will block until the thread that got the lock calls <db:link xlink:href="qmutex.xml#unlock">unlock</db:link>(). A non-blocking alternative to <db:link xlink:href="qmutex.xml#lock">lock</db:link>() is <db:link xlink:href="qmutex.xml#tryLock-1">tryLock</db:link>().</db:para>
<db:para><db:link xlink:href="qmutex.xml">QMutex</db:link> is optimized to be fast in the non-contended case. It will not allocate memory if there is no contention on that mutex. It is constructed and destroyed with almost no overhead, which means it is fine to have many mutexes as part of other classes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qrecursivemutex.xml">QRecursiveMutex</db:link></db:member>
<db:member><db:link xlink:href="qmutexlocker.xml">QMutexLocker</db:link></db:member>
<db:member><db:link xlink:href="qreadwritelock.xml">QReadWriteLock</db:link></db:member>
<db:member><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link></db:member>
<db:member><db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMutex">
<db:title>[constexpr] QMutex::QMutex()</db:title>
<db:constructorsynopsis>
<db:methodname>QMutex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMutex()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new mutex. The mutex is created in an unlocked state.</db:para>
</db:section>
<db:section xml:id="dtor.QMutex">
<db:title>QMutex::~QMutex()</db:title>
<db:destructorsynopsis>
<db:methodname>~QMutex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMutex()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the mutex.</db:para>
<db:warning>
<db:para>Destroying a locked mutex may result in undefined behavior.</db:para>
</db:warning>
</db:section>
<db:section xml:id="lock">
<db:title>void QMutex::lock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void lock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Locks the mutex. If another thread has locked the mutex then this call will block until that thread has unlocked it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread will cause a <db:emphasis>dead-lock</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLock">
<db:title>bool QMutex::tryLock(int <db:emphasis>timeout</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLock</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>timeout</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLock(int timeout)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait for at most <db:code role="parameter">timeout</db:code> milliseconds for the mutex to become available.</db:para>
<db:para>Note: Passing a negative number as the <db:code role="parameter">timeout</db:code> is equivalent to calling <db:link xlink:href="qmutex.xml#lock">lock</db:link>(), i.e. this function will wait forever until mutex can be locked if <db:code role="parameter">timeout</db:code> is negative.</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qmutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread will cause a <db:emphasis>dead-lock</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qmutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tryLock-1">
<db:title>bool QMutex::tryLock()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>tryLock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool tryLock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false.</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qmutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread will cause a <db:emphasis>dead-lock</db:emphasis>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qmutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="try_lock">
<db:title>[since 5.8] bool QMutex::try_lock()</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false.</db:para>
<db:para>This function is provided for compatibility with the Standard Library concept Lockable. It is equivalent to <db:link xlink:href="qmutex.xml#tryLock-1">tryLock</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="try_lock_for">
<db:title>[since 5.8] bool QMutex::try_lock_for(std::chrono::duration&lt;Rep, Period&gt; <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock_for</db:methodname>
<db:methodparam>
<db:type>std::chrono::duration&lt;Rep, Period&gt;</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock_for(std::chrono::duration&lt;Rep, Period&gt; duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait for at least <db:code role="parameter">duration</db:code> for the mutex to become available.</db:para>
<db:para>Note: Passing a negative duration as the <db:code role="parameter">duration</db:code> is equivalent to calling <db:link xlink:href="qmutex.xml#try_lock">try_lock</db:link>(). This behavior differs from <db:link xlink:href="qmutex.xml#tryLock-1">tryLock</db:link>().</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qmutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread will cause a <db:emphasis>dead-lock</db:emphasis>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qmutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="try_lock_until">
<db:title>[since 5.8] bool QMutex::try_lock_until(std::chrono::time_point&lt;Clock, Duration&gt; <db:emphasis>timePoint</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>try_lock_until</db:methodname>
<db:methodparam>
<db:type>std::chrono::time_point&lt;Clock, Duration&gt;</db:type>
<db:parameter>timePoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool try_lock_until(std::chrono::time_point&lt;Clock, Duration&gt; timePoint)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attempts to lock the mutex. This function returns true if the lock was obtained; otherwise it returns false. If another thread has locked the mutex, this function will wait at least until <db:code role="parameter">timePoint</db:code> for the mutex to become available.</db:para>
<db:para>Note: Passing a <db:code role="parameter">timePoint</db:code> which has already passed is equivalent to calling <db:link xlink:href="qmutex.xml#try_lock">try_lock</db:link>(). This behavior differs from <db:link xlink:href="qmutex.xml#tryLock-1">tryLock</db:link>().</db:para>
<db:para>If the lock was obtained, the mutex must be unlocked with <db:link xlink:href="qmutex.xml#unlock">unlock</db:link>() before another thread can successfully lock it.</db:para>
<db:para>Calling this function multiple times on the same mutex from the same thread will cause a <db:emphasis>dead-lock</db:emphasis>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">lock</db:link>()</db:member>
<db:member><db:link xlink:href="qmutex.xml#unlock">unlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unlock">
<db:title>void QMutex::unlock()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unlock</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unlock()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unlocks the mutex. Attempting to unlock a mutex in a different thread to the one that locked it results in an error. Unlocking a mutex that is not locked results in undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml#lock">lock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
