<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Style Plugin Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create a plugin that extends Qt with a new GUI look and feel.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stylepluginexample.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A plugin in Qt is a class stored in a shared library that can be loaded by a <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> at run-time. When you create plugins in Qt, they either extend a Qt application or Qt itself. Writing a plugin that extends Qt itself is achieved by inheriting one of the plugin <db:link xlink:href="plugins.xml">base classes</db:link>, reimplementing functions from that class, and adding a macro. In this example we extend Qt by adding a new GUI look and feel (i.e., making a new <db:link xlink:href="qstyle.xml">QStyle</db:link> available). A high-level introduction to plugins is given in the plugin <db:link xlink:href="plugins-howto.xml">overview document</db:link>.</db:para>
<db:para>Plugins that provide new styles inherit the <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> base class. Style plugins are loaded by Qt and made available through <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link>; we will look at this later. We have implemented <db:code>SimpleStylePlugin</db:code>, which provides <db:code>SimpleStyle</db:code>. The new style contributes to widget styling by drawing button backgrounds in red - not a major contribution, but it still makes a new style.</db:para>
<db:para>The new style is platform agnostic in the sense that it is not based on any specific style implementation, but uses <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> to merely tweak the looks in the current application style that defaults to the native system style.</db:para>
<db:note>
<db:para>On some platforms, the native style will prevent the button from having a red background. In this case, try to run the example in another style (e.g., fusion).</db:para>
</db:note>
<db:para>We test the plugin with <db:code>StyleWindow</db:code>, in which we display a <db:link xlink:href="qpushbutton.xml">QPushButton</db:link>. The <db:code>SimpleStyle</db:code> and <db:code>StyleWindow</db:code> classes do not contain any plugin specific functionality and their implementations are trivial; we will therefore leap past them and head on to the <db:code>SimpleStylePlugin</db:code> and the <db:code>main()</db:code> function. After we have looked at that, we examine the plugin's profile.</db:para>
<db:section xml:id="simplestyleplugin-class-definition">
<db:title>SimpleStylePlugin Class Definition</db:title>
<db:para><db:code>SimpleStylePlugin</db:code> inherits <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> and is the plugin class.</db:para>
<db:programlisting language="cpp">class SimpleStylePlugin : public QStylePlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QStyleFactoryInterface&quot; FILE &quot;simplestyle.json&quot;)

public:
    SimpleStylePlugin() {}

    QStringList keys() const;
    QStyle *create(const QString &amp;key);
};
</db:programlisting>
<db:para><db:code>keys()</db:code> returns a list of style names that this plugin can create, while <db:code>create()</db:code> takes such a string and returns the <db:link xlink:href="qstyle.xml">QStyle</db:link> corresponding to the key. Both functions are pure virtual functions reimplemented from <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link>. When an application requests an instance of the <db:code>SimpleStyle</db:code> style, which this plugin creates, Qt will create it with this plugin.</db:para>
</db:section>
<db:section xml:id="simplestyleplugin-class-implementation">
<db:title>SimpleStylePlugin Class Implementation</db:title>
<db:para>Here is the implementation of <db:code>keys()</db:code>:</db:para>
<db:programlisting language="cpp">QStringList SimpleStylePlugin::keys() const
{
    return QStringList() &lt;&lt; &quot;SimpleStyle&quot;;
}
</db:programlisting>
<db:para>Since this plugin only supports one style, we return a <db:link xlink:href="qstringlist.xml">QStringList</db:link> with the class name of that style.</db:para>
<db:para>Here is the <db:code>create()</db:code> function:</db:para>
<db:programlisting language="cpp">QStyle *SimpleStylePlugin::create(const QString &amp;key)
{
    if (key.toLower() == &quot;simplestyle&quot;)
        return new SimpleStyle;
    return 0;
}
</db:programlisting>
<db:para>Note that the key for style plugins are case insensitive. The case sensitivity varies from plugin to plugin, so you need to check this when implementing new plugins.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The <db:code>main()</db:code> function</db:title>
<db:programlisting language="cpp">int main(int argv, char *args[])
{
    QApplication app(argv, args);
    QApplication::setStyle(QStyleFactory::create(&quot;simplestyle&quot;));

    StyleWindow window;
    window.resize(200, 50);
    window.show();

    return app.exec();
}
</db:programlisting>
<db:para>Qt loads the available style plugins when the <db:link xlink:href="qapplication.xml">QApplication</db:link> object is initialized. The <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link> class knows about all styles and produces them with <db:link xlink:href="qstylefactory.xml#create">create</db:link>() (it is a wrapper around all the style plugins).</db:para>
</db:section>
<db:section xml:id="the-simple-style-plugin-profile">
<db:title>The Simple Style Plugin Profile</db:title>
<db:para>The <db:code>SimpleStylePlugin</db:code> lives in its own directory and have its own profile:</db:para>
<db:programlisting language="cpp">TEMPLATE    = lib
CONFIG     += plugin
QT         += widgets
HEADERS     = simplestyle.h \
              simplestyleplugin.h
SOURCES     = simplestyle.cpp \
              simplestyleplugin.cpp
TARGET      = simplestyleplugin
</db:programlisting>
<db:para>In the plugin profile we need to set the lib template as we are building a shared library instead of an executable. We must also set the config to plugin. We set the library to be stored in the styles folder under stylewindow because this is a path in which Qt will search for style plugins.</db:para>
</db:section>
<db:section xml:id="related-articles-and-examples">
<db:title>Related articles and examples</db:title>
<db:para>In addition to the plugin <db:link xlink:href="plugins-howto.xml">overview document</db:link>, we have other examples and articles that concern plugins.</db:para>
<db:para>In the <db:link xlink:href="">echo plugin example</db:link> we show how to implement plugins that extends Qt applications rather than Qt itself, which is the case with the style plugin of this example. The <db:link xlink:href="qtwidgets-tools-plugandpaint-example.xml">plug &amp; paint</db:link> example shows how to implement a static plugin as well as being a more involved example on plugins that extend applications.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/plugin/plugin.pro">tools/styleplugin/plugin/plugin.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/plugin/simplestyle.cpp">tools/styleplugin/plugin/simplestyle.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/plugin/simplestyle.h">tools/styleplugin/plugin/simplestyle.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/plugin/simplestyleplugin.cpp">tools/styleplugin/plugin/simplestyleplugin.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/plugin/simplestyleplugin.h">tools/styleplugin/plugin/simplestyleplugin.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/styleplugin.pro">tools/styleplugin/styleplugin.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/stylewindow/main.cpp">tools/styleplugin/stylewindow/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/stylewindow/stylewindow.cpp">tools/styleplugin/stylewindow/stylewindow.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/stylewindow/stylewindow.h">tools/styleplugin/stylewindow/stylewindow.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="tools/styleplugin/stylewindow/stylewindow.pro">tools/styleplugin/stylewindow/stylewindow.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
