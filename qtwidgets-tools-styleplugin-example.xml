<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Style Plugin Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how to create a plugin that extends Qt with a new GUI look and feel.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/stylepluginexample.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>A plugin in Qt is a class stored in a shared library that can be loaded by a <db:link xlink:href="qpluginloader.xml">QPluginLoader</db:link> at run-time. When you create plugins in Qt, they either extend a Qt application or Qt itself. Writing a plugin that extends Qt itself is achieved by inheriting one of the plugin <db:link xlink:href="plugins.xml">base classes</db:link>, reimplementing functions from that class, and adding a macro. In this example we extend Qt by adding a new GUI look and feel (i.e., making a new <db:link xlink:href="qstyle.xml">QStyle</db:link> available). A high-level introduction to plugins is given in the plugin <db:link xlink:href="plugins-howto.xml">overview document</db:link>.</db:para>
<db:para>Plugins that provide new styles inherit the <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> base class. Style plugins are loaded by Qt and made available through <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link>; we will look at this later. We have implemented SimpleStylePlugin, which provides SimpleStyle. The new style contributes to widget styling by changing the text color of the text edit widget to red - not a major contribution, but it still makes a new style.</db:para>
<db:para>The new style is platform agnostic in the sense that it is not based on any specific style implementation, but uses <db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> to merely tweak the looks in the current application style that defaults to the native system style.</db:para>
<db:note>
<db:para>On some platforms, the native style may overwrite some custom stylings, e.g., button background color. In that case, try to run your application in another style (e.g., fusion). You may do this by passing -style fusion as a command line argument to your application.</db:para>
</db:note>
<db:para>We test the plugin with StyleWindow, in which we display a <db:link xlink:href="qtextedit.xml">QTextEdit</db:link>. The SimpleStyle and StyleWindow classes do not contain any plugin specific functionality and their implementations are trivial; we will therefore leap past them and head on to the SimpleStylePlugin and the main() function. After we have looked at that, we examine the plugin's .pro file.</db:para>
<db:section xml:id="simplestyleplugin-class-definition">
<db:title>SimpleStylePlugin Class Definition</db:title>
<db:para>SimpleStylePlugin inherits <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link> and is the plugin class.</db:para>
<db:programlisting language="cpp">class SimpleStylePlugin : public QStylePlugin
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QStyleFactoryInterface&quot; FILE &quot;simplestyle.json&quot;)

public:
    SimpleStylePlugin() = default;

    QStringList keys() const;
    QStyle *create(const QString &amp;amp;key) override;
};
</db:programlisting>
<db:para>keys() returns a list of style names that this plugin can create, while create() takes such a string and returns the <db:link xlink:href="qstyle.xml">QStyle</db:link> corresponding to the key. Both functions are pure virtual functions reimplemented from <db:link xlink:href="qstyleplugin.xml">QStylePlugin</db:link>. When an application requests an instance of the SimpleStyle style, which this plugin creates, Qt will create it with this plugin.</db:para>
</db:section>
<db:section xml:id="simplestyleplugin-class-implementation">
<db:title>SimpleStylePlugin Class Implementation</db:title>
<db:para>Here is the implementation of keys():</db:para>
<db:programlisting language="cpp">QStringList SimpleStylePlugin::keys() const
{
    return {&quot;SimpleStyle&quot;};
}
</db:programlisting>
<db:para>Since this plugin only supports one style, we return a <db:link xlink:href="qstringlist.xml">QStringList</db:link> with the class name of that style.</db:para>
<db:para>Here is the create() function:</db:para>
<db:programlisting language="cpp">QStyle *SimpleStylePlugin::create(const QString &amp;amp;key)
{
    if (key.toLower() == &quot;simplestyle&quot;)
        return new SimpleStyle;
    return nullptr;
}
</db:programlisting>
<db:para>Note that the key for style plugins are case insensitive. The case sensitivity varies from plugin to plugin, so you need to check this when implementing new plugins.</db:para>
</db:section>
<db:section xml:id="the-main-function">
<db:title>The main() function</db:title>
<db:programlisting language="cpp">int main(int argv, char *args[])
{
    QApplication app(argv, args);

    QStyle *style = QStyleFactory::create(&quot;simplestyle&quot;);
    if (!style)
        qFatal(&quot;Cannot load the 'simplestyle' plugin.&quot;);

    QApplication::setStyle(style);

    StyleWindow window;
    window.resize(350, 50);
    window.show();

    return app.exec();
}
</db:programlisting>
<db:para>Qt loads the available style plugins when the <db:link xlink:href="qapplication.xml">QApplication</db:link> object is initialized. The <db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link> class knows about all styles and produces them with <db:link xlink:href="qstylefactory.xml#create">create</db:link>() (it is a wrapper around all the style plugins).</db:para>
</db:section>
<db:section xml:id="the-simple-style-plugin-s-qmake-project-file">
<db:title>The Simple Style Plugin's QMake Project File</db:title>
<db:para>The SimpleStylePlugin lives in its own directory and has its own .pro file:</db:para>
<db:programlisting language="cpp">TEMPLATE    = lib
CONFIG     += plugin
QT         += widgets
HEADERS     = simplestyle.h \
              simplestyleplugin.h
SOURCES     = simplestyle.cpp \
              simplestyleplugin.cpp
TARGET      = simplestyleplugin
</db:programlisting>
<db:para>In the plugin .pro file we need to set the lib template as we are building a shared library instead of an executable. We must also set the config to plugin. We set the library to be stored in the styles folder next to the main executable because this is a path in which Qt will search for style plugins.</db:para>
<db:section xml:id="using-cmake-to-set-up-the-simple-style-plugin">
<db:title>Using CMake to Set up the Simple Style Plugin</db:title>
<db:para>When using CMake, we use <db:link xlink:href="qt-add-plugin.xml">qt_add_plugin</db:link> to create the simplestyleplugin plugin:</db:para>
<db:programlisting language="cpp">qt_add_plugin(simplestyleplugin
    CLASS_NAME SimpleStylePlugin
    simplestyle.cpp simplestyle.h
    simplestyleplugin.cpp simplestyleplugin.h
)
</db:programlisting>
<db:para>On Windows and Linux, we place the plugin into the styles folder next to the main executable, i.e., styleplugin.exe:</db:para>
<db:programlisting language="cpp">    set_target_properties(simplestyleplugin PROPERTIES
        LIBRARY_OUTPUT_DIRECTORY &quot;$&amp;lt;TARGET_FILE_DIR:styleplugin&amp;gt;/styles&quot;
    )
</db:programlisting>
<db:para>And on macOS, we store the simplestyleplugin into the Contents/PlugIns/styles folder of the App Bundle.</db:para>
<db:programlisting language="cpp">    set_target_properties(simplestyleplugin PROPERTIES
        LIBRARY_OUTPUT_DIRECTORY &quot;$&amp;lt;TARGET_BUNDLE_CONTENT_DIR:styleplugin&amp;gt;/PlugIns/styles&quot;
    )
</db:programlisting>
<db:note>
<db:para>On macOS, when creating an App Bundle, store the plugins in the PlugIns folder and not next to the main executable in the MacOS folder as the latter will cause issues during signing and distribution of the app.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="related-articles-and-examples">
<db:title>Related Articles and Examples</db:title>
<db:para>In addition to the plugin <db:link xlink:href="plugins-howto.xml">overview document</db:link>, we have other examples and articles that concern plugins.</db:para>
<db:para>In the <db:link xlink:href="qtwidgets-tools-echoplugin-example.xml">echo plugin example</db:link> we show how to implement plugins that extends Qt applications rather than Qt itself, which is the case with the style plugin of this example.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/tools/styleplugin?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
