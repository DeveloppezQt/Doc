<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>EnginioClientConnection Class</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="enginioclientconnection.xml">EnginioClientConnection</db:link> keeps track of the authenticated connection to the server.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>EnginioClientConnection</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>EnginioClientConnection is part of <db:simplelist><db:member>enginio-client</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You should never use <db:link xlink:href="enginioclientconnection.xml">EnginioClientConnection</db:link> explicitly, instead use the derrived <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="authenticationState-prop">
<db:title>[read-only] authenticationState : const Enginio::AuthenticationState</db:title>
<db:para>This property holds the state of the authentication.</db:para>
<db:para>Enginio provides convenient user management. The authentication state reflects whether the current user is authenticated.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="enginio.xml#AuthenticationState-enum">Enginio::AuthenticationState</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="enginioclientconnection.xml#authenticationState">authenticationState</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">authenticationStateChanged</db:emphasis>(<db:type><db:link xlink:href="enginio.xml#AuthenticationState-enum">Enginio::AuthenticationState</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="enginio.xml#AuthenticationState-enum">Enginio::AuthenticationState</db:link></db:member>
<db:member><db:link xlink:href="enginioclientconnection.xml#identity-prop">identity</db:link></db:member>
<db:member><db:link xlink:href="enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backendId-prop">
<db:title>backendId : QByteArray</db:title>
<db:para>This property holds the unique ID for the used Enginio backend.</db:para>
<db:para>The backend ID determines which Enginio backend is used by this instance of <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>. The backend ID is required for Enginio to work. It is possible to use several Enginio backends simultaneously by having several instances of <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> <db:emphasis role="bold">backendId</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setBackendId</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>backendId</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">backendIdChanged</db:emphasis>(const <db:type><db:link xlink:href="qbytearray.xml">QByteArray</db:link></db:type> &amp;<db:emphasis>backendId</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="identity-prop">
<db:title>identity : EnginioIdentity*</db:title>
<db:para>Property that represents a user. Setting the property will create an asynchronous authentication request, the result of it updates <db:link xlink:href="enginioclientconnection.xml#authenticationState">authenticationState</db:link> <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> does not take ownership of the <db:code role="parameter">identity</db:code> object. The object has to be valid to keep the authenticated session alive. When the identity object is deleted the session is terminated. It is allowed to assign a null pointer to the property to terminate the session.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="enginioidentity.xml">EnginioIdentity</db:link></db:type> *<db:emphasis role="bold">identity</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setIdentity</db:emphasis>(<db:type><db:link xlink:href="enginioidentity.xml">EnginioIdentity</db:link></db:type> *<db:emphasis>identity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">identityChanged</db:emphasis>(<db:type><db:link xlink:href="enginioidentity.xml">EnginioIdentity</db:link></db:type> *<db:emphasis>identity</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="enginioidentity.xml">EnginioIdentity</db:link></db:member>
<db:member><db:link xlink:href="enginiooauth2authentication.xml">EnginioOAuth2Authentication</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceUrl-prop">
<db:title>serviceUrl : QUrl</db:title>
<db:para>Enginio backend URL.</db:para>
<db:para>The API URL determines the server used by Enginio.</db:para>
<db:para>Usually it is not needed to change the default URL, but if it has to be changed it should be done as a first operaion on this <db:link xlink:href="enginioclientconnection.xml">EnginioClientConnection</db:link>, otherwise some request may be sent accidentally to the default url.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">serviceUrl</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setServiceUrl</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>serviceUrl</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">serviceUrlChanged</db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.EnginioClientConnection">
<db:title>[virtual noexcept] EnginioClientConnection::~EnginioClientConnection()</db:title>
<db:para>Destroys this instance.</db:para>
</db:section>
<db:section xml:id="authenticationState">
<db:title>Enginio::AuthenticationState EnginioClientConnection::authenticationState() const</db:title>
<db:para>Get a temporary URL for a file stored in Enginio</db:para>
<db:para>From this URL a file can be downloaded. The URL is valid for a certain amount of time as indicated in the reply.</db:para>
<db:programlisting language="cpp">QJsonObject object;
object[&quot;id&quot;] = fileId; // ID of an existing object with attached file

const EnginioReply *replyDownload = _client.downloadUrl(object);
</db:programlisting>
<db:para>The propertyName can be anything, but it must be the same as the one used to upload the file with. This way one object can have several files attached to itself (one per propertyName).</db:para>
<db:para>If a file provides several variants, it is possible to request a variant by including it in the <db:code role="parameter">object</db:code>.</db:para>
<db:programlisting language="cpp">{
    &quot;id&quot;: &quot;abc123&quot;,
    &quot;variant&quot;: &quot;thumbnail&quot;
}
</db:programlisting>
<db:note>
<db:para>Getter function for property <db:link xlink:href="enginioclientconnection.xml#authenticationState-prop">authenticationState</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="networkManager">
<db:title>QNetworkAccessManager *EnginioClientConnection::networkManager() const</db:title>
<db:para>Get the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> used by the Enginio library.</db:para>
<db:note>
<db:para>that this <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> may be shared with other <db:link xlink:href="qml-enginio-enginioclient.xml">EnginioClient</db:link> instances and it is owned by them.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
