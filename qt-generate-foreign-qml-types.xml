<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qt_generate_foreign_qml_types</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Registers types from one target in a QML module.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="qt6-generate-foreign-qml-types"/>
<db:para>Registers types from one target in a QML module.</db:para>
<db:para>The command is defined in the <db:code>Qml</db:code> component of the <db:code>Qt6</db:code> package, which can be loaded like so:</db:para>
<db:programlisting language="cpp" role="bad">find_package(Qt6 REQUIRED COMPONENTS Qml)
</db:programlisting>
<db:note>
<db:para>This command is in technology preview and may change in future releases.</db:para>
</db:note>
<db:section xml:id="synopsis">
<db:title>Synopsis</db:title>
<db:programlisting language="cpp" role="bad">qt_generate_foreign_qml_types(
    source_target
    destination_qml_target
)
</db:programlisting>
<db:para>If <db:link xlink:href="cmake-qt5-and-qt6-compatibility.xml#versionless-commands">versionless commands</db:link> are disabled, use <db:code>qt6_generate_foreign_qml_types()</db:code> instead. It supports the same set of arguments as this command.</db:para>
</db:section>
<db:section xml:id="description">
<db:title>Description</db:title>
<db:para><db:code>qt_generate_foreign_qml_types</db:code> extracts types marked via QML registration macros (like <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link>) from <db:code>source_target</db:code> and registers them as foreign types in the QML module <db:code>destination_qml_target</db:code>.</db:para>
<db:para>This can be useful when one wants to create a library with optional QML integration, without depending directly on QML.</db:para>
<db:programlisting language="cpp" role="bad">// myclass.h
#include &amp;lt;QtQmlIntegration/qqmlintegration.h&amp;gt;

class MyClass : public QObject
{
    QML_ELEMENT
    Q_OBJECT

    // [...]
};
</db:programlisting>
<db:programlisting language="cpp" role="bad"># CMakeLists.txt
qt_add_library(mylib myclass.h ...)
target_link_libraries(mylib PRIVATE Qt::Core Qt::QmlIntegration)

qt_add_qml_module(mylib_declarative
  VERSION 1.0
  URI &quot;mylib&quot;
  ...
)
qt_generate_foreign_qml_types(mylib mylib_declarative)
</db:programlisting>
<db:note>
<db:para>In the example above, <db:code>mylib</db:code> does not depend on <db:link xlink:href="qtqml-qmlmodule.xml">QtQml</db:link> or <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>, but only on the header-only QmlIntegration target (for the QtQmlIntegration/qqmlintegration.h header, which provides the <db:code>QML_ELEMENT</db:code> macro).</db:para>
</db:note>
<db:para>The effect is equivalent to using <db:code>QML_FOREIGN</db:code> with custom structs in the QML library to expose the types.</db:para>
<db:note>
<db:para>In order to implement custom behavior, such as exposing an existing singleton instance with its own life cycle to QML, you should add custom types to your QML library (mylib_declarative in the above example). In turn, you should omit the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> and similar macros from the original C++ classes so that qt_generate_foreign_qml_types() does not generate more QML integration structs for them. The QML macros, as well as any singleton factory functions, can be added to the structs that contain the <db:link xlink:href="qqmlengine.xml#QML_FOREIGN">QML_FOREIGN</db:link>.</db:para>
</db:note>
</db:section>
</db:article>
