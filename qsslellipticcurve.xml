<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslEllipticCurve Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Represents an elliptic curve for use by elliptic-curve cipher algorithms.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslEllipticCurve</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslEllipticCurve is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The class <db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> represents an elliptic curve for use by elliptic-curve cipher algorithms.</db:para>
<db:para>Elliptic curves can be constructed from a &quot;short name&quot; (SN) (<db:link xlink:href="qsslellipticcurve.xml#fromShortName">fromShortName</db:link>()), and by a call to <db:link xlink:href="qsslconfiguration.xml#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</db:link>().</db:para>
<db:para><db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> instances can be compared for equality and can be used as keys in <db:link xlink:href="qhash.xml#qhash">QHash</db:link> and <db:link xlink:href="qset.xml">QSet</db:link>. They cannot be used as key in a <db:link xlink:href="qmap.xml">QMap</db:link>.</db:para>
<db:note>
<db:para>This class is currently only supported in OpenSSL.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslEllipticCurve">
<db:title>QSslEllipticCurve::QSslEllipticCurve()</db:title>
<db:constructorsynopsis>
<db:methodname>QSslEllipticCurve</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslEllipticCurve()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid elliptic curve.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslellipticcurve.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qsslconfiguration.xml#supportedEllipticCurves">QSslConfiguration::supportedEllipticCurves</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromLongName">
<db:title>[static] QSslEllipticCurve QSslEllipticCurve::fromLongName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSslEllipticCurve</db:type>
<db:methodname>fromLongName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslEllipticCurve fromLongName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> instance representing the named curve <db:code role="parameter">name</db:code>. The <db:code role="parameter">name</db:code> is a long name for the curve, whose exact spelling depends on the SSL implementation.</db:para>
<db:para>If the given <db:code role="parameter">name</db:code> is not supported, returns an invalid <db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> instance.</db:para>
<db:note>
<db:para>The OpenSSL implementation of this function treats the name case-sensitively.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslellipticcurve.xml#longName">longName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromShortName">
<db:title>[static] QSslEllipticCurve QSslEllipticCurve::fromShortName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QSslEllipticCurve</db:type>
<db:methodname>fromShortName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslEllipticCurve fromShortName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an <db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> instance representing the named curve <db:code role="parameter">name</db:code>. The <db:code role="parameter">name</db:code> is the conventional short name for the curve, as represented by RFC 4492 (for instance secp521r1), or as NIST short names (for instance P-256). The actual set of recognized names depends on the SSL implementation.</db:para>
<db:para>If the given <db:code role="parameter">name</db:code> is not supported, returns an invalid <db:link xlink:href="qsslellipticcurve.xml">QSslEllipticCurve</db:link> instance.</db:para>
<db:note>
<db:para>The OpenSSL implementation of this function treats the name case-sensitively.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslellipticcurve.xml#shortName">shortName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTlsNamedCurve">
<db:title>bool QSslEllipticCurve::isTlsNamedCurve() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isTlsNamedCurve</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isTlsNamedCurve() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this elliptic curve is one of the named curves that can be used in the key exchange when using an elliptic curve cipher with TLS; false otherwise.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSslEllipticCurve::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this elliptic curve is a valid curve, false otherwise.</db:para>
</db:section>
<db:section xml:id="longName">
<db:title>QString QSslEllipticCurve::longName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>longName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString longName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the conventional long name for this curve. If this curve is invalid, returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslellipticcurve.xml#shortName">shortName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shortName">
<db:title>QString QSslEllipticCurve::shortName() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>shortName</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString shortName() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the conventional short name for this curve. If this curve is invalid, returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslellipticcurve.xml#longName">longName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[since 5.5] bool operator!=(QSslEllipticCurve <db:emphasis>lhs</db:emphasis>, QSslEllipticCurve <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QSslEllipticCurve</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSslEllipticCurve</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QSslEllipticCurve lhs, QSslEllipticCurve rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the curve <db:code role="parameter">lhs</db:code> represents a different curve than <db:code role="parameter">rhs</db:code>; false otherwise.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>[since 5.5] QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, QSslEllipticCurve <db:emphasis>curve</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDebug</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDebug</db:type>
<db:parameter>debug</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSslEllipticCurve</db:type>
<db:parameter>curve</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDebug operator&lt;&lt;(QDebug debug, QSslEllipticCurve curve)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the elliptic curve <db:code role="parameter">curve</db:code> into the debug object <db:code role="parameter">debug</db:code> for debugging purposes.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="debug.xml">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>[since 5.5] bool operator==(QSslEllipticCurve <db:emphasis>lhs</db:emphasis>, QSslEllipticCurve <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QSslEllipticCurve</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSslEllipticCurve</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QSslEllipticCurve lhs, QSslEllipticCurve rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the curve <db:code role="parameter">lhs</db:code> represents the same curve of <db:code role="parameter">rhs</db:code>;</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
</db:section>
</db:article>
