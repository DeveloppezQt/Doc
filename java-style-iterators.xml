<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Java-style Iterators in Qt</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Java style iterators for Qt's containers.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="java-style-iterators">
<db:title>Java-Style Iterators</db:title>
<db:para>For each container class, there are two Java-style iterator data types: one that provides read-only access and one that provides read-write access.</db:para>
<db:note>
<db:para>New code should use <db:link xlink:href="containers.xml#stl-style-iterators">STL-Style iterators</db:link> since these are more efficient and can be used together with Qt's and STL's <db:link xlink:href="qtalgorithms.xml">generic algorithms</db:link>.</db:para>
</db:note>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Containers</db:para>
</db:th>
<db:th>
<db:para>Read-only iterator</db:para>
</db:th>
<db:th>
<db:para>Read-write iterator</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlist.xml">QList</db:link>&lt;T&gt;, <db:link xlink:href="qqueue.xml">QQueue</db:link>&lt;T&gt;, <db:link xlink:href="qstack.xml">QStack</db:link>&lt;T&gt;,</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml">QListIterator</db:link>&lt;T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>&lt;T&gt;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qsetiterator.xml">QSetIterator</db:link>&lt;T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link>&lt;T&gt;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link>&lt;Key, T&gt;, <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>&lt;Key, T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>&lt;Key, T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link>&lt;Key, T&gt;</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qhash.xml#qhash">QHash</db:link>&lt;Key, T&gt;, <db:link xlink:href="qmultihash.xml">QMultiHash</db:link>&lt;Key, T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qhashiterator.xml">QHashIterator</db:link>&lt;Key, T&gt;</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmutablehashiterator.xml">QMutableHashIterator</db:link>&lt;Key, T&gt;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In this discussion, we will concentrate on <db:link xlink:href="qlist.xml">QList</db:link> and <db:link xlink:href="qmap.xml">QMap</db:link>. The iterator types for <db:link xlink:href="qset.xml">QSet</db:link> have exactly the same interface as <db:link xlink:href="qlist.xml">QList</db:link>'s iterators; similarly, the iterator types for <db:link xlink:href="qhash.xml#qhash">QHash</db:link> have the same interface as <db:link xlink:href="qmap.xml">QMap</db:link>'s iterators.</db:para>
<db:para>Unlike <db:link xlink:href="containers.xml#stl-style-iterators">STL-Style iterators</db:link>, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. For this reason, they are either pointing to the very beginning of the container (before the first item), at the very end of the container (after the last item), or between two items. The diagram below shows the valid iterator positions as red arrows for a list containing four items:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's a typical loop for iterating through all the elements of a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt; in order:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QString&amp;gt; list = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;};

QListIterator&amp;lt;QString&amp;gt; i(list);
while (i.hasNext())
    QString s = i.next();
</db:programlisting>
<db:para>It works as follows: The <db:link xlink:href="qlist.xml">QList</db:link> to iterate over is passed to the <db:link xlink:href="qlistiterator.xml">QListIterator</db:link> constructor. At that point, the iterator is located just in front of the first item in the list (before item &quot;A&quot;). Then we call <db:link xlink:href="qlistiterator.xml#hasNext">hasNext</db:link>() to check whether there is an item after the iterator. If there is, we call <db:link xlink:href="qlistiterator.xml#next">next</db:link>() to jump over that item. The next() function returns the item that it jumps over. For a <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qstring.xml">QString</db:link>&gt;, that item is of type <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:para>Here's how to iterate backward in a <db:link xlink:href="qlist.xml">QList</db:link>:</db:para>
<db:programlisting language="cpp">QListIterator&amp;lt;QString&amp;gt; i(list);
i.toBack();
while (i.hasPrevious())
    QString s = i.previous();
</db:programlisting>
<db:para>The code is symmetric with iterating forward, except that we start by calling <db:link xlink:href="qlistiterator.xml#toBack">toBack</db:link>() to move the iterator after the last item in the list.</db:para>
<db:para>The diagram below illustrates the effect of calling <db:link xlink:href="qlistiterator.xml#next">next</db:link>() and <db:link xlink:href="qlistiterator.xml#previous">previous</db:link>() on an iterator:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators2.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The following table summarizes the <db:link xlink:href="qlistiterator.xml">QListIterator</db:link> API:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function</db:para>
</db:th>
<db:th>
<db:para>Behavior</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#toFront">toFront</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Moves the iterator to the front of the list (before the first item)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#toBack">toBack</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Moves the iterator to the back of the list (after the last item)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#hasNext">hasNext</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns true if the iterator isn't at the back of the list</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#next">next</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the next item and advances the iterator by one position</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#peekNext">peekNext</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the next item without moving the iterator</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#hasPrevious">hasPrevious</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns true if the iterator isn't at the front of the list</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#previous">previous</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the previous item and moves the iterator back by one position</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qlistiterator.xml#peekPrevious">peekPrevious</db:link>()</db:para>
</db:td>
<db:td>
<db:para>Returns the previous item without moving the iterator</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para><db:link xlink:href="qlistiterator.xml">QListIterator</db:link> provides no functions to insert or remove items from the list as we iterate. To accomplish this, you must use <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>. Here's an example where we remove all odd numbers from a <db:link xlink:href="qlist.xml">QList</db:link>&lt;int&gt; using <db:link xlink:href="qmutablelistiterator.xml">QMutableListIterator</db:link>:</db:para>
<db:programlisting language="cpp">QMutableListIterator&amp;lt;int&amp;gt; i(list);
while (i.hasNext()) {
    if (i.next() % 2 != 0)
        i.remove();
}
</db:programlisting>
<db:para>The next() call in the loop is made every time. It jumps over the next item in the list. The <db:link xlink:href="qmutablelistiterator.xml#remove">remove</db:link>() function removes the last item that we jumped over from the list. The call to <db:link xlink:href="qmutablelistiterator.xml#remove">remove</db:link>() does not invalidate the iterator, so it is safe to continue using it. This works just as well when iterating backward:</db:para>
<db:programlisting language="cpp">QMutableListIterator&amp;lt;int&amp;gt; i(list);
i.toBack();
while (i.hasPrevious()) {
    if (i.previous() % 2 != 0)
        i.remove();
}
</db:programlisting>
<db:para>If we just want to modify the value of an existing item, we can use <db:link xlink:href="qmutablelistiterator.xml#setValue">setValue</db:link>(). In the code below, we replace any value larger than 128 with 128:</db:para>
<db:programlisting language="cpp">QMutableListIterator&amp;lt;int&amp;gt; i(list);
while (i.hasNext()) {
    if (i.next() &amp;gt; 128)
        i.setValue(128);
}
</db:programlisting>
<db:para>Just like <db:link xlink:href="qmutablelistiterator.xml#remove">remove</db:link>(), <db:link xlink:href="qmutablelistiterator.xml#setValue">setValue</db:link>() operates on the last item that we jumped over. If we iterate forward, this is the item just before the iterator; if we iterate backward, this is the item just after the iterator.</db:para>
<db:para>The <db:link xlink:href="qmutablelistiterator.xml#next">next</db:link>() function returns a non-const reference to the item in the list. For simple operations, we don't even need <db:link xlink:href="qmutablelistiterator.xml#setValue">setValue</db:link>():</db:para>
<db:programlisting language="cpp">QMutableListIterator&amp;lt;int&amp;gt; i(list);
while (i.hasNext())
    i.next() *= 2;
</db:programlisting>
<db:para>As mentioned above <db:link xlink:href="qset.xml">QSet</db:link>'s iterator classes have exactly the same API as <db:link xlink:href="qlist.xml">QList</db:link>'s. We will now turn to <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link>, which is somewhat different because it iterates on (key, value) pairs.</db:para>
<db:para>Like <db:link xlink:href="qlistiterator.xml">QListIterator</db:link>, <db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> provides <db:link xlink:href="qmapiterator.xml#toFront">toFront</db:link>(), <db:link xlink:href="qmapiterator.xml#toBack">toBack</db:link>(), <db:link xlink:href="qmapiterator.xml#hasNext">hasNext</db:link>(), <db:link xlink:href="qmapiterator.xml#next">next</db:link>(), <db:link xlink:href="qmapiterator.xml#peekNext">peekNext</db:link>(), <db:link xlink:href="qmapiterator.xml#hasPrevious">hasPrevious</db:link>(), <db:link xlink:href="qmapiterator.xml#previous">previous</db:link>(), and <db:link xlink:href="qmapiterator.xml#peekPrevious">peekPrevious</db:link>(). The key and value components are extracted by calling <db:link xlink:href="qmapiterator.xml#key">key</db:link>() and <db:link xlink:href="qmapiterator.xml#value">value</db:link>() on the object returned by next(), peekNext(), previous(), or peekPrevious().</db:para>
<db:para>The following example removes all (capital, country) pairs where the capital's name ends with &quot;City&quot;:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;QString, QString&amp;gt; map = {
    {&quot;Paris&quot;, &quot;France&quot;},
    {&quot;Guatemala City&quot;, &quot;Guatemala&quot;},
    {&quot;Mexico City&quot;, &quot;Mexico&quot;},
    {&quot;Moscow&quot;, &quot;Russia&quot;}
};
...

QMutableMapIterator&amp;lt;QString, QString&amp;gt; i(map);
while (i.hasNext()) {
    if (i.next().key().endsWith(&quot;City&quot;))
        i.remove();
}
</db:programlisting>
<db:para><db:link xlink:href="qmapiterator.xml">QMapIterator</db:link> also provides a <db:link xlink:href="qmapiterator.xml#key">key</db:link>() and a <db:link xlink:href="qmapiterator.xml#value">value</db:link>() function that operate directly on the iterator and that return the key and value of the last item that the iterator jumped above. For example, the following code copies the contents of a <db:link xlink:href="qmap.xml">QMap</db:link> into a <db:link xlink:href="qhash.xml#qhash">QHash</db:link>:</db:para>
<db:programlisting language="cpp">QMap&amp;lt;int, QWidget *&amp;gt; map;
QHash&amp;lt;int, QWidget *&amp;gt; hash;

QMapIterator&amp;lt;int, QWidget *&amp;gt; i(map);
while (i.hasNext()) {
    i.next();
    hash.insert(i.key(), i.value());
}
</db:programlisting>
<db:para>If we want to iterate through all the items with the same value, we can use <db:link xlink:href="qmapiterator.xml#findNext">findNext</db:link>() or <db:link xlink:href="qmapiterator.xml#findPrevious">findPrevious</db:link>(). Here's an example where we remove all the items with a particular value:</db:para>
<db:programlisting language="cpp">QMutableMapIterator&amp;lt;int, QWidget *&amp;gt; i(map);
while (i.findNext(widget))
    i.remove();
</db:programlisting>
</db:section>
</db:article>
