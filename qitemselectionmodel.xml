<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QItemSelectionModel Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> class keeps track of a view's selected items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QItemSelectionModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-models-itemselectionmodel.xml" xlink:role="">ItemSelectionModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QItemSelectionModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> keeps track of the selected items in a view, or in several views onto the same model. It also keeps track of the currently selected item in a view.</db:para>
<db:para>The <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> class is one of the <db:link xlink:href="model-view-programming.xml#the-model-view-classes">Model/View Classes</db:link> and is part of Qt's <db:link xlink:href="model-view-programming.xml">model/view framework</db:link>.</db:para>
<db:para>The selected items are stored using ranges. Whenever you want to modify the selected items use <db:link xlink:href="qitemselectionmodel.xml#select">select</db:link>() and provide either a <db:link xlink:href="qitemselection.xml">QItemSelection</db:link>, or a <db:link xlink:href="qmodelindex.xml">QModelIndex</db:link> and a <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::SelectionFlag</db:link>.</db:para>
<db:para>The <db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link> takes a two layer approach to selection management, dealing with both selected items that have been committed and items that are part of the current selection. The current selected items are part of the current interactive selection (for example with rubber-band selection or keyboard-shift selections).</db:para>
<db:para>To update the currently selected items, use the bitwise OR of <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::Current</db:link> and any of the other <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">SelectionFlags</db:link>. If you omit the <db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::Current</db:link> command, a new current selection will be created, and the previous one added to the whole selection. All functions operate on both layers; for example, <db:link xlink:href="qtablewidget.xml#selectedItems">selecteditems</db:link>() will return items from both layers.</db:para>
<db:note>
<db:para>Since 5.5, <db:link xlink:href="qitemselectionmodel.xml#model">model</db:link>, <db:link xlink:href="qitemselectionmodel.xml#hasSelection">hasSelection</db:link>, and <db:link xlink:href="qitemselectionmodel.xml#currentIndex">currentIndex</db:link> are meta-object properties.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="model-view-programming.xml">Model/View Programming</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-chart-example.xml">Chart Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SelectionFlag-enum">
<db:title>enum QItemSelectionModel::SelectionFlag</db:title>
<db:bridgehead renderas="sect2">flags QItemSelectionModel::SelectionFlags</db:bridgehead>
<db:para>This enum describes the way the selection model will be updated.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::NoUpdate</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No selection will be made.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Clear</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The complete selection will be cleared.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Select</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>All specified indexes will be selected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Deselect</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>All specified indexes will be deselected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Toggle</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>All specified indexes will be selected or deselected depending on their current state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Current</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>The current selection will be updated.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Rows</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>All indexes will be expanded to span rows.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::Columns</db:code></db:para>
</db:td>
<db:td><db:code>0x0040</db:code></db:td>
<db:td>
<db:para>All indexes will be expanded to span columns.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::SelectCurrent</db:code></db:para>
</db:td>
<db:td><db:code>Select | Current</db:code></db:td>
<db:td>
<db:para>A combination of Select and Current, provided for convenience.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::ToggleCurrent</db:code></db:para>
</db:td>
<db:td><db:code>Toggle | Current</db:code></db:td>
<db:td>
<db:para>A combination of Toggle and Current, provided for convenience.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml">QItemSelectionModel</db:link></db:emphasis>::ClearAndSelect</db:code></db:para>
</db:td>
<db:td><db:code>Clear | Select</db:code></db:td>
<db:td>
<db:para>A combination of Clear and Select, provided for convenience.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SelectionFlags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SelectionFlag&gt;. </db:code>It stores an OR combination of <db:code>SelectionFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="selectedIndexes-prop">
<db:title>[read-only, since 5.5] selectedIndexes : const QModelIndexList</db:title>
<db:para>This property was introduced in Qt 5.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmodelindex.xml#QModelIndexList-typedef">QModelIndexList</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml#selectedIndexes">selectedIndexes</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qitemselection.xml">QItemSelection</db:link></db:type> &amp;<db:emphasis>selected</db:emphasis>, const <db:type><db:link xlink:href="qitemselection.xml">QItemSelection</db:link></db:type> &amp;<db:emphasis>deselected</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QItemSelectionModel">
<db:title>[explicit] QItemSelectionModel::QItemSelectionModel(QAbstractItemModel *<db:emphasis>model</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a selection model that operates on the specified item <db:code role="parameter">model</db:code>.</db:para>
</db:section>
<db:section xml:id="QItemSelectionModel-1">
<db:title>[explicit] QItemSelectionModel::QItemSelectionModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a selection model that operates on the specified item <db:code role="parameter">model</db:code> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QItemSelectionModel">
<db:title>[virtual noexcept] QItemSelectionModel::~QItemSelectionModel()</db:title>
<db:para>Destroys the selection model.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>[virtual] void QItemSelectionModel::clear()</db:title>
<db:para>Clears the selection model. Emits <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>() and <db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>().</db:para>
</db:section>
<db:section xml:id="clearCurrentIndex">
<db:title>[virtual] void QItemSelectionModel::clearCurrentIndex()</db:title>
<db:para>Clears the current index. Emits <db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>().</db:para>
</db:section>
<db:section xml:id="clearSelection">
<db:title>[since 4.2] void QItemSelectionModel::clearSelection()</db:title>
<db:para>Clears the selection in the selection model. Emits <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>().</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="columnIntersectsSelection">
<db:title>bool QItemSelectionModel::columnIntersectsSelection(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if there are any items selected in the <db:code role="parameter">column</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="currentChanged">
<db:title>void QItemSelectionModel::currentChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the current item changes. The <db:code role="parameter">previous</db:code> model item index is replaced by the <db:code role="parameter">current</db:code> index as the selection's current item.</db:para>
<db:para>Note that this signal will not be emitted when the item model is reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentIndex">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentColumnChanged">
<db:title>void QItemSelectionModel::currentColumnChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted if the <db:code role="parameter">current</db:code> item changes and its column is different to the column of the <db:code role="parameter">previous</db:code> current item.</db:para>
<db:para>Note that this signal will not be emitted when the item model is reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentRowChanged">currentRowChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentIndex">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndex">
<db:title>QModelIndex QItemSelectionModel::currentIndex() const</db:title>
<db:para>Returns the model item index for the current item, or an invalid index if there is no current item.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentRowChanged">
<db:title>void QItemSelectionModel::currentRowChanged(const QModelIndex &amp;<db:emphasis>current</db:emphasis>, const QModelIndex &amp;<db:emphasis>previous</db:emphasis>)</db:title>
<db:para>This signal is emitted if the <db:code role="parameter">current</db:code> item changes and its row is different to the row of the <db:code role="parameter">previous</db:code> current item.</db:para>
<db:para>Note that this signal will not be emitted when the item model is reset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentColumnChanged">currentColumnChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentIndex">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#setCurrentIndex">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="emitSelectionChanged">
<db:title>[protected] void QItemSelectionModel::emitSelectionChanged(const QItemSelection &amp;<db:emphasis>newSelection</db:emphasis>, const QItemSelection &amp;<db:emphasis>oldSelection</db:emphasis>)</db:title>
<db:para>Compares the two selections <db:code role="parameter">newSelection</db:code> and <db:code role="parameter">oldSelection</db:code> and emits <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>() with the deselected and selected items.</db:para>
</db:section>
<db:section xml:id="hasSelection">
<db:title>[since 4.2] bool QItemSelectionModel::hasSelection() const</db:title>
<db:para>Returns true if the selection model contains any selection ranges; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
</db:section>
<db:section xml:id="isColumnSelected">
<db:title>bool QItemSelectionModel::isColumnSelected(int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if all items are selected in the <db:code role="parameter">column</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this function is usually faster than calling <db:link xlink:href="qitemselectionmodel.xml#isSelected">isSelected</db:link>() on all items in the same column and that unselectable items are ignored.</db:para>
</db:section>
<db:section xml:id="isRowSelected">
<db:title>bool QItemSelectionModel::isRowSelected(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if all items are selected in the <db:code role="parameter">row</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note that this function is usually faster than calling <db:link xlink:href="qitemselectionmodel.xml#isSelected">isSelected</db:link>() on all items in the same row and that unselectable items are ignored.</db:para>
</db:section>
<db:section xml:id="isSelected">
<db:title>bool QItemSelectionModel::isSelected(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the given model item <db:code role="parameter">index</db:code> is selected.</db:para>
</db:section>
<db:section xml:id="model">
<db:title>[since 5.5] QAbstractItemModel *QItemSelectionModel::model()</db:title>
<db:para>Returns the item model operated on by the selection model.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#setModel">setModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model-1">
<db:title>const QAbstractItemModel *QItemSelectionModel::model() const</db:title>
<db:para>Returns the item model operated on by the selection model.</db:para>
</db:section>
<db:section xml:id="modelChanged">
<db:title>[since 5.5] void QItemSelectionModel::modelChanged(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">model</db:code> is successfully set with <db:link xlink:href="qitemselectionmodel.xml#setModel">setModel</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#setModel">setModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reset">
<db:title>[virtual] void QItemSelectionModel::reset()</db:title>
<db:para>Clears the selection model. Does not emit any signals.</db:para>
</db:section>
<db:section xml:id="rowIntersectsSelection">
<db:title>bool QItemSelectionModel::rowIntersectsSelection(int <db:emphasis>row</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>) const</db:title>
<db:para>Returns true if there are any items selected in the <db:code role="parameter">row</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="select">
<db:title>[virtual] void QItemSelectionModel::select(const QItemSelection &amp;<db:emphasis>selection</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Selects the item <db:code role="parameter">selection</db:code> using the specified <db:code role="parameter">command</db:code>, and emits <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::SelectionFlag</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="select-1">
<db:title>[virtual] void QItemSelectionModel::select(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Selects the model item <db:code role="parameter">index</db:code> using the specified <db:code role="parameter">command</db:code>, and emits <db:link xlink:href="qitemselectionmodel.xml#selectionChanged">selectionChanged</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#SelectionFlag-enum">QItemSelectionModel::SelectionFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedColumns">
<db:title>[since 4.2] QModelIndexList QItemSelectionModel::selectedColumns(int <db:emphasis>row</db:emphasis> = 0) const</db:title>
<db:para>Returns the indexes in the given <db:code role="parameter">row</db:code> for columns where all rows are selected.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectedRows">selectedRows</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selectedIndexes">
<db:title>QModelIndexList QItemSelectionModel::selectedIndexes() const</db:title>
<db:para>Returns a list of all selected model item indexes. The list contains no duplicates, and is not sorted.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qitemselectionmodel.xml#selectedIndexes-prop">selectedIndexes</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="selectedRows">
<db:title>[since 4.2] QModelIndexList QItemSelectionModel::selectedRows(int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:para>Returns the indexes in the given <db:code role="parameter">column</db:code> for the rows where all columns are selected.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectedIndexes">selectedIndexes</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#selectedColumns">selectedColumns</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="selection">
<db:title>const QItemSelection QItemSelectionModel::selection() const</db:title>
<db:para>Returns the selection ranges stored in the selection model.</db:para>
</db:section>
<db:section xml:id="selectionChanged">
<db:title>void QItemSelectionModel::selectionChanged(const QItemSelection &amp;<db:emphasis>selected</db:emphasis>, const QItemSelection &amp;<db:emphasis>deselected</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the selection changes. The change in the selection is represented as an item selection of <db:code role="parameter">deselected</db:code> items and an item selection of <db:code role="parameter">selected</db:code> items.</db:para>
<db:para>Note the that the current index changes independently from the selection. Also note that this signal will not be emitted when the item model is reset.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qitemselectionmodel.xml#selectedIndexes-prop">selectedIndexes</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#select">select</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentIndex">
<db:title>[virtual] void QItemSelectionModel::setCurrentIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, QItemSelectionModel::SelectionFlags <db:emphasis>command</db:emphasis>)</db:title>
<db:para>Sets the model item <db:code role="parameter">index</db:code> to be the current item, and emits <db:link xlink:href="qitemselectionmodel.xml#currentChanged">currentChanged</db:link>(). The current item is used for keyboard navigation and focus indication; it is independent of any selected items, although a selected item can also be the current item.</db:para>
<db:para>Depending on the specified <db:code role="parameter">command</db:code>, the <db:code role="parameter">index</db:code> can also become part of the current selection.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#currentIndex">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#select">select</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>[since 5.5] void QItemSelectionModel::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Sets the model to <db:code role="parameter">model</db:code>. The <db:link xlink:href="qitemselectionmodel.xml#modelChanged">modelChanged</db:link>() signal will be emitted.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemselectionmodel.xml#model">model</db:link>()</db:member>
<db:member><db:link xlink:href="qitemselectionmodel.xml#modelChanged">modelChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
