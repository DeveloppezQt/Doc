<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMutableSetIterator Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QMutableSetIterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link> class provides a Java-style non-const iterator for <db:link xlink:href="qset.xml">QSet</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMutableSetIterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qset.xml">QSet</db:link> has both <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link> and <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link>. The Java-style iterators are more high-level and easier to use than the STL-style iterators; on the other hand, they are slightly less efficient.</db:para>
<db:para><db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link>&lt;T&gt; allows you to iterate over a <db:link xlink:href="qset.xml">QSet</db:link>&lt;T&gt; and remove items from the set as you iterate. If you don't want to modify the set (or have a const <db:link xlink:href="qset.xml">QSet</db:link>), use the slightly faster <db:link xlink:href="qsetiterator.xml">QSetIterator</db:link>&lt;T&gt; instead.</db:para>
<db:para>The <db:link xlink:href="qmutablesetiterator.xml">QMutableSetIterator</db:link> constructor takes a <db:link xlink:href="qset.xml">QSet</db:link> as argument. After construction, the iterator is located at the very beginning of the set (before the first item). Here's how to iterate over all the elements sequentially:</db:para>
<db:programlisting language="cpp">QSet&amp;lt;float&amp;gt; set;
...
QMutableSetIterator&amp;lt;float&amp;gt; i(set);
while (i.hasNext())
    qDebug() &amp;lt;&amp;lt; i.next();
</db:programlisting>
<db:para>The <db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>() function returns the next item in the set and advances the iterator. Unlike STL-style iterators, Java-style iterators point <db:emphasis>between</db:emphasis> items rather than directly <db:emphasis>at</db:emphasis> items. The first call to <db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>() advances the iterator to the position between the first and second item, and returns the first item; the second call to <db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>() advances the iterator to the position between the second and third item, returning the second item; and so on.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/javaiterators1.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here's how to iterate over the elements in reverse order:</db:para>
<db:programlisting language="cpp">QMutableSetIterator&amp;lt;float&amp;gt; i(set);
i.toBack();
while (i.hasPrevious())
    qDebug() &amp;lt;&amp;lt; i.previous();
</db:programlisting>
<db:para>If you want to remove items as you iterate over the set, use <db:link xlink:href="qmutablesetiterator.xml#remove">remove</db:link>().</db:para>
<db:para>Only one mutable iterator can be active on a given set at any time. Furthermore, no changes should be done directly to the set while the iterator is active (as opposed to through the iterator), since this could invalidate the iterator and lead to undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsetiterator.xml">QSetIterator</db:link></db:member>
<db:member><db:link xlink:href="qset-iterator.xml">QSet::iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMutableSetIterator">
<db:title>QMutableSetIterator::QMutableSetIterator(QSet&lt;T&gt; &amp;<db:emphasis>set</db:emphasis>)</db:title>
<db:para>Constructs an iterator for traversing <db:code role="parameter">set</db:code>. The iterator is set to be at the front of the set (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#operator-eq">operator=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QMutableSetIterator&lt;T&gt; &amp;QMutableSetIterator::operator=(QSet&lt;T&gt; &amp;<db:emphasis>container</db:emphasis>)</db:title>
<db:para>Makes the iterator operate on <db:code role="parameter">set</db:code>. The iterator is set to be at the front of the set (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#toBack">toBack</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFront">
<db:title>void QMutableSetIterator::toFront()</db:title>
<db:para>Moves the iterator to the front of the container (before the first item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#toBack">toBack</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBack">
<db:title>void QMutableSetIterator::toBack()</db:title>
<db:para>Moves the iterator to the back of the container (after the last item).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#toFront">toFront</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasNext">
<db:title>bool QMutableSetIterator::hasNext() const</db:title>
<db:para>Returns true if there is at least one item ahead of the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the back of the container; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="next">
<db:title>const T &amp;QMutableSetIterator::next()</db:title>
<db:para>Returns the next item and advances the iterator by one position.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#peekNext">peekNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekNext">
<db:title>const T &amp;QMutableSetIterator::peekNext() const</db:title>
<db:para>Returns the next item without moving the iterator.</db:para>
<db:para>Calling this function on an iterator located at the back of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasPrevious">
<db:title>bool QMutableSetIterator::hasPrevious() const</db:title>
<db:para>Returns true if there is at least one item behind the iterator, i.e. the iterator is <db:emphasis>not</db:emphasis> at the front of the container; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasNext">hasNext</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previous">
<db:title>const T &amp;QMutableSetIterator::previous()</db:title>
<db:para>Returns the previous item and moves the iterator back by one position.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#peekPrevious">peekPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="peekPrevious">
<db:title>const T &amp;QMutableSetIterator::peekPrevious() const</db:title>
<db:para>Returns the previous item without moving the iterator.</db:para>
<db:para>Calling this function on an iterator located at the front of the container leads to undefined results.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#hasPrevious">hasPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>()</db:member>
<db:member><db:link xlink:href="qmutablesetiterator.xml#peekNext">peekNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findNext">
<db:title>bool QMutableSetIterator::findNext(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position forward. Returns true if <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just after the matching item; otherwise, the iterator is positioned at the back of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#findPrevious">findPrevious</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findPrevious">
<db:title>bool QMutableSetIterator::findPrevious(const T &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Searches for <db:code role="parameter">value</db:code> starting from the current iterator position backward. Returns true if <db:code role="parameter">value</db:code> is found; otherwise returns false.</db:para>
<db:para>After the call, if <db:code role="parameter">value</db:code> was found, the iterator is positioned just before the matching item; otherwise, the iterator is positioned at the front of the container.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#findNext">findNext</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>const T &amp;QMutableSetIterator::value() const</db:title>
<db:para>Returns the value of the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>After a call to <db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>() or <db:link xlink:href="qmutablesetiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#value">value</db:link>() is equivalent to <db:link xlink:href="qmutablesetiterator.xml#peekPrevious">peekPrevious</db:link>(). After a call to <db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>() or <db:link xlink:href="qmutablesetiterator.xml#findPrevious">findPrevious</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#value">value</db:link>() is equivalent to <db:link xlink:href="qmutablesetiterator.xml#peekNext">peekNext</db:link>().</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>void QMutableSetIterator::remove()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>remove</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void remove()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the last item that was jumped over using one of the traversal functions (<db:link xlink:href="qmutablesetiterator.xml#next">next</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#previous">previous</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#findNext">findNext</db:link>(), <db:link xlink:href="qmutablesetiterator.xml#findPrevious">findPrevious</db:link>()).</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QMutableSetIterator&amp;lt;int&amp;gt; i(set);
while (i.hasNext()) {
    int val = i.next();
    if (val &amp;lt; -32768 || val &amp;gt; 32767)
        i.remove();
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutablesetiterator.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
