<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QDirModel Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdirmodel.xml">QDirModel</db:link> class provides a data model for the local filesystem.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDirModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml" xlink:role="class">QAbstractItemModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDirModel is part of <db:simplelist><db:member>model-view</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The usage of <db:link xlink:href="qdirmodel.xml">QDirModel</db:link> is not recommended anymore. The <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link> class is a more performant alternative.</db:para>
<db:para>This class provides access to the local filesystem, providing functions for renaming and removing files and directories, and for creating new directories. In the simplest case, it can be used with a suitable display widget as part of a browser or filer.</db:para>
<db:para><db:link xlink:href="qdirmodel.xml">QDirModel</db:link> keeps a cache with file information. The cache needs to be updated with <db:link xlink:href="qdirmodel.xml#refresh">refresh</db:link>().</db:para>
<db:para><db:link xlink:href="qdirmodel.xml">QDirModel</db:link> can be accessed using the standard interface provided by <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>, but it also provides some convenience functions that are specific to a directory model. The <db:link xlink:href="qdirmodel.xml#fileInfo">fileInfo</db:link>() and <db:link xlink:href="qdirmodel.xml#isDir">isDir</db:link>() functions provide information about the underlying files and directories related to items in the model.</db:para>
<db:para>Directories can be created and removed using <db:link xlink:href="qdirmodel.xml#mkdir">mkdir</db:link>(), <db:link xlink:href="qdirmodel.xml#rmdir">rmdir</db:link>(), and the model will be automatically updated to take the changes into account.</db:para>
<db:note>
<db:para><db:link xlink:href="qdirmodel.xml">QDirModel</db:link> requires an instance of a GUI application.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#nameFilters">nameFilters</db:link>()</db:member>
<db:member><db:link xlink:href="qdirmodel.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdirmodel.xml#filter">filter</db:link>()</db:member>
<db:member><db:link xlink:href="qlistview.xml">QListView</db:link></db:member>
<db:member><db:link xlink:href="qtreeview.xml">QTreeView</db:link></db:member>
<db:member><db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-dirview-example.xml">Dir View Example</db:link></db:member>
<db:member><db:link xlink:href="model-view-programming.xml#model-classes">Model Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Roles-enum">
<db:title>enum QDirModel::Roles</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdirmodel.xml">QDirModel</db:link></db:emphasis>::FileIconRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::DecorationRole</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdirmodel.xml">QDirModel</db:link></db:emphasis>::FilePathRole</db:code></db:para>
</db:td>
<db:td><db:code>Qt::UserRole + 1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdirmodel.xml">QDirModel</db:link></db:emphasis>::FileNameRole</db:code></db:para>
</db:td>
<db:td><db:code>258</db:code></db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDirModel">
<db:title>[explicit] QDirModel::QDirModel(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a directory model with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QDirModel-1">
<db:title>QDirModel::QDirModel(const QStringList &amp;<db:emphasis>nameFilters</db:emphasis>, QDir::Filters <db:emphasis>filters</db:emphasis>, QDir::SortFlags <db:emphasis>sort</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new directory model with the given <db:code role="parameter">parent</db:code>. Only those files matching the <db:code role="parameter">nameFilters</db:code> and the <db:code role="parameter">filters</db:code> are included in the model. The sort order is given by the <db:code role="parameter">sort</db:code> flags.</db:para>
</db:section>
<db:section xml:id="dtor.QDirModel">
<db:title>[virtual noexcept] QDirModel::~QDirModel()</db:title>
<db:para>Destroys this directory model.</db:para>
</db:section>
<db:section xml:id="columnCount">
<db:title>[override virtual] int QDirModel::columnCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#columnCount" role="function">QAbstractItemModel::columnCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns the number of columns in the <db:code role="parameter">parent</db:code> model item.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>[override virtual] QVariant QDirModel::data(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#data" role="function">QAbstractItemModel::data(const QModelIndex &amp;index, int role) const</db:link>.</db:para>
<db:para>Returns the data for the model item <db:code role="parameter">index</db:code> with the given <db:code role="parameter">role</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#setData">setData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dropMimeData">
<db:title>[override virtual] bool QDirModel::dropMimeData(const QMimeData *<db:emphasis>data</db:emphasis>, Qt::DropAction <db:emphasis>action</db:emphasis>, int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#dropMimeData" role="function">QAbstractItemModel::dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &amp;parent)</db:link>.</db:para>
<db:para>Handles the <db:code role="parameter">data</db:code> supplied by a drag and drop operation that ended with the given <db:code role="parameter">action</db:code> over the row in the model specified by the <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code> and by the <db:code role="parameter">parent</db:code> index.</db:para>
<db:para>Returns true if the drop was successful, and false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#supportedDropActions">supportedDropActions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileIcon">
<db:title>QIcon QDirModel::fileIcon(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the icons for the item stored in the model under the given <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="fileInfo">
<db:title>QFileInfo QDirModel::fileInfo(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the file information for the specified model <db:code role="parameter">index</db:code>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> If the model index represents a symbolic link in the underlying filing system, the file information returned will contain information about the symbolic link itself, regardless of whether resolveSymlinks is enabled or not.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfileinfo.xml#symLinkTarget">QFileInfo::symLinkTarget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QDirModel::fileName(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the name of the item stored in the model under the <db:code role="parameter">index</db:code> given.</db:para>
</db:section>
<db:section xml:id="filePath">
<db:title>QString QDirModel::filePath(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the path of the item stored in the model under the <db:code role="parameter">index</db:code> given.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>QDir::Filters QDirModel::filter() const</db:title>
<db:para>Returns the filter specification for the directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#setFilter">setFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#Filter-enum">QDir::Filters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="flags">
<db:title>[override virtual] Qt::ItemFlags QDirModel::flags(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#flags" role="function">QAbstractItemModel::flags(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Returns the item flags for the given <db:code role="parameter">index</db:code> in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#ItemFlag-enum">Qt::ItemFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasChildren">
<db:title>[override virtual] bool QDirModel::hasChildren(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#hasChildren" role="function">QAbstractItemModel::hasChildren(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns true if the <db:code role="parameter">parent</db:code> model item has children; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="headerData">
<db:title>[override virtual] QVariant QDirModel::headerData(int <db:emphasis>section</db:emphasis>, Qt::Orientation <db:emphasis>orientation</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::DisplayRole) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#headerData" role="function">QAbstractItemModel::headerData(int section, Qt::Orientation orientation, int role) const</db:link>.</db:para>
<db:para>Returns the data stored under the given <db:code role="parameter">role</db:code> for the specified <db:code role="parameter">section</db:code> of the header with the given <db:code role="parameter">orientation</db:code>.</db:para>
</db:section>
<db:section xml:id="iconProvider">
<db:title>QFileIconProvider *QDirModel::iconProvider() const</db:title>
<db:para>Returns the file icon provider for this directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#setIconProvider">setIconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="index">
<db:title>[override virtual] QModelIndex QDirModel::index(int <db:emphasis>row</db:emphasis>, int <db:emphasis>column</db:emphasis>, const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#index" role="function">QAbstractItemModel::index(int row, int column, const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns the model item index for the item in the <db:code role="parameter">parent</db:code> with the given <db:code role="parameter">row</db:code> and <db:code role="parameter">column</db:code>.</db:para>
</db:section>
<db:section xml:id="index-1">
<db:title>QModelIndex QDirModel::index(const QString &amp;<db:emphasis>path</db:emphasis>, int <db:emphasis>column</db:emphasis> = 0) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the model item index for the given <db:code role="parameter">path</db:code>.</db:para>
</db:section>
<db:section xml:id="isDir">
<db:title>bool QDirModel::isDir(const QModelIndex &amp;<db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns true if the model item <db:code role="parameter">index</db:code> represents a directory; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="mimeData">
<db:title>[override virtual] QMimeData *QDirModel::mimeData(const QModelIndexList &amp;<db:emphasis>indexes</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeData" role="function">QAbstractItemModel::mimeData(const QModelIndexList &amp;indexes) const</db:link>.</db:para>
<db:para>Returns an object that contains a serialized description of the specified <db:code role="parameter">indexes</db:code>. The format used to describe the items corresponding to the indexes is obtained from the <db:link xlink:href="qdirmodel.xml#mimeTypes">mimeTypes</db:link>() function.</db:para>
<db:para>If the list of indexes is empty, 0 is returned rather than a serialized empty list.</db:para>
</db:section>
<db:section xml:id="mimeTypes">
<db:title>[override virtual] QStringList QDirModel::mimeTypes() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#mimeTypes" role="function">QAbstractItemModel::mimeTypes() const</db:link>.</db:para>
<db:para>Returns a list of MIME types that can be used to describe a list of items in the model.</db:para>
</db:section>
<db:section xml:id="mkdir">
<db:title>QModelIndex QDirModel::mkdir(const QModelIndex &amp;<db:emphasis>parent</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Create a directory with the <db:code role="parameter">name</db:code> in the <db:code role="parameter">parent</db:code> model item.</db:para>
</db:section>
<db:section xml:id="nameFilters">
<db:title>QStringList QDirModel::nameFilters() const</db:title>
<db:para>Returns a list of filters applied to the names in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#setNameFilters">setNameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="parent">
<db:title>[override virtual] QModelIndex QDirModel::parent(const QModelIndex &amp;<db:emphasis>child</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#parent" role="function">QAbstractItemModel::parent(const QModelIndex &amp;index) const</db:link>.</db:para>
<db:para>Return the parent of the given <db:code role="parameter">child</db:code> model item.</db:para>
</db:section>
<db:section xml:id="refresh">
<db:title>void QDirModel::refresh(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex())</db:title>
<db:para><db:link xlink:href="qdirmodel.xml" role="deprecated">QDirModel</db:link> caches file information. This function updates the cache. The <db:code role="parameter">parent</db:code> parameter is the directory from which the model is updated; the default value will update the model from root directory of the file system (the entire model).</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QDirModel::remove(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the model item <db:code role="parameter">index</db:code> from the directory model and <db:emphasis role="bold">deletes the corresponding file from the file system</db:emphasis>, returning true if successful. If the item cannot be removed, false is returned.</db:para>
<db:warning>
<db:para>This function deletes files from the file system; it does <db:emphasis role="bold">not</db:emphasis> move them to a location where they can be recovered.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#rmdir">rmdir</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rmdir">
<db:title>bool QDirModel::rmdir(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes the directory corresponding to the model item <db:code role="parameter">index</db:code> in the directory model and <db:emphasis role="bold">deletes the corresponding directory from the file system</db:emphasis>, returning true if successful. If the directory cannot be removed, false is returned.</db:para>
<db:warning>
<db:para>This function deletes directories from the file system; it does <db:emphasis role="bold">not</db:emphasis> move them to a location where they can be recovered.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rowCount">
<db:title>[override virtual] int QDirModel::rowCount(const QModelIndex &amp;<db:emphasis>parent</db:emphasis> = QModelIndex()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#rowCount" role="function">QAbstractItemModel::rowCount(const QModelIndex &amp;parent) const</db:link>.</db:para>
<db:para>Returns the number of rows in the <db:code role="parameter">parent</db:code> model item.</db:para>
</db:section>
<db:section xml:id="setData">
<db:title>[override virtual] bool QDirModel::setData(const QModelIndex &amp;<db:emphasis>index</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>, int <db:emphasis>role</db:emphasis> = Qt::EditRole)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#setData" role="function">QAbstractItemModel::setData(const QModelIndex &amp;index, const QVariant &amp;value, int role)</db:link>.</db:para>
<db:para>Sets the data for the model item <db:code role="parameter">index</db:code> with the given <db:code role="parameter">role</db:code> to the data referenced by the <db:code role="parameter">value</db:code>. Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#ItemDataRole-enum">Qt::ItemDataRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFilter">
<db:title>void QDirModel::setFilter(QDir::Filters <db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the directory model's filter to that specified by <db:code role="parameter">filters</db:code>.</db:para>
<db:para>Note that the filter you set should always include the <db:link xlink:href="qdir.xml#Filter-enum">QDir::AllDirs</db:link> enum value, otherwise <db:link xlink:href="qdirmodel.xml" role="deprecated">QDirModel</db:link> won't be able to read the directory structure.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#filter">filter</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#Filter-enum">QDir::Filters</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIconProvider">
<db:title>void QDirModel::setIconProvider(QFileIconProvider *<db:emphasis>provider</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">provider</db:code> of file icons for the directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#iconProvider">iconProvider</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNameFilters">
<db:title>void QDirModel::setNameFilters(const QStringList &amp;<db:emphasis>filters</db:emphasis>)</db:title>
<db:para>Sets the name <db:code role="parameter">filters</db:code> for the directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#nameFilters">nameFilters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSorting">
<db:title>void QDirModel::setSorting(QDir::SortFlags <db:emphasis>sort</db:emphasis>)</db:title>
<db:para>Sets the directory model's sorting order to that specified by <db:code role="parameter">sort</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#sorting">sorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#SortFlag-enum">QDir::SortFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sort">
<db:title>[override virtual] void QDirModel::sort(int <db:emphasis>column</db:emphasis>, Qt::SortOrder <db:emphasis>order</db:emphasis> = Qt::AscendingOrder)</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#sort" role="function">QAbstractItemModel::sort(int column, Qt::SortOrder order)</db:link>.</db:para>
<db:para>Sort the model items in the <db:code role="parameter">column</db:code> using the <db:code role="parameter">order</db:code> given. The order is a value defined in <db:link xlink:href="qt.xml#SortOrder-enum">Qt::SortOrder</db:link>.</db:para>
</db:section>
<db:section xml:id="sorting">
<db:title>QDir::SortFlags QDirModel::sorting() const</db:title>
<db:para>Returns the sorting method used for the directory model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdirmodel.xml#setSorting">setSorting</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml#SortFlag-enum">QDir::SortFlags</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedDropActions">
<db:title>[override virtual] Qt::DropActions QDirModel::supportedDropActions() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qabstractitemmodel.xml#supportedDropActions" role="function">QAbstractItemModel::supportedDropActions() const</db:link>.</db:para>
<db:para>Returns the drop actions supported by this model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#DropAction-enum">Qt::DropActions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
