<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDateTime Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatetime.xml">QDateTime</db:link> class provides date and time functions.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
<db:para>This class is <db:emphasis>weakly comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDateTime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDateTime is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object encodes a calendar date and a clock time (a &quot;datetime&quot;) in accordance with a time representation. It combines features of the <db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qtime.xml">QTime</db:link> classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months, or years.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> can describe datetimes with respect to <db:link xlink:href="qt.xml#TimeSpec-enum">local time</db:link>, to <db:link xlink:href="qt.xml#TimeSpec-enum">UTC</db:link>, to a specified <db:link xlink:href="qt.xml#TimeSpec-enum">offset from UTC</db:link> or to a specified <db:link xlink:href="qt.xml#TimeSpec-enum">time zone</db:link>. Each of these time representations can be encapsulated in a suitable instance of the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> class. For example, a time zone of &quot;Europe/Berlin&quot; will apply the daylight-saving rules as used in Germany. In contrast, a fixed offset from UTC of +3600 seconds is one hour ahead of UTC (usually written in ISO standard notation as &quot;UTC+01:00&quot;), with no daylight-saving complications. When using either local time or a specified time zone, time-zone transitions (see <db:link xlink:href="qdatetime.xml#timezone-transitions">below</db:link>) are taken into account. A <db:link xlink:href="qdatetime.xml">QDateTime</db:link>'s <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will tell you which of the four types of time representation is in use; its <db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>() provides a full description of that time representation, as a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>.</db:para>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object is typically created either by giving a date and time explicitly in the constructor, or by using a static function such as <db:link xlink:href="qdatetime.xml#currentDateTime-1">currentDateTime</db:link>() or <db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>(). The date and time can be changed with <db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>() and <db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>(). A datetime can also be set using the <db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>() function that takes the time, in milliseconds, since the start, in UTC, of the year 1970. The <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, given a string and a date format used to interpret the date within the string.</db:para>
<db:para><db:link xlink:href="qdatetime.xml#currentDateTime-1">QDateTime::currentDateTime</db:link>() returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that expresses the current date and time with respect to a specific time representation, such as local time (its default). <db:link xlink:href="qdatetime.xml#currentDateTimeUtc">QDateTime::currentDateTimeUtc</db:link>() returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that expresses the current date and time with respect to UTC; it is equivalent to QDateTime::currentDateTime(QTimeZone::UTC).</db:para>
<db:para>The <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() function.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> provides a full set of operators to compare two <db:link xlink:href="qdatetime.xml">QDateTime</db:link> objects, where smaller means earlier and larger means later.</db:para>
<db:para>You can increment (or decrement) a datetime by a given number of milliseconds using <db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>(), seconds using <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>(), or days using <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>(). Similarly, you can use <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>() function returns the number of days between two datetimes, <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() returns the number of seconds between two datetimes, and <db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>() returns the number of milliseconds between two datetimes. These operations are aware of daylight-saving time (DST) and other time-zone transitions, where applicable.</db:para>
<db:para>Use <db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>() to re-express a datetime in terms of a different time representation. By passing a lightweight <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> that represents local time, UTC or a fixed offset from UTC, you can convert the datetime to use the corresponding time representation; or you can pass a full time zone (whose <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is Qt::TimeZone) to use that instead.</db:para>
<db:section xml:id="remarks">
<db:title>Remarks</db:title>
<db:note>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> does not account for leap seconds.</db:para>
</db:note>
<db:note>
<db:para>All conversion to and from string formats is done using the C locale. For localized conversions, see <db:link xlink:href="qlocale.xml">QLocale</db:link>.</db:para>
</db:note>
<db:note>
<db:para>There is no year 0 in the Gregorian calendar. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before common era.&quot; The day before 1 January 1 CE is 31 December 1 BCE.</db:para>
</db:note>
<db:note>
<db:para>Using local time (the default) or a specified time zone implies a need to resolve any issues around <db:link xlink:href="qdatetime.xml#timezone-transitions">transitions</db:link>. As a result, operations on such <db:link xlink:href="qdatetime.xml">QDateTime</db:link> instances (notably including constructing them) may be more expensive than the equivalent when using UTC or a fixed offset from it.</db:para>
</db:note>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>The range of values that <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can represent is dependent on the internal storage implementation. <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is currently stored in a qint64 as a serial msecs value encoding the date and time. This restricts the date range to about ±292 million years, compared to the <db:link xlink:href="qdate.xml">QDate</db:link> range of ±2 billion years. Care must be taken when creating a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> with extreme values that you do not overflow the storage. The exact range of supported values varies depending on the time representation used.</db:para>
</db:section>
<db:section xml:id="use-of-timezones">
<db:title>Use of Timezones</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> uses the system's time zone information to determine the current local time zone and its offset from UTC. If the system is not configured correctly or not up-to-date, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> will give wrong results.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> likewise uses system-provided information to determine the offsets of other timezones from UTC. If this information is incomplete or out of date, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> will give wrong results. See the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> documentation for more details.</db:para>
<db:para>On modern Unix systems, this means <db:link xlink:href="qdatetime.xml">QDateTime</db:link> usually has accurate information about historical transitions (including DST, see below) whenever possible. On Windows, where the system doesn't support historical timezone data, historical accuracy is not maintained with respect to timezone transitions, notably including DST. However, building Qt with the ICU library will equip <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> with the same timezone database as is used on Unix.</db:para>
</db:section>
<db:section xml:id="timezone-transitions">
<db:title>Timezone transitions</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> takes into account timezone transitions, both the transitions between Standard Time and Daylight-Saving Time (DST) and the transitions that arise when a zone changes its standard offset. For example, if the transition is at 2am and the clock goes forward to 3am, then there is a &quot;missing&quot; hour from 02:00:00 to 02:59:59.999. Such a transition is known as a &quot;spring forward&quot; and the times skipped over have no meaning. When a transition goes the other way, known as a &quot;fall back&quot;, a time interval is repeated, first in the old zone (usually DST), then in the new zone (usually Standard Time), so times in this interval are ambiguous.</db:para>
<db:para>Some zones use &quot;reversed&quot; DST, using standard time in summer and daylight-saving time (with a lowered offset) in winter. For such zones, the spring forward still happens in spring and skips an hour, but is a transition <db:emphasis>out of</db:emphasis> daylight-saving time, while the fall back still repeats an autumn hour but is a transition <db:emphasis>to</db:emphasis> daylight-saving time.</db:para>
<db:para>When converting from a UTC time (or a time at fixed offset from UTC), there is always an unambiguous valid result in any timezone. However, when combining a date and time to make a datetime, expressed with respect to local time or a specific time-zone, the nominal result may fall in a transition, making it either invalid or ambiguous. Methods where this situation may arise take a resolve parameter: this is always ignored if the requested datetime is valid and unambiguous. See <db:link xlink:href="qdatetime.xml#TransitionResolution-enum">TransitionResolution</db:link> for the options it lets you control. Prior to Qt 6.7, the equivalent of its <db:link xlink:href="qdatetime.xml#TransitionResolution-enum">LegacyBehavior</db:link> was selected.</db:para>
<db:para>For a spring forward's skipped interval, interpreting the requested time with either offset yields an actual time at which the other offset was in use; so passing TransitionResolution::RelativeToBefore for resolve will actually result in a time after the transition, that would have had the requested representation had the transition not happened. Likewise, TransitionResolution::RelativeToAfter for resolve results in a time before the transition, that would have had the requested representation, had the transition happened earlier.</db:para>
<db:para>When <db:link xlink:href="qdatetime.xml">QDateTime</db:link> performs arithmetic, as with addDay() or <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>(), it takes care to produce a valid result. For example, on a day when there is a spring forward from 02:00 to 03:00, adding one second to 01:59:59 will get 03:00:00. Adding one day to 02:30 on the preceding day will get 03:30 on the day of the transition, while subtracting one day, by calling addDay(-1), to 02:30 on the following day will get 01:30 on the day of the transition. While <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>() will deliver a time offset by the given number of seconds, <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>() adjusts the date and only adjusts time if it would otherwise get an invalid result. Applying addDays(1) to 03:00 on the day before the spring-forward will simply get 03:00 on the day of the transition, even though the latter is only 23 hours after the former; but addSecs(24 * 60 * 60) will get 04:00 on the day of the transition, since that's 24 hours later. Typical transitions make some days 23 or 25 hours long.</db:para>
<db:para>For datetimes that the system time_t can represent (from 1901-12-14 to 2038-01-18 on systems with 32-bit time_t; for the full range <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can represent if the type is 64-bit), the standard system APIs are used to determine local time's offset from UTC. For datetimes not handled by these system APIs (potentially including some within the time_t range), <db:link xlink:href="qtimezone.xml#systemTimeZone">QTimeZone::systemTimeZone</db:link>() is used, if available, or a best effort is made to estimate. In any case, the offset information used depends on the system and may be incomplete or, for past times, historically inaccurate. Furthermore, for future dates, the local time zone's offsets and DST rules may change before that date comes around.</db:para>
<db:section xml:id="whole-day-transitions">
<db:title>Whole day transitions</db:title>
<db:para>A small number of zones have skipped or repeated entire days as part of moving The International Date Line across themselves. For these, <db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>() will be unaware of the duplication or gap, simply using the difference in calendar date; in contrast, <db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>() and <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() know the true time interval. Likewise, <db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>() and <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>() correspond directly to elapsed time, where <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>(), <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>() follow the nominal calendar, aside from where landing in a gap or duplication requires resolving an ambiguity or invalidity due to a duplication or omission.</db:para>
<db:note>
<db:para>Days &quot;lost&quot; during a change of calendar, such as from Julian to Gregorian, do not affect <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. Although the two calendars describe dates differently, the successive days across the change are described by consecutive <db:link xlink:href="qdate.xml">QDate</db:link> instances, each one day later than the previous, as described by either calendar or by their toJulianDay() values. In contrast, a zone skipping or duplicating a day is changing its description of <db:emphasis>time</db:emphasis>, not date, for all that it does so by a whole 24 hours.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="offsets-from-utc">
<db:title>Offsets From UTC</db:title>
<db:para>Offsets from UTC are measured in seconds east of Greenwich. The moment described by a particular date and time, such as noon on a particular day, depends on the time representation used. Those with a higher offset from UTC describe an earlier moment, and those with a lower offset a later moment, by any given combination of date and time.</db:para>
<db:para>There is no explicit size restriction on an offset from UTC, but there is an implicit limit imposed when using the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() and <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() methods which use a ±hh:mm format, effectively limiting the range to ± 99 hours and 59 minutes and whole minutes only. Note that currently no time zone has an offset outside the range of ±14 hours and all known offsets are multiples of five minutes. Historical time zones have a wider range and may have offsets including seconds; these last cannot be faithfully represented in strings.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member>QDateTimeEdit</db:member>
<db:member><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="TransitionResolution-enum">
<db:title>[since 6.7] enum QDateTime::TransitionResolution</db:title>
<db:para>This enumeration is used to resolve datetime combinations which fall in <db:link xlink:href="qdatetime.xml#timezone-transitions">Timezone transitions</db:link>.</db:para>
<db:para>When constructing a datetime, specified in terms of local time or a time-zone that has daylight-saving time, or revising one with <db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>(), <db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>() or <db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>(), the given parameters may imply a time representation that either has no meaning or has two meanings in the zone. Such time representations are described as being in the transition. In either case, we can simply return an invalid datetime, to indicate that the operation is ill-defined. In the ambiguous case, we can alternatively select one of the two times that could be meant. When there is no meaning, we can select a time either side of it that might plausibly have been meant. For example, when advancing from an earlier time, we can select the time after the transition that is actually the specified amount of time after the earlier time in question. The options specified here configure how such selection is performed.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::Reject</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Treat any time in a transition as invalid. Either it really is, or it is ambiguous.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::RelativeToBefore</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Selects a time as if stepping forward from a time before the transition. This interprets the requested time using the offset in effect before the transition and, if necessary, converts the result to the offset in effect at the resulting time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::RelativeToAfter</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Select a time as if stepping backward from a time after the transition. This interprets the requested time using the offset in effect after the transition and, if necessary, converts the result to the offset in effect at the resulting time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::PreferBefore</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Selects a time before the transition,</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::PreferAfter</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Selects a time after the transition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::PreferStandard</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Selects a time on the standard time side of the transition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::PreferDaylightSaving</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Selects a time on the daylight-saving-time side of the transition.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">TransitionResolution</db:emphasis>::LegacyBehavior</db:code></db:para>
</db:td>
<db:td><db:code>RelativeToBefore</db:code></db:td>
<db:td>
<db:para>An alias for RelativeToBefore, which is used as default for TransitionResolution parameters, as this most closely matches the behavior prior to Qt 6.7.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>(), <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() or <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>(), the behavior is and (mostly) was to use RelativeToBefore if adding a positive adjustment and RelativeToAfter if adding a negative adjustment.</db:para>
<db:note>
<db:para>In time zones where daylight-saving increases the offset from UTC in summer (known as &quot;positive DST&quot;), PreferStandard is an alias for RelativeToAfter and PreferDaylightSaving for RelativeToBefore. In time zones where the daylight-saving mechanism is a decrease in offset from UTC in winter (known as &quot;negative DST&quot;), the reverse applies, provided the operating system reports - as it does on most platforms - whether a datetime is in DST or standard time. For some platforms, where transition times are unavailable even for <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetimes, <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> is obliged to presume that the side with lower offset from UTC is standard time, effectively assuming positive DST.</db:para>
</db:note>
<db:para>The following tables illustrate how a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> constructor resolves a request for 02:30 on a day when local time has a transition between 02:00 and 03:00, with a nominal standard time LST and daylight-saving time LDT on the two sides, in the various possible cases. The transition type may be to skip an hour or repeat it. The type of transition and value of a parameter resolve determine which actual time on the given date is selected. First, the common case of positive daylight-saving, where:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Before</db:para>
</db:th>
<db:th>
<db:para>02:00–03:00</db:para>
</db:th>
<db:th>
<db:para>After</db:para>
</db:th>
<db:th>
<db:para>resolve</db:para>
</db:th>
<db:th>
<db:para>selected</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>RelativeToBefore</db:para>
</db:td>
<db:td>
<db:para>03:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>RelativeToAfter</db:para>
</db:td>
<db:td>
<db:para>01:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferBefore</db:para>
</db:td>
<db:td>
<db:para>01:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferAfter</db:para>
</db:td>
<db:td>
<db:para>03:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferStandard</db:para>
</db:td>
<db:td>
<db:para>01:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferDaylightSaving</db:para>
</db:td>
<db:td>
<db:para>03:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>RelativeToBefore</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>RelativeToAfter</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferBefore</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferAfter</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferStandard</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferDaylightSaving</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Second, the case for negative daylight-saving, using LDT in winter and skipping an hour to transition to LST in summer, then repeating an hour at the transition back to winter:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>RelativeToBefore</db:para>
</db:td>
<db:td>
<db:para>03:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>RelativeToAfter</db:para>
</db:td>
<db:td>
<db:para>01:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferBefore</db:para>
</db:td>
<db:td>
<db:para>01:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferAfter</db:para>
</db:td>
<db:td>
<db:para>03:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferStandard</db:para>
</db:td>
<db:td>
<db:para>03:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>skip</db:para>
</db:td>
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>PreferDaylightSaving</db:para>
</db:td>
<db:td>
<db:para>01:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>RelativeToBefore</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>RelativeToAfter</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferBefore</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferAfter</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferStandard</db:para>
</db:td>
<db:td>
<db:para>02:30 LST</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>LST</db:para>
</db:td>
<db:td>
<db:para>repeat</db:para>
</db:td>
<db:td>
<db:para>LDT</db:para>
</db:td>
<db:td>
<db:para>PreferDaylightSaving</db:para>
</db:td>
<db:td>
<db:para>02:30 LDT</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Reject can be used to prompt relevant <db:link xlink:href="qdatetime.xml">QDateTime</db:link> APIs to return an invalid datetime object so that your code can deal with transitions for itself, for example by alerting a user to the fact that the datetime they have selected is in a transition interval, to offer them the opportunity to resolve a conflict or ambiguity. Code using this may well find the other options above useful to determine relevant information to use in its own (or the user's) resolution. If the start or end of the transition, or the moment of the transition itself, is the right resolution, <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>'s transition APIs can be used to obtain that information. You can determine whether the transition is a repeated or skipped interval by using <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() to measure the actual time between noon on the previous and following days. The result will be less than 48 hours for a skipped interval (such as a spring-forward) and more than 48 hours for a repeated interval (such as a fall-back).</db:para>
<db:note>
<db:para>When a resolution other than Reject is specified, a valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object is returned, if possible. If the requested date-time falls in a gap, the returned date-time will not have the <db:link xlink:href="qdatetime.xml#time">time</db:link>() requested - or, in some cases, the <db:link xlink:href="qdatetime.xml#date">date</db:link>(), if a whole day was skipped. You can thus detect when a gap is hit by comparing <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() to what was requested.</db:para>
</db:note>
<db:section xml:id="relation-to-other-datetime-software">
<db:title>Relation to other datetime software</db:title>
<db:para>The Python programming language's datetime APIs have a fold parameter that corresponds to RelativeToBefore (fold = True) and RelativeToAfter (fold = False).</db:para>
<db:para>The Temporal proposal to replace JavaScript's Date offers four options for how to resolve a transition, as value for a disambiguation parameter. Its 'reject' raises an exception, which roughly corresponds to Reject producing an invalid result. Its 'earlier' and 'later' options correspond to PreferBefore and PreferAfter. Its 'compatible' option corresponds to RelativeToBefore (and Python's fold = True).</db:para>
</db:section>
<db:section>
<db:title>Notes</db:title>
<db:para>This enum was introduced in Qt 6.7.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timezone-transitions">Timezone transitions</db:link></db:member>
<db:member><db:link xlink:href="">QDateTime::TransitionResolution</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="YearRange-enum">
<db:title>enum QDateTime::YearRange</db:title>
<db:para>This enumerated type describes the range of years (in the Gregorian calendar) representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">YearRange</db:emphasis>::First</db:code></db:para>
</db:td>
<db:td><db:code>-292275056</db:code></db:td>
<db:td>
<db:para>The later parts of this year are representable</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">YearRange</db:emphasis>::Last</db:code></db:para>
</db:td>
<db:td><db:code>+292278994</db:code></db:td>
<db:td>
<db:para>The earlier parts of this year are representable</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All dates strictly between these two years are also representable. Note, however, that the Gregorian Calendar has no year zero.</db:para>
<db:note>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> can describe dates in a wider range of years. For most purposes, this makes little difference, as the range of years that <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can support reaches 292 million years either side of 1970.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="toString">
<db:title>QString QDateTime::toString(QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="toString-1">QString QDateTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:bridgehead>
<db:para>Returns the datetime as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string. If <db:code role="parameter">cal</db:code> is supplied, it determines the calendar used to represent the date; it defaults to Gregorian. Prior to Qt 5.14, there was no <db:code role="parameter">cal</db:code> parameter and the Gregorian calendar was always used. See <db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>() and <db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>() for the supported specifiers for time and date, respectively, in the <db:code role="parameter">format</db:code> parameter.</db:para>
<db:para>Any sequence of characters enclosed in single quotes will be included verbatim in the output string (stripped of the quotes), even if it contains formatting characters. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output. All other characters in the format string are included verbatim in the output string.</db:para>
<db:para>Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with care, as the resulting strings aren't always reliably readable (e.g. if &quot;dM&quot; produces &quot;212&quot; it could mean either the 2nd of December or the 21st of February).</db:para>
<db:para>Example format strings (assumed that the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is 21 May 2001 14:13:09.120):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>21.05.2001</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Tue May 21 01</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.zzz</db:para>
</db:td>
<db:td>
<db:para>14:13:09.120</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.z</db:para>
</db:td>
<db:td>
<db:para>14:13:09.12</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>h:m:s ap</db:para>
</db:td>
<db:td>
<db:para>2:13:9 pm</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:note>
<db:para>Day and month names as well as AM/PM indicators are given in English (C locale). To get localized month and day names and localized forms of AM/PM, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toDateTime().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime">
<db:title>[noexcept] QDateTime::QDateTime()</db:title>
<db:para>Constructs a null datetime, nominally using local time.</db:para>
<db:para>A null datetime is invalid, since its date and time are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime-3">
<db:title>[until 6.9] QDateTime::QDateTime(QDate <db:emphasis>date</db:emphasis>, QTime <db:emphasis>time</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>Use QDateTime(date, time) or QDateTime(date, time, QTimeZone::fromSecondsAheadOfUtc(offsetSeconds)).</db:para>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time representation implied by <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code> seconds.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then <db:code role="parameter">offsetSeconds</db:code> will be ignored. If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetime use the correct constructor.</db:para>
<db:para>If <db:code role="parameter">date</db:code> lies outside the range of dates representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, the result is invalid. If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the system's time-zone skipped over the given date and time, the result is invalid.</db:para>
</db:section>
<db:section xml:id="QDateTime-4">
<db:title>QDateTime::QDateTime(QDate <db:emphasis>date</db:emphasis>, QTime <db:emphasis>time</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>, QDateTime::TransitionResolution <db:emphasis>resolve</db:emphasis> = TransitionResolution::LegacyBehavior)</db:title>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time representation described by <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight. If <db:code role="parameter">timeZone</db:code> is invalid then the datetime will be invalid. If <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code> describe a moment close to a transition for <db:code role="parameter">timeZone</db:code>, <db:code role="parameter">resolve</db:code> controls how that situation is resolved.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, the version of this function lacked the <db:code role="parameter">resolve</db:code> parameter so had no way to resolve the ambiguities related to transitions.</db:para>
</db:note>
</db:section>
<db:section xml:id="QDateTime-5">
<db:title>[since 6.5] QDateTime::QDateTime(QDate <db:emphasis>date</db:emphasis>, QTime <db:emphasis>time</db:emphasis>, QDateTime::TransitionResolution <db:emphasis>resolve</db:emphasis> = TransitionResolution::LegacyBehavior)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using local time.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, midnight will be used as the time. If <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code> describe a moment close to a transition for local time, <db:code role="parameter">resolve</db:code> controls how that situation is resolved.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, the version of this function lacked the <db:code role="parameter">resolve</db:code> parameter so had no way to resolve the ambiguities related to transitions.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="QDateTime-2">
<db:title>[noexcept] QDateTime::QDateTime(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> datetime.</db:para>
</db:section>
<db:section xml:id="QDateTime-1">
<db:title>[noexcept] QDateTime::QDateTime(QDateTime &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Moves the content of the temporary <db:code role="parameter">other</db:code> datetime to this object and leaves <db:code role="parameter">other</db:code> in an unspecified (but proper) state.</db:para>
</db:section>
<db:section xml:id="dtor.QDateTime">
<db:title>[noexcept] QDateTime::~QDateTime()</db:title>
<db:para>Destroys the datetime.</db:para>
</db:section>
<db:section xml:id="addDays">
<db:title>QDateTime QDateTime::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">ndays</db:code> days later than the datetime of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be just beyond this gap, in the direction of change. If the transition is at 2am and the clock goes forward to 3am, the result of aiming between 2am and 3am will be adjusted to fall before 2am (if ndays &lt; 0) or after 3am (otherwise).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timezone-transitions">Timezone transitions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addDuration">
<db:title>[since 6.4] QDateTime QDateTime::addDuration(std::chrono::milliseconds <db:emphasis>msecs</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">msecs</db:code> milliseconds later than the datetime of this object (or earlier if <db:code role="parameter">msecs</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:note>
<db:para>Adding durations expressed in std::chrono::months or std::chrono::years does not yield the same result obtained by using <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() or <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>(). The former are fixed durations, calculated in relation to the solar year; the latter use the Gregorian calendar definitions of months/years.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMSecs">
<db:title>QDateTime QDateTime::addMSecs(qint64 <db:emphasis>msecs</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">msecs</db:code> milliseconds later than the datetime of this object (or earlier if <db:code role="parameter">msecs</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDateTime QDateTime::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nmonths</db:code> months later than the datetime of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be just beyond this gap, in the direction of change. If the transition is at 2am and the clock goes forward to 3am, the result of aiming between 2am and 3am will be adjusted to fall before 2am (if nmonths &lt; 0) or after 3am (otherwise).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timezone-transitions">Timezone transitions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSecs">
<db:title>QDateTime QDateTime::addSecs(qint64 <db:emphasis>s</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">s</db:code> seconds later than the datetime of this object (or earlier if <db:code role="parameter">s</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears">
<db:title>QDateTime QDateTime::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nyears</db:code> years later than the datetime of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be just beyond this gap, in the direction of change. If the transition is at 2am and the clock goes forward to 3am, the result of aiming between 2am and 3am will be adjusted to fall before 2am (if nyears &lt; 0) or after 3am (otherwise).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timezone-transitions">Timezone transitions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTime">
<db:title>[static, since 6.5] QDateTime QDateTime::currentDateTime(const QTimeZone &amp;<db:emphasis>zone</db:emphasis>)</db:title>
<db:para>Returns the system clock's current datetime, using the time representation described by <db:code role="parameter">zone</db:code>. If <db:code role="parameter">zone</db:code> is omitted, local time is used.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTime-1">
<db:title>[static] QDateTime QDateTime::currentDateTime()</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="currentDateTimeUtc">
<db:title>[static] QDateTime QDateTime::currentDateTimeUtc()</db:title>
<db:para>Returns the system clock's current datetime, expressed in terms of UTC.</db:para>
<db:para>Equivalent to currentDateTime(QTimeZone::UTC).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime-1">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentMSecsSinceEpoch">
<db:title>[static noexcept] qint64 QDateTime::currentMSecsSinceEpoch()</db:title>
<db:para>Returns the current number of milliseconds since the start, in UTC, of the year 1970.</db:para>
<db:para>This number is like the POSIX time_t variable, but expressed in milliseconds instead of seconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime-1">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentSecsSinceEpoch">
<db:title>[static noexcept] qint64 QDateTime::currentSecsSinceEpoch()</db:title>
<db:para>Returns the number of seconds since the start, in UTC, of the year 1970.</db:para>
<db:para>This number is like the POSIX time_t variable.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentMSecsSinceEpoch">currentMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="date">
<db:title>QDate QDateTime::date() const</db:title>
<db:para>Returns the date part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDateTime::daysTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of days from this datetime to the <db:code role="parameter">other</db:code> datetime. The number of days is counted as the number of times midnight is reached between this datetime to the <db:code role="parameter">other</db:code> datetime. This means that a 10 minute difference from 23:55 to 0:05 the next day counts as one day.</db:para>
<db:para>If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime startDate(QDate(2012, 7, 6), QTime(8, 30, 0));
QDateTime endDate(QDate(2012, 7, 7), QTime(16, 30, 0));
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);

startDate = QDateTime(QDate(2012, 7, 6), QTime(23, 55, 0));
endDate = QDateTime(QDate(2012, 7, 7), QTime(0, 5, 0));
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);

qSwap(startDate, endDate); // Make endDate before startDate.
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCFDate">
<db:title>[static] QDateTime QDateTime::fromCFDate(CFDateRef <db:emphasis>date</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the CFDate <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toCFDate">toCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch">
<db:title>[static] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Returns a datetime representing a moment the given number <db:code role="parameter">msecs</db:code> of milliseconds after the start, in UTC, of the year 1970, described as specified by <db:code role="parameter">timeZone</db:code>. The default time representation is local time.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-1">
<db:title>[static] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-2">
<db:title>[static, until 6.9] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Pass a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instead, or omit <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>Returns a datetime representing a moment the given number <db:code role="parameter">msecs</db:code> of milliseconds after the start, in UTC, of the year 1970, described as specified by <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> will be used as the <db:code role="parameter">spec</db:code>, since UTC has zero offset.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> will be used in its place, equivalent to using the current system time zone (but differently represented).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNSDate">
<db:title>[static] QDateTime QDateTime::fromNSDate(const NSDate *<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the NSDate <db:code role="parameter">date</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toNSDate">toNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSecsSinceEpoch">
<db:title>[static] QDateTime QDateTime::fromSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Returns a datetime representing a moment the given number <db:code role="parameter">secs</db:code> of seconds after the start, in UTC, of the year 1970, described as specified by <db:code role="parameter">timeZone</db:code>. The default time representation is local time.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">secs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSecsSinceEpoch-1">
<db:title>[static] QDateTime QDateTime::fromSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="fromSecsSinceEpoch-2">
<db:title>[static, until 6.9] QDateTime QDateTime::fromSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Pass a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instead, or omit <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>Returns a datetime representing a moment the given number <db:code role="parameter">secs</db:code> of seconds after the start, in UTC, of the year 1970, described as specified by <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">secs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> will be used as the <db:code role="parameter">spec</db:code>, since UTC has zero offset.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> will be used in its place, equivalent to using the current system time zone (but differently represented).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdLocalTime">
<db:title>[static, since 6.4] QDateTime QDateTime::fromStdLocalTime(const std::chrono::local_time&lt;std::chrono::milliseconds&gt; &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:para>Constructs a datetime whose date and time are the number of milliseconds represented by <db:code role="parameter">time</db:code>, counted since 1970-01-01T00:00:00.000 in local time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>).</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toStdSysMilliseconds">toStdSysMilliseconds</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdTimePoint">
<db:title>[static, since 6.4] QDateTime QDateTime::fromStdTimePoint(const std::chrono::local_time&lt;std::chrono::milliseconds&gt; &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:para>Constructs a datetime whose date and time are the number of milliseconds represented by <db:code role="parameter">time</db:code>, counted since 1970-01-01T00:00:00.000 in local time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>).</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toStdSysMilliseconds">toStdSysMilliseconds</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdTimePoint-1">
<db:title>[static, since 6.4] QDateTime QDateTime::fromStdTimePoint(const std::chrono::time_point&lt;Clock, Duration&gt; &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:para>Constructs a datetime representing the same point in time as <db:code role="parameter">time</db:code>, using <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> as its time representation.</db:para>
<db:para>The clock of <db:code role="parameter">time</db:code> must be compatible with std::chrono::system_clock; in particular, a conversion supported by std::chrono::clock_cast must exist. After the conversion, the duration type of the result must be convertible to std::chrono::milliseconds.</db:para>
<db:para>If this is not the case, the caller must perform the necessary clock conversion towards std::chrono::system_clock and the necessary conversion of the duration type (cast/round/floor/ceil/...) so that the input to this function satisfies the constraints above.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toStdSysMilliseconds">toStdSysMilliseconds</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdTimePoint-2">
<db:title>[static, since 6.4] QDateTime QDateTime::fromStdTimePoint(std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::milliseconds&gt; <db:emphasis>time</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Constructs a datetime representing the same point in time as <db:code role="parameter">time</db:code>, using <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> as its time representation.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="fromStdZonedTime">
<db:title>[static, since 6.4] QDateTime QDateTime::fromStdZonedTime(const int &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:para>Constructs a datetime representing the same point in time as <db:code role="parameter">time</db:code>. The result will be expressed in <db:code role="parameter">time</db:code>'s time zone.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:member>
<db:member><db:link xlink:href="qdatetime.xml#toStdSysMilliseconds">toStdSysMilliseconds</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if this is not possible.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: only English short month names (e.g. &quot;Jan&quot; in short form or &quot;January&quot; in long form) are recognized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if the string cannot be parsed.</db:para>
<db:para>Uses the calendar <db:code role="parameter">cal</db:code> if supplied, else Gregorian.</db:para>
<db:para>When <db:code role="parameter">format</db:code> only specifies the last two digits of a year, the 100 years starting at <db:code role="parameter">baseYear</db:code> are the candidates first considered. Prior to 6.7 there was no <db:code role="parameter">baseYear</db:code> parameter and 1900 was always used. This is the default for <db:code role="parameter">baseYear</db:code>, selecting a year from then to 1999. In some cases, other fields may lead to the next or previous century being selected, to get a result consistent with all fields given. See <db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>() for details.</db:para>
<db:para>In addition to the expressions, recognized in the format string to represent parts of the date and time, by <db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>() and <db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>(), this method supports:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>t</db:para>
</db:td>
<db:td>
<db:para>the timezone (offset, name, &quot;Z&quot; or offset with &quot;UTC&quot; prefix)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>tt</db:para>
</db:td>
<db:td>
<db:para>the timezone in offset format with no colon between hours and minutes (for example &quot;+0200&quot;)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ttt</db:para>
</db:td>
<db:td>
<db:para>the timezone in offset format with a colon between hours and minutes (for example &quot;+02:00&quot;)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>tttt</db:para>
</db:td>
<db:td>
<db:para>the timezone name (for example &quot;Europe/Berlin&quot;). The name recognized are those known to <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>, which may depend on the operating system in use.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If no 't' format specifier is present, the system's local time-zone is used. For the defaults of all other fields, see <db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>() and <db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>().</db:para>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;1.30.1&quot;, &quot;M.d.s&quot;);
// dateTime is January 30 in 1900 at 00:00:01.
dateTime = QDateTime::fromString(&quot;12&quot;, &quot;yy&quot;);
// dateTime is January 1 in 1912 at 00:00:00.
</db:programlisting>
<db:para>All other input characters will be treated as text. Any non-empty sequence of characters enclosed in single quotes will also be treated (stripped of the quotes) as text and not be interpreted as expressions.</db:para>
<db:programlisting language="cpp">QTime time1 = QTime::fromString(&quot;131&quot;, &quot;HHh&quot;);
// time1 is 13:00:00
QTime time1 = QTime::fromString(&quot;1apA&quot;, &quot;1amAM&quot;);
// time1 is 01:00:00

QDateTime dateTime2 = QDateTime::fromString(&quot;M1d1y9800:01:02&quot;,
                                            &quot;'M'M'd'd'y'yyhh:mm:ss&quot;);
// dateTime is 1 January 1998 00:01:02
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned. If the format is satisfied but <db:code role="parameter">string</db:code> represents an invalid datetime (e.g. in a gap skipped by a time-zone transition), an valid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned, that represents a near-by datetime that is valid.</db:para>
<db:para>The expressions that don't have leading zeroes (d, M, h, m, s, z) will be greedy. This means that they will use two digits (or three, for z) even if this will put them outside the range and/or leave too few digits for other sections.</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;130&quot;, &quot;Mm&quot;); // invalid
</db:programlisting>
<db:para>This could have meant 1 January 00:30.00 but the M will grab two digits.</db:para>
<db:para>Incorrectly specified fields of the <db:code role="parameter">string</db:code> will cause an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> to be returned. Only datetimes between the local time start of year 100 and end of year 9999 are supported. Note that datetimes near the ends of this range in other time-zones, notably including UTC, may fall outside the range (and thus be treated as invalid) depending on local time zone.</db:para>
<db:note>
<db:para>Day and month names as well as AM/PM indicators must be given in English (C locale). If localized month and day names or localized forms of AM/PM are to be recognized, use <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toDateTime().</db:para>
</db:note>
<db:note>
<db:para>If a format character is repeated more times than the longest expression in the table above using it, this part of the format will be read as several expressions with no separator between them; the longest above, possibly repeated as many times as there are copies of it, ending with a residue that may be a shorter expression. Thus 'tttttt' would match &quot;Europe/BerlinEurope/Berlin&quot; and set the zone to Berlin time; if the datetime string contained &quot;Europe/BerlinZ&quot; it would &quot;match&quot; but produce an inconsistent result, leading to an invalid datetime.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-2">
<db:title>[static, since 6.0] QDateTime QDateTime::fromString(QStringView <db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-3">
<db:title>[static, since 6.0] QDateTime QDateTime::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-4">
<db:title>[static, since 6.7] QDateTime QDateTime::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-5">
<db:title>[static, since 6.0] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="fromString-6">
<db:title>[static, since 6.7] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-7">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="fromString-8">
<db:title>[static, since 6.7] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis> = QLocale::DefaultTwoDigitBaseYear)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Uses a default-constructed <db:link xlink:href="qcalendar.xml">QCalendar</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-9">
<db:title>[static, since 6.7] QDateTime QDateTime::fromString(QStringView <db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
</db:section>
<db:section xml:id="fromString-10">
<db:title>[static, since 6.0] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, QStringView <db:emphasis>format</db:emphasis>, int <db:emphasis>baseYear</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
<db:section xml:id="isDaylightTime">
<db:title>bool QDateTime::isDaylightTime() const</db:title>
<db:para>Returns if this datetime falls in Daylight-Saving Time.</db:para>
<db:para>If the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then will always return false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDateTime::isNull() const</db:title>
<db:para>Returns true if both the date and the time are null; otherwise returns false. A null datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">QDate::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isNull">QTime::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDateTime::isValid() const</db:title>
<db:para>Returns true if this datetime represents a definite moment, otherwise false.</db:para>
<db:para>A datetime is valid if both its date and its time are valid and the time representation used gives a valid meaning to their combination. When the time representation is a specific time-zone or local time, there may be times on some dates that the zone skips in its representation, as when a daylight-saving transition skips an hour (typically during a night in spring). For example, if DST ends at 2am with the clock advancing to 3am, then datetimes from 02:00:00 to 02:59:59.999 on that day are invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#YearRange-enum">QDateTime::YearRange</db:link></db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsTo">
<db:title>qint64 QDateTime::msecsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of milliseconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes and but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msecsTo">QTime::msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetFromUtc">
<db:title>int QDateTime::offsetFromUtc() const</db:title>
<db:para>Returns this datetime's Offset From UTC in seconds.</db:para>
<db:para>The result depends on <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>():</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt::UTC The offset is 0.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::OffsetFromUTC The offset is the value originally set.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::LocalTime The local time's offset from UTC is returned.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::TimeZone The offset used by the time-zone is returned.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For the last two, the offset at this date and time will be returned, taking account of Daylight-Saving Offset. The offset is the difference between the local time or time in the given time-zone and UTC time; it is positive in time-zones ahead of UTC (East of The Prime Meridian), negative for those behind UTC (West of The Prime Meridian).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="secsTo">
<db:title>qint64 QDateTime::secsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of seconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime now = QDateTime::currentDateTime();
QDateTime xmas(QDate(now.date().year(), 12, 25).startOfDay());
qDebug(&quot;There are %d seconds to Christmas&quot;, now.secsTo(xmas));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#secsTo">QTime::secsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate">
<db:title>void QDateTime::setDate(QDate <db:emphasis>date</db:emphasis>, QDateTime::TransitionResolution <db:emphasis>resolve</db:emphasis> = TransitionResolution::LegacyBehavior)</db:title>
<db:para>Sets the date part of this datetime to <db:code role="parameter">date</db:code>.</db:para>
<db:para>If no time is set yet, it is set to midnight. If <db:code role="parameter">date</db:code> is invalid, this <db:link xlink:href="qdatetime.xml">QDateTime</db:link> becomes invalid.</db:para>
<db:para>If <db:code role="parameter">date</db:code> and <db:link xlink:href="qdatetime.xml#time">time</db:link>() describe a moment close to a transition for this datetime's time representation, <db:code role="parameter">resolve</db:code> controls how that situation is resolved.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, the version of this function lacked the <db:code role="parameter">resolve</db:code> parameter so had no way to resolve the ambiguities related to transitions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMSecsSinceEpoch">
<db:title>void QDateTime::setMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:para>Sets the datetime to represent a moment a given number, <db:code role="parameter">msecs</db:code>, of milliseconds after the start, in UTC, of the year 1970.</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>Note that passing the minimum of qint64 (std::numeric_limits&lt;qint64&gt;::min()) to <db:code role="parameter">msecs</db:code> will result in undefined behavior.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetFromUtc">
<db:title>[until 6.9] void QDateTime::setOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>Use <db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>(<db:link xlink:href="qtimezone.xml#fromSecondsAheadOfUtc">QTimeZone::fromSecondsAheadOfUtc</db:link>(offsetSeconds)) instead</db:para>
<db:para>Sets the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the offset to <db:code role="parameter">offsetSeconds</db:code>. The datetime may refer to a different point in time.</db:para>
<db:para>The maximum and minimum offset is 14 positive or negative hours. If <db:code role="parameter">offsetSeconds</db:code> is larger or smaller than that, then the result is undefined.</db:para>
<db:para>If <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSecsSinceEpoch">
<db:title>void QDateTime::setSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>)</db:title>
<db:para>Sets the datetime to represent a moment a given number, <db:code role="parameter">secs</db:code>, of seconds after the start, in UTC, of the year 1970.</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTime">
<db:title>void QDateTime::setTime(QTime <db:emphasis>time</db:emphasis>, QDateTime::TransitionResolution <db:emphasis>resolve</db:emphasis> = TransitionResolution::LegacyBehavior)</db:title>
<db:para>Sets the time part of this datetime to <db:code role="parameter">time</db:code>. If <db:code role="parameter">time</db:code> is not valid, this function sets it to midnight. Therefore, it's possible to clear any set time in a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> by setting it to a default <db:link xlink:href="qtime.xml">QTime</db:link>:</db:para>
<db:programlisting language="cpp">QDateTime dt = QDateTime::currentDateTime();
dt.setTime(QTime());
</db:programlisting>
<db:para>If <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:code role="parameter">time</db:code> describe a moment close to a transition for this datetime's time representation, <db:code role="parameter">resolve</db:code> controls how that situation is resolved.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, the version of this function lacked the <db:code role="parameter">resolve</db:code> parameter so had no way to resolve the ambiguities related to transitions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeSpec">
<db:title>[until 6.9] void QDateTime::setTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>)</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>Use <db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>() instead</db:para>
<db:para>Sets the time specification used in this datetime to <db:code role="parameter">spec</db:code>. The datetime may refer to a different point in time.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an effective offset of 0.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;

QDateTime UTC(local);
UTC.setTimeSpec(Qt::UTC);
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;

qDebug() &lt;&lt; &quot;There are&quot; &lt;&lt; local.secsTo(UTC) &lt;&lt; &quot;seconds difference between the datetimes.&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeZone">
<db:title>void QDateTime::setTimeZone(const QTimeZone &amp;<db:emphasis>toZone</db:emphasis>, QDateTime::TransitionResolution <db:emphasis>resolve</db:emphasis> = TransitionResolution::LegacyBehavior)</db:title>
<db:para>Sets the time zone used in this datetime to <db:code role="parameter">toZone</db:code>.</db:para>
<db:para>The datetime may refer to a different point in time. It uses the time representation of <db:code role="parameter">toZone</db:code>, which may change the meaning of its unchanged <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>().</db:para>
<db:para>If <db:code role="parameter">toZone</db:code> is invalid then the datetime will be invalid. Otherwise, this datetime's <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() after the call will match toZone.timeSpec().</db:para>
<db:para>If <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() describe a moment close to a transition for <db:code role="parameter">toZone</db:code>, <db:code role="parameter">resolve</db:code> controls how that situation is resolved.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, the version of this function lacked the <db:code role="parameter">resolve</db:code> parameter so had no way to resolve the ambiguities related to transitions.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QDateTime::swap(QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this datetime with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="time">
<db:title>QTime QDateTime::time() const</db:title>
<db:para>Returns the time part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeRepresentation">
<db:title>[since 6.5] QTimeZone QDateTime::timeRepresentation() const</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> identifying how this datetime represents time.</db:para>
<db:para>The <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() of the returned <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> will coincide with that of this datetime; if it is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the returned <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> is a time representation. When their <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, the returned <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>'s fixedSecondsAheadOfUtc() supplies the offset. When <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object itself is the full representation of that time zone.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">QTimeZone::asBackendZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeSpec">
<db:title>Qt::TimeSpec QDateTime::timeSpec() const</db:title>
<db:para>Returns the time specification of the datetime.</db:para>
<db:para>This classifies its time representation as local time, UTC, a fixed offset from UTC (without indicating the offset) or a time zone (without giving the details of that time zone). Equivalent to timeRepresentation().timeSpec().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZone">
<db:title>QTimeZone QDateTime::timeZone() const</db:title>
<db:para>Returns the time zone of the datetime.</db:para>
<db:para>The result is the same as timeRepresentation().asBackendZone(). In all cases, the result's <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>.</db:para>
<db:para>When <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, the result will describe local time at the time this method was called. It will not reflect subsequent changes to the system time zone, even when the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> from which it was obtained does.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">QTimeZone::asBackendZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZoneAbbreviation">
<db:title>QString QDateTime::timeZoneAbbreviation() const</db:title>
<db:para>Returns the Time Zone Abbreviation for this datetime.</db:para>
<db:para>The returned string depends on <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>():</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>For <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> it is &quot;UTC&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>For <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> it will be in the format &quot;UTC±00:00&quot;.</db:para>
</db:listitem>
<db:listitem>
<db:para>For <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, the host system is queried.</db:para>
</db:listitem>
<db:listitem>
<db:para>For <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, the associated <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object is queried.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>The abbreviation is not guaranteed to be unique, i.e. different time zones may have the same abbreviation. For <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, when returned by the host system, the abbreviation may be localized.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">QTimeZone::abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCFDate">
<db:title>CFDateRef QDateTime::toCFDate() const</db:title>
<db:para>Creates a CFDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>The caller owns the CFDate object and is responsible for releasing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromCFDate">fromCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocalTime">
<db:title>QDateTime QDateTime::toLocalTime() const</db:title>
<db:para>Returns a copy of this datetime converted to local time.</db:para>
<db:para>The result represents the same moment in time as, and is equal to, this datetime.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime UTC(QDateTime::currentDateTimeUtc());
QDateTime local(UTC.toLocalTime());
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; UTC.secsTo(local);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toUTC">toUTC</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toMSecsSinceEpoch">
<db:title>qint64 QDateTime::toMSecsSinceEpoch() const</db:title>
<db:para>Returns the datetime as a number of milliseconds after the start, in UTC, of the year 1970.</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSDate">
<db:title>NSDate *QDateTime::toNSDate() const</db:title>
<db:para>Creates an NSDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>The NSDate object is autoreleased.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromNSDate">fromNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toOffsetFromUtc">
<db:title>QDateTime QDateTime::toOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>) const</db:title>
<db:para>Returns a copy of this datetime converted to a spec of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> with the given <db:code role="parameter">offsetSeconds</db:code>. Equivalent to toTimeZone(QTimeZone::fromSecondsAheadOfUtc(offsetSeconds)).</db:para>
<db:para>If the <db:code role="parameter">offsetSeconds</db:code> equals 0 then a UTC datetime will be returned.</db:para>
<db:para>The result represents the same moment in time as, and is equal to, this datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toSecsSinceEpoch">
<db:title>qint64 QDateTime::toSecsSinceEpoch() const</db:title>
<db:para>Returns the datetime as a number of seconds after the start, in UTC, of the year 1970.</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdSysMilliseconds">
<db:title>[since 6.4] std::chrono::sys_time&lt;std::chrono::milliseconds&gt; QDateTime::toStdSysMilliseconds() const</db:title>
<db:para>Converts this datetime object to the equivalent time point expressed in milliseconds, using std::chrono::system_clock as a clock.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromStdTimePoint">fromStdTimePoint</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toStdSysSeconds">
<db:title>[since 6.4] std::chrono::sys_seconds QDateTime::toStdSysSeconds() const</db:title>
<db:para>Converts this datetime object to the equivalent time point expressed in seconds, using std::chrono::system_clock as a clock.</db:para>
<db:note>
<db:para>This function requires C++20.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromStdTimePoint">fromStdTimePoint</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-2">
<db:title>QString QDateTime::toString(QStringView <db:emphasis>format</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="toString-3">
<db:title>QString QDateTime::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the datetime as a string in the <db:code role="parameter">format</db:code> given.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. The day and month names will be in English. An example of this formatting is &quot;Wed May 20 03:40:13 1998&quot;. For localized formatting, see <db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>().</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-ddTHH:mm:ss[Z|±HH:mm], depending on the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() of the <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, Z will be appended to the string; if the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, the offset in hours and minutes from UTC will be appended to the string. To include milliseconds in the ISO 8601 date, use the <db:code role="parameter">format</db:code> <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODateWithMs</db:link>, which corresponds to yyyy-MM-ddTHH:mm:ss.zzz[Z|±HH:mm].</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted following <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc2822">RFC 2822</db:link>.</db:para>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-4">
<db:title>QString QDateTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="toTimeSpec">
<db:title>[until 6.9] QDateTime QDateTime::toTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>) const</db:title>
<db:para>This function is scheduled for deprecation in version 6.9.</db:para>
<db:para>Use <db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>() instead.</db:para>
<db:para>Returns a copy of this datetime converted to the given time <db:code role="parameter">spec</db:code>.</db:para>
<db:para>The result represents the same moment in time as, and is equal to, this datetime.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>. To set to a fixed offset from UTC, use <db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>() or <db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>().</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the local Time Zone. To set a specified time-zone, use <db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toTimeSpec(Qt::UTC));
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTimeZone">
<db:title>QDateTime QDateTime::toTimeZone(const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>) const</db:title>
<db:para>Returns a copy of this datetime converted to the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>The result represents the same moment in time as, and is equal to, this datetime.</db:para>
<db:para>The result describes the moment in time in terms of <db:code role="parameter">timeZone</db:code>'s time representation. For example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toTimeSpec(QTimeZone::UTC));
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;No difference between times represented:&quot; &lt;&lt; local.secsTo(UTC);
</db:programlisting>
<db:para>If <db:code role="parameter">timeZone</db:code> is invalid then the datetime will be invalid. Otherwise the returned datetime's <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will match timeZone.timeSpec().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeRepresentation">timeRepresentation</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toLocalTime">toLocalTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toUTC">toUTC</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUTC">
<db:title>QDateTime QDateTime::toUTC() const</db:title>
<db:para>Returns a copy of this datetime converted to UTC.</db:para>
<db:para>The result represents the same moment in time as, and is equal to, this datetime.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toUTC());
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toLocalTime">toLocalTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[since 6.4] QDateTime &amp;QDateTime::operator+=(std::chrono::milliseconds <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Modifies this datetime object by adding the given <db:code role="parameter">duration</db:code>. The updated object will be later if <db:code role="parameter">duration</db:code> is positive, or earlier if it is negative.</db:para>
<db:para>If this datetime is invalid, this function has no effect.</db:para>
<db:para>Returns a reference to this datetime object.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[since 6.4] QDateTime &amp;QDateTime::operator-=(std::chrono::milliseconds <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Modifies this datetime object by subtracting the given <db:code role="parameter">duration</db:code>. The updated object will be earlier if <db:code role="parameter">duration</db:code> is positive, or later if it is negative.</db:para>
<db:para>If this datetime is invalid, this function has no effect.</db:para>
<db:para>Returns a reference to this datetime object.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QDateTime &amp;QDateTime::operator=(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copies the <db:code role="parameter">other</db:code> datetime into this and returns this copy.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-2b">
<db:title>[since 6.4] QDateTime operator+(const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>, std::chrono::milliseconds <db:emphasis>duration</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="operator-2b-1">[since 6.4] QDateTime operator+(std::chrono::milliseconds <db:emphasis>duration</db:emphasis>, const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:bridgehead>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">duration</db:code> milliseconds later than <db:code role="parameter">dateTime</db:code> (or earlier if <db:code role="parameter">duration</db:code> is negative).</db:para>
<db:para>If <db:code role="parameter">dateTime</db:code> is invalid, an invalid datetime will be returned.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is different from <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-">
<db:title>[since 6.4] std::chrono::milliseconds operator-(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns the number of milliseconds between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>. If <db:code role="parameter">lhs</db:code> is earlier than <db:code role="parameter">rhs</db:code>, the result will be negative.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator--1">
<db:title>[since 6.4] QDateTime operator-(const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>, std::chrono::milliseconds <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">duration</db:code> milliseconds earlier than <db:code role="parameter">dateTime</db:code> (or later if <db:code role="parameter">duration</db:code> is negative).</db:para>
<db:para>If <db:code role="parameter">dateTime</db:code> is invalid, an invalid datetime will be returned.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[noexcept] bool operator&lt;(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">dateTime</db:code> to the <db:code role="parameter">out</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[noexcept] bool operator&lt;=(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is earlier than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> represents the same moment in time as <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-not-eq">operator!=</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#operator-lt">operator&lt;</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#operator-lt-eq">operator&lt;=</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#operator-gt">operator&gt;</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#operator-gt-eq">operator&gt;=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[noexcept] bool operator&gt;(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[noexcept] bool operator&gt;=(const QDateTime &amp;<db:emphasis>lhs</db:emphasis>, const QDateTime &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> is later than or equal to <db:code role="parameter">rhs</db:code>; otherwise returns false.</db:para>
<db:para>Two datetimes using different time representations can have different offsets from UTC. In this case, they may compare equivalent even if their <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() differ, if that difference matches the difference in UTC offset. If their date() and time() coincide, the one with higher offset from UTC is less (earlier) than the one with lower offset. As a result, datetimes are only weakly ordered.</db:para>
<db:para>Since 5.14, all invalid datetimes are equivalent and less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:para>Reads a datetime from the stream <db:code role="parameter">in</db:code> into <db:code role="parameter">dateTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
