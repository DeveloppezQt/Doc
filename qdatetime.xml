<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDateTime Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatetime.xml">QDateTime</db:link> class provides date and time functions.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDateTime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDateTime is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object contains a calendar date and a clock time (a &quot;datetime&quot;). It is a combination of the <db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qtime.xml">QTime</db:link> classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months, or years.</db:para>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object is typically created either by giving a date and time explicitly in the constructor, or by using the static function <db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>() that returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object set to the system clock's time. The date and time can be changed with <db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>() and <db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>(). A datetime can also be set using the <db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>() function that takes a POSIX-standard &quot;number of seconds since 00:00:00 on January 1, 1970&quot; value. The <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, given a string and a date format used to interpret the date within the string.</db:para>
<db:para>The <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() function.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> provides a full set of operators to compare two <db:link xlink:href="qdatetime.xml">QDateTime</db:link> objects, where smaller means earlier and larger means later.</db:para>
<db:para>You can increment (or decrement) a datetime by a given number of milliseconds using <db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>(), seconds using <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>(), or days using <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>(). Similarly, you can use <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>() function returns the number of days between two datetimes, <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() returns the number of seconds between two datetimes, and <db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>() returns the number of milliseconds between two datetimes.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> can store datetimes as <db:link xlink:href="qt.xml#TimeSpec-enum">local time</db:link> or as <db:link xlink:href="qt.xml#TimeSpec-enum">UTC</db:link>. <db:link xlink:href="qdatetime.xml#currentDateTime">QDateTime::currentDateTime</db:link>() returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> expressed as local time; use <db:link xlink:href="qdatetime.xml#toUTC">toUTC</db:link>() to convert it to UTC. You can also use <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to find out if a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object stores a UTC time or a local time. Operations such as <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>() and <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() are aware of daylight-saving time (DST).</db:para>
<db:note>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> does not account for leap seconds.</db:para>
</db:note>
<db:section xml:id="no-year-0">
<db:title></db:title><db:section xml:id="no-year-0-no-year-0-1">
<db:title>No Year 0</db:title>
<db:para>There is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before current era.&quot; The day before 1 January 1 CE is 31 December 1 BCE.</db:para>
</db:section>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>The range of valid values able to be stored in <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is dependent on the internal storage implementation. <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is currently stored in a qint64 as a serial msecs value encoding the date and time. This restricts the date range to about +/- 292 million years, compared to the <db:link xlink:href="qdate.xml">QDate</db:link> range of +/- 2 billion years. Care must be taken when creating a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> with extreme values that you do not overflow the storage. The exact range of supported values varies depending on the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> and time zone.</db:para>
</db:section>
<db:section xml:id="use-of-system-timezone">
<db:title>Use of System Timezone</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> uses the system's time zone information to determine the offset of local time from UTC. If the system is not configured correctly or not up-to-date, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> will give wrong results as well.</db:para>
</db:section>
<db:section xml:id="daylight-saving-time-dst">
<db:title>Daylight-Saving Time (DST)</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> takes into account the system's time zone information when dealing with DST. On modern Unix systems, this means it applies the correct historical DST data whenever possible. On Windows, where the system doesn't support historical DST data, historical accuracy is not maintained with respect to DST.</db:para>
<db:para>The range of valid dates taking DST into account is 1970-01-01 to the present, and rules are in place for handling DST correctly until 2037-12-31, but these could change. For dates falling outside that range, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> makes a <db:emphasis>best guess</db:emphasis> using the rules for year 1970 or 2037, but we can't guarantee accuracy. This means <db:link xlink:href="qdatetime.xml">QDateTime</db:link> doesn't take into account changes in a locale's time zone before 1970, even if the system's time zone database supports that information.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> takes into consideration the Standard Time to Daylight-Saving Time transition. For example if the transition is at 2am and the clock goes forward to 3am, then there is a &quot;missing&quot; hour from 02:00:00 to 02:59:59.999 which <db:link xlink:href="qdatetime.xml">QDateTime</db:link> considers to be invalid. Any date maths performed will take this missing hour into account and return a valid result.</db:para>
</db:section>
<db:section xml:id="offset-from-utc">
<db:title>Offset From UTC</db:title>
<db:para>A <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> is also supported. This allows you to define a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> relative to UTC at a fixed offset of a given number of seconds from UTC. For example, an offset of +3600 seconds is one hour ahead of UTC and is usually written in ISO standard notation as &quot;UTC+01:00&quot;. Daylight-Saving Time never applies with this TimeSpec.</db:para>
<db:para>There is no explicit size restriction to the offset seconds, but there is an implicit limit imposed when using the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() and <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() methods which use a format of [+|-]hh:mm, effectively limiting the range to +/- 99 hours and 59 minutes and whole minutes only. Note that currently no time zone lies outside the range of +/- 14 hours.</db:para>
</db:section>
<db:section xml:id="time-zone-support">
<db:title>Time Zone Support</db:title>
<db:para>A <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> is also supported in conjunction with the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> class. This allows you to define a datetime in a named time zone adhering to a consistent set of daylight-saving transition rules. For example a time zone of &quot;Europe/Berlin&quot; will apply the daylight-saving rules as used in Germany since 1970. Note that the transition rules applied depend on the platform support. See the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> documentation for more details.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDateTime">
<db:title>QDateTime::QDateTime()</db:title>
<db:para>Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime-1">
<db:title>[explicit] QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code>, a valid time(00:00:00.000), and sets the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>.</db:para>
</db:section>
<db:section xml:id="QDateTime-3">
<db:title>QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis> = Qt::LocalTime)</db:title>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time specification defined by <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then it will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> datetime use the correct constructor.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetime use the correct constructor.</db:para>
</db:section>
<db:section xml:id="QDateTime-4">
<db:title>[since 5.2] QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the Time Zone specified by <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to 00:00:00.</db:para>
<db:para>If <db:code role="parameter">timeZone</db:code> is invalid then the datetime will be invalid.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="QDateTime-5">
<db:title>[since 5.2] QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time specification defined by <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code> seconds.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then <db:code role="parameter">offsetSeconds</db:code> will be ignored.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetime use the correct constructor.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="QDateTime-2">
<db:title>QDateTime::QDateTime(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> datetime.</db:para>
</db:section>
<db:section xml:id="dtor.QDateTime">
<db:title>[noexcept] QDateTime::~QDateTime()</db:title>
<db:para>Destroys the datetime.</db:para>
</db:section>
<db:section xml:id="addDays">
<db:title>QDateTime QDateTime::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">ndays</db:code> days later than the datetime of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMSecs">
<db:title>QDateTime QDateTime::addMSecs(qint64 <db:emphasis>msecs</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">msecs</db:code> miliseconds later than the datetime of this object (or earlier if <db:code role="parameter">msecs</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDateTime QDateTime::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nmonths</db:code> months later than the datetime of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSecs">
<db:title>QDateTime QDateTime::addSecs(qint64 <db:emphasis>s</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">s</db:code> seconds later than the datetime of this object (or earlier if <db:code role="parameter">s</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears">
<db:title>QDateTime QDateTime::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nyears</db:code> years later than the datetime of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTime">
<db:title>[static] QDateTime QDateTime::currentDateTime()</db:title>
<db:para>Returns the current datetime, as reported by the system clock, in the local time zone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTimeUtc">
<db:title>[static, since 4.7] QDateTime QDateTime::currentDateTimeUtc()</db:title>
<db:para>Returns the current datetime, as reported by the system clock, in UTC.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentMSecsSinceEpoch">
<db:title>[static noexcept, since 4.7] qint64 QDateTime::currentMSecsSinceEpoch()</db:title>
<db:para>Returns the number of milliseconds since 1970-01-01T00:00:00 Universal Coordinated Time. This number is like the POSIX time_t variable, but expressed in milliseconds instead.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="date">
<db:title>QDate QDateTime::date() const</db:title>
<db:para>Returns the date part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDateTime::daysTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of days from this datetime to the <db:code role="parameter">other</db:code> datetime. The number of days is counted as the number of times midnight is reached between this datetime to the <db:code role="parameter">other</db:code> datetime. This means that a 10 minute difference from 23:55 to 0:05 the next day counts as one day.</db:para>
<db:para>If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime startDate(QDate(2012, 7, 6), QTime(8, 30, 0));
QDateTime endDate(QDate(2012, 7, 7), QTime(16, 30, 0));
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);

startDate = QDateTime(QDate(2012, 7, 6), QTime(23, 55, 0));
endDate = QDateTime(QDate(2012, 7, 7), QTime(0, 5, 0));
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);

qSwap(startDate, endDate); // Make endDate before startDate.
qDebug() &lt;&lt; &quot;Days from startDate to endDate: &quot; &lt;&lt; startDate.daysTo(endDate);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCFDate">
<db:title>[static, since 5.5] QDateTime QDateTime::fromCFDate(int <db:emphasis>date</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the CFDate <db:code role="parameter">date</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toCFDate">toCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch">
<db:title>[static, since 4.7] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:para>Returns a datetime whose date and time are the number of milliseconds, <db:code role="parameter">msecs</db:code>, that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>), and converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>. On systems that do not support time zones, the time will be set as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-1">
<db:title>[static, since 5.2] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Returns a datetime whose date and time are the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and with the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromTime_t">fromTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-2">
<db:title>[static, since 5.2] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:para>Returns a datetime whose date and time are the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to the given <db:code role="parameter">spec</db:code>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromTime_t">fromTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNSDate">
<db:title>[static, since 5.5] QDateTime QDateTime::fromNSDate(const int *<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the NSDate <db:code role="parameter">date</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toNSDate">toNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if this is not possible.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: It is recommended that you use the English short month names (e.g. &quot;Jan&quot;). Although localized month names can also be used, they depend on the user's locale settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-1">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if the string cannot be parsed.</db:para>
<db:para>These expressions may be used for the date part of the format string:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>the day as number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>the day as number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses <db:link xlink:href="qdate.xml#shortDayName">QDate::shortDayName</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>the long localized day name (e.g. 'Monday' to 'Sunday'). Uses <db:link xlink:href="qdate.xml#longDayName">QDate::longDayName</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>the month as number without a leading zero (1-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>the month as number with a leading zero (01-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses <db:link xlink:href="qdate.xml#shortMonthName">QDate::shortMonthName</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>the long localized month name (e.g. 'January' to 'December'). Uses <db:link xlink:href="qdate.xml#longMonthName">QDate::longMonthName</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>the year as two digit number (00-99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>the year as four digit number</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Unlike the other version of this function, day and month names must be given in the user's local language. It is only possible to use the English names if the user's language is English.</db:para>
</db:note>
<db:para>These expressions may be used for the time part of the format string:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>h</db:para>
</db:td>
<db:td>
<db:para>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh</db:para>
</db:td>
<db:td>
<db:para>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>H</db:para>
</db:td>
<db:td>
<db:para>the hour without a leading zero (0 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HH</db:para>
</db:td>
<db:td>
<db:para>the hour with a leading zero (00 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>m</db:para>
</db:td>
<db:td>
<db:para>the minute without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mm</db:para>
</db:td>
<db:td>
<db:para>the minute with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>s</db:para>
</db:td>
<db:td>
<db:para>the second without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ss</db:para>
</db:td>
<db:td>
<db:para>the second with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>z</db:para>
</db:td>
<db:td>
<db:para>the milliseconds without leading zeroes (0 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>zzz</db:para>
</db:td>
<db:td>
<db:para>the milliseconds with leading zeroes (000 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AP or A</db:para>
</db:td>
<db:td>
<db:para>interpret as an AM/PM time. <db:emphasis>AP</db:emphasis> must be either &quot;AM&quot; or &quot;PM&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ap or a</db:para>
</db:td>
<db:td>
<db:para>Interpret as an AM/PM time. <db:emphasis>ap</db:emphasis> must be either &quot;am&quot; or &quot;pm&quot;.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be treated as text. Any sequence of characters that are enclosed in single quotes will also be treated as text and not be used as an expression.</db:para>
<db:programlisting language="cpp">QTime time1 = QTime::fromString(&quot;131&quot;, &quot;HHh&quot;);
// time1 is 13:00:00
QTime time1 = QTime::fromString(&quot;1apA&quot;, &quot;1amAM&quot;);
// time1 is 01:00:00

QDateTime dateTime2 = QDateTime::fromString(&quot;M1d1y9800:01:02&quot;,
                                            &quot;'M'M'd'd'y'yyhh:mm:ss&quot;);
// dateTime is 1 January 1998 00:01:02
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned. The expressions that don't have leading zeroes (d, M, h, m, s, z) will be greedy. This means that they will use two digits even if this will put them outside the range and/or leave too few digits for other sections.</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;130&quot;, &quot;Mm&quot;); // invalid
</db:programlisting>
<db:para>This could have meant 1 January 00:30.00 but the M will grab two digits.</db:para>
<db:para>Incorrectly specified fields of the <db:code role="parameter">string</db:code> will cause an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> to be returned. For example, consider the following code, where the two digit year 12 is read as 1912 (see the table below for all field defaults); the resulting datetime is invalid because 23 April 1912 was a Tuesday, not a Monday:</db:para>
<db:programlisting language="cpp">QString string = &quot;Monday, 23 April 12 22:51:41&quot;;
QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;
QDateTime invalid = QDateTime::fromString(string, format);
</db:programlisting>
<db:para>The correct code is:</db:para>
<db:programlisting language="cpp">QString string = &quot;Tuesday, 23 April 12 22:51:41&quot;;
QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;
QDateTime valid = QDateTime::fromString(string, format);
</db:programlisting>
<db:para>For any field that is not represented in the format, the following defaults are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field</db:para>
</db:th>
<db:th>
<db:para>Default value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Year</db:para>
</db:td>
<db:td>
<db:para>1900</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Month</db:para>
</db:td>
<db:td>
<db:para>1 (January)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Day</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Hour</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Minute</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Second</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;1.30.1&quot;, &quot;M.d.s&quot;);
// dateTime is January 30 in 1900 at 00:00:01.
dateTime = QDateTime::fromString(&quot;12&quot;, &quot;yy&quot;);
// dateTime is January 1 in 1912 at 00:00:00.
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTime_t">
<db:title>[static, since 4.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>)</db:title>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>. On systems that do not support time zones, the time will be set as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTime_t-1">
<db:title>[static, since 5.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and with the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTime_t-2">
<db:title>[static, since 5.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to the given <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDaylightTime">
<db:title>[since 5.2] bool QDateTime::isDaylightTime() const</db:title>
<db:para>Returns if this datetime falls in Daylight-Saving Time.</db:para>
<db:para>If the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then will always return false.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDateTime::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if both the date and the time are null; otherwise returns <db:code>false</db:code>. A null datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">QDate::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isNull">QTime::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDateTime::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if both the date and the time are valid and they are valid in the current <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link>, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the date and time are checked to see if they fall in the Standard Time to Daylight-Saving Time transition hour, i.e. if the transition is at 2am and the clock goes forward to 3am then the time from 02:00:00 to 02:59:59.999 is considered to be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsTo">
<db:title>qint64 QDateTime::msecsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of milliseconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes and but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msecsTo">QTime::msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetFromUtc">
<db:title>[since 5.2] int QDateTime::offsetFromUtc() const</db:title>
<db:para>Returns the current Offset From UTC in seconds.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> this will be the value originally set.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> this will be the offset effective in the Time Zone including any Daylight-Saving Offset.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> this will be the difference between the Local Time and UTC including any Daylight-Saving Offset.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> this will be 0.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="secsTo">
<db:title>qint64 QDateTime::secsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns the number of seconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime now = QDateTime::currentDateTime();
QDateTime xmas(QDate(now.date().year(), 12, 25), QTime(0, 0));
qDebug(&quot;There are %d seconds to Christmas&quot;, now.secsTo(xmas));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#secsTo">QTime::secsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate">
<db:title>void QDateTime::setDate(const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:para>Sets the date part of this datetime to <db:code role="parameter">date</db:code>. If no time is set yet, it is set to midnight. If <db:code role="parameter">date</db:code> is invalid, this <db:link xlink:href="qdatetime.xml">QDateTime</db:link> becomes invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMSecsSinceEpoch">
<db:title>[since 4.7] void QDateTime::setMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:para>Sets the date and time given the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>). On systems that do not support time zones this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>Note that passing the minimum of <db:code>qint64</db:code> (<db:code>std::numeric_limits&lt;qint64&gt;::min()</db:code>) to <db:code role="parameter">msecs</db:code> will result in undefined behavior.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetFromUtc">
<db:title>[since 5.2] void QDateTime::setOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the offset to <db:code role="parameter">offsetSeconds</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>The maximum and minimum offset is 14 positive or negative hours. If <db:code role="parameter">offsetSeconds</db:code> is larger or smaller than that, then the result is undefined.</db:para>
<db:para>If <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTime">
<db:title>void QDateTime::setTime(const QTime &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:para>Sets the time part of this datetime to <db:code role="parameter">time</db:code>. If <db:code role="parameter">time</db:code> is not valid, this function sets it to midnight. Therefore, it's possible to clear any set time in a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> by setting it to a default <db:link xlink:href="qtime.xml">QTime</db:link>:</db:para>
<db:programlisting language="cpp">QDateTime dt = QDateTime::currentDateTime();
dt.setTime(QTime());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeSpec">
<db:title>void QDateTime::setTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>)</db:title>
<db:para>Sets the time specification used in this datetime to <db:code role="parameter">spec</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an effective offset of 0.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;

QDateTime UTC(local);
UTC.setTimeSpec(Qt::UTC);
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;

qDebug() &lt;&lt; &quot;There are&quot; &lt;&lt; local.secsTo(UTC) &lt;&lt; &quot;seconds difference between the datetimes.&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeZone">
<db:title>[since 5.2] void QDateTime::setTimeZone(const QTimeZone &amp;<db:emphasis>toZone</db:emphasis>)</db:title>
<db:para>Sets the time zone used in this datetime to <db:code role="parameter">toZone</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>If <db:code role="parameter">toZone</db:code> is invalid then the datetime will be invalid.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTime_t">
<db:title>void QDateTime::setTime_t(uint <db:emphasis>seconds</db:emphasis>)</db:title>
<db:para>Sets the date and time given the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>). On systems that do not support time zones this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 5.0] void QDateTime::swap(QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this datetime with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="time">
<db:title>QTime QDateTime::time() const</db:title>
<db:para>Returns the time part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeSpec">
<db:title>Qt::TimeSpec QDateTime::timeSpec() const</db:title>
<db:para>Returns the time specification of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZone">
<db:title>[since 5.2] QTimeZone QDateTime::timeZone() const</db:title>
<db:para>Returns the time zone of the datetime.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> then an instance of the current system time zone will be returned. Note however that if you copy this time zone the instance will not remain in sync if the system time zone changes.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZoneAbbreviation">
<db:title>[since 5.2] QString QDateTime::timeZoneAbbreviation() const</db:title>
<db:para>Returns the Time Zone Abbreviation for the datetime.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> this will be &quot;UTC&quot;.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> this will be in the format &quot;UTC[+-]00:00&quot;.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> then the host system is queried for the correct abbreviation.</db:para>
<db:para>Note that abbreviations may or may not be localized.</db:para>
<db:para>Note too that the abbreviation is not guaranteed to be a unique value, i.e. different time zones may have the same abbreviation.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCFDate">
<db:title>[since 5.5] int QDateTime::toCFDate() const</db:title>
<db:para>Creates a CFDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. The caller owns the CFDate object and is responsible for releasing it.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromCFDate">fromCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocalTime">
<db:title>QDateTime QDateTime::toLocalTime() const</db:title>
<db:para>Returns a datetime containing the date and time information in this datetime, but specified using the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> definition.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime UTC(QDateTime::currentDateTimeUtc());
QDateTime local(UTC.toLocalTime());
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; UTC.secsTo(local);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toMSecsSinceEpoch">
<db:title>[since 4.7] qint64 QDateTime::toMSecsSinceEpoch() const</db:title>
<db:para>Returns the datetime as the number of milliseconds that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>).</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSDate">
<db:title>[since 5.5] int *QDateTime::toNSDate() const</db:title>
<db:para>Creates an NSDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. The NSDate object is autoreleased.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromNSDate">fromNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toOffsetFromUtc">
<db:title>[since 5.2] QDateTime QDateTime::toOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>) const</db:title>
<db:para>Returns a copy of this datetime converted to a spec of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> with the given <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>If the <db:code role="parameter">offsetSeconds</db:code> equals 0 then a UTC datetime will be returned</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QDateTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:para>Returns the datetime as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string.</db:para>
<db:para>These expressions may be used for the date:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>d</db:para>
</db:td>
<db:td>
<db:para>the day as number without a leading zero (1 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dd</db:para>
</db:td>
<db:td>
<db:para>the day as number with a leading zero (01 to 31)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized day name (e.g. 'Mon' to 'Sun'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>dddd</db:para>
</db:td>
<db:td>
<db:para>the long localized day name (e.g. 'Monday' to '<db:link xlink:href="qt.xml#DayOfWeek-enum">Qt::Sunday</db:link>'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>M</db:para>
</db:td>
<db:td>
<db:para>the month as number without a leading zero (1-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MM</db:para>
</db:td>
<db:td>
<db:para>the month as number with a leading zero (01-12)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMM</db:para>
</db:td>
<db:td>
<db:para>the abbreviated localized month name (e.g. 'Jan' to 'Dec'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>MMMM</db:para>
</db:td>
<db:td>
<db:para>the long localized month name (e.g. 'January' to 'December'). Uses the system locale to localize the name, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yy</db:para>
</db:td>
<db:td>
<db:para>the year as two digit number (00-99)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>yyyy</db:para>
</db:td>
<db:td>
<db:para>the year as four digit number</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>These expressions may be used for the time:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Expression</db:para>
</db:th>
<db:th>
<db:para>Output</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>h</db:para>
</db:td>
<db:td>
<db:para>the hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh</db:para>
</db:td>
<db:td>
<db:para>the hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>H</db:para>
</db:td>
<db:td>
<db:para>the hour without a leading zero (0 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>HH</db:para>
</db:td>
<db:td>
<db:para>the hour with a leading zero (00 to 23, even with AM/PM display)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>m</db:para>
</db:td>
<db:td>
<db:para>the minute without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mm</db:para>
</db:td>
<db:td>
<db:para>the minute with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>s</db:para>
</db:td>
<db:td>
<db:para>the second without a leading zero (0 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ss</db:para>
</db:td>
<db:td>
<db:para>the second with a leading zero (00 to 59)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>z</db:para>
</db:td>
<db:td>
<db:para>the milliseconds without leading zeroes (0 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>zzz</db:para>
</db:td>
<db:td>
<db:para>the milliseconds with leading zeroes (000 to 999)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AP or A</db:para>
</db:td>
<db:td>
<db:para>use AM/PM display. <db:emphasis>A/AP</db:emphasis> will be replaced by either &quot;AM&quot; or &quot;PM&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ap or a</db:para>
</db:td>
<db:td>
<db:para>use am/pm display. <db:emphasis>a/ap</db:emphasis> will be replaced by either &quot;am&quot; or &quot;pm&quot;.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>t</db:para>
</db:td>
<db:td>
<db:para>the timezone (for example &quot;CEST&quot;)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All other input characters will be ignored. Any sequence of characters that are enclosed in single quotes will be treated as text and not be used as an expression. Two consecutive single quotes (&quot;''&quot;) are replaced by a singlequote in the output. Formats without separators (e.g. &quot;HHmm&quot;) are currently not supported.</db:para>
<db:para>Example format strings (assumed that the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is 21 May 2001 14:13:09):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>21.05.2001</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Tue May 21 01</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.zzz</db:para>
</db:td>
<db:td>
<db:para>14:13:09.042</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>h:m:s ap</db:para>
</db:td>
<db:td>
<db:para>2:13:9 pm</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QDateTime::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the datetime as a string in the <db:code role="parameter">format</db:code> given.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. <db:link xlink:href="qdate.xml#shortDayName">QDate::shortDayName</db:link>(), <db:link xlink:href="qdate.xml#shortMonthName">QDate::shortMonthName</db:link>(), and <db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>() are used to generate the string, so the day and month names will be localized names using the system locale, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>(). An example of this formatting is &quot;Wed May 20 03:40:13 1998&quot;.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form YYYY-MM-DDTHH:mm:ss[Z|[+|-]HH:mm], depending on the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() of the <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, Z will be appended to the string; if the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, the offset in hours and minutes from UTC will be appended to the string.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link> or <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link>, the string format depends on the locale settings of the system. Identical to calling <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdatetime.xml#toString">toString</db:link>(datetime, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::ShortFormat</db:link>) or <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdatetime.xml#toString">toString</db:link>(datetime, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::LongFormat</db:link>).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link> or <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link>, the string format depends on the default application locale. This is the locale set with <db:link xlink:href="qlocale.xml#setDefault">QLocale::setDefault</db:link>(), or the system locale if no default locale has been set. Identical to calling QLocale().<db:link xlink:href="qdatetime.xml#toString">toString</db:link>(datetime, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::ShortFormat</db:link>) or QLocale().<db:link xlink:href="qdatetime.xml#toString">toString</db:link>(datetime, <db:link xlink:href="qlocale.xml#FormatType-enum">QLocale::LongFormat</db:link>).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted following <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</db:link>.</db:para>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999. This restriction may apply to locale-aware formats as well, depending on the locale settings.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTimeSpec">
<db:title>QDateTime QDateTime::toTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>) const</db:title>
<db:para>Returns a copy of this datetime converted to the given time <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>. To set to a spec of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> use <db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>().</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the local Time Zone.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toTimeSpec(Qt::UTC));
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toUTC">toUTC</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toLocalTime">toLocalTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTimeZone">
<db:title>[since 5.2] QDateTime QDateTime::toTimeZone(const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>) const</db:title>
<db:para>Returns a copy of this datetime converted to the given <db:code role="parameter">timeZone</db:code></db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTime_t">
<db:title>uint QDateTime::toTime_t() const</db:title>
<db:para>Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>).</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:note>
<db:para>This function returns a 32-bit unsigned integer, so it does not support dates before 1970, but it does support dates after 2038-01-19T03:14:06, which may not be valid time_t values. Be careful when passing those time_t values to system functions, which could interpret them as negative dates.</db:para>
</db:note>
<db:para>If the date is outside the range 1970-01-01T00:00:00 to 2106-02-07T06:28:14, this function returns -1 cast to an unsigned integer (i.e., 0xFFFFFFFF).</db:para>
<db:para>To get an extended range, use <db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUTC">
<db:title>QDateTime QDateTime::toUTC() const</db:title>
<db:para>Returns a datetime containing the date and time information in this datetime, but specified using the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> definition.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toUTC());
qDebug() &lt;&lt; &quot;Local time is:&quot; &lt;&lt; local;
qDebug() &lt;&lt; &quot;UTC time is:&quot; &lt;&lt; UTC;
qDebug() &lt;&lt; &quot;No difference between times:&quot; &lt;&lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDateTime::operator!=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is different from the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Two datetimes are different if either the date, the time, or the time zone components are different.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QDateTime::operator&lt;(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is earlier than the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool QDateTime::operator&lt;=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is earlier than or equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDateTime &amp;QDateTime::operator=(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Makes a copy of the <db:code role="parameter">other</db:code> datetime and returns a reference to the copy.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDateTime::operator==(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QDateTime::operator&gt;(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is later than the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool QDateTime::operator&gt;=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this datetime is later than or equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">dateTime</db:code> to the <db:code role="parameter">out</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:para>Reads a datetime from the stream <db:code role="parameter">in</db:code> into <db:code role="parameter">dateTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
