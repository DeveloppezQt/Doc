<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDateTime Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatetime.xml">QDateTime</db:link> class provides date and time functions.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDateTime</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDateTime is part of <db:simplelist><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object encodes a calendar date and a clock time (a &quot;datetime&quot;). It combines features of the <db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qtime.xml">QTime</db:link> classes. It can read the current datetime from the system clock. It provides functions for comparing datetimes and for manipulating a datetime by adding a number of seconds, days, months, or years.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> can describe datetimes with respect to <db:link xlink:href="qt.xml#TimeSpec-enum">local time</db:link>, to <db:link xlink:href="qt.xml#TimeSpec-enum">UTC</db:link>, to a specified <db:link xlink:href="qt.xml#TimeSpec-enum">offset from UTC</db:link> or to a specified <db:link xlink:href="qt.xml#TimeSpec-enum">time zone</db:link>, in conjunction with the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> class. For example, a time zone of &quot;Europe/Berlin&quot; will apply the daylight-saving rules as used in Germany since 1970. In contrast, an offset from UTC of +3600 seconds is one hour ahead of UTC (usually written in ISO standard notation as &quot;UTC+01:00&quot;), with no daylight-saving offset or changes. When using either local time or a specified time zone, time-zone transitions such as the starts and ends of daylight-saving time (DST; but see below) are taken into account. The choice of system used to represent a datetime is described as its &quot;timespec&quot;.</db:para>
<db:para>A <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object is typically created either by giving a date and time explicitly in the constructor, or by using a static function such as <db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>() or <db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>(). The date and time can be changed with <db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>() and <db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>(). A datetime can also be set using the <db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>() function that takes the time, in milliseconds, since 00:00:00 on January 1, 1970. The <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() function returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, given a string and a date format used to interpret the date within the string.</db:para>
<db:para><db:link xlink:href="qdatetime.xml#currentDateTime">QDateTime::currentDateTime</db:link>() returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that expresses the current time with respect to local time. <db:link xlink:href="qdatetime.xml#currentDateTimeUtc">QDateTime::currentDateTimeUtc</db:link>() returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that expresses the current time with respect to UTC.</db:para>
<db:para>The <db:link xlink:href="qdatetime.xml#date">date</db:link>() and <db:link xlink:href="qdatetime.xml#time">time</db:link>() functions provide access to the date and time parts of the datetime. The same information is provided in textual format by the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() function.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> provides a full set of operators to compare two <db:link xlink:href="qdatetime.xml">QDateTime</db:link> objects, where smaller means earlier and larger means later.</db:para>
<db:para>You can increment (or decrement) a datetime by a given number of milliseconds using <db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>(), seconds using <db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>(), or days using <db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>(). Similarly, you can use <db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>() and <db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>(). The <db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>() function returns the number of days between two datetimes, <db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>() returns the number of seconds between two datetimes, and <db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>() returns the number of milliseconds between two datetimes. These operations are aware of daylight-saving time (DST) and other time-zone transitions, where applicable.</db:para>
<db:para>Use <db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>() to express a datetime in local time or UTC, <db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>() to express in terms of an offset from UTC, or <db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>() to express it with respect to a general time zone. You can use <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to find out what time-spec a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object stores its time relative to. When that is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, you can use <db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>() to find out which zone it is using.</db:para>
<db:note>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> does not account for leap seconds.</db:para>
</db:note>
<db:section xml:id="remarks">
<db:title>Remarks</db:title>
<db:section xml:id="no-year-0">
<db:title>No Year 0</db:title>
<db:para>There is no year 0. Dates in that year are considered invalid. The year -1 is the year &quot;1 before Christ&quot; or &quot;1 before current era.&quot; The day before 1 January 1 CE is 31 December 1 BCE.</db:para>
</db:section>
<db:section xml:id="range-of-valid-dates">
<db:title>Range of Valid Dates</db:title>
<db:para>The range of values that <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can represent is dependent on the internal storage implementation. <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is currently stored in a qint64 as a serial msecs value encoding the date and time. This restricts the date range to about +/- 292 million years, compared to the <db:link xlink:href="qdate.xml">QDate</db:link> range of +/- 2 billion years. Care must be taken when creating a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> with extreme values that you do not overflow the storage. The exact range of supported values varies depending on the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> and time zone.</db:para>
</db:section>
<db:section xml:id="use-of-timezones">
<db:title>Use of Timezones</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> uses the system's time zone information to determine the current local time zone and its offset from UTC. If the system is not configured correctly or not up-to-date, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> will give wrong results.</db:para>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> likewise uses system-provided information to determine the offsets of other timezones from UTC. If this information is incomplete or out of date, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> will give wrong results. See the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> documentation for more details.</db:para>
<db:para>On modern Unix systems, this means <db:link xlink:href="qdatetime.xml">QDateTime</db:link> usually has accurate information about historical transitions (including DST, see below) whenever possible. On Windows, where the system doesn't support historical timezone data, historical accuracy is not maintained with respect to timezone transitions, notably including DST.</db:para>
</db:section>
<db:section xml:id="daylight-saving-time-dst">
<db:title>Daylight-Saving Time (DST)</db:title>
<db:para><db:link xlink:href="qdatetime.xml">QDateTime</db:link> takes into account transitions between Standard Time and Daylight-Saving Time. For example, if the transition is at 2am and the clock goes forward to 3am, then there is a &quot;missing&quot; hour from 02:00:00 to 02:59:59.999 which <db:link xlink:href="qdatetime.xml">QDateTime</db:link> considers to be invalid. Any date arithmetic performed will take this missing hour into account and return a valid result. For example, adding one minute to 01:59:59 will get 03:00:00.</db:para>
<db:para>The range of valid dates taking DST into account is 1970-01-01 to the present, and rules are in place for handling DST correctly until 2037-12-31, but these could change. For dates after 2037, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> makes a <db:emphasis>best guess</db:emphasis> using the rules for year 2037, but we can't guarantee accuracy; indeed, for <db:emphasis>any</db:emphasis> future date, the time-zone may change its rules before that date comes around. For dates before 1970, <db:link xlink:href="qdatetime.xml">QDateTime</db:link> doesn't take DST changes into account, even if the system's time zone database provides that information, although it does take into account changes to the time-zone's standard offset, where this information is available.</db:para>
</db:section>
<db:section xml:id="offsets-from-utc">
<db:title>Offsets From UTC</db:title>
<db:para>There is no explicit size restriction on an offset from UTC, but there is an implicit limit imposed when using the <db:link xlink:href="qdatetime.xml#toString">toString</db:link>() and <db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>() methods which use a [+|-]hh:mm format, effectively limiting the range to +/- 99 hours and 59 minutes and whole minutes only. Note that currently no time zone lies outside the range of +/- 14 hours.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
<db:member><db:link xlink:href="qtime.xml">QTime</db:link></db:member>
<db:member><db:link xlink:href="qdatetimeedit.xml">QDateTimeEdit</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="YearRange-enum">
<db:title>[since 5.14] enum QDateTime::YearRange</db:title>
<db:enumsynopsis>
<db:enumname>YearRange</db:enumname>
<db:enumitem>
<db:enumidentifier>First</db:enumidentifier>
<db:enumvalue>-292275056</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Last</db:enumidentifier>
<db:enumvalue>+292278994</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enumerated type describes the range of years (in the Gregorian calendar) representable by <db:link xlink:href="qdatetime.xml">QDateTime</db:link>:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">YearRange</db:emphasis>::First</db:code></db:para>
</db:td>
<db:td><db:code>-292275056</db:code></db:td>
<db:td>
<db:para>The later parts of this year are representable</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:emphasis>::<db:emphasis role="bold">YearRange</db:emphasis>::Last</db:code></db:para>
</db:td>
<db:td><db:code>+292278994</db:code></db:td>
<db:td>
<db:para>The earlier parts of this year are representable</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>All dates strictly between these two years are also representable. Note, however, that the Gregorian Calendar has no year zero.</db:para>
<db:note>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> can describe dates in a wider range of years. For most purposes, this makes little difference, as the range of years that <db:link xlink:href="qdatetime.xml">QDateTime</db:link> can support reaches 292 million years either side of 1970.</db:para>
</db:note>
<db:para>This enum was introduced or modified in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml">QDate</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="toString-3">
<db:title>QString QDateTime::toString(QStringView <db:emphasis>format</db:emphasis>) const</db:title>
<db:bridgehead renderas="sect2" xml:id="toString-4">QString QDateTime::toString(QStringView <db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="toString">QString QDateTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>) const</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="toString-2">QString QDateTime::toString(const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>) const</db:bridgehead>
<db:para>Returns the datetime as a string. The <db:code role="parameter">format</db:code> parameter determines the format of the result string. If <db:code role="parameter">cal</db:code> is supplied, it determines the calendar used to represent the date; it defaults to Gregorian. See <db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>() and <db:link xlink:href="qdate.xml#toString-1">QDate::toString</db:link>() for the supported specifiers for time and date, respectively.</db:para>
<db:para>Any sequence of characters enclosed in single quotes will be included verbatim in the output string (stripped of the quotes), even if it contains formatting characters. Two consecutive single quotes (&quot;''&quot;) are replaced by a single quote in the output. All other characters in the format string are included verbatim in the output string.</db:para>
<db:para>Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with care, as the resulting strings aren't always reliably readable (e.g. if &quot;dM&quot; produces &quot;212&quot; it could mean either the 2nd of December or the 21st of February).</db:para>
<db:para>Example format strings (assumed that the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is 21 May 2001 14:13:09.120):</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Format</db:para>
</db:th>
<db:th>
<db:para>Result</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>dd.MM.yyyy</db:para>
</db:td>
<db:td>
<db:para>21.05.2001</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ddd MMMM d yy</db:para>
</db:td>
<db:td>
<db:para>Tue May 21 01</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.zzz</db:para>
</db:td>
<db:td>
<db:para>14:13:09.120</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>hh:mm:ss.z</db:para>
</db:td>
<db:td>
<db:para>14:13:09.12</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>h:m:s ap</db:para>
</db:td>
<db:td>
<db:para>2:13:9 pm</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:note>
<db:para>If localized month and day names are desired, please switch to using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().<db:link xlink:href="qdatetime.xml#toString">toString</db:link>() as <db:link xlink:href="qdatetime.xml">QDateTime</db:link> methods shall change to use English (C locale) names at Qt 6.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString-1">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime">
<db:title>QDateTime::QDateTime()</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null datetime (i.e. null date and null time). A null datetime is invalid, since the date is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime-1">
<db:title>QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>const QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(const QDate &amp;date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code>, using <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> as the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() and the time at the start of that date.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#startOfDay">QDate::startOfDay</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QDateTime-2">
<db:title>QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis> = Qt::LocalTime)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>const QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
<db:initializer>Qt::LocalTime</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(const QDate &amp;date, const QTime &amp;time, Qt::TimeSpec spec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time specification defined by <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then it will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> datetime use the correct constructor.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetime use the correct constructor.</db:para>
</db:section>
<db:section xml:id="QDateTime-3">
<db:title>[since 5.2] QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>const QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(const QDate &amp;date, const QTime &amp;time, Qt::TimeSpec spec, int offsetSeconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the time specification defined by <db:code role="parameter">spec</db:code> and <db:code role="parameter">offsetSeconds</db:code> seconds.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to midnight.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then <db:code role="parameter">offsetSeconds</db:code> will be ignored.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone. To create a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> datetime use the correct constructor.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="QDateTime-4">
<db:title>[since 5.2] QDateTime::QDateTime(const QDate &amp;<db:emphasis>date</db:emphasis>, const QTime &amp;<db:emphasis>time</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>const QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>timeZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(const QDate &amp;date, const QTime &amp;time, const QTimeZone &amp;timeZone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a datetime with the given <db:code role="parameter">date</db:code> and <db:code role="parameter">time</db:code>, using the Time Zone specified by <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>If <db:code role="parameter">date</db:code> is valid and <db:code role="parameter">time</db:code> is not, the time will be set to 00:00:00.</db:para>
<db:para>If <db:code role="parameter">timeZone</db:code> is invalid then the datetime will be invalid.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="QDateTime-5">
<db:title>QDateTime::QDateTime(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(const QDateTime &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of the <db:code role="parameter">other</db:code> datetime.</db:para>
</db:section>
<db:section xml:id="QDateTime-6">
<db:title>[since 5.8] QDateTime::QDateTime(QDateTime &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDateTime</db:methodname>
<db:methodparam>
<db:type>QDateTime &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime(QDateTime &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Moves the content of the temporary <db:code role="parameter">other</db:code> datetime to this object and leaves <db:code role="parameter">other</db:code> in an unspecified (but proper) state.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="dtor.QDateTime">
<db:title>QDateTime::~QDateTime()</db:title>
<db:destructorsynopsis>
<db:methodname>~QDateTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDateTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the datetime.</db:para>
</db:section>
<db:section xml:id="addDays">
<db:title>QDateTime QDateTime::addDays(qint64 <db:emphasis>ndays</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>addDays</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>ndays</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime addDays(qint64 ndays) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">ndays</db:code> days later than the datetime of this object (or earlier if <db:code role="parameter">ndays</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMSecs">
<db:title>QDateTime QDateTime::addMSecs(qint64 <db:emphasis>msecs</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>addMSecs</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime addMSecs(qint64 msecs) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">msecs</db:code> miliseconds later than the datetime of this object (or earlier if <db:code role="parameter">msecs</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMonths">
<db:title>QDateTime QDateTime::addMonths(int <db:emphasis>nmonths</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>addMonths</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nmonths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime addMonths(int nmonths) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nmonths</db:code> months later than the datetime of this object (or earlier if <db:code role="parameter">nmonths</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSecs">
<db:title>QDateTime QDateTime::addSecs(qint64 <db:emphasis>s</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>addSecs</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime addSecs(qint64 s) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">s</db:code> seconds later than the datetime of this object (or earlier if <db:code role="parameter">s</db:code> is negative).</db:para>
<db:para>If this datetime is invalid, an invalid datetime will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addYears">addYears</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addYears">
<db:title>QDateTime QDateTime::addYears(int <db:emphasis>nyears</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>addYears</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>nyears</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime addYears(int nyears) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> object containing a datetime <db:code role="parameter">nyears</db:code> years later than the datetime of this object (or earlier if <db:code role="parameter">nyears</db:code> is negative).</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> and the resulting date and time fall in the Standard Time to Daylight-Saving Time transition hour then the result will be adjusted accordingly, i.e. if the transition is at 2am and the clock goes forward to 3am and the result falls between 2am and 3am then the result will be adjusted to fall after 3am.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addMonths">addMonths</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTime">
<db:title>[static] QDateTime QDateTime::currentDateTime()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>currentDateTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime currentDateTime()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current datetime, as reported by the system clock, in the local time zone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentDateTimeUtc">
<db:title>[static, since 4.7] QDateTime QDateTime::currentDateTimeUtc()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>currentDateTimeUtc</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime currentDateTimeUtc()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current datetime, as reported by the system clock, in UTC.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#currentDate">QDate::currentDate</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#currentTime">QTime::currentTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentMSecsSinceEpoch">
<db:title>[static, since 4.7] qint64 QDateTime::currentMSecsSinceEpoch()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>qint64</db:type>
<db:methodname>currentMSecsSinceEpoch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 currentMSecsSinceEpoch()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of milliseconds since 1970-01-01T00:00:00 Universal Coordinated Time. This number is like the POSIX time_t variable, but expressed in milliseconds instead.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentDateTime">currentDateTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#currentDateTimeUtc">currentDateTimeUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTime_t" role="deprecated">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentSecsSinceEpoch">
<db:title>[static, since 5.8] qint64 QDateTime::currentSecsSinceEpoch()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>qint64</db:type>
<db:methodname>currentSecsSinceEpoch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 currentSecsSinceEpoch()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of seconds since 1970-01-01T00:00:00 Universal Coordinated Time.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#currentMSecsSinceEpoch">currentMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="date">
<db:title>QDate QDateTime::date() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDate</db:type>
<db:methodname>date</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDate date() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the date part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="daysTo">
<db:title>qint64 QDateTime::daysTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>daysTo</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 daysTo(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of days from this datetime to the <db:code role="parameter">other</db:code> datetime. The number of days is counted as the number of times midnight is reached between this datetime to the <db:code role="parameter">other</db:code> datetime. This means that a 10 minute difference from 23:55 to 0:05 the next day counts as one day.</db:para>
<db:para>If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime startDate(QDate(2012, 7, 6), QTime(8, 30, 0));
QDateTime endDate(QDate(2012, 7, 7), QTime(16, 30, 0));
qDebug() &amp;lt;&amp;lt; &quot;Days from startDate to endDate: &quot; &amp;lt;&amp;lt; startDate.daysTo(endDate);

startDate = QDateTime(QDate(2012, 7, 6), QTime(23, 55, 0));
endDate = QDateTime(QDate(2012, 7, 7), QTime(0, 5, 0));
qDebug() &amp;lt;&amp;lt; &quot;Days from startDate to endDate: &quot; &amp;lt;&amp;lt; startDate.daysTo(endDate);

qSwap(startDate, endDate); // Make endDate before startDate.
qDebug() &amp;lt;&amp;lt; &quot;Days from startDate to endDate: &quot; &amp;lt;&amp;lt; startDate.daysTo(endDate);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addDays">addDays</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#secsTo">secsTo</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#msecsTo">msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromCFDate">
<db:title>[static, since 5.5] QDateTime QDateTime::fromCFDate(CFDateRef <db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromCFDate</db:methodname>
<db:methodparam>
<db:type>CFDateRef</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromCFDate(CFDateRef date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the CFDate <db:code role="parameter">date</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toCFDate">toCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch">
<db:title>[static, since 4.7] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromMSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromMSecsSinceEpoch(qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime whose date and time are the number of milliseconds, <db:code role="parameter">msecs</db:code>, that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>), and converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>. On systems that do not support time zones, the time will be set as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-1">
<db:title>[static, since 5.2] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromMSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromMSecsSinceEpoch(qint64 msecs, Qt::TimeSpec spec, int offsetSeconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime whose date and time are the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to the given <db:code role="parameter">spec</db:code>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">msecs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromMSecsSinceEpoch-2">
<db:title>[static, since 5.2] QDateTime QDateTime::fromMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromMSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>timeZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromMSecsSinceEpoch(qint64 msecs, const QTimeZone &amp;timeZone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime whose date and time are the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and with the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNSDate">
<db:title>[static, since 5.5] QDateTime QDateTime::fromNSDate(const NSDate *<db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromNSDate</db:methodname>
<db:methodparam>
<db:type>const NSDate *</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromNSDate(const NSDate *date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a new <db:link xlink:href="qdatetime.xml">QDateTime</db:link> containing a copy of the NSDate <db:code role="parameter">date</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toNSDate">toNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSecsSinceEpoch">
<db:title>[static, since 5.8] QDateTime QDateTime::fromSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis> = Qt::LocalTime, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>secs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
<db:initializer>Qt::LocalTime</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromSecsSinceEpoch(qint64 secs, Qt::TimeSpec spec, int offsetSeconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime whose date and time are the number of seconds <db:code role="parameter">secs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to the given <db:code role="parameter">spec</db:code>.</db:para>
<db:para>Note that there are possible values for <db:code role="parameter">secs</db:code> that lie outside the valid range of <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, both negative and positive. The behavior of this function is undefined for those values.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromSecsSinceEpoch-1">
<db:title>[static, since 5.8] QDateTime QDateTime::fromSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>secs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>timeZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromSecsSinceEpoch(qint64 secs, const QTimeZone &amp;timeZone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime whose date and time are the number of seconds <db:code role="parameter">secs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and with the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromMSecsSinceEpoch">fromMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromString(const QString &amp;string, Qt::DateFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if this is not possible.</db:para>
<db:para>Note for <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>: It is recommended that you use the English short month names (e.g. &quot;Jan&quot;). Although localized month names can also be used in Qt 5, they depend on the user's locale settings.</db:para>
<db:note>
<db:para>Support for localized dates, including the format options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::LocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link>, and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link>, shall be removed in Qt 6. Use <db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>() instead.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromString-2">
<db:title>[static] QDateTime QDateTime::fromString(const QString &amp;<db:emphasis>string</db:emphasis>, const QString &amp;<db:emphasis>format</db:emphasis>, QCalendar <db:emphasis>cal</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>string</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QCalendar</db:type>
<db:parameter>cal</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromString(const QString &amp;string, const QString &amp;format, QCalendar cal)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdatetime.xml">QDateTime</db:link> represented by the <db:code role="parameter">string</db:code>, using the <db:code role="parameter">format</db:code> given, or an invalid datetime if the string cannot be parsed.</db:para>
<db:para>Uses the calendar <db:code role="parameter">cal</db:code> if supplied, else Gregorian.</db:para>
<db:para>See <db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>() and <db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>() for the expressions recognized in the format string to represent parts of the date and time. All other input characters will be treated as text. Any non-empty sequence of characters enclosed in single quotes will also be treated (stripped of the quotes) as text and not be interpreted as expressions.</db:para>
<db:programlisting language="cpp">QTime time1 = QTime::fromString(&quot;131&quot;, &quot;HHh&quot;);
// time1 is 13:00:00
QTime time1 = QTime::fromString(&quot;1apA&quot;, &quot;1amAM&quot;);
// time1 is 01:00:00

QDateTime dateTime2 = QDateTime::fromString(&quot;M1d1y9800:01:02&quot;,
                                            &quot;'M'M'd'd'y'yyhh:mm:ss&quot;);
// dateTime is 1 January 1998 00:01:02
</db:programlisting>
<db:para>If the format is not satisfied, an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is returned. The expressions that don't have leading zeroes (d, M, h, m, s, z) will be greedy. This means that they will use two digits even if this will put them outside the range and/or leave too few digits for other sections.</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;130&quot;, &quot;Mm&quot;); // invalid
</db:programlisting>
<db:para>This could have meant 1 January 00:30.00 but the M will grab two digits.</db:para>
<db:para>Incorrectly specified fields of the <db:code role="parameter">string</db:code> will cause an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> to be returned. For example, consider the following code, where the two digit year 12 is read as 1912 (see the table below for all field defaults); the resulting datetime is invalid because 23 April 1912 was a Tuesday, not a Monday:</db:para>
<db:programlisting language="cpp">QString string = &quot;Monday, 23 April 12 22:51:41&quot;;
QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;
QDateTime invalid = QDateTime::fromString(string, format);
</db:programlisting>
<db:para>The correct code is:</db:para>
<db:programlisting language="cpp">QString string = &quot;Tuesday, 23 April 12 22:51:41&quot;;
QString format = &quot;dddd, d MMMM yy hh:mm:ss&quot;;
QDateTime valid = QDateTime::fromString(string, format);
</db:programlisting>
<db:para>For any field that is not represented in the format, the following defaults are used:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Field</db:para>
</db:th>
<db:th>
<db:para>Default value</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Year</db:para>
</db:td>
<db:td>
<db:para>1900</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Month</db:para>
</db:td>
<db:td>
<db:para>1 (January)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Day</db:para>
</db:td>
<db:td>
<db:para>1</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Hour</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Minute</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Second</db:para>
</db:td>
<db:td>
<db:para>0</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For example:</db:para>
<db:programlisting language="cpp">QDateTime dateTime = QDateTime::fromString(&quot;1.30.1&quot;, &quot;M.d.s&quot;);
// dateTime is January 30 in 1900 at 00:00:01.
dateTime = QDateTime::fromString(&quot;12&quot;, &quot;yy&quot;);
// dateTime is January 1 in 1912 at 00:00:00.
</db:programlisting>
<db:note>
<db:para>If localized month and day names are used, please switch to using <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>().toDateTime() as <db:link xlink:href="qdatetime.xml">QDateTime</db:link> methods shall change to only recognize English (C locale) names at Qt 6.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toString">toString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#fromString">QTime::fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toDateTime">QLocale::toDateTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDaylightTime">
<db:title>[since 5.2] bool QDateTime::isDaylightTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDaylightTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDaylightTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns if this datetime falls in Daylight-Saving Time.</db:para>
<db:para>If the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then will always return false.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QDateTime::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if both the date and the time are null; otherwise returns false. A null datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdate.xml#isNull">QDate::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isNull">QTime::isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDateTime::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if both the date and the time are valid and they are valid in the current <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link>, otherwise returns false.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the date and time are checked to see if they fall in the Standard Time to Daylight-Saving Time transition hour, i.e. if the transition is at 2am and the clock goes forward to 3am then the time from 02:00:00 to 02:59:59.999 is considered to be invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#YearRange-enum">QDateTime::YearRange</db:link></db:member>
<db:member><db:link xlink:href="qdate.xml#isValid">QDate::isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#isValid">QTime::isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="msecsTo">
<db:title>qint64 QDateTime::msecsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>msecsTo</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 msecsTo(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of milliseconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes and but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addMSecs">addMSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#msecsTo">QTime::msecsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetFromUtc">
<db:title>[since 5.2] int QDateTime::offsetFromUtc() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>offsetFromUtc</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int offsetFromUtc() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this date-time's Offset From UTC in seconds.</db:para>
<db:para>The result depends on <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>():</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Qt::UTC The offset is 0.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::OffsetFromUTC The offset is the value originally set.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::LocalTime The local time's offset from UTC is returned.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::TimeZone The offset used by the time-zone is returned.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For the last two, the offset at this date and time will be returned, taking account of Daylight-Saving Offset unless the date precedes the start of 1970. The offset is the difference between the local time or time in the given time-zone and UTC time; it is positive in time-zones ahead of UTC (East of The Prime Meridian), negative for those behind UTC (West of The Prime Meridian).</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="secsTo">
<db:title>qint64 QDateTime::secsTo(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>secsTo</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 secsTo(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of seconds from this datetime to the <db:code role="parameter">other</db:code> datetime. If the <db:code role="parameter">other</db:code> datetime is earlier than this datetime, the value returned is negative.</db:para>
<db:para>Before performing the comparison, the two datetimes are converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> to ensure that the result is correct if daylight-saving (DST) applies to one of the two datetimes but not the other.</db:para>
<db:para>Returns 0 if either datetime is invalid.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime now = QDateTime::currentDateTime();
QDateTime xmas(QDate(now.date().year(), 12, 25).startOfDay());
qDebug(&quot;There are %d seconds to Christmas&quot;, now.secsTo(xmas));
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#addSecs">addSecs</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#daysTo">daysTo</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#secsTo">QTime::secsTo</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDate">
<db:title>void QDateTime::setDate(const QDate &amp;<db:emphasis>date</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDate</db:methodname>
<db:methodparam>
<db:type>const QDate &amp;</db:type>
<db:parameter>date</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDate(const QDate &amp;date)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the date part of this datetime to <db:code role="parameter">date</db:code>. If no time is set yet, it is set to midnight. If <db:code role="parameter">date</db:code> is invalid, this <db:link xlink:href="qdatetime.xml">QDateTime</db:link> becomes invalid.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMSecsSinceEpoch">
<db:title>[since 4.7] void QDateTime::setMSecsSinceEpoch(qint64 <db:emphasis>msecs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>msecs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMSecsSinceEpoch(qint64 msecs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the date and time given the number of milliseconds <db:code role="parameter">msecs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>). On systems that do not support time zones this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>Note that passing the minimum of qint64 (std::numeric_limits&lt;qint64&gt;::min()) to <db:code role="parameter">msecs</db:code> will result in undefined behavior.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffsetFromUtc">
<db:title>[since 5.2] void QDateTime::setOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOffsetFromUtc</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOffsetFromUtc(int offsetSeconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the offset to <db:code role="parameter">offsetSeconds</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>The maximum and minimum offset is 14 positive or negative hours. If <db:code role="parameter">offsetSeconds</db:code> is larger or smaller than that, then the result is undefined.</db:para>
<db:para>If <db:code role="parameter">offsetSeconds</db:code> is 0 then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSecsSinceEpoch">
<db:title>[since 5.8] void QDateTime::setSecsSinceEpoch(qint64 <db:emphasis>secs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSecsSinceEpoch</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>secs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSecsSinceEpoch(qint64 secs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the date and time given the number of seconds <db:code role="parameter">secs</db:code> that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>). On systems that do not support time zones this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTime">
<db:title>void QDateTime::setTime(const QTime &amp;<db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTime</db:methodname>
<db:methodparam>
<db:type>const QTime &amp;</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTime(const QTime &amp;time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the time part of this datetime to <db:code role="parameter">time</db:code>. If <db:code role="parameter">time</db:code> is not valid, this function sets it to midnight. Therefore, it's possible to clear any set time in a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> by setting it to a default <db:link xlink:href="qtime.xml">QTime</db:link>:</db:para>
<db:programlisting language="cpp">QDateTime dt = QDateTime::currentDateTime();
dt.setTime(QTime());
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeSpec">
<db:title>void QDateTime::setTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimeSpec</db:methodname>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimeSpec(Qt::TimeSpec spec)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the time specification used in this datetime to <db:code role="parameter">spec</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an effective offset of 0.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the current system time zone.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
qDebug() &amp;lt;&amp;lt; &quot;Local time is:&quot; &amp;lt;&amp;lt; local;

QDateTime UTC(local);
UTC.setTimeSpec(Qt::UTC);
qDebug() &amp;lt;&amp;lt; &quot;UTC time is:&quot; &amp;lt;&amp;lt; UTC;

qDebug() &amp;lt;&amp;lt; &quot;There are&quot; &amp;lt;&amp;lt; local.secsTo(UTC) &amp;lt;&amp;lt; &quot;seconds difference between the datetimes.&quot;;
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setDate">setDate</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTimeZone">
<db:title>[since 5.2] void QDateTime::setTimeZone(const QTimeZone &amp;<db:emphasis>toZone</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTimeZone</db:methodname>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>toZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTimeZone(const QTimeZone &amp;toZone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the time zone used in this datetime to <db:code role="parameter">toZone</db:code>. The datetime will refer to a different point in time.</db:para>
<db:para>If <db:code role="parameter">toZone</db:code> is invalid then the datetime will be invalid.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QDateTime::swap(QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QDateTime &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this datetime with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="time">
<db:title>QTime QDateTime::time() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTime</db:type>
<db:methodname>time</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTime time() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time part of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTime">setTime</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeSpec">
<db:title>Qt::TimeSpec QDateTime::timeSpec() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::TimeSpec</db:type>
<db:methodname>timeSpec</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::TimeSpec timeSpec() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time specification of the datetime.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeSpec">setTimeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#date">date</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#time">time</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZone">
<db:title>[since 5.2] QTimeZone QDateTime::timeZone() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTimeZone</db:type>
<db:methodname>timeZone</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTimeZone timeZone() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the time zone of the datetime.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> then an instance of the current system time zone will be returned. Note however that if you copy this time zone the instance will not remain in sync if the system time zone changes.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setTimeZone">setTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeZoneAbbreviation">
<db:title>[since 5.2] QString QDateTime::timeZoneAbbreviation() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>timeZoneAbbreviation</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString timeZoneAbbreviation() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the Time Zone Abbreviation for the datetime.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> this will be &quot;UTC&quot;.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> this will be in the format &quot;UTC[+-]00:00&quot;.</db:para>
<db:para>If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> then the host system is queried for the correct abbreviation.</db:para>
<db:para>Note that abbreviations may or may not be localized.</db:para>
<db:para>Note too that the abbreviation is not guaranteed to be a unique value, i.e. different time zones may have the same abbreviation.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCFDate">
<db:title>[since 5.5] CFDateRef QDateTime::toCFDate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>CFDateRef</db:type>
<db:methodname>toCFDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">CFDateRef toCFDate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a CFDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. The caller owns the CFDate object and is responsible for releasing it.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromCFDate">fromCFDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLocalTime">
<db:title>QDateTime QDateTime::toLocalTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>toLocalTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime toLocalTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime containing the date and time information in this datetime, but specified using the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> definition.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime UTC(QDateTime::currentDateTimeUtc());
QDateTime local(UTC.toLocalTime());
qDebug() &amp;lt;&amp;lt; &quot;UTC time is:&quot; &amp;lt;&amp;lt; UTC;
qDebug() &amp;lt;&amp;lt; &quot;Local time is:&quot; &amp;lt;&amp;lt; local;
qDebug() &amp;lt;&amp;lt; &quot;No difference between times:&quot; &amp;lt;&amp;lt; UTC.secsTo(local);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toMSecsSinceEpoch">
<db:title>[since 4.7] qint64 QDateTime::toMSecsSinceEpoch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>toMSecsSinceEpoch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 toMSecsSinceEpoch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the datetime as the number of milliseconds that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>).</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.</db:para>
<db:para>This function was introduced in Qt 4.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">setMSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSDate">
<db:title>[since 5.5] NSDate *QDateTime::toNSDate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>NSDate *</db:type>
<db:methodname>toNSDate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">NSDate * toNSDate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates an NSDate from a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. The NSDate object is autoreleased.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromNSDate">fromNSDate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toOffsetFromUtc">
<db:title>[since 5.2] QDateTime QDateTime::toOffsetFromUtc(int <db:emphasis>offsetSeconds</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>toOffsetFromUtc</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime toOffsetFromUtc(int offsetSeconds) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this datetime converted to a spec of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> with the given <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>If the <db:code role="parameter">offsetSeconds</db:code> equals 0 then a UTC datetime will be returned</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#setOffsetFromUtc">setOffsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toSecsSinceEpoch">
<db:title>[since 5.8] qint64 QDateTime::toSecsSinceEpoch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>toSecsSinceEpoch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 toSecsSinceEpoch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00.000, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>).</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:para>The behavior for this function is undefined if the datetime stored in this object is not valid. However, for all valid dates, this function returns a unique value.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QDateTime::toString(Qt::DateFormat <db:emphasis>format</db:emphasis> = Qt::TextDate) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>Qt::DateFormat</db:type>
<db:parameter>format</db:parameter>
<db:initializer>Qt::TextDate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(Qt::DateFormat format) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the datetime as a string in the <db:code role="parameter">format</db:code> given.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::TextDate</db:link>, the string is formatted in the default way. The day and month names will be localized names using the system locale, i.e. <db:link xlink:href="qlocale.xml#system">QLocale::system</db:link>(). An example of this formatting is &quot;Wed May 20 03:40:13 1998&quot;.</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>, the string format corresponds to the ISO 8601 extended specification for representations of dates and times, taking the form yyyy-MM-ddTHH:mm:ss[Z|[+|-]HH:mm], depending on the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() of the <db:link xlink:href="qdatetime.xml">QDateTime</db:link>. If the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, Z will be appended to the string; if the <db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, the offset in hours and minutes from UTC will be appended to the string. To include milliseconds in the ISO 8601 date, use the <db:code role="parameter">format</db:code> <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODateWithMs</db:link>, which corresponds to yyyy-MM-ddTHH:mm:ss.zzz[Z|[+|-]HH:mm].</db:para>
<db:para>The <db:code role="parameter">format</db:code> options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleShortDate</db:link> and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::SystemLocaleLongDate</db:link> shall be removed in Qt 6. Their use should be replaced with <db:link xlink:href="qlocale.xml#toString">QLocale::system().toString</db:link>(datetime, QLocale::ShortFormat) or <db:link xlink:href="qlocale.xml#toString">QLocale::system().toString</db:link>(datetime, QLocale::LongFormat).</db:para>
<db:para>The <db:code role="parameter">format</db:code> options <db:link xlink:href="qt.xml#DateFormat-enum">Qt::LocaleDate</db:link>, <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleShortDate</db:link> and <db:link xlink:href="qt.xml#DateFormat-enum">Qt::DefaultLocaleLongDate</db:link> shall be removed in Qt 6. Their use should be replaced with <db:link xlink:href="qlocale.xml#toString">QLocale().toString</db:link>(datetime, QLocale::ShortFormat) or <db:link xlink:href="qlocale.xml#toString">QLocale().toString</db:link>(datetime, QLocale::LongFormat).</db:para>
<db:para>If the <db:code role="parameter">format</db:code> is <db:link xlink:href="qt.xml#DateFormat-enum">Qt::RFC2822Date</db:link>, the string is formatted following <db:link xlink:href="http://www.rfc-editor.org/rfc/rfc2822.txt">RFC 2822</db:link>.</db:para>
<db:para>If the datetime is invalid, an empty string will be returned.</db:para>
<db:warning>
<db:para>The <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link> format is only valid for years in the range 0 to 9999.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#fromString">fromString</db:link>()</db:member>
<db:member><db:link xlink:href="qdate.xml#toString-1">QDate::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qtime.xml#toString">QTime::toString</db:link>()</db:member>
<db:member><db:link xlink:href="qlocale.xml#toString">QLocale::toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTimeSpec">
<db:title>QDateTime QDateTime::toTimeSpec(Qt::TimeSpec <db:emphasis>spec</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>toTimeSpec</db:methodname>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime toTimeSpec(Qt::TimeSpec spec) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this datetime converted to the given time <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>. To set to a spec of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> use <db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>().</db:para>
<db:para>If <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> then it is set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>, i.e. the local Time Zone.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toTimeSpec(Qt::UTC));
qDebug() &amp;lt;&amp;lt; &quot;Local time is:&quot; &amp;lt;&amp;lt; local;
qDebug() &amp;lt;&amp;lt; &quot;UTC time is:&quot; &amp;lt;&amp;lt; UTC;
qDebug() &amp;lt;&amp;lt; &quot;No difference between times:&quot; &amp;lt;&amp;lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeSpec">timeSpec</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeZone">toTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toOffsetFromUtc">toOffsetFromUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTimeZone">
<db:title>[since 5.2] QDateTime QDateTime::toTimeZone(const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>toTimeZone</db:methodname>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>timeZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime toTimeZone(const QTimeZone &amp;timeZone) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a copy of this datetime converted to the given <db:code role="parameter">timeZone</db:code></db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#timeZone">timeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUTC">
<db:title>QDateTime QDateTime::toUTC() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>toUTC</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime toUTC() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a datetime containing the date and time information in this datetime, but specified using the <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> definition.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QDateTime local(QDateTime::currentDateTime());
QDateTime UTC(local.toUTC());
qDebug() &amp;lt;&amp;lt; &quot;Local time is:&quot; &amp;lt;&amp;lt; local;
qDebug() &amp;lt;&amp;lt; &quot;UTC time is:&quot; &amp;lt;&amp;lt; UTC;
qDebug() &amp;lt;&amp;lt; &quot;No difference between times:&quot; &amp;lt;&amp;lt; local.secsTo(UTC);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTimeSpec">toTimeSpec</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QDateTime::operator!=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is different from the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
<db:para>Two datetimes are different if either the date, the time, or the time zone components are different. Since 5.14, any invalid datetime is less than all valid datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool QDateTime::operator&lt;(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is earlier than the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool QDateTime::operator&lt;=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is earlier than or equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDateTime &amp;QDateTime::operator=(const QDateTime &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDateTime &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime &amp; operator=(const QDateTime &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes a copy of the <db:code role="parameter">other</db:code> datetime and returns a reference to the copy.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QDateTime::operator==(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
<db:para>Since 5.14, all invalid datetimes are equal to one another and differ from all other datetimes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool QDateTime::operator&gt;(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is later than the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool QDateTime::operator&gt;=(const QDateTime &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QDateTime &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this datetime is later than or equal to the <db:code role="parameter">other</db:code> datetime; otherwise returns false.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-2">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>dateTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QDateTime &amp;dateTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes <db:code role="parameter">dateTime</db:code> to the <db:code role="parameter">out</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QDateTime &amp;<db:emphasis>dateTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDateTime &amp;</db:type>
<db:parameter>dateTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QDateTime &amp;dateTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a datetime from the stream <db:code role="parameter">in</db:code> into <db:code role="parameter">dateTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QDateTime</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qdatetime.xml">QDateTime</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="fromTime_t">
<db:title>[static, since 4.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromTime_t</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromTime_t(uint seconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>. On systems that do not support time zones, the time will be set as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:note>
<db:para>This function is deprecated. Please use <db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>() in new code.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTime_t-1">
<db:title>[static, since 5.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>, Qt::TimeSpec <db:emphasis>spec</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromTime_t</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seconds</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::TimeSpec</db:type>
<db:parameter>spec</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>offsetSeconds</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromTime_t(uint seconds, Qt::TimeSpec spec, int offsetSeconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and converted to the given <db:code role="parameter">spec</db:code>.</db:para>
<db:para>If the <db:code role="parameter">spec</db:code> is not <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then the <db:code role="parameter">offsetSeconds</db:code> will be ignored. If the <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> and the <db:code role="parameter">offsetSeconds</db:code> is 0 then the spec will be set to <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, i.e. an offset of 0 seconds.</db:para>
<db:note>
<db:para>This function is deprecated. Please use <db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>() in new code.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromTime_t-2">
<db:title>[static, since 5.2] QDateTime QDateTime::fromTime_t(uint <db:emphasis>seconds</db:emphasis>, const QTimeZone &amp;<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>fromTime_t</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seconds</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTimeZone &amp;</db:type>
<db:parameter>timeZone</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime fromTime_t(uint seconds, const QTimeZone &amp;timeZone)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a datetime whose date and time are the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>) and with the given <db:code role="parameter">timeZone</db:code>.</db:para>
<db:note>
<db:para>This function is deprecated. Please use <db:link xlink:href="qdatetime.xml#fromSecsSinceEpoch">fromSecsSinceEpoch</db:link>() in new code.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTime_t">
<db:title>void QDateTime::setTime_t(uint <db:emphasis>seconds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTime_t</db:methodname>
<db:methodparam>
<db:type>uint</db:type>
<db:parameter>seconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTime_t(uint seconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Sets the date and time given the number of <db:code role="parameter">seconds</db:code> that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>). On systems that do not support time zones this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:note>
<db:para>This function is deprecated. For new code, use <db:link xlink:href="qdatetime.xml#setSecsSinceEpoch">setSecsSinceEpoch</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toTime_t">toTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toTime_t">
<db:title>uint QDateTime::toTime_t() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>uint</db:type>
<db:methodname>toTime_t</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint toTime_t() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the datetime as the number of seconds that have passed since 1970-01-01T00:00:00, Coordinated Universal Time (<db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>).</db:para>
<db:para>On systems that do not support time zones, this function will behave as if local time were <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>.</db:para>
<db:note>
<db:para>This function returns a 32-bit unsigned integer and is deprecated.</db:para>
</db:note>
<db:para>If the date is outside the range 1970-01-01T00:00:00 to 2106-02-07T06:28:14, this function returns -1 cast to an unsigned integer (i.e., 0xFFFFFFFF).</db:para>
<db:para>To get an extended range, use <db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>() or <db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml#toSecsSinceEpoch">toSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">toMSecsSinceEpoch</db:link>()</db:member>
<db:member><db:link xlink:href="qdatetime.xml#setTime_t">setTime_t</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
