<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Demo - Clocks</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML clock application that demonstrates using a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display data generated by a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> and a <db:link xlink:href="qml-qtquick-springanimation.xml">SpringAnimation</db:link> type to animate images.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquick-demo-clocks-small.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Clocks</db:emphasis> demonstrates using a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display data generated by a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>. The delegate used by the model is specified as a custom QML type that is specified in the Clock.qml file.</db:para>
<db:para>JavaScript methods are used to fetch the current time in several cities in different time zones and QML types are used to display the time on a clock face with animated clock hands.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="displaying-data-generated-by-list-models">
<db:title>Displaying Data Generated by List Models</db:title>
<db:para>In the clocks.qml file, we use a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> type to create the application main window:</db:para>
<db:programlisting language="cpp">Rectangle {
    id: root
    width: 640; height: 320
    color: &quot;#646464&quot;

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> type to display a list of the items provided by a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link> type:</db:para>
<db:programlisting language="cpp">    ListView {
        id: clockview
        anchors.fill: parent
        orientation: ListView.Horizontal
        cacheBuffer: 2000
        snapMode: ListView.SnapOneItem
        highlightRangeMode: ListView.ApplyRange

        delegate: Content.Clock { city: cityName; shift: timeShift }
        model: ListModel {
            ListElement { cityName: &quot;New York&quot;; timeShift: -4 }
            ListElement { cityName: &quot;London&quot;; timeShift: 0 }
            ListElement { cityName: &quot;Oslo&quot;; timeShift: 1 }
            ListElement { cityName: &quot;Mumbai&quot;; timeShift: 5.5 }
            ListElement { cityName: &quot;Tokyo&quot;; timeShift: 9 }
            ListElement { cityName: &quot;Brisbane&quot;; timeShift: 10 }
            ListElement { cityName: &quot;Los Angeles&quot;; timeShift: -8 }
        }
    }

</db:programlisting>
<db:para>List elements are defined like other QML types except that they contain a collection of <db:emphasis>role</db:emphasis> definitions instead of properties. Roles both define how the data is accessed and include the data itself.</db:para>
<db:para>For each list element, we use the <db:code>cityName</db:code> role to specify the name of a city and the <db:code>timeShift</db:code> role to specify a time zone as a positive or negative offset from UTC (coordinated universal time).</db:para>
<db:para>The Clock custom type is used as the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>'s <db:code>delegate</db:code>, defining the visual appearance of list items. To use the Clock type, we add an import statement that imports the folder called <db:code>content</db:code> where the type is located:</db:para>
<db:programlisting language="cpp">import &quot;content&quot; as Content

</db:programlisting>
<db:para>We use an <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> type to display arrows that indicate whether users can flick the view to see more clocks on the left or right:</db:para>
<db:programlisting language="cpp">    Image {
        anchors.left: parent.left
        anchors.bottom: parent.bottom
        anchors.margins: 10
        source: &quot;content/arrow.png&quot;
        rotation: -90
        opacity: clockview.atXBeginning ? 0 : 0.5
        Behavior on opacity { NumberAnimation { duration: 500 } }
    }

    Image {
        anchors.right: parent.right
        anchors.bottom: parent.bottom
        anchors.margins: 10
        source: &quot;content/arrow.png&quot;
        rotation: 90
        opacity: clockview.atXEnd ? 0 : 0.5
        Behavior on opacity { NumberAnimation { duration: 500 } }
    }
}

</db:programlisting>
<db:para>We use the <db:code>opacity</db:code> property to hide the arrows when the list view is located at the beginning or end of the x axis.</db:para>
<db:para>In Clock.qml, we define a <db:code>timeChanged()</db:code> function in which we use methods from the JavaScript <db:code>Date</db:code> object to fetch the current time in UTC and to adjust it to the correct time zone:</db:para>
<db:programlisting language="cpp">    function timeChanged() {
        var date = new Date;
        hours = internationalTime ? date.getUTCHours() + Math.floor(clock.shift) : date.getHours()
        night = ( hours &lt; 7 || hours &gt; 19 )
        minutes = internationalTime ? date.getUTCMinutes() + ((clock.shift % 1) * 60) : date.getMinutes()
        seconds = date.getUTCSeconds();
    }

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> type to update the time at intervals of 100 milliseconds:</db:para>
<db:programlisting language="cpp">    Timer {
        interval: 100; running: true; repeat: true;
        onTriggered: clock.timeChanged()
    }

</db:programlisting>
<db:para>We use <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> types within an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> type to display the time on an analog clock face. Different images are used for daytime and nighttime hours:</db:para>
<db:programlisting language="cpp">    Item {
        anchors.centerIn: parent
        width: 200; height: 240

        Image { id: background; source: &quot;clock.png&quot;; visible: clock.night == false }
        Image { source: &quot;clock-night.png&quot;; visible: clock.night == true }

</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-rotation.xml">Rotation</db:link> transform applied to <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> types provides a way to rotate the clock hands. The <db:code>origin</db:code> property holds the point that stays fixed relative to the parent as the rest of the item rotates. The <db:code>angle</db:code> property determines the angle to rotate the hands in degrees clockwise.</db:para>
<db:programlisting language="cpp">        Image {
            x: 92.5; y: 27
            source: &quot;hour.png&quot;
            transform: Rotation {
                id: hourRotation
                origin.x: 7.5; origin.y: 73;
                angle: (clock.hours * 30) + (clock.minutes * 0.5)
                Behavior on angle {
                    SpringAnimation { spring: 2; damping: 0.2; modulus: 360 }
                }
            }
        }

        Image {
            x: 93.5; y: 17
            source: &quot;minute.png&quot;
            transform: Rotation {
                id: minuteRotation
                origin.x: 6.5; origin.y: 83;
                angle: clock.minutes * 6
                Behavior on angle {
                    SpringAnimation { spring: 2; damping: 0.2; modulus: 360 }
                }
            }
        }

        Image {
            x: 97.5; y: 20
            source: &quot;second.png&quot;
            transform: Rotation {
                id: secondRotation
                origin.x: 2.5; origin.y: 80;
                angle: clock.seconds * 6
                Behavior on angle {
                    SpringAnimation { spring: 2; damping: 0.2; modulus: 360 }
                }
            }
        }

        Image {
            anchors.centerIn: background; source: &quot;center.png&quot;
        }

</db:programlisting>
<db:para>We use a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> type on the <db:code>angle</db:code> property to apply a <db:link xlink:href="qml-qtquick-springanimation.xml">SpringAnimation</db:link> when the time changes. The <db:code>spring</db:code> and <db:code>damping</db:code> properties enable the spring-like motion of the clock hands, and a <db:code>modulus</db:code> of <db:code>360</db:code> makes the animation target values wrap around at a full circle.</db:para>
<db:para>We use a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type to display the city name below the clock:</db:para>
<db:programlisting language="cpp">        Text {
            id: cityLabel
            y: 210; anchors.horizontalCenter: parent.horizontalCenter
            color: &quot;white&quot;
            font.family: &quot;Helvetica&quot;
            font.bold: true; font.pixelSize: 16
            style: Text.Raised; styleColor: &quot;black&quot;
        }
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/clocks.pro">demos/clocks/clocks.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/clocks.qml">demos/clocks/clocks.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/clocks.qmlproject">demos/clocks/clocks.qmlproject</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/clocks.qrc">demos/clocks/clocks.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/Clock.qml">demos/clocks/content/Clock.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/main.cpp">demos/clocks/main.cpp</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/arrow.png">demos/clocks/content/arrow.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/background.png">demos/clocks/content/background.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/center.png">demos/clocks/content/center.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/clock-night.png">demos/clocks/content/clock-night.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/clock.png">demos/clocks/content/clock.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/hour.png">demos/clocks/content/hour.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/minute.png">demos/clocks/content/minute.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/quit.png">demos/clocks/content/quit.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="demos/clocks/content/second.png">demos/clocks/content/second.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section></db:section></db:article>
