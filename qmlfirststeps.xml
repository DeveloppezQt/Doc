<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>First Steps with QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Basic QML application development examples.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="creating-a-qml-document">
<db:title>Creating a QML Document</db:title>
<db:para>A QML document defines a hierarchy of objects with a highly-readable, structured layout. Every QML document consists of two parts: an imports section and an object declaration section. The types and functionality most common to user interfaces are provided in the QtQuick import.</db:para>
<db:section xml:id="importing-and-using-the-qtquick-module">
<db:title>Importing and Using the QtQuick Module</db:title>
<db:para>To use the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module, a QML document needs to import it. The import syntax looks like this:</db:para>
<db:programlisting language="cpp">import QtQuick
</db:programlisting>
<db:para>The types and functionality that <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> provides can now be used in the QML document!</db:para>
</db:section>
<db:section xml:id="defining-an-object-hierarchy">
<db:title>Defining an Object Hierarchy</db:title>
<db:para>The object declaration in a QML document defines what will be displayed in the visual scene. <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> provides the basic building blocks for all user interfaces, such as the objects for displaying images and text and for handling user input.</db:para>
<db:para>A simple object declaration might be a colored rectangle with some text centered in it:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;

    Text {
        anchors.centerIn: parent
        text: &quot;Hello, World!&quot;
    }
}
</db:programlisting>
<db:para>This defines an object hierarchy with a root <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object which has a child <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object. The parent of the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object is automatically set to the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>, and similarly, the <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object is added to the children property of the <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> object, by QML.</db:para>
</db:section>
<db:section xml:id="putting-it-all-together">
<db:title>Putting it All Together</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> and <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> types used in the above example are both provided by the QtQuick import. Putting the import and object declaration together, we get a complete QML document:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;

    Text {
        anchors.centerIn: parent
        text: &quot;Hello, World!&quot;
    }
}
</db:programlisting>
<db:para>If we save that document as &quot;HelloWorld.qml&quot;, we can load and display it.</db:para>
</db:section>
</db:section>
<db:section xml:id="creating-and-running-qml-projects">
<db:title>Creating and Running QML Projects</db:title>
<db:para>To display the graphical scene defined by the QML document, it may be loaded with <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>. For simple UI files such as this one, select <db:emphasis role="bold">File &gt; New File or Project &gt; Application (Qt Quick) &gt; Qt Quick Application - Empty</db:emphasis> from within Qt Creator.</db:para>
<db:para>Pressing the green <db:emphasis role="bold">Run</db:emphasis> button runs the application. You should see the text <db:emphasis role="bold">Hello, World!</db:emphasis> in the center of a red rectangle.</db:para>
<db:para>For more information about creating and running projects in Qt Creator, visit the following pages:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/quick-projects.html">Creating Qt Quick Projects</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="creating-qml-applications-with-controls">
<db:title>Creating QML Applications with Controls</db:title>
<db:para>While Qt Quick provides basic graphical elements, <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> provides ready-made QML types for use within an application.</db:para>
<db:para>Inserting the <db:link xlink:href="qml-qtquick-controls2-applicationwindow.xml">ApplicationWindow</db:link> type is a good starting point for creating applications. An application UI has this basic layout:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/applicationwindow.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Within each area, different <db:emphasis>controls</db:emphasis> may be added and connected to form an application. For example, the following snippet is a basic application that demonstrates the use of available space:</db:para>
<db:programlisting language="qml">//import related modules
import QtQuick
import QtQuick.Controls

//window containing the application
ApplicationWindow {

    //title of the application
    title: qsTr(&quot;Hello World&quot;)
    width: 640
    height: 480

    //menu containing two menu items
    menuBar: MenuBar {
        Menu {
            title: qsTr(&quot;File&quot;)
            MenuItem {
                text: qsTr(&quot;&amp;amp;Open&quot;)
                onTriggered: console.log(&quot;Open action triggered&quot;);
            }
            MenuItem {
                text: qsTr(&quot;Exit&quot;)
                onTriggered: Qt.quit();
            }
        }
    }

    //Content Area

    //a button in the middle of the content area
    Button {
        text: qsTr(&quot;Hello World&quot;)
        anchors.horizontalCenter: parent.horizontalCenter
        anchors.verticalCenter: parent.verticalCenter
    }
}
</db:programlisting>
<db:para>The application has two menu items and a button in the middle. Clicking on the <db:guilabel>Exit</db:guilabel> menu item closes the application.</db:para>
<db:para>There are also different navigation methods and different controls such as buttons and sliders. The following examples are available from Qt Creator and demonstrate different controls and layouts.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquick-layouts-example.xml">Basic Layouts</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-gallery-example.xml">Qt Quick Controls - Gallery</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Feel free to copy and paste the snippets onto this simple Hellow World application to see how QML works.</db:para>
</db:section>
<db:section xml:id="handling-user-input">
<db:title>Handling User Input</db:title>
<db:para>One of the great advantages of using QML to define a user interface is that it allows the user interface designer to define how the application should react to events with simple JavaScript expressions. In QML, we refer to those events as <db:link xlink:href="qtqml-syntax-signals.xml">signals</db:link> and these signals are handled by <db:link xlink:href="qtqml-syntax-signals.xml#qml-signals-and-handlers">signal handlers</db:link>.</db:para>
<db:para>For example, consider the following example:</db:para>
<db:programlisting language="qml">import QtQuick

Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;

    Text {
        anchors.centerIn: parent
        text: &quot;Hello, World!&quot;
    }

    TapHandler {
        onTapped: parent.color = &quot;blue&quot;
    }
}
</db:programlisting>
<db:para>This example can be saved as &quot;ClickableHelloWorld.qml&quot; and run with qmlscene. Whenever the user clicks anywhere in the window, the rectangle will change from red to blue.</db:para>
<db:note>
<db:para><db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> also emits the tapped signal for touch events, so this code will also work on a mobile device.</db:para>
</db:note>
<db:para>Keyboard user input can be similarly handled with a simple expression:</db:para>
<db:programlisting language="qml">Rectangle {
    width: 200
    height: 100
    color: &quot;red&quot;

    Text {
        anchors.centerIn: parent
        text: &quot;Hello, World!&quot;
    }

    focus: true
    Keys.onPressed: {
        if (event.key == Qt.Key_Return) {
            color = &quot;blue&quot;;
            event.accepted = true;
        }
    }
}
</db:programlisting>
<db:para>By accepting focus, the color can be changed to blue whenever the return key is pressed.</db:para>
</db:section>
<db:section xml:id="property-bindings">
<db:title>Property Bindings</db:title>
<db:para>Objects and their properties form the basis of a graphical interface defined in a QML document. The QML language allows properties to be bound to each other in various ways, enabling highly dynamic user interfaces.</db:para>
<db:para>In the following example, the geometry of each child <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> is bound to that of the parent <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link>. If the geometry of the parent <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> were to change, the geometry of each child <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> would automatically update due to the property bindings.</db:para>
<db:programlisting language="qml">Rectangle {
    width: 400
    height: 200

    Rectangle {
        width: parent.width / 2
        height: parent.height
    }

    Rectangle {
        width: parent.width / 2
        height: parent.height
        x: parent.width / 2
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="animations">
<db:title>Animations</db:title>
<db:para>Properties can also be dynamically updated via animations. The QtQuick import provides various animation types which can be used to animate changes to a property's value. In the following example, a property is animated which then gets displayed in a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> area:</db:para>
<db:programlisting language="qml">Rectangle {
    color: &quot;lightgray&quot;
    width: 200
    height: 200

    property int animatedValue: 0
    SequentialAnimation on animatedValue {
        loops: Animation.Infinite
        PropertyAnimation { to: 150; duration: 1000 }
        PropertyAnimation { to: 0; duration: 1000 }
    }

    Text {
        anchors.centerIn: parent
        text: parent.animatedValue
    }
}
</db:programlisting>
<db:para>The value being displayed will vary from 0 to 150 periodically.</db:para>
</db:section>
<db:section xml:id="defining-custom-qml-types-for-re-use">
<db:title>Defining Custom QML Types for Re-use</db:title>
<db:para>One of the most important concepts in QML is that of type re-use. An application will probably have multiple visual types which are all similar (for example, multiple push buttons), and QML allows these sort of things to be defined as re-usable, custom types, to minimize code duplication and maximize readability.</db:para>
<db:para>For example, imagine that the developer defines a new MessageLabel type in the MessageLabel.qml file:</db:para>
<db:programlisting language="qml">// MessageLabel.qml
import QtQuick

Rectangle {
    height: 50
    property string message: &quot;debug message&quot;
    property var msgType: [&quot;debug&quot;, &quot;warning&quot; , &quot;critical&quot;]
    color: &quot;black&quot;

    Column {
        anchors.fill: parent
        padding: 5.0
        spacing: 2
        Text {
            text: msgType.toString().toUpperCase() + &quot;:&quot;
            font.bold: msgType == &quot;critical&quot;
            font.family: &quot;Terminal Regular&quot;
            color: msgType === &quot;warning&quot; || msgType === &quot;critical&quot; ? &quot;red&quot; : &quot;yellow&quot;
            ColorAnimation on color {
                running: msgType == &quot;critical&quot;
                from: &quot;red&quot;
                to: &quot;black&quot;
                duration: 1000
                loops: msgType == &quot;critical&quot; ? Animation.Infinite : 1
            }
        }
        Text {
            text: message
            color: msgType === &quot;warning&quot; || msgType === &quot;critical&quot; ? &quot;red&quot; : &quot;yellow&quot;
            font.family: &quot;Terminal Regular&quot;
        }
    }

}
</db:programlisting>
<db:para>That type may now be re-used multiple times in the application, as follows:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">// application.qml
import QtQuick

Column {
    width: 180
    height: 180
    padding: 1.5
    topPadding: 10.0
    bottomPadding: 10.0
    spacing: 5

    MessageLabel{
        width: parent.width - 2
        msgType: &quot;debug&quot;
    }
    MessageLabel {
        width: parent.width - 2
        message: &quot;This is a warning!&quot;
        msgType: &quot;warning&quot;
    }
    MessageLabel {
        width: parent.width - 2
        message: &quot;A critical warning!&quot;
        msgType: &quot;critical&quot;
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-extending-types.gif"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>In this way, modular user interface types are assembled and reused within an application.</db:para>
<db:para>See <db:link xlink:href="qtqml-syntax-objectattributes.xml">QML Object Attributes</db:link> for more details on how to develop your own reusable components.</db:para>
</db:section>
<db:section xml:id="where-to-go-from-here">
<db:title>Where to Go from Here</db:title>
<db:para>Now that you have seen QML in action, you are ready to take your next step. The follow page will lead you in your journey with QML.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmlapplications.xml">QML Applications</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtexamplesandtutorials.xml">Qt Examples and Tutorials</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
