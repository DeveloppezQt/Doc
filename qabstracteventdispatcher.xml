<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractEventDispatcher Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> class provides an interface to manage Qt's event queue.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractEventDispatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstracteventdispatcherv2.xml" xlink:role="class">QAbstractEventDispatcherV2</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractEventDispatcher is part of <db:simplelist><db:member><db:link xlink:href="events.xml">Event Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>An event dispatcher receives events from the window system and other sources. It then sends them to the <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> or QApplication instance for processing and delivery. <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> provides fine-grained control over event delivery.</db:para>
<db:para>For simple control of event processing use <db:link xlink:href="qcoreapplication.xml#processEvents">QCoreApplication::processEvents</db:link>().</db:para>
<db:para>For finer control of the application's event loop, call <db:link xlink:href="qabstracteventdispatcher.xml#instance">instance</db:link>() and call functions on the <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> object that is returned. If you want to use your own instance of <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> or of a <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> subclass, you must install it with <db:link xlink:href="qcoreapplication.xml#setEventDispatcher">QCoreApplication::setEventDispatcher</db:link>() or <db:link xlink:href="qthread.xml#setEventDispatcher">QThread::setEventDispatcher</db:link>() <db:emphasis>before</db:emphasis> a default event dispatcher has been installed.</db:para>
<db:para>The main event loop is started by calling <db:link xlink:href="qcoreapplication.xml#exec">QCoreApplication::exec</db:link>(), and stopped by calling <db:link xlink:href="qcoreapplication.xml#exit">QCoreApplication::exit</db:link>(). Local event loops can be created using <db:link xlink:href="qeventloop.xml">QEventLoop</db:link>.</db:para>
<db:para>Programs that perform long operations can call <db:link xlink:href="qabstracteventdispatcher.xml#processEvents">processEvents</db:link>() with a bitwise OR combination of various <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">QEventLoop::ProcessEventsFlag</db:link> values to control which events should be delivered.</db:para>
<db:para><db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> also allows the integration of an external event loop with the Qt event loop.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventloop.xml">QEventLoop</db:link></db:member>
<db:member><db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link></db:member>
<db:member><db:link xlink:href="qthread.xml">QThread</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Duration-typedef">
<db:title>[alias] QAbstractEventDispatcher::Duration</db:title>
<db:para>A std::chrono::duration type that is used in various API in this class. This type exists to facilitate a possible transition to a higher or lower granularity.</db:para>
<db:para>In all current platforms, it is nanoseconds.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractEventDispatcher">
<db:title>[explicit] QAbstractEventDispatcher::QAbstractEventDispatcher(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new event dispatcher with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractEventDispatcher">
<db:title>[virtual noexcept] QAbstractEventDispatcher::~QAbstractEventDispatcher()</db:title>
<db:para>Destroys the event dispatcher.</db:para>
</db:section>
<db:section xml:id="aboutToBlock">
<db:title>void QAbstractEventDispatcher::aboutToBlock()</db:title>
<db:para>This signal is emitted before the event loop calls a function that could block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#awake">awake</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="awake">
<db:title>void QAbstractEventDispatcher::awake()</db:title>
<db:para>This signal is emitted after the event loop returns from a function that could block.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#wakeUp">wakeUp</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#aboutToBlock">aboutToBlock</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="filterNativeEvent">
<db:title>bool QAbstractEventDispatcher::filterNativeEvent(const QByteArray &amp;<db:emphasis>eventType</db:emphasis>, void *<db:emphasis>message</db:emphasis>, qintptr *<db:emphasis>result</db:emphasis>)</db:title>
<db:para>Sends <db:code role="parameter">message</db:code> through the event filters that were set by <db:link xlink:href="qabstracteventdispatcher.xml#installNativeEventFilter">installNativeEventFilter</db:link>(). This function returns true as soon as an event filter returns true, and false otherwise to indicate that the processing of the event should continue.</db:para>
<db:para>Subclasses of <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> <db:emphasis>must</db:emphasis> call this function for <db:emphasis>all</db:emphasis> messages received from the system to ensure compatibility with any extensions that may be used in the application. The type of event <db:code role="parameter">eventType</db:code> is specific to the platform plugin chosen at run-time, and can be used to cast message to the right type. The <db:code role="parameter">result</db:code> pointer is only used on Windows, and corresponds to the LRESULT pointer.</db:para>
<db:para>Note that the type of <db:code role="parameter">message</db:code> is platform dependent. See <db:link xlink:href="qabstractnativeeventfilter.xml">QAbstractNativeEventFilter</db:link> for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#installNativeEventFilter">installNativeEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">QAbstractNativeEventFilter::nativeEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="installNativeEventFilter">
<db:title>void QAbstractEventDispatcher::installNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filterObj</db:emphasis>)</db:title>
<db:para>Installs an event filter <db:code role="parameter">filterObj</db:code> for all native events received by the application.</db:para>
<db:para>The event filter <db:code role="parameter">filterObj</db:code> receives events via its <db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">nativeEventFilter</db:link>() function, which is called for all events received by all threads.</db:para>
<db:para>The <db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">nativeEventFilter</db:link>() function should return true if the event should be filtered, (in this case, stopped). It should return false to allow normal Qt processing to continue: the native event can then be translated into a <db:link xlink:href="qevent.xml">QEvent</db:link> and handled by the standard Qt <db:link xlink:href="qevent.xml">event</db:link> filtering, e.g. <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>().</db:para>
<db:para>If multiple event filters are installed, the filter that was installed last is activated first.</db:para>
<db:note>
<db:para>The filter function set here receives native messages, that is, MSG or XEvent structs.</db:para>
</db:note>
<db:para>For maximum portability, you should always try to use <db:link xlink:href="qevent.xml">QEvent</db:link> objects and <db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>() whenever possible.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#installEventFilter">QObject::installEventFilter</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="instance">
<db:title>[static] QAbstractEventDispatcher *QAbstractEventDispatcher::instance(QThread *<db:emphasis>thread</db:emphasis> = nullptr)</db:title>
<db:para>Returns a pointer to the event dispatcher object for the specified <db:code role="parameter">thread</db:code>. If <db:code role="parameter">thread</db:code> is nullptr, the current thread is used. If no event dispatcher exists for the specified thread, this function returns nullptr.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> If Qt is built without thread support, the <db:code role="parameter">thread</db:code> argument is ignored.</db:para>
</db:section>
<db:section xml:id="interrupt">
<db:title>[pure virtual] void QAbstractEventDispatcher::interrupt()</db:title>
<db:para>Interrupts event dispatching. The event dispatcher will return from <db:link xlink:href="qabstracteventdispatcher.xml#processEvents">processEvents</db:link>() as soon as possible.</db:para>
</db:section>
<db:section xml:id="processEvents">
<db:title>[pure virtual] bool QAbstractEventDispatcher::processEvents(QEventLoop::ProcessEventsFlags <db:emphasis>flags</db:emphasis>)</db:title>
<db:para>Processes pending events that match <db:code role="parameter">flags</db:code> until there are no more events to process. Returns true if an event was processed; otherwise returns false.</db:para>
<db:para>This function is especially useful if you have a long running operation, and want to show its progress without allowing user input by using the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">QEventLoop::ExcludeUserInputEvents</db:link> flag.</db:para>
<db:para>If the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">QEventLoop::WaitForMoreEvents</db:link> flag is set in <db:code role="parameter">flags</db:code>, the behavior of this function is as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If events are available, this function returns after processing them.</db:para>
</db:listitem>
<db:listitem>
<db:para>If no events are available, this function will wait until more are available and return after processing newly available events.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If the <db:link xlink:href="qeventloop.xml#ProcessEventsFlag-enum">QEventLoop::WaitForMoreEvents</db:link> flag is not set in <db:code role="parameter">flags</db:code>, and no events are available, this function will return immediately.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> This function does not process events continuously; it returns after all available events are processed.</db:para>
</db:section>
<db:section xml:id="registerSocketNotifier">
<db:title>[pure virtual] void QAbstractEventDispatcher::registerSocketNotifier(QSocketNotifier *<db:emphasis>notifier</db:emphasis>)</db:title>
<db:para>Registers <db:code role="parameter">notifier</db:code> with the event loop. Subclasses must implement this method to tie a socket notifier into another event loop.</db:para>
</db:section>
<db:section xml:id="registerTimer-1">
<db:title>[since 6.8] void QAbstractEventDispatcher::registerTimer(Qt::TimerId <db:emphasis>timerId</db:emphasis>, QAbstractEventDispatcher::Duration <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Register a timer with the specified <db:code role="parameter">timerId</db:code>, <db:code role="parameter">interval</db:code>, and <db:code role="parameter">timerType</db:code> for the given <db:code role="parameter">object</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimer">unregisterTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#timersForObject">timersForObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerTimer-2">
<db:title>[pure virtual] void QAbstractEventDispatcher::registerTimer(int <db:emphasis>timerId</db:emphasis>, qint64 <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Register a timer with the specified <db:code role="parameter">timerId</db:code>, <db:code role="parameter">interval</db:code>, and <db:code role="parameter">timerType</db:code> for the given <db:code role="parameter">object</db:code>.</db:para>
</db:section>
<db:section xml:id="registerTimer-3">
<db:title>[since 6.8] Qt::TimerId QAbstractEventDispatcher::registerTimer(QAbstractEventDispatcher::Duration <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Registers a timer with the specified <db:code role="parameter">interval</db:code> and <db:code role="parameter">timerType</db:code> for the given <db:code role="parameter">object</db:code> and returns the timer id.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="registeredTimers">
<db:title>[pure virtual] QList&lt;QAbstractEventDispatcher::TimerInfo&gt; QAbstractEventDispatcher::registeredTimers(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>Returns a list of registered timers for <db:code role="parameter">object</db:code>. The TimerInfo struct has timerId, interval, and timerType members.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remainingTime">
<db:title>[pure virtual] int QAbstractEventDispatcher::remainingTime(int <db:emphasis>timerId</db:emphasis>)</db:title>
<db:para>Returns the remaining time in milliseconds with the given <db:code role="parameter">timerId</db:code>. If the timer is inactive, the returned value will be -1. If the timer is overdue, the returned value will be 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remainingTime-1">
<db:title>QAbstractEventDispatcher::Duration QAbstractEventDispatcher::remainingTime(Qt::TimerId <db:emphasis>timerId</db:emphasis>) const</db:title>
<db:para>Returns the remaining time of the timer with the given <db:code role="parameter">timerId</db:code>. If the timer is inactive, the returned value will be negative. If the timer is overdue, the returned value will be 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#registerTimer" role="deprecated">registerTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimer">unregisterTimer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeNativeEventFilter">
<db:title>void QAbstractEventDispatcher::removeNativeEventFilter(QAbstractNativeEventFilter *<db:emphasis>filter</db:emphasis>)</db:title>
<db:para>Removes the event filter <db:code role="parameter">filter</db:code> from this object. The request is ignored if such an event filter has not been installed.</db:para>
<db:para>All event filters for this object are automatically removed when this object is destroyed.</db:para>
<db:para>It is always safe to remove an event filter, even during event filter filter activation (that is, even from within the <db:link xlink:href="qabstractnativeeventfilter.xml#nativeEventFilter">nativeEventFilter</db:link>() function).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#installNativeEventFilter">installNativeEventFilter</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnativeeventfilter.xml">QAbstractNativeEventFilter</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timersForObject">
<db:title>[since 6.8] QList&lt;QAbstractEventDispatcher::TimerInfoV2&gt; QAbstractEventDispatcher::timersForObject(QObject *<db:emphasis>object</db:emphasis>) const</db:title>
<db:para>Returns a list of registered timers for <db:code role="parameter">object</db:code>. The <db:link xlink:href="qabstracteventdispatcher-timerinfov2.xml">TimerInfoV2</db:link> struct has timerId, interval, and timerType members.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#registerTimer" role="deprecated">registerTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimer">unregisterTimer</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterSocketNotifier">
<db:title>[pure virtual] void QAbstractEventDispatcher::unregisterSocketNotifier(QSocketNotifier *<db:emphasis>notifier</db:emphasis>)</db:title>
<db:para>Unregisters <db:code role="parameter">notifier</db:code> from the event dispatcher. Subclasses must reimplement this method to tie a socket notifier into another event loop. Reimplementations must call the base implementation.</db:para>
</db:section>
<db:section xml:id="unregisterTimer">
<db:title>[since 6.8] bool QAbstractEventDispatcher::unregisterTimer(Qt::TimerId <db:emphasis>timerId</db:emphasis>)</db:title>
<db:para>Unregisters the timer with the given <db:code role="parameter">timerId</db:code>. Returns true if successful; otherwise returns false.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#registerTimer" role="deprecated">registerTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimers">unregisterTimers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterTimer-1">
<db:title>[pure virtual] bool QAbstractEventDispatcher::unregisterTimer(int <db:emphasis>timerId</db:emphasis>)</db:title>
<db:para>Unregisters the timer with the given <db:code role="parameter">timerId</db:code>. Returns true if successful; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#registerTimer" role="deprecated">registerTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimers">unregisterTimers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterTimers">
<db:title>[pure virtual] bool QAbstractEventDispatcher::unregisterTimers(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>Unregisters all the timers associated with the given <db:code role="parameter">object</db:code>. Returns true if all timers were successfully removed; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#unregisterTimer">unregisterTimer</db:link>()</db:member>
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#registeredTimers">registeredTimers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wakeUp">
<db:title>[pure virtual] void QAbstractEventDispatcher::wakeUp()</db:title>
<db:para>Wakes up the event loop.</db:para>
<db:note>
<db:para>This function is <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracteventdispatcher.xml#awake">awake</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QAbstractEventDispatcher</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="registerTimer">
<db:title>[deprecated] int QAbstractEventDispatcher::registerTimer(qint64 <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>This function will be removed in Qt 7. Use the overload taking <db:link xlink:href="qabstracteventdispatcher.xml#Duration-typedef">Duration</db:link>.</db:para>
<db:para>Registers a timer with the specified <db:code role="parameter">interval</db:code> and <db:code role="parameter">timerType</db:code> for the given <db:code role="parameter">object</db:code> and returns the timer id.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
