<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Surface Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt Data Visualization | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using <db:link xlink:href="q3dsurface.xml">Q3DSurface</db:link> in a widget application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;surfacegraph.h&quot;

#include &amp;lt;QtWidgets/QApplication&amp;gt;
#include &amp;lt;QtWidgets/QWidget&amp;gt;
#include &amp;lt;QtWidgets/QHBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QVBoxLayout&amp;gt;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QRadioButton&amp;gt;
#include &amp;lt;QtWidgets/QSlider&amp;gt;
#include &amp;lt;QtWidgets/QGroupBox&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QLabel&amp;gt;
#include &amp;lt;QtWidgets/QMessageBox&amp;gt;
#include &amp;lt;QtGui/QPainter&amp;gt;
#include &amp;lt;QtGui/QScreen&amp;gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DSurface *graph = new Q3DSurface();
    QWidget *container = QWidget::createWindowContainer(graph);

    if (!graph-&amp;gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = graph-&amp;gt;screen()-&amp;gt;size();
    container-&amp;gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.6));
    container-&amp;gt;setMaximumSize(screenSize);
    container-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&amp;gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&amp;gt;addWidget(container, 1);
    hLayout-&amp;gt;addLayout(vLayout);
    vLayout-&amp;gt;setAlignment(Qt::AlignTop);

    widget-&amp;gt;setWindowTitle(QStringLiteral(&quot;Surface example&quot;));

    QGroupBox *modelGroupBox = new QGroupBox(QStringLiteral(&quot;Model&quot;));

    QRadioButton *sqrtSinModelRB = new QRadioButton(widget);
    sqrtSinModelRB-&amp;gt;setText(QStringLiteral(&quot;Sqrt &amp;amp;&amp;amp; Sin&quot;));
    sqrtSinModelRB-&amp;gt;setChecked(false);

    QRadioButton *heightMapModelRB = new QRadioButton(widget);
    heightMapModelRB-&amp;gt;setText(QStringLiteral(&quot;Height Map&quot;));
    heightMapModelRB-&amp;gt;setChecked(false);

    QVBoxLayout *modelVBox = new QVBoxLayout;
    modelVBox-&amp;gt;addWidget(sqrtSinModelRB);
    modelVBox-&amp;gt;addWidget(heightMapModelRB);
    modelGroupBox-&amp;gt;setLayout(modelVBox);

    QGroupBox *selectionGroupBox = new QGroupBox(QStringLiteral(&quot;Selection Mode&quot;));

    QRadioButton *modeNoneRB = new QRadioButton(widget);
    modeNoneRB-&amp;gt;setText(QStringLiteral(&quot;No selection&quot;));
    modeNoneRB-&amp;gt;setChecked(false);

    QRadioButton *modeItemRB = new QRadioButton(widget);
    modeItemRB-&amp;gt;setText(QStringLiteral(&quot;Item&quot;));
    modeItemRB-&amp;gt;setChecked(false);

    QRadioButton *modeSliceRowRB = new QRadioButton(widget);
    modeSliceRowRB-&amp;gt;setText(QStringLiteral(&quot;Row Slice&quot;));
    modeSliceRowRB-&amp;gt;setChecked(false);

    QRadioButton *modeSliceColumnRB = new QRadioButton(widget);
    modeSliceColumnRB-&amp;gt;setText(QStringLiteral(&quot;Column Slice&quot;));
    modeSliceColumnRB-&amp;gt;setChecked(false);

    QVBoxLayout *selectionVBox = new QVBoxLayout;
    selectionVBox-&amp;gt;addWidget(modeNoneRB);
    selectionVBox-&amp;gt;addWidget(modeItemRB);
    selectionVBox-&amp;gt;addWidget(modeSliceRowRB);
    selectionVBox-&amp;gt;addWidget(modeSliceColumnRB);
    selectionGroupBox-&amp;gt;setLayout(selectionVBox);

    QSlider *axisMinSliderX = new QSlider(Qt::Horizontal, widget);
    axisMinSliderX-&amp;gt;setMinimum(0);
    axisMinSliderX-&amp;gt;setTickInterval(1);
    axisMinSliderX-&amp;gt;setEnabled(true);
    QSlider *axisMaxSliderX = new QSlider(Qt::Horizontal, widget);
    axisMaxSliderX-&amp;gt;setMinimum(1);
    axisMaxSliderX-&amp;gt;setTickInterval(1);
    axisMaxSliderX-&amp;gt;setEnabled(true);
    QSlider *axisMinSliderZ = new QSlider(Qt::Horizontal, widget);
    axisMinSliderZ-&amp;gt;setMinimum(0);
    axisMinSliderZ-&amp;gt;setTickInterval(1);
    axisMinSliderZ-&amp;gt;setEnabled(true);
    QSlider *axisMaxSliderZ = new QSlider(Qt::Horizontal, widget);
    axisMaxSliderZ-&amp;gt;setMinimum(1);
    axisMaxSliderZ-&amp;gt;setTickInterval(1);
    axisMaxSliderZ-&amp;gt;setEnabled(true);

    QComboBox *themeList = new QComboBox(widget);
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Qt&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Primary Colors&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Digia&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Stone Moss&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Army Blue&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Retro&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Ebony&quot;));
    themeList-&amp;gt;addItem(QStringLiteral(&quot;Isabelle&quot;));

    QGroupBox *colorGroupBox = new QGroupBox(QStringLiteral(&quot;Custom gradient&quot;));

    QLinearGradient grBtoY(0, 0, 1, 100);
    grBtoY.setColorAt(1.0, Qt::black);
    grBtoY.setColorAt(0.67, Qt::blue);
    grBtoY.setColorAt(0.33, Qt::red);
    grBtoY.setColorAt(0.0, Qt::yellow);
    QPixmap pm(24, 100);
    QPainter pmp(&amp;amp;pm);
    pmp.setBrush(QBrush(grBtoY));
    pmp.setPen(Qt::NoPen);
    pmp.drawRect(0, 0, 24, 100);
    QPushButton *gradientBtoYPB = new QPushButton(widget);
    gradientBtoYPB-&amp;gt;setIcon(QIcon(pm));
    gradientBtoYPB-&amp;gt;setIconSize(QSize(24, 100));

    QLinearGradient grGtoR(0, 0, 1, 100);
    grGtoR.setColorAt(1.0, Qt::darkGreen);
    grGtoR.setColorAt(0.5, Qt::yellow);
    grGtoR.setColorAt(0.2, Qt::red);
    grGtoR.setColorAt(0.0, Qt::darkRed);
    pmp.setBrush(QBrush(grGtoR));
    pmp.drawRect(0, 0, 24, 100);
    QPushButton *gradientGtoRPB = new QPushButton(widget);
    gradientGtoRPB-&amp;gt;setIcon(QIcon(pm));
    gradientGtoRPB-&amp;gt;setIconSize(QSize(24, 100));

    QHBoxLayout *colorHBox = new QHBoxLayout;
    colorHBox-&amp;gt;addWidget(gradientBtoYPB);
    colorHBox-&amp;gt;addWidget(gradientGtoRPB);
    colorGroupBox-&amp;gt;setLayout(colorHBox);

    vLayout-&amp;gt;addWidget(modelGroupBox);
    vLayout-&amp;gt;addWidget(selectionGroupBox);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Column range&quot;)));
    vLayout-&amp;gt;addWidget(axisMinSliderX);
    vLayout-&amp;gt;addWidget(axisMaxSliderX);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Row range&quot;)));
    vLayout-&amp;gt;addWidget(axisMinSliderZ);
    vLayout-&amp;gt;addWidget(axisMaxSliderZ);
    vLayout-&amp;gt;addWidget(new QLabel(QStringLiteral(&quot;Theme&quot;)));
    vLayout-&amp;gt;addWidget(themeList);
    vLayout-&amp;gt;addWidget(colorGroupBox);

    widget-&amp;gt;show();

    SurfaceGraph *modifier = new SurfaceGraph(graph);

    QObject::connect(heightMapModelRB, &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::enableHeightMapModel);
    QObject::connect(sqrtSinModelRB, &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::enableSqrtSinModel);
    QObject::connect(modeNoneRB, &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::toggleModeNone);
    QObject::connect(modeItemRB,  &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::toggleModeItem);
    QObject::connect(modeSliceRowRB,  &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::toggleModeSliceRow);
    QObject::connect(modeSliceColumnRB,  &amp;amp;QRadioButton::toggled,
                     modifier, &amp;amp;SurfaceGraph::toggleModeSliceColumn);
    QObject::connect(axisMinSliderX, &amp;amp;QSlider::valueChanged,
                     modifier, &amp;amp;SurfaceGraph::adjustXMin);
    QObject::connect(axisMaxSliderX, &amp;amp;QSlider::valueChanged,
                     modifier, &amp;amp;SurfaceGraph::adjustXMax);
    QObject::connect(axisMinSliderZ, &amp;amp;QSlider::valueChanged,
                     modifier, &amp;amp;SurfaceGraph::adjustZMin);
    QObject::connect(axisMaxSliderZ, &amp;amp;QSlider::valueChanged,
                     modifier, &amp;amp;SurfaceGraph::adjustZMax);
    QObject::connect(themeList, SIGNAL(currentIndexChanged(int)),
                     modifier, SLOT(changeTheme(int)));
    QObject::connect(gradientBtoYPB, &amp;amp;QPushButton::pressed,
                     modifier, &amp;amp;SurfaceGraph::setBlackToYellowGradient);
    QObject::connect(gradientGtoRPB, &amp;amp;QPushButton::pressed,
                     modifier, &amp;amp;SurfaceGraph::setGreenToRedGradient);

    modifier-&amp;gt;setAxisMinSliderX(axisMinSliderX);
    modifier-&amp;gt;setAxisMaxSliderX(axisMaxSliderX);
    modifier-&amp;gt;setAxisMinSliderZ(axisMinSliderZ);
    modifier-&amp;gt;setAxisMaxSliderZ(axisMaxSliderZ);

    sqrtSinModelRB-&amp;gt;setChecked(true);
    modeItemRB-&amp;gt;setChecked(true);
    themeList-&amp;gt;setCurrentIndex(2);

    return app.exec();
}

</db:programlisting>
</db:article>
