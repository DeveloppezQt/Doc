<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Deployment Guide</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Qt Virtual Keyboard.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This document describes how to deploy and use the Qt Virtual Keyboard plugin with Qt applications.</db:para>
</db:section>
<db:section xml:id="deployment">
<db:title>Deployment</db:title>
<db:para>The various Qt Virtual Keyboard plugins and files are deployed in the following locations:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Item</db:para>
</db:th>
<db:th>
<db:para>Desktop install path</db:para>
</db:th>
<db:th>
<db:para>Boot2Qt install path</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>qtvirtualkeyboardplugin platform input context plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_PLUGINS&gt;/platforminputcontexts</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/plugins/platforminputcontexts</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkbplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkbcomponentsplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Components</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Components</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkblayoutsplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Layouts</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Layouts</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkbpluginsplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Plugins</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Plugins</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>extension QML plugins</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Plugins/*</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Plugins/*</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkbsettingsplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Settings</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Settings</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>qtvkbstylesplugin QML plugin</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_QML&gt;/QtQuick/VirtualKeyboard/Styles</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qml/QtQuick/VirtualKeyboard/Styles</db:code></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Virtual keyboard data</db:para>
</db:td>
<db:td>
<db:para><db:code>&lt;QT_INSTALL_DATA&gt;/qtvirtualkeyboard</db:code></db:para>
</db:td>
<db:td>
<db:para><db:code>/system/qtvirtualkeyboard</db:code></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section xml:id="dependencies">
<db:title>Dependencies</db:title>
<db:para>Read more at <db:link xlink:href="deployment.xml#deploying-qt-s-libraries">Deploying Qt's Libraries</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="integration-method">
<db:title>Integration Method</db:title>
<db:para>Qt Virtual Keyboard currently supports two alternative integration methods for using the plugin:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>Desktop</db:code>: requires no changes to existing applications. The virtual keyboard is available to all Qt applications in the system.</db:para>
<db:para>In this integration method, the keyboard is shown in a dedicated top-level window.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Application</db:code>: the virtual keyboard is embedded within the Qt application itself by instantiating an <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> item in QML.</db:para>
<db:para>This method is mandatory in environments where there is no support for multiple top-level windows (such as embedded devices), but can be used in desktop applications too.</db:para>
<db:para>This method can also be used by Qt Wayland compositors in order to provide a server-side virtual keyboard. See the section below for details.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The integration method is automatically selected by the project files. However, in desktop environments, it is possible to override the desktop integration method and use the application integration method instead, by using the <db:code>QT_VIRTUALKEYBOARD_DESKTOP_DISABLE</db:code> environment variable, or by adding <db:code>-no-vkb-desktop</db:code> to the <db:code>configure</db:code> command line.</db:para>
<db:section xml:id="using-qt-virtual-keyboard-with-qt-wayland">
<db:title>Using Qt Virtual Keyboard with Qt Wayland</db:title>
<db:para>This section explains how to use Qt Virtual Keyboard to interact with the <db:link xlink:href="qtwidgets-widgets-lineedits-example.xml">Qt Widgets Line Edits example</db:link> using the <db:link xlink:href="qtwaylandcompositor-fancy-compositor-example.xml">Fancy Compositor example</db:link> as a compositor.</db:para>
<db:para>We will be using Ubuntu 18.04 to run the example, using the X11 as the windowing system. The example compositor (<db:code>fancy-compositor</db:code>) will open as a window within an X11 session.</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>Start the compositor:</db:para>
<db:programlisting language="cpp" role="bad">QT_XCB_GL_INTEGRATION=xcb_egl QT_WAYLAND_CLIENT_BUFFER_INTEGRATION=xcomposite-egl \
QT_IM_MODULE=qtvirtualkeyboard ./fancy-compositor -platform xcb
        </db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Before running the client application, ensure that QT_IM_MODULE is unset:</db:para>
<db:programlisting language="cpp" role="bad">unset QT_IM_MODULE
        </db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Start the Line Edits example as the client:</db:para>
<db:programlisting language="cpp" role="bad">./lineedits -platform wayland
        </db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Click on a line edit and Qt Virtual Keyboard's input panel will open.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>If issues are encountered, the following environment variables can be set when running the compositor to get debug output that can help diagnose the issue:</db:para>
<db:programlisting language="cpp" role="bad">WAYLAND_DEBUG=1
QT_LOGGING_RULES=&quot;qt.virtualkeyboard=true;qt.qpa.wayland*=true&quot;
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="loading-the-plugin">
<db:title>Loading the Plugin</db:title>
<db:para>In both integration methods, the application must use the <db:code>QT_IM_MODULE</db:code> environment variable to load the plugin. For example:</db:para>
<db:programlisting language="cpp">$ QT_IM_MODULE=qtvirtualkeyboard myapp
</db:programlisting>
<db:para>or in the main() function:</db:para>
<db:programlisting language="cpp">qputenv(&quot;QT_IM_MODULE&quot;, QByteArray(&quot;qtvirtualkeyboard&quot;));
</db:programlisting>
<db:para>In the desktop integration method, this step is all that is required to use Qt Virtual Keyboard. In the application integration method, the application is required to create an instance of <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> as explained in the following chapter.</db:para>
</db:section>
<db:section xml:id="creating-inputpanel">
<db:title>Creating InputPanel</db:title>
<db:para>The following example shows how to create an <db:link xlink:href="qml-qtquick-virtualkeyboard-inputpanel.xml">InputPanel</db:link> and how to divide the screen area with the application container.</db:para>
<db:programlisting language="cpp">import QtQuick
import QtQuick.VirtualKeyboard

Item {
    id: root
    Item {
        id: appContainer
        anchors.left: parent.left
        anchors.top: parent.top
        anchors.right: parent.right
        anchors.bottom: inputPanel.top
        ...
    }
    InputPanel {
        id: inputPanel
        y: Qt.inputMethod.visible ? parent.height - inputPanel.height : parent.height
        anchors.left: parent.left
        anchors.right: parent.right
    }
}
</db:programlisting>
<db:para>The input panel must be a sibling element next to the application container. It is important not to put the input panel within the application container, as it would then overlap with the contents of the application. Also, the input panel height will be automatically updated according to the available width; the aspect ratio of the input panel is constant.</db:para>
</db:section>
<db:section xml:id="environment-variables">
<db:title>Environment Variables</db:title>
<db:para>There are several environment variables defined by the module that are listed below:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Variable</db:para>
</db:th>
<db:th>
<db:para>Purpose</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_HUNSPELL_DATA_PATH</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Hunspell data files.</db:para>
<db:para>The default location depends on the value of <db:code>QLibraryInfo::path(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/hunspell</db:code>.</db:para>
<db:para>See <db:link xlink:href="qtvirtualkeyboard-build.xml#hunspell-integration">Hunspell Integration</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_PINYIN_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Pinyin dictionary.</db:para>
<db:para>By default, the dictionary is bundled into the plugin's resources.</db:para>
<db:para>To disable resource bundling, add <db:emphasis>-vkb-no-bundle-pinyin</db:emphasis> to the Qt configure command line. In this scenario, the default location depends on the value of <db:code>QLibraryInfo::path(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/pinyin/dict_pinyin.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_CANGJIE_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Cangjie dictionary.</db:para>
<db:para>By default, the dictionary is bundled into the plugin's resources.</db:para>
<db:para>To disable resource bundling, add <db:emphasis>-vkb-no-bundle-tcime</db:emphasis> to the Qt configure command line. In this scenario, the default location depends on the value of <db:code>QLibraryInfo::path(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_cangjie.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_ZHUYIN_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the Zhuyin dictionary.</db:para>
<db:para>By default, the dictionary is bundled into the plugin's resources.</db:para>
<db:para>To disable resource bundling, add <db:emphasis>-vkb-no-bundle-tcime</db:emphasis> to the Qt configure command line. In this scenario, the default location depends on the value of <db:code>QLibraryInfo::path(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_zhuyin.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_PHRASE_DICTIONARY</db:para>
</db:td>
<db:td>
<db:para>Overrides the location of the phrase dictionary.</db:para>
<db:para>By default, the dictionary is bundled into the plugin's resources.</db:para>
<db:para>To disable resource bundling, add <db:emphasis>-vkb-no-bundle-tcime</db:emphasis> to the Qt configure command line. In this scenario, the default location depends on the value of <db:code>QLibraryInfo::path(QLibraryInfo::DataPath)</db:code>. For example, for Qt libraries built from source, it could be <db:code>qtbase/qtvirtualkeyboard/tcime/dict_phrases.dat</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_CERENCE_HWR_DB_PATH</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of Cerence Handwriting handwriting database.</db:para>
<db:para>The default search location for Cerence Handwriting handwriting database are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QT_VIRTUALKEYBOARD_CERENCE_HWR_DB_PATH</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QLibraryInfo::location(QLibraryInfo::DataPath) + &quot;/qtvirtualkeyboard/cerence/handwriting&quot;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&quot;:/qt-project.org/imports/QtQuick/VirtualKeyboard/Cerence/Handwriting&quot;</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The environment variable may contain multiple paths. Multiple paths are separated with semicolon in Windows and with colon in other operating systems.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_XT9_LDB_PATH</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of XT9 databases.</db:para>
<db:para>The default search location for LDB files are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>QT_VIRTUALKEYBOARD_XT9_LDB_PATH</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>QLibraryInfo::location(QLibraryInfo::DataPath) + &quot;/qtvirtualkeyboard/cerence/xt9&quot;</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>&quot;:/qt-project.org/imports/QtQuick/VirtualKeyboard/Cerence/Xt9&quot;</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Additional search paths can be specified by setting this environment variable. Multiple paths are separated with semicolon in Windows and with colon in other operating systems.</db:para>
<db:para>The LDB files are shared between XT9 and Cerence Handwriting plugins, so this environment variable affects both plugins.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_STYLE</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of the style to use with the virtual keyboard.</db:para>
<db:para>This can also be specified in QML by setting <db:link xlink:href="qml-qtquick-virtualkeyboard-settings-virtualkeyboardsettings.xml#styleName-prop">VirtualKeyboardSettings::styleName</db:link>, or at build time by using the <db:link xlink:href="qmake-advanced-usage.xml">Configuration Options</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_LAYOUT_PATH</db:para>
</db:td>
<db:td>
<db:para>Specifies the location of the layouts to be used with the virtual keyboard.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_DESKTOP_DISABLE</db:para>
</db:td>
<db:td>
<db:para>Disables the desktop integration method.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QT_VIRTUALKEYBOARD_FORCE_EVENTS_WITHOUT_FOCUS</db:para>
</db:td>
<db:td>
<db:para>Enables Qt Virtual Keyboard to send key events and use Shift key without having any text input in focus.</db:para>
<db:para>This variable needs to be explicitly set in the run environment of an application that wants to benefit from this. Using <db:link xlink:href="qtenvironmentvariables-proxy.xml#qputenv">qputenv</db:link>() in the application itself is not sufficient.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
