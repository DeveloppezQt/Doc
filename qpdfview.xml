<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPdfView Class</db:title>
<db:productname>QtPdf</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Pdf Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A PDF viewer widget.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPdfView</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qabstractscrollarea.xml" xlink:role="class">QAbstractScrollArea</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpdfview.xml">QPdfView</db:link> is a PDF viewer widget that offers a user experience similar to many common PDF viewer applications, with two <db:link xlink:href="qpdfview.xml#pageMode-prop">modes</db:link>. In the <db:code>MultiPage</db:code> mode, it supports flicking through the pages in the entire document, with narrow gaps between the page images. In the <db:code>SinglePage</db:code> mode, it shows one page at a time.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="PageMode-enum">
<db:title>enum QPdfView::PageMode</db:title>
<db:enumsynopsis>
<db:enumname>PageMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SinglePage</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MultiPage</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the overall behavior of the PDF viewer:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfview.xml">QPdfView</db:link></db:emphasis>::<db:emphasis role="bold">PageMode</db:emphasis>::SinglePage</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Show one page at a time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfview.xml">QPdfView</db:link></db:emphasis>::<db:emphasis role="bold">PageMode</db:emphasis>::MultiPage</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Allow scrolling through all pages in the document.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="ZoomMode-enum">
<db:title>enum QPdfView::ZoomMode</db:title>
<db:enumsynopsis>
<db:enumname>ZoomMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Custom</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FitToWidth</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FitInView</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the magnification behavior of the PDF viewer:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfview.xml">QPdfView</db:link></db:emphasis>::<db:emphasis role="bold">ZoomMode</db:emphasis>::Custom</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Use <db:link xlink:href="qpdfview.xml#zoomFactor-prop">zoomFactor</db:link> only.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfview.xml">QPdfView</db:link></db:emphasis>::<db:emphasis role="bold">ZoomMode</db:emphasis>::FitToWidth</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Automatically choose a zoom factor so that the width of the page fits in the view.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qpdfview.xml">QPdfView</db:link></db:emphasis>::<db:emphasis role="bold">ZoomMode</db:emphasis>::FitInView</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Automatically choose a zoom factor so that the entire page fits in the view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentSearchResultIndex-prop">
<db:title>[since 6.6] currentSearchResultIndex : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>currentSearchResultIndex</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentSearchResultIndex</db:synopsisinfo>
<db:synopsisinfo role="setter">setCurrentSearchResultIndex</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentSearchResultIndexChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set to a positive number, and <db:link xlink:href="qpdfview.xml#searchModel-prop">searchModel</db:link> is set, <db:link xlink:href="qpdfview.xml">QPdfView</db:link> draws a frame around the search result provided by <db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link> at the given index. For example, if <db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link> is used as the model for a <db:link xlink:href="qlistview.xml">QListView</db:link>, you can keep this property updated by connecting <db:link xlink:href="qitemselectionmodel.xml#currentChanged">QItemSelectionModel::currentChanged</db:link>() from <db:link xlink:href="qabstractitemview.xml#selectionModel">QListView::selectionModel</db:link>() to a function that will in turn call this function.</db:para>
<db:para>By default it is <db:code>-1</db:code>, so that no search results are framed.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentSearchResultIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCurrentSearchResultIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>currentResult</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">currentSearchResultIndexChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>currentResult</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="document-prop">
<db:title>document : QPdfDocument*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPdfDocument*</db:type>
<db:varname>document</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">document</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocument</db:synopsisinfo>
<db:synopsisinfo role="notifier">documentChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the document to be viewed.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis role="bold">document</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocument</db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis>document</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">documentChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfdocument.xml">QPdfDocument</db:link></db:type> *<db:emphasis>document</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="documentMargins-prop">
<db:title>documentMargins : QMargins</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMargins</db:type>
<db:varname>documentMargins</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">documentMargins</db:synopsisinfo>
<db:synopsisinfo role="setter">setDocumentMargins</db:synopsisinfo>
<db:synopsisinfo role="notifier">documentMarginsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the margins around the page view.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmargins.xml">QMargins</db:link></db:type> <db:emphasis role="bold">documentMargins</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDocumentMargins</db:emphasis>(<db:type><db:link xlink:href="qmargins.xml">QMargins</db:link></db:type> <db:emphasis>margins</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">documentMarginsChanged</db:emphasis>(<db:type><db:link xlink:href="qmargins.xml">QMargins</db:link></db:type> <db:emphasis>documentMargins</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pageMode-prop">
<db:title>pageMode : PageMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>PageMode</db:type>
<db:varname>pageMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pageMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setPageMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">pageModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether to show one page at a time, or all pages in the document. The default is <db:code>SinglePage</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfview.xml#PageMode-enum">QPdfView::PageMode</db:link></db:type> <db:emphasis role="bold">pageMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPageMode</db:emphasis>(<db:type><db:link xlink:href="qpdfview.xml#PageMode-enum">QPdfView::PageMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pageModeChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfview.xml#PageMode-enum">QPdfView::PageMode</db:link></db:type> <db:emphasis>pageMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="pageSpacing-prop">
<db:title>pageSpacing : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>pageSpacing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">pageSpacing</db:synopsisinfo>
<db:synopsisinfo role="setter">setPageSpacing</db:synopsisinfo>
<db:synopsisinfo role="notifier">pageSpacingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the size of the padding between pages in the <db:link xlink:href="qpdfview.xml#PageMode-enum">MultiPage</db:link> <db:link xlink:href="qpdfview.xml#pageMode-prop">mode</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">pageSpacing</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPageSpacing</db:emphasis>(<db:type>int</db:type> <db:emphasis>spacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">pageSpacingChanged</db:emphasis>(<db:type>int</db:type> <db:emphasis>pageSpacing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="searchModel-prop">
<db:title>[since 6.6] searchModel : QPdfSearchModel*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPdfSearchModel*</db:type>
<db:varname>searchModel</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">searchModel</db:synopsisinfo>
<db:synopsisinfo role="setter">setSearchModel</db:synopsisinfo>
<db:synopsisinfo role="notifier">searchModelChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>If this property is set, <db:link xlink:href="qpdfview.xml">QPdfView</db:link> draws highlight rectangles over the search results provided by <db:link xlink:href="qpdfsearchmodel.xml#resultsOnPage">QPdfSearchModel::resultsOnPage</db:link>(). By default it is <db:code>nullptr</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:type> *<db:emphasis role="bold">searchModel</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSearchModel</db:emphasis>(<db:type><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:type> *<db:emphasis>searchModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">searchModelChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfsearchmodel.xml">QPdfSearchModel</db:link></db:type> *<db:emphasis>searchModel</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="zoomFactor-prop">
<db:title>zoomFactor : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>zoomFactor</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">zoomFactor</db:synopsisinfo>
<db:synopsisinfo role="setter">setZoomFactor</db:synopsisinfo>
<db:synopsisinfo role="notifier">zoomFactorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the ratio of pixels to points. The default is <db:code>1</db:code>, meaning one point (1/72 of an inch) equals 1 logical pixel.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">zoomFactor</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomFactor</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>factor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zoomFactorChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>zoomFactor</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="zoomMode-prop">
<db:title>zoomMode : ZoomMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ZoomMode</db:type>
<db:varname>zoomMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">zoomMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setZoomMode</db:synopsisinfo>
<db:synopsisinfo role="notifier">zoomModeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property indicates whether to use a custom size for the page(s), or zoom them to fit to the view. The default is <db:code>CustomZoom</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpdfview.xml#ZoomMode-enum">QPdfView::ZoomMode</db:link></db:type> <db:emphasis role="bold">zoomMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setZoomMode</db:emphasis>(<db:type><db:link xlink:href="qpdfview.xml#ZoomMode-enum">QPdfView::ZoomMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">zoomModeChanged</db:emphasis>(<db:type><db:link xlink:href="qpdfview.xml#ZoomMode-enum">QPdfView::ZoomMode</db:link></db:type> <db:emphasis>zoomMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPdfView-1">
<db:title>[explicit] QPdfView::QPdfView(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPdfView</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfView(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a PDF viewer with parent widget <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QPdfView">
<db:title>[virtual] QPdfView::~QPdfView()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QPdfView</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QPdfView()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the PDF viewer.</db:para>
</db:section>
<db:section xml:id="pageNavigator">
<db:title>QPdfPageNavigator *QPdfView::pageNavigator() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPdfPageNavigator *</db:type>
<db:methodname>pageNavigator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPdfPageNavigator * pageNavigator() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This accessor returns the navigation stack that will handle back/forward navigation.</db:para>
</db:section>
</db:section>
</db:article>
