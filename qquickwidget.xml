<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickWidget Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> class provides a widget for displaying a Qt Quick user interface.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS QuickWidgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::QuickWidgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quickwidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is a convenience wrapper for <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> which will automatically load and display a QML scene when given the URL of the main source file. Alternatively, you can instantiate your own objects using <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> and place them in a manually set up <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:para>Typical usage:</db:para>
<db:programlisting language="cpp">QQuickWidget *view = new QQuickWidget;
view-&amp;gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));
view-&amp;gt;show();
</db:programlisting>
<db:para>To receive errors related to loading and executing QML with <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, you can connect to the <db:link xlink:href="qquickwidget.xml#statusChanged">statusChanged</db:link>() signal and monitor for <db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Error</db:link>. The errors are available via <db:link xlink:href="qquickwidget.xml#errors">QQuickWidget::errors</db:link>().</db:para>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> also manages sizing of the view and root object. By default, the <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> is <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link>, which will load the component and resize it to the size of the view. Alternatively the <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> may be set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link> which will resize the view to the size of the root object.</db:para>
<db:section xml:id="performance-considerations">
<db:title>Performance Considerations</db:title>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is an alternative to using <db:link xlink:href="qquickview.xml">QQuickView</db:link> and <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>(). The restrictions on stacking order do not apply, making <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> the more flexible alternative, behaving more like an ordinary widget.</db:para>
<db:para>However, the above mentioned advantages come at the expense of performance:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Unlike <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> and <db:link xlink:href="qquickview.xml">QQuickView</db:link>, <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> requires rendering into OpenGL framebuffer objects, which needs to be enforced by calling <db:link xlink:href="qquickwindow.xml#setGraphicsApi">QQuickWindow::setGraphicsApi</db:link>(<db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::OpenGL</db:link>) at startup. This will naturally carry a minor performance hit.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> disables the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml#threaded-render-loop">threaded render loop</db:link> on all platforms. This means that some of the benefits of threaded rendering, for example <db:link xlink:href="qml-qtquick-animator.xml">Animator</db:link> classes and vsync driven animations, will not be available.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Avoid calling <db:link xlink:href="qwidget.xml#winId">winId</db:link>() on a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. This function triggers the creation of a native window, resulting in reduced performance and possibly rendering glitches. The entire purpose of <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is to render Quick scenes without a separate native window, hence making it a native widget should always be avoided.</db:para>
</db:note>
</db:section>
<db:section xml:id="scene-graph-and-context-persistency">
<db:title>Scene Graph and Context Persistency</db:title>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> honors <db:link xlink:href="qquickwindow.xml#isPersistentSceneGraph">QQuickWindow::isPersistentSceneGraph</db:link>(), meaning that applications can decide - by calling <db:link xlink:href="qquickwindow.xml#setPersistentSceneGraph">QQuickWindow::setPersistentSceneGraph</db:link>() on the window returned from the <db:link xlink:href="qquickwidget.xml#quickWindow">quickWindow</db:link>() function - to let scenegraph nodes and other Qt Quick scene related resources be released whenever the widget becomes hidden. By default persistency is enabled, just like with <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
<db:para>When running with the OpenGL backend of the scene graph, <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> offers the possibility to disable persistent OpenGL contexts as well. This setting is currently ignored by <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> and the context is always persistent. The OpenGL context is thus not destroyed when hiding the widget. The context is destroyed only when the widget is destroyed or when the widget gets reparented into another top-level widget's child hierarchy. However, some applications, in particular those that have their own graphics resources due to performing custom OpenGL rendering in the Qt Quick scene, may wish to disable the latter since they may not be prepared to handle the loss of the context when moving a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> into another window. Such applications can set the QCoreApplication::AA_ShareOpenGLContexts attribute. For a discussion on the details of resource initialization and cleanup, refer to the <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> documentation.</db:para>
<db:note>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> offers less fine-grained control over its internal OpenGL context than <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, and there are subtle differences, most notably that disabling the persistent scene graph will lead to destroying the context on a window change regardless of the presence of QCoreApplication::AA_ShareOpenGLContexts.</db:para>
</db:note>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>Putting other widgets underneath and making the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> transparent will not lead to the expected results: the widgets underneath will not be visible. This is because in practice the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is drawn before all other regular, non-OpenGL widgets, and so see-through types of solutions are not feasible. Other type of layouts, like having widgets on top of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, will function as expected.</db:para>
<db:para>When absolutely necessary, this limitation can be overcome by setting the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AlwaysStackOnTop</db:link> attribute on the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. Be aware, however that this breaks stacking order. For example it will not be possible to have other widgets on top of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, so it should only be used in situations where a semi-transparent <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with other widgets visible underneath is required.</db:para>
<db:para>This limitation only applies when there are other widgets underneath the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> inside the same window. Making the window semi-transparent, with other applications and the desktop visible in the background, is done in the traditional way: Set <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> on the top-level window, request an alpha channel, and change the Qt Quick Scenegraph's clear color to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link> via <db:link xlink:href="qquickwidget.xml#setClearColor">setClearColor</db:link>().</db:para>
</db:section>
<db:section xml:id="support-when-not-using-opengl">
<db:title>Support when not using OpenGL</db:title>
<db:para>In addition to OpenGL, the <db:code>software</db:code> backend of Qt Quick also supports <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. Other backends, for example OpenVG, are not compatible however and attempting to construct a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> will lead to problems.</db:para>
</db:section>
<db:section xml:id="tab-key-handling">
<db:title>Tab Key Handling</db:title>
<db:para>On press of the <db:code>[TAB]</db:code> key, the item inside the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> gets focus. If this item can handle <db:code>[TAB]</db:code> key press, focus will change accordingly within the item, otherwise the next widget in the focus chain gets focus.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link></db:member>
<db:member><db:link xlink:href="qtquick-quickwidgets-quickwidget-example.xml">Qt Quick Widgets Example</db:link></db:member>
<db:member><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QQuickWidget::ResizeMode</db:title>
<db:enumsynopsis>
<db:enumname>ResizeMode</db:enumname>
<db:enumitem>
<db:enumidentifier>SizeViewToRootObject</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SizeRootObjectToView</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum specifies how to resize the view.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::SizeViewToRootObject</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The view resizes with the root item in the QML.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::SizeRootObjectToView</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The view will automatically resize the root item to the size of the view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QQuickWidget::Status</db:title>
<db:enumsynopsis>
<db:enumname>Status</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ready</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Loading</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Error</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Specifies the loading status of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> has no source set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> has loaded and created the QML component.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is loading network data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>One or more errors occurred. Call <db:link xlink:href="qquickwidget.xml#errors">errors</db:link>() to retrieve a list of errors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="resizeMode-prop">
<db:title>resizeMode : ResizeMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>ResizeMode</db:type>
<db:varname>resizeMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">resizeMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setResizeMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Determines whether the view should resize the window contents.</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link> (the default), the view resizes to the size of the root item in the QML.</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link>, the view will automatically resize the root item to the size of the view.</db:para>
<db:para>Regardless of this property, the sizeHint of the view is the initial size of the root item. Note though that since QML may load dynamically, that size may change.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwidget.xml#ResizeMode-enum">QQuickWidget::ResizeMode</db:link></db:type> <db:emphasis role="bold">resizeMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeMode</db:emphasis>(<db:emphasis>QQuickWidget::ResizeMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#initialSize">initialSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>source</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">source</db:synopsisinfo>
<db:synopsisinfo role="setter">setSource</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the URL of the source of the QML component.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:note>
<db:para>Setting a source URL will result in the QML component being instantiated, even if the URL is unchanged from the current value.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml#source">source</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Status</db:type>
<db:varname>status</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">status</db:synopsisinfo>
<db:synopsisinfo role="notifier">statusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The component's current <db:link xlink:href="qquickwidget.xml#Status-enum">status</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml#statusChanged">statusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Status</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickWidget">
<db:title>[explicit] QQuickWidget::QQuickWidget(QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWidget(QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="QQuickWidget-1">
<db:title>QQuickWidget::QQuickWidget(QQmlEngine *<db:emphasis>engine</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickWidget</db:methodname>
<db:methodparam>
<db:type>QQmlEngine *</db:type>
<db:parameter>engine</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWidget(QQmlEngine *engine, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given QML <db:code role="parameter">engine</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note: In this case, the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> does not own the given <db:code role="parameter">engine</db:code> object; it is the caller's responsibility to destroy the engine. If the <db:code role="parameter">engine</db:code> is deleted before the view, <db:link xlink:href="qquickwidget.xml#status-prop">status</db:link>() will return <db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Error</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qquickwidget.xml#status-prop">status</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwidget.xml#errors">errors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQuickWidget-2">
<db:title>[explicit] QQuickWidget::QQuickWidget(const QUrl &amp;<db:emphasis>source</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickWidget</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWidget(const QUrl &amp;source, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given QML <db:code role="parameter">source</db:code> and <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickWidget">
<db:title>[override virtual] QQuickWidget::~QQuickWidget()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickWidget</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickWidget() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QQuickWidget::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragEnterEvent</db:methodname>
<db:methodparam>
<db:type>QDragEnterEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragEnterEvent(QDragEnterEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QQuickWidget::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragLeaveEvent</db:methodname>
<db:methodparam>
<db:type>QDragLeaveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragLeaveEvent(QDragLeaveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QQuickWidget::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dragMoveEvent</db:methodname>
<db:methodparam>
<db:type>QDragMoveEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dragMoveEvent(QDragMoveEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QQuickWidget::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>dropEvent</db:methodname>
<db:methodparam>
<db:type>QDropEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void dropEvent(QDropEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQuickWidget::engine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlEngine *</db:type>
<db:methodname>engine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlEngine * engine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> used for instantiating QML Components.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QQmlError&gt; QQuickWidget::errors() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QQmlError&gt;</db:type>
<db:methodname>errors</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QQmlError&gt; errors() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return the list of errors that occurred during the last compile or create operation. When the status is not <db:link xlink:href="qquickwidget.xml#Status-enum">Error</db:link>, an empty list is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QQuickWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>event</db:methodname>
<db:methodparam>
<db:type>QEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool event(QEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QQuickWidget::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusInEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusInEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusNextPrevChild">
<db:title>[override virtual protected] bool QQuickWidget::focusNextPrevChild(bool <db:emphasis>next</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>focusNextPrevChild</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>next</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool focusNextPrevChild(bool next) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusNextPrevChild" role="function">QWidget::focusNextPrevChild(bool next)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QQuickWidget::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>focusOutEvent</db:methodname>
<db:methodparam>
<db:type>QFocusEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void focusOutEvent(QFocusEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QSurfaceFormat QQuickWidget::format() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSurfaceFormat</db:type>
<db:methodname>format</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSurfaceFormat format() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the actual surface format.</db:para>
<db:para>If the widget has not yet been shown, the requested format is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabFramebuffer">
<db:title>QImage QQuickWidget::grabFramebuffer() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>grabFramebuffer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage grabFramebuffer() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Renders a frame and reads it back into an image.</db:para>
<db:note>
<db:para>This is a potentially expensive operation.</db:para>
</db:note>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QQuickWidget::hideEvent(<db:emphasis>QHideEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>hideEvent</db:methodname>
<db:methodparam>
<db:type>QHideEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hideEvent(QHideEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initialSize">
<db:title>QSize QQuickWidget::initialSize() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>initialSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize initialSize() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the initial size of the root object.</db:para>
<db:para>If <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> is <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link>, the root object will be resized to the size of the view. This function returns the size of the root object before it was resized.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QQuickWidget::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyPressEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyPressEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QQuickWidget::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>keyReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QKeyEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void keyReleaseEvent(QKeyEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseDoubleClickEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseDoubleClickEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseMoveEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseMoveEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QQuickWidget::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mousePressEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mousePressEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>mouseReleaseEvent</db:methodname>
<db:methodparam>
<db:type>QMouseEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mouseReleaseEvent(QMouseEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QQuickWidget::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paintEvent</db:methodname>
<db:methodparam>
<db:type>QPaintEvent *</db:type>
<db:parameter>event</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paintEvent(QPaintEvent *event) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="quickWindow">
<db:title>[since 5.5] QQuickWindow *QQuickWidget::quickWindow() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickWindow *</db:type>
<db:methodname>quickWindow</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickWindow * quickWindow() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the offscreen <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> which is used by this widget to drive the Qt Quick rendering. This is useful if you want to use <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> APIs that are not currently exposed by <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, for instance connecting to the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal in order to draw native OpenGL content below Qt Quick's own rendering.</db:para>
<db:warning>
<db:para>Use the return value of this function with caution. In particular, do not ever attempt to show the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>, and be very careful when using other <db:link xlink:href="qwindow.xml">QWindow</db:link>-only APIs.</db:para>
</db:warning>
<db:warning>
<db:para>The offscreen window may be deleted (and recreated) during the life time of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, particularly when the widget is moved to another <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. If you need to know when the window has been replaced, connect to its <db:link xlink:href="qobject.xml#destroyed">destroyed</db:link>() signal.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="rootContext">
<db:title>QQmlContext *QQuickWidget::rootContext() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQmlContext *</db:type>
<db:methodname>rootContext</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlContext * rootContext() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the root of the context hierarchy. Each QML component is instantiated in a <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>. <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>'s are essential for passing data to QML components. In QML, contexts are arranged hierarchically and this hierarchy is managed by the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="rootObject">
<db:title>QQuickItem *QQuickWidget::rootObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QQuickItem *</db:type>
<db:methodname>rootObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickItem * rootObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the view's root <db:link xlink:href="qquickitem.xml">item</db:link>. Can be null when <db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link>() has not been called, if it was called with broken <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> code or while the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> contents are being created.</db:para>
</db:section>
<db:section xml:id="sceneGraphError">
<db:title>void QQuickWidget::sceneGraphError(QQuickWindow::SceneGraphError <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>message</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sceneGraphError</db:methodname>
<db:methodparam>
<db:type>QQuickWindow::SceneGraphError</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>message</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void sceneGraphError(QQuickWindow::SceneGraphError error, const QString &amp;message)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an <db:code role="parameter">error</db:code> occurred during scene graph initialization.</db:para>
<db:para>Applications should connect to this signal if they wish to handle errors, like OpenGL context creation failures, in a custom way. When no slot is connected to the signal, the behavior will be different: Quick will print the <db:code role="parameter">message</db:code>, or show a message box, and terminate the application.</db:para>
<db:para>This signal will be emitted from the GUI thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#sceneGraphError">QQuickWindow::sceneGraphError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setClearColor">
<db:title>void QQuickWidget::setClearColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setClearColor</db:methodname>
<db:methodparam>
<db:type>const QColor &amp;</db:type>
<db:parameter>color</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setClearColor(const QColor &amp;color)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the clear <db:code role="parameter">color</db:code>. By default this is an opaque color.</db:para>
<db:para>To get a semi-transparent <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, call this function with <db:code role="parameter">color</db:code> set to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link>, set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> widget attribute on the top-level window, and request an alpha channel via <db:link xlink:href="qquickwidget.xml#setFormat">setFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#color-prop">QQuickWindow::setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QQuickWidget::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFormat</db:methodname>
<db:methodparam>
<db:type>const QSurfaceFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFormat(const QSurfaceFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the surface <db:code role="parameter">format</db:code> for the context and offscreen surface used by this widget.</db:para>
<db:para>Call this function when there is a need to request a context for a given OpenGL version or profile. The sizes for depth, stencil and alpha buffers are taken care of automatically and there is no need to request those explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">QWindow::setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#format">QWindow::format</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwidget.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSource">
<db:title>void QQuickWidget::setSource(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSource(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the source to the <db:code role="parameter">url</db:code>, loads the QML component and instantiates it.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Calling this method multiple times with the same URL will result in the QML component being reinstantiated.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qquickwidget.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#source">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QQuickWidget::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>showEvent</db:methodname>
<db:methodparam>
<db:type>QShowEvent *</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void showEvent(QShowEvent *) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="source">
<db:title>QUrl QQuickWidget::source() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>source</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl source() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source URL, if set.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qquickwidget.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusChanged">
<db:title>void QQuickWidget::statusChanged(QQuickWidget::Status <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>statusChanged</db:methodname>
<db:methodparam>
<db:type>QQuickWidget::Status</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">status</db:synopsisinfo>
<db:synopsisinfo role="signature">void statusChanged(QQuickWidget::Status status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the component's current <db:code role="parameter">status</db:code> changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qquickwidget.xml#status-prop">status</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QQuickWidget::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>wheelEvent</db:methodname>
<db:methodparam>
<db:type>QWheelEvent *</db:type>
<db:parameter>e</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wheelEvent(QWheelEvent *e) override</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
