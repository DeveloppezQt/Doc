<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickWidget Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> class provides a widget for displaying a Qt Quick user interface.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickWidget</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quickwidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This is a convenience wrapper for <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> which will automatically load and display a QML scene when given the URL of the main source file. Alternatively, you can instantiate your own objects using <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> and place them in a manually set up <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:para>Typical usage:</db:para>
<db:programlisting language="cpp">QQuickWidget *view = new QQuickWidget;
view-&gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));
view-&gt;show();
</db:programlisting>
<db:para>To receive errors related to loading and executing QML with <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, you can connect to the <db:link xlink:href="qquickwidget.xml#status-prop">statusChanged</db:link>() signal and monitor for <db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Error</db:link>. The errors are available via <db:link xlink:href="qquickwidget.xml#errors">QQuickWidget::errors</db:link>().</db:para>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> also manages sizing of the view and root object. By default, the <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> is <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link>, which will load the component and resize it to the size of the view. Alternatively the <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> may be set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link> which will resize the view to the size of the root object.</db:para>
<db:note>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is an alternative to using <db:link xlink:href="qquickview.xml">QQuickView</db:link> and <db:link xlink:href="qwidget.xml#createWindowContainer">QWidget::createWindowContainer</db:link>(). The restrictions on stacking order do not apply, making <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> the more flexible alternative, behaving more like an ordinary widget. This comes at the expense of performance. Unlike <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> and <db:link xlink:href="qquickview.xml">QQuickView</db:link>, <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> involves rendering into OpenGL framebuffer objects. This will naturally carry a minor performance hit.</db:para>
</db:note>
<db:note>
<db:para>Using <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> disables the threaded render loop on all platforms. This means that some of the benefits of threaded rendering, for example <db:link xlink:href="qml-qtquick-animator.xml">Animator</db:link> classes and vsync driven animations, will not be available.</db:para>
</db:note>
<db:note>
<db:para>Avoid calling <db:link xlink:href="qwidget.xml#winId">winId</db:link>() on a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. This function triggers the creation of a native window, resulting in reduced performance and possibly rendering glitches. The entire purpose of <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is to render Quick scenes without a separate native window, hence making it a native widget should always be avoided.</db:para>
</db:note>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>Putting other widgets underneath and making the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> transparent will not lead to the expected results: the widgets underneath will not be visible. This is because in practice the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is drawn before all other regular, non-OpenGL widgets, and so see-through types of solutions are not feasible. Other type of layouts, like having widgets on top of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, will function as expected.</db:para>
<db:para>When absolutely necessary, this limitation can be overcome by setting the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_AlwaysStackOnTop</db:link> attribute on the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>. Be aware, however that this breaks stacking order. For example it will not be possible to have other widgets on top of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, so it should only be used in situations where a semi-transparent <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with other widgets visible underneath is required.</db:para>
<db:para>This limitation only applies when there are other widgets underneath the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> inside the same window. Making the window semi-transparent, with other applications and the desktop visible in the background, is done in the traditional way: Set <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> on the top-level window, request an alpha channel, and change the Qt Quick Scenegraph's clear color to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link> via <db:link xlink:href="qquickwidget.xml#setClearColor">setClearColor</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-cppintegration-exposecppattributes.xml">Exposing Attributes of C++ Types to QML</db:link></db:member>
<db:member><db:link xlink:href="qtquick-quickwidgets-quickwidget-example.xml">Qt Quick Widgets Example</db:link></db:member>
<db:member><db:link xlink:href="qquickview.xml">QQuickView</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ResizeMode-enum">
<db:title>enum QQuickWidget::ResizeMode</db:title>
<db:para>This enum specifies how to resize the view.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::SizeViewToRootObject</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The view resizes with the root item in the QML.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::SizeRootObjectToView</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The view will automatically resize the root item to the size of the view.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Status-enum">
<db:title>enum QQuickWidget::Status</db:title>
<db:para>Specifies the loading status of the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> has no source set.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Ready</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> has loaded and created the QML component.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Loading</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is loading network data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link></db:emphasis>::Error</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>One or more errors occurred. Call <db:link xlink:href="qquickwidget.xml#errors">errors</db:link>() to retrieve a list of errors.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="resizeMode-prop">
<db:title>resizeMode : ResizeMode</db:title>
<db:para>Determines whether the view should resize the window contents.</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link> (the default), the view resizes to the size of the root item in the QML.</db:para>
<db:para>If this property is set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link>, the view will automatically resize the root item to the size of the view.</db:para>
<db:para>Regardless of this property, the sizeHint of the view is the initial size of the root item. Note though that since QML may load dynamically, that size may change.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwidget.xml#ResizeMode-enum">QQuickWidget::ResizeMode</db:link></db:type> <db:emphasis role="bold">resizeMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setResizeMode</db:emphasis>(<db:emphasis>QQuickWidget::ResizeMode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#initialSize">initialSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:para>This property holds the URL of the source of the QML component.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:note>
<db:para>Setting a source URL will result in the QML component being instantiated, even if the URL is unchanged from the current value.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml#source">source</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>url</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="status-prop">
<db:title>[read-only] status : const Status</db:title>
<db:para>The component's current <db:link xlink:href="qquickwidget.xml#Status-enum">status</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Status</db:link></db:type> <db:emphasis role="bold">status</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">statusChanged</db:emphasis>(<db:emphasis>QQuickWidget::Status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickWidget">
<db:title>[explicit] QQuickWidget::QQuickWidget(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="QQuickWidget-1">
<db:title>QQuickWidget::QQuickWidget(QQmlEngine *<db:emphasis>engine</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given QML <db:code role="parameter">engine</db:code> and <db:code role="parameter">parent</db:code>.</db:para>
<db:para>Note: In this case, the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> does not own the given <db:code role="parameter">engine</db:code> object; it is the caller's responsibility to destroy the engine. If the <db:code role="parameter">engine</db:code> is deleted before the view, <db:link xlink:href="qquickwidget.xml#status-prop">status</db:link>() will return <db:link xlink:href="qquickwidget.xml#Status-enum">QQuickWidget::Error</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#Status-enum">Status</db:link></db:member>
<db:member><db:link xlink:href="qquickwidget.xml#status-prop">status</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwidget.xml#errors">errors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QQuickWidget-2">
<db:title>[explicit] QQuickWidget::QQuickWidget(const QUrl &amp;<db:emphasis>source</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> with the given QML <db:code role="parameter">source</db:code> and <db:code role="parameter">parent</db:code>. The default value of <db:code role="parameter">parent</db:code> is 0.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickWidget">
<db:title>[virtual noexcept] QQuickWidget::~QQuickWidget()</db:title>
<db:para>Destroys the <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
</db:section>
<db:section xml:id="dragEnterEvent">
<db:title>[override virtual protected] void QQuickWidget::dragEnterEvent(QDragEnterEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragEnterEvent" role="function">QWidget::dragEnterEvent(QDragEnterEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragLeaveEvent">
<db:title>[override virtual protected] void QQuickWidget::dragLeaveEvent(QDragLeaveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragLeaveEvent" role="function">QWidget::dragLeaveEvent(QDragLeaveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dragMoveEvent">
<db:title>[override virtual protected] void QQuickWidget::dragMoveEvent(QDragMoveEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dragMoveEvent" role="function">QWidget::dragMoveEvent(QDragMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="dropEvent">
<db:title>[override virtual protected] void QQuickWidget::dropEvent(QDropEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#dropEvent" role="function">QWidget::dropEvent(QDropEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="engine">
<db:title>QQmlEngine *QQuickWidget::engine() const</db:title>
<db:para>Returns a pointer to the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> used for instantiating QML Components.</db:para>
</db:section>
<db:section xml:id="errors">
<db:title>QList&lt;QQmlError&gt; QQuickWidget::errors() const</db:title>
<db:para>Return the list of errors that occurred during the last compile or create operation. When the status is not <db:link xlink:href="qquickwidget.xml#Status-enum">Error</db:link>, an empty list is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#status-prop">status</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QQuickWidget::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QQuickWidget::focusInEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QQuickWidget::focusOutEvent(QFocusEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="format">
<db:title>QSurfaceFormat QQuickWidget::format() const</db:title>
<db:para>Returns the actual surface format.</db:para>
<db:para>If the widget has not yet been shown, the requested format is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabFramebuffer">
<db:title>QImage QQuickWidget::grabFramebuffer() const</db:title>
<db:para>Renders a frame and reads it back into an image.</db:para>
<db:note>
<db:para>This is a potentially expensive operation.</db:para>
</db:note>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QQuickWidget::hideEvent(<db:emphasis>QHideEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="initialSize">
<db:title>QSize QQuickWidget::initialSize() const</db:title>
<db:para>Returns the initial size of the root object.</db:para>
<db:para>If <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> is <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeRootObjectToView</db:link>, the root object will be resized to the size of the view. This function returns the size of the root object before it was resized.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QQuickWidget::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="keyReleaseEvent">
<db:title>[override virtual protected] void QQuickWidget::keyReleaseEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyReleaseEvent" role="function">QWidget::keyReleaseEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QQuickWidget::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QQuickWidget::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="quickWindow">
<db:title>[since 5.5] QQuickWindow *QQuickWidget::quickWindow() const</db:title>
<db:para>Returns the offscreen <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> which is used by this widget to drive the Qt Quick rendering. This is useful if you want to use <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> APIs that are not currently exposed by <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, for instance connecting to the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() signal in order to draw native OpenGL content below Qt Quick's own rendering.</db:para>
<db:warning>
<db:para>Use the return value of this function with caution. In particular, do not ever attempt to show the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>, and be very careful when using other <db:link xlink:href="qwindow.xml">QWindow</db:link>-only APIs.</db:para>
</db:warning>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="rootContext">
<db:title>QQmlContext *QQuickWidget::rootContext() const</db:title>
<db:para>This function returns the root of the context hierarchy. Each QML component is instantiated in a <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>. <db:link xlink:href="qqmlcontext.xml">QQmlContext</db:link>'s are essential for passing data to QML components. In QML, contexts are arranged hierarchically and this hierarchy is managed by the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="rootObject">
<db:title>QQuickItem *QQuickWidget::rootObject() const</db:title>
<db:para>Returns the view's root <db:link xlink:href="qquickitem.xml">item</db:link>. Can be null when setContents/<db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link> has not been called, if they were called with broken <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> code or while the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> contents are being created.</db:para>
</db:section>
<db:section xml:id="setClearColor">
<db:title>void QQuickWidget::setClearColor(const QColor &amp;<db:emphasis>color</db:emphasis>)</db:title>
<db:para>Sets the clear <db:code role="parameter">color</db:code>. By default this is an opaque color.</db:para>
<db:para>To get a semi-transparent <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>, call this function with <db:code role="parameter">color</db:code> set to <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::transparent</db:link>, set the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> widget attribute on the top-level window, and request an alpha channel via <db:link xlink:href="qquickwidget.xml#setFormat">setFormat</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwindow.xml#color-prop">QQuickWindow::setColor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QQuickWidget::setFormat(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the surface <db:code role="parameter">format</db:code> for the context and offscreen surface used by this widget.</db:para>
<db:para>Call this function when there is a need to request a context for a given OpenGL version or profile. The sizes for depth, stencil and alpha buffers are taken care of automatically and there is no need to request those explicitly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#setFormat">QWindow::setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#format">QWindow::format</db:link>()</db:member>
<db:member><db:link xlink:href="qquickwidget.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSource">
<db:title>void QQuickWidget::setSource(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the source to the <db:code role="parameter">url</db:code>, loads the QML component and instantiates it.</db:para>
<db:para>Ensure that the URL provided is full and correct, in particular, use <db:link xlink:href="qurl.xml#fromLocalFile">QUrl::fromLocalFile</db:link>() when loading a file from the local filesystem.</db:para>
<db:para>Calling this method multiple times with the same URL will result in the QML component being reinstantiated.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qquickwidget.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#source">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QQuickWidget::showEvent(<db:emphasis>QShowEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="source">
<db:title>QUrl QQuickWidget::source() const</db:title>
<db:para>Returns the source URL, if set.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qquickwidget.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qquickwidget.xml#setSource">setSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wheelEvent">
<db:title>[override virtual protected] void QQuickWidget::wheelEvent(QWheelEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#wheelEvent" role="function">QWidget::wheelEvent(QWheelEvent *event)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
