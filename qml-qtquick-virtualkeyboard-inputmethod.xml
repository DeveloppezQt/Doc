<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>InputMethod QML Type</db:title>
<db:productname>QtVirtualKeyboard</db:productname>
<db:edition>Qt Virtual Keyboard | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Virtual Keyboard</db:titleabbrev>
<db:abstract>
<db:para>Base type for creating input method in QML.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.VirtualKeyboard</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>InputMethod is part of <db:simplelist><db:member>qtvirtualkeyboard-internal-qml</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml">InputMethod</db:link> type lets you create a custom input method which can be assigned to <db:link xlink:href="qml-qtquick-virtualkeyboard-inputengine.xml">InputEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="inputContext-prop">
<db:title>[read-only] inputContext : InputContext</db:title>
<db:fieldsynopsis>
<db:type>InputContext</db:type>
<db:varname>inputContext</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The input context.</db:para>
</db:section>
<db:section xml:id="inputEngine-prop">
<db:title>[read-only] inputEngine : InputEngine</db:title>
<db:fieldsynopsis>
<db:type>InputEngine</db:type>
<db:varname>inputEngine</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The input engine.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="selectionListActiveItemChanged-signal">
<db:title>selectionListActiveItemChanged(int <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>The input method emits this signal when the current <db:code role="parameter">index</db:code> has changed in the selection list identified by <db:code role="parameter">type</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSelectionListActiveItemChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="selectionListChanged-signal">
<db:title>selectionListChanged(int <db:emphasis>type</db:emphasis>)</db:title>
<db:para>The input method emits this signal when the contents of the selection list are changed. The <db:code role="parameter">type</db:code> parameter specifies which selection list has changed.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSelectionListChanged</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="selectionListsChanged-signal">
<db:title>[since QtQuick.VirtualKeyboard 2.2] selectionListsChanged()</db:title>
<db:para>The input method emits this signal when the selection list types have changed. This signal will trigger a call to <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionLists-method">selectionLists</db:link>() method, allowing the input method to update the selection list types.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onSelectionListsChanged</db:code>.</db:para>
</db:note>
<db:para>This signal was introduced in QtQuick.VirtualKeyboard 2.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="clickPreeditText-method">
<db:title>[since QtQuick.VirtualKeyboard 2.4] bool clickPreeditText(int <db:emphasis>cursorPosition</db:emphasis>)</db:title>
<db:para>Called when the user clicks on pre-edit text at <db:code role="parameter">cursorPosition</db:code>.</db:para>
<db:para>The function should return <db:code>true</db:code> if it handles the event. Otherwise the input falls back to <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#reselect-method">reselect</db:link>() for further processing.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.4.</db:para>
</db:section>
<db:section xml:id="inputModes-method">
<db:title>list&lt;int&gt; inputModes(string <db:emphasis>locale</db:emphasis>)</db:title>
<db:para>Returns a list of input modes for <db:code role="parameter">locale</db:code>.</db:para>
</db:section>
<db:section xml:id="keyEvent-method">
<db:title>bool keyEvent(int <db:emphasis>key</db:emphasis>, string <db:emphasis>text</db:emphasis>, int <db:emphasis>modifiers</db:emphasis>)</db:title>
<db:para>The purpose of this method is to handle the key events generated by the the input engine.</db:para>
<db:para>The <db:code role="parameter">key</db:code> parameter specifies the code of the key to handle. The key code does not distinguish between capital and non-capital letters. The <db:code role="parameter">text</db:code> parameter contains the Unicode text for the key. The <db:code role="parameter">modifiers</db:code> parameter contains the key modifiers that apply to <db:code role="parameter">key</db:code>.</db:para>
<db:para>This method returns <db:code>true</db:code> if the key event was successfully handled. If the return value is <db:code>false</db:code>, the key event is redirected to the default input method for further processing.</db:para>
</db:section>
<db:section xml:id="patternRecognitionModes-method">
<db:title>[since QtQuick.VirtualKeyboard 2.0] list&lt;int&gt; patternRecognitionModes()</db:title>
<db:para>Returns list of supported pattern recognition modes.</db:para>
<db:para>This method is invoked by the input engine to query the list of supported pattern recognition modes.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="reselect-method">
<db:title>[since QtQuick.VirtualKeyboard 2.0] bool reselect(int <db:emphasis>cursorPosition</db:emphasis>, int <db:emphasis>reselectFlags</db:emphasis>)</db:title>
<db:para>This method attempts to reselect a word located at the <db:code role="parameter">cursorPosition</db:code>. The <db:code role="parameter">reselectFlags</db:code> define the rules for how the word should be selected in relation to the cursor position.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>InputEngine.WordBeforeCursor</db:code> Activate the word before the cursor. When this flag is used exclusively, the word must end exactly at the cursor.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.WordAfterCursor</db:code> Activate the word after the cursor. When this flag is used exclusively, the word must start exactly at the cursor.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.WordAtCursor</db:code> Activate the word at the cursor. This flag is a combination of the above flags with the exception that the word cannot start or stop at the cursor.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The method returns <db:code>true</db:code> if the word was successfully reselected.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="reset-method">
<db:title>reset()</db:title>
<db:para>This method is called by the input engine when this input method needs to be reset. The input method must reset its internal state only. The main difference to the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#update-method">update</db:link>() method is that reset() modifies only the input method state; it must not modify the input context.</db:para>
</db:section>
<db:section xml:id="selectionListData-method">
<db:title>var selectionListData(int <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>, int <db:emphasis>role</db:emphasis>)</db:title>
<db:para>Returns item data for a selection list identified by <db:code role="parameter">type</db:code>. The <db:code role="parameter">role</db:code> parameter specifies which data is requested. The <db:code role="parameter">index</db:code> parameter is a zero based index into the selecteion list.</db:para>
</db:section>
<db:section xml:id="selectionListItemCount-method">
<db:title>int selectionListItemCount(int <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns the number of items in the selection list identified by <db:code role="parameter">type</db:code>.</db:para>
</db:section>
<db:section xml:id="selectionListItemSelected-method">
<db:title>void selectionListItemSelected(int <db:emphasis>type</db:emphasis>, int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This method is called when an item at <db:code role="parameter">index</db:code> has been selected by the user. The selection list is identified by the <db:code role="parameter">type</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="selectionLists-method">
<db:title>list&lt;int&gt; selectionLists()</db:title>
<db:para>Returns the list of selection types used for this input method.</db:para>
<db:para>This method is called by input engine when the input method is being activated and every time the input method hints are updated. The input method can reserve selection lists by returning the desired selection list types.</db:para>
<db:para>The input method may request the input engine to update the selection lists at any time by emitting <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#selectionListsChanged-signal">selectionListsChanged</db:link>() signal. This signal will trigger a call to this method, allowing the input method to update the selection list types.</db:para>
</db:section>
<db:section xml:id="setInputMode-method">
<db:title>bool setInputMode(string <db:emphasis>locale</db:emphasis>, int <db:emphasis>inputMode</db:emphasis>)</db:title>
<db:para>Changes <db:code role="parameter">inputMode</db:code> and <db:code role="parameter">locale</db:code> for this input method. The method returns <db:code>true</db:code> if successful.</db:para>
</db:section>
<db:section xml:id="setTextCase-method">
<db:title>bool setTextCase(int <db:emphasis>textCase</db:emphasis>)</db:title>
<db:para>Updates <db:code role="parameter">textCase</db:code> for this input method. The method returns <db:code>true</db:code> if successful.</db:para>
<db:para>The possible values for the text case are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>InputEngine.Lower</db:code> Lower case text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>InputEngine.Upper</db:code> Upper case text.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="traceBegin-method">
<db:title>[since QtQuick.VirtualKeyboard 2.0] Trace traceBegin(int <db:emphasis>traceId</db:emphasis>, int <db:emphasis>patternRecognitionMode</db:emphasis>, var <db:emphasis>traceCaptureDeviceInfo</db:emphasis>, var <db:emphasis>traceScreenInfo</db:emphasis>)</db:title>
<db:para>This method is called when a trace interaction starts with the specified <db:code role="parameter">patternRecognitionMode</db:code>. The trace is uniquely identified by the <db:code role="parameter">traceId</db:code>. The <db:code role="parameter">traceCaptureDeviceInfo</db:code> provides information about the source device and the <db:code role="parameter">traceScreenInfo</db:code> provides information about the screen context.</db:para>
<db:para>If the input method accepts the event and wants to capture the trace input, it must return a new Trace object. This object must remain valid until the <db:link xlink:href="qml-qtquick-virtualkeyboard-inputmethod.xml#traceEnd-method">InputMethod.traceEnd</db:link>() method is called. If the Trace is rendered on screen, it remains there until the Trace object is destroyed.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="traceEnd-method">
<db:title>[since QtQuick.VirtualKeyboard 2.0] bool traceEnd(Trace <db:emphasis>trace</db:emphasis>)</db:title>
<db:para>This method is called when the trace interaction ends. The input method should destroy the <db:code role="parameter">trace</db:code> object at some point after this function is called. Returns <db:code>true</db:code> on success.</db:para>
<db:para>See the <db:link xlink:href="qtvirtualkeyboard-overview.xml#trace-api-for-input-methods">Trace API for Input Methods</db:link> how to access the gathered data.</db:para>
<db:para>This method was introduced in QtQuick.VirtualKeyboard 2.0.</db:para>
</db:section>
<db:section xml:id="update-method">
<db:title>update()</db:title>
<db:para>This method is called by the input engine when the input method needs to be updated. The input method must close the current pre-edit text and restore the internal state to the default.</db:para>
</db:section>
</db:section>
</db:article>
