<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsLineItem Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link> class provides a line item that you can add to a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsLineItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml" xlink:role="class">QGraphicsItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsLineItem is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>To set the item's line, pass a <db:link xlink:href="qlinef.xml">QLineF</db:link> to <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link>'s constructor, or call the <db:link xlink:href="qgraphicslineitem.xml#setLine">setLine</db:link>() function. The <db:link xlink:href="qgraphicslineitem.xml#line">line</db:link>() function returns the current line. By default the line is black with a width of 0, but you can change this by calling <db:link xlink:href="qgraphicslineitem.xml#setPen">setPen</db:link>().</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/graphicsview-lineitem.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link> uses the line and the pen width to provide a reasonable implementation of <db:link xlink:href="qgraphicslineitem.xml#boundingRect">boundingRect</db:link>(), <db:link xlink:href="qgraphicslineitem.xml#shape">shape</db:link>(), and <db:link xlink:href="qgraphicslineitem.xml#contains">contains</db:link>(). The <db:link xlink:href="qgraphicslineitem.xml#paint">paint</db:link>() function draws the line using the item's associated pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicspathitem.xml">QGraphicsPathItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsrectitem.xml">QGraphicsRectItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicsellipseitem.xml">QGraphicsEllipseItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicstextitem.xml">QGraphicsTextItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspolygonitem.xml">QGraphicsPolygonItem</db:link></db:member>
<db:member><db:link xlink:href="qgraphicspixmapitem.xml">QGraphicsPixmapItem</db:link></db:member>
<db:member><db:link xlink:href="graphicsview.xml">Graphics View Framework</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsLineItem">
<db:title>[explicit] QGraphicsLineItem::QGraphicsLineItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link>. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsLineItem-1">
<db:title>[explicit] QGraphicsLineItem::QGraphicsLineItem(const QLineF &amp;<db:emphasis>line</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link>, using <db:code role="parameter">line</db:code> as the default line. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QGraphicsLineItem-2">
<db:title>[explicit] QGraphicsLineItem::QGraphicsLineItem(qreal <db:emphasis>x1</db:emphasis>, qreal <db:emphasis>y1</db:emphasis>, qreal <db:emphasis>x2</db:emphasis>, qreal <db:emphasis>y2</db:emphasis>, QGraphicsItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link>, using the line between (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>) and (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>) as the default line. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>'s constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QGraphicsLineItem">
<db:title>[virtual noexcept] QGraphicsLineItem::~QGraphicsLineItem()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicslineitem.xml">QGraphicsLineItem</db:link>.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsLineItem::boundingRect() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="contains">
<db:title>[override virtual] bool QGraphicsLineItem::contains(const QPointF &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#contains" role="function">QGraphicsItem::contains(const QPointF &amp;point) const</db:link>.</db:para>
</db:section>
<db:section xml:id="isObscuredBy">
<db:title>[override virtual] bool QGraphicsLineItem::isObscuredBy(const QGraphicsItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#isObscuredBy" role="function">QGraphicsItem::isObscuredBy(const QGraphicsItem *item) const</db:link>.</db:para>
</db:section>
<db:section xml:id="line">
<db:title>QLineF QGraphicsLineItem::line() const</db:title>
<db:para>Returns the item's line, or a null line if no line has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslineitem.xml#setLine">setLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opaqueArea">
<db:title>[override virtual] QPainterPath QGraphicsLineItem::opaqueArea() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#opaqueArea" role="function">QGraphicsItem::opaqueArea() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsLineItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="pen">
<db:title>QPen QGraphicsLineItem::pen() const</db:title>
<db:para>Returns the item's pen, or a black solid 0-width pen if no pen has been set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslineitem.xml#setPen">setPen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLine">
<db:title>void QGraphicsLineItem::setLine(const QLineF &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:para>Sets the item's line to be the given <db:code role="parameter">line</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslineitem.xml#line">line</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLine-1">
<db:title>void QGraphicsLineItem::setLine(qreal <db:emphasis>x1</db:emphasis>, qreal <db:emphasis>y1</db:emphasis>, qreal <db:emphasis>x2</db:emphasis>, qreal <db:emphasis>y2</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the item's line to be the line between (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>) and (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>).</db:para>
<db:para>This is the same as calling <db:code>setLine(QLineF(x1, y1, x2, y2))</db:code>.</db:para>
</db:section>
<db:section xml:id="setPen">
<db:title>void QGraphicsLineItem::setPen(const QPen &amp;<db:emphasis>pen</db:emphasis>)</db:title>
<db:para>Sets the item's pen to <db:code role="parameter">pen</db:code>. If no pen is set, the line will be painted using a black solid 0-width pen.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslineitem.xml#pen">pen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shape">
<db:title>[override virtual] QPainterPath QGraphicsLineItem::shape() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#shape" role="function">QGraphicsItem::shape() const</db:link>.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsLineItem::type() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
