<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlApplicationEngine Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> provides a convenient way to load an application from a single QML file.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlApplicationEngine</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qqmlengine.xml" xlink:role="class">QQmlEngine</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class combines a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> and <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> to provide a convenient way to load a single QML file. It also exposes some central application functionality to QML, which a C++/QML hybrid application would normally control from C++.</db:para>
<db:para>It can be used like so:</db:para>
<db:programlisting language="cpp">#include &amp;lt;QGuiApplication&amp;gt;
#include &amp;lt;QQmlApplicationEngine&amp;gt;

int main(int argc, char *argv[])
{
    QGuiApplication app(argc, argv);
    QQmlApplicationEngine engine(&quot;main.qml&quot;);
    return app.exec();
}
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qquickview.xml">QQuickView</db:link>, <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> does not automatically create a root window. If you are using visual items from Qt Quick, you will need to place them inside of a <db:link xlink:href="qml-window.xml">Window</db:link>.</db:para>
<db:para>You can also use <db:link xlink:href="qcoreapplication.xml">QCoreApplication</db:link> with <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>, if you are not using any QML modules which require a <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> (such as <db:code>QtQuick</db:code>).</db:para>
<db:para>List of configuration changes from a default <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Connecting Qt.<db:link xlink:href="qqmlengine.xml#quit">quit</db:link>() to <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>Automatically loads translation files from an i18n directory adjacent to the main QML file.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Translation files must have &quot;qml_&quot; prefix e.g. qml_ja_JP.qm.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Translations are reloaded when the <db:code>QJSEngine::uiLanguage</db:code> / <db:code>Qt.uiLanguage</db:code> property is changed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Automatically sets an incubation controller if the scene contains a <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Automatically sets a <db:code>QQmlFileSelector</db:code> as the url interceptor, applying file selectors to all QML files and assets.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The engine behavior can be further tweaked by using the inherited methods from <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlApplicationEngine">
<db:title>QQmlApplicationEngine::QQmlApplicationEngine(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlApplicationEngine</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlApplicationEngine(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> with the given <db:code role="parameter">parent</db:code>. You will have to call <db:link xlink:href="qqmlapplicationengine.xml#load">load</db:link>() later in order to load a QML file.</db:para>
</db:section>
<db:section xml:id="QQmlApplicationEngine-1">
<db:title>QQmlApplicationEngine::QQmlApplicationEngine(const QUrl &amp;<db:emphasis>url</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlApplicationEngine</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlApplicationEngine(const QUrl &amp;url, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and loads the QML file at the given <db:code role="parameter">url</db:code>. This is provided as a convenience, and is the same as using the empty constructor and calling load afterwards.</db:para>
</db:section>
<db:section xml:id="QQmlApplicationEngine-2">
<db:title>QQmlApplicationEngine::QQmlApplicationEngine(const QString &amp;<db:emphasis>filePath</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QQmlApplicationEngine</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QQmlApplicationEngine(const QString &amp;filePath, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Create a new <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and loads the QML file at the given <db:code role="parameter">filePath</db:code>, which must be a local file path. If a relative path is given then it will be interpreted as relative to the working directory of the application.</db:para>
<db:para>This is provided as a convenience, and is the same as using the empty constructor and calling load afterwards.</db:para>
</db:section>
<db:section xml:id="dtor.QQmlApplicationEngine">
<db:title>[override virtual] QQmlApplicationEngine::~QQmlApplicationEngine()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlApplicationEngine</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlApplicationEngine() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and all QML objects it loaded.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>void QQmlApplicationEngine::load(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the root QML file located at <db:code role="parameter">url</db:code>. The object tree defined by the file is created immediately for local file urls. Remote urls are loaded asynchronously, listen to the <db:link xlink:href="qqmlapplicationengine.xml#objectCreated">objectCreated</db:link> signal to determine when the object tree is ready.</db:para>
<db:para>If an error occurs, the <db:link xlink:href="qqmlapplicationengine.xml#objectCreated">objectCreated</db:link> signal is emitted with a null pointer as parameter and error messages are printed with <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>.</db:para>
</db:section>
<db:section xml:id="load-1">
<db:title>void QQmlApplicationEngine::load(const QString &amp;<db:emphasis>filePath</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>load</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filePath</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void load(const QString &amp;filePath)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the root QML file located at <db:code role="parameter">filePath</db:code>. <db:code role="parameter">filePath</db:code> must be a path to a local file. If <db:code role="parameter">filePath</db:code> is a relative path, it is taken as relative to the application's working directory. The object tree defined by the file is instantiated immediately.</db:para>
<db:para>If an error occurs, error messages are printed with <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>.</db:para>
</db:section>
<db:section xml:id="loadData">
<db:title>void QQmlApplicationEngine::loadData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>loadData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void loadData(const QByteArray &amp;data, const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the QML given in <db:code role="parameter">data</db:code>. The object tree defined by <db:code role="parameter">data</db:code> is instantiated immediately.</db:para>
<db:para>If a <db:code role="parameter">url</db:code> is specified it is used as the base url of the component. This affects relative paths within the data and error messages.</db:para>
<db:para>If an error occurs, error messages are printed with <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>.</db:para>
</db:section>
<db:section xml:id="objectCreated">
<db:title>void QQmlApplicationEngine::objectCreated(QObject *<db:emphasis>object</db:emphasis>, const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>objectCreated</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void objectCreated(QObject *object, const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when an object finishes loading. If loading was successful, <db:code role="parameter">object</db:code> contains a pointer to the loaded object, otherwise the pointer is NULL.</db:para>
<db:para>The <db:code role="parameter">url</db:code> to the component the <db:code role="parameter">object</db:code> came from is also provided.</db:para>
<db:note>
<db:para>If the path to the component was provided as a <db:link xlink:href="qstring.xml">QString</db:link> containing a relative path, the <db:code role="parameter">url</db:code> will contain a fully resolved path to the file.</db:para>
</db:note>
</db:section>
<db:section xml:id="rootObjects">
<db:title>QList&lt;QObject *&gt; QQmlApplicationEngine::rootObjects() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QObject *&gt;</db:type>
<db:methodname>rootObjects</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QObject *&gt; rootObjects() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all the root objects instantiated by the <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link>. This will only contain objects loaded via <db:link xlink:href="qqmlapplicationengine.xml#load">load</db:link>() or a convenience constructor.</db:para>
<db:note>
<db:para>In Qt versions prior to 5.9, this function is marked as non-<db:code>const</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="setExtraFileSelectors">
<db:title>[since 6.0] void QQmlApplicationEngine::setExtraFileSelectors(const QStringList &amp;<db:emphasis>extraFileSelectors</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExtraFileSelectors</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>extraFileSelectors</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExtraFileSelectors(const QStringList &amp;extraFileSelectors)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">extraFileSelectors</db:code> to be passed to the internal <db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link> used for resolving URLs to local files. The <db:code role="parameter">extraFileSelectors</db:code> are applied when the first QML file is loaded. Setting them afterwards has no effect.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlfileselector.xml">QQmlFileSelector</db:link></db:member>
<db:member><db:link xlink:href="qfileselector.xml#setExtraSelectors">QFileSelector::setExtraSelectors</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setInitialProperties">
<db:title>[since 5.14] void QQmlApplicationEngine::setInitialProperties(const QVariantMap &amp;<db:emphasis>initialProperties</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setInitialProperties</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>initialProperties</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setInitialProperties(const QVariantMap &amp;initialProperties)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">initialProperties</db:code> with which the QML component gets initialized after it gets loaded.</db:para>
<db:programlisting language="cpp">QQmlApplicationEngine engine;

EventDatabase eventDatabase;
EventMonitor eventMonitor;

engine.setInitialProperties({
    { &quot;eventDatabase&quot;, QVariant::fromValue(&amp;amp;eventDatabase) },
    { &quot;eventMonitor&quot;, QVariant::fromValue(&amp;amp;eventMonitor) }
});
</db:programlisting>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlcomponent.xml#setInitialProperties">QQmlComponent::setInitialProperties</db:link></db:member>
<db:member><db:link xlink:href="qqmlapplicationengine.xml#load">QQmlApplicationEngine::load</db:link></db:member>
<db:member><db:link xlink:href="qqmlapplicationengine.xml#loadData">QQmlApplicationEngine::loadData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
