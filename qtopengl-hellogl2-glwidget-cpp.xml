<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Hello GL2 Example</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Hello GL2 example demonstrates the basic use of the OpenGL-related classes provided with Qt.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;glwidget.h&quot;
#include &lt;QMouseEvent&gt;
#include &lt;QOpenGLShaderProgram&gt;
#include &lt;QCoreApplication&gt;
#include &lt;math.h&gt;

GLWidget::GLWidget(QWidget *parent)
    : QOpenGLWidget(parent),
      m_xRot(0),
      m_yRot(0),
      m_zRot(0),
      m_program(0)
{
    m_core = QCoreApplication::arguments().contains(QStringLiteral(&quot;--coreprofile&quot;));
    // --transparent causes the clear color to be transparent. Therefore, on systems that
    // support it, the widget will become transparent apart from the logo.
    m_transparent = QCoreApplication::arguments().contains(QStringLiteral(&quot;--transparent&quot;));
    if (m_transparent) {
        QSurfaceFormat fmt = format();
        fmt.setAlphaBufferSize(8);
        setFormat(fmt);
    }
}

GLWidget::~GLWidget()
{
    cleanup();
}

QSize GLWidget::minimumSizeHint() const
{
    return QSize(50, 50);
}

QSize GLWidget::sizeHint() const
{
    return QSize(400, 400);
}

static void qNormalizeAngle(int &amp;angle)
{
    while (angle &lt; 0)
        angle += 360 * 16;
    while (angle &gt; 360 * 16)
        angle -= 360 * 16;
}

void GLWidget::setXRotation(int angle)
{
    qNormalizeAngle(angle);
    if (angle != m_xRot) {
        m_xRot = angle;
        emit xRotationChanged(angle);
        update();
    }
}

void GLWidget::setYRotation(int angle)
{
    qNormalizeAngle(angle);
    if (angle != m_yRot) {
        m_yRot = angle;
        emit yRotationChanged(angle);
        update();
    }
}

void GLWidget::setZRotation(int angle)
{
    qNormalizeAngle(angle);
    if (angle != m_zRot) {
        m_zRot = angle;
        emit zRotationChanged(angle);
        update();
    }
}

void GLWidget::cleanup()
{
    makeCurrent();
    m_logoVbo.destroy();
    delete m_program;
    m_program = 0;
    doneCurrent();
}

static const char *vertexShaderSourceCore =
    &quot;#version 150\n&quot;
    &quot;in vec4 vertex;\n&quot;
    &quot;in vec3 normal;\n&quot;
    &quot;out vec3 vert;\n&quot;
    &quot;out vec3 vertNormal;\n&quot;
    &quot;uniform mat4 projMatrix;\n&quot;
    &quot;uniform mat4 mvMatrix;\n&quot;
    &quot;uniform mat3 normalMatrix;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   vert = vertex.xyz;\n&quot;
    &quot;   vertNormal = normalMatrix * normal;\n&quot;
    &quot;   gl_Position = projMatrix * mvMatrix * vertex;\n&quot;
    &quot;}\n&quot;;

static const char *fragmentShaderSourceCore =
    &quot;#version 150\n&quot;
    &quot;in highp vec3 vert;\n&quot;
    &quot;in highp vec3 vertNormal;\n&quot;
    &quot;out highp vec4 fragColor;\n&quot;
    &quot;uniform highp vec3 lightPos;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   highp vec3 L = normalize(lightPos - vert);\n&quot;
    &quot;   highp float NL = max(dot(normalize(vertNormal), L), 0.0);\n&quot;
    &quot;   highp vec3 color = vec3(0.39, 1.0, 0.0);\n&quot;
    &quot;   highp vec3 col = clamp(color * 0.2 + color * 0.8 * NL, 0.0, 1.0);\n&quot;
    &quot;   fragColor = vec4(col, 1.0);\n&quot;
    &quot;}\n&quot;;

static const char *vertexShaderSource =
    &quot;attribute vec4 vertex;\n&quot;
    &quot;attribute vec3 normal;\n&quot;
    &quot;varying vec3 vert;\n&quot;
    &quot;varying vec3 vertNormal;\n&quot;
    &quot;uniform mat4 projMatrix;\n&quot;
    &quot;uniform mat4 mvMatrix;\n&quot;
    &quot;uniform mat3 normalMatrix;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   vert = vertex.xyz;\n&quot;
    &quot;   vertNormal = normalMatrix * normal;\n&quot;
    &quot;   gl_Position = projMatrix * mvMatrix * vertex;\n&quot;
    &quot;}\n&quot;;

static const char *fragmentShaderSource =
    &quot;varying highp vec3 vert;\n&quot;
    &quot;varying highp vec3 vertNormal;\n&quot;
    &quot;uniform highp vec3 lightPos;\n&quot;
    &quot;void main() {\n&quot;
    &quot;   highp vec3 L = normalize(lightPos - vert);\n&quot;
    &quot;   highp float NL = max(dot(normalize(vertNormal), L), 0.0);\n&quot;
    &quot;   highp vec3 color = vec3(0.39, 1.0, 0.0);\n&quot;
    &quot;   highp vec3 col = clamp(color * 0.2 + color * 0.8 * NL, 0.0, 1.0);\n&quot;
    &quot;   gl_FragColor = vec4(col, 1.0);\n&quot;
    &quot;}\n&quot;;

void GLWidget::initializeGL()
{
    // In this example the widget's corresponding top-level window can change
    // several times during the widget's lifetime. Whenever this happens, the
    // QOpenGLWidget's associated context is destroyed and a new one is created.
    // Therefore we have to be prepared to clean up the resources on the
    // aboutToBeDestroyed() signal, instead of the destructor. The emission of
    // the signal will be followed by an invocation of initializeGL() where we
    // can recreate all resources.
    connect(context(), &amp;QOpenGLContext::aboutToBeDestroyed, this, &amp;GLWidget::cleanup);

    initializeOpenGLFunctions();
    glClearColor(0, 0, 0, m_transparent ? 0 : 1);

    m_program = new QOpenGLShaderProgram;
    m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Vertex, m_core ? vertexShaderSourceCore : vertexShaderSource);
    m_program-&gt;addShaderFromSourceCode(QOpenGLShader::Fragment, m_core ? fragmentShaderSourceCore : fragmentShaderSource);
    m_program-&gt;bindAttributeLocation(&quot;vertex&quot;, 0);
    m_program-&gt;bindAttributeLocation(&quot;normal&quot;, 1);
    m_program-&gt;link();

    m_program-&gt;bind();
    m_projMatrixLoc = m_program-&gt;uniformLocation(&quot;projMatrix&quot;);
    m_mvMatrixLoc = m_program-&gt;uniformLocation(&quot;mvMatrix&quot;);
    m_normalMatrixLoc = m_program-&gt;uniformLocation(&quot;normalMatrix&quot;);
    m_lightPosLoc = m_program-&gt;uniformLocation(&quot;lightPos&quot;);

    // Create a vertex array object. In OpenGL ES 2.0 and OpenGL 2.x
    // implementations this is optional and support may not be present
    // at all. Nonetheless the below code works in all cases and makes
    // sure there is a VAO when one is needed.
    m_vao.create();
    QOpenGLVertexArrayObject::Binder vaoBinder(&amp;m_vao);

    // Setup our vertex buffer object.
    m_logoVbo.create();
    m_logoVbo.bind();
    m_logoVbo.allocate(m_logo.constData(), m_logo.count() * sizeof(GLfloat));

    // Store the vertex attribute bindings for the program.
    setupVertexAttribs();

    // Our camera never changes in this example.
    m_camera.setToIdentity();
    m_camera.translate(0, 0, -1);

    // Light position is fixed.
    m_program-&gt;setUniformValue(m_lightPosLoc, QVector3D(0, 0, 70));

    m_program-&gt;release();
}

void GLWidget::setupVertexAttribs()
{
    m_logoVbo.bind();
    QOpenGLFunctions *f = QOpenGLContext::currentContext()-&gt;functions();
    f-&gt;glEnableVertexAttribArray(0);
    f-&gt;glEnableVertexAttribArray(1);
    f-&gt;glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), 0);
    f-&gt;glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), reinterpret_cast&lt;void *&gt;(3 * sizeof(GLfloat)));
    m_logoVbo.release();
}

void GLWidget::paintGL()
{
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_CULL_FACE);

    m_world.setToIdentity();
    m_world.rotate(180.0f - (m_xRot / 16.0f), 1, 0, 0);
    m_world.rotate(m_yRot / 16.0f, 0, 1, 0);
    m_world.rotate(m_zRot / 16.0f, 0, 0, 1);

    QOpenGLVertexArrayObject::Binder vaoBinder(&amp;m_vao);
    m_program-&gt;bind();
    m_program-&gt;setUniformValue(m_projMatrixLoc, m_proj);
    m_program-&gt;setUniformValue(m_mvMatrixLoc, m_camera * m_world);
    QMatrix3x3 normalMatrix = m_world.normalMatrix();
    m_program-&gt;setUniformValue(m_normalMatrixLoc, normalMatrix);

    glDrawArrays(GL_TRIANGLES, 0, m_logo.vertexCount());

    m_program-&gt;release();
}

void GLWidget::resizeGL(int w, int h)
{
    m_proj.setToIdentity();
    m_proj.perspective(45.0f, GLfloat(w) / h, 0.01f, 100.0f);
}

void GLWidget::mousePressEvent(QMouseEvent *event)
{
    m_lastPos = event-&gt;pos();
}

void GLWidget::mouseMoveEvent(QMouseEvent *event)
{
    int dx = event-&gt;x() - m_lastPos.x();
    int dy = event-&gt;y() - m_lastPos.y();

    if (event-&gt;buttons() &amp; Qt::LeftButton) {
        setXRotation(m_xRot + 8 * dy);
        setYRotation(m_yRot + 8 * dx);
    } else if (event-&gt;buttons() &amp; Qt::RightButton) {
        setXRotation(m_xRot + 8 * dy);
        setZRotation(m_zRot + 8 * dx);
    }
    m_lastPos = event-&gt;pos();
}

</db:programlisting>
</db:article>
