<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QLineF Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qlinef.xml">QLineF</db:link> class provides a two-dimensional vector using floating point precision.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QLineF</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QLineF is part of <db:simplelist><db:member>painting</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qlinef.xml">QLineF</db:link> describes a finite length line (or line segment) on a two-dimensional surface. <db:link xlink:href="qlinef.xml">QLineF</db:link> defines the start and end points of the line using floating point accuracy for coordinates. Use the <db:link xlink:href="qlinef.xml#toLine">toLine</db:link>() function to retrieve an integer based copy of this line.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qline-point.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qline-coordinates.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The positions of the line's start and end points can be retrieved using the <db:link xlink:href="qlinef.xml#p1">p1</db:link>(), <db:link xlink:href="qlinef.xml#x1">x1</db:link>(), <db:link xlink:href="qlinef.xml#y1">y1</db:link>(), <db:link xlink:href="qlinef.xml#p2">p2</db:link>(), <db:link xlink:href="qlinef.xml#x2">x2</db:link>(), and <db:link xlink:href="qlinef.xml#y2">y2</db:link>() functions. The <db:link xlink:href="qlinef.xml#dx">dx</db:link>() and <db:link xlink:href="qlinef.xml#dy">dy</db:link>() functions return the horizontal and vertical components of the line, respectively.</db:para>
<db:para>The line's length can be retrieved using the <db:link xlink:href="qlinef.xml#length">length</db:link>() function, and altered using the <db:link xlink:href="qlinef.xml#setLength">setLength</db:link>() function. Similarly, <db:link xlink:href="qlinef.xml#angle">angle</db:link>() and <db:link xlink:href="qlinef.xml#setAngle">setAngle</db:link>() are respectively used for retrieving and altering the angle of the line. Use the <db:link xlink:href="qlinef.xml#isNull">isNull</db:link>() function to determine whether the <db:link xlink:href="qlinef.xml">QLineF</db:link> represents a valid line or a null line.</db:para>
<db:para>The <db:link xlink:href="qlinef.xml#intersects">intersects</db:link>() function determines the <db:link xlink:href="qlinef.xml#IntersectionType-typedef">IntersectionType</db:link> for this line and a given line, while the <db:link xlink:href="qlinef.xml#angleTo">angleTo</db:link>() function returns the angle between the lines. In addition, the <db:link xlink:href="qlinef.xml#unitVector">unitVector</db:link>() function returns a line that has the same starting point as this line, but with a length of only 1, while the <db:link xlink:href="qlinef.xml#normalVector">normalVector</db:link>() function returns a line that is perpendicular to this line with the same starting point and length.</db:para>
<db:para>Finally, the line can be translated a given offset using the <db:link xlink:href="qlinef.xml#translate">translate</db:link>() function, and can be traversed using the <db:link xlink:href="qlinef.xml#pointAt">pointAt</db:link>() function.</db:para>
<db:section xml:id="constraints">
<db:title>Constraints</db:title>
<db:para><db:link xlink:href="qline.xml">QLine</db:link> is limited to the minimum and maximum values for the int type. Operations on a <db:link xlink:href="qline.xml">QLine</db:link> that could potentially result in values outside this range will result in undefined behavior.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qline.xml">QLine</db:link></db:member>
<db:member><db:link xlink:href="qpolygonf.xml">QPolygonF</db:link></db:member>
<db:member><db:link xlink:href="qrectf.xml">QRectF</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="IntersectionType-typedef">
<db:title>[alias] QLineF::IntersectionType</db:title>
<db:typedefsynopsis>
<db:typedefname>IntersectionType</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Describes the intersection between two lines.</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qlinef-unbounded.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qlinef-bounded.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QLineF::UnboundedIntersection</db:para>
</db:td>
<db:td>
<db:para>QLineF::BoundedIntersection</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>NoIntersection</db:para>
</db:td>
<db:td>
<db:para>Indicates that the lines do not intersect; i.e. they are parallel.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>UnboundedIntersection</db:para>
</db:td>
<db:td>
<db:para>The two lines intersect, but not within the range defined by their lengths. This will be the case if the lines are not parallel. intersect() will also return this value if the intersect point is within the start and end point of only one of the lines.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>BoundedIntersection</db:para>
</db:td>
<db:td>
<db:para>The two lines intersect with each other within the start and end points of each line.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#intersect" role="deprecated">intersect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QLineF">
<db:title>QLineF::QLineF()</db:title>
<db:constructorsynopsis>
<db:methodname>QLineF</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null line.</db:para>
</db:section>
<db:section xml:id="QLineF-1">
<db:title>QLineF::QLineF(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLineF</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF(const QPointF &amp;p1, const QPointF &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a line object that represents the line between <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>.</db:para>
</db:section>
<db:section xml:id="QLineF-2">
<db:title>QLineF::QLineF(qreal <db:emphasis>x1</db:emphasis>, qreal <db:emphasis>y1</db:emphasis>, qreal <db:emphasis>x2</db:emphasis>, qreal <db:emphasis>y2</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLineF</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF(qreal x1, qreal y1, qreal x2, qreal y2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a line object that represents the line between (<db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code>) and (<db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>).</db:para>
</db:section>
<db:section xml:id="QLineF-3">
<db:title>QLineF::QLineF(const QLine &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QLineF</db:methodname>
<db:methodparam>
<db:type>const QLine &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF(const QLine &amp;line)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qlinef.xml">QLineF</db:link> object from the given integer-based <db:code role="parameter">line</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#toLine">toLine</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="p1">
<db:title>QPointF QLineF::p1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>p1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF p1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's start point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP1">setP1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#x1">x1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#y1">y1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="p2">
<db:title>QPointF QLineF::p2() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>p2</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF p2() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the line's end point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP2">setP2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#x2">x2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#y2">y2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x1">
<db:title>qreal QLineF::x1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>x1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal x1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x-coordinate of the line's start point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x2">
<db:title>qreal QLineF::x2() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>x2</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal x2() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the x-coordinate of the line's end point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y1">
<db:title>qreal QLineF::y1() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>y1</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal y1() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y-coordinate of the line's start point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y2">
<db:title>qreal QLineF::y2() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>y2</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal y2() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the y-coordinate of the line's end point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="angle">
<db:title>[since 4.4] qreal QLineF::angle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>angle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal angle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the angle of the line in degrees.</db:para>
<db:para>The return value will be in the range of values from 0.0 up to but not including 360.0. The angles are measured counter-clockwise from a point on the x-axis to the right of the origin (x &gt; 0).</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setAngle">setAngle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="angleTo">
<db:title>[since 4.4] qreal QLineF::angleTo(const QLineF &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>angleTo</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal angleTo(const QLineF &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the angle (in degrees) from this line to the given <db:code role="parameter">line</db:code>, taking the direction of the lines into account. If the lines do not intersect within their range, it is the intersection point of the extended lines that serves as origin (see QLineF::UnboundedIntersection).</db:para>
<db:para>The returned value represents the number of degrees you need to add to this line to make it have the same angle as the given <db:code role="parameter">line</db:code>, going counter-clockwise.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#intersect" role="deprecated">intersect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="center">
<db:title>[since 5.8] QPointF QLineF::center() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>center</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF center() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the center point of this line. This is equivalent to 0.5 * <db:link xlink:href="qlinef.xml#p1">p1</db:link>() + 0.5 * <db:link xlink:href="qlinef.xml#p2">p2</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="dx">
<db:title>qreal QLineF::dx() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dx</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dx() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the horizontal component of the line's vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#dy">dy</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#pointAt">pointAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dy">
<db:title>qreal QLineF::dy() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>dy</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal dy() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the vertical component of the line's vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#dx">dx</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#pointAt">pointAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromPolar">
<db:title>[static, since 4.4] QLineF QLineF::fromPolar(qreal <db:emphasis>length</db:emphasis>, qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>fromPolar</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF fromPolar(qreal length, qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qlinef.xml">QLineF</db:link> with the given <db:code role="parameter">length</db:code> and <db:code role="parameter">angle</db:code>.</db:para>
<db:para>The first point of the line will be on the origin.</db:para>
<db:para>Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="intersects">
<db:title>[since 5.14] QLineF::IntersectionType QLineF::intersects(const QLineF &amp;<db:emphasis>line</db:emphasis>, QPointF *<db:emphasis>intersectionPoint</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF::IntersectionType</db:type>
<db:methodname>intersects</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF *</db:type>
<db:parameter>intersectionPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF::IntersectionType intersects(const QLineF &amp;line, QPointF *intersectionPoint) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a value indicating whether or not <db:emphasis>this</db:emphasis> line intersects with the given <db:code role="parameter">line</db:code>.</db:para>
<db:para>The actual intersection point is extracted to <db:code role="parameter">intersectionPoint</db:code> (if the pointer is valid). If the lines are parallel, the intersection point is undefined.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QLineF::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the line is not set up with valid start and end point; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="length">
<db:title>qreal QLineF::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the line.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setLength">setLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="normalVector">
<db:title>QLineF QLineF::normalVector() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>normalVector</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF normalVector() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a line that is perpendicular to this line with the same starting point and length.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qlinef-normalvector.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#unitVector">unitVector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointAt">
<db:title>QPointF QLineF::pointAt(qreal <db:emphasis>t</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPointF</db:type>
<db:methodname>pointAt</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>t</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointF pointAt(qreal t) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the point at the parameterized position specified by <db:code role="parameter">t</db:code>. The function returns the line's start point if t = 0, and its end point if t = 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#dx">dx</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#dy">dy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setP1">
<db:title>[since 4.4] void QLineF::setP1(const QPointF &amp;<db:emphasis>p1</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setP1</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setP1(const QPointF &amp;p1)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the starting point of this line to <db:code role="parameter">p1</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP2">setP2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setP2">
<db:title>[since 4.4] void QLineF::setP2(const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setP2</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setP2(const QPointF &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the end point of this line to <db:code role="parameter">p2</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP1">setP1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAngle">
<db:title>[since 4.4] void QLineF::setAngle(qreal <db:emphasis>angle</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAngle</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>angle</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAngle(qreal angle)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the angle of the line to the given <db:code role="parameter">angle</db:code> (in degrees). This will change the position of the second point of the line such that the line has the given angle.</db:para>
<db:para>Positive values for the angles mean counter-clockwise while negative values mean the clockwise direction. Zero degrees is at the 3 o'clock position.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#angle">angle</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLength">
<db:title>void QLineF::setLength(qreal <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLength</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLength(qreal length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the length of the line to the given <db:code role="parameter">length</db:code>. <db:link xlink:href="qlinef.xml">QLineF</db:link> will move the end point - <db:link xlink:href="qlinef.xml#p2">p2</db:link>() - of the line to give the line its new length.</db:para>
<db:para>If the line is a null line, the length will remain zero regardless of the length specified.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#length">length</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setLine">
<db:title>[since 4.4] void QLineF::setLine(qreal <db:emphasis>x1</db:emphasis>, qreal <db:emphasis>y1</db:emphasis>, qreal <db:emphasis>x2</db:emphasis>, qreal <db:emphasis>y2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLine</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>x2</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>y2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLine(qreal x1, qreal y1, qreal x2, qreal y2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this line to the start in <db:code role="parameter">x1</db:code>, <db:code role="parameter">y1</db:code> and end in <db:code role="parameter">x2</db:code>, <db:code role="parameter">y2</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP1">setP1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#setP2">setP2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPoints">
<db:title>[since 4.4] void QLineF::setPoints(const QPointF &amp;<db:emphasis>p1</db:emphasis>, const QPointF &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPoints</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPoints(const QPointF &amp;p1, const QPointF &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the start point of this line to <db:code role="parameter">p1</db:code> and the end point of this line to <db:code role="parameter">p2</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#setP1">setP1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#setP2">setP2</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p1">p1</db:link>()</db:member>
<db:member><db:link xlink:href="qlinef.xml#p2">p2</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLine">
<db:title>QLine QLineF::toLine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLine</db:type>
<db:methodname>toLine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLine toLine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an integer based copy of this line.</db:para>
<db:para>Note that the returned line's start and end points are rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#QLineF">QLineF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="translate">
<db:title>void QLineF::translate(const QPointF &amp;<db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(const QPointF &amp;offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Translates this line by the given <db:code role="parameter">offset</db:code>.</db:para>
</db:section>
<db:section xml:id="translate-1">
<db:title>void QLineF::translate(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>translate</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void translate(qreal dx, qreal dy)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Translates this line the distance specified by <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>.</db:para>
</db:section>
<db:section xml:id="translated">
<db:title>[since 4.4] QLineF QLineF::translated(const QPointF &amp;<db:emphasis>offset</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF translated(const QPointF &amp;offset) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns this line translated by the given <db:code role="parameter">offset</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="translated-1">
<db:title>[since 4.4] QLineF QLineF::translated(qreal <db:emphasis>dx</db:emphasis>, qreal <db:emphasis>dy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>translated</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dx</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>dy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF translated(qreal dx, qreal dy) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns this line translated the distance specified by <db:code role="parameter">dx</db:code> and <db:code role="parameter">dy</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
<db:section xml:id="unitVector">
<db:title>QLineF QLineF::unitVector() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF</db:type>
<db:methodname>unitVector</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF unitVector() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the unit vector for this line, i.e a line starting at the same point as <db:emphasis>this</db:emphasis> line with a length of 1.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#normalVector">normalVector</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QLineF::operator!=(const QLineF &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QLineF &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the given <db:code role="parameter">line</db:code> is not the same as <db:emphasis>this</db:emphasis> line.</db:para>
<db:para>A line is different from another line if their start or end points differ, or the internal order of the points is different.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QLineF::operator==(const QLineF &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QLineF &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the given <db:code role="parameter">line</db:code> is the same as this line.</db:para>
<db:para>A line is identical to another line if the start and end points are identical, and the internal order of the points is the same.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QLineF &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;stream, const QLineF &amp;line)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the given <db:code role="parameter">line</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QLineF &amp;<db:emphasis>line</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>stream</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;stream, QLineF &amp;line)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a line from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">line</db:code> and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QLineF</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qlinef.xml">QLineF</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-type-documentation">
<db:title>Obsolete Member Type Documentation</db:title>
<db:section xml:id="IntersectType-enum">
<db:title>enum QLineF::IntersectType</db:title>
<db:enumsynopsis>
<db:enumname>IntersectType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoIntersection</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BoundedIntersection</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnboundedIntersection</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qlinef.xml#IntersectionType-typedef">QLineF::IntersectionType</db:link> instead.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlinef.xml">QLineF</db:link></db:emphasis>::NoIntersection</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Lines do not intersect.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlinef.xml">QLineF</db:link></db:emphasis>::UnboundedIntersection</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Lines intersect, but not within the range defined by their lengths.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qlinef.xml">QLineF</db:link></db:emphasis>::BoundedIntersection</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Lnes intersect within the range defined by their lengths.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="angle-1">
<db:title>qreal QLineF::angle(const QLineF &amp;<db:emphasis>line</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>angle</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal angle(const QLineF &amp;line) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns the angle (in degrees) between this line and the given <db:code role="parameter">line</db:code>, taking the direction of the lines into account. If the lines do not intersect within their range, it is the intersection point of the extended lines that serves as origin (see <db:link xlink:href="qlinef.xml#IntersectType-enum">QLineF::UnboundedIntersection</db:link>).</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qlinef-angle-identicaldirection.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/qlinef-angle-oppositedirection.png"/>
</db:imageobject>
</db:inlinemediaobject></db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>When the lines are parallel, this function returns 0 if they have the same direction; otherwise it returns 180.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlinef.xml#intersect">intersect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intersect">
<db:title>QLineF::IntersectType QLineF::intersect(const QLineF &amp;<db:emphasis>line</db:emphasis>, QPointF *<db:emphasis>intersectionPoint</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QLineF::IntersectType</db:type>
<db:methodname>intersect</db:methodname>
<db:methodparam>
<db:type>const QLineF &amp;</db:type>
<db:parameter>line</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointF *</db:type>
<db:parameter>intersectionPoint</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLineF::IntersectType intersect(const QLineF &amp;line, QPointF *intersectionPoint) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qlinef.xml#intersects">intersects</db:link>() instead</db:para>
<db:para>Returns a value indicating whether or not <db:emphasis>this</db:emphasis> line intersects with the given <db:code role="parameter">line</db:code>.</db:para>
<db:para>The actual intersection point is extracted to <db:code role="parameter">intersectionPoint</db:code> (if the pointer is valid). If the lines are parallel, the intersection point is undefined.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
