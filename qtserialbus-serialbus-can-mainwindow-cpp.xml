<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CAN Bus example</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example sends and receives CAN bus frames.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the QtSerialBus module.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;mainwindow.h&quot;
#include &quot;ui_mainwindow.h&quot;
#include &quot;connectdialog.h&quot;

#include &amp;lt;QCanBus&amp;gt;
#include &amp;lt;QCanBusFrame&amp;gt;
#include &amp;lt;QCloseEvent&amp;gt;
#include &amp;lt;QDesktopServices&amp;gt;
#include &amp;lt;QTimer&amp;gt;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui::MainWindow)
{
    m_ui-&amp;gt;setupUi(this);

    m_connectDialog = new ConnectDialog;

    m_status = new QLabel;
    m_ui-&amp;gt;statusBar-&amp;gt;addPermanentWidget(m_status);

    m_written = new QLabel;
    m_ui-&amp;gt;statusBar-&amp;gt;addWidget(m_written);

    initActionsConnections();
    QTimer::singleShot(50, m_connectDialog, &amp;amp;ConnectDialog::show);
}

MainWindow::~MainWindow()
{
    delete m_canDevice;

    delete m_connectDialog;
    delete m_ui;
}

void MainWindow::initActionsConnections()
{
    m_ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(false);
    m_ui-&amp;gt;sendFrameBox-&amp;gt;setEnabled(false);

    connect(m_ui-&amp;gt;sendFrameBox, &amp;amp;SendFrameBox::sendFrame, this, &amp;amp;MainWindow::sendFrame);
    connect(m_ui-&amp;gt;actionConnect, &amp;amp;QAction::triggered, m_connectDialog, &amp;amp;ConnectDialog::show);
    connect(m_connectDialog, &amp;amp;QDialog::accepted, this, &amp;amp;MainWindow::connectDevice);
    connect(m_ui-&amp;gt;actionDisconnect, &amp;amp;QAction::triggered, this, &amp;amp;MainWindow::disconnectDevice);
    connect(m_ui-&amp;gt;actionQuit, &amp;amp;QAction::triggered, this, &amp;amp;QWidget::close);
    connect(m_ui-&amp;gt;actionAboutQt, &amp;amp;QAction::triggered, qApp, &amp;amp;QApplication::aboutQt);
    connect(m_ui-&amp;gt;actionClearLog, &amp;amp;QAction::triggered, m_ui-&amp;gt;receivedMessagesEdit, &amp;amp;QTextEdit::clear);
    connect(m_ui-&amp;gt;actionPluginDocumentation, &amp;amp;QAction::triggered, this, []() {
        QDesktopServices::openUrl(QUrl(&quot;http://doc.qt.io/qt-5/qtcanbus-backends.html#can-bus-plugins&quot;));
    });
}

void MainWindow::processErrors(QCanBusDevice::CanBusError error) const
{
    switch (error) {
    case QCanBusDevice::ReadError:
    case QCanBusDevice::WriteError:
    case QCanBusDevice::ConnectionError:
    case QCanBusDevice::ConfigurationError:
    case QCanBusDevice::UnknownError:
        m_status-&amp;gt;setText(m_canDevice-&amp;gt;errorString());
        break;
    default:
        break;
    }
}

void MainWindow::connectDevice()
{
    const ConnectDialog::Settings p = m_connectDialog-&amp;gt;settings();

    QString errorString;
    m_canDevice = QCanBus::instance()-&amp;gt;createDevice(p.pluginName, p.deviceInterfaceName,
                                                    &amp;amp;errorString);
    if (!m_canDevice) {
        m_status-&amp;gt;setText(tr(&quot;Error creating device '%1', reason: '%2'&quot;)
                          .arg(p.pluginName).arg(errorString));
        return;
    }

    m_numberFramesWritten = 0;

    connect(m_canDevice, &amp;amp;QCanBusDevice::errorOccurred, this, &amp;amp;MainWindow::processErrors);
    connect(m_canDevice, &amp;amp;QCanBusDevice::framesReceived, this, &amp;amp;MainWindow::processReceivedFrames);
    connect(m_canDevice, &amp;amp;QCanBusDevice::framesWritten, this, &amp;amp;MainWindow::processFramesWritten);

    if (p.useConfigurationEnabled) {
        for (const ConnectDialog::ConfigurationItem &amp;amp;item : p.configurations)
            m_canDevice-&amp;gt;setConfigurationParameter(item.first, item.second);
    }

    if (!m_canDevice-&amp;gt;connectDevice()) {
        m_status-&amp;gt;setText(tr(&quot;Connection error: %1&quot;).arg(m_canDevice-&amp;gt;errorString()));

        delete m_canDevice;
        m_canDevice = nullptr;
    } else {
        m_ui-&amp;gt;actionConnect-&amp;gt;setEnabled(false);
        m_ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(true);

        m_ui-&amp;gt;sendFrameBox-&amp;gt;setEnabled(true);

        const QVariant bitRate = m_canDevice-&amp;gt;configurationParameter(QCanBusDevice::BitRateKey);
        if (bitRate.isValid()) {
            const bool isCanFd =
                    m_canDevice-&amp;gt;configurationParameter(QCanBusDevice::CanFdKey).toBool();
            const QVariant dataBitRate =
                    m_canDevice-&amp;gt;configurationParameter(QCanBusDevice::DataBitRateKey);
            if (isCanFd &amp;amp;&amp;amp; dataBitRate.isValid()) {
                m_status-&amp;gt;setText(tr(&quot;Plugin: %1, connected to %2 at %3 / %4 kBit/s&quot;)
                                  .arg(p.pluginName).arg(p.deviceInterfaceName)
                                  .arg(bitRate.toInt() / 1000).arg(dataBitRate.toInt() / 1000));
            } else {
                m_status-&amp;gt;setText(tr(&quot;Plugin: %1, connected to %2 at %3 kBit/s&quot;)
                                  .arg(p.pluginName).arg(p.deviceInterfaceName)
                                  .arg(bitRate.toInt() / 1000));
            }
        } else {
            m_status-&amp;gt;setText(tr(&quot;Plugin: %1, connected to %2&quot;)
                    .arg(p.pluginName).arg(p.deviceInterfaceName));
        }
    }
}

void MainWindow::disconnectDevice()
{
    if (!m_canDevice)
        return;

    m_canDevice-&amp;gt;disconnectDevice();
    delete m_canDevice;
    m_canDevice = nullptr;

    m_ui-&amp;gt;actionConnect-&amp;gt;setEnabled(true);
    m_ui-&amp;gt;actionDisconnect-&amp;gt;setEnabled(false);

    m_ui-&amp;gt;sendFrameBox-&amp;gt;setEnabled(false);

    m_status-&amp;gt;setText(tr(&quot;Disconnected&quot;));
}

void MainWindow::processFramesWritten(qint64 count)
{
    m_numberFramesWritten += count;
    m_written-&amp;gt;setText(tr(&quot;%1 frames written&quot;).arg(m_numberFramesWritten));
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    m_connectDialog-&amp;gt;close();
    event-&amp;gt;accept();
}

static QString frameFlags(const QCanBusFrame &amp;amp;frame)
{
    QString result = QLatin1String(&quot; --- &quot;);

    if (frame.hasBitrateSwitch())
        result[1] = QLatin1Char('B');
    if (frame.hasErrorStateIndicator())
        result[2] = QLatin1Char('E');
    if (frame.hasLocalEcho())
        result[3] = QLatin1Char('L');

    return result;
}

void MainWindow::processReceivedFrames()
{
    if (!m_canDevice)
        return;

    while (m_canDevice-&amp;gt;framesAvailable()) {
        const QCanBusFrame frame = m_canDevice-&amp;gt;readFrame();

        QString view;
        if (frame.frameType() == QCanBusFrame::ErrorFrame)
            view = m_canDevice-&amp;gt;interpretErrorFrame(frame);
        else
            view = frame.toString();

        const QString time = QString::fromLatin1(&quot;%1.%2  &quot;)
                .arg(frame.timeStamp().seconds(), 10, 10, QLatin1Char(' '))
                .arg(frame.timeStamp().microSeconds() / 100, 4, 10, QLatin1Char('0'));

        const QString flags = frameFlags(frame);

        m_ui-&amp;gt;receivedMessagesEdit-&amp;gt;append(time + flags + view);
    }
}

void MainWindow::sendFrame(const QCanBusFrame &amp;amp;frame) const
{
    if (!m_canDevice)
        return;

    m_canDevice-&amp;gt;writeFrame(frame);
}

</db:programlisting>
</db:article>
