<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Map Viewer (QML)</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Map Viewer example shows how to display and interact with a map, search for an address, and find driving directions.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

import QtQuick 2.5
import QtQuick.Controls 1.4
import QtLocation 5.6

MenuBar {
    property variant  providerMenu: providerMenu
    property variant  mapTypeMenu: mapTypeMenu
    property variant  toolsMenu: toolsMenu
    property alias isFollowMe: toolsMenu.isFollowMe
    property alias isMiniMap: toolsMenu.isMiniMap

    signal selectProvider(string providerName)
    signal selectMapType(variant mapType)
    signal selectTool(string tool);
    signal toggleMapState(string state)

    Menu {
        id: providerMenu
        title: qsTr(&quot;Provider&quot;)

        function createMenu(plugins)
        {
            clear()
            for (var i = 0; i &amp;lt; plugins.length; i++) {
                createProviderMenuItem(plugins[i]);
            }
        }

        function createProviderMenuItem(provider)
        {
            var item = addItem(provider);
            item.checkable = true;
            item.triggered.connect(function(){selectProvider(provider)})
        }
    }

    Menu {
        id: mapTypeMenu
        title: qsTr(&quot;MapType&quot;)

        function createMenu(map)
        {
            clear()
            for (var i = 0; i&amp;lt;map.supportedMapTypes.length; i++) {
                createMapTypeMenuItem(map.supportedMapTypes[i]).checked =
                        (map.activeMapType === map.supportedMapTypes[i]);
            }
        }

        function createMapTypeMenuItem(mapType)
        {
            var item = addItem(mapType.name);
            item.checkable = true;
            item.triggered.connect(function(){selectMapType(mapType)})
            return item;
        }
    }

    Menu {
        id: toolsMenu
        property bool isFollowMe: false;
        property bool isMiniMap: false;
        title: qsTr(&quot;Tools&quot;)

        function createMenu(map)
        {
            clear()
            if (map.plugin.supportsGeocoding(Plugin.ReverseGeocodingFeature)) {
                addItem(qsTr(&quot;Reverse geocode&quot;)).triggered.connect(function(){selectTool(&quot;RevGeocode&quot;)})
            }
            if (map.plugin.supportsGeocoding()) {
                addItem(qsTr(&quot;Geocode&quot;)).triggered.connect(function(){selectTool(&quot;Geocode&quot;)})
            }
            if (map.plugin.supportsRouting()) {
                addItem(qsTr(&quot;Route with coordinates&quot;)).triggered.connect(function(){selectTool(&quot;CoordinateRoute&quot;)})
                addItem(qsTr(&quot;Route with address&quot;)).triggered.connect(function(){selectTool(&quot;AddressRoute&quot;)})
            }

            var item = addItem(&quot;&quot;)
            item.text = Qt.binding(function() { return isMiniMap ? qsTr(&quot;Hide minimap&quot;) : qsTr(&quot;Minimap&quot;) })
            item.triggered.connect(function() {toggleMapState(&quot;MiniMap&quot;)})

            item = addItem(&quot;&quot;)
            item.text = Qt.binding(function() { return isFollowMe ? qsTr(&quot;Stop following&quot;) : qsTr(&quot;Follow me&quot;)})
            item.triggered.connect(function() {toggleMapState(&quot;FollowMe&quot;)})

            addItem(qsTr(&quot;Language&quot;)).triggered.connect(function(){selectTool(&quot;Language&quot;)})
            addItem(qsTr(&quot;Prefetch Map Data&quot;)).triggered.connect(function(){selectTool(&quot;Prefetch&quot;)})
            addItem(qsTr(&quot;Clear Map Data&quot;)).triggered.connect(function(){selectTool(&quot;Clear&quot;)})
        }
    }
}

</db:programlisting>
</db:article>
