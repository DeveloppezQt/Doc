<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple HTTP Server</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Simple example of how to set up an HTTP server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/browserwindow.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to set up a server using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> class. The server is bound to an incoming port using the <db:code>listen()</db:code> function, and the <db:code>route()</db:code> function is used to add a handler for each of several different incoming URLs. For one of the URLs, &quot;/auth&quot;, <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc7617">Basic HTTP Authentication</db:link> is used.</db:para>
<db:programlisting language="cpp">const auto sslCertificateChain =
        QSslCertificate::fromPath(QStringLiteral(&quot;:/assets/certificate.crt&quot;));
if (sslCertificateChain.empty()) {
    qWarning() &amp;lt;&amp;lt; QCoreApplication::translate(&quot;QHttpServerExample&quot;,
                                              &quot;Couldn't retrieve SSL certificate from file.&quot;);
    return -1;
}
QFile privateKeyFile(QStringLiteral(&quot;:/assets/private.key&quot;));
if (!privateKeyFile.open(QIODevice::ReadOnly)) {
    qWarning() &amp;lt;&amp;lt; QCoreApplication::translate(&quot;QHttpServerExample&quot;,
                                              &quot;Couldn't open file for reading: %1&quot;)
                  .arg(privateKeyFile.errorString());
    return -1;
}
httpServer.sslSetup(sslCertificateChain.front(), QSslKey(&amp;amp;privateKeyFile, QSsl::Rsa));
privateKeyFile.close();

const auto sslPort = httpServer.listen(QHostAddress::Any);
if (!sslPort) {
    qWarning() &amp;lt;&amp;lt; QCoreApplication::translate(&quot;QHttpServerExample&quot;,
                                              &quot;Server failed to listen on a port.&quot;);
    return -1;
}
</db:programlisting>
<db:para>In the above example <db:code>QSslConfiguration</db:code> is used to show how to create an SSL configuration for a <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> to serve HTTPS traffic.</db:para>
<db:programlisting language="cpp">httpServer.afterRequest([](QHttpServerResponse &amp;amp;&amp;amp;resp) {
    resp.setHeader(&quot;Server&quot;, &quot;Qt HTTP Server&quot;);
    return std::move(resp);
});
</db:programlisting>
<db:para>The above example shows how to use the <db:code>afterRequest()</db:code> function of the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> to change the <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object after it has been handled by the <db:code>route()</db:code> function. It demonstrates how HTTP headers can be added to the response.</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="simple/CMakeLists.txt">simple/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/main.cpp">simple/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="simple/simple.pro">simple/simple.pro</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="simple/assets/qt-logo.png">simple/assets/qt-logo.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
