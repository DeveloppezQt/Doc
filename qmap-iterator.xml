<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>iterator Class</db:title>
<db:subtitle>QMap::iterator</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> class provides an STL-style non-const iterator for <db:link xlink:href="qmap.xml">QMap</db:link> and <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>iterator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link> features both <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterators</db:link> and <db:link xlink:href="containers.xml#java-style-iterators">Java-style iterators</db:link>. The STL-style iterators are more low-level and more cumbersome to use; on the other hand, they are slightly faster and, for developers who already know STL, have the advantage of familiarity.</db:para>
<db:para><db:link xlink:href="qmap.xml">QMap</db:link>&lt;Key, T&gt;::iterator allows you to iterate over a <db:link xlink:href="qmap.xml">QMap</db:link> (or <db:link xlink:href="qmultimap.xml">QMultiMap</db:link>) and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const <db:link xlink:href="qmap.xml">QMap</db:link>, you should use <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link>. It is generally good practice to use <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link> on a non-const <db:link xlink:href="qmap.xml">QMap</db:link> as well, unless you need to change the <db:link xlink:href="qmap.xml">QMap</db:link> through the iterator. Const iterators are slightly faster, and can improve code readability.</db:para>
<db:para>The default <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> constructor creates an uninitialized iterator. You must initialize it using a <db:link xlink:href="qmap.xml">QMap</db:link> function like QMap::begin(), QMap::end(), or QMap::find() before you can start iterating. Here's a typical loop that prints all the (key, value) pairs stored in a map:</db:para>
<db:programlisting language="cpp">QMap&lt;QString, int&gt; map;
map.insert(&quot;January&quot;, 1);
map.insert(&quot;February&quot;, 2);
...
map.insert(&quot;December&quot;, 12);

QMap&lt;QString, int&gt;::iterator i;
for (i = map.begin(); i != map.end(); ++i)
    cout &lt;&lt; i.key() &lt;&lt; &quot;: &quot; &lt;&lt; i.value() &lt;&lt; endl;
</db:programlisting>
<db:para>Unlike <db:link xlink:href="qhash.xml#the-qhash-hashing-function">QHash</db:link>, which stores its items in an arbitrary order, <db:link xlink:href="qmap.xml">QMap</db:link> stores its items ordered by key. Items that share the same key (because they were inserted using QMap::insertMulti(), or due to a unite()) will appear consecutively, from the most recently to the least recently inserted value.</db:para>
<db:para>Let's see a few examples of things we can do with a <db:link xlink:href="qmap-iterator.xml">QMap::iterator</db:link> that we cannot do with a <db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link>. Here's an example that increments every value stored in the <db:link xlink:href="qmap.xml">QMap</db:link> by 2:</db:para>
<db:programlisting language="cpp">QMap&lt;QString, int&gt;::iterator i;
for (i = map.begin(); i != map.end(); ++i)
    i.value() += 2;
</db:programlisting>
<db:para>Here's an example that removes all the items whose key is a string that starts with an underscore character:</db:para>
<db:programlisting language="cpp">QMap&lt;QString, int&gt;::iterator i = map.begin();
while (i != map.end()) {
    if (i.key().startsWith('_'))
        i = map.erase(i);
    else
        ++i;
}
</db:programlisting>
<db:para>The call to QMap::erase() removes the item pointed to by the iterator from the map, and returns an iterator to the next item. Here's another way of removing an item while iterating:</db:para>
<db:programlisting language="cpp">QMap&lt;QString, int&gt;::iterator i = map.begin();
while (i != map.end()) {
    QMap&lt;QString, int&gt;::iterator prev = i;
    ++i;
    if (prev.key().startsWith('_'))
        map.erase(prev);
}
</db:programlisting>
<db:para>It might be tempting to write code like this:</db:para>
<db:programlisting language="cpp">// WRONG
while (i != map.end()) {
    if (i.key().startsWith('_'))
        map.erase(i);
    ++i;
}
</db:programlisting>
<db:para>However, this will potentially crash in <db:code>++i</db:code>, because <db:code>i</db:code> is a dangling iterator after the call to erase().</db:para>
<db:para>Multiple iterators can be used on the same map. If you add items to the map, existing iterators will remain valid. If you remove items from the map, iterators that point to the removed items will become dangling iterators.</db:para>
<db:warning>
<db:para>Iterators on implicitly shared containers do not work exactly like STL-iterators. You should avoid copying a container while iterators are active on that container. For more information, read <db:link xlink:href="containers.xml#implicit-sharing-iterator-problem">Implicit sharing iterator problem</db:link>.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmap-const-iterator.xml">QMap::const_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmap-key-iterator.xml">QMap::key_iterator</db:link></db:member>
<db:member><db:link xlink:href="qmutablemapiterator.xml">QMutableMapIterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="iterator_category-typedef">
<db:title>iterator::iterator_category</db:title>
<db:para>A synonym for <db:emphasis>std::bidirectional_iterator_tag</db:emphasis> indicating this iterator is a bidirectional iterator.</db:para>
</db:section>
</db:section>
</db:article>
