<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Window and Screen</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example demonstrates the Window and Screen types in QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-window-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Window and Screen</db:emphasis> shows how to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>create a window in QML</db:para>
</db:listitem>
<db:listitem>
<db:para>control its <db:link xlink:href="qwindow.xml#visibility-prop">visibility</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>present a splash screen during application startup</db:para>
</db:listitem>
<db:listitem>
<db:para>access the properties of the <db:link xlink:href="qml-qtquick-screen.xml">Screen</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>It also demonstrates how to package QML into <db:link xlink:href="resources.xml">resources</db:link> and provide an icon to create a standalone QML desktop application.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="window-implementation">
<db:title>Window Implementation</db:title>
<db:para>A splash screen can be created with the <db:link xlink:href="qt.xml#WindowType-enum">Qt.SplashScreen</db:link> flag, and should be <db:link xlink:href="qt.xml#WindowModality-enum">ApplicationModal</db:link> to prevent interaction with the main window. If the splash window is also transparent, and showing a partially transparent image, then it will look like a shaped window.</db:para>
<db:programlisting language="qml">Window {
    id: splash
    color: &quot;transparent&quot;
    title: &quot;Splash Window&quot;
    modality: Qt.ApplicationModal
    flags: Qt.SplashScreen
    property int timeoutInterval: 2000
    signal timeout
</db:programlisting>
<db:para>In this example a <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> will automatically dismiss the splash screen, but in a real application you might want to connect to a signal from the application logic to hide the splash when initialization is complete.</db:para>
<db:programlisting language="qml">Timer {
    interval: splash.timeoutInterval; running: splash.visible; repeat: false
    onTriggered: splash.exit()
}
</db:programlisting>
<db:para>The main window in this example is the control window, with some buttons and checkboxes to control and provide feedback on the state of a secondary window. Each checkbox has a binding to the property whose state it is displaying, and also an onClicked handler to change the state. This is the typical pattern to create a two-way binding while avoiding binding loops.</db:para>
<db:programlisting language="qml">CheckBox {
    text: &quot;Windowed&quot;
    height: showButton.height
    width: col.cellWidth
    Binding on checked { value: root.testWindow.visibility === Window.Windowed }
    onClicked: root.testWindow.visibility = Window.Windowed
}
</db:programlisting>
<db:para><db:link xlink:href="qml-qtquick-screen.xml">Screen</db:link> has several properties which are generally useful to applications which need to rotate some content when the screen orientation changes, to position windows on the screen or to convert real units to logical pixel units. CurrentScreen.qml (which is displayed inline in window.qml, or can be run by itself with the <db:link xlink:href="">qml tool</db:link>) simply displays the property values, while the splash screen uses them to center the window on the screen.</db:para>
<db:programlisting language="qml">    x: (Screen.width - splashImage.width) / 2
    y: (Screen.height - splashImage.height) / 2
</db:programlisting>
<db:para>If a <db:link xlink:href="qml-qtquick-window.xml">Window</db:link> is nested inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> or another Window, the inner window becomes <db:emphasis>transient for</db:emphasis> the outer one (see <db:link xlink:href="qml-qtquick-window.xml">Window</db:link> for more explanation). But if you want to create multiple top-level windows as unrelated peers, you can create them inside a non-visual <db:link xlink:href="qml-qtqml-qtobject.xml">QtObject</db:link> root item, as this example does.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/window?h=6.8">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
