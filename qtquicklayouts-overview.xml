<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Layouts Overview</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A set of APIs for arranging QML items in a user interface.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Use Qt Quick Layouts to arrange items in a user interface. Qt Quick Layouts resize their items, which makes them well suited for resizable user interfaces.</db:para>
<db:section xml:id="key-features">
<db:title>Key features</db:title>
<db:para>Some of the key features of Qt Quick Layouts are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#alignment-attached-prop">Align</db:link> items with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#alignment-attached-prop">Layout.alignment</db:link> property.</db:para>
</db:listitem>
<db:listitem>
<db:para>Specify <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">resizable items</db:link> with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">Layout.fillWidth</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillHeight-attached-prop">Layout.fillHeight</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para>Set <db:link xlink:href="qtquicklayouts-overview.xml#size-constraints">size constraints</db:link> with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#minimumWidth-attached-prop">Layout.minimumWidth</db:link>, <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link>, and <db:link xlink:href="qml-qtquick-layouts-layout.xml#maximumWidth-attached-prop">Layout.maximumWidth</db:link> properties â€“ &quot;Width&quot; can be replaced with &quot;Height&quot; for specifying similar constraints to the height.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can specify <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml#spacing-prop">spacing</db:link> with <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml#spacing-prop">spacing</db:link>, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#rowSpacing-prop">rowSpacing</db:link>, or <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#columnSpacing-prop">columnSpacing</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Stretch items both horizontally and vertically with <db:link xlink:href="qml-qtquick-layouts-layout.xml#horizontalStretchFactor-attached-prop">stretch factors</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> adds these features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#row-attached-prop">Grid coordinates</db:link>, controlled by the <db:link xlink:href="qml-qtquick-layouts-layout.xml#row-attached-prop">Layout.row</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#column-attached-prop">Layout.column</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#flow-prop">Automatic grid coordinates</db:link> used together with the <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#flow-prop">flow</db:link>, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#rows-prop">rows</db:link>, and <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#columns-prop">columns</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#columnSpan-attached-prop">Spans</db:link> across rows or columns, that you can specify with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#rowSpan-attached-prop">Layout.rowSpan</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#columnSpan-attached-prop">Layout.columnSpan</db:link> properties.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="getting-started">
<db:title>Getting started</db:title>
<db:para>To get started using Qt Quick Layouts, import the QML types into your application with the following import statement in your <db:code>.qml</db:code> file:</db:para>
<db:programlisting language="qml">import QtQuick.Layouts
</db:programlisting>
<db:para>The next step is to create a <db:link xlink:href="qtquicklayouts-overview.xml#a-simple-layout">simple layout</db:link>. You can also study the <db:link xlink:href="qtquick-layouts-example.xml">Qt Quick Layouts - Basic Example</db:link>.</db:para>
<db:section xml:id="a-simple-layout">
<db:title>A simple layout</db:title>
<db:para>The intention of using a layout is to rearrange its children whenever the layout changes size. This means the application must ensure that the layout gets resized. In the following snippet, the <db:emphasis>RowLayout</db:emphasis> ensures that by specifying <db:code>anchors.fill: parent</db:code>. However, you can also achieve this by other means, such as specifying the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties. In the same snippet, the <db:emphasis>orange Rectangle</db:emphasis> has a fixed size of <db:emphasis>100</db:emphasis> by <db:emphasis>150</db:emphasis> pixels, and the <db:emphasis>plum Rectangle</db:emphasis> will expand to occupy all the space it gets allocated.</db:para>
<db:programlisting language="qml">Window {
    RowLayout {
        anchors.fill: parent
        spacing: 6
        Rectangle {
            color: 'azure'
            Layout.preferredWidth: 100
            Layout.preferredHeight: 150
        }
        Rectangle {
            color: &quot;plum&quot;
            Layout.fillWidth: true
            Layout.fillHeight: true
        }
    }
}
</db:programlisting>
<db:anchor xml:id="simple-layout-snippet"/>
<db:para>Layouts are responsible for their children's geometry. This includes properties such as <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>, <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link>, <db:link xlink:href="qml-qtquick-item.xml#anchors-prop">anchors</db:link>), etc.</db:para>
<db:important>
<db:para>Don't specify properties that influence the geometry of child items in your application. Setting these properties on a child item causes a conflict of interest, and the result is undefined. This also applies when the child item is a layout. Therefore, only layouts with no parent layout can have <db:code>anchors.fill: parent</db:code>.</db:para>
</db:important>
<db:section xml:id="spacing">
<db:title>Spacing</db:title>
<db:para>As seen in the <db:link xlink:href="qtquicklayouts-overview.xml#simple-layout-snippet">previous snippet</db:link>, the <db:emphasis>spacing</db:emphasis> for the <db:emphasis>RowLayout</db:emphasis> is set to <db:emphasis>6</db:emphasis>. This ensures that all items in the layout have 6 pixels of spacing between them:</db:para>
<db:programlisting language="qml">spacing: 6
</db:programlisting>
<db:para>If you omit specifying a spacing value, the layout will use a default of <db:emphasis>5</db:emphasis> pixels. The spacing, as well as the <db:emphasis>implicitWidth</db:emphasis> of any children, contributes to the <db:emphasis>implicitWidth</db:emphasis> of the layout. This is important to keep in mind if you rely on default behavior, as it may impact your layout design. For example, the two <db:emphasis><db:link xlink:href="qml-qtquick-layouts-columnlayout.xml">ColumnLayout</db:link></db:emphasis>s both set <db:emphasis>Layout.fillWidth: true</db:emphasis> in the following snippet. It's natural to think that they would both get the same width. However, because of the default 5 pixel spacing between the items in the inner <db:emphasis>RowLayout</db:emphasis>, the <db:emphasis>implicitWidth</db:emphasis> of the first <db:emphasis>ColumnLayout</db:emphasis> becomes larger, leaving less room for the second one. For example:</db:para>
<db:programlisting language="qml">ApplicationWindow {
    id: root
    width: 300
    height: 300
    visible: true

    RowLayout {
        anchors.fill: parent
        ColumnLayout {
            Rectangle {
                color: &quot;tomato&quot;;
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
            RowLayout {
                Rectangle {
                    color: &quot;navajowhite&quot;
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                }
                Rectangle {
                    color: &quot;darkseagreen&quot;
                    Layout.fillWidth: true
                    Layout.fillHeight: true
                }
            }
        }
        ColumnLayout {
            Rectangle {
                color: &quot;lightpink&quot;
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
            Rectangle {
                color: &quot;slategray&quot;
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
            Rectangle {
                color: &quot;lightskyblue&quot;
                Layout.fillWidth: true
                Layout.fillHeight: true
            }
        }
    }
}
</db:programlisting>
<db:para>This snippet will produce a layout that looks like this:</db:para>
<db:mediaobject>
<db:alt>&quot;A QML layout with default spacing&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/layout-with-default-spacing.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>To ensure equal size of these two columns, you can either</db:para>
<db:orderedlist numeration="loweralpha">
<db:listitem>
<db:para>set the spacing of the <db:emphasis>RowLayout</db:emphasis> to <db:code>0</db:code>, or</db:para>
</db:listitem>
<db:listitem>
<db:para>set <db:emphasis>preferredWidth</db:emphasis> to equal values on both <db:emphasis><db:link xlink:href="qml-qtquick-layouts-columnlayout.xml">ColumnLayout</db:link></db:emphasis>s.</db:para>
</db:listitem>
</db:orderedlist>
</db:section>
</db:section>
<db:section xml:id="specifying-preferred-size">
<db:title>Specifying preferred size</db:title>
<db:para>For each item, the effective preferred size may come from one of several candidate properties. For determining the effective preferred size, an item queries these candidate properties in the following order, and will use the first candidate with a valid width or height.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Candidate properties</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link> or <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredHeight-attached-prop">Layout.preferredHeight</db:link></db:para>
</db:td>
<db:td>
<db:para>These properties are supposed to be modified by the application if the default implicit size does not give the optimal arrangement.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> or <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
</db:td>
<db:td>
<db:para>These properties are supposed to be supplied by each item to give a meaningful ideal size. For example, the size needed to display all the contents of a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type. An implicit width or height of <db:code>0</db:code> is interpreted as invalid.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>An item can specify <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link> without having to specify <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredHeight-attached-prop">Layout.preferredHeight</db:link>. In such cases, the effective preferred height is determined from the <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link>.</db:para>
<db:note>
<db:para>If you don't specify neither preferredWidth nor implicitWidth, the Layout will query <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> as an ultimate value for the effective preferred width. However, you shouldn't rely on <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> as a source for the effective preferred width, as that may cause unexpected behavior. For instance, changing the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties won't trigger a layout rearrangement, or the layout might use the actual width and height â€“ not the width and height specified in your QML file â€“ when forced to do a full rebuild.</db:para>
</db:note>
</db:section>
<db:section xml:id="size-constraints">
<db:title>Size constraints</db:title>
<db:para>Since an item can be resized by its layout, the layout needs to know the <db:link xlink:href="qml-qtquick-layouts-layout.xml#minimumWidth-attached-prop">minimum</db:link>, <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">preferred</db:link>, and <db:link xlink:href="qml-qtquick-layouts-layout.xml#maximumWidth-attached-prop">maximum</db:link> sizes of all items where <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">Layout.fillWidth</db:link> or <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillHeight-attached-prop">Layout.fillHeight</db:link> is set to <db:emphasis>true</db:emphasis>.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">preferred</db:link> width and height is the <db:emphasis>actual</db:emphasis> width and height of an item, if the layout is not bound to a specific size itself. If the layout is set to a specific size, it distributes additional space based on the ratio of preferred sizes of its items, while taking minimum and maximum sizes into account. The preferred and implicit sizes act as ratios and weights when all items set <db:emphasis>fillWidth</db:emphasis> and <db:emphasis>fillHeight</db:emphasis>.</db:para>
<db:para>For instance, the following produces a layout with two rectangles lying side-by-side that stretches horizontally. The <db:emphasis>orange Rectangle</db:emphasis> can be resized from 50x150 to 300x150, and the <db:emphasis>plum Rectangle</db:emphasis> can be resized from 100x100 to âˆžx100. As long as the minimum and maximum width of each item isn't exceeded, the plum rectangle will have twice the width of the orange one.</db:para>
<db:programlisting language="qml">RowLayout {
    id: layout
    anchors.fill: parent
    spacing: 6
    Rectangle {
        color: 'orange'
        Layout.fillWidth: true
        Layout.minimumWidth: 50
        Layout.preferredWidth: 100
        Layout.maximumWidth: 300
        Layout.minimumHeight: 150
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
    Rectangle {
        color: 'plum'
        Layout.fillWidth: true
        Layout.minimumWidth: 100
        Layout.preferredWidth: 200
        Layout.preferredHeight: 100
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:alt>&quot;RowLayout at its minimum&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/rowlayout-minimum.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Combining each item's constraints gives these implicit constraints to the layout element:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>minimum</db:para>
</db:th>
<db:th>
<db:para>preferred</db:para>
</db:th>
<db:th>
<db:para>maximum</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>implicit constraints (width)</db:para>
</db:td>
<db:td>
<db:para>156</db:para>
</db:td>
<db:td>
<db:para>306</db:para>
</db:td>
<db:td>
<db:para>âˆž (<db:code>Number.POSITIVE_INFINITY</db:code>)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>implicit constraints (heights)</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Thus, the layout cannot be narrower than 156, nor can it be taller or shorter than 150, without breaking any of the constraints of its child items.</db:para>
</db:section>
</db:section>
<db:section xml:id="connecting-windows-and-layouts">
<db:title>Connecting windows and layouts</db:title>
<db:para>You can use normal anchoring concepts to ensure that your layout follows the window resizing.</db:para>
<db:programlisting language="qml">RowLayout {
    id: layout
    anchors.fill: parent
</db:programlisting>
<db:para>You can rely on the size constraints of layouts to ensure that the window cannot be resized beyond the layout constraints. You can take the size constraints from the layout and set these constraints on the <db:emphasis>minimumWidth</db:emphasis>, <db:emphasis>minimumHeight</db:emphasis>, <db:emphasis>maximumWidth</db:emphasis>, and <db:emphasis>maximumHeight</db:emphasis> of the <db:link xlink:href="qml-qtquick-window.xml">Window</db:link> element. The following code ensures that the window cannot be resized beyond the constraints of the layout:</db:para>
<db:programlisting language="qml">minimumWidth: layout.Layout.minimumWidth
minimumHeight: layout.Layout.minimumHeight
maximumWidth: 1000
maximumHeight: layout.Layout.maximumHeight
</db:programlisting>
<db:note>
<db:para>Because <db:emphasis>layout.Layout.maximumWidth</db:emphasis> is infinite in this case, we cannot bind that to the <db:emphasis>maximumWidth</db:emphasis> property of Window, as that is an integer number. Therefore, the maximum width is set to a fixed value of <db:code>1000</db:code>.</db:para>
</db:note>
<db:para>Finally, set the initial size of the window to be the layout's implicit size:</db:para>
<db:programlisting language="qml">width: layout.implicitWidth
height: layout.implicitHeight
</db:programlisting>
</db:section>
<db:section xml:id="spanning-and-stretching-items">
<db:title>Spanning and stretching Items</db:title>
<db:para>Use <db:link xlink:href="qml-qtquick-layouts-layout.xml#columnSpan-attached-prop">spans</db:link> in a <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> to make child items occupy more than one cell. For example, you may have a <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> with six cells across two rows. The top row contains the <db:emphasis>Item</db:emphasis>s item1, item2, and item3. The bottom row contains the <db:emphasis>Item</db:emphasis> item4, which specifies <db:emphasis>columnSpan: 3</db:emphasis> and <db:emphasis>alignment: Qt.AlignHCenter</db:emphasis>. This places item4 in the middle of the three cells that make up the bottom row. The following snippet serves as an example:</db:para>
<db:programlisting language="qml">ApplicationWindow {
    id: root
    width: 300
    height: 300
    visible: true

    GridLayout {
       rows: 2
       columns: 3
       Rectangle {
           color: 'cyan'
           implicitWidth: 50
           implicitHeight: 50
       }
       Rectangle {
           color: 'magenta'
           implicitWidth: 50
           implicitHeight: 50
       }
       Rectangle {
           color: 'yellow'
           implicitWidth: 50
           implicitHeight: 50
       }
       Rectangle {
           color: 'black'
           implicitWidth: 50
           implicitHeight: 50
           Layout.columnSpan: 3
           Layout.alignment: Qt.AlignHCenter
       }
    }
}
</db:programlisting>
<db:para>The size of rows and columns are given implicitly by their contents. For example, a Button may impact the width of the column it's in, or the height of the row it's in. This means <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> doesn't have uniform distribution. Because of this, you can't use a span to stretch a layout. To manipulate the stretch of an item or layout, use <db:link xlink:href="qml-qtquick-layouts-layout.xml#horizontalStretchFactor-attached-prop">stretchFactor</db:link>s and/or size hints instead.</db:para>
<db:note>
<db:para>When setting implicit or preferred sizes, don't bind the respective properties to the width or height of the layout itself or items it depends on for its size calculations, as this can cause cyclic dependencies that are hard to track down.</db:para>
</db:note>
</db:section>
</db:article>
