<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Layouts Overview</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A set of APIs for arranging QML items in a user interface.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Layouts are items that are used to arrange items in a user interface. Since Qt Quick Layouts also resize their items, they are well suited for resizable user interfaces.</db:para>
<db:section xml:id="getting-started">
<db:title>Getting Started</db:title>
<db:para>The QML types can be imported into your application using the following import statement in your <db:code>.qml</db:code> file.</db:para>
<db:programlisting language="qml">import QtQuick.Layouts
</db:programlisting>
</db:section>
<db:section xml:id="key-features">
<db:title>Key Features</db:title>
<db:para>Some of the key features are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#alignment-attached-prop">Alignment</db:link> of items can be specified with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#alignment-attached-prop">Layout.alignment</db:link> property</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">Resizable items</db:link> can be specified with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">Layout.fillWidth</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillHeight-attached-prop">Layout.fillHeight</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquicklayouts-overview.xml#size-constraints">Size constraints</db:link> can be specified with <db:link xlink:href="qml-qtquick-layouts-layout.xml#minimumWidth-attached-prop">Layout.minimumWidth</db:link>, <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link>, and <db:link xlink:href="qml-qtquick-layouts-layout.xml#maximumWidth-attached-prop">Layout.maximumWidth</db:link> properties (&quot;Width&quot; can be replaced with &quot;Height&quot; for specifying similar constraints to the height).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-rowlayout.xml#spacing-prop">Spacings</db:link> can be specified with <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml#spacing-prop">spacing</db:link>, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#rowSpacing-prop">rowSpacing</db:link> or <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#columnSpacing-prop">columnSpacing</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition to the above features, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml">GridLayout</db:link> adds these features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#row-attached-prop">Grid coordinates</db:link> can be specified with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#row-attached-prop">Layout.row</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#column-attached-prop">Layout.column</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#flow-prop">Automatic grid coordinates</db:link> used together with the <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#flow-prop">flow</db:link>, <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#rows-prop">rows</db:link>, and <db:link xlink:href="qml-qtquick-layouts-gridlayout.xml#columns-prop">columns</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#columnSpan-attached-prop">Spans</db:link> across rows or columns can be specified with the <db:link xlink:href="qml-qtquick-layouts-layout.xml#rowSpan-attached-prop">Layout.rowSpan</db:link> and <db:link xlink:href="qml-qtquick-layouts-layout.xml#columnSpan-attached-prop">Layout.columnSpan</db:link> properties.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="a-simple-layout">
<db:title>A Simple Layout</db:title>
<db:programlisting language="qml">Window {
    RowLayout {
        anchors.fill: parent
        spacing: 6
        Rectangle {
            color: 'azure'
            Layout.preferredWidth: 100
            Layout.preferredHeight: 150
        }
        Rectangle {
            color: &quot;plum&quot;
            Layout.fillWidth: true
            Layout.fillHeight: true
        }
    }
}
</db:programlisting>
<db:para>As the intention of using a layout is to rearrange its children whenever the layout changes size, the application should make sure that the layout gets resized. In the above snippet the <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> ensures that by specifying <db:code>anchors.fill: parent</db:code>. However, it can also be by other means, such as directly specifying <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties. In the same snippet, the <db:code>azure</db:code> Rectangle has a fixed size of <db:code>(100, 150)</db:code> pixels, and the <db:code>plum</db:code> Rectangle will expand to occupy all the space it gets allocated.</db:para>
<db:note>
<db:para>A layout is responsible for its children's geometry. You should therefore not specify <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link>, <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>, <db:link xlink:href="qml-qtquick-item.xml#x-prop">x</db:link>, <db:link xlink:href="qml-qtquick-item.xml#y-prop">y</db:link> or any other properties that might influence those properties (such as <db:link xlink:href="qml-qtquick-item.xml#anchors-prop">anchors</db:link>) on those items. Otherwise there would be a conflict of interest, and the result is undefined. This is also the case if the child item is a layout. Therefore, only layouts with no parent layout can have <db:code>anchors.fill: parent</db:code>.</db:para>
</db:note>
<db:para>All items in the layout will have 6 pixels of spacing between them:</db:para>
<db:programlisting language="qml">spacing: 6
</db:programlisting>
<db:section xml:id="size-constraints">
<db:title>Size Constraints</db:title>
<db:para>Since an item can be resized by its layout, the layout needs to know the <db:link xlink:href="qml-qtquick-layouts-layout.xml#minimumWidth-attached-prop">minimum</db:link>, <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">preferred</db:link>, and <db:link xlink:href="qml-qtquick-layouts-layout.xml#maximumWidth-attached-prop">maximum</db:link> sizes of all items where <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillWidth-attached-prop">Layout.fillWidth</db:link> or <db:link xlink:href="qml-qtquick-layouts-layout.xml#fillHeight-attached-prop">Layout.fillHeight</db:link> is set to <db:code>true</db:code>. For instance, the following will produce a layout with two rectangles lying side-by-side that stretches horizontally. The azure rectangle can be resized from 50x150 to 300x150, and the plum rectangle can be resized from 100x100 to ∞x100.</db:para>
<db:programlisting language="qml">RowLayout {
    id: layout
    anchors.fill: parent
    spacing: 6
    Rectangle {
        color: 'azure'
        Layout.fillWidth: true
        Layout.minimumWidth: 50
        Layout.preferredWidth: 100
        Layout.maximumWidth: 300
        Layout.minimumHeight: 150
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
    Rectangle {
        color: 'plum'
        Layout.fillWidth: true
        Layout.minimumWidth: 100
        Layout.preferredWidth: 200
        Layout.preferredHeight: 100
        Text {
            anchors.centerIn: parent
            text: parent.width + 'x' + parent.height
        }
    }
}
</db:programlisting>
<db:mediaobject>
<db:alt>&quot;RowLayout at its minimum&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/rowlayout-minimum.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Combining each item's constraints will give these implicit constraints to the layout element:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
</db:th>
<db:th>
<db:para>minimum</db:para>
</db:th>
<db:th>
<db:para>preferred</db:para>
</db:th>
<db:th>
<db:para>maximum</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>implicit constraints (width)</db:para>
</db:td>
<db:td>
<db:para>156</db:para>
</db:td>
<db:td>
<db:para>306</db:para>
</db:td>
<db:td>
<db:para>∞ (<db:code>Number.POSITIVE_INFINITY</db:code>)</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>implicit constraints (heights)</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
<db:td>
<db:para>150</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Thus, the layout cannot be narrower than 156 or be taller or shorter than 150 without breaking any of the constraints of its child items.</db:para>
</db:section>
<db:section xml:id="specifying-preferred-size">
<db:title>Specifying Preferred Size</db:title>
<db:para>For each item, the effective preferred size may come from one of several candidate properties. For determining the effective preferred size, it will query these candidate properties in the following order, and use the first candidate with a valid width or height.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Candidate properties</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link> or <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredHeight-attached-prop">Layout.preferredHeight</db:link></db:para>
</db:td>
<db:td>
<db:para>These properties are supposed to be modified by the application if the default implicit size does not give the optimal arrangement.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-item.xml#implicitWidth-prop">implicitWidth</db:link> or <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link></db:para>
</db:td>
<db:td>
<db:para>These properties are supposed to be supplied by each item to give a meaningful ideal size, for example the size needed to display all the contents of a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> type. An implicit width or height of <db:code>0</db:code> is interpreted as invalid.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link></db:para>
</db:td>
<db:td>
<db:para>If none of the above properties are valid, the layout will resort to the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> and <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>An item can specify <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link> without having to specify <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredHeight-attached-prop">Layout.preferredHeight</db:link>. In this case, the effective preferred height will be determined from the <db:link xlink:href="qml-qtquick-item.xml#implicitHeight-prop">implicitHeight</db:link> (or ultimately <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link>).</db:para>
<db:note>
<db:para>Resorting to <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties is only provided as a final fallback. If you want to override the preferred size, it is recommended to use <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredWidth-attached-prop">Layout.preferredWidth</db:link> or <db:link xlink:href="qml-qtquick-layouts-layout.xml#preferredHeight-attached-prop">Layout.preferredHeight</db:link>. Relying on the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties for specifying the preferred size might give some unexpected behavior. For instance, changing the <db:link xlink:href="qml-qtquick-item.xml#width-prop">width</db:link> or <db:link xlink:href="qml-qtquick-item.xml#height-prop">height</db:link> properties won't trigger a layout rearrangement. Also, when the layout is forced to do a full rebuild it might use the actual width and height, and not the width and height specified in the QML file.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="connecting-windows-and-layouts">
<db:title>Connecting Windows and Layouts</db:title>
<db:para>You can just use normal anchoring concepts to ensure that the layout will follow the window resizing.</db:para>
<db:programlisting language="qml">RowLayout {
    id: layout
    anchors.fill: parent
</db:programlisting>
<db:para>The size constraints of layouts can be used to ensure that the window cannot be resized beyond the layout constraints. You can take the size constraints from the layout and set these constraints on the minimumWidth, minimumHeight, maximumWidth, and maximumHeight of the Window element. The following code ensures that the window cannot be resized beyond the constraints of the layout:</db:para>
<db:programlisting language="qml">minimumWidth: layout.Layout.minimumWidth
minimumHeight: layout.Layout.minimumHeight
maximumWidth: 1000
maximumHeight: layout.Layout.maximumHeight
</db:programlisting>
<db:note>
<db:para>Since layout.Layout.maximumWidth is infinite in this case, we cannot bind that to the maximumWidth property of Window, since that is an integer number. We therefore set a fixed maximum width to 1000.</db:para>
</db:note>
<db:para>Finally, you usually want the initial size of the window to be the layout's implicit size:</db:para>
<db:programlisting language="qml">width: layout.implicitWidth
height: layout.implicitHeight
</db:programlisting>
</db:section>
</db:article>
