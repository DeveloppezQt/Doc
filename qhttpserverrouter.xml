<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServerRouter Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides functions to bind a URL to a <db:code>ViewHandler</db:code>.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServerRouter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can register <db:code>ViewHandler</db:code> as a callback for requests to a specific URL. Variable parts in the route can be specified by the arguments in ViewHandler.</db:para>
<db:note>
<db:para>This is a low-level routing API for an HTTP server.</db:para>
</db:note>
<db:para>See the following example:</db:para>
<db:programlisting language="cpp">auto pageView = [] (const quint64 page) {
    qDebug() &amp;lt;&amp;lt; &quot;page&quot; &amp;lt;&amp;lt; page;
};
using ViewHandler = decltype(pageView);

QHttpServerRouter router;

// register callback pageView on request &quot;/page/&amp;lt;number&amp;gt;&quot;
// for example: &quot;/page/10&quot;, &quot;/page/15&quot;
router.addRoute&amp;lt;ViewHandler&amp;gt;(
    new QHttpServerRouterRule(&quot;/page/&quot;, [=] (QRegularExpressionMatch &amp;amp;match,
                                             const QHttpServerRequest &amp;amp;,
                                             QHttpServerResponder &amp;amp;&amp;amp;) {
    auto boundView = router.bindCaptured(pageView, match);

    // it calls pageView
    boundView();
}));
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpServerRouter-2">
<db:title>QHttpServerRouter::QHttpServerRouter()</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerRouter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerRouter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link> object with default converters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverrouter.xml#converters">converters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QHttpServerRouter">
<db:title>QHttpServerRouter::~QHttpServerRouter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHttpServerRouter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServerRouter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserverrouter.xml">QHttpServerRouter</db:link>.</db:para>
</db:section>
<db:section xml:id="addConverter">
<db:title>bool QHttpServerRouter::addConverter(QAnyStringView <db:emphasis>regexp</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addConverter</db:methodname>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>regexp</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addConverter(QAnyStringView regexp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new converter for type <db:emphasis>Type</db:emphasis> matching regular expression <db:code role="parameter">regexp</db:code>, and returns <db:code>true</db:code> if this was successful, otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Automatically try to register an implicit converter from <db:link xlink:href="qstring.xml">QString</db:link> to <db:emphasis>Type</db:emphasis>. If there is already a converter of type <db:emphasis>Type</db:emphasis>, that converter's regexp is replaced with <db:code role="parameter">regexp</db:code>.</db:para>
<db:programlisting language="cpp">struct CustomArg {
    int data = 10;

    CustomArg() {} ;
    CustomArg(const QString &amp;amp;urlArg) : data(urlArg.toInt()) {}
};
Q_DECLARE_METATYPE(CustomArg);

QHttpServerRouter router;
router.addConverter&amp;lt;CustomArg&amp;gt;(u&quot;[+-]?\\d+&quot;));

auto pageView = [] (const CustomArg &amp;amp;customArg) {
    qDebug(&quot;data: %d&quot;, customArg.data);
};
using ViewHandler = decltype(pageView);

auto rule = std::make_unique&amp;lt;QHttpServerRouterRule&amp;gt;(
    &quot;/&amp;lt;arg&amp;gt;/&amp;lt;arg&amp;gt;/log&quot;,
    [&amp;amp;router, &amp;amp;pageView] (QRegularExpressionMatch &amp;amp;match,
                          const QHttpServerRequest &amp;amp;request,
                          QHttpServerResponder &amp;amp;&amp;amp;responder) {
    // Bind and call viewHandler with match's captured string and quint32:
    router.bindCaptured(pageView, match)();
});

router.addRule&amp;lt;ViewHandler&amp;gt;(std::move(rule));
</db:programlisting>
</db:section>
<db:section xml:id="addConverter-1">
<db:title>void QHttpServerRouter::addConverter(QMetaType <db:emphasis>metaType</db:emphasis>, QAnyStringView <db:emphasis>regexp</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addConverter</db:methodname>
<db:methodparam>
<db:type>QMetaType</db:type>
<db:parameter>metaType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QAnyStringView</db:type>
<db:parameter>regexp</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addConverter(QMetaType metaType, QAnyStringView regexp)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new converter for type <db:code role="parameter">metaType</db:code> matching regular expression <db:code role="parameter">regexp</db:code>.</db:para>
<db:para>If there is already a converter of type <db:code role="parameter">metaType</db:code>, that converter's regexp is replaced with <db:code role="parameter">regexp</db:code>.</db:para>
</db:section>
<db:section xml:id="addRule">
<db:title>bool QHttpServerRouter::addRule(std::unique_ptr&lt;QHttpServerRouterRule&gt; <db:emphasis>rule</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addRule</db:methodname>
<db:methodparam>
<db:type>std::unique_ptr&lt;QHttpServerRouterRule&gt;</db:type>
<db:parameter>rule</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addRule(std::unique_ptr&lt;QHttpServerRouterRule&gt; rule)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new <db:code role="parameter">rule</db:code> and returns <db:code>true</db:code> if this was successful.</db:para>
<db:para>Inside addRule, we determine ViewHandler arguments and generate a list of their <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Type</db:link> ids. Then we parse the URL and replace each <db:code>&lt;arg&gt;</db:code> with a regexp for its type from the list.</db:para>
<db:programlisting language="cpp">QHttpServerRouter router;

using ViewHandler = decltype([] (const QString &amp;amp;page, const quint32 num) { });

auto rule = std::make_unique&amp;lt;QHttpServerRouterRule&amp;gt;(
    &quot;/&amp;lt;arg&amp;gt;/&amp;lt;arg&amp;gt;/log&quot;,
    [] (QRegularExpressionMatch &amp;amp;match,
        const QHttpServerRequest &amp;amp;request,
        QHttpServerResponder &amp;amp;&amp;amp;responder) {
});

router.addRule&amp;lt;ViewHandler&amp;gt;(std::move(rule));
</db:programlisting>
</db:section>
<db:section xml:id="bindCaptured">
<db:title>typename ViewTraits::BindableType QHttpServerRouter::bindCaptured(ViewHandler &amp;&amp;<db:emphasis>handler</db:emphasis>, const QRegularExpressionMatch &amp;<db:emphasis>match</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>typename ViewTraits::BindableType</db:type>
<db:methodname>bindCaptured</db:methodname>
<db:methodparam>
<db:type>ViewHandler &amp;&amp;</db:type>
<db:parameter>handler</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRegularExpressionMatch &amp;</db:type>
<db:parameter>match</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">typename ViewTraits::BindableType bindCaptured(ViewHandler &amp;&amp;handler, const QRegularExpressionMatch &amp;match) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Supplies the <db:code role="parameter">handler</db:code> with arguments derived from a URL. Returns the bound function that accepts whatever remaining arguments the handler may take, supplying them to the handler after the URL-derived values. Each match of the regex applied to the URL (as a string) is converted to the type of the handler's parameter at its position, so that it can be passed as <db:code role="parameter">match</db:code>.</db:para>
<db:programlisting language="cpp">QHttpServerRouter router;

auto pageView = [] (const QString &amp;amp;page, const quint32 num) {
    qDebug(&quot;page: %s, num: %d&quot;, qPrintable(page), num);
};
using ViewHandler = decltype(pageView);

auto rule = std::make_unique&amp;lt;QHttpServerRouterRule&amp;gt;(
    &quot;/&amp;lt;arg&amp;gt;/&amp;lt;arg&amp;gt;/log&quot;,
    [&amp;amp;router, &amp;amp;pageView] (QRegularExpressionMatch &amp;amp;match,
                          const QHttpServerRequest &amp;amp;request,
                          QHttpServerResponder &amp;amp;&amp;amp;responder) {
    // Bind and call viewHandler with match's captured string and quint32:
    router.bindCaptured(pageView, match)();
});

router.addRule&amp;lt;ViewHandler&amp;gt;(std::move(rule));
</db:programlisting>
</db:section>
<db:section xml:id="clearConverters">
<db:title>void QHttpServerRouter::clearConverters()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearConverters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearConverters()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all converters.</db:para>
<db:note>
<db:para>clearConverters() does not set up default converters.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverrouter.xml#converters">converters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="converters">
<db:title>const QHash&lt;QMetaType, QString&gt; &amp;QHttpServerRouter::converters() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QHash&lt;QMetaType, QString&gt; &amp;</db:type>
<db:methodname>converters</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QHash&lt;QMetaType, QString&gt; &amp; converters() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a map of converter type and regexp.</db:para>
<db:para>The following converters are available by default:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>QMetaType::Int</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::Long</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::LongLong</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::Short</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::UInt</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::ULong</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::ULongLong</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::UShort</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::Double</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::Float</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::QString</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::QByteArray</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::QUrl</db:para>
</db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para>QMetaType::Void</db:para>
</db:td>
<db:td>
<db:para>An empty converter.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="handleRequest">
<db:title>bool QHttpServerRouter::handleRequest(const QHttpServerRequest &amp;<db:emphasis>request</db:emphasis>, QHttpServerResponder &amp;<db:emphasis>responder</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>handleRequest</db:methodname>
<db:methodparam>
<db:type>const QHttpServerRequest &amp;</db:type>
<db:parameter>request</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QHttpServerResponder &amp;</db:type>
<db:parameter>responder</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool handleRequest(const QHttpServerRequest &amp;request, QHttpServerResponder &amp;responder) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Handles each new <db:code role="parameter">request</db:code> for the HTTP server using <db:code role="parameter">responder</db:code>.</db:para>
<db:para>Iterates through the list of rules to find the first that matches, then executes this rule, returning <db:code>true</db:code>. Returns <db:code>false</db:code> if no rule matches the request.</db:para>
</db:section>
<db:section xml:id="removeConverter">
<db:title>void QHttpServerRouter::removeConverter(QMetaType <db:emphasis>metaType</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removeConverter</db:methodname>
<db:methodparam>
<db:type>QMetaType</db:type>
<db:parameter>metaType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removeConverter(QMetaType metaType)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the converter for type <db:code role="parameter">metaType</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
