<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTimer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides repetitive and single-shot timers.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTimer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTimer is part of <db:simplelist><db:member><db:link xlink:href="events.xml">Event Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides a high-level programming interface for timers. To use it, create a <db:link xlink:href="qtimer.xml">QTimer</db:link>, connect its <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal to the appropriate slots, and call <db:link xlink:href="qtimer.xml#start-1">start</db:link>(). From then on, it will emit the <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal at constant intervals.</db:para>
<db:para>Example for a one second (1000 millisecond) timer (from the <db:link xlink:href="">Analog Clock</db:link> example):</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);
    connect(timer, &amp;QTimer::timeout, this, QOverload&lt;&gt;::of(&amp;AnalogClock::update));
    timer-&gt;start(1000);
</db:programlisting>
<db:para>From then on, the update() slot is called every second.</db:para>
<db:para>You can set a timer to time out only once by calling <db:link xlink:href="qtimer.xml#singleShot-prop">setSingleShot</db:link>(true). You can also use the static <db:link xlink:href="qtimer.xml#singleShot">QTimer::singleShot</db:link>() function to call a slot after a specified interval:</db:para>
<db:programlisting language="cpp">    QTimer::singleShot(200, this, &amp;Foo::updateCaption);
</db:programlisting>
<db:para>In multithreaded applications, you can use <db:link xlink:href="qtimer.xml">QTimer</db:link> in any thread that has an event loop. To start an event loop from a non-GUI thread, use <db:link xlink:href="qthread.xml#exec">QThread::exec</db:link>(). Qt uses the timer's <db:link xlink:href="qobject.xml#thread">thread affinity</db:link> to determine which thread will emit the <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.</db:para>
<db:para>As a special case, a <db:link xlink:href="qtimer.xml">QTimer</db:link> with a timeout of 0 will time out as soon as possible, though the ordering between zero timers and other sources of events is unspecified. Zero timers can be used to do some work while still providing a snappy user interface:</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);
    connect(timer, &amp;QTimer::timeout, this, &amp;Foo::processOneThing);
    timer-&gt;start();
</db:programlisting>
<db:para>From then on, processOneThing() will be called repeatedly. It should be written in such a way that it always returns quickly (typically after processing one data item) so that Qt can deliver events to the user interface and stop the timer as soon as it has done all its work. This is the traditional way of implementing heavy work in GUI applications, but as multithreading is nowadays becoming available on more and more platforms, we expect that zero-millisecond <db:link xlink:href="qtimer.xml">QTimer</db:link> objects will gradually be replaced by <db:link xlink:href="qthread.xml">QThread</db:link>s.</db:para>
<db:section xml:id="accuracy-and-timer-resolution">
<db:title>Accuracy and Timer Resolution</db:title>
<db:para>The accuracy of timers depends on the underlying operating system and hardware. Most platforms support a resolution of 1 millisecond, though the accuracy of the timer will not equal this resolution in many real-world situations.</db:para>
<db:para>The accuracy also depends on the <db:link xlink:href="qt.xml#TimerType-enum">timer type</db:link>. For <db:link xlink:href="qt.xml#TimerType-enum">Qt::PreciseTimer</db:link>, <db:link xlink:href="qtimer.xml">QTimer</db:link> will try to keep the accuracy at 1 millisecond. Precise timers will also never time out earlier than expected.</db:para>
<db:para>For <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> and <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link> types, <db:link xlink:href="qtimer.xml">QTimer</db:link> may wake up earlier than expected, within the margins for those types: 5% of the interval for <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> and 500 ms for <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link>.</db:para>
<db:para>All timer types may time out later than expected if the system is busy or unable to provide the requested accuracy. In such a case of timeout overrun, Qt will emit <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() only once, even if multiple timeouts have expired, and then will resume the original interval.</db:para>
</db:section>
<db:section xml:id="alternatives-to-qtimer">
<db:title>Alternatives to QTimer</db:title>
<db:para>Qt 6.8 introduced <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link>. The main difference between the two classes, is that <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> supports a larger interval range and a higher precision (std::chrono::nanoseconds). For <db:link xlink:href="qtimer.xml">QTimer</db:link> the maximum supported interval is ±24 days, whereas for <db:link xlink:href="qchronotimer.xml">QChronoTimer</db:link> it is ±292 years (less chances of interger overflow with intervals longer than std::numeric_limits&lt;int&gt;::max()). If you only need millisecond resolution and ±24 days range, you can continue to use <db:link xlink:href="qtimer.xml">QTimer</db:link>.</db:para>
<db:para>Another alternative is reimplementing the <db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>() method in your class (which must be a sub-class of <db:link xlink:href="qobject.xml">QObject</db:link>), and using one of the following approaches:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Using <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>, a lightweight value-class wrapping a timer ID. You can start the timer with QBasicTimer::start() and stop it with <db:link xlink:href="qbasictimer.xml#stop">QBasicTimer::stop</db:link>(). You can handle the event in your reimplemneted <db:link xlink:href="qtimer.xml#timerEvent">timerEvent</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>A more low-level method is manipulating the timer IDs directly. To start the timer call <db:link xlink:href="qobject.xml#startTimer">QObject::startTimer</db:link>(), storing the returned ID. To stop the timer call <db:link xlink:href="qobject.xml#killTimer">QObject::killTimer</db:link>(). You can handle the event in your reimplemented <db:link xlink:href="qtimer.xml#timerEvent">timerEvent</db:link>(). This approach is typically more cumbersome than using <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A disadvantage of using <db:link xlink:href="qtimer.xml#timerEvent">timerEvent</db:link>() is that some high-level features, such as single-shot timers and signals, aren't supported.</db:para>
<db:para>Some operating systems limit the number of timers that may be used; Qt tries to work around these limitations.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link></db:member>
<db:member><db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="timers.xml">Timers</db:link></db:member>
<db:member><db:link xlink:href="">Analog Clock</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="active-prop">
<db:title>[bindable read-only] active : bool</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This boolean property is true if the timer is running; otherwise false.</db:para>
</db:section>
<db:section xml:id="interval-prop">
<db:title>[bindable] interval : int</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds the timeout interval in milliseconds</db:para>
<db:para>The default value for this property is 0. A <db:link xlink:href="qtimer.xml">QTimer</db:link> with a timeout interval of 0 will time out as soon as all the events in the window system's event queue have been processed.</db:para>
<db:para>Setting the interval of a running timer will change the interval, <db:link xlink:href="qtimer.xml#stop">stop</db:link>() and then <db:link xlink:href="qtimer.xml#start-1">start</db:link>() the timer, and acquire a new <db:link xlink:href="qtimer.xml#id">id</db:link>(). If the timer is not running, only the interval is changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remainingTime-prop">
<db:title>[read-only] remainingTime : const int</db:title>
<db:para>This property holds the remaining time in milliseconds</db:para>
<db:para>Returns the timer's remaining value in milliseconds left until the timeout. If the timer is inactive, the returned value will be -1. If the timer is overdue, the returned value will be 0.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">remainingTime</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#interval-prop">interval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-prop">
<db:title>[bindable] singleShot : bool</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>This property holds whether the timer is a single-shot timer</db:para>
<db:para>A single-shot timer fires only once, non-single-shot timers fire every <db:link xlink:href="qtimer.xml#interval-prop">interval</db:link> milliseconds.</db:para>
<db:para>The default value for this property is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#interval-prop">interval</db:link></db:member>
<db:member><db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerType-prop">
<db:title>[bindable] timerType : Qt::TimerType</db:title>
<db:para>This property supports <db:link xlink:href="qproperty.xml">QProperty</db:link> bindings.</db:para>
<db:para>controls the accuracy of the timer</db:para>
<db:para>The default value for this property is Qt::CoarseTimer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt.xml#TimerType-enum">Qt::TimerType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="singleShot">
<db:title>[static] void QTimer::singleShot(Duration <db:emphasis>interval</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="singleShot-1">[static] void QTimer::singleShot(Duration <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="singleShot-4">[static] void QTimer::singleShot(Duration <db:emphasis>interval</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="singleShot-2">[static] void QTimer::singleShot(Duration <db:emphasis>interval</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, Functor &amp;&amp;<db:emphasis>functor</db:emphasis>)</db:bridgehead>
<db:para>This static function calls <db:code role="parameter">functor</db:code> after <db:code role="parameter">interval</db:code>.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is specified, then the <db:code role="parameter">functor</db:code> will be called only if the <db:code role="parameter">context</db:code> object has not been destroyed before the interval occurs. The functor will then be run the thread of <db:code role="parameter">context</db:code>. The context's thread must have a running Qt event loop.</db:para>
<db:para>If <db:code role="parameter">functor</db:code> is a member function of <db:code role="parameter">context</db:code>, then the function will be called on the object.</db:para>
<db:para>The <db:code role="parameter">interval</db:code> parameter can be an int (interpreted as a millisecond count) or a std::chrono type that implicitly converts to nanoseconds.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, the chrono overloads took chrono::milliseconds, not chrono::nanoseconds. The compiler will automatically convert for you, but the conversion may overflow for extremely large milliseconds counts.</db:para>
</db:note>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimer">
<db:title>[explicit] QTimer::QTimer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a timer with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTimer">
<db:title>[virtual noexcept] QTimer::~QTimer()</db:title>
<db:para>Destroys the timer.</db:para>
</db:section>
<db:section xml:id="callOnTimeout">
<db:title>QMetaObject::Connection QTimer::callOnTimeout(Functor &amp;&amp;<db:emphasis>slot</db:emphasis>)</db:title>
<db:para>Creates a connection from the timer's <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal to <db:code role="parameter">slot</db:code>. Returns a handle to the connection.</db:para>
<db:para>This method is provided for convenience. It's equivalent to calling:</db:para>
<db:programlisting language="cpp">QObject::connect(timer, &amp;QTimer::timeout, timer, slot, Qt::DirectConnection);
</db:programlisting>
<db:note>
<db:para>This overload is not available when QT_NO_CONTEXTLESS_CONNECT is defined, instead use the callOnTimeout() overload that takes a context object.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#timeout">timeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="callOnTimeout-1">
<db:title>QMetaObject::Connection QTimer::callOnTimeout(const QObject *<db:emphasis>context</db:emphasis>, Functor &amp;&amp;<db:emphasis>slot</db:emphasis>, Qt::ConnectionType <db:emphasis>connectionType</db:emphasis> = Qt::AutoConnection)</db:title>
<db:para>This function overloads <db:link xlink:href="qtimer.xml#callOnTimeout">callOnTimeout</db:link>().</db:para>
<db:para>Creates a connection from the <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal to <db:code role="parameter">slot</db:code> to be placed in a specific event loop of <db:code role="parameter">context</db:code>, and returns a handle to the connection.</db:para>
<db:para>This method is provided for convenience. It's equivalent to calling:</db:para>
<db:programlisting language="cpp">QObject::connect(timer, &amp;QTimer::timeout, context, slot, connectionType);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#connect">QObject::connect</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#timeout">timeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>[since 6.8] Qt::TimerId QTimer::id() const</db:title>
<db:para>Returns a <db:link xlink:href="qobject.xml#TimerId-enum">Qt::TimerId</db:link> representing the timer ID if the timer is running; otherwise returns Qt::TimerId::Invalid.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qobject.xml#TimerId-enum">Qt::TimerId</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intervalAsDuration">
<db:title>std::chrono::milliseconds QTimer::intervalAsDuration() const</db:title>
<db:para>Returns the interval of this timer as a std::chrono::milliseconds object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#interval-prop">interval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QTimer::isActive() const</db:title>
<db:para>Returns true if the timer is running; otherwise returns false.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qtimer.xml#active-prop">active</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="remainingTimeAsDuration">
<db:title>std::chrono::milliseconds QTimer::remainingTimeAsDuration() const</db:title>
<db:para>Returns the time remaining in this timer object as a std::chrono::milliseconds object. If this timer is due or overdue, the returned value is std::chrono::milliseconds::zero(). If the remaining time could not be found or the timer is not running, this function returns a negative duration.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#remainingTime-prop">remainingTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-5">
<db:title>[static] void QTimer::singleShot(std::chrono::nanoseconds <db:emphasis>nsec</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is given in the duration object <db:code role="parameter">nsec</db:code>.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, this function took chrono::milliseconds, not chrono::nanoseconds. The compiler will automatically convert for you, but the conversion may overflow for extremely large milliseconds counts.</db:para>
</db:note>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-7">
<db:title>[static] void QTimer::singleShot(std::chrono::nanoseconds <db:emphasis>nsec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is given in the duration object <db:code role="parameter">nsec</db:code>. The <db:code role="parameter">timerType</db:code> affects the accuracy of the timer.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.8, this function took chrono::milliseconds, not chrono::nanoseconds. The compiler will automatically convert for you, but the conversion may overflow for extremely large milliseconds counts.</db:para>
</db:note>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QTimer::start(int <db:emphasis>msec</db:emphasis>)</db:title>
<db:para>Starts or restarts the timer with a timeout interval of <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:para>If the timer is already running, it will be <db:link xlink:href="qtimer.xml#stop">stopped</db:link> and restarted. This will also change its <db:link xlink:href="qtimer.xml#id">id</db:link>().</db:para>
<db:para>If <db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link> is true, the timer will be activated only once. This is equivalent to:</db:para>
<db:programlisting language="cpp">timer.setInterval(msec);
timer.start();
</db:programlisting>
<db:note>
<db:para>Keeping the event loop busy with a zero-timer is bound to cause trouble and highly erratic behavior of the UI.</db:para>
</db:note>
</db:section>
<db:section xml:id="start-1">
<db:title>void QTimer::start()</db:title>
<db:para>This function overloads start().</db:para>
<db:para>Starts or restarts the timer with the timeout specified in <db:link xlink:href="qtimer.xml#interval-prop">interval</db:link>.</db:para>
<db:para>If the timer is already running, it will be <db:link xlink:href="qtimer.xml#stop">stopped</db:link> and restarted. This will also change its <db:link xlink:href="qtimer.xml#id">id</db:link>().</db:para>
<db:para>If <db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link> is true, the timer will be activated only once.</db:para>
</db:section>
<db:section xml:id="start-2">
<db:title>void QTimer::start(std::chrono::milliseconds <db:emphasis>msec</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Starts or restarts the timer with a timeout of duration <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:para>If the timer is already running, it will be <db:link xlink:href="qtimer.xml#stop">stopped</db:link> and restarted. This will also change its <db:link xlink:href="qtimer.xml#id">id</db:link>().</db:para>
<db:para>If <db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link> is true, the timer will be activated only once. This is equivalent to:</db:para>
<db:programlisting language="cpp">timer.setInterval(msec);
timer.start();
</db:programlisting>
</db:section>
<db:section xml:id="stop">
<db:title>void QTimer::stop()</db:title>
<db:para>Stops the timer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeout">
<db:title>void QTimer::timeout()</db:title>
<db:para>This signal is emitted when the timer times out.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#interval-prop">interval</db:link></db:member>
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QTimer::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="timerId">
<db:title>int QTimer::timerId() const</db:title>
<db:para>Returns the ID of the timer if the timer is running; otherwise returns -1.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTimer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtimer.xml">QTimer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="singleShot-3">
<db:title>[static, deprecated in 6.8] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.8. We strongly advise against using it in new code.</db:para>
<db:para>Use the chrono overloads. This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QTimer&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QTimer::singleShot(600000, &amp;app, QCoreApplication::quit);
    ...
    return app.exec();
}
</db:programlisting>
<db:para>This sample program automatically terminates after 10 minutes (600,000 milliseconds).</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-6">
<db:title>[static, deprecated in 6.8] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This function is deprecated since 6.8. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use the chrono overloads. This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is <db:code role="parameter">msec</db:code> milliseconds. The <db:code role="parameter">timerType</db:code> affects the accuracy of the timer.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
