<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTimer Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.4.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides repetitive and single-shot timers.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTimer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTimer is part of <db:simplelist><db:member><db:link xlink:href="events.xml">Event Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qtimer.xml">QTimer</db:link> class provides a high-level programming interface for timers. To use it, create a <db:link xlink:href="qtimer.xml">QTimer</db:link>, connect its <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal to the appropriate slots, and call <db:link xlink:href="qtimer.xml#start-1">start</db:link>(). From then on, it will emit the <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal at constant intervals.</db:para>
<db:para>Example for a one second (1000 millisecond) timer (from the <db:link xlink:href="">Analog Clock</db:link> example):</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(update()));
    timer-&gt;start(1000);
</db:programlisting>
<db:para>From then on, the update() slot is called every second.</db:para>
<db:para>You can set a timer to time out only once by calling setSingleShot(true). You can also use the static <db:link xlink:href="qtimer.xml#singleShot">QTimer::singleShot</db:link>() function to call a slot after a specified interval:</db:para>
<db:programlisting language="cpp">    QTimer::singleShot(200, this, SLOT(updateCaption()));
</db:programlisting>
<db:para>In multithreaded applications, you can use <db:link xlink:href="qtimer.xml">QTimer</db:link> in any thread that has an event loop. To start an event loop from a non-GUI thread, use <db:link xlink:href="qthread.xml#exec">QThread::exec</db:link>(). Qt uses the timer's <db:link xlink:href="qobject.xml#thread">thread affinity</db:link> to determine which thread will emit the <db:link xlink:href="qtimer.xml#timeout">timeout</db:link>() signal. Because of this, you must start and stop the timer in its thread; it is not possible to start a timer from another thread.</db:para>
<db:para>As a special case, a <db:link xlink:href="qtimer.xml">QTimer</db:link> with a timeout of 0 will time out as soon as all the events in the window system's event queue have been processed. This can be used to do heavy work while providing a snappy user interface:</db:para>
<db:programlisting language="cpp">    QTimer *timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(processOneThing()));
    timer-&gt;start();
</db:programlisting>
<db:para>From then on, processOneThing() will be called repeatedly. It should be written in such a way that it always returns quickly (typically after processing one data item) so that Qt can deliver events to the user interface and stop the timer as soon as it has done all its work. This is the traditional way of implementing heavy work in GUI applications, but as multithreading is nowadays becoming available on more and more platforms, we expect that zero-millisecond <db:link xlink:href="qtimer.xml">QTimer</db:link> objects will gradually be replaced by <db:link xlink:href="qthread.xml">QThread</db:link>s.</db:para>
<db:section xml:id="accuracy-and-timer-resolution">
<db:title>Accuracy and Timer Resolution</db:title>
<db:para>The accuracy of timers depends on the underlying operating system and hardware. Most platforms support a resolution of 1 millisecond, though the accuracy of the timer will not equal this resolution in many real-world situations.</db:para>
<db:para>The accuracy also depends on the <db:link xlink:href="qt.xml#TimerType-enum">timer type</db:link>. For <db:link xlink:href="qt.xml#TimerType-enum">Qt::PreciseTimer</db:link>, <db:link xlink:href="qtimer.xml">QTimer</db:link> will try to keep the accurance at 1 millisecond. Precise timers will also never time out earlier than expected.</db:para>
<db:para>For <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> and <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link> types, <db:link xlink:href="qtimer.xml">QTimer</db:link> may wake up earlier than expected, within the margins for those types: 5% of the interval for <db:link xlink:href="qt.xml#TimerType-enum">Qt::CoarseTimer</db:link> and 500 ms for <db:link xlink:href="qt.xml#TimerType-enum">Qt::VeryCoarseTimer</db:link>.</db:para>
<db:para>All timer types may time out later than expected if the system is busy or unable to provide the requested accuracy. In such a case of timeout overrun, Qt will emit activated() only once, even if multiple timeouts have expired, and then will resume the original interval.</db:para>
</db:section>
<db:section xml:id="alternatives-to-qtimer">
<db:title>Alternatives to QTimer</db:title>
<db:para>An alternative to using <db:link xlink:href="qtimer.xml">QTimer</db:link> is to call <db:link xlink:href="qobject.xml#startTimer">QObject::startTimer</db:link>() for your object and reimplement the <db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>() event handler in your class (which must inherit <db:link xlink:href="qobject.xml">QObject</db:link>). The disadvantage is that <db:link xlink:href="qtimer.xml#timerEvent">timerEvent</db:link>() does not support such high-level features as single-shot timers or signals.</db:para>
<db:para>Another alternative is <db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link>. It is typically less cumbersome than using <db:link xlink:href="qobject.xml#startTimer">QObject::startTimer</db:link>() directly. See <db:link xlink:href="timers.xml">Timers</db:link> for an overview of all three approaches.</db:para>
<db:para>Some operating systems limit the number of timers that may be used; Qt tries to work around these limitations.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbasictimer.xml">QBasicTimer</db:link></db:member>
<db:member><db:link xlink:href="qtimerevent.xml">QTimerEvent</db:link></db:member>
<db:member><db:link xlink:href="qobject.xml#timerEvent">QObject::timerEvent</db:link>()</db:member>
<db:member><db:link xlink:href="timers.xml">Timers</db:link></db:member>
<db:member><db:link xlink:href="">Analog Clock Example</db:link></db:member>
<db:member><db:link xlink:href="">Wiggly Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTimer">
<db:title>[explicit] QTimer::QTimer(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a timer with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTimer">
<db:title>[virtual noexcept] QTimer::~QTimer()</db:title>
<db:para>Destroys the timer.</db:para>
</db:section>
<db:section xml:id="isActive">
<db:title>bool QTimer::isActive() const</db:title>
<db:para>Returns true if the timer is running (pending); otherwise returns false.</db:para>
</db:section>
<db:section xml:id="singleShot">
<db:title>[static] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">#include &lt;QApplication&gt;
#include &lt;QTimer&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);
    QTimer::singleShot(600000, &amp;app, SLOT(quit()));
    ...
    return app.exec();
}
</db:programlisting>
<db:para>This sample program automatically terminates after 10 minutes (600,000 milliseconds).</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-1">
<db:title>[static, since 5.4] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls <db:code role="parameter">functor</db:code> after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The time interval is <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-2">
<db:title>[static, since 5.4] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls <db:code role="parameter">functor</db:code> after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The time interval is <db:code role="parameter">msec</db:code> milliseconds. The <db:code role="parameter">timerType</db:code> affects the accuracy of the timer.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-3">
<db:title>[static, since 5.4] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls <db:code role="parameter">functor</db:code> after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The time interval is <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is destroyed before the interval occurs, the method will not be called. The function will be run in the thread of <db:code role="parameter">context</db:code>. The context's thread must have a running Qt event loop.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-4">
<db:title>[static] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls a slot after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The <db:code role="parameter">receiver</db:code> is the receiving object and the <db:code role="parameter">member</db:code> is the slot. The time interval is <db:code role="parameter">msec</db:code> milliseconds. The <db:code role="parameter">timerType</db:code> affects the accuracy of the timer.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="singleShot-5">
<db:title>[static, since 5.4] void QTimer::singleShot(int <db:emphasis>msec</db:emphasis>, Qt::TimerType <db:emphasis>timerType</db:emphasis>, const QObject *<db:emphasis>context</db:emphasis>, int <db:emphasis>functor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This static function calls <db:code role="parameter">functor</db:code> after a given time interval.</db:para>
<db:para>It is very convenient to use this function because you do not need to bother with a <db:link xlink:href="qobject.xml#timerEvent">timerEvent</db:link> or create a local <db:link xlink:href="qtimer.xml">QTimer</db:link> object.</db:para>
<db:para>The time interval is <db:code role="parameter">msec</db:code> milliseconds. The <db:code role="parameter">timerType</db:code> affects the accuracy of the timer.</db:para>
<db:para>If <db:code role="parameter">context</db:code> is destroyed before the interval occurs, the method will not be called. The function will be run in the thread of <db:code role="parameter">context</db:code>. The context's thread must have a running Qt event loop.</db:para>
<db:note>
<db:para>This function is reentrant.</db:para>
</db:note>
<db:para>This function was introduced in Qt 5.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QTimer::start(int <db:emphasis>msec</db:emphasis>)</db:title>
<db:para>Starts or restarts the timer with a timeout interval of <db:code role="parameter">msec</db:code> milliseconds.</db:para>
<db:para>If the timer is already running, it will be <db:link xlink:href="qtimer.xml#stop">stopped</db:link> and restarted.</db:para>
<db:para>If <db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link> is true, the timer will be activated only once.</db:para>
</db:section>
<db:section xml:id="start-1">
<db:title>void QTimer::start()</db:title>
<db:para>This function overloads start().</db:para>
<db:para>Starts or restarts the timer with the timeout specified in interval.</db:para>
<db:para>If the timer is already running, it will be <db:link xlink:href="qtimer.xml#stop">stopped</db:link> and restarted.</db:para>
<db:para>If <db:link xlink:href="qtimer.xml#singleShot">singleShot</db:link> is true, the timer will be activated only once.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>void QTimer::stop()</db:title>
<db:para>Stops the timer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timeout">
<db:title>void QTimer::timeout()</db:title>
<db:para>This signal is emitted when the timer times out.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>interval</db:member>
<db:member><db:link xlink:href="qtimer.xml#start-1">start</db:link>()</db:member>
<db:member><db:link xlink:href="qtimer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QTimer::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="timerId">
<db:title>int QTimer::timerId() const</db:title>
<db:para>Returns the ID of the timer if the timer is running; otherwise returns -1.</db:para>
</db:section>
</db:section>
</db:article>
