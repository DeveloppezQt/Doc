<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QPictureIO Class</db:title>
<db:productname>QtGui</db:productname>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpictureio.xml">QPictureIO</db:link> class contains parameters for loading and saving pictures.</db:para>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPictureIO</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPictureIO is part of <db:simplelist><db:member><db:link xlink:href="painting.xml">Painting Classes</db:link></db:member><db:member>io</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is deprecated. We strongly advise against using it in new code.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpictureio.xml">QPictureIO</db:link> contains a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> object that is used for picture data I/O. The programmer can install new picture file formats in addition to those that Qt provides.</db:para>
<db:para>You don't normally need to use this class; <db:link xlink:href="qpicture.xml#load">QPicture::load</db:link>(), <db:link xlink:href="qpicture.xml#save">QPicture::save</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml">QPicture</db:link></db:member>
<db:member><db:link xlink:href="qpixmap.xml">QPixmap</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPictureIO">
<db:title>QPictureIO::QPictureIO()</db:title>
<db:para>Constructs a <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> object with all parameters set to zero.</db:para>
</db:section>
<db:section xml:id="QPictureIO-1">
<db:title>QPictureIO::QPictureIO(QIODevice *<db:emphasis>ioDevice</db:emphasis>, const char *<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> object with the I/O device <db:code role="parameter">ioDevice</db:code> and a <db:code role="parameter">format</db:code> tag.</db:para>
</db:section>
<db:section xml:id="QPictureIO-2">
<db:title>QPictureIO::QPictureIO(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> object with the file name <db:code role="parameter">fileName</db:code> and a <db:code role="parameter">format</db:code> tag.</db:para>
</db:section>
<db:section xml:id="dtor.QPictureIO">
<db:title>[noexcept] QPictureIO::~QPictureIO()</db:title>
<db:para>Destroys the object and all related data.</db:para>
</db:section>
<db:section xml:id="defineIOHandler">
<db:title>[static] void QPictureIO::defineIOHandler(const char *<db:emphasis>format</db:emphasis>, const char *<db:emphasis>header</db:emphasis>, const char *<db:emphasis>flags</db:emphasis>, picture_io_handler <db:emphasis>readPicture</db:emphasis>, picture_io_handler <db:emphasis>writePicture</db:emphasis>)</db:title>
<db:para>Defines a picture I/O handler for the picture format called <db:code role="parameter">format</db:code>, which is recognized using the regular expression defined in <db:code role="parameter">header</db:code>, read using <db:code role="parameter">readPicture</db:code> and written using <db:code role="parameter">writePicture</db:code>.</db:para>
<db:para><db:code role="parameter">flags</db:code> is a string of single-character flags for this format. The only flag defined currently is T (upper case), so the only legal value for <db:code role="parameter">flags</db:code> are &quot;T&quot; and the empty string. The &quot;T&quot; flag means that the picture file is a text file, and Qt should treat all newline conventions as equivalent. (XPM files and some PPM files are text files for example.)</db:para>
<db:para><db:code role="parameter">format</db:code> is used to select a handler to write a <db:link xlink:href="qpicture.xml">QPicture</db:link>; <db:code role="parameter">header</db:code> is used to select a handler to read an picture file.</db:para>
<db:para>If <db:code role="parameter">readPicture</db:code> is a null pointer, the <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> will not be able to read pictures in <db:code role="parameter">format</db:code>. If <db:code role="parameter">writePicture</db:code> is a null pointer, the <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> will not be able to write pictures in <db:code role="parameter">format</db:code>. If both are null, the <db:link xlink:href="qpictureio.xml" role="deprecated">QPictureIO</db:link> object is valid but useless.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">void readSVG(QPictureIO *picture)
{
    // read the picture using the picture-&gt;ioDevice()
}

void writeSVG(QPictureIO *picture)
{
    // write the picture using the picture-&gt;ioDevice()
}

    // add the SVG picture handler
    // ...
</db:programlisting>
<db:para>Before the regular expression test, all the 0 bytes in the file header are converted to 1 bytes. This is done because when Qt was ASCII-based, <db:link xlink:href="qregexp.xml">QRegExp</db:link> could not handle 0 bytes in strings.</db:para>
<db:para>The regexp is only applied on the first 14 bytes of the file.</db:para>
<db:para>(Note that if one handlerIO supports writing a format and another supports reading it, Qt supports both reading and writing. If two handlers support the same operation, Qt chooses one arbitrarily.)</db:para>
</db:section>
<db:section xml:id="description">
<db:title>QString QPictureIO::description() const</db:title>
<db:para>Returns the picture description string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setDescription">setDescription</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>QString QPictureIO::fileName() const</db:title>
<db:para>Returns the file name currently set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>const char *QPictureIO::format() const</db:title>
<db:para>Returns the picture format string or 0 if no format has been explicitly set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setFormat">setFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="gamma">
<db:title>float QPictureIO::gamma() const</db:title>
<db:para>Returns the gamma value at which the picture will be viewed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setGamma">setGamma</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputFormats">
<db:title>[static] QList&lt;QByteArray&gt; QPictureIO::inputFormats()</db:title>
<db:para>Returns a sorted list of picture formats that are supported for picture input.</db:para>
</db:section>
<db:section xml:id="ioDevice">
<db:title>QIODevice *QPictureIO::ioDevice() const</db:title>
<db:para>Returns the IO device currently set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setIODevice">setIODevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputFormats">
<db:title>[static] QList&lt;QByteArray&gt; QPictureIO::outputFormats()</db:title>
<db:para>Returns a sorted list of picture formats that are supported for picture output.</db:para>
</db:section>
<db:section xml:id="parameters">
<db:title>const char *QPictureIO::parameters() const</db:title>
<db:para>Returns the picture's parameters string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setParameters">setParameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="picture">
<db:title>const QPicture &amp;QPictureIO::picture() const</db:title>
<db:para>Returns the picture currently set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setPicture">setPicture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pictureFormat">
<db:title>[static] QByteArray QPictureIO::pictureFormat(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Returns a string that specifies the picture format of the file <db:code role="parameter">fileName</db:code>, or null if the file cannot be read or if the format is not recognized.</db:para>
</db:section>
<db:section xml:id="pictureFormat-1">
<db:title>[static] QByteArray QPictureIO::pictureFormat(QIODevice *<db:emphasis>d</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns a string that specifies the picture format of the picture read from IO device <db:code role="parameter">d</db:code>, or 0 if the device cannot be read or if the format is not recognized.</db:para>
<db:para>Make sure that <db:code role="parameter">d</db:code> is at the right position in the device (for example, at the beginning of the file).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">QIODevice::at()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="quality">
<db:title>int QPictureIO::quality() const</db:title>
<db:para>Returns the quality of the written picture, related to the compression ratio.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setQuality">setQuality</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#save">QPicture::save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>bool QPictureIO::read()</db:title>
<db:para>Reads an picture into memory and returns true if the picture was successfully read; otherwise returns false.</db:para>
<db:para>Before reading an picture you must set an IO device or a file name. If both an IO device and a file name have been set, the IO device will be used.</db:para>
<db:para>Setting the picture file format string is optional.</db:para>
<db:para>Note that this function does <db:emphasis>not</db:emphasis> set the <db:link xlink:href="qpictureio.xml#format">format</db:link> used to read the picture. If you need that information, use the <db:link xlink:href="qpictureio.xml#pictureFormat">pictureFormat</db:link>() static functions.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">        QPictureIO iio;
        QPixmap  pixmap;
        iio.setFileName(&quot;vegeburger.pic&quot;);
        if (iio.read()) {        // OK
            QPicture picture = iio.picture();
            QPainter painter(&amp;pixmap);
            painter.drawPicture(0, 0, picture);
        }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setIODevice">setIODevice</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#load">QPixmap::load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDescription">
<db:title>void QPictureIO::setDescription(const QString &amp;<db:emphasis>description</db:emphasis>)</db:title>
<db:para>Sets the picture description string for picture handlers that support picture descriptions to <db:code role="parameter">description</db:code>.</db:para>
<db:para>Currently, no picture format supported by Qt uses the description string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#description">description</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QPictureIO::setFileName(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the name of the file to read or write an picture from to <db:code role="parameter">fileName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#fileName">fileName</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#setIODevice">setIODevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFormat">
<db:title>void QPictureIO::setFormat(const char *<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Sets the picture format to <db:code role="parameter">format</db:code> for the picture to be read or written.</db:para>
<db:para>It is necessary to specify a format before writing an picture, but it is not necessary to specify a format before reading an picture.</db:para>
<db:para>If no format has been set, Qt guesses the picture format before reading it. If a format is set the picture will only be read if it has that format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#write">write</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#format">format</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGamma">
<db:title>void QPictureIO::setGamma(float <db:emphasis>gamma</db:emphasis>)</db:title>
<db:para>Sets the gamma value at which the picture will be viewed to <db:code role="parameter">gamma</db:code>. If the picture format stores a gamma value for which the picture is intended to be used, then this setting will be used to modify the picture. Setting to 0.0 will disable gamma correction (i.e. any specification in the file will be ignored).</db:para>
<db:para>The default value is 0.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#gamma">gamma</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setIODevice">
<db:title>void QPictureIO::setIODevice(QIODevice *<db:emphasis>ioDevice</db:emphasis>)</db:title>
<db:para>Sets the IO device to be used for reading or writing an picture.</db:para>
<db:para>Setting the IO device allows pictures to be read/written to any block-oriented <db:link xlink:href="qiodevice.xml">QIODevice</db:link>.</db:para>
<db:para>If <db:code role="parameter">ioDevice</db:code> is not null, this IO device will override file name settings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setParameters">
<db:title>void QPictureIO::setParameters(const char *<db:emphasis>parameters</db:emphasis>)</db:title>
<db:para>Sets the picture's parameter string to <db:code role="parameter">parameters</db:code>. This is for picture handlers that require special parameters.</db:para>
<db:para>Although the current picture formats supported by Qt ignore the parameters string, it may be used in future extensions or by contributions (for example, JPEG).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#parameters">parameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPicture">
<db:title>void QPictureIO::setPicture(const QPicture &amp;<db:emphasis>picture</db:emphasis>)</db:title>
<db:para>Sets the picture to <db:code role="parameter">picture</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#picture">picture</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQuality">
<db:title>void QPictureIO::setQuality(int <db:emphasis>q</db:emphasis>)</db:title>
<db:para>Sets the quality of the written picture to <db:code role="parameter">q</db:code>, related to the compression ratio.</db:para>
<db:para><db:code role="parameter">q</db:code> must be in the range -1..100. Specify 0 to obtain small compressed files, 100 for large uncompressed files. (-1 signifies the default compression.)</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#quality">quality</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#save">QPicture::save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStatus">
<db:title>void QPictureIO::setStatus(int <db:emphasis>status</db:emphasis>)</db:title>
<db:para>Sets the picture IO status to <db:code role="parameter">status</db:code>. A non-zero value indicates an error, whereas 0 means that the IO operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#status">status</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="status">
<db:title>int QPictureIO::status() const</db:title>
<db:para>Returns the picture's IO status. A non-zero value indicates an error, whereas 0 means that the IO operation was successful.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setStatus">setStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="write">
<db:title>bool QPictureIO::write()</db:title>
<db:para>Writes an picture to an IO device and returns true if the picture was successfully written; otherwise returns false.</db:para>
<db:para>Before writing an picture you must set an IO device or a file name. If both an IO device and a file name have been set, the IO device will be used.</db:para>
<db:para>The picture will be written using the specified picture format.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">        QPictureIO iio;
        QPicture   picture;
        QPainter painter(&amp;picture);
        painter.drawPixmap(0, 0, pixmap);
        iio.setPicture(picture);
        iio.setFileName(&quot;vegeburger.pic&quot;);
        iio.setFormat(&quot;PIC&quot;);
        if (iio.write())
            return true; // returned true if written successfully
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpictureio.xml#setIODevice">setIODevice</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#setFileName">setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#setFormat">setFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
