<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextObjectInterface Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> class allows drawing of custom text objects in <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>s.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextObjectInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A text object describes the structure of one or more elements in a text document; for instance, images imported from HTML are implemented using text objects. A text object knows how to lay out and draw its elements when a document is being rendered.</db:para>
<db:para>Qt allows custom text objects to be inserted into a document by registering a custom <db:link xlink:href="qtextformat.xml#objectType">object type</db:link> with <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link>. A <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> must also be implemented for this type and be <db:link xlink:href="qabstracttextdocumentlayout.xml#registerHandler">registered</db:link> with the <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> of the document. When the object type is encountered while rendering a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>, the <db:link xlink:href="qtextobjectinterface.xml#intrinsicSize">intrinsicSize</db:link>() and <db:link xlink:href="qtextobjectinterface.xml#drawObject">drawObject</db:link>() functions of the interface are called.</db:para>
<db:para>The following list explains the required steps of inserting a custom text object into a document:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Choose an <db:code role="parameter">objectType</db:code>. The <db:code role="parameter">objectType</db:code> is an integer with a value greater or equal to <db:link xlink:href="qtextformat.xml#ObjectTypes-enum">QTextFormat::UserObject</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Create a <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> object and set the object type to the chosen type using the setObjectType() function.</db:para>
</db:listitem>
<db:listitem>
<db:para>Implement the <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> class.</db:para>
</db:listitem>
<db:listitem>
<db:para>Call <db:link xlink:href="qabstracttextdocumentlayout.xml#registerHandler">QAbstractTextDocumentLayout::registerHandler</db:link>() with an instance of your <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> subclass to register your object type.</db:para>
</db:listitem>
<db:listitem>
<db:para>Insert <db:link xlink:href="qchar.xml#SpecialCharacter-enum">QChar::ObjectReplacementCharacter</db:link> with the aforementioned <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> of the chosen object type into the document. As mentioned, the functions of <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> <db:link xlink:href="qtextobjectinterface.xml#intrinsicSize">intrinsicSize</db:link>() and <db:link xlink:href="qtextobjectinterface.xml#drawObject">drawObject</db:link>() will then be called with the <db:link xlink:href="qtextformat.xml">QTextFormat</db:link> as parameter whenever the replacement character is encountered.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A class implementing a text object needs to inherit both <db:link xlink:href="qobject.xml">QObject</db:link> and <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link>. <db:link xlink:href="qobject.xml">QObject</db:link> must be the first class inherited. For instance:</db:para>
<db:programlisting language="cpp">class SvgTextObject : public QObject, public QTextObjectInterface
{
    Q_OBJECT
    Q_INTERFACES(QTextObjectInterface)
</db:programlisting>
<db:para>The data of a text object is usually stored in the <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> using <db:link xlink:href="qtextformat.xml#setProperty">QTextCharFormat::setProperty</db:link>(), and then retrieved with <db:link xlink:href="qtextformat.xml#property">QTextCharFormat::property</db:link>().</db:para>
<db:warning>
<db:para>Copy and Paste operations ignore custom text objects.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtsvg-richtext-textobject-example.xml">Text Object Example</db:link></db:member>
<db:member><db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link></db:member>
<db:member><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QTextObjectInterface">
<db:title>[virtual] QTextObjectInterface::~QTextObjectInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QTextObjectInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QTextObjectInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link>.</db:para>
</db:section>
<db:section xml:id="drawObject">
<db:title>[pure virtual] void QTextObjectInterface::drawObject(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>, QTextDocument *<db:emphasis>doc</db:emphasis>, int <db:emphasis>posInDocument</db:emphasis>, const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawObject</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>doc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posInDocument</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawObject(QPainter *painter, const QRectF &amp;rect, QTextDocument *doc, int posInDocument, const QTextFormat &amp;format) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws this text object using the specified <db:code role="parameter">painter</db:code>.</db:para>
<db:para>The size of the rectangle, <db:code role="parameter">rect</db:code>, to draw in is the size previously calculated by <db:link xlink:href="qtextobjectinterface.xml#intrinsicSize">intrinsicSize</db:link>(). The rectangles position is relative to the <db:code role="parameter">painter</db:code>.</db:para>
<db:para>You also get the document (<db:code role="parameter">doc</db:code>) and the position (<db:code role="parameter">posInDocument</db:code>) of the <db:code role="parameter">format</db:code> in that document.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextobjectinterface.xml#intrinsicSize">intrinsicSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="intrinsicSize">
<db:title>[pure virtual] QSizeF QTextObjectInterface::intrinsicSize(QTextDocument *<db:emphasis>doc</db:emphasis>, int <db:emphasis>posInDocument</db:emphasis>, const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>intrinsicSize</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>doc</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posInDocument</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF intrinsicSize(QTextDocument *doc, int posInDocument, const QTextFormat &amp;format) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The intrinsicSize() function returns the size of the text object represented by <db:code role="parameter">format</db:code> in the given document (<db:code role="parameter">doc</db:code>) at the given position (<db:code role="parameter">posInDocument</db:code>).</db:para>
<db:para>The size calculated will be used for subsequent calls to <db:link xlink:href="qtextobjectinterface.xml#drawObject">drawObject</db:link>() for this <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextobjectinterface.xml#drawObject">drawObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
