<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Grabber Example</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Grabber examples shows how to retrieve the contents of an OpenGL framebuffer.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;glwidget.h&quot;
#include &quot;mainwindow.h&quot;

#include &lt;QtWidgets&gt;

MainWindow::MainWindow()
{
    centralWidget = new QWidget;
    setCentralWidget(centralWidget);

    glWidget = new GLWidget;
    pixmapLabel = new QLabel;

    glWidgetArea = new QScrollArea;
    glWidgetArea-&gt;setWidget(glWidget);
    glWidgetArea-&gt;setWidgetResizable(true);
    glWidgetArea-&gt;setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    glWidgetArea-&gt;setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    glWidgetArea-&gt;setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
    glWidgetArea-&gt;setMinimumSize(50, 50);

    pixmapLabelArea = new QScrollArea;
    pixmapLabelArea-&gt;setWidget(pixmapLabel);
    pixmapLabelArea-&gt;setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
    pixmapLabelArea-&gt;setMinimumSize(50, 50);

    xSlider = createSlider(SIGNAL(xRotationChanged(int)),
                           SLOT(setXRotation(int)));
    ySlider = createSlider(SIGNAL(yRotationChanged(int)),
                           SLOT(setYRotation(int)));
    zSlider = createSlider(SIGNAL(zRotationChanged(int)),
                           SLOT(setZRotation(int)));

    createActions();
    createMenus();

    QGridLayout *centralLayout = new QGridLayout;
    centralLayout-&gt;addWidget(glWidgetArea, 0, 0);
    centralLayout-&gt;addWidget(pixmapLabelArea, 0, 1);
    centralLayout-&gt;addWidget(xSlider, 1, 0, 1, 2);
    centralLayout-&gt;addWidget(ySlider, 2, 0, 1, 2);
    centralLayout-&gt;addWidget(zSlider, 3, 0, 1, 2);
    centralWidget-&gt;setLayout(centralLayout);

    xSlider-&gt;setValue(15 * 16);
    ySlider-&gt;setValue(345 * 16);
    zSlider-&gt;setValue(0 * 16);

    setWindowTitle(tr(&quot;Grabber&quot;));
    resize(400, 300);
}

void MainWindow::renderIntoPixmap()
{
    QSize size = getSize();
    if (size.isValid()) {
        QPixmap pixmap = glWidget-&gt;renderPixmap(size.width(), size.height());
        setPixmap(pixmap);
    }
}

void MainWindow::grabFrameBuffer()
{
    QImage image = glWidget-&gt;grabFrameBuffer();
    setPixmap(QPixmap::fromImage(image));
}

void MainWindow::clearPixmap()
{
    setPixmap(QPixmap());
}

void MainWindow::about()
{
    QMessageBox::about(this, tr(&quot;About Grabber&quot;),
            tr(&quot;The &lt;b&gt;Grabber&lt;/b&gt; example demonstrates two approaches for &quot;
               &quot;rendering OpenGL into a Qt pixmap.&quot;));
}

void MainWindow::createActions()
{
    renderIntoPixmapAct = new QAction(tr(&quot;&amp;Render into Pixmap...&quot;), this);
    renderIntoPixmapAct-&gt;setShortcut(tr(&quot;Ctrl+R&quot;));
    connect(renderIntoPixmapAct, SIGNAL(triggered()),
            this, SLOT(renderIntoPixmap()));

    grabFrameBufferAct = new QAction(tr(&quot;&amp;Grab Frame Buffer&quot;), this);
    grabFrameBufferAct-&gt;setShortcut(tr(&quot;Ctrl+G&quot;));
    connect(grabFrameBufferAct, SIGNAL(triggered()),
            this, SLOT(grabFrameBuffer()));

    clearPixmapAct = new QAction(tr(&quot;&amp;Clear Pixmap&quot;), this);
    clearPixmapAct-&gt;setShortcut(tr(&quot;Ctrl+L&quot;));
    connect(clearPixmapAct, SIGNAL(triggered()), this, SLOT(clearPixmap()));

    exitAct = new QAction(tr(&quot;E&amp;xit&quot;), this);
    exitAct-&gt;setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(renderIntoPixmapAct);
    fileMenu-&gt;addAction(grabFrameBufferAct);
    fileMenu-&gt;addAction(clearPixmapAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(exitAct);

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

QSlider *MainWindow::createSlider(const char *changedSignal,
                                  const char *setterSlot)
{
    QSlider *slider = new QSlider(Qt::Horizontal);
    slider-&gt;setRange(0, 360 * 16);
    slider-&gt;setSingleStep(16);
    slider-&gt;setPageStep(15 * 16);
    slider-&gt;setTickInterval(15 * 16);
    slider-&gt;setTickPosition(QSlider::TicksRight);
    connect(slider, SIGNAL(valueChanged(int)), glWidget, setterSlot);
    connect(glWidget, changedSignal, slider, SLOT(setValue(int)));
    return slider;
}

void MainWindow::setPixmap(const QPixmap &amp;pixmap)
{
    pixmapLabel-&gt;setPixmap(pixmap);
    QSize size = pixmap.size() / pixmap.devicePixelRatio();
    if (size - QSize(1, 0) == pixmapLabelArea-&gt;maximumViewportSize())
        size -= QSize(1, 0);
    pixmapLabel-&gt;resize(size);
}

QSize MainWindow::getSize()
{
    bool ok;
    QString text = QInputDialog::getText(this, tr(&quot;Grabber&quot;),
                                         tr(&quot;Enter pixmap size:&quot;),
                                         QLineEdit::Normal,
                                         tr(&quot;%1 x %2&quot;).arg(glWidget-&gt;width())
                                                      .arg(glWidget-&gt;height()),
                                         &amp;ok);
    if (!ok)
        return QSize();

    QRegExp regExp(tr(&quot;([0-9]+) *x *([0-9]+)&quot;));
    if (regExp.exactMatch(text)) {
        int width = regExp.cap(1).toInt();
        int height = regExp.cap(2).toInt();
        if (width &gt; 0 &amp;&amp; width &lt; 2048 &amp;&amp; height &gt; 0 &amp;&amp; height &lt; 2048)
            return QSize(width, height);
    }

    return glWidget-&gt;size();
}

</db:programlisting>
</db:article>
