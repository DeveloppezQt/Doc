<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Geometry QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base type for custom geometry.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-helpers-gridgeometry.xml" xlink:role="">GridGeometry</db:link>, <db:link xlink:href="qml-qtquick3d-helpers-heightfieldgeometry.xml" xlink:role="">HeightFieldGeometry</db:link>, and <db:link xlink:href="qml-qtquick3d-helpers-proceduralmesh.xml" xlink:role="">ProceduralMesh</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Object3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiates:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Custom geometry allows using application-generated vertex and index data, that can possibly change dynamically as well. To use custom geometry, do not assign a <db:code>.mesh</db:code> file as the <db:link xlink:href="qml-qtquick3d-model.xml#source-prop">source</db:link> to a Model. Instead, set its <db:link xlink:href="qml-qtquick3d-model.xml#geometry-prop">geometry</db:link> property to reference a Geometry object.</db:para>
<db:para>A typical way of implementing custom geometry is by creating a <db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link> subclass in C++ and registering the new type for use with QML.</db:para>
<db:para>It is also possible to use the built-in custom geometry provider <db:link xlink:href="qml-qtquick3d-helpers-gridgeometry.xml">GridGeometry</db:link> in the <db:code>Helpers</db:code> module. The following is an example of <db:link xlink:href="qml-qtquick3d-helpers-gridgeometry.xml">GridGeometry</db:link>. Any application-provided Geometry subclass can be taken into use in the same manner.</db:para>
<db:programlisting language="cpp">import QtQuick3D.Helpers

Model {
    geometry: GridGeometry {
    }
    materials: [
        DefaultMaterial {
            diffuseColor: &quot;white&quot;
            lighting: DefaultMaterial.NoLighting
        }
    ]
}
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick3d-customgeometry-example.xml">Qt Quick 3D - Custom Geometry Example</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-model.xml">Model</db:link></db:member>
<db:member><db:link xlink:href="qquick3dgeometry.xml">QQuick3DGeometry</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
