<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SceneEnvironment QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lets you configure how a scene is rendered.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By:</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml" xlink:role="">ExtendedSceneEnvironment</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Object3D</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> defines a set of global properties for how a scene should be rendered.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link>.Helpers module offers an <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> type which inherits from <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> and adds a number of built-in effects on top.</db:para>
</db:note>
<db:para>To use <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> or <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link>, associate the <db:link xlink:href="qml-qtquick3d-view3d.xml#environment-prop">environment property</db:link> of a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> with an instance of these types. The object can be declared inline, for example like this:</db:para>
<db:programlisting language="qml">View3D {
    environment: SceneEnvironment {
        antialiasingMode: SceneEnvironment.MSAA
        tonemapMode: SceneEnvironment.TonemapModeFilmic
        backgroundMode: SceneEnvironment.SkyBox
        lightProbe: Texture {
            source: &quot;panoramic_hdri_background.hdr&quot;
        }
    }
}
</db:programlisting>
<db:para>Alternatively, the environment object can be defined separately. It can then be referenced by one or more <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> objects. An example code snippet, using <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> this time:</db:para>
<db:programlisting language="qml">ExtendedSceneEnvironment {
    id: myEnv
    vignetteEnabled: true
}

View3D {
    width: parent.width / 2
    environment: myEnv
}

View3D {
    width: parent.width / 2
    x: parent.width / 2
    environment: myEnv
}
</db:programlisting>
<db:section xml:id="feature-overview">
<db:title>Feature Overview</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Anti-aliasing settings. See <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml">Anti-Aliasing Best Practices</db:link> for an overview of this topic. The relevant properties are <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingQuality-prop">antialiasingQuality</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#specularAAEnabled-prop">specularAAEnabled</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAEnabled-prop">temporalAAEnabled</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAStrength-prop">temporalAAStrength</db:link>. In addition, if <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> is used, another method is available via <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml#fxaaEnabled-prop">fxaaEnabled</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Screen space ambient occlusion. The relevant properties are <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoEnabled-prop">aoEnabled</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoBias-prop">aoBias</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDither-prop">aoDither</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSampleRate-prop">aoSampleRate</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Clear color, skybox, image-based lighting. For more information on IBL, see <db:link xlink:href="quick3d-asset-conditioning-ibl.xml">Using Image-Based Lighting</db:link>. The relevant properties are <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#clearColor-prop">clearColor</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">probeExposure</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeHorizon-prop">probeHorizon</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeOrientation-prop">probeOrientation</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#skyboxBlurAmount-prop">skyboxBlurAmount</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#skyBoxCubeMap-prop">skyBoxCubeMap</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Tonemapping. <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#tonemapMode-prop">tonemapMode</db:link> configures the tonemapping method that is used to convert the high dynamic range color values to the 0-1 range at the end of the graphics pipeline. <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link> offers a few additional properties, such as <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml#whitePoint-prop">whitePoint</db:link> and <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml#sharpnessAmount-prop">sharpnessAmount</db:link> that can be used to tune the tonemapping calculations.</db:para>
</db:listitem>
<db:listitem>
<db:para>Depth buffer settings. The relevant properties are <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#depthPrePassEnabled-prop">depthPrePassEnabled</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#depthTestEnabled-prop">depthTestEnabled</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Post-processing effects. In addition to the built-in post-processing effects provided by <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link>, applications can provide their own custom effects via the <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> type. The <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#effects-prop">effects</db:link> property is a list of <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> instances.</db:para>
</db:listitem>
<db:listitem>
<db:para>Debug visualization settings, such as wireframe mode or rendering only certain color contributions for the materials. This is controlled by the <db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link> object referenced from the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#debugSettings-prop">debugSettings</db:link> property. Most of these settings can also be controlled interactively when a <db:link xlink:href="qml-qtquick3d-helpers-debugview.xml">DebugView</db:link> item is added to the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>Fog settings. To enable fog, set an appropriately configured <db:link xlink:href="qtquick3d-attribution-fog.xml#fog">Fog</db:link> object in the <db:link xlink:href="qtquick3d-attribution-fog.xml#fog">fog</db:link> property.</db:para>
</db:listitem>
<db:listitem>
<db:para>Lightmap baking settings. When pre-baked lightmaps are used for some models in the scene, the <db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link> object set in the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightmapper-prop">lightmapper</db:link> property defines the settings used during the baking process.</db:para>
</db:listitem>
<db:listitem>
<db:para>Scissor settings. To apply a scissor different than the viewport, set the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#scissorRect-prop">scissorRect</db:link> property.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="antialiasingMode-prop">
<db:title>antialiasingMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>antialiasingMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls the antialiasing mode that is applied when rendering the scene.</db:para>
<db:para>Possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SceneEnvironment.NoAA</db:para>
</db:td>
<db:td>
<db:para>No antialiasing is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.SSAA</db:para>
</db:td>
<db:td>
<db:para>Supersample antialiasing is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.MSAA</db:para>
</db:td>
<db:td>
<db:para>Multisample antialiasing is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.ProgressiveAA</db:para>
</db:td>
<db:td>
<db:para>Progressive antialiasing is applied.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>SceneEnvironment.NoAA</db:code>.</db:para>
<db:para><db:emphasis role="bold">Supersampling</db:emphasis></db:para>
<db:para>The scene is rendered in a higher resolution, and then scaled down to actual resolution.</db:para>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: High quality. Antialiases all scene content and not just geometry silhouettes.</db:para>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Usually more expensive than MSAA. Increases video memory usage. Supported with <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> items with all renderMode except Inline, but since the technique implies rendering to a texture first, enabling SSAA with a renderMode of Underlay or Overlay will result in using an intermediate texture and render pass that would normally not be needed, meaning the performance costs may be more noticeable. It is recommended to use SSAA only when the renderMode is the default Offscreen.</db:para>
<db:para><db:emphasis role="bold">Multisampling</db:emphasis></db:para>
<db:para>The edges of geometry are super-sampled, resulting in smoother silhouettes. This technique has no effect on the materials inside geometry, however.</db:para>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Works with any <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> item regardless of the renderMode. Good results on geometry silhouettes, where aliasing is often most noticeable; works with fast animation without issues. Performance depends purely on the system's (GPU) capabilities.</db:para>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Does not help with texture or reflection issues. Increases video memory usage. Can be expensive to use on less powerful graphics hardware. Can be controlled on a per-window basis or for individual <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> items depending on the renderMode. When using Underlay/Overlay with an effect applied or Offscreen, MSAA can be controlled for each <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> item. On the other hand, using Underlay/Overlay without any effect or Inline will make MSAA controlled per-window.</db:para>
<db:note>
<db:para>For <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> items with a <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> other than Underlay/Overlay with effects or Offscreen, multisampling can only be enabled via the <db:link xlink:href="qsurfaceformat.xml#setSamples">QSurfaceFormat</db:link> of the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link>. This will then affect all content, both 2D and 3D, in that window.</db:para>
</db:note>
<db:para><db:emphasis role="bold">Progressive antialiasing</db:emphasis></db:para>
<db:para>This property enables and sets the level of progressive antialiasing applied to the scene.</db:para>
<db:para>When all content of the scene has stopped moving, the camera is jiggled very slightly between frames, and the result of each new frame is blended with the previous frames. The more frames you accumulate, the better looking the result.</db:para>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Provides great results when all content in the scene is standing still.</db:para>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Does not take effect if any visual changes are occurring. Expensive due to having to accumulate and blend. Increases video memory usage.</db:para>
<db:para>See <db:link xlink:href="quick3d-asset-conditioning-anti-aliasing.xml">Anti-Aliasing Best Practices</db:link> for further discussion on anti-aliasing methods.</db:para>
</db:section>
<db:section xml:id="antialiasingQuality-prop">
<db:title>antialiasingQuality : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>antialiasingQuality</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property sets the level of antialiasing applied to the scene. Behavior depends on used <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link>. With <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link> property set to <db:code>NoAA</db:code> this property doesn't have an effect.</db:para>
<db:para>Possible values are:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SceneEnvironment.Medium</db:para>
</db:td>
<db:td>
<db:para>SSAA: Antialiasing uses 1.2x supersampling resolution. MSAA: Antialiasing uses 2 samples per pixel. ProgressiveAA: Antialiasing uses 2 frames for final image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.High</db:para>
</db:td>
<db:td>
<db:para>SSAA: Antialiasing uses 1.5x supersampling resolution. MSAA: Antialiasing uses 4 samples per pixel. ProgressiveAA: Antialiasing uses 4 frames for final image.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.VeryHigh</db:para>
</db:td>
<db:td>
<db:para>SSAA: Antialiasing uses 2.0x supersampling resolution. MSAA: Antialiasing uses 8 samples per pixel. ProgressiveAA: Antialiasing uses 8 frames for final image.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>SceneEnvironment.High</db:code></db:para>
</db:section>
<db:section xml:id="aoBias-prop">
<db:title>aoBias : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>aoBias</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a cutoff distance preventing objects from exhibiting ambient occlusion at close distances. Higher values increase the distance required between objects before ambient occlusion is seen.</db:para>
<db:note>
<db:para>If you see ambient occlusion shadowing on objects where there should be no shadowing, increase the value slightly to clip away close results.</db:para>
</db:note>
<db:para>The default value is 0.0.</db:para>
</db:section>
<db:section xml:id="aoDistance-prop">
<db:title>aoDistance : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>aoDistance</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines roughly how far ambient occlusion shadows spread away from objects. Greater distances cause increasing impact to performance.</db:para>
<db:para>The default value is 5.0.</db:para>
<db:para>Pictured here with the default <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link> and the maximum <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>aoDistance of 5</db:para>
</db:th>
<db:th>
<db:para>aoDistance of 1</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_distance_5.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_distance_1.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Getting visually good-looking screen space ambient occlusion is dependent on carefully tuning a number of related parameters, such as <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link>, aoDistance, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDither-prop">aoDither</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoBias-prop">aoBias</db:link>, and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSampleRate-prop">aoSampleRate</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aoDither-prop">
<db:title>aoDither : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>aoDither</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is enabled it scatters the edges of the ambient occlusion shadow bands to improve smoothness (at the risk of sometimes producing obvious patterned artifacts).</db:para>
<db:note>
<db:para>Very large distances between the clipping planes of your camera may cause problems with ambient occlusion. If you are seeing odd banding in your ambient occlusion, try adjusting the <db:link xlink:href="qml-qtquick3d-perspectivecamera.xml#clipFar-prop">clipFar</db:link> property of your camera to be closer to your content.</db:para>
</db:note>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-perspectivecamera.xml#clipFar-prop">PerspectiveCamera.clipFar</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-orthographiccamera.xml#clipFar-prop">OrthographicCamera.clipFar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aoEnabled-prop">
<db:title>[since 6.5] aoEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>aoEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Enable or disable ambient occlusion.</db:para>
<db:para>The default value is <db:code>false</db:code>, which means ambient occlusion is disabled.</db:para>
<db:note>
<db:para>If <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link> or <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link> is 0, then setting this property to <db:code>true</db:code> will also set those values appropriately to make the ambient occlusion effective.</db:para>
</db:note>
<db:note>
<db:para>Getting visually good-looking screen space ambient occlusion is dependent on carefully tuning a number of related parameters, such as <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDither-prop">aoDither</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoBias-prop">aoBias</db:link>, and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSampleRate-prop">aoSampleRate</db:link>.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aoSampleRate-prop">
<db:title>aoSampleRate : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>aoSampleRate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines ambient occlusion quality (more shades of gray) at the expense of performance.</db:para>
<db:para>The value must be 2, 3, or 4. The default value is 2.</db:para>
</db:section>
<db:section xml:id="aoSoftness-prop">
<db:title>aoSoftness : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>aoSoftness</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines how smooth the edges of the ambient occlusion shading are.</db:para>
<db:para>The value must be between 0.0 and 50.0. The default value is 50.0.</db:para>
<db:para>Pictured here with the default <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link> and the maximum <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>aoSoftness of 50</db:para>
</db:th>
<db:th>
<db:para>aoSoftness of 25</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_softness_default.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_softness_half.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Getting visually good-looking screen space ambient occlusion is dependent on carefully tuning a number of related parameters, such as <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link>, aoSoftness, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDither-prop">aoDither</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoBias-prop">aoBias</db:link>, and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSampleRate-prop">aoSampleRate</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoStrength-prop">aoStrength</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aoStrength-prop">
<db:title>aoStrength : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>aoStrength</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines the amount of ambient occulusion applied. Ambient occulusion is a form of approximated global illumination which causes non-directional self-shadowing where objects are close together. A value of 100 causes full darkness shadows; lower values cause the shadowing to appear lighter. A value of 0 disables ambient occlusion entirely, improving performance at a cost to the visual realism of 3D objects rendered in the scene.</db:para>
<db:para>All values other than 0 have the same impact to the performance.</db:para>
<db:para>The default value is 0.0. The maximum value is 100.0.</db:para>
<db:para>A value of 0 is equivalent to setting <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoEnabled-prop">aoEnabled</db:link> to false.</db:para>
<db:para>Pictured here with the default <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link> and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>aoStrength of 0 (AO disabled)</db:para>
</db:th>
<db:th>
<db:para>aoStrength of 100</db:para>
</db:th>
<db:th>
<db:para>aoStrength of 50</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_off.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_full_strength.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_ao_half_strength.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>Getting visually good-looking screen space ambient occlusion is dependent on carefully tuning a number of related parameters, such as aoStrength, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDither-prop">aoDither</db:link>, <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoBias-prop">aoBias</db:link>, and <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSampleRate-prop">aoSampleRate</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoEnabled-prop">aoEnabled</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoDistance-prop">aoDistance</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#aoSoftness-prop">aoSoftness</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="backgroundMode-prop">
<db:title>backgroundMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>backgroundMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property controls if and how the background of the scene should be cleared.</db:para>
<db:note>
<db:para>The clearing of the color buffer backing the View 3D does not always happen: depending on the <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> property the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> may not perform any clearing on its own, in which case <db:code>SceneEnvironment.Transparent</db:code> and <db:code>SceneEnvironment.Color</db:code> have no effect. Only the default <db:code>Offscreen</db:code> <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">render mode</db:link> (rendering into a texture) supports all clearing modes. With the <db:code>Underlay</db:code> mode, use <db:link xlink:href="qquickwindow.xml#color-prop">QQuickWindow::setColor</db:link>() or <db:link xlink:href="qml-qtquick-window.xml#color-prop">Window.color</db:link> to control the clear color for the Qt Quick scene. SkyBox is handled differently, as it implies drawing actual geometry, so that works identically across all render modes.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SceneEnvironment.Transparent</db:para>
</db:td>
<db:td>
<db:para>The scene is cleared to be transparent. This is useful to render 3D content on top of another item. This mode has no effect when the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is using a renderMode of Underlay or Overlay without any post processing enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.Color</db:para>
</db:td>
<db:td>
<db:para>The scene is cleared with the color specified by the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#clearColor-prop">clearColor</db:link> property. This mode has no effect when the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> is using a renderMode of Underlay or Overlay without any post processing enabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.SkyBox</db:para>
</db:td>
<db:td>
<db:para>The scene will not be cleared, but instead a SkyBox or Skydome will be rendered. The SkyBox is defined using the HDRI map defined in the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link> property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.SkyBoxCubeMap</db:para>
</db:td>
<db:td>
<db:para>The scene will not be cleared, but instead a SkyBox or Skydome will be rendered. The SkyBox is defined using the cubemap defined in the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#skyBoxCubeMap-prop">skyBoxCubeMap</db:link> property.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The default value is <db:code>SceneEnvironment.Transparent</db:code></db:para>
<db:para>Take the following example. The Suzanne model is expected to be pre-processed with the <db:code>balsam</db:code> tool and is sourced from the <db:link xlink:href="https://github.com/KhronosGroup/glTF-Sample-Models">glTF Sample Models</db:link> repository.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        id: v3d
        anchors.fill: parent

        environment: ExtendedSceneEnvironment {
            backgroundMode: SceneEnvironment.SkyBox
            lightProbe: Texture { source: &quot;00455_OpenfootageNET_field_low.hdr&quot; }

            glowEnabled: true
            glowStrength: 1.25
            glowBloom: 0.25
            glowBlendMode: ExtendedSceneEnvironment.GlowBlendMode.Additive
        }

        DirectionalLight {
        }

        Suzanne {
            scale: Qt.vector3d(50, 50, 50)
            z: -500
        }

        PerspectiveCamera {
            id: camera
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Using image-based lighting in additional to the <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link> and also using the light probe texture as the skybox gives us the following:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_background_ibl.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>What happens if there is no light probe?</db:para>
<db:programlisting language="qml">backgroundMode: SceneEnvironment.Transparent
</db:programlisting>
<db:para>Here the background is provided not by the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> but by the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> or <db:link xlink:href="qquickview.xml">QQuickView</db:link> hosting the 2D and 3D scene. Lighting is based on the <db:link xlink:href="qml-qtquick3d-directionallight.xml">DirectionalLight</db:link> only.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_background_transparent.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Using a fixed clear color:</db:para>
<db:programlisting language="qml">backgroundMode: SceneEnvironment.Color
clearColor: &quot;green&quot;
</db:programlisting>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_background_color.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link></db:member>
<db:member><db:link xlink:href="qquickwindow.xml#color-prop">QQuickWindow::setColor</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-window.xml#color-prop">Window::color</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearColor-prop">
<db:title>clearColor : color</db:title>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>clearColor</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines which color will be used to clear the viewport when using <db:code>SceneEnvironment.Color</db:code> for the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> property.</db:para>
<db:para>The default value is <db:code>Qt::black</db:code></db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="debugSettings-prop">
<db:title>[since 6.5] debugSettings : QtQuick3D::DebugSettings</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::DebugSettings</db:type>
<db:varname>debugSettings</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property specifies a <db:code>DebugSettings</db:code> object which is used to configure the debugging tools of the renderer. During construction the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> automatically creates a <db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link> object associated with itself, and therefore setting a custom <db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link> is usually not required.</db:para>
<db:para>An example of rendering the scene with wireframe mode enabled:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/debugsettings_wireframe.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Visualizing the normal vectors of the meshes:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/debugsettings_normals.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Visualizing the specular lighting contribution:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/debugsettings_specular.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depthPrePassEnabled-prop">
<db:title>depthPrePassEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>depthPrePassEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When enabled, the renderer performs a Z-prepass for opaque objects, meaning it renders them with a simple shader and color write disabled in order to get the depth buffer pre-filled before issuing draw calls for the main rendering passes.</db:para>
<db:para>This can improve performance depending on the scene contents. It is typically scenes with lots of overlapping objects and expensive fragment shading that benefit from this. At the same time, it is worth noting that the renderer performs front to back sorting for opaque objects, which in itself helps reducing unnecessary fragment shading, and therefore the Z-prepass does not always bring significant improvements.</db:para>
<db:para>On GPUs that use a tiled rendering architecture, which is common in mobile and embedded systems, it is recommended to set this to <db:code>false</db:code>.</db:para>
<db:para>The default value is <db:code>false</db:code>.</db:para>
<db:note>
<db:para>This property has no effect when depth testing is disabled.</db:para>
</db:note>
</db:section>
<db:section xml:id="depthTestEnabled-prop">
<db:title>depthTestEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>depthTestEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The default value is <db:code>true</db:code>. By default the renderer classifies the objects in the scene either as <db:code>opaque</db:code> or as <db:code>semi-transparent</db:code>. The objects (sub-meshes with the associated material) in the <db:code>opaque</db:code> list are rendered first, with depth testing and depth write enabled, providing optimal Z-culling for typical 3D objects that have no semi-transparent regions. The objects in the <db:code>semi-transparent</db:code> list are rendered with depth write disabled, although still with depth testing enabled (to test against the opaque objects), in back to front order (sorted based on their center point's distance from the camera). This allows correct blending (&quot;see through&quot;) for 3D objects that involve semi-transparent regions on their surface, either due to the <db:link xlink:href="qml-qtquick3d-node.xml#opacity-prop">node opacity</db:link> or due to some color or texture map in the material.</db:para>
<db:para>When this property is set to <db:code>false</db:code>, the Z-buffer is not written and tested against, the depth test is skipped, and all objects, including fully opaque ones, are rendered in one go, sorted back to front.</db:para>
<db:para>Setting this property to <db:code>false</db:code> should be rarely needed. It can be useful in scenes where it is known that there is little benefit in the two-round approach because either there are very few opaque objects, or they are transformed in a way that a single back to front sorted pass performs better.</db:para>
<db:note>
<db:para>Setting this property to <db:code>false</db:code> may cause rendering errors in certain scenes. In addition, some features, such as shadows, ambient occlusion, <db:code>SCREEN_TEXTURE</db:code> and <db:code>DEPTH_TEXTURE</db:code> in custom materials and effects, will not behave correctly without enabling depth buffer usage.</db:para>
</db:note>
<db:note>
<db:para>This flag has no control over the presence of a depth or depth-stencil buffer. Such buffers may still be allocated even when this is set to <db:code>false</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="effects-prop">
<db:title>effects : List&lt;QtQuick3D::Effect&gt;</db:title>
<db:fieldsynopsis>
<db:type>List&lt;QtQuick3D::Effect&gt;</db:type>
<db:varname>effects</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property contains a list of post-processing effects that will be applied to the entire viewport. The result of each effect is fed to the next so the order is significant.</db:para>
<db:note>
<db:para>For technical reasons, adding the same <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> node several times to the list is unsupported and will give unexpected results.</db:para>
</db:note>
</db:section>
<db:section xml:id="fog-prop">
<db:title>[since 6.5] fog : QtQuick3D::Fog</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Fog</db:type>
<db:varname>fog</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to a valid <db:link xlink:href="qml-qtquick3d-fog.xml">Fog</db:link> object, it is used to configure the renderer's built-in fog support.</db:para>
<db:para>The default value is null, which means no fog. This is equivalent to setting a Fog object with <db:link xlink:href="qml-qtquick3d-fog.xml#enabled-prop">enabled</db:link> set to false.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/fog.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-fog.xml">Fog</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightProbe-prop">
<db:title>lightProbe : QtQuick3D::Texture</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::Texture</db:type>
<db:varname>lightProbe</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines an image used to light the scene, either instead of, or in addition to standard lights.</db:para>
<db:para>The image is preferably a high-dynamic range image or a <db:link xlink:href="quick3d-asset-conditioning-ibl.xml#pre-generating-ibl-cubemap">pre-generated cubemap</db:link>. Pre-baking provides significant performance improvements at run time, because no time is spent on filtering and mipmap generation. If the source is a .hdr or other image, the GPU-based pre-processing happens at run time after loading the image file, and that can be potentially time consuming, in particular on embedded and mobile hardware. Therefore, it is strongly recommended that applications pre-process .hdr images at latest at build time, as described <db:link xlink:href="quick3d-asset-conditioning-ibl.xml#pre-generating-ibl-cubemap">here</db:link>.</db:para>
<db:note>
<db:para>Using a Texture with <db:link xlink:href="qml-qtquick3d-texture.xml#sourceItem-prop">sourceItem</db:link> is not supported in combination with this property. Pre-filtering of all mip levels for dynamic Qt Quick content is typically not reasonable in practice due to performance implications.</db:para>
</db:note>
<db:para>For more information on image-based lighting, see <db:link xlink:href="quick3d-asset-conditioning-ibl.xml">Using Image-Based Lighting</db:link>.</db:para>
<db:note>
<db:para>The light probe texture, when the property is set to a valid Texture, is used for lighting regardless of the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link>. However, when <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> is set to <db:code>SceneEnvironment.SkyBox</db:code>, the texture is also used to render the scene background as a skybox.</db:para>
</db:note>
<db:para>The examples below were generated with varying the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> in the environment of the following scene. The scene has no DirectionLight, <db:link xlink:href="qml-qtquick3d-pointlight.xml">PointLight</db:link>, or <db:link xlink:href="qml-qtquick3d-spotlight.xml">SpotLight</db:link>. All lighting is based on the panoramic HDRI image.</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick3D
import QtQuick3D.Helpers

Item {
    width: 1280
    height: 720

    View3D {
        id: v3d
        anchors.fill: parent

        environment: ExtendedSceneEnvironment {
            backgroundMode: SceneEnvironment.SkyBox
            lightProbe: Texture { source: &quot;00455_OpenfootageNET_field_low.hdr&quot; }

            tonemapMode: SceneEnvironment.TonemapModeFilmic
            sharpnessAmount: 0.4

            glowEnabled: true
            glowStrength: 1.25
            glowBloom: 0.25
            glowBlendMode: ExtendedSceneEnvironment.GlowBlendMode.Additive
        }

        Node {
            scale: Qt.vector3d(100, 100, 100)

            Sponza {
            }

            Suzanne {
                y: 1
                scale: Qt.vector3d(0.5, 0.5, 0.5)
                eulerRotation.y: -90
            }
        }

        PerspectiveCamera {
            id: camera
            y: 100
        }

        WasdController {
            controlledObject: camera
        }
    }
}
</db:programlisting>
<db:para>Results with the above environment:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Switching the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> to <db:code>SceneEnvironment.Transparent</db:code> would give us:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_transparent.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_transparent_2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here the lighting of the 3D scene is the same as before, meaning the materials use the light probe in the lighting calculations the same way as before, but there is no skybox rendered. The background is white since that is the default clear color of the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> hosting the 2D and 3D scene.</db:para>
<db:para>It is valid to set the lightProbe property value back to the default null. This unassigns the previously associated texture. For example, let's use the Delete key to dynamically toggle between image-based lighting with a skybox, and no image-based lighting with a fixed clear color for the background:</db:para>
<db:programlisting language="qml">environment: ExtendedSceneEnvironment {
    id: env

    backgroundMode: SceneEnvironment.SkyBox
    lightProbe: iblTex

    tonemapMode: SceneEnvironment.TonemapModeFilmic
    sharpnessAmount: 0.4

    glowEnabled: true
    glowStrength: 1.25
    glowBloom: 0.25
    glowBlendMode: ExtendedSceneEnvironment.GlowBlendMode.Additive
}

Texture {
    id: iblTex
    source: &quot;00455_OpenfootageNET_field_low.hdr&quot;
}

focus: true
Keys.onDeletePressed: {
    if (env.backgroundMode == SceneEnvironment.SkyBox) {
        env.backgroundMode = SceneEnvironment.Color;
        env.clearColor = &quot;green&quot;;
        env.lightProbe = null;
    } else {
        env.backgroundMode = SceneEnvironment.SkyBox;
        env.lightProbe = iblTex;
    }
}
</db:programlisting>
<db:para>Pressing Delete gives the following result. Remember that the scene used here has no lights so all 3D models appear completely black.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_null.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_null_2.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>While lightProbe is commonly used in combination with Texture instances that source their data from an image file (typically .hdr or .ktx), it can also makes sense to associate with a Texture that uses in-memory, <db:link xlink:href="qml-qtquick3d-texture.xml#textureData-prop">procedurally generated image data</db:link>. A prime example of this is a Texture where the image data is generated by <db:link xlink:href="qml-qtquick3d-helpers-proceduralskytexturedata.xml">ProceduralSkyTextureData</db:link> from the <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link>.Helpers module:</db:para>
<db:programlisting language="qml">backgroundMode: SceneEnvironment.SkyBox
lightProbe: Texture {
    textureData: ProceduralSkyTextureData {
    }
}
</db:programlisting>
<db:para>This gives us a procedurally generated HDR skybox texture that is now used both as the skybox and for image-based lighting:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/sceneenvironment_lightprobe_proceduralsky.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link></db:member>
<db:member><db:link xlink:href="quick3d-asset-conditioning-ibl.xml">Using Image-Based Lighting</db:link></db:member>
<db:member><db:link xlink:href="quick3d-asset-conditioning-ibl.xml#pre-generating-ibl-cubemap">Pre-generating IBL cubemap</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">probeExposure</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeHorizon-prop">probeHorizon</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeOrientation-prop">probeOrientation</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-helpers-proceduralskytexturedata.xml">ProceduralSkyTextureData</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="lightmapper-prop">
<db:title>lightmapper : Lightmapper</db:title>
<db:fieldsynopsis>
<db:type>Lightmapper</db:type>
<db:varname>lightmapper</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is set to a valid Lightmapper object, the settings specified by the object will be taken into account when baking lightmaps.</db:para>
<db:para>The default value is null, which means using default values for all the baking-related settings.</db:para>
<db:para>For more information on how to bake lightmaps, see the <db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link> documentation.</db:para>
<db:para>When lightmaps are not relevant to an application and baked lighting is never generated, the property and the associated object serve no purpose in practice.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#usedInBakedLighting-prop">Model::usedInBakedLighting</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-model.xml#bakedLightmap-prop">Model::bakedLightmap</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-light.xml#bakeMode-prop">Light::bakeMode</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-lightmapper.xml">Lightmapper</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="probeExposure-prop">
<db:title>probeExposure : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>probeExposure</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property modifies the amount of light emitted by the light probe. Part of the tonemapping is exposure mapping, and this property adjusts how the light values in the light probes get tonemaped.</db:para>
<db:para>By default exposure is set to is 1.0</db:para>
<db:note>
<db:para>This property does not have an effect when <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#tonemapMode-prop">tonemapMode</db:link> is set to <db:code>SceneEnvironment.TonemapModeNone</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeHorizon-prop">probeHorizon</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeOrientation-prop">probeOrientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="probeHorizon-prop">
<db:title>probeHorizon : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>probeHorizon</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property when defined with increasing values adds darkness (black) to the bottom half of the environment, forcing the lighting to come predominantly from the top of the image (and removing specific reflections from the lower half). This property is useful for accounting for a ground plane that would have the effect of obscuring the reflection of the light probe from the ground. This is necessary because light probe contributions come directily from the image without consideration for the content of the scene.</db:para>
<db:para>The expected value range for the probeHorizon property is between 0.0 and 1.0. Any value outside of this range will be clamped to the expected range.</db:para>
<db:para>By default probeHorizon is set to 0.0 which means the whole light probe is used without adjustment.</db:para>
<db:note>
<db:para>The probeHorizon property only affects materials lighting, and has no effect on the rendering of the sky box.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">probeExposure</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeOrientation-prop">probeOrientation</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="probeOrientation-prop">
<db:title>probeOrientation : vector3d</db:title>
<db:fieldsynopsis>
<db:type>vector3d</db:type>
<db:varname>probeOrientation</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property when defines the orientation of the light probe. Orientation is defined in terms of euler angles in degrees over the x, y, and z axes.</db:para>
<db:note>
<db:para>This value augments how the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link> Texture is sampled in combination with any texture rotations and offsets set on the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link> texture.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#lightProbe-prop">lightProbe</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeHorizon-prop">probeHorizon</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#probeExposure-prop">probeExposure</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scissorRect-prop">
<db:title>[since 6.5] scissorRect : rect</db:title>
<db:fieldsynopsis>
<db:type>rect</db:type>
<db:varname>scissorRect</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a scissor rectangle in view coordinates, with the top-left corner at [0, 0]</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="skyBoxCubeMap-prop">
<db:title>[since 6.4] skyBoxCubeMap : QtQuick3D::CubeMapTexture</db:title>
<db:fieldsynopsis>
<db:type>QtQuick3D::CubeMapTexture</db:type>
<db:varname>skyBoxCubeMap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines a cubemap to be used as a skybox when the background mode is <db:code>SkyBoxCubeMap</db:code>.</db:para>
<db:para>This property was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="skyboxBlurAmount-prop">
<db:title>[since 6.4] skyboxBlurAmount : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>skyboxBlurAmount</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property determines how much much the skybox should be blurred when using <db:code>SceneEnvironment.SkyBox</db:code> for the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#backgroundMode-prop">backgroundMode</db:link> property. The default value is <db:code>0.0</db:code> which means there is no blurring.</db:para>
<db:para>Acceptable values range between 0.0 and 1.0, all other values will be clamped to this range.</db:para>
<db:para>This property was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="specularAAEnabled-prop">
<db:title>[since 6.4] specularAAEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>specularAAEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is enabled, specular aliasing will be mitigated. Specular aliasing is often visible in form of bright dots, possibly flickering when moving the camera around.</db:para>
<db:para>The default value is false.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Specular AA disabled</db:para>
</db:th>
<db:th>
<db:para>Specular AA enabled</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/specular_aa_off.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/specular_aa_on.jpg"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This property was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="temporalAAEnabled-prop">
<db:title>[default: false] temporalAAEnabled : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>temporalAAEnabled</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>When this property is enabled temporal antialiasing will be used.</db:para>
<db:para>The camera is jiggled very slightly between frames, and the result of each new frame is blended with the previous frame.</db:para>
<db:note>
<db:para>Temporal antialiasing doesn't have an effect when <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link> is MSAA.</db:para>
</db:note>
<db:note>
<db:para>When combined with ProgressiveAA <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#antialiasingMode-prop">antialiasingMode</db:link>, temporalAA is used when scene animates while ProgressiveAA is used once animations stop.</db:para>
</db:note>
<db:para><db:emphasis role="bold">Pros</db:emphasis>: Due to the jiggling camera it finds real details that were otherwise lost; low impact on performance.</db:para>
<db:para><db:emphasis role="bold">Cons</db:emphasis>: Fast-moving objects cause one-frame ghosting.</db:para>
</db:section>
<db:section xml:id="temporalAAStrength-prop">
<db:title>[default: 0.3] temporalAAStrength : float</db:title>
<db:fieldsynopsis>
<db:type>float</db:type>
<db:varname>temporalAAStrength</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property modifies the amount of temporal movement (antialiasing). This has an effect only when <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAEnabled-prop">temporalAAEnabled</db:link> property is true.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#temporalAAEnabled-prop">temporalAAEnabled</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="tonemapMode-prop">
<db:title>[since 6.0] tonemapMode : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>tonemapMode</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property defines how colors are tonemapped before rendering. All rendering in Qt Quick 3D is performed in linear color space and can in many cases lead to generating color values that are not displayable. The tonemapMode determines the technique that is used to remap colors into a displayable range.</db:para>
<db:para>The default value is <db:code>SceneEnvironment.TonemapModeLinear</db:code></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>SceneEnvironment.TonemapModeNone</db:para>
</db:td>
<db:td>
<db:para>All Tonemapping is bypassed. This mode is useful when performing post processing effects.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.TonemapModeLinear</db:para>
</db:td>
<db:td>
<db:para>Linear tonemapping is applied. Colors are gamma corrected and returned in sRGB color space.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.TonemapModeAces</db:para>
</db:td>
<db:td>
<db:para>Academy Color Encoding System tonemapping is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.TonemapModeHejlDawson</db:para>
</db:td>
<db:td>
<db:para>Hejl-Dawson tonemapping is applied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>SceneEnvironment.TonemapModeFilmic</db:para>
</db:td>
<db:td>
<db:para>Filmic tonemapping is applied.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>See <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml#tonemapMode-prop">ExtendedSceneEnvironment</db:link> for an example of these different modes.</db:para>
<db:note>
<db:para>When using post-processing effects, most effects expect untonemapped linear color data. With application-provided, custom effects implemented via the <db:link xlink:href="qml-qtquick3d-effect.xml">Effect</db:link> type, it is important to know that starting with Qt 6.5 effects can safely assume that they work with linear color data, and tonemapping is performed automatically on the output of the last effect in the chain. If there is a need to customize tonemapping completely, consider setting the <db:code>SceneEnvironment.TonemapModeNone</db:code> value to disable the built-in tonemapper, and perform the appropriate adjustments on the color value in the last effect in the chain instead. This does not apply to the built-in effects of <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link>, because those automatically take care of proper tonemapping regardless of what combination of built-in effects are enabled in the environment.</db:para>
</db:note>
<db:para>This property was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
