<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QMdiSubWindow Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> class provides a subwindow class for <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMdiSubWindow</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMdiSubWindow is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> represents a top-level window in a <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>, and consists of a title bar with window decorations, an internal widget, and (depending on the current style) a window frame and a size grip. <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> has its own layout, which consists of the title bar and a center area for the internal widget.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmdisubwindowlayout.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The most common way to construct a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> is to call <db:link xlink:href="qmdiarea.xml#addSubWindow">QMdiArea::addSubWindow</db:link>() with the internal widget as the argument. You can also create a subwindow yourself, and set an internal widget by calling <db:link xlink:href="qmdisubwindow.xml#setWidget">setWidget</db:link>().</db:para>
<db:para>You use the same API when programming with subwindows as with regular top-level windows (e.g., you can call functions such as <db:link xlink:href="qwidget.xml#show">show</db:link>(), <db:link xlink:href="qwidget.xml#hide">hide</db:link>(), <db:link xlink:href="qwidget.xml#showMaximized">showMaximized</db:link>(), and setWindowTitle()).</db:para>
<db:section xml:id="subwindow-handling">
<db:title>Subwindow Handling</db:title>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> also supports behavior specific to subwindows in an MDI area.</db:para>
<db:para>By default, each <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> is visible inside the MDI area viewport when moved around, but it is also possible to specify transparent window movement and resizing behavior, where only the outline of a subwindow is updated during these operations. The <db:link xlink:href="qmdisubwindow.xml#setOption">setOption</db:link>() function is used to enable this behavior.</db:para>
<db:para>The <db:link xlink:href="qmdisubwindow.xml#isShaded">isShaded</db:link>() function detects whether the subwindow is currently shaded (i.e., the window is collapsed so that only the title bar is visible). To enter shaded mode, call <db:link xlink:href="qmdisubwindow.xml#showShaded">showShaded</db:link>(). <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> emits the <db:link xlink:href="qmdisubwindow.xml#windowStateChanged">windowStateChanged</db:link>() signal whenever the window state has changed (e.g., when the window becomes minimized, or is restored). It also emits <db:link xlink:href="qmdisubwindow.xml#aboutToActivate">aboutToActivate</db:link>() before it is activated.</db:para>
<db:para>In keyboard-interactive mode, the windows are moved and resized with the keyboard. You can enter this mode through the system menu of the window. The keyboardSingleStep and keyboardPageStep properties control the distance the widget is moved or resized for each keypress event. When shift is pressed down page step is used; otherwise single step is used.</db:para>
<db:para>You can also change the active window with the keyboard. By pressing the control and tab keys at the same time, the next (using the current <db:link xlink:href="qmdiarea.xml#WindowOrder-enum">WindowOrder</db:link>) subwindow will be activated. By pressing control, shift, and tab, you will activate the previous window. This is equivalent to calling <db:link xlink:href="qmdiarea.xml#activateNextSubWindow">activateNextSubWindow</db:link>() and <db:link xlink:href="qmdiarea.xml#activatePreviousSubWindow">activatePreviousSubWindow</db:link>(). Note that these shortcuts overrides global shortcuts, but not the <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>s shortcuts.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml">QMdiArea</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SubWindowOption-enum">
<db:title>enum QMdiSubWindow::SubWindowOption</db:title>
<db:bridgehead renderas="sect2">flags QMdiSubWindow::SubWindowOptions</db:bridgehead>
<db:para>This enum describes options that customize the behavior of <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link></db:emphasis>::RubberBandResize</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>If you enable this option, a rubber band control is used to represent the subwindow's outline, and the user resizes this instead of the subwindow itself. As a result, the subwindow maintains its original position and size until the resize operation has been completed, at which time it will receive a single <db:link xlink:href="qresizeevent.xml">QResizeEvent</db:link>. By default, this option is disabled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link></db:emphasis>::RubberBandMove</db:code></db:para>
</db:td>
<db:td><db:code>0x8</db:code></db:td>
<db:td>
<db:para>If you enable this option, a rubber band control is used to represent the subwindow's outline, and the user moves this instead of the subwindow itself. As a result, the subwindow remains in its original position until the move operation has completed, at which time a <db:link xlink:href="qmoveevent.xml">QMoveEvent</db:link> is sent to the window. By default, this option is disabled.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SubWindowOptions</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SubWindowOption&gt;. </db:code>It stores an OR combination of <db:code>SubWindowOption</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMdiSubWindow">
<db:title>QMdiSubWindow::QMdiSubWindow(QWidget *<db:emphasis>parent</db:emphasis> = 0, Qt::WindowFlags <db:emphasis>flags</db:emphasis> = 0)</db:title>
<db:para>Constructs a new <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> widget. The <db:code role="parameter">parent</db:code> and <db:code role="parameter">flags</db:code> arguments are passed to <db:link xlink:href="qwidget.xml">QWidget</db:link>'s constructor.</db:para>
<db:para>Instead of using addSubWindow(), it is also simply possible to use <db:link xlink:href="qwidget.xml#setParent">setParent</db:link>() when you add the subwindow to a <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>.</db:para>
<db:para>Note that only <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link>s can be set as children of <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link>; you cannot, for instance, write:</db:para>
<db:programlisting language="cpp">//bad code
QMdiArea mdiArea;
QTextEdit editor(&amp;mdiArea); // invalid child widget
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#addSubWindow">QMdiArea::addSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QMdiSubWindow">
<db:title>[virtual noexcept] QMdiSubWindow::~QMdiSubWindow()</db:title>
<db:para>Destroys the subwindow.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#removeSubWindow">QMdiArea::removeSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="aboutToActivate">
<db:title>void QMdiSubWindow::aboutToActivate()</db:title>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> emits this signal immediately before it is activated. After the subwindow has been activated, the <db:link xlink:href="qmdiarea.xml">QMdiArea</db:link> that manages the subwindow will also emit the <db:link xlink:href="qmdiarea.xml#subWindowActivated">subWindowActivated</db:link>() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#subWindowActivated">QMdiArea::subWindowActivated</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QMdiSubWindow::changeEvent(QEvent *<db:emphasis>changeEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="childEvent">
<db:title>[override virtual protected] void QMdiSubWindow::childEvent(QChildEvent *<db:emphasis>childEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#childEvent" role="function">QObject::childEvent(QChildEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="closeEvent">
<db:title>[override virtual protected] void QMdiSubWindow::closeEvent(QCloseEvent *<db:emphasis>closeEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#closeEvent" role="function">QWidget::closeEvent(QCloseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="contextMenuEvent">
<db:title>[override virtual protected] void QMdiSubWindow::contextMenuEvent(QContextMenuEvent *<db:emphasis>contextMenuEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#contextMenuEvent" role="function">QWidget::contextMenuEvent(QContextMenuEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMdiSubWindow::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QMdiSubWindow::eventFilter(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *, QEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QMdiSubWindow::focusInEvent(QFocusEvent *<db:emphasis>focusInEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QMdiSubWindow::focusOutEvent(QFocusEvent *<db:emphasis>focusOutEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QMdiSubWindow::hideEvent(QHideEvent *<db:emphasis>hideEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="isShaded">
<db:title>bool QMdiSubWindow::isShaded() const</db:title>
<db:para>Returns true if this window is shaded; otherwise returns false.</db:para>
<db:para>A window is shaded if it is collapsed so that only the title bar is visible.</db:para>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QMdiSubWindow::keyPressEvent(QKeyEvent *<db:emphasis>keyEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="leaveEvent">
<db:title>[override virtual protected] void QMdiSubWindow::leaveEvent(QEvent *<db:emphasis>leaveEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#leaveEvent" role="function">QWidget::leaveEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mdiArea">
<db:title>[since 4.4] QMdiArea *QMdiSubWindow::mdiArea() const</db:title>
<db:para>Returns the area containing this sub-window, or 0 if there is none.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdiarea.xml#addSubWindow">QMdiArea::addSubWindow</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QMdiSubWindow::minimumSizeHint() const</db:title>
</db:section>
<db:section xml:id="mouseDoubleClickEvent">
<db:title>[override virtual protected] void QMdiSubWindow::mouseDoubleClickEvent(QMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseDoubleClickEvent" role="function">QWidget::mouseDoubleClickEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QMdiSubWindow::mouseMoveEvent(QMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QMdiSubWindow::mousePressEvent(QMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QMdiSubWindow::mouseReleaseEvent(QMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[override virtual protected] void QMdiSubWindow::moveEvent(QMoveEvent *<db:emphasis>moveEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#moveEvent" role="function">QWidget::moveEvent(QMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QMdiSubWindow::paintEvent(QPaintEvent *<db:emphasis>paintEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QMdiSubWindow::resizeEvent(QResizeEvent *<db:emphasis>resizeEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="setOption">
<db:title>void QMdiSubWindow::setOption(QMdiSubWindow::SubWindowOption <db:emphasis>option</db:emphasis>, bool <db:emphasis>on</db:emphasis> = true)</db:title>
<db:para>If <db:code role="parameter">on</db:code> is true, <db:code role="parameter">option</db:code> is enabled on the subwindow; otherwise it is disabled. See <db:link xlink:href="qmdisubwindow.xml#SubWindowOption-enum">SubWindowOption</db:link> for the effect of each option.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#SubWindowOption-enum">SubWindowOption</db:link></db:member>
<db:member><db:link xlink:href="qmdisubwindow.xml#testOption">testOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSystemMenu">
<db:title>void QMdiSubWindow::setSystemMenu(QMenu *<db:emphasis>systemMenu</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">systemMenu</db:code> as the current system menu for this subwindow.</db:para>
<db:para>By default, each <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> has a standard system menu.</db:para>
<db:para>QActions for the system menu created by <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> will automatically be updated depending on the current window state; e.g., the minimize action will be disabled after the window is minimized.</db:para>
<db:para>QActions added by the user are not updated by <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link>.</db:para>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> takes ownership of <db:code role="parameter">systemMenu</db:code>; you do not have to delete it. Any existing menus will be deleted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#systemMenu">systemMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qmdisubwindow.xml#showSystemMenu">showSystemMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QMdiSubWindow::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">widget</db:code> as the internal widget of this subwindow. The internal widget is displayed in the center of the subwindow beneath the title bar.</db:para>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> takes temporary ownership of <db:code role="parameter">widget</db:code>; you do not have to delete it. Any existing internal widget will be removed and reparented to the root window.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#widget">widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QMdiSubWindow::showEvent(QShowEvent *<db:emphasis>showEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="showShaded">
<db:title>void QMdiSubWindow::showShaded()</db:title>
<db:para>Calling this function makes the subwindow enter the shaded mode. When the subwindow is shaded, only the title bar is visible.</db:para>
<db:para>Although shading is not supported by all styles, this function will still show the subwindow as shaded, regardless of whether support for shading is available. However, when used with styles without shading support, the user will be unable to return from shaded mode through the user interface (e.g., through a shade button in the title bar).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#isShaded">isShaded</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="showSystemMenu">
<db:title>void QMdiSubWindow::showSystemMenu()</db:title>
<db:para>Shows the system menu below the system menu icon in the title bar.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#setSystemMenu">setSystemMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qmdisubwindow.xml#systemMenu">systemMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QMdiSubWindow::sizeHint() const</db:title>
</db:section>
<db:section xml:id="systemMenu">
<db:title>QMenu *QMdiSubWindow::systemMenu() const</db:title>
<db:para>Returns a pointer to the current system menu, or zero if no system menu is set. <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> provides a default system menu, but you can also set the menu with <db:link xlink:href="qmdisubwindow.xml#setSystemMenu">setSystemMenu</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#setSystemMenu">setSystemMenu</db:link>()</db:member>
<db:member><db:link xlink:href="qmdisubwindow.xml#showSystemMenu">showSystemMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="testOption">
<db:title>bool QMdiSubWindow::testOption(QMdiSubWindow::SubWindowOption <db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">option</db:code> is enabled; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#SubWindowOption-enum">SubWindowOption</db:link></db:member>
<db:member><db:link xlink:href="qmdisubwindow.xml#setOption">setOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QMdiSubWindow::timerEvent(QTimerEvent *<db:emphasis>timerEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QMdiSubWindow::widget() const</db:title>
<db:para>Returns the current internal widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmdisubwindow.xml#setWidget">setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowStateChanged">
<db:title>void QMdiSubWindow::windowStateChanged(Qt::WindowStates <db:emphasis>oldState</db:emphasis>, Qt::WindowStates <db:emphasis>newState</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link> emits this signal after the window state changes. <db:code role="parameter">oldState</db:code> is the window state before it changed, and <db:code role="parameter">newState</db:code> is the new, current state.</db:para>
</db:section>
</db:section>
</db:article>
