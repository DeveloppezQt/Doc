<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QFocusFrame Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> widget provides a focus frame which can be outside of a widget's normal paintable area.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFocusFrame</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFocusFrame is part of <db:simplelist><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Normally an application will not need to create its own <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> as <db:link xlink:href="qstyle.xml">QStyle</db:link> will handle this detail for you. A style writer can optionally use a <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> to have a focus area outside of the widget's paintable geometry. In this way space need not be reserved for the widget to have focus but only set on a <db:link xlink:href="qwidget.xml">QWidget</db:link> with <db:link xlink:href="qfocusframe.xml#setWidget">QFocusFrame::setWidget</db:link>. It is, however, legal to create your own <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> on a custom widget and set its geometry manually via <db:link xlink:href="qwidget.xml#setGeometry-1">QWidget::setGeometry</db:link> however you will not get auto-placement when the focused widget changes size or placement.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFocusFrame">
<db:title>QFocusFrame::QFocusFrame(QWidget *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link>.</db:para>
<db:para>The focus frame will not monitor <db:code role="parameter">parent</db:code> for updates but rather can be placed manually or by using <db:link xlink:href="qfocusframe.xml#setWidget">QFocusFrame::setWidget</db:link>. A <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> sets <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_NoChildEventsForParent</db:link> attribute; as a result the parent will not receive a <db:link xlink:href="qevent.xml#Type-enum">QEvent::ChildAdded</db:link> event, this will make it possible to manually set the geometry of the <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> inside of a <db:link xlink:href="qsplitter.xml">QSplitter</db:link> or other child event monitoring widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfocusframe.xml#setWidget">QFocusFrame::setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QFocusFrame">
<db:title>[virtual noexcept] QFocusFrame::~QFocusFrame()</db:title>
<db:para>Destructor.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QFocusFrame::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QFocusFrame::eventFilter(QObject *<db:emphasis>o</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *, QEvent *)</db:link>.</db:para>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QFocusFrame::initStyleOption(QStyleOption *<db:emphasis>option</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from this <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoption.xml">QStyleOption</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QFocusFrame::paintEvent(<db:emphasis>QPaintEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setWidget">
<db:title>void QFocusFrame::setWidget(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para><db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> will track changes to <db:code role="parameter">widget</db:code> and resize itself automatically. If the monitored widget's parent changes, <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> will follow the widget and place itself around the widget automatically. If the monitored widget is deleted, <db:link xlink:href="qfocusframe.xml">QFocusFrame</db:link> will set it to zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfocusframe.xml#widget">QFocusFrame::widget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="widget">
<db:title>QWidget *QFocusFrame::widget() const</db:title>
<db:para>Returns the currently monitored widget for automatically resize and update.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfocusframe.xml#setWidget">QFocusFrame::setWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
