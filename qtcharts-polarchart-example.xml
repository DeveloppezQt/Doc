<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Polar Chart Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a simple polar chart with multiple different series.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>It also shows how to implement scrolling and zooming of the polar chart as well as visually demonstrate how polar charts and cartesian charts relate to each other.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_polarchart.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="creating-polar-charts">
<db:title>Creating Polar Charts</db:title>
<db:para>Creating a polar chart is done with a <db:link xlink:href="qpolarchart.xml">QPolarChart</db:link> instance instead of a <db:link xlink:href="qchart.xml">QChart</db:link> instance.</db:para>
<db:programlisting language="cpp">QPolarChart *chart = new QPolarChart();
</db:programlisting>
<db:para>Axes are created similarly to cartesian charts, but when axes are added to the chart, you can use polar orientations instead of alignments.</db:para>
<db:programlisting language="cpp">QValueAxis *angularAxis = new QValueAxis();
angularAxis-&amp;gt;setTickCount(9); // First and last ticks are co-located on 0/360 angle.
angularAxis-&amp;gt;setLabelFormat(&quot;%.1f&quot;);
angularAxis-&amp;gt;setShadesVisible(true);
angularAxis-&amp;gt;setShadesBrush(QBrush(QColor(249, 249, 255)));
chart-&amp;gt;addAxis(angularAxis, QPolarChart::PolarOrientationAngular);

QValueAxis *radialAxis = new QValueAxis();
radialAxis-&amp;gt;setTickCount(9);
radialAxis-&amp;gt;setLabelFormat(&quot;%d&quot;);
chart-&amp;gt;addAxis(radialAxis, QPolarChart::PolarOrientationRadial);
</db:programlisting>
<db:para>Zooming and scrolling of a polar chart is logically nearly identical to zooming and scrolling of a cartesian chart. The main difference is that when scrolling along the X-axis (angular axis), the angle is used instead of the number of pixels. Another difference is that zooming to a rectangle cannot be done.</db:para>
<db:programlisting language="cpp">void ChartView::keyPressEvent(QKeyEvent *event)
{
    switch (event-&amp;gt;key()) {
    case Qt::Key_Plus:
        chart()-&amp;gt;zoomIn();
        break;
    case Qt::Key_Minus:
        chart()-&amp;gt;zoomOut();
        break;
    case Qt::Key_Left:
        chart()-&amp;gt;scroll(-1.0, 0);
        break;
    case Qt::Key_Right:
        chart()-&amp;gt;scroll(1.0, 0);
        break;
    case Qt::Key_Up:
        chart()-&amp;gt;scroll(0, 1.0);
        break;
    case Qt::Key_Down:
        chart()-&amp;gt;scroll(0, -1.0);
        break;
    case Qt::Key_Space:
        switchChartType();
        break;
    default:
        QGraphicsView::keyPressEvent(event);
        break;
    }
}
</db:programlisting>
<db:para>The same axes and series can be used in both cartesian and polar charts, though not simultaneously. To switch between chart types, you first need to remove the series and axes from the old chart, and then add them to the new chart. If you want to preserve the axis ranges, those need to be copied, too.</db:para>
<db:programlisting language="cpp">void ChartView::switchChartType()
{
    QChart *newChart;
    QChart *oldChart = chart();

    if (oldChart-&amp;gt;chartType() == QChart::ChartTypeCartesian)
        newChart = new QPolarChart();
    else
        newChart = new QChart();

    // Move series and axes from old chart to new one
    const QList&amp;lt;QAbstractSeries *&amp;gt; seriesList = oldChart-&amp;gt;series();
    const QList&amp;lt;QAbstractAxis *&amp;gt; axisList = oldChart-&amp;gt;axes();
    QList&amp;lt;QPair&amp;lt;qreal, qreal&amp;gt; &amp;gt; axisRanges;

    for (QAbstractAxis *axis : axisList) {
        QValueAxis *valueAxis = static_cast&amp;lt;QValueAxis *&amp;gt;(axis);
        axisRanges.append(QPair&amp;lt;qreal, qreal&amp;gt;(valueAxis-&amp;gt;min(), valueAxis-&amp;gt;max()));
    }

    for (QAbstractSeries *series : seriesList)
        oldChart-&amp;gt;removeSeries(series);

    for (QAbstractAxis *axis : axisList) {
        oldChart-&amp;gt;removeAxis(axis);
        newChart-&amp;gt;addAxis(axis, axis-&amp;gt;alignment());
    }

    for (QAbstractSeries *series : seriesList) {
        newChart-&amp;gt;addSeries(series);
        for (QAbstractAxis *axis : axisList)
            series-&amp;gt;attachAxis(axis);
    }

    int count = 0;
    for (QAbstractAxis *axis : axisList) {
        axis-&amp;gt;setRange(axisRanges[count].first, axisRanges[count].second);
        count++;
    }

    newChart-&amp;gt;setTitle(oldChart-&amp;gt;title());
    setChart(newChart);
    delete oldChart;
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/polarchart?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
