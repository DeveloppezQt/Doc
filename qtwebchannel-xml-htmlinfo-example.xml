<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>XML HTML Info Example</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt WebChannel Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The XML HTML Info example provides a simple command line utility that scans the current directory for HTML files and prints statistics about them to standard out.</db:para>
<db:para>The files are parsed using a <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> object. If the file does not contain a well-formed XML document, a description of the error is printed to the standard error console.</db:para>
<db:section xml:id="basic-operation">
<db:title>Basic Operation</db:title>
<db:para>The main function of the example uses <db:link xlink:href="qdir.xml">QDir</db:link> to access files in the current directory that match either &quot;*.htm&quot; or &quot;*.html&quot;. For each file found, the <db:code>parseHtmlFile()</db:code> function is called.</db:para>
<db:para>Reading XML is handled by an instance of the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> class, which operates on the input file object:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The work of parsing and the XML and extracting statistics is done in a while loop, and is driven by input from the reader:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>If more input is available, the next token from the input file is read and parsed. The program then looks for the specific element types, &quot;title&quot;, &quot;a&quot;, and &quot;p&quot;, and stores information about them.</db:para>
<db:para>When there is no more input, the loop terminates. If an error occurred, information is written to the standard out file via a stream, and the example exits:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>If no error occurred, the example prints some statistics from the data gathered in the loop, and then exits.</db:para>
</db:section>
</db:article>
