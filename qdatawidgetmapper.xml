<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDataWidgetMapper Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> class provides mapping between a section of a data model to widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDataWidgetMapper</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QDataWidgetMapper is part of <db:simplelist><db:member>model-view</db:member><db:member>advanced</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> can be used to create data-aware widgets by mapping them to sections of an item model. A section is a column of a model if the orientation is horizontal (the default), otherwise a row.</db:para>
<db:para>Every time the current index changes, each widget is updated with data from the model via the property specified when its mapping was made. If the user edits the contents of a widget, the changes are read using the same property and written back to the model. By default, each widget's <db:link xlink:href="qobject.xml#Q_PROPERTY">user property</db:link> is used to transfer data between the model and the widget. Since Qt 4.3, an additional <db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>() function enables a named property to be used instead of the default user property.</db:para>
<db:para>It is possible to set an item delegate to support custom widgets. By default, a <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link> is used to synchronize the model with the widgets.</db:para>
<db:para>Let us assume that we have an item model named <db:code>model</db:code> with the following contents:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Qt Norway</db:para>
</db:td>
<db:td>
<db:para>Oslo</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>Qt Australia</db:para>
</db:td>
<db:td>
<db:para>Brisbane</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>Qt USA</db:para>
</db:td>
<db:td>
<db:para>Palo Alto</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>Qt China</db:para>
</db:td>
<db:td>
<db:para>Beijing</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>Qt Germany</db:para>
</db:td>
<db:td>
<db:para>Berlin</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following code will map the columns of the model to widgets called <db:code>mySpinBox</db:code>, <db:code>myLineEdit</db:code> and <db:code>myCountryChooser</db:code>:</db:para>
<db:programlisting language="cpp">QDataWidgetMapper *mapper = new QDataWidgetMapper;
mapper-&gt;setModel(model);
mapper-&gt;addMapping(mySpinBox, 0);
mapper-&gt;addMapping(myLineEdit, 1);
mapper-&gt;addMapping(myCountryChooser, 2);
mapper-&gt;toFirst();
</db:programlisting>
<db:para>After the call to <db:link xlink:href="qdatawidgetmapper.xml#toFirst">toFirst</db:link>(), <db:code>mySpinBox</db:code> displays the value <db:code>1</db:code>, <db:code>myLineEdit</db:code> displays <db:code>Qt Norway</db:code> and <db:code>myCountryChooser</db:code> displays <db:code>Oslo</db:code>. The navigational functions <db:link xlink:href="qdatawidgetmapper.xml#toFirst">toFirst</db:link>(), <db:link xlink:href="qdatawidgetmapper.xml#toNext">toNext</db:link>(), <db:link xlink:href="qdatawidgetmapper.xml#toPrevious">toPrevious</db:link>(), <db:link xlink:href="qdatawidgetmapper.xml#toLast">toLast</db:link>() and <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() can be used to navigate in the model and update the widgets with contents from the model.</db:para>
<db:para>The <db:link xlink:href="qdatawidgetmapper.xml#setRootIndex">setRootIndex</db:link>() function enables a particular item in a model to be specified as the root index - children of this item will be mapped to the relevant widgets in the user interface.</db:para>
<db:para><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> supports two submit policies, <db:code>AutoSubmit</db:code> and <db:code>ManualSubmit</db:code>. <db:code>AutoSubmit</db:code> will update the model as soon as the current widget loses focus, <db:code>ManualSubmit</db:code> will not update the model unless <db:link xlink:href="qdatawidgetmapper.xml#submit">submit</db:link>() is called. <db:code>ManualSubmit</db:code> is useful when displaying a dialog that lets the user cancel all modifications. Also, other views that display the model won't update until the user finishes all their modifications and submits.</db:para>
<db:para>Note that <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> keeps track of external modifications. If the contents of the model are updated in another module of the application, the widgets are updated as well.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link></db:member>
<db:member><db:link xlink:href="qabstractitemdelegate.xml">QAbstractItemDelegate</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SubmitPolicy-enum">
<db:title>enum QDataWidgetMapper::SubmitPolicy</db:title>
<db:para>This enum describes the possible submit policies a <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> supports.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link></db:emphasis>::AutoSubmit</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Whenever a widget loses focus, the widget's current value is set to the item model.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link></db:emphasis>::ManualSubmit</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The model is not updated until <db:link xlink:href="qdatawidgetmapper.xml#submit">submit</db:link>() is called.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="currentIndex-prop">
<db:title>currentIndex : int</db:title>
<db:para>This property holds the current row or column</db:para>
<db:para>The widgets are populated with with data from the row at <db:code role="parameter">index</db:code> if the orientation is horizontal (the default), otherwise with data from the column at <db:code role="parameter">index</db:code>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">currentIndex</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para>virtual <db:type>void</db:type> <db:emphasis role="bold">setCurrentIndex</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdatawidgetmapper.xml#currentIndexChanged">currentIndexChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#setCurrentModelIndex">setCurrentModelIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toFirst">toFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toNext">toNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toPrevious">toPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toLast">toLast</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>orientation : Qt::Orientation</db:title>
<db:para>This property holds the orientation of the model</db:para>
<db:para>If the orientation is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> (the default), a widget is mapped to a column of a data model. The widget will be populated with the model's data from its mapped column and the row that <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">currentIndex</db:link>() points at.</db:para>
<db:para>Use <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> for tabular data that looks like this:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>Qt Norway</db:para>
</db:td>
<db:td>
<db:para>Oslo</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>Qt Australia</db:para>
</db:td>
<db:td>
<db:para>Brisbane</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>Qt USA</db:para>
</db:td>
<db:td>
<db:para>Silicon Valley</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>Qt China</db:para>
</db:td>
<db:td>
<db:para>Beijing</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>5</db:para>
</db:td>
<db:td>
<db:para>Qt Germany</db:para>
</db:td>
<db:td>
<db:para>Berlin</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the orientation is set to <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>, a widget is mapped to a row. Calling <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() will change the current column. The widget will be populates with the model's data from its mapped row and the column that <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">currentIndex</db:link>() points at.</db:para>
<db:para>Use <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> for tabular data that looks like this:</db:para>
<db:informaltable style="generic">
<db:tr valign="top">
<db:td>
<db:para>1</db:para>
</db:td>
<db:td>
<db:para>2</db:para>
</db:td>
<db:td>
<db:para>3</db:para>
</db:td>
<db:td>
<db:para>4</db:para>
</db:td>
<db:td>
<db:para>5</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Qt Norway</db:para>
</db:td>
<db:td>
<db:para>Qt Australia</db:para>
</db:td>
<db:td>
<db:para>Qt USA</db:para>
</db:td>
<db:td>
<db:para>Qt China</db:para>
</db:td>
<db:td>
<db:para>Qt Germany</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Oslo</db:para>
</db:td>
<db:td>
<db:para>Brisbane</db:para>
</db:td>
<db:td>
<db:para>Silicon Valley</db:para>
</db:td>
<db:td>
<db:para>Beijing</db:para>
</db:td>
<db:td>
<db:para>Berlin</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Changing the orientation clears all existing mappings.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOrientation</db:emphasis>(<db:type><db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link></db:type> <db:emphasis>aOrientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="submitPolicy-prop">
<db:title>submitPolicy : SubmitPolicy</db:title>
<db:para>This property holds the current submit policy</db:para>
<db:para>Changing the current submit policy will revert all widgets to the current data from the model.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdatawidgetmapper.xml#SubmitPolicy-enum">QDataWidgetMapper::SubmitPolicy</db:link></db:type> <db:emphasis role="bold">submitPolicy</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSubmitPolicy</db:emphasis>(<db:type><db:link xlink:href="qdatawidgetmapper.xml#SubmitPolicy-enum">QDataWidgetMapper::SubmitPolicy</db:link></db:type> <db:emphasis>policy</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDataWidgetMapper">
<db:title>[explicit] QDataWidgetMapper::QDataWidgetMapper(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:para>Constructs a new <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> with parent object <db:code role="parameter">parent</db:code>. By default, the orientation is horizontal and the submit policy is <db:code>AutoSubmit</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#orientation-prop">setOrientation</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#submitPolicy-prop">setSubmitPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QDataWidgetMapper">
<db:title>[virtual noexcept] QDataWidgetMapper::~QDataWidgetMapper()</db:title>
<db:para>Destroys the object.</db:para>
</db:section>
<db:section xml:id="addMapping">
<db:title>void QDataWidgetMapper::addMapping(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>section</db:emphasis>)</db:title>
<db:para>Adds a mapping between a <db:code role="parameter">widget</db:code> and a <db:code role="parameter">section</db:code> from the model. The <db:code role="parameter">section</db:code> is a column in the model if the orientation is horizontal (the default), otherwise a row.</db:para>
<db:para>For the following example, we assume a model <db:code>myModel</db:code> that has two columns: the first one contains the names of people in a group, and the second column contains their ages. The first column is mapped to the <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> <db:code>nameLineEdit</db:code>, and the second is mapped to the <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> <db:code>ageSpinBox</db:code>:</db:para>
<db:programlisting language="cpp">QDataWidgetMapper *mapper = new QDataWidgetMapper;
mapper-&gt;setModel(myModel);
mapper-&gt;addMapping(nameLineEdit, 0);
mapper-&gt;addMapping(ageSpinBox, 1);
</db:programlisting>
<db:para><db:emphasis role="bold">Notes:</db:emphasis></db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If the <db:code role="parameter">widget</db:code> is already mapped to a section, the old mapping will be replaced by the new one.</db:para>
</db:listitem>
<db:listitem>
<db:para>Only one-to-one mappings between sections and widgets are allowed. It is not possible to map a single section to multiple widgets, or to map a single widget to multiple sections.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#removeMapping">removeMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#mappedSection">mappedSection</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#clearMapping">clearMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMapping-1">
<db:title>void QDataWidgetMapper::addMapping(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>section</db:emphasis>, const QByteArray &amp;<db:emphasis>propertyName</db:emphasis>)</db:title>
<db:para>Essentially the same as <db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>(), but adds the possibility to specify the property to use specifying <db:code role="parameter">propertyName</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearMapping">
<db:title>void QDataWidgetMapper::clearMapping()</db:title>
<db:para>Clears all mappings.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#removeMapping">removeMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentIndexChanged">
<db:title>void QDataWidgetMapper::currentIndexChanged(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>This signal is emitted after the current index has changed and all widgets were populated with new data. <db:code role="parameter">index</db:code> is the new current index.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">currentIndex</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="itemDelegate">
<db:title>QAbstractItemDelegate *QDataWidgetMapper::itemDelegate() const</db:title>
<db:para>Returns the current item delegate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#setItemDelegate">setItemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedPropertyName">
<db:title>QByteArray QDataWidgetMapper::mappedPropertyName(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the name of the property that is used when mapping data to the given <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#mappedSection">mappedSection</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#removeMapping">removeMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedSection">
<db:title>int QDataWidgetMapper::mappedSection(QWidget *<db:emphasis>widget</db:emphasis>) const</db:title>
<db:para>Returns the section the <db:code role="parameter">widget</db:code> is mapped to or -1 if the widget is not mapped.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#removeMapping">removeMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mappedWidgetAt">
<db:title>QWidget *QDataWidgetMapper::mappedWidgetAt(int <db:emphasis>section</db:emphasis>) const</db:title>
<db:para>Returns the widget that is mapped at <db:code role="parameter">section</db:code>, or 0 if no widget is mapped at that section.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#removeMapping">removeMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="model">
<db:title>QAbstractItemModel *QDataWidgetMapper::model() const</db:title>
<db:para>Returns the current model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#setModel">setModel</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeMapping">
<db:title>void QDataWidgetMapper::removeMapping(QWidget *<db:emphasis>widget</db:emphasis>)</db:title>
<db:para>Removes the mapping for the given <db:code role="parameter">widget</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#addMapping">addMapping</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#clearMapping">clearMapping</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="revert">
<db:title>void QDataWidgetMapper::revert()</db:title>
<db:para>Repopulates all widgets with the current data of the model. All unsubmitted changes will be lost.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#submit">submit</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#submitPolicy-prop">setSubmitPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rootIndex">
<db:title>QModelIndex QDataWidgetMapper::rootIndex() const</db:title>
<db:para>Returns the current root index.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#setRootIndex">setRootIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCurrentModelIndex">
<db:title>void QDataWidgetMapper::setCurrentModelIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the current index to the row of the <db:code role="parameter">index</db:code> if the orientation is horizontal (the default), otherwise to the column of the <db:code role="parameter">index</db:code>.</db:para>
<db:para>Calls <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() internally. This convenience slot can be connected to the signal <db:link xlink:href="qitemselectionmodel.xml#currentRowChanged">currentRowChanged</db:link>() or <db:link xlink:href="qitemselectionmodel.xml#currentColumnChanged">currentColumnChanged</db:link>() of another view's <db:link xlink:href="qitemselectionmodel.xml">selection model</db:link>.</db:para>
<db:para>The following example illustrates how to update all widgets with new data whenever the selection of a <db:link xlink:href="qtableview.xml">QTableView</db:link> named <db:code>myTableView</db:code> changes:</db:para>
<db:programlisting language="cpp">QDataWidgetMapper *mapper = new QDataWidgetMapper;
connect(myTableView-&gt;selectionModel(), &amp;QItemSelectionModel::currentRowChanged,
        mapper, &amp;QDataWidgetMapper::setCurrentModelIndex);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">currentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setItemDelegate">
<db:title>void QDataWidgetMapper::setItemDelegate(QAbstractItemDelegate *<db:emphasis>delegate</db:emphasis>)</db:title>
<db:para>Sets the item delegate to <db:code role="parameter">delegate</db:code>. The delegate will be used to write data from the model into the widget and from the widget to the model, using <db:link xlink:href="qabstractitemdelegate.xml#setEditorData">QAbstractItemDelegate::setEditorData</db:link>() and <db:link xlink:href="qabstractitemdelegate.xml#setModelData">QAbstractItemDelegate::setModelData</db:link>().</db:para>
<db:para>Any existing delegate will be removed, but not deleted. <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> does not take ownership of <db:code role="parameter">delegate</db:code>.</db:para>
<db:para>The delegate also decides when to apply data and when to change the editor, using <db:link xlink:href="qabstractitemdelegate.xml#commitData">QAbstractItemDelegate::commitData</db:link>() and <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">QAbstractItemDelegate::closeEditor</db:link>().</db:para>
<db:warning>
<db:para>You should not share the same instance of a delegate between widget mappers or views. Doing so can cause incorrect or unintuitive editing behavior since each view connected to a given delegate may receive the <db:link xlink:href="qabstractitemdelegate.xml#closeEditor">closeEditor</db:link>() signal, and attempt to access, modify or close an editor that has already been closed.</db:para>
</db:warning>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#itemDelegate">itemDelegate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setModel">
<db:title>void QDataWidgetMapper::setModel(QAbstractItemModel *<db:emphasis>model</db:emphasis>)</db:title>
<db:para>Sets the current model to <db:code role="parameter">model</db:code>. If another model was set, all mappings to that old model are cleared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#model">model</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRootIndex">
<db:title>void QDataWidgetMapper::setRootIndex(const QModelIndex &amp;<db:emphasis>index</db:emphasis>)</db:title>
<db:para>Sets the root item to <db:code role="parameter">index</db:code>. This can be used to display a branch of a tree. Pass an invalid model index to display the top-most branch.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#rootIndex">rootIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="submit">
<db:title>bool QDataWidgetMapper::submit()</db:title>
<db:para>Submits all changes from the mapped widgets to the model.</db:para>
<db:para>For every mapped section, the item delegate reads the current value from the widget and sets it in the model. Finally, the model's <db:link xlink:href="qabstractitemmodel.xml#submit">submit</db:link>() method is invoked.</db:para>
<db:para>Returns <db:code>true</db:code> if all the values were submitted, otherwise false.</db:para>
<db:para>Note: For database models, <db:link xlink:href="qsqlquerymodel.xml#lastError">QSqlQueryModel::lastError</db:link>() can be used to retrieve the last error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#revert">revert</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#submitPolicy-prop">setSubmitPolicy</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toFirst">
<db:title>void QDataWidgetMapper::toFirst()</db:title>
<db:para>Populates the widgets with data from the first row of the model if the orientation is horizontal (the default), otherwise with data from the first column.</db:para>
<db:para>This is equivalent to calling <db:code>setCurrentIndex(0)</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toLast">toLast</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLast">
<db:title>void QDataWidgetMapper::toLast()</db:title>
<db:para>Populates the widgets with data from the last row of the model if the orientation is horizontal (the default), otherwise with data from the last column.</db:para>
<db:para>Calls <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() internally.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toFirst">toFirst</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNext">
<db:title>void QDataWidgetMapper::toNext()</db:title>
<db:para>Populates the widgets with data from the next row of the model if the orientation is horizontal (the default), otherwise with data from the next column.</db:para>
<db:para>Calls <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() internally. Does nothing if there is no next row in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toPrevious">toPrevious</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toPrevious">
<db:title>void QDataWidgetMapper::toPrevious()</db:title>
<db:para>Populates the widgets with data from the previous row of the model if the orientation is horizontal (the default), otherwise with data from the previous column.</db:para>
<db:para>Calls <db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>() internally. Does nothing if there is no previous row in the model.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatawidgetmapper.xml#toNext">toNext</db:link>()</db:member>
<db:member><db:link xlink:href="qdatawidgetmapper.xml#currentIndex-prop">setCurrentIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
