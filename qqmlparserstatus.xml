<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlParserStatus Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link> class provides updates on the QML parser state.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlParserStatus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qquickitem.xml" xlink:role="class">QQuickItem</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link> provides a mechanism for classes instantiated by a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> to receive notification at key points in their creation.</db:para>
<db:para>This class is often used for optimization purposes, as it allows you to defer an expensive operation until after all the properties have been set on an object. For example, QML's <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> element uses the parser status to defer text layout until all of its properties have been set (we don't want to layout when the <db:code>text</db:code> is assigned, and then relayout when the <db:code>font</db:code> is assigned, and relayout again when the <db:code>width</db:code> is assigned, and so on).</db:para>
<db:para>Be aware that <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link> methods are only called when a class is instantiated by a <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link>. If you create the same class directly from C++, these methods will not be called automatically. To avoid this problem, it is recommended that you start deferring operations from <db:link xlink:href="qqmlparserstatus.xml#classBegin">classBegin</db:link> instead of from the initial creation of your class. This will still prevent multiple revaluations during initial binding assignment in QML, but will not defer operations invoked from C++.</db:para>
<db:para>To use <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link>, you must inherit both a <db:link xlink:href="qobject.xml">QObject</db:link>-derived class and <db:link xlink:href="qqmlparserstatus.xml">QQmlParserStatus</db:link>, and use the <db:link xlink:href="qobject.xml#Q_INTERFACES">Q_INTERFACES</db:link>() macro.</db:para>
<db:programlisting language="cpp">class MyObject : public QObject, public QQmlParserStatus
{
    Q_OBJECT
    Q_INTERFACES(QQmlParserStatus)

public:
    MyObject(QObject *parent = 0);
    ...
    void classBegin();
    void componentComplete();
}
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="classBegin">
<db:title>[pure virtual] void QQmlParserStatus::classBegin()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>classBegin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void classBegin() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invoked after class creation, but before any properties have been set.</db:para>
</db:section>
<db:section xml:id="componentComplete">
<db:title>[pure virtual] void QQmlParserStatus::componentComplete()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>componentComplete</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void componentComplete() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Invoked after the root component that caused this instantiation has completed construction. At this point all static values and binding values have been assigned to the class.</db:para>
</db:section>
</db:section>
</db:article>
