<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>File System Explorer</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A desktop QML app utilizing customized Qt Quick Controls to display text files from a filesystem.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In this example, a modern layout is used that consists of three major components. There is an icon-based <db:emphasis>Sidebar</db:emphasis> to the left, followed by a resizable <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> displaying the file system from a <db:link xlink:href="qfilesystemmodel.xml">QFileSystemModel</db:link>, and finally the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> displaying the selected text files. There is a common look and feel across all operating systems. We accomplish this by using customized quick controls and frameless windows, with our own window decorations. When launching this application from the command-line, you have the option to provide an initial directory as a parameter. This initial directory will be used by the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link> to set the starting point for displaying the directory structure.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-filesystemexplorer.webp"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="modern-layout-and-structure">
<db:title>Modern layout and structure</db:title>
<db:para>To begin with, we are providing the colors throughout a singleton QML object. In this way, we can provide more structured control over the appearance of the application.</db:para>
<db:programlisting language="cpp">pragma Singleton

QtObject {
    readonly property color background: &quot;#292828&quot;
    readonly property color surface1: &quot;#171819&quot;
    readonly property color surface2: &quot;#090A0C&quot;
    readonly property color text: &quot;#D4BE98&quot;
    readonly property color textFile: &quot;#E1D2B7&quot;
    readonly property color disabledText: &quot;#2C313A&quot;
    readonly property color selection: &quot;#4B4A4A&quot;
    readonly property color active: &quot;#292828&quot;
    readonly property color inactive: &quot;#383737&quot;
    readonly property color folder: &quot;#383737&quot;
    readonly property color icon: &quot;#383737&quot;
    readonly property color iconIndicator: &quot;#D5B35D&quot;
    readonly property color color1: &quot;#A7B464&quot;
    readonly property color color2: &quot;#D3869B&quot;
}

</db:programlisting>
<db:para>Since we do not want to rely on the operating system's window decoration and instead want to provide our own, we use the <db:code>FramelessWindowHint</db:code> flag inside the <db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link>. In order to achieve an equivalent interaction with the window, we override the <db:code>contentItem</db:code> property of our customized <db:link xlink:href="qml-qtquick-controls-menubar.xml">MenuBar</db:link> and display some information text as well as interaction possibilities for dragging or closing the application. <db:link xlink:href="qtqml-documents-definetypes.xml#inline-components">Inline Components</db:link> have been used to simplify this process.</db:para>
<db:programlisting language="cpp">            component InteractionButton: Rectangle {
                id: interactionButton

                signal action()
                property alias hovered: hoverHandler.hovered

                Layout.fillHeight: true
                Layout.preferredWidth: height

                color: hovered ? Colors.background : &quot;transparent&quot;
                HoverHandler {
                    id: hoverHandler
                }
                TapHandler {
                    id: tapHandler
                    onTapped: interactionButton.action()
                }
            }

            InteractionButton {
                id: minimize

                onAction: root.dragWindow.showMinimized()
                Rectangle {
                    anchors.centerIn: parent
                    color: parent.hovered ? Colors.iconIndicator : Colors.icon
                    height: 2
                    width: parent.height - 14
                }
            }

            InteractionButton {
                id: maximize
    ...
</db:programlisting>
<db:para>The <db:emphasis>Sidebar</db:emphasis> on the left includes checkable navigation buttons on top and one-shot buttons on the bottom. A <db:link xlink:href="qml-qtquick-controls-buttongroup.xml">ButtonGroup</db:link> and a Container are used to ensure that only one entry is active at any given time. It is then possible to provide different views using a property alias for the current position, along with a <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml">StackLayout</db:link>.</db:para>
<db:para>This technique allows us to simply extend the functionality by adding another button and the corresponding element inside the <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml">StackLayout</db:link>.</db:para>
<db:programlisting language="cpp">                StackLayout {
                    anchors.fill: parent
                    currentIndex: sidebar.currentTabIndex

                    // Shows the help text.
                    Text {
                        text: qsTr(&quot;This example shows how to use and visualize the file system.\n\n&quot;
                                 + &quot;Customized Qt Quick Components have been used to achieve this look.\n\n&quot;
                                 + &quot;You can edit the files but they won't be changed on the file system.\n\n&quot;
                                 + &quot;Click on the folder icon to the left to get started.&quot;)
                        wrapMode: TextArea.Wrap
                        color: Colors.text
                    }

                    // Shows the files on the file system.
                    FileSystemView {
                        id: fileSystemView
                        color: Colors.surface1
                        onFileClicked: path =&gt; root.currentFilePath = path
                    }
                }
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml">StackLayout</db:link> includes, besides some information text, the <db:emphasis>FileSystemView</db:emphasis>. This custom component displays files and folders and populates it with data from a <db:link xlink:href="qtquick-modelviewsdata-cppmodels.xml">C++ model</db:link>. We can then select the files and read them accordingly.</db:para>
<db:programlisting language="cpp">QString FileSystemModel::readFile(const QString &amp;filePath)
{
    // Don't issue errors for an empty path, as the initial binding
    // will result in an empty path, and that's OK.
    if (filePath.isEmpty())
        return {};

    QFile file(filePath);

    if (file.size() &gt;= 2'000'000)
        return tr(&quot;File size is too big.\nYou can read files up to %1 MB.&quot;).arg(2);

    static const QMimeDatabase db;
    const QMimeType mime = db.mimeTypeForFile(QFileInfo(file));

    // Check if the mimetype is supported and return the content.
    const auto mimeTypesForFile = mime.parentMimeTypes();
    for (const auto &amp;m : mimeTypesForFile) {
        if (m.contains(&quot;text&quot;, Qt::CaseInsensitive)
                || mime.comment().contains(&quot;text&quot;, Qt::CaseInsensitive)) {
            if (!file.open(QIODevice::ReadOnly | QIODevice::Text))
                return tr(&quot;Error opening the File!&quot;);

            QTextStream stream(&amp;file);
            return stream.readAll();
        }
    }
    return tr(&quot;Filetype not supported!&quot;);
}

</db:programlisting>
<db:para>By right-clicking on a folder in the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>, a popup Menu is opened, which allows control over the <db:code>rootIndex</db:code> property of the <db:link xlink:href="qml-qtquick-treeview.xml">TreeView</db:link>.</db:para>
<db:programlisting language="cpp">            MyMenu {
                id: contextMenu
                Action {
                    text: qsTr(&quot;Set as root index&quot;)
                    onTriggered: {
                        fileSystemTreeView.rootIndex = fileSystemTreeView.index(treeDelegate.row, 0)
                    }
                }
                Action {
                    text: qsTr(&quot;Reset root index&quot;)
                    onTriggered: fileSystemTreeView.rootIndex = undefined
                }
            }
        }

</db:programlisting>
<db:para>By using a <db:link xlink:href="qml-qtquick-controls-splitview.xml">SplitView</db:link>, we are able to dynamically share the space between the <db:link xlink:href="qml-qtquick-layouts-stacklayout.xml">StackLayout</db:link> and the Editor. Our Editor contains the <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> that displays the opened file and provides us with all the functionality needed to edit text files. Additionally, we provide a visualization of the line numbers, which can be toggled on and off in the Menu.</db:para>
<db:programlisting language="cpp">            Editor {
                id: editor
                showLineNumbers: root.showLineNumbers
                currentFilePath: root.currentFilePath
                SplitView.fillWidth: true
                SplitView.fillHeight: true
            }
</db:programlisting>
</db:section>
<db:section xml:id="custom-components">
<db:title>Custom components</db:title>
<db:para>For a better understanding of the customization process, investigate <db:link xlink:href="qtquickcontrols-customize.xml#customizing-a-control">this</db:link> article first. We are using reusable and customized components throughout this example.</db:para>
<db:para>For instance, the <db:emphasis>MyMenu</db:emphasis> component customizes Menu's <db:code>background</db:code> property as well as its delegates' <db:code>contentItem</db:code> and <db:code>background</db:code> properties.</db:para>
<db:programlisting language="cpp">// Copyright (C) 2023 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick.Controls.Basic
import FileSystemModule

Menu {
    id: root

    delegate: MenuItem {
        id: menuItem
        contentItem: Item {
            Text {
                anchors.verticalCenter: parent.verticalCenter
                anchors.left: parent.left
                anchors.leftMargin: 5

                text: menuItem.text
                color: enabled ? Colors.text : Colors.disabledText
            }
            Rectangle {
                id: indicator

                anchors.verticalCenter: parent.verticalCenter
                anchors.right: parent.right
                width: 6
                height: parent.height

                visible: menuItem.highlighted
                color: Colors.color2
            }
        }
        background: Rectangle {
            implicitWidth: 210
            implicitHeight: 35
            color: menuItem.highlighted ? Colors.active : &quot;transparent&quot;
        }
    }
    background: Rectangle {
        implicitWidth: 210
        implicitHeight: 35
        color: Colors.surface2
    }
}

</db:programlisting>
<db:para>Another example is the customization of the <db:link xlink:href="qml-qtquick-controls-scrollindicator.xml">ScrollIndicator</db:link> inside the <db:emphasis>FileSystemView</db:emphasis>, which additionally uses customized animations. Here we also override the <db:code>contentItem</db:code>.</db:para>
<db:programlisting language="cpp">        ScrollIndicator.vertical: ScrollIndicator {
            active: true
            implicitWidth: 15

            contentItem: Rectangle {
                implicitWidth: 6
                implicitHeight: 6

                color: Colors.color1
                opacity: fileSystemTreeView.movingVertically ? 0.5 : 0.0

                Behavior on opacity {
                    OpacityAnimator {
                        duration: 500
                    }
                }
            }
        }
</db:programlisting>
</db:section>
<db:section xml:id="python-version">
<db:title>Python version</db:title>
<db:para>If you're interested in the Python version of this example, you can find it <db:link xlink:href="https://doc.qt.io/qtforpython-6/examples/example_quickcontrols_filesystemexplorer.html">here</db:link>. This showcases the usage of Qt for Python and demonstrates how it can be used to create the same application.</db:para>
<db:para>Additionally, there is a detailed <db:link xlink:href="https://doc.qt.io/qtforpython-6/tutorials/extendedexplorer/extendedexplorer.html">tutorial</db:link> available that provides step-by-step instructions on how to extend this example with additional features. This tutorial can be helpful if you want to explore and learn more about building upon the existing functionality of the filesystem explorer.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quickcontrols/filesystemexplorer?h=6.9">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
