<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Unresolved type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>[unresolved-type] A used type was not found.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This category contains following warnings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Type is used but is not resolved</db:para>
</db:listitem>
<db:listitem>
<db:para>Type was not found for the return type of method</db:para>
</db:listitem>
<db:listitem>
<db:para>Type was not found for the type of parameter in method</db:para>
</db:listitem>
<db:listitem>
<db:para>Property has incomplete type; You may be missing an import</db:para>
</db:listitem>
<db:listitem>
<db:para>Type of property not found; This is likely due to a missing dependency entry or a type not being exposed declaratively</db:para>
</db:listitem>
<db:listitem>
<db:para>Type of property not fully resolved; This is likely due to a missing dependency entry or a type not being exposed declaratively</db:para>
</db:listitem>
<db:listitem>
<db:para>Type not found in namespace</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>These warnings usually indicate missing imports or faulty QML modules, depending on whether you are using or writing a QML module.</db:para>
<db:para>This warning category is spelled [unresolved-type] by qmllint.</db:para>
<db:section xml:id="for-qml-module-users">
<db:title>For QML module users</db:title>
<db:section xml:id="what-happened">
<db:title>What happened?</db:title>
<db:para>You used a type that was not found by QML tooling. It usually indicates a potential typo, a missing <db:link xlink:href="qtqml-syntax-imports.xml">import</db:link>, or improperly set up import paths.</db:para>
</db:section>
<db:section xml:id="why-is-this-bad">
<db:title>Why is this bad?</db:title>
<db:para>The type can't be found by QML tooling, and most likely not by the QML engine.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:section xml:id="typo">
<db:title>Typo</db:title>
<db:programlisting language="qml">import QtQuick

Itme { ... }
</db:programlisting>
<db:para>To fix this warning, correct the typo:</db:para>
<db:programlisting language="qml">import QtQuick

Item { ... }
</db:programlisting>
</db:section>
<db:section xml:id="missing-import-statement">
<db:title>Missing import statement</db:title>
<db:programlisting language="qml">Item { ... }
</db:programlisting>
<db:para>To fix this warning, import the module that exposes Item:</db:para>
<db:programlisting language="qml">import QtQuick

Item { ... }
</db:programlisting>
<db:para>If adding the import statement does not help, take a look at your <db:link xlink:href="qtqml-syntax-imports.xml#qml-import-path">import paths</db:link>.</db:para>
<db:para>If you get this warning via QML Language Server, your <db:link xlink:href="qtqml-tooling-qmlls.xml#setting-up-the-qml-language-server-in-your-editor">setup</db:link> might be incomplete.</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="for-qml-module-authors">
<db:title>For QML module authors</db:title>
<db:section xml:id="for-qml-module-authors-what-happened-7">
<db:title>What happened?</db:title>
<db:para>The QML tooling can't find a type in your QML module. It can be a type that you expose to QML directly or indirectly by using it as a:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Base type</db:para>
</db:listitem>
<db:listitem>
<db:para>Property type</db:para>
</db:listitem>
<db:listitem>
<db:para>Signal, slot, or Q_INVOKABLE parameter type</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_INVOKABLE return type</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>You might be missing a <db:link xlink:href="qtqml-cppintegration-definetypes.xml">declarative type registration</db:link> if the unresolved type is exposed by your module.</db:para>
<db:para>Otherwise, your QML module might have undeclared <db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">dependencies</db:link> to the QML module exposing the unresolved type.</db:para>
</db:section>
<db:section xml:id="for-qml-module-authors-why-is-this-bad-8">
<db:title>Why is this bad?</db:title>
<db:para>The QML tooling will not work on your types and users of your QML module will get spurious warnings that they can't fix.</db:para>
</db:section>
<db:section xml:id="for-qml-module-authors-examples-9">
<db:title>Examples</db:title>
<db:section xml:id="missing-type-registration">
<db:title>Missing type registration</db:title>
<db:para>Refer to <db:link xlink:href="qtqml-cppintegration-definetypes.xml">Defining QML Types from C++</db:link> on how to register your types declaratively. Make sure that all types and enums exposed directly and indirectly to QML are registered.</db:para>
</db:section>
<db:section xml:id="missing-qml-module-dependency">
<db:title>Missing QML module dependency</db:title>
<db:para>Let MyItem be a C++ type in your QML module:</db:para>
<db:programlisting language="cpp">class MyItem: public QQuickItem {
    ...
    QML_ELEMENT
    ...
    Q_PROPERTY(SomeType someProperty READ someProperty WRITE setSomeProperty NOTIFY somePropertyChanged)
    ...
}
</db:programlisting>
<db:para>The QML tooling can't resolve MyItem correctly if it can't resolve QQuickItem or SomeType first. If QQuickItem lives in the QtQuick QML module and SomeType in SomeModule, then you need to state these C++ dependencies in the QML module definition.</db:para>
<db:para>To achieve that, <db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">add the dependencies</db:link> to the QML module definition. This can be done with DEPENDENCIES, for example:</db:para>
<db:programlisting language="cpp">qt_add_qml_module(
    ...
    DEPENDENCIES
        QtQuick # for QQuickItem to be resolved
        SomeModule # for SomeType to be resolved
)
</db:programlisting>
<db:para>Refer to <db:link xlink:href="qt-add-qml-module.xml#declaring-module-dependencies">declaring C++ dependencies between QML modules</db:link> for more information.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
