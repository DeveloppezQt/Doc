<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>CBOR Support in Qt</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of CBOR support in Qt.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>Qt provides support for dealing with CBOR data. CBOR is a binary format to store data that has a superset of the types available in JSON, but is more compact.</db:para>
<db:para>The CBOR support in Qt provides an easy to use C++ API to parse, modify and save CBOR data.</db:para>
<db:para>More details about the CBOR data format can be found in <db:link xlink:href="https://datatracker.ietf.org/doc/html/rfc7049">RFC 7049</db:link>.</db:para>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>CBOR is a format to store structured data. It has three groups of built-in types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Basic types: integers, floating point, boolean, null, etc.</db:para>
</db:listitem>
<db:listitem>
<db:para>String-like types: strings and byte arrays</db:para>
</db:listitem>
<db:listitem>
<db:para>Containers: arrays and maps</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition, CBOR can add a &quot;tag&quot; to extend the meaning of the type. The container types can contain basic types, string-like types and containers.</db:para>
</db:section>
<db:section xml:id="the-cbor-classes">
<db:title>The CBOR Classes</db:title>
<db:section xml:id="the-qcborvalue-class">
<db:title>The QCborValue Class</db:title>
<db:para>The <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> class represents any CBOR type. It also has a simple API for reading and writing to <db:link xlink:href="qcborstreamreader.xml">QCborStreamReader</db:link> and <db:link xlink:href="qcborstreamwriter.xml">QCborStreamWriter</db:link> objects, as well as manipulating such objects in memory, with the help of <db:link xlink:href="qcborarray.xml">QCborArray</db:link> and <db:link xlink:href="qcbormap.xml">QCborMap</db:link>. The CborValue API is simplified from the full CBOR data type and always represents all integers as <db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link> and all floating-point as double. This means <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> is unable to represent CBOR integer values outside of the range of <db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link> (-2^63 to 2^63-1). When creating a CBOR stream, <db:link xlink:href="qcborvalue.xml#toCbor">QCborValue::toCbor</db:link>() can be configured to attempt to write the shorter single- and half-precision floating-point representations.</db:para>
</db:section>
<db:section xml:id="the-qcborarray-class">
<db:title>The QCborArray Class</db:title>
<db:para>The <db:link xlink:href="qcborarray.xml">QCborArray</db:link> class is used to hold an array of <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> objects. A <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> object can contain a <db:link xlink:href="qcborarray.xml">QCborArray</db:link> object. It has functions for converting to and from <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>, <db:link xlink:href="qstringlist.xml">QStringList</db:link>, <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>.</db:para>
</db:section>
<db:section xml:id="the-qcbormap-class">
<db:title>The QCborMap Class</db:title>
<db:para>The <db:link xlink:href="qcbormap.xml">QCborMap</db:link> class is used to hold an map of <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> objects. A <db:link xlink:href="qcborvalue.xml">QCborValue</db:link> object can contain a <db:link xlink:href="qcbormap.xml">QCborMap</db:link> object. It has functions for converting to and from <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, and <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>, but it can have keys of any type, not just <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:section>
<db:section xml:id="the-qcborstreamreader-class">
<db:title>The QCborStreamReader Class</db:title>
<db:para>The <db:link xlink:href="qcborstreamreader.xml">QCborStreamReader</db:link> class is a low level API for reading CBOR data from a <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, or a pointer to memory. It has an API similar to the <db:link xlink:href="qxmlstreamreader.xml">QXmlStreamReader</db:link> class.</db:para>
</db:section>
<db:section xml:id="the-qcborstreamwriter-class">
<db:title>The QCborStreamWriter Class</db:title>
<db:para>The <db:link xlink:href="qcborstreamwriter.xml">QCborStreamWriter</db:link> class is a low level API for writing CBOR data to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> or a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. It has an API similar to the <db:link xlink:href="qxmlstreamwriter.xml">QXmlStreamWriter</db:link> class.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtcore-serialization-cbordump-example.xml">Parsing and displaying CBOR data</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-convert-example.xml">Serialization Converter</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-savegame-example.xml">Saving and Loading a Game</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
<db:section>
<db:title>Contents</db:title>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qcborarray.xml" xlink:role="class">QCborArray</db:link></db:term>
<db:listitem>
<db:para>The QCborArray class is used to hold an array of CBOR elements.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborarray-constiterator.xml" xlink:role="class">QCborArray::ConstIterator</db:link></db:term>
<db:listitem>
<db:para>The QCborArray::ConstIterator class provides an STL-style const iterator for QCborArray.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborarray-iterator.xml" xlink:role="class">QCborArray::Iterator</db:link></db:term>
<db:listitem>
<db:para>The QCborArray::Iterator class provides an STL-style non-const iterator for QCborArray.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcbormap.xml" xlink:role="class">QCborMap</db:link></db:term>
<db:listitem>
<db:para>The QCborMap class is used to hold an associative container representable in CBOR.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcbormap-constiterator.xml" xlink:role="class">QCborMap::ConstIterator</db:link></db:term>
<db:listitem>
<db:para>The QCborMap::ConstIterator class provides an STL-style const iterator for QCborMap.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcbormap-iterator.xml" xlink:role="class">QCborMap::Iterator</db:link></db:term>
<db:listitem>
<db:para>The QCborMap::Iterator class provides an STL-style non-const iterator for QCborMap.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborparsererror.xml" xlink:role="class">QCborParserError</db:link></db:term>
<db:listitem>
<db:para>The QCborParserError is used by QCborValue to report a parsing error.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborstreamreader.xml" xlink:role="class">QCborStreamReader</db:link></db:term>
<db:listitem>
<db:para>The QCborStreamReader class is a simple CBOR stream decoder, operating on either a QByteArray or QIODevice.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborstreamwriter.xml" xlink:role="class">QCborStreamWriter</db:link></db:term>
<db:listitem>
<db:para>The QCborStreamWriter class is a simple CBOR encoder operating on a one-way stream.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qcborvalue.xml" xlink:role="class">QCborValue</db:link></db:term>
<db:listitem>
<db:para>The QCborValue class encapsulates a value in CBOR.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:article>
