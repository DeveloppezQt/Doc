<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Main Window</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Main Window example shows Qt's extensive support for tool bars, dock windows, menus, and other standard application features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;toolbar.h&quot;

#include &amp;lt;QRandomGenerator&amp;gt;

#include &amp;lt;QMainWindow&amp;gt;
#include &amp;lt;QMenu&amp;gt;
#include &amp;lt;QPainter&amp;gt;
#include &amp;lt;QPainterPath&amp;gt;
#include &amp;lt;QSpinBox&amp;gt;
#include &amp;lt;QLabel&amp;gt;
#include &amp;lt;QToolTip&amp;gt;

#include &amp;lt;stdlib.h&amp;gt;

static QPixmap genIcon(const QSize &amp;amp;iconSize, const QString &amp;amp;, const QColor &amp;amp;color, qreal pixelRatio)
{
    int w = qRound(iconSize.width() * pixelRatio);
    int h = qRound(iconSize.height() * pixelRatio);

    QImage image(w, h, QImage::Format_ARGB32_Premultiplied);
    image.fill(0);

    QPainter p(&amp;amp;image);

    extern void render_qt_text(QPainter *, int, int, const QColor &amp;amp;);
    render_qt_text(&amp;amp;p, w, h, color);

    QPixmap pm = QPixmap::fromImage(image, Qt::DiffuseDither | Qt::DiffuseAlphaDither);
    pm.setDevicePixelRatio(pixelRatio);
    return pm;
}

static QPixmap genIcon(const QSize &amp;amp;iconSize, int number, const QColor &amp;amp;color, qreal pixelRatio)
{ return genIcon(iconSize, QString::number(number), color, pixelRatio); }

ToolBar::ToolBar(const QString &amp;amp;title, QWidget *parent)
    : QToolBar(parent)
    , spinbox(nullptr)
    , spinboxAction(nullptr)
{
    setWindowTitle(title);
    setObjectName(title);

    setIconSize(QSize(32, 32));

    qreal dpr = devicePixelRatioF();
    menu = new QMenu(&quot;One&quot;, this);
    menu-&amp;gt;setIcon(genIcon(iconSize(), 1, Qt::black, dpr));
    menu-&amp;gt;addAction(genIcon(iconSize(), &quot;A&quot;, Qt::blue, dpr), &quot;A&quot;);
    menu-&amp;gt;addAction(genIcon(iconSize(), &quot;B&quot;, Qt::blue, dpr), &quot;B&quot;);
    menu-&amp;gt;addAction(genIcon(iconSize(), &quot;C&quot;, Qt::blue, dpr), &quot;C&quot;);
    addAction(menu-&amp;gt;menuAction());

    QAction *two = addAction(genIcon(iconSize(), 2, Qt::white, dpr), &quot;Two&quot;);
    QFont boldFont;
    boldFont.setBold(true);
    two-&amp;gt;setFont(boldFont);

    addAction(genIcon(iconSize(), 3, Qt::red, dpr), &quot;Three&quot;);
    addAction(genIcon(iconSize(), 4, Qt::green, dpr), &quot;Four&quot;);
    addAction(genIcon(iconSize(), 5, Qt::blue, dpr), &quot;Five&quot;);
    addAction(genIcon(iconSize(), 6, Qt::yellow, dpr), &quot;Six&quot;);
    orderAction = new QAction(this);
    orderAction-&amp;gt;setText(tr(&quot;Order Items in Tool Bar&quot;));
    connect(orderAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::order);

    randomizeAction = new QAction(this);
    randomizeAction-&amp;gt;setText(tr(&quot;Randomize Items in Tool Bar&quot;));
    connect(randomizeAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::randomize);

    addSpinBoxAction = new QAction(this);
    addSpinBoxAction-&amp;gt;setText(tr(&quot;Add Spin Box&quot;));
    connect(addSpinBoxAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::addSpinBox);

    removeSpinBoxAction = new QAction(this);
    removeSpinBoxAction-&amp;gt;setText(tr(&quot;Remove Spin Box&quot;));
    removeSpinBoxAction-&amp;gt;setEnabled(false);
    connect(removeSpinBoxAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::removeSpinBox);

    movableAction = new QAction(tr(&quot;Movable&quot;), this);
    movableAction-&amp;gt;setCheckable(true);
    connect(movableAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::changeMovable);

    allowedAreasActions = new QActionGroup(this);
    allowedAreasActions-&amp;gt;setExclusive(false);

    allowLeftAction = new QAction(tr(&quot;Allow on Left&quot;), this);
    allowLeftAction-&amp;gt;setCheckable(true);
    connect(allowLeftAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::allowLeft);

    allowRightAction = new QAction(tr(&quot;Allow on Right&quot;), this);
    allowRightAction-&amp;gt;setCheckable(true);
    connect(allowRightAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::allowRight);

    allowTopAction = new QAction(tr(&quot;Allow on Top&quot;), this);
    allowTopAction-&amp;gt;setCheckable(true);
    connect(allowTopAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::allowTop);

    allowBottomAction = new QAction(tr(&quot;Allow on Bottom&quot;), this);
    allowBottomAction-&amp;gt;setCheckable(true);
    connect(allowBottomAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::allowBottom);

    allowedAreasActions-&amp;gt;addAction(allowLeftAction);
    allowedAreasActions-&amp;gt;addAction(allowRightAction);
    allowedAreasActions-&amp;gt;addAction(allowTopAction);
    allowedAreasActions-&amp;gt;addAction(allowBottomAction);

    areaActions = new QActionGroup(this);
    areaActions-&amp;gt;setExclusive(true);

    leftAction = new QAction(tr(&quot;Place on Left&quot;) , this);
    leftAction-&amp;gt;setCheckable(true);
    connect(leftAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::placeLeft);

    rightAction = new QAction(tr(&quot;Place on Right&quot;) , this);
    rightAction-&amp;gt;setCheckable(true);
    connect(rightAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::placeRight);

    topAction = new QAction(tr(&quot;Place on Top&quot;) , this);
    topAction-&amp;gt;setCheckable(true);
    connect(topAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::placeTop);

    bottomAction = new QAction(tr(&quot;Place on Bottom&quot;) , this);
    bottomAction-&amp;gt;setCheckable(true);
    connect(bottomAction, &amp;amp;QAction::triggered, this, &amp;amp;ToolBar::placeBottom);

    areaActions-&amp;gt;addAction(leftAction);
    areaActions-&amp;gt;addAction(rightAction);
    areaActions-&amp;gt;addAction(topAction);
    areaActions-&amp;gt;addAction(bottomAction);

    connect(movableAction, &amp;amp;QAction::triggered, areaActions, &amp;amp;QActionGroup::setEnabled);

    connect(movableAction, &amp;amp;QAction::triggered, allowedAreasActions, &amp;amp;QActionGroup::setEnabled);

    menu = new QMenu(title, this);
    menu-&amp;gt;addAction(toggleViewAction());
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(orderAction);
    menu-&amp;gt;addAction(randomizeAction);
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(addSpinBoxAction);
    menu-&amp;gt;addAction(removeSpinBoxAction);
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(movableAction);
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addActions(allowedAreasActions-&amp;gt;actions());
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addActions(areaActions-&amp;gt;actions());
    menu-&amp;gt;addSeparator();
    menu-&amp;gt;addAction(tr(&quot;Insert break&quot;), this, &amp;amp;ToolBar::insertToolBarBreak);

    connect(menu, &amp;amp;QMenu::aboutToShow, this, &amp;amp;ToolBar::updateMenu);

    randomize();
}

void ToolBar::updateMenu()
{
    QMainWindow *mainWindow = qobject_cast&amp;lt;QMainWindow *&amp;gt;(parentWidget());
    Q_ASSERT(mainWindow != 0);

    const Qt::ToolBarArea area = mainWindow-&amp;gt;toolBarArea(this);
    const Qt::ToolBarAreas areas = allowedAreas();

    movableAction-&amp;gt;setChecked(isMovable());

    allowLeftAction-&amp;gt;setChecked(isAreaAllowed(Qt::LeftToolBarArea));
    allowRightAction-&amp;gt;setChecked(isAreaAllowed(Qt::RightToolBarArea));
    allowTopAction-&amp;gt;setChecked(isAreaAllowed(Qt::TopToolBarArea));
    allowBottomAction-&amp;gt;setChecked(isAreaAllowed(Qt::BottomToolBarArea));

    if (allowedAreasActions-&amp;gt;isEnabled()) {
        allowLeftAction-&amp;gt;setEnabled(area != Qt::LeftToolBarArea);
        allowRightAction-&amp;gt;setEnabled(area != Qt::RightToolBarArea);
        allowTopAction-&amp;gt;setEnabled(area != Qt::TopToolBarArea);
        allowBottomAction-&amp;gt;setEnabled(area != Qt::BottomToolBarArea);
    }

    leftAction-&amp;gt;setChecked(area == Qt::LeftToolBarArea);
    rightAction-&amp;gt;setChecked(area == Qt::RightToolBarArea);
    topAction-&amp;gt;setChecked(area == Qt::TopToolBarArea);
    bottomAction-&amp;gt;setChecked(area == Qt::BottomToolBarArea);

    if (areaActions-&amp;gt;isEnabled()) {
        leftAction-&amp;gt;setEnabled(areas &amp;amp; Qt::LeftToolBarArea);
        rightAction-&amp;gt;setEnabled(areas &amp;amp; Qt::RightToolBarArea);
        topAction-&amp;gt;setEnabled(areas &amp;amp; Qt::TopToolBarArea);
        bottomAction-&amp;gt;setEnabled(areas &amp;amp; Qt::BottomToolBarArea);
    }
}

void ToolBar::order()
{
    QList&amp;lt;QAction *&amp;gt; ordered;
    QList&amp;lt;QAction *&amp;gt; actions1 = actions();
    foreach (QAction *action, findChildren&amp;lt;QAction *&amp;gt;()) {
        if (!actions1.contains(action))
            continue;
        actions1.removeAll(action);
        ordered.append(action);
    }

    clear();
    addActions(ordered);

    orderAction-&amp;gt;setEnabled(false);
}

void ToolBar::randomize()
{
    QList&amp;lt;QAction *&amp;gt; randomized;
    QList&amp;lt;QAction *&amp;gt; actions = this-&amp;gt;actions();
    while (!actions.isEmpty()) {
        QAction *action = actions.takeAt(QRandomGenerator::global()-&amp;gt;bounded(actions.size()));
        randomized.append(action);
    }
    clear();
    addActions(randomized);

    orderAction-&amp;gt;setEnabled(true);
}

void ToolBar::addSpinBox()
{
    if (!spinbox)
        spinbox = new QSpinBox(this);
    if (!spinboxAction)
        spinboxAction = addWidget(spinbox);
    else
        addAction(spinboxAction);

    addSpinBoxAction-&amp;gt;setEnabled(false);
    removeSpinBoxAction-&amp;gt;setEnabled(true);
}

void ToolBar::removeSpinBox()
{
    if (spinboxAction)
        removeAction(spinboxAction);

    addSpinBoxAction-&amp;gt;setEnabled(true);
    removeSpinBoxAction-&amp;gt;setEnabled(false);
}

void ToolBar::allow(Qt::ToolBarArea area, bool a)
{
    Qt::ToolBarAreas areas = allowedAreas();
    areas = a ? areas | area : areas &amp;amp; ~area;
    setAllowedAreas(areas);

    if (areaActions-&amp;gt;isEnabled()) {
        leftAction-&amp;gt;setEnabled(areas &amp;amp; Qt::LeftToolBarArea);
        rightAction-&amp;gt;setEnabled(areas &amp;amp; Qt::RightToolBarArea);
        topAction-&amp;gt;setEnabled(areas &amp;amp; Qt::TopToolBarArea);
        bottomAction-&amp;gt;setEnabled(areas &amp;amp; Qt::BottomToolBarArea);
    }
}

void ToolBar::place(Qt::ToolBarArea area, bool p)
{
    if (!p)
        return;

    QMainWindow *mainWindow = qobject_cast&amp;lt;QMainWindow *&amp;gt;(parentWidget());
    Q_ASSERT(mainWindow != 0);

    mainWindow-&amp;gt;addToolBar(area, this);

    if (allowedAreasActions-&amp;gt;isEnabled()) {
        allowLeftAction-&amp;gt;setEnabled(area != Qt::LeftToolBarArea);
        allowRightAction-&amp;gt;setEnabled(area != Qt::RightToolBarArea);
        allowTopAction-&amp;gt;setEnabled(area != Qt::TopToolBarArea);
        allowBottomAction-&amp;gt;setEnabled(area != Qt::BottomToolBarArea);
    }
}

void ToolBar::changeMovable(bool movable)
{ setMovable(movable); }

void ToolBar::allowLeft(bool a)
{ allow(Qt::LeftToolBarArea, a); }

void ToolBar::allowRight(bool a)
{ allow(Qt::RightToolBarArea, a); }

void ToolBar::allowTop(bool a)
{ allow(Qt::TopToolBarArea, a); }

void ToolBar::allowBottom(bool a)
{ allow(Qt::BottomToolBarArea, a); }

void ToolBar::placeLeft(bool p)
{ place(Qt::LeftToolBarArea, p); }

void ToolBar::placeRight(bool p)
{ place(Qt::RightToolBarArea, p); }

void ToolBar::placeTop(bool p)
{ place(Qt::TopToolBarArea, p); }

void ToolBar::placeBottom(bool p)
{ place(Qt::BottomToolBarArea, p); }

void ToolBar::insertToolBarBreak()
{
    QMainWindow *mainWindow = qobject_cast&amp;lt;QMainWindow *&amp;gt;(parentWidget());
    Q_ASSERT(mainWindow != 0);

    mainWindow-&amp;gt;insertToolBarBreak(this);
}

</db:programlisting>
</db:article>
