<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Enginio C++ Examples - Todos</db:title>
<db:productname>QtEnginio</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Client library for Enginio</db:titleabbrev>
<db:abstract>
<db:para>The Todo example shows how to use the <db:link xlink:href="enginiomodel.xml">EnginioModel</db:link> with Qt Widgets.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets/qframe.h&gt;
#include &lt;QtWidgets/qlabel.h&gt;
#include &lt;QtWidgets/qlistview.h&gt;
#include &lt;QtWidgets/qpushbutton.h&gt;
#include &lt;QtWidgets/qtoolbar.h&gt;
#include &lt;QtWidgets/qinputdialog.h&gt;
#include &lt;QtWidgets/qlayout.h&gt;

#include &lt;QtCore/qjsondocument.h&gt;
#include &lt;QtCore/qjsonobject.h&gt;

#include &lt;Enginio/enginioclient.h&gt;
#include &lt;Enginio/enginioreply.h&gt;

// To get the backend right, we use a helper class in the example.
// Usually one would just insert the backend information below.
#include &quot;backendhelper.h&quot;

#include &quot;mainwindow.h&quot;
#include &quot;todosmodel.h&quot;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    setWindowTitle(QStringLiteral(&quot;Enginio TODO example&quot;));

    QByteArray EnginioBackendId = backendId(&quot;todo&quot;);

    m_client = new EnginioClient(this);
    m_client-&gt;setBackendId(EnginioBackendId);

    QObject::connect(m_client, &amp;EnginioClient::error, this, &amp;MainWindow::error);

    m_model = new TodosModel(this);
    m_model-&gt;setClient(m_client);

    QJsonObject query;
    query[&quot;objectType&quot;] = QString::fromUtf8(&quot;objects.todos&quot;);
    m_model-&gt;setQuery(query);

    QToolBar *toolBar = new QToolBar(this);
    m_addNewButton = new QPushButton(toolBar);
    m_addNewButton-&gt;setText(&quot;&amp;Add&quot;);
    QObject::connect(m_addNewButton, &amp;QPushButton::clicked, this, &amp;MainWindow::appendItem);

    m_removeButton = new QPushButton(toolBar);
    m_removeButton-&gt;setText(&quot;&amp;Remove&quot;);
    m_removeButton-&gt;setEnabled(false);
    QObject::connect(m_removeButton, &amp;QPushButton::clicked, this, &amp;MainWindow::removeItem);

    m_toggleButton = new QPushButton(toolBar);
    m_toggleButton-&gt;setText(&quot;&amp;Toggle Completed&quot;);
    m_toggleButton-&gt;setEnabled(false);
    QObject::connect(m_toggleButton, &amp;QPushButton::clicked, this, &amp;MainWindow::toggleCompleted);

    toolBar-&gt;addWidget(m_addNewButton);
    toolBar-&gt;addWidget(m_removeButton);
    toolBar-&gt;addWidget(m_toggleButton);

    m_view = new QTreeView(this);
    m_view-&gt;setAlternatingRowColors(true);
    QFrame *frame = new QFrame(this);
    QVBoxLayout *windowLayout = new QVBoxLayout(frame);
    windowLayout-&gt;addWidget(m_view);
    windowLayout-&gt;addWidget(toolBar);
    setCentralWidget(frame);

    m_view-&gt;setModel(m_model);

    m_view-&gt;setSelectionModel(new QItemSelectionModel(m_model, m_model));
    QObject::connect(m_view-&gt;selectionModel(), &amp;QItemSelectionModel::selectionChanged, this, &amp;MainWindow::selectionChanged);
}

QSize MainWindow::sizeHint() const
{
    return QSize(400, 600);
}

void MainWindow::error(EnginioReply *error)
{
    qWarning() &lt;&lt; Q_FUNC_INFO &lt;&lt; error;
}

void MainWindow::removeItem()
{
    QModelIndex index = m_view-&gt;currentIndex();
    EnginioReply *reply = m_model-&gt;remove(index.row());
    QObject::connect(reply, &amp;EnginioReply::finished, reply, &amp;EnginioReply::deleteLater);
}

void MainWindow::appendItem()
{
    bool ok;
    QString text = QInputDialog::getText(this, tr(&quot;Create a new To Do&quot;)
                                         , tr(&quot;Title:&quot;), QLineEdit::Normal
                                         , &quot;&quot;, &amp;ok);
    if (ok &amp;&amp; !text.isEmpty()){
        QJsonObject object;
        object[&quot;title&quot;] = text;
        object[&quot;completed&quot;] = false; // By default a new To Do is not completed
        EnginioReply *reply = m_model-&gt;append(object);
        QObject::connect(reply, &amp;EnginioReply::finished, reply, &amp;EnginioReply::deleteLater);
    }
}

void MainWindow::toggleCompleted()
{
    QModelIndex index = m_view-&gt;currentIndex();
    bool completed = m_model-&gt;data(index, m_model-&gt;CompletedRole).toBool();
    m_model-&gt;setData(index, QVariant(!completed), TodosModel::CompletedRole);
}

void MainWindow::selectionChanged(const QItemSelection &amp;selected, const QItemSelection &amp;deselected)
{
    Q_UNUSED(deselected);
    bool value = selected.count();
    m_removeButton-&gt;setEnabled(value);
    m_toggleButton-&gt;setEnabled(value);
}

</db:programlisting>
</db:article>
