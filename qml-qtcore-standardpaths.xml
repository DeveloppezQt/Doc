<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StandardPaths QML Type</db:title>
<db:productname>QtQmlCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides access to the standard system paths.</db:para>
<db:para>This type was introduced in Qt 6.2.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtCore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>QtObject</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtcore-standardpaths.xml">StandardPaths</db:link> singleton type provides methods for querying the standard system paths.</db:para>
<db:programlisting language="qml">property url documentsFolder: StandardPaths.writableLocation(StandardPaths.DocumentsLocation)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="displayName-method">
<db:title>string displayName(StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns a localized display name for the given location <db:code role="parameter">type</db:code> or an empty <db:link xlink:href="qstring.xml">QString</db:link> if no relevant location can be found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#displayName">QStandardPaths::displayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="findExecutable-method">
<db:title>url findExecutable(string <db:emphasis>executableName</db:emphasis>, list&lt;string&gt; <db:emphasis>paths</db:emphasis>)</db:title>
<db:para>Finds the executable named <db:code role="parameter">executableName</db:code> in the specified <db:code role="parameter">paths</db:code>, or the system paths if paths is empty.</db:para>
<db:para>On most operating systems the system path is determined by the <db:code>PATH</db:code> environment variable. The directories where to search for the executable can be set in the paths argument. To search in both your own paths and the system paths, call findExecutable twice, once with paths set and once with paths empty. Symlinks are not resolved in order to preserve behavior for the case of executables whose behavior depends on the name they are invoked with .</db:para>
<db:note>
<db:para>On Windows, the usual executable extensions (from the PATHEXT environment variable) are automatically appended. For example, the findExecutable(&quot;foo&quot;) call finds <db:code>foo.exe</db:code> or <db:code>foo.bat</db:code> if present.</db:para>
</db:note>
<db:para>Returns the absolute file path to the executable, or an empty string if not found.</db:para>
<db:para>If the given \n executableName is an absolute path pointing to an executable its clean path is returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#findExecutable">QStandardPaths::findExecutable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locate-method">
<db:title>url locate(StandardLocation <db:emphasis>type</db:emphasis>, string <db:emphasis>fileName</db:emphasis>, LocateOptions <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Finds a file or directory called <db:code role="parameter">fileName</db:code> in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">options</db:code> flag lets you specify whether to look for files or directories. By default, this flag is set to <db:code>LocateFile</db:code>.</db:para>
<db:para>Returns the absolute path to the first file or directory found, otherwise returns an empty string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#locate">QStandardPaths::locate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="locateAll-method">
<db:title>list&lt;url&gt; locateAll(StandardLocation <db:emphasis>type</db:emphasis>, string <db:emphasis>fileName</db:emphasis>, LocateOptions <db:emphasis>options</db:emphasis>)</db:title>
<db:para>Finds all files or directories by the name, <db:code role="parameter">fileName</db:code>, in the standard locations for <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">options</db:code> flag lets you specify whether to look for files or directories. By default, this flag is set to <db:code>LocateFile</db:code>.</db:para>
<db:para>Returns the list of all the files that were found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#locateAll">QStandardPaths::locateAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardLocations-method">
<db:title>list&lt;url&gt; standardLocations(StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns all the directories where files of <db:code role="parameter">type</db:code> belong.</db:para>
<db:para>The list of directories is sorted from high to low priority, starting with <db:link xlink:href="qml-qtcore-standardpaths.xml#writableLocation-method">writableLocation</db:link>() if it can be determined. This list is empty if no locations for type are defined.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#standardLocations">QStandardPaths::standardLocations</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writableLocation-method">
<db:title>url writableLocation(StandardLocation <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Returns the directory where files of <db:code role="parameter">type</db:code> should be written to, or an empty string if the location cannot be determined.</db:para>
<db:note>
<db:para>The storage location returned may not exist; that is, it may need to be created by the system or the user.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
