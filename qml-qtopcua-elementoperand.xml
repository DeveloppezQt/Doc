<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ElementOperand QML Type</db:title>
<db:productname>QtOpcUa</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>An OPC UA module for Qt</db:titleabbrev>
<db:abstract>
<db:para>The OPC UA <db:link xlink:href="qml-qtopcua-elementoperand.xml">ElementOperand</db:link> type.</db:para>
<db:para>This type was introduced in QtOpcUa 5.13.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtOpcUa</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>QtOpcUa 5.13</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtopcua-elementoperand.xml">ElementOperand</db:link> is defined in OPC-UA part 4, 7.4.4.2. It is used to identify another element in the filter by its index (the first element has the index 0).</db:para>
<db:para>This is required to create complex filters, for example to reference the two operands of the AND operation in ((Severity &gt; 500) AND (Message == &quot;TestString&quot;)). The first step is to create content filter elements for the two conditions (Severity &gt; 500) and (Message == &quot;TestString&quot;). A third content filter element is required to create an AND combination of the two conditions. It consists of the AND operator and two element operands with the indices of the two conditions created before:</db:para>
<db:programlisting language="cpp">import QtOpcUa as QtOpcUa

QtOpcUa.EventFilter {
    select : [ ... ]
    where: [
        QtOpcUa.FilterElement {
            operator: QtOpcUa.FilterElement.GreaterThan
            firstOperand: QtOpcUa.SimpleAttributeOperand {
                browsePath: [
                    QtOpcUa.NodeId {
                        identifier: &quot;Severity&quot;
                        ns: &quot;http://opcfoundation.org/UA/&quot;
                    }
                ]
            }
            secondOperand: QtOpcUa.LiteralOperand {
                value: 500
                type: QtOpcUa.Constants.UInt16
            }
        }
        QtOpcUa.FilterElement {
            operator: QtOpcUa.FilterElement.Equals
            firstOperand: QtOpcUa.SimpleAttributeOperand {
                browsePath: [
                    QtOpcUa.NodeId {
                        identifier: &quot;Message&quot;
                        ns: &quot;http://opcfoundation.org/UA/&quot;
                    }
                ]
            }
            secondOperand: QtOpcUa.LiteralOperand {
                value: &quot;TestString&quot;
                type: QtOpcUa.Constants.String
            }
        }
        QtOpcUa.FilterElement {
            operator: QtOpcUa.FilterElement.And
            firstOperand: QtOpcUa.ElementOperand {
                index: 0
            }
            secondOperand: QtOpcUa.ElementOperand {
                index: 1
            }
        }
    ]
}
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="index-prop">
<db:title>index : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>index</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Index of the filter element that is going to be used as operand.</db:para>
</db:section>
</db:section>
</db:article>
