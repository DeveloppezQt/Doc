<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>quaternion QML Value Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A quaternion type has scalar, x, y, and z attributes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:code>quaternion</db:code> type has <db:code>scalar</db:code>, <db:code>x</db:code>, <db:code>y</db:code> and <db:code>z</db:code> attributes.</db:para>
<db:para>To create a <db:code>quaternion</db:code> value, specify it as a &quot;scalar,x,y,z&quot; string, or define the components individually, or compose it with the Qt.quaternion() function.</db:para>
<db:para>The quaternion type has the following idempotent functions which can be invoked in QML:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Function Signature</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
<db:th>
<db:para>Example</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>real dotProduct(quaternion other)</db:para>
</db:td>
<db:td>
<db:para>Returns the scalar real result of the dot product of <db:code>this</db:code> quaternion with the <db:code>other</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = Qt.quaternion(5,6,7,8);
var c = a.dotProduct(b);
console.log(c); // 70
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion times(quaternion other)</db:para>
</db:td>
<db:td>
<db:para>Returns the quaternion result of multiplying <db:code>this</db:code> quaternion with the <db:code>other</db:code> quaternion, which corresponds to applying both of the rotations</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1 / Math.sqrt(2), 1 / Math.sqrt(2), 0, 0);
var b = Qt.quaternion(1 / Math.sqrt(2), 0, 1 / Math.sqrt(2), 0);
var c = b.times(a);
console.log(c.toString()); // QQuaternion(0.5, 0.5, 0.5, -0.5)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d times(vector3d vector)</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d result of rotating the <db:code>vector</db:code> with <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(0.5,0.5,0.5,-0.5);
var b = Qt.vector3d(4,5,6);
var c = a.times(b);
console.log(c.toString()); // QVector3D(5, -6, -4)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion times(real factor)</db:para>
</db:td>
<db:td>
<db:para>Returns the quaternion result of multiplying <db:code>this</db:code> quaternion with the scalar <db:code>factor</db:code></db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = 4.48;
var c = a.times(b);
console.log(c.toString()); // QQuaternion(4.48, 8.96, 13.44, 17.92)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion plus(quaternion other)</db:para>
</db:td>
<db:td>
<db:para>Returns the quaternion result of the addition of <db:code>this</db:code> quaternion with the <db:code>other</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = Qt.quaternion(5,6,7,8);
var c = a.plus(b);
console.log(c.toString()); // QQuaternion(6, 8, 10, 12)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion minus(quaternion other)</db:para>
</db:td>
<db:td>
<db:para>Returns the quaternion result of the subtraction of <db:code>other</db:code> quaternion from <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = Qt.quaternion(5,6,7,8);
var c = a.minus(b);
console.log(c.toString()); // QQuaternion(-4, -4, -4, -4)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion normalized()</db:para>
</db:td>
<db:td>
<db:para>Returns the normalized unit form of <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = a.normalized();
console.log(b.toString()); // QQuaternion(0.182574, 0.365148, 0.547723, 0.730297)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion inverted()</db:para>
</db:td>
<db:td>
<db:para>Returns the inverse of <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(0.5,0.5,0.5,-0.5);
var b = a.inverted();
console.log(b.toString()); // QQuaternion(0.5, -0.5, -0.5, 0.5)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quaternion conjugated()</db:para>
</db:td>
<db:td>
<db:para>Returns the conjugate of <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = a.conjugated()
console.log(b.toString()); // QQuaternion(1, -2, -3, -4)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>real length()</db:para>
</db:td>
<db:td>
<db:para>Returns the scalar real value of the length of <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = a.length();
console.log(b.toString()); // 5.477225575051661
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector3d toEulerAngles()</db:para>
</db:td>
<db:td>
<db:para>Returns the vector3d Euler angles (in degrees) that corresponds to <db:code>this</db:code> quaternion</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(0.933012,0.25,-0.25,0.066987);
var b = a.toEulerAngles();
console.log(b.toString()); // QVector3D(30, -30, -4.28846e-05)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>vector4d toVector4d()</db:para>
</db:td>
<db:td>
<db:para>Returns the vector4d result of converting <db:code>this</db:code> quaternion to a vector4d</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = a.toVector4d();
console.log(b.toString()); // QVector4D(2, 3, 4, 1)
            </db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>bool fuzzyEquals(quaternion other, real epsilon)</db:para>
</db:td>
<db:td>
<db:para>Returns true if <db:code>this</db:code> quaternion is approximately equal to the <db:code>other</db:code> quaternion. The approximation will be true if each attribute of <db:code>this</db:code> is within <db:code>epsilon</db:code> of <db:code>other</db:code>. Note that <db:code>epsilon</db:code> is an optional argument, the default <db:code>epsilon</db:code> is 0.00001.</db:para>
</db:td>
<db:td>
<db:programlisting language="cpp">var a = Qt.quaternion(1,2,3,4);
var b = Qt.quaternion(1.0001, 1.9998, 2.0001, 3.9999);
var c = a.fuzzyEquals(b);        // default epsilon
var d = a.fuzzyEquals(b, 0.005); // supplied epsilon
console.log(c + &quot; &quot; + d); // false true
            </db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Properties of type <db:code>quaternion</db:code> have <db:code>Qt.quaternion(1, 0, 0, 0)</db:code> as their default value.</db:para>
<db:para>This value type is provided by the <db:link xlink:href="qtquick-module.xml">QtQuick</db:link> import.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML Value Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
