<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QOpenGLShader Class</db:title>
<db:productname>QtOpenGL</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>QtOpenGL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> class allows OpenGL shaders to be compiled.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QOpenGLShader</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS OpenGL)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::OpenGL)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += opengl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QOpenGLShader is part of <db:simplelist><db:member>painting-3D</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class supports shaders written in the OpenGL Shading Language (GLSL) and in the OpenGL/ES Shading Language (GLSL/ES).</db:para>
<db:para><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> and <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> shelter the programmer from the details of compiling and linking vertex and fragment shaders.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ShaderTypeBit-enum">
<db:title>enum QOpenGLShader::ShaderTypeBit</db:title>
<db:bridgehead renderas="sect2">flags QOpenGLShader::ShaderType</db:bridgehead>
<db:enumsynopsis>
<db:enumname>ShaderTypeBit</db:enumname>
<db:enumitem>
<db:enumidentifier>Vertex</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Fragment</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Geometry</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TessellationControl</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TessellationEvaluation</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Compute</db:enumidentifier>
<db:enumvalue>0x0020</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QOpenGLShader::ShaderType</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum specifies the type of <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> that is being created.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::Vertex</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Vertex shader written in the OpenGL Shading Language (GLSL).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::Fragment</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Fragment shader written in the OpenGL Shading Language (GLSL).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::Geometry</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Geometry shaders written in the OpenGL Shading Language (GLSL) (requires OpenGL &gt;= 3.2 or OpenGL ES &gt;= 3.2).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::TessellationControl</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Tessellation control shaders written in the OpenGL shading language (GLSL) (requires OpenGL &gt;= 4.0 or OpenGL ES &gt;= 3.2).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::TessellationEvaluation</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>Tessellation evaluation shaders written in the OpenGL shading language (GLSL) (requires OpenGL &gt;= 4.0 or OpenGL ES &gt;= 3.2).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link></db:emphasis>::Compute</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td>
<db:para>Compute shaders written in the OpenGL shading language (GLSL) (requires OpenGL &gt;= 4.3 or OpenGL ES &gt;= 3.1).</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ShaderType</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ShaderTypeBit&gt;. </db:code>It stores an OR combination of <db:code>ShaderTypeBit</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QOpenGLShader">
<db:title>[explicit] QOpenGLShader::QOpenGLShader(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QOpenGLShader</db:methodname>
<db:methodparam>
<db:type>QOpenGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLShader(QOpenGLShader::ShaderType type, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qopenglshader.xml">QOpenGLShader</db:link> object of the specified <db:code role="parameter">type</db:code> and attaches it to <db:code role="parameter">parent</db:code>. If shader programs are not supported, <db:link xlink:href="qopenglshaderprogram.xml#hasOpenGLShaderPrograms">QOpenGLShaderProgram::hasOpenGLShaderPrograms</db:link>() will return false.</db:para>
<db:para>This constructor is normally followed by a call to <db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>() or <db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>().</db:para>
<db:para>The shader will be associated with the current <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QOpenGLShader">
<db:title>[virtual] QOpenGLShader::~QOpenGLShader()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QOpenGLShader</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QOpenGLShader()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Deletes this shader. If the shader has been attached to a <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> object, then the actual shader will stay around until the <db:link xlink:href="qopenglshaderprogram.xml">QOpenGLShaderProgram</db:link> is destroyed.</db:para>
</db:section>
<db:section xml:id="compileSourceCode">
<db:title>bool QOpenGLShader::compileSourceCode(const char *<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>compileSourceCode</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool compileSourceCode(const char *source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">source</db:code> code for this shader and compiles it. Returns <db:code>true</db:code> if the source was successfully compiled, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compileSourceCode-1">
<db:title>bool QOpenGLShader::compileSourceCode(const QByteArray &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>compileSourceCode</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool compileSourceCode(const QByteArray &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">source</db:code> code for this shader and compiles it. Returns <db:code>true</db:code> if the source was successfully compiled, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compileSourceCode-2">
<db:title>bool QOpenGLShader::compileSourceCode(const QString &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>compileSourceCode</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool compileSourceCode(const QString &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the <db:code role="parameter">source</db:code> code for this shader and compiles it. Returns <db:code>true</db:code> if the source was successfully compiled, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="compileSourceFile">
<db:title>bool QOpenGLShader::compileSourceFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>compileSourceFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool compileSourceFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the source code for this shader to the contents of <db:code role="parameter">fileName</db:code> and compiles it. Returns <db:code>true</db:code> if the file could be opened and the source compiled, false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasOpenGLShaders">
<db:title>[static] bool QOpenGLShader::hasOpenGLShaders(QOpenGLShader::ShaderType <db:emphasis>type</db:emphasis>, QOpenGLContext *<db:emphasis>context</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasOpenGLShaders</db:methodname>
<db:methodparam>
<db:type>QOpenGLShader::ShaderType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QOpenGLContext *</db:type>
<db:parameter>context</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasOpenGLShaders(QOpenGLShader::ShaderType type, QOpenGLContext *context)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if shader programs of type <db:code role="parameter">type</db:code> are supported on this system; false otherwise.</db:para>
<db:para>The <db:code role="parameter">context</db:code> is used to resolve the GLSL extensions. If <db:code role="parameter">context</db:code> is <db:code>nullptr</db:code>, then <db:link xlink:href="qopenglcontext.xml#currentContext">QOpenGLContext::currentContext</db:link>() is used.</db:para>
</db:section>
<db:section xml:id="isCompiled">
<db:title>bool QOpenGLShader::isCompiled() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCompiled</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCompiled() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this shader has been compiled; false otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="log">
<db:title>QString QOpenGLShader::log() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>log</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString log() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the errors and warnings that occurred during the last compile.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>()</db:member>
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceFile">compileSourceFile</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaderId">
<db:title>GLuint QOpenGLShader::shaderId() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>GLuint</db:type>
<db:methodname>shaderId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">GLuint shaderId() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the OpenGL identifier associated with this shader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshaderprogram.xml#programId">QOpenGLShaderProgram::programId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="shaderType">
<db:title>QOpenGLShader::ShaderType QOpenGLShader::shaderType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QOpenGLShader::ShaderType</db:type>
<db:methodname>shaderType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QOpenGLShader::ShaderType shaderType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of this shader.</db:para>
</db:section>
<db:section xml:id="sourceCode">
<db:title>QByteArray QOpenGLShader::sourceCode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>sourceCode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray sourceCode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source code for this shader.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qopenglshader.xml#compileSourceCode">compileSourceCode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
