<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaylandSurfaceRole Class</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link> class represents the role of the surface in context of wl_surface.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaylandSurfaceRole</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WaylandCompositor)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WaylandCompositor)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += waylandcompositor</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link> is used to represent the role of a QWaylandSurface. According to the protocol specification, the role of a surface is permanent once set, and if the same surface is later reused for a different role, this constitutes a protocol error. Setting the surface to the same role multiple times is not an error.</db:para>
<db:para>As an example, the QWaylandXdgShell can assign either &quot;popup&quot; or &quot;toplevel&quot; roles to surfaces. If <db:code>get_toplevel</db:code> is requested on a surface which has previously received a <db:code>get_popup</db:code> request, then the compositor will issue a protocol error.</db:para>
<db:para>Roles are compared by pointer value, so any two objects of <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link> will be considered different roles, regardless of what their <db:link xlink:href="qwaylandsurfacerole.xml#name">names</db:link> are. A typical way of assigning a role is to have a static <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link> object to represent it.</db:para>
<db:programlisting language="cpp">class MyShellSurfaceSubType
{
    static QWaylandSurfaceRole s_role;
    // ...
};

// ...

surface-&amp;gt;setRole(&amp;amp;MyShellSurfaceSubType::s_role, resource-&amp;gt;handle, MY_ERROR_CODE);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaylandSurfaceRole">
<db:title>QWaylandSurfaceRole::QWaylandSurfaceRole(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QWaylandSurfaceRole</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaylandSurfaceRole(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link> and assigns it <db:code role="parameter">name</db:code>. The name is used in error messages involving this <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link>.</db:para>
</db:section>
<db:section xml:id="name">
<db:title>const QByteArray QWaylandSurfaceRole::name()</db:title>
<db:methodsynopsis>
<db:type>const QByteArray</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray name()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link>. The name is used in error messages involving this <db:link xlink:href="qwaylandsurfacerole.xml">QWaylandSurfaceRole</db:link>, for example if an attempt is made to change the role of a surface.</db:para>
</db:section>
</db:section>
</db:article>
