<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoServiceProvider Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> class aggregates access to services which provide geographical information.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoServiceProvider</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoServiceProvider is part of <db:simplelist><db:member>QtLocation-common</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Maps and Navigation API allows people to access various kinds of geographical information, including functionality to perform geocoding, routing and the display of maps. The <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> aggregates the access to a set of these services that are provided by a single vendor.</db:para>
<db:para>It is possible to mix and match service providers for the various domains, so that a geocoding manager from one service provider can be used with a geographic routing manager from another service provider.</db:para>
<db:para>This is not recommended unless the client is able to verify that the data provided by the different services are compatible, as differences in the underlying data sets could cause serious incongruences between the services.</db:para>
<db:para>Subclasses of <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> guarantee that the different services that they provide are interoperable.</db:para>
<db:para>Each service provider must follow a naming convention for their service specific parameter names/keys. They use the provider name as prefix for all their parameter names. When a provider is loaded only those parameters are passed on whose parameter names start with the provider name. This avoids the sharing sensitive parameters such as confidential <db:code>token</db:code> or <db:code>app_id</db:code> parameters with other plugins.</db:para>
<db:para>Please check the GeoServices plugin specific documentation to obtain a complete list of the available parameter names/keys and values.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QGeoServiceProvider::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotSupportedError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownParameterError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MissingRequiredParameterError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ConnectionError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoaderError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Describes an error related to the loading and setup of a service provider plugin.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NotSupportedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The plugin does not support this functionality.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::UnknownParameterError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The plugin did not recognize one of the parameters it was given.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::MissingRequiredParameterError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The plugin did not find one of the parameters it was expecting.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The plugin could not connect to its backend service or database.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::LoaderError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The plugin failed to load.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="GeocodingFeature-enum">
<db:title>enum QGeoServiceProvider::GeocodingFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoServiceProvider::GeocodingFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>GeocodingFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>NoGeocodingFeatures</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnlineGeocodingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OfflineGeocodingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ReverseGeocodingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;2)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalizedGeocodingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;3)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyGeocodingFeatures</db:enumidentifier>
<db:enumvalue>~(0)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoServiceProvider::GeocodingFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes the geocoding features supported by the geo service provider.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoGeocodingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No geocoding features are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OnlineGeocodingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;0)</db:code></db:td>
<db:td>
<db:para>Online geocoding is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OfflineGeocodingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;1)</db:code></db:td>
<db:td>
<db:para>Offline geocoding is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::ReverseGeocodingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;2)</db:code></db:td>
<db:td>
<db:para>Reverse geocoding is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::LocalizedGeocodingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;3)</db:code></db:td>
<db:td>
<db:para>Supports returning geocoding results with localized addresses.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AnyGeocodingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>~(0)</db:code></db:td>
<db:td>
<db:para>Matches a geo service provider that provides any geocoding features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>GeocodingFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;GeocodingFeature&gt;. </db:code>It stores an OR combination of <db:code>GeocodingFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="MappingFeature-enum">
<db:title>enum QGeoServiceProvider::MappingFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoServiceProvider::MappingFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>MappingFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMappingFeatures</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnlineMappingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OfflineMappingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalizedMappingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;2)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyMappingFeatures</db:enumidentifier>
<db:enumvalue>~(0)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoServiceProvider::MappingFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes the mapping features supported by the geo service provider.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoMappingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No mapping features are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OnlineMappingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;0)</db:code></db:td>
<db:td>
<db:para>Online mapping is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OfflineMappingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;1)</db:code></db:td>
<db:td>
<db:para>Offline mapping is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::LocalizedMappingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;2)</db:code></db:td>
<db:td>
<db:para>Supports returning localized map data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AnyMappingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>~(0)</db:code></db:td>
<db:td>
<db:para>Matches a geo service provider that provides any mapping features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>MappingFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;MappingFeature&gt;. </db:code>It stores an OR combination of <db:code>MappingFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="NavigationFeature-enum">
<db:title>enum QGeoServiceProvider::NavigationFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoServiceProvider::NavigationFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>NavigationFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>NoNavigationFeatures</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnlineNavigationFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OfflineNavigationFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyNavigationFeatures</db:enumidentifier>
<db:enumvalue>~(0)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoServiceProvider::NavigationFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes the navigation features supported by the geo service provider.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoNavigationFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No navigation features are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OnlineNavigationFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;0)</db:code></db:td>
<db:td>
<db:para>Online navigation is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OfflineNavigationFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;1)</db:code></db:td>
<db:td>
<db:para>Offline navigation is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AnyNavigationFeatures</db:code></db:para>
</db:td>
<db:td><db:code>~(0)</db:code></db:td>
<db:td>
<db:para>Matches a geo service provider that provides any navigation features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>NavigationFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;NavigationFeature&gt;. </db:code>It stores an OR combination of <db:code>NavigationFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="PlacesFeature-enum">
<db:title>enum QGeoServiceProvider::PlacesFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoServiceProvider::PlacesFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>PlacesFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>NoPlacesFeatures</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnlinePlacesFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OfflinePlacesFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SavePlaceFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;2)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RemovePlaceFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;3)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SaveCategoryFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;4)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RemoveCategoryFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;5)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PlaceRecommendationsFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;6)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SearchSuggestionsFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;7)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalizedPlacesFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;8)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NotificationsFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;9)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PlaceMatchingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;10)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyPlacesFeatures</db:enumidentifier>
<db:enumvalue>~(0)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoServiceProvider::PlacesFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes the places features supported by the geo service provider.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoPlacesFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No places features are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OnlinePlacesFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;0)</db:code></db:td>
<db:td>
<db:para>Online places is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OfflinePlacesFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;1)</db:code></db:td>
<db:td>
<db:para>Offline places is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::SavePlaceFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;2)</db:code></db:td>
<db:td>
<db:para>Saving places is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::RemovePlaceFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;3)</db:code></db:td>
<db:td>
<db:para>Removing or deleting places is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::SaveCategoryFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;4)</db:code></db:td>
<db:td>
<db:para>Saving categories is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::RemoveCategoryFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;5)</db:code></db:td>
<db:td>
<db:para>Removing or deleting categories is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::PlaceRecommendationsFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;6)</db:code></db:td>
<db:td>
<db:para>Searching for recommended places similar to another place is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::SearchSuggestionsFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;7)</db:code></db:td>
<db:td>
<db:para>Search suggestions is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::LocalizedPlacesFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;8)</db:code></db:td>
<db:td>
<db:para>Supports returning localized place data.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NotificationsFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;9)</db:code></db:td>
<db:td>
<db:para>Notifications of place and category changes is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::PlaceMatchingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;10)</db:code></db:td>
<db:td>
<db:para>Supports matching places from two different geo service providers.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AnyPlacesFeatures</db:code></db:para>
</db:td>
<db:td><db:code>~(0)</db:code></db:td>
<db:td>
<db:para>Matches a geo service provider that provides any places features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>PlacesFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;PlacesFeature&gt;. </db:code>It stores an OR combination of <db:code>PlacesFeature</db:code> values.</db:para>
</db:section>
<db:section xml:id="RoutingFeature-enum">
<db:title>enum QGeoServiceProvider::RoutingFeature</db:title>
<db:bridgehead renderas="sect2">flags QGeoServiceProvider::RoutingFeatures</db:bridgehead>
<db:enumsynopsis>
<db:enumname>RoutingFeature</db:enumname>
<db:enumitem>
<db:enumidentifier>NoRoutingFeatures</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OnlineRoutingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;0)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>OfflineRoutingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;1)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LocalizedRoutingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;2)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RouteUpdatesFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;3)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AlternativeRoutesFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;4)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ExcludeAreasRoutingFeature</db:enumidentifier>
<db:enumvalue>(1&lt;&lt;5)</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AnyRoutingFeatures</db:enumidentifier>
<db:enumvalue>~(0)</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoServiceProvider::RoutingFeatures</db:typedefname>
</db:typedefsynopsis>
<db:para>Describes the routing features supported by the geo service provider.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::NoRoutingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No routing features are supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OnlineRoutingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;0)</db:code></db:td>
<db:td>
<db:para>Online routing is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::OfflineRoutingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;1)</db:code></db:td>
<db:td>
<db:para>Offline routing is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::LocalizedRoutingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;2)</db:code></db:td>
<db:td>
<db:para>Supports returning routes with localized addresses and instructions.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::RouteUpdatesFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;3)</db:code></db:td>
<db:td>
<db:para>Updating an existing route based on the current position is supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AlternativeRoutesFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;4)</db:code></db:td>
<db:td>
<db:para>Supports returning alternative routes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::ExcludeAreasRoutingFeature</db:code></db:para>
</db:td>
<db:td><db:code>(1&lt;&lt;5)</db:code></db:td>
<db:td>
<db:para>Supports specifying a areas which the returned route must not cross.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link></db:emphasis>::AnyRoutingFeatures</db:code></db:para>
</db:td>
<db:td><db:code>~(0)</db:code></db:td>
<db:td>
<db:para>Matches a geo service provider that provides any routing features.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RoutingFeatures</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RoutingFeature&gt;. </db:code>It stores an OR combination of <db:code>RoutingFeature</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoServiceProvider">
<db:title>QGeoServiceProvider::QGeoServiceProvider(const QString &amp;<db:emphasis>providerName</db:emphasis>, const QVariantMap &amp;<db:emphasis>parameters</db:emphasis> = QVariantMap(), bool <db:emphasis>allowExperimental</db:emphasis> = false)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoServiceProvider</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>providerName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
<db:initializer>QVariantMap()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>allowExperimental</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider(const QString &amp;providerName, const QVariantMap &amp;parameters, bool allowExperimental)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> whose backend has the name <db:code role="parameter">providerName</db:code>, using the provided <db:code role="parameter">parameters</db:code>.</db:para>
<db:para>If multiple plugins have the same <db:code role="parameter">providerName</db:code>, the plugin with the highest reported providerVersion() will be used.</db:para>
<db:para>If <db:code role="parameter">allowExperimental</db:code> is true then plugins marked as experimental may be used. By default experimental plugins are not considered.</db:para>
<db:para>If no plugin matching <db:code role="parameter">providerName</db:code> was able to be loaded then <db:link xlink:href="qgeoserviceprovider.xml#error">error</db:link>() and <db:link xlink:href="qgeoserviceprovider.xml#errorString">errorString</db:link>() will provide details about why this is the case.</db:para>
<db:note>
<db:para>Before the list of <db:code role="parameter">parameters</db:code> is passed on to the to-be-loaded provider plugin, the list is filtered to avoid the sharing of plugin specific parameters with unrelated provider plugins. Plugin specific parameter keys must be prefixed with the provider name (e.g. <db:code>here.app_id</db:code>).</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QGeoServiceProvider">
<db:title>[virtual] QGeoServiceProvider::~QGeoServiceProvider()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGeoServiceProvider</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoServiceProvider()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the service provider object.</db:para>
</db:section>
<db:section xml:id="availableServiceProviders">
<db:title>[static] QStringList QGeoServiceProvider::availableServiceProviders()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableServiceProviders</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableServiceProviders()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of names of the available service providers, for use with the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> constructors.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last operation that was performed by this class.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QGeoServiceProvider::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last operation that was performed by this class.</db:para>
</db:section>
<db:section xml:id="geocodingError">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::geocodingError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>geocodingError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error geocodingError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last attempt to create a geocoding manager.</db:para>
</db:section>
<db:section xml:id="geocodingErrorString">
<db:title>QString QGeoServiceProvider::geocodingErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>geocodingErrorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString geocodingErrorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last attempt to create a geocoding manager.</db:para>
</db:section>
<db:section xml:id="geocodingFeatures">
<db:title>QGeoServiceProvider::GeocodingFeatures QGeoServiceProvider::geocodingFeatures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::GeocodingFeatures</db:type>
<db:methodname>geocodingFeatures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::GeocodingFeatures geocodingFeatures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the geocoding features supported by the geo service provider.</db:para>
</db:section>
<db:section xml:id="geocodingManager">
<db:title>QGeoCodingManager *QGeoServiceProvider::geocodingManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoCodingManager *</db:type>
<db:methodname>geocodingManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoCodingManager * geocodingManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> made available by the service provider.</db:para>
<db:para>This function will return <db:code>nullptr</db:code> if the service provider does not provide any geocoding services.</db:para>
<db:para>This function will attempt to construct a <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> instance when it is called for the first time. If the attempt is successful the <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> will be cached, otherwise each call of this function will attempt to construct a <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> instance until the construction is successful.</db:para>
<db:para>The <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link> is owned by this <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> and should not be deleted separately. Users should assume that deleting the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> renders the pointer returned by this method invalid.</db:para>
<db:para>After this function has been called, <db:link xlink:href="qgeoserviceprovider.xml#error">error</db:link>() and <db:link xlink:href="qgeoserviceprovider.xml#errorString">errorString</db:link>() will report any errors which occurred during the construction of the <db:link xlink:href="qgeocodingmanager.xml">QGeoCodingManager</db:link>.</db:para>
</db:section>
<db:section xml:id="mappingError">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::mappingError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>mappingError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error mappingError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last attempt to create a mapping manager.</db:para>
</db:section>
<db:section xml:id="mappingErrorString">
<db:title>QString QGeoServiceProvider::mappingErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>mappingErrorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString mappingErrorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last attempt to create a mapping manager.</db:para>
</db:section>
<db:section xml:id="mappingFeatures">
<db:title>QGeoServiceProvider::MappingFeatures QGeoServiceProvider::mappingFeatures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::MappingFeatures</db:type>
<db:methodname>mappingFeatures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::MappingFeatures mappingFeatures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the mapping features supported by the geo service provider.</db:para>
</db:section>
<db:section xml:id="navigationError">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::navigationError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>navigationError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error navigationError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last attempt to create a navigation manager.</db:para>
</db:section>
<db:section xml:id="navigationErrorString">
<db:title>QString QGeoServiceProvider::navigationErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>navigationErrorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString navigationErrorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last attempt to create a navigation manager.</db:para>
</db:section>
<db:section xml:id="navigationFeatures">
<db:title>[since QtLocation 5.11] QGeoServiceProvider::NavigationFeatures QGeoServiceProvider::navigationFeatures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::NavigationFeatures</db:type>
<db:methodname>navigationFeatures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::NavigationFeatures navigationFeatures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the navigation features supported by the geo service provider.</db:para>
<db:para>This function was introduced in QtLocation 5.11.</db:para>
</db:section>
<db:section xml:id="placeManager">
<db:title>QPlaceManager *QGeoServiceProvider::placeManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlaceManager *</db:type>
<db:methodname>placeManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlaceManager * placeManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> made available by the service provider.</db:para>
<db:para>This function will attempt to construct a <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> instance when it is called for the first time. If the attempt is successful the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link> will be cached, otherwise each call of this function will attempt to construct a <db:link xlink:href="qplace.xml">QPlace</db:link> instance until the construction is successful.</db:para>
<db:para>The QGeoPlaceManager is owned by this <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> and should not be deleted separately. Users should assume that deleting the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> renders the pointer returned by this method invalid.</db:para>
<db:para>After this function has been called, <db:link xlink:href="qgeoserviceprovider.xml#error">error</db:link>() and <db:link xlink:href="qgeoserviceprovider.xml#errorString">errorString</db:link>() will report any errors which occurred during the construction of the <db:link xlink:href="qplacemanager.xml">QPlaceManager</db:link>.</db:para>
</db:section>
<db:section xml:id="placesError">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::placesError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>placesError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error placesError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last attempt to create a places manager.</db:para>
</db:section>
<db:section xml:id="placesErrorString">
<db:title>QString QGeoServiceProvider::placesErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>placesErrorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString placesErrorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last attempt to create a places manager.</db:para>
</db:section>
<db:section xml:id="placesFeatures">
<db:title>QGeoServiceProvider::PlacesFeatures QGeoServiceProvider::placesFeatures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::PlacesFeatures</db:type>
<db:methodname>placesFeatures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::PlacesFeatures placesFeatures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the places features supported by the geo service provider.</db:para>
</db:section>
<db:section xml:id="routingError">
<db:title>QGeoServiceProvider::Error QGeoServiceProvider::routingError() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::Error</db:type>
<db:methodname>routingError</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::Error routingError() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an error code describing the error which occurred during the last attempt to create a routing manager.</db:para>
</db:section>
<db:section xml:id="routingErrorString">
<db:title>QString QGeoServiceProvider::routingErrorString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>routingErrorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString routingErrorString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing the error which occurred during the last attempt to create a routing manager.</db:para>
</db:section>
<db:section xml:id="routingFeatures">
<db:title>QGeoServiceProvider::RoutingFeatures QGeoServiceProvider::routingFeatures() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoServiceProvider::RoutingFeatures</db:type>
<db:methodname>routingFeatures</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoServiceProvider::RoutingFeatures routingFeatures() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the routing features supported by the geo service provider.</db:para>
</db:section>
<db:section xml:id="routingManager">
<db:title>QGeoRoutingManager *QGeoServiceProvider::routingManager() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRoutingManager *</db:type>
<db:methodname>routingManager</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRoutingManager * routingManager() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> made available by the service provider.</db:para>
<db:para>This function will return <db:code>nullptr</db:code> if the service provider does not provide any geographic routing services.</db:para>
<db:para>This function will attempt to construct a <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> instance when it is called for the first time. If the attempt is successful the <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> will be cached, otherwise each call of this function will attempt to construct a <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> instance until the construction is successful.</db:para>
<db:para>The <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> is owned by this <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> and should not be deleted separately. Users should assume that deleting the <db:link xlink:href="qgeoserviceprovider.xml">QGeoServiceProvider</db:link> renders the pointer returned by this method invalid.</db:para>
<db:para>After this function has been called, <db:link xlink:href="qgeoserviceprovider.xml#error">error</db:link>() and <db:link xlink:href="qgeoserviceprovider.xml#errorString">errorString</db:link>() will report any errors which occurred during the construction of the <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link>.</db:para>
</db:section>
<db:section xml:id="setAllowExperimental">
<db:title>void QGeoServiceProvider::setAllowExperimental(bool <db:emphasis>allow</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAllowExperimental</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>allow</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAllowExperimental(bool allow)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets whether experimental plugins are considered when locating the correct plugin library for this service provider to <db:code role="parameter">allow</db:code>.</db:para>
<db:para><db:emphasis role="bold">Important:</db:emphasis> this will destroy any existing managers held by this service provider instance. You should be sure not to attempt to use any pointers that you have previously retrieved after calling this method.</db:para>
</db:section>
<db:section xml:id="setLocale">
<db:title>void QGeoServiceProvider::setLocale(const QLocale &amp;<db:emphasis>locale</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setLocale</db:methodname>
<db:methodparam>
<db:type>const QLocale &amp;</db:type>
<db:parameter>locale</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setLocale(const QLocale &amp;locale)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the locale used by this service provider to <db:code role="parameter">locale</db:code>. If the relevant features (see <db:link xlink:href="qgeoserviceprovider.xml#MappingFeature-enum">LocalizedMappingFeature</db:link> etc), this will change the languages, units and other locale-specific attributes of the provider's data.</db:para>
</db:section>
<db:section xml:id="setParameters">
<db:title>void QGeoServiceProvider::setParameters(const QVariantMap &amp;<db:emphasis>parameters</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setParameters</db:methodname>
<db:methodparam>
<db:type>const QVariantMap &amp;</db:type>
<db:parameter>parameters</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setParameters(const QVariantMap &amp;parameters)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the parameters used to construct individual manager classes for this service provider to <db:code role="parameter">parameters</db:code>.</db:para>
<db:para>Before the list of <db:code role="parameter">parameters</db:code> is passed on to the to-be-loaded service provider, the list is filtered to avoid the sharing of provider specific parameters with unrelated service providers. Provider specific parameter keys must be prefixed with the provider name (e.g. <db:code>here.app_id</db:code>).</db:para>
<db:para><db:emphasis role="bold">Important:</db:emphasis> this will destroy any existing managers held by this service provider instance. You should be sure not to attempt to use any pointers that you have previously retrieved after calling this method.</db:para>
</db:section>
</db:section>
</db:article>
