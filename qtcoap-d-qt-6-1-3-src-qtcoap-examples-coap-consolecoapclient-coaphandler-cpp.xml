<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Console CoAP Client Example</db:title>
<db:productname>QtCoap</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt CoAP Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating a simple console application that communicates with a CoAP server.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 Witekio.
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the QtCoap module.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;coaphandler.h&quot;

#include &amp;lt;QDebug&amp;gt;
#include &amp;lt;QLoggingCategory&amp;gt;
#include &amp;lt;QCoapClient&amp;gt;
#include &amp;lt;QCoapReply&amp;gt;
#include &amp;lt;QCoapResourceDiscoveryReply&amp;gt;

Q_LOGGING_CATEGORY(lcCoapClient, &quot;qt.coap.client&quot;)

CoapHandler::CoapHandler(QObject *parent) : QObject(parent)
{
    connect(&amp;amp;m_coapClient, &amp;amp;QCoapClient::finished, this, &amp;amp;CoapHandler::onFinished);
    connect(&amp;amp;m_coapClient, &amp;amp;QCoapClient::error, this, &amp;amp;CoapHandler::onError);
    connect(&amp;amp;m_coapClient, &amp;amp;QCoapClient::responseToMulticastReceived,
            this, &amp;amp;CoapHandler::onResponseToMulticast);
}

bool CoapHandler::runGet(const QUrl &amp;amp;url)
{
    return m_coapClient.get(url);
}

bool CoapHandler::runPost(const QUrl &amp;amp;url)
{
    return m_coapClient.post(url);
}

bool CoapHandler::runPut(const QUrl &amp;amp;url)
{
    return m_coapClient.put(url);
}

bool CoapHandler::runDelete(const QUrl &amp;amp;url)
{
    return m_coapClient.deleteResource(url);
}

bool CoapHandler::runObserve(const QUrl &amp;amp;url)
{
    QCoapReply *observeReply = m_coapClient.observe(url);
    if (!observeReply)
        return false;

    connect(observeReply, &amp;amp;QCoapReply::notified, this, &amp;amp;CoapHandler::onNotified);
    return true;
}

bool CoapHandler::runDiscover(const QUrl &amp;amp;url)
{
    QCoapResourceDiscoveryReply *discoverReply = m_coapClient.discover(url);
    if (!discoverReply)
        return false;

    connect(discoverReply, &amp;amp;QCoapResourceDiscoveryReply::discovered, this, &amp;amp;CoapHandler::onDiscovered);
    return true;
}

void CoapHandler::onFinished(QCoapReply *reply)
{
    if (reply-&amp;gt;errorReceived() == QtCoap::Error::Ok)
        qCInfo(lcCoapClient) &amp;lt;&amp;lt; &quot;Request finished with payload:&quot; &amp;lt;&amp;lt; reply-&amp;gt;readAll();
    else
        qCWarning(lcCoapClient, &quot;Request failed&quot;);

    // Don't forget to remove the reply
    reply-&amp;gt;deleteLater();
}

void CoapHandler::onNotified(QCoapReply *reply, QCoapMessage message)
{
    Q_UNUSED(message)

    // You can alternatively use `message.payload();`
    qCInfo(lcCoapClient) &amp;lt;&amp;lt; &quot;Received Observe notification with payload:&quot; &amp;lt;&amp;lt; reply-&amp;gt;readAll();
}

void CoapHandler::onDiscovered(QCoapResourceDiscoveryReply *reply, QList&amp;lt;QCoapResource&amp;gt; resources)
{
    Q_UNUSED(reply)

    for (const QCoapResource &amp;amp;res : qAsConst(resources))
        qCInfo(lcCoapClient) &amp;lt;&amp;lt; &quot;Discovered resource:&quot; &amp;lt;&amp;lt; res.path() &amp;lt;&amp;lt; res.title();
}

void CoapHandler::onResponseToMulticast(QCoapReply *reply, const QCoapMessage&amp;amp; message,
                                        const QHostAddress &amp;amp;sender)
{
    if (reply-&amp;gt;errorReceived() == QtCoap::Error::Ok)
        qCInfo(lcCoapClient) &amp;lt;&amp;lt; &quot;Got a response for multicast request from:&quot; &amp;lt;&amp;lt; sender.toString()
                             &amp;lt;&amp;lt; &quot;with payload:&quot; &amp;lt;&amp;lt; message.payload();
    else
        qCWarning(lcCoapClient, &quot;Multicast request failed&quot;);
}

void CoapHandler::onError(QCoapReply *reply, QtCoap::Error error)
{
    if (reply)
        qCInfo(lcCoapClient) &amp;lt;&amp;lt; &quot;CoAP reply error:&quot; &amp;lt;&amp;lt; reply-&amp;gt;errorString();
    else
        qCWarning(lcCoapClient) &amp;lt;&amp;lt; &quot;CoAP error:&quot; &amp;lt;&amp;lt; error;
}

</db:programlisting>
</db:article>
