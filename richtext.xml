<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Rich Text Processing</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.14.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="richtext-structure.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Rich Text Document Structure"/></db:extendedlink>
<db:abstract>
<db:para>An overview of Qt's rich text processing, editing and display features.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Scribe framework provides a set of classes for reading and manipulating structured rich text documents. Unlike previous rich text support in Qt, the new classes are centered around the QTextDocument class rather than raw textual information. This enables the developer to create and modify structured rich text documents without having to prepare content in an intermediate markup format.</db:para>
<db:para>The information within a document can be accessed via two complementary interfaces: A cursor-based interface is used for editing, and a read-only hierarchical interface provides a high level overview of the document structure. The main advantage of the cursor-based interface is that the text can be edited using operations that mimic a user's interaction with an editor, without losing the underlying structure of the document. The read-only hierarchical interface is most useful when performing operations such as searching and document export.</db:para>
<db:para>This document is divided up into chapters for convenient reference:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="richtext-structure.xml">Rich Text Document Structure</db:link> outlines the different kinds of elements in a QTextDocument, and describes how they are arranged in a document structure.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext-cursor.xml">The QTextCursor Interface</db:link> explains how rich text documents can be edited using the cursor-based interface.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext-layouts.xml">Document Layouts</db:link> briefly explains the role of document layouts.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext-common-tasks.xml">Common Rich Text Editing Tasks</db:link> examines some common tasks that involve reading or manipulating rich text documents.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext-advanced-processing.xml">Advanced Rich Text Processing</db:link> examines advanced rich text editing tasks.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="richtext-html-subset.xml">Supported HTML Subset</db:link> lists the HTML tags supported by QTextDocument.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="rich-text-processing-apis">
<db:title>Rich Text Processing APIs</db:title>
<db:para>Qt provides an extensive collection of classes for parsing, rendering manipulating and editing rich text.</db:para>
</db:section>
</db:article>
