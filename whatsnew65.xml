<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>What's New in Qt 6.5</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the new features in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="new-and-restored-modules-in-qt-6-5">
<db:title>New and Restored Modules in Qt 6.5</db:title>
<db:para>Qt 6.5 adds the following modules and tools:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickeffectmaker-index.xml">Qt Quick Effect Maker</db:link> - A tool to create high-performance shader effects for Qt Quick.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick-effects-qmlmodule.xml">Qt Quick Effects</db:link> - A module containing <db:link xlink:href="qml-qtquick-effects-multieffect.xml">MultiEffect</db:link>, for applying one or more simple graphical effects on a Qt Quick <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquick3dphysics-index.xml">Qt Quick 3D Physics</db:link> - A physics engine for use with Qt Quick 3D. This module is no longer in technical preview.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqmlcore-index.xml">Qt QML Core</db:link> - A module that exposes various <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> APIs to QML.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="new-and-restored-modules-in-technical-preview">
<db:title>New and Restored Modules in Technical Preview</db:title>
<db:note>
<db:para>API and ABI stability is not guaranteed.</db:para>
</db:note>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtlocation-index.xml">Qt Location</db:link>'s <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> renders 2D maps into a Qt Quick application. <db:link xlink:href="qml-qtlocation-mapview.xml">MapView</db:link> includes <db:link xlink:href="qtquickhandlers-index.xml">Qt Quick Input Handlers</db:link> to implement the typical interactive features (zoom, pan, tilt).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtgrpc-index.xml">Qt GRPC</db:link> supports communicating with gRPC services using classes generated based on service descriptions from protobuf .proto-specifications.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtprotobuf-index.xml">Qt Protobuf</db:link> supports generating, serializing, and deserializing Qt-based classes from protobuf .proto-specifications.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="new-features-in-qt-6-5">
<db:title>New Features in Qt 6.5</db:title>
<db:section xml:id="qt-core-module">
<db:title>Qt Core Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> can now package a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> and, when relevant, an offset in a lightweight time representation that unifies the various APIs of <db:link xlink:href="qdatetime.xml">QDateTime</db:link> and <db:link xlink:href="qdate.xml">QDate</db:link> that took either a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> or a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> and offset.</db:para>
</db:listitem>
<db:listitem>
<db:para>Introduced <db:link xlink:href="permissions.xml">application permissions</db:link> API to allow applications to check or request permissions for features that require user consent before use.</db:para>
</db:listitem>
<db:listitem>
<db:para>New cross-platform tracing backend in Common Trace Format (CTF).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qbindable.xml">QBindable</db:link> can now be constructed from any property with a NOTIFY signal. This lets you integrate existing, non-bindable properties with <db:link xlink:href="bindableproperties.xml">bindable properties</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qt-generate-deploy-app-script.xml">qt_generate_deploy_app_script</db:link> CMake function preferably accepts an argument called OUTPUT_SCRIPT now. Passing the old FILENAME_VARIABLE is deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-gui-module">
<db:title>Qt GUI Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Reintroduced classes <db:link xlink:href="qwindowsmimeconverter.xml">QWindowsMimeConverter</db:link> and <db:link xlink:href="qutimimeconverter.xml">QUtiMimeConverter</db:link> for handling drag'n'drop and clipboard data in platform specific formats on Windows, macOS, and iOS.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvulkaninstance.xml">QVulkanInstance</db:link> now enables Vulkan Portability physical devices by default. This is required to be operational with newer MoltenVK versions on Apple platforms. Added a NoPortabilityDrivers flag that lets you opt out from this.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Vulkan rendering infrastructure is now using VK_EXT_debug_utils instead of the deprecated VK_EXT_debug_report and VK_EXT_debug_marker.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtextlayout.xml#glyphRuns">QTextLayout::glyphRuns</db:link>() can now return the string index corresponding to each glyph when this is requested. Made available through the new function <db:link xlink:href="qglyphrun.xml#stringIndexes">QGlyphRun::stringIndexes</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Checkbox list items can now be read and written in HTML as well as Markdown, including conversions.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qguiapplication.xml#setBadgeNumber">QGuiApplication::setBadgeNumber</db:link>() to provide feedback to the user about the number of unread messages or similar. The badge will be overlaid the application's icon in the Dock on macOS, the home screen icon on iOS, or the task bar on Windows.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-module">
<db:title>Qt Quick Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> got support for editing cells using an edit delegate.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> got support for resizing rows and columns using the mouse.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> got support for setting row and column sizes explicitly.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> got a new signal layoutChanged(). This signal can be used to, for example, reposition overlay items.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> got support for doing multi-selections.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for specifying separate RGB and alpha blend factors in a <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The Qt Quick scenegraph is now automatically using persistent, disk-based caching of graphics pipelines or the intermediate format shader bytecode, depending on the platform and the 3D graphics API in use. This is expected to reduce the time spent on creating the graphics pipeline in subsequent runs of the application. In addition, <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> provides explicit control over if and where this data is written out and loaded from. This enables advanced use cases such as shipping a pre-seeded cache file with an application or device, which also accelerates first-time startup.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link> has new <db:link xlink:href="qml-qtquick-pinchhandler.xml#scaleAxis-prop">scaleAxis</db:link> and <db:link xlink:href="qml-qtquick-pinchhandler.xml#rotationAxis-prop">rotationAxis</db:link> grouped properties, offering several new values, including the activeValue property which is new in all the handler axis groups. It also got the <db:link xlink:href="qml-qtquick-pinchhandler.xml#activeTranslation-prop">activeTranslation</db:link> and <db:link xlink:href="qml-qtquick-pinchhandler.xml#persistentTranslation-prop">persistentTranslation</db:link> properties that <db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link> already had.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-draghandler.xml">DragHandler</db:link>'s xAxis and yAxis have new <db:link xlink:href="qml-qtquick-draghandler.xml#xAxis.activeValue-prop">activeValue</db:link> properties.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-pinchhandler.xml">PinchHandler</db:link>'s <db:link xlink:href="qml-qtquick-pinchhandler.xml#activeScale-prop">activeScale</db:link> (which was previously called scale) is no longer restricted to the range between <db:link xlink:href="qml-qtquick-pinchhandler.xml#minimumScale-prop" role="deprecated">minimumScale</db:link> and <db:link xlink:href="qml-qtquick-pinchhandler.xml#maximumScale-prop" role="deprecated">maximumScale</db:link>: these limits apply only to <db:link xlink:href="qml-qtquick-pinchhandler.xml#persistentScale-prop">persistentScale</db:link>. Likewise, <db:link xlink:href="qml-qtquick-pinchhandler.xml#activeRotation-prop">activeRotation</db:link> (previously rotation) is no longer restricted to the range between <db:link xlink:href="qml-qtquick-pinchhandler.xml#minimumRotation-prop" role="deprecated">minimumRotation</db:link> and <db:link xlink:href="qml-qtquick-pinchhandler.xml#maximumRotation-prop" role="deprecated">maximumRotation</db:link>. These limits are applied the same way for native touchpad pinch gestures as on touchscreens.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-taphandler.xml#exclusiveSignals-prop">TapHandler::exclusiveSignals</db:link> now lets you make the <db:link xlink:href="qml-qtquick-taphandler.xml#singleTapped-signal">singleTapped</db:link> and <db:link xlink:href="qml-qtquick-taphandler.xml#doubleTapped-signal">doubleTapped</db:link> signals exclusive.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-labs-animation-module">
<db:title>Qt Labs Animation Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml">BoundaryRule</db:link> now has a <db:link xlink:href="qml-qt-labs-animation-boundaryrule.xml#returnedToBounds-signal">returnedToBounds</db:link> signal.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-controls-module">
<db:title>Qt Quick Controls Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-treeviewdelegate.xml">TreeViewDelegate</db:link> got support editing tree nodes</db:para>
</db:listitem>
<db:listitem>
<db:para>The Material style was updated to <db:link xlink:href="https://m3.material.io">Material 3</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Several controls received visual updates, so it is recommended to check how your application looks and adapt it accordingly:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-applicationwindow.xml">ApplicationWindow</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-delaybutton.xml">DelayButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-dialog.xml">Dialog</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-drawer.xml">Drawer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-menu.xml">Menu</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-popup.xml">Popup</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-rangeslider.xml">RangeSlider</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-roundbutton.xml">RoundButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-slider.xml">Slider</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-spinbox.xml">SpinBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>Some new API was added:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-material.xml#material-containerstyle-attached-prop">Material.containerStyle</db:link> controls the style of the container used by the target control. It can be attached to any window or item, but only <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> and <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> support it by default.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtquickcontrols-material.xml#material-roundedscale-attached-prop">Material.roundedScale</db:link> controls the radius of rounded corners used on the target control. It can be attached to any window or item, but only the following controls support it by default:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-dialog.xml">Dialog</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-dialogbuttonbox.xml">DialogButtonBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-drawer.xml">Drawer</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-menu.xml">Menu</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-popup.xml">Popup</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>The iOS style was finished</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The new controls that were implemented for the iOS style for 6.5 are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-busyindicator.xml">BusyIndicator</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-delaybutton.xml">DelayButton</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qt-labs-platform-dialog.xml">Dialog</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-dialogbuttonbox.xml">DialogButtonBox</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-horizontalheaderview.xml">HorizontalHeaderView</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-selectionrectangle.xml">SelectionRectangle</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-tooltip.xml">ToolTip</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-toolseparator.xml">ToolSeparator</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick-controls-verticalheaderview.xml">VerticalHeaderView</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-test-module">
<db:title>Qt Test Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qtest.xml#currentTestResolved">QTest::currentTestResolved</db:link>() which returns true if the test has failed or skipped. This can replace <db:link xlink:href="qtest.xml#currentTestFailed">QTest::currentTestFailed</db:link>() as the condition to test on return from a helper function.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtest.xml#mouseRelease">QTest::mouseRelease</db:link>() and <db:link xlink:href="qtest.xml#mouseClick">mouseClick</db:link>() can now be used to test double-clicks, by specifying a realistic timestamp delay, in case you need to check intermediate state between the events. <db:link xlink:href="qtest.xml#mouseDClick">mouseDClick</db:link>() is still more convenient otherwise.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-widgets-module">
<db:title>Qt Widgets Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qkeysequenceedit.xml">QKeySequenceEdit</db:link> got two new properties: <db:link xlink:href="qkeysequenceedit.xml#maximumSequenceLength-prop">maximumSequenceLength</db:link> allows applications to control the length of a key sequence. <db:link xlink:href="qkeysequenceedit.xml#finishingKeyCombinations-prop">finishingKeyCombinations</db:link> defines key combinations that end the recording.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added stereoscopic rendering support to <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link>, applicable also to any <db:link xlink:href="qgraphicsview.xml">QGraphicsView</db:link> backed by a <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> viewport. Unlike <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link>, or the now-removed QGLWidget in Qt 5 and 4, <db:link xlink:href="qopenglwidget.xml">QOpenGLWidget</db:link> needs explicit support for this with supporting APIs in place, because applications do not directly render to the native window in this case, and therefore do not have the same control over the active draw buffers as they have with <db:link xlink:href="qopenglwindow.xml">QOpenGLWindow</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-positioning-module">
<db:title>Qt Positioning Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qml-qtpositioning-satellitesource.xml">SatelliteSource</db:link> - a QML API for <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-serial-bus-module">
<db:title>Qt Serial Bus Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link>, <db:link xlink:href="qcanmessagedescription.xml">QCanMessageDescription</db:link> and <db:link xlink:href="qcanuniqueiddescription.xml">QCanUniqueIdDescription</db:link> classes. These classes are used to provide a set of rules to encode or decode CAN bus messages.</db:para>
</db:listitem>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link> class. This class can be used to decode the received <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> into a map of key-value pairs and compose a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> out of a map of key-value pairs.</db:para>
</db:listitem>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qcandbcfileparser.xml">QCanDbcFileParser</db:link> class. This class is used to parse DBC files and generate message descriptions, which can later be used in <db:link xlink:href="qcanframeprocessor.xml">QCanFrameProcessor</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All new classes are experimental and are subject to change.</db:para>
</db:section>
<db:section xml:id="qt-network-module">
<db:title>Qt Network Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qhttp1configuration.xml">QHttp1Configuration</db:link>. The class can be used to configure the maximum number of connections used per host when using HTTP 1 (default: 6).</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> on Qt for WebAssembly gained the UseCredentialsAttribute attribute, enabling withCredentials for the underlying <db:link xlink:href="qml-qtqml-xmlhttprequest.xml">XMLHttpRequest</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-qml-module">
<db:title>Qt QML Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added API to <db:link xlink:href="qqmlapplicationengine.xml">QQmlApplicationEngine</db:link> and <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> to load/create QML elements via their module URI and type-name. In contrast to the URL based functions, this also works with C++ types and inline components.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qqmllistproperty.xml">QQmlListProperty</db:link> properties now behave more like arrays, gaining support for methods like map(), reduce() and forEach(). The same holds for other sequence types, like <db:link xlink:href="qlist.xml">QList</db:link>&lt;int&gt; and similar.</db:para>
</db:listitem>
<db:listitem>
<db:para>Extended the <db:link xlink:href="qtqml-qml-type-compiler.xml">qmltc</db:link> to support more qml constructs, notably translation bindings, inline components, singletons, and signal handlers for C++-defined signals.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qtqml-qml-script-compiler.xml">QML script compiler</db:link> can handle additional constructs. In particular:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>console.log() and friends</db:para>
</db:listitem>
<db:listitem>
<db:para>let and const</db:para>
</db:listitem>
<db:listitem>
<db:para>qsTr() and friends</db:para>
</db:listitem>
<db:listitem>
<db:para>arg() for strings</db:para>
</db:listitem>
<db:listitem>
<db:para>all the remaining bitwise and shift operators</db:para>
</db:listitem>
<db:listitem>
<db:para>the exponentiation operator</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmldiskcache.xml">The QML Disk Cache</db:link> can be controlled in a more fine-grained way using the new environment variable QML_DISK_CACHE.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added new public CMake API:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Introduced a <db:link xlink:href="qt-policy.xml">Qt CMake policy</db:link> to set a better default for the resource prefix. If <db:link xlink:href="qt-cmake-policy-qtp0001.xml">QTP0001</db:link> policy is set to NEW, the QML engine will always be able to find your QML modules in the resource file system.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qt-generate-deploy-qml-app-script.xml">qt_generate_deploy_qml_app_script</db:link> CMake function preferably accepts an argument called OUTPUT_SCRIPT now. Passing the old FILENAME_VARIABLE is deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-quick-3d-module">
<db:title>Qt Quick 3D Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added automatic level of detail (LOD) support for models. This allows generating simplified versions of the meshes during asset import and then automatically picking the appropriate level when rendering.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added explicit level of detail (LOD) support to control the opacity of models based on the camera distance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-helpers-extendedsceneenvironment.xml">ExtendedSceneEnvironment</db:link>, with built-in effects for depth of field, color grading, glow, vignette, lens flare, and others. These effects are performed together, increasing efficiency compared to individual, stand-alone post-processing effects, each requiring one or more render passes.</db:para>
</db:listitem>
<db:listitem>
<db:para>Enhanced <db:link xlink:href="qml-qtquick3d-helpers-debugview.xml">DebugView</db:link> with rendering statistics, the list of active mesh and texture assets, and live render pass information, as well as controls to interactively toggle settings, such as wireframe mode and material overrides from <db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-debugsettings.xml">DebugSettings</db:link>, available via <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link>, allowing programmatic control over settings such as wireframe mode and material overrides to only render certain aspects of physically based materials.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtquick3d-helpers-infinitegrid.xml">InfiniteGrid</db:link>, implementing an infinite grid in the horizontal plane with fade out.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added built-in, simple fog support, available via <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link>. When enabled, this applies a depth or height fog effect when rendering the models in the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>Improved picking when instanced rendering is used.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added vertex color support for <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link> and <db:link xlink:href="qml-qtquick3d-specularglossymaterial.xml">SpecularGlossyMaterial</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Reflection probe: added support for using a provided cubemap texture instead of rendering the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>Post-processing effects were enhanced to properly react to changes in shader source file URIs at run time.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added persistent, disk-based caching of runtime-generated material shader data. This is expected to improve application startup and view change times.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-webview-module">
<db:title>Qt WebView Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added <db:link xlink:href="qml-qtwebview-webviewsettings.xml">WebViewSettings</db:link> to configure some of the common <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> functionality.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="qt-multimedia-module">
<db:title>Qt Multimedia Module</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The ffmpeg media backend, being a technical preview in 6.4, becomes the default for macOS, Windows, Android, and Linux except for Yocto distribution. The native backends are still available with limited support.</db:para>
</db:listitem>
<db:listitem>
<db:para>Introduced <db:link xlink:href="qscreencapture.xml">QScreenCapture</db:link> class that is a new type of video input. It's possible to direct video from <db:link xlink:href="qscreencapture.xml">QScreenCapture</db:link> through <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> to outputs, e.g. <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> or <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link>. The screen capture functionality is available only with the ffmpeg media backend.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="platform-changes">
<db:title>Platform Changes</db:title>
<db:section xml:id="webassembly">
<db:title>WebAssembly</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added binary package with multithreading enabled to Qt Online Installer.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for the <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/File_System_Access_API">File System Access</db:link> API. File dialog calls such as <db:link xlink:href="qfiledialog.xml#getOpenFileContent">QFileDialog::getOpenFileContent</db:link>() and <db:link xlink:href="qfiledialog.xml#saveFileContent">QFileDialog::saveFileContent</db:link>() will now use this API, if supported by the browser.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added support for the <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/API/Local_Font_Access_API">Local Font Access</db:link> API. Qt will now use local fonts on browsers which support this API.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added tech preview of video playback and camera support to Qt Multimedia.</db:para>
</db:listitem>
<db:listitem>
<db:para>Added configure option for WebAssembly SIMD: -feature-wasm-simd128</db:para>
</db:listitem>
<db:listitem>
<db:para>Added configure option for WebAssembly exceptions: -feature-wasm-exceptions</db:para>
</db:listitem>
<db:listitem>
<db:para>Published <db:link xlink:href="https://git.qt.io/mosorvig/qt-web-utils">Qt Web Utils</db:link> with utility functions and Qt on web usage examples.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtest.xml">QTest</db:link> for WebAssembly now uses emrun by default. A specialized script for WebAssembly drives the execution of automatic tests.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="desktop-platforms">
<db:title>Desktop Platforms</db:title>
<db:section xml:id="windows">
<db:title>Windows</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The environment variable QT_WIN_DEBUG_CONSOLE can be set to see stdout/stderr messageges in a console window for GUI applications that are started from the command line. Set it to new or attach.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="macos">
<db:title>macOS</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added native backend for <db:link xlink:href="qmessagebox.xml">QMessageBox</db:link> and <db:link xlink:href="qerrormessage.xml">QErrorMessage</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="wayland-client-on-linux">
<db:title>Wayland Client on Linux</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Now supports fractional_scale_v1 protocol for compositors that suggest fractional scale factors for the client.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="mobile-platforms">
<db:title>Mobile Platforms</db:title>
<db:section xml:id="android">
<db:title>Android</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Updated Gradle to 8.0 and the Android Gradle Plugin (AGP) to 7.4.1 (requires JDK 11 or above).</db:para>
</db:listitem>
<db:listitem>
<db:para>Updated NDK to r25b (25.1.8937393).</db:para>
</db:listitem>
<db:listitem>
<db:para>The list of supported versions is now Android 8.0 (API 26) or later.</db:para>
</db:listitem>
<db:listitem>
<db:para>Bump the minimum platform build sdk version to 33 (QT_ANDROID_API_VERSION).</db:para>
</db:listitem>
<db:listitem>
<db:para>Support more operations on content scheme URIs with Qt file/dir facilities.</db:para>
</db:listitem>
<db:listitem>
<db:para>Fixes and documentation updates for <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link> under Android Scoped Storage.</db:para>
</db:listitem>
<db:listitem>
<db:para>Print Qt JNI exceptions from Qt and not the Android System.</db:para>
</db:listitem>
<db:listitem>
<db:para>Fixed support for APK Signature Scheme v2.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="ios">
<db:title>iOS</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Added native implemementation for <db:link xlink:href="qcolordialog.xml">QColorDialog</db:link> and <db:link xlink:href="qfontdialog.xml">QFontDialog</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="embedded-platforms">
<db:title>Embedded Platforms</db:title>
<db:section xml:id="boot-to-qt">
<db:title>Boot to Qt</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Boot to Qt stack was updated to use yocto 4.1.2 (langdale).</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for macOS host using Docker-based toolchains.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="supported-platforms.xml#support-levels-for-target-hardware">Support Levels for Target Hardware</db:link> were updated and there are now multiple levels of support that apply across specific hardware and OS combinations.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:section>
<db:section xml:id="list-of-api-changes">
<db:title>List of API Changes</db:title>
<db:para>These pages contain an overview of API changes in Qt 6.5:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="newclasses65.xml">New Classes and Functions in Qt 6.5</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="obsoleteclasses.xml">Obsolete Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
