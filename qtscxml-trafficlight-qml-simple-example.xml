<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SCXML Traffic Light (Simple, QML)</db:title>
<db:productname>QtScxml</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt SCXML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A Qt Quick application that uses a compiled state machine to implement a simplified traffic light.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/trafficlight.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Traffic Light</db:emphasis> demonstrates how to connect to the active properties of a state in a state machine that is compiled to a class.</db:para>
<db:para>The UI is created using Qt Quick.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="compiling-the-state-machine">
<db:title>Compiling the State Machine</db:title>
<db:para>We link against the Qt SCXML module by adding the following lines to the example's build files.</db:para>
<db:section xml:id="pro-when-using-qmake">
<db:title><db:emphasis>.pro</db:emphasis> when using qmake:</db:title>
<db:programlisting language="cpp">QT += qml scxml
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">STATECHARTS = ../trafficlight-common/statemachine.scxml
</db:programlisting>
</db:section>
<db:section xml:id="cmakelists-txt-when-using-cmake">
<db:title><db:emphasis>CMakeLists.txt</db:emphasis> when using cmake:</db:title>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS Core Gui Qml Scxml)
target_link_libraries(trafficlight-qml-static PRIVATE
    Qt6::Core
    Qt6::Gui
    Qt6::Qml
    Qt6::Scxml
)
</db:programlisting>
<db:para>We then specify the state machine to compile:</db:para>
<db:programlisting language="cpp">qt6_add_statecharts(trafficlight-qml-static
    ../trafficlight-common/statemachine.scxml
)
</db:programlisting>
<db:para>The statechart directives <db:emphasis>STATECHARTS</db:emphasis> or <db:emphasis>qt6_add_statecharts</db:emphasis> invoke the Qt SCXML Compiler, <db:code>qscxmlc</db:code>, which is run automatically to generate <db:emphasis>statemachine.h</db:emphasis> and <db:emphasis>statemachine.cpp</db:emphasis>, which are then added appropriately as headers and sources for compilation.</db:para>
</db:section>
</db:section>
<db:section xml:id="instantiating-the-state-machine">
<db:title>Instantiating the State Machine</db:title>
<db:para>We instantiate the state machine as follows:</db:para>
<db:programlisting language="cpp">    TrafficLightStateMachine {
        id: stateMachine
        running: true
    }
</db:programlisting>
</db:section>
<db:section xml:id="connecting-to-states">
<db:title>Connecting to States</db:title>
<db:para>In the SCXML file, we specify states for each light: red, yellow, and green. In the <db:code>&lt;onentry&gt;</db:code> element, we specify the event to send when entering the state and the delay in seconds before sending the event. In the <db:code>&lt;transition&gt;</db:code> element, we specify the event that triggers the transition to the state specified by the <db:code>target</db:code> attribute:</db:para>
<db:programlisting language="cpp">        &amp;lt;state id=&quot;red&quot;&amp;gt;
            &amp;lt;onentry&amp;gt;
                &amp;lt;send event=&quot;startGoingGreen&quot; delay=&quot;3s&quot;/&amp;gt;
            &amp;lt;/onentry&amp;gt;
            &amp;lt;transition event=&quot;startGoingGreen&quot; target=&quot;redGoingGreen&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;

        &amp;lt;state id=&quot;yellow&quot; initial=&quot;greenGoingRed&quot;&amp;gt;
            &amp;lt;state id=&quot;redGoingGreen&quot;&amp;gt;
                &amp;lt;onentry&amp;gt;
                    &amp;lt;send event=&quot;goGreen&quot; delay=&quot;1s&quot;/&amp;gt;
                &amp;lt;/onentry&amp;gt;
                &amp;lt;transition event=&quot;goGreen&quot; target=&quot;green&quot;/&amp;gt;
            &amp;lt;/state&amp;gt;

            &amp;lt;state id=&quot;greenGoingRed&quot;&amp;gt;
                &amp;lt;onentry&amp;gt;
                    &amp;lt;send event=&quot;goRed&quot; delay=&quot;1s&quot;/&amp;gt;
                &amp;lt;/onentry&amp;gt;
                &amp;lt;transition event=&quot;goRed&quot; target=&quot;red&quot;/&amp;gt;
            &amp;lt;/state&amp;gt;
        &amp;lt;/state&amp;gt;

        &amp;lt;state id=&quot;green&quot;&amp;gt;
            &amp;lt;onentry&amp;gt;
                &amp;lt;send event=&quot;startGoingRed&quot; delay=&quot;3s&quot;/&amp;gt;
            &amp;lt;/onentry&amp;gt;
            &amp;lt;transition event=&quot;startGoingRed&quot; target=&quot;greenGoingRed&quot;/&amp;gt;
        &amp;lt;/state&amp;gt;
</db:programlisting>
<db:para>We connect to the states as follows:</db:para>
<db:programlisting language="cpp">        Light {
            anchors.top: parent.top
            anchors.horizontalCenter: parent.horizontalCenter
            color: &quot;red&quot;
            visible: stateMachine.red || stateMachine.redGoingGreen
        }

        Light {
            anchors.centerIn: parent
            color: &quot;yellow&quot;
            visible: stateMachine.yellow || stateMachine.blinking
        }

        Light {
            anchors.bottom: parent.bottom
            anchors.horizontalCenter: parent.horizontalCenter
            color: &quot;green&quot;
            visible: stateMachine.green
        }
    }
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtscxml.git/tree/examples/scxml/trafficlight-qml-simple?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
