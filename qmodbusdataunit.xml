<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QModbusDataUnit Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link> is a container class representing single bit and <db:code>16</db:code> bit word entries in the Modbus register.</db:para>
<db:para>This class was introduced in Qt 5.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QModbusDataUnit</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link> can be used for read and write operations. The entries are addressed via <db:link xlink:href="qmodbusdataunit.xml#startAddress">startAddress</db:link>() and the <db:link xlink:href="qmodbusdataunit.xml#valueCount">valueCount</db:link>() number of contiguous entries. <db:link xlink:href="qmodbusdataunit.xml#registerType">registerType</db:link>() determines which register is used for the operations. Note that some registers are read-only registers.</db:para>
<db:para>The actual <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>() are either single bit or <db:code>16</db:code> bit based. <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::DiscreteInputs</db:link> and <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::Coils</db:link> only accept single bits. Therefore <db:code>0</db:code> is interpreted as <db:code>0</db:code> and anything else <db:code>1</db:code>.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="RegisterType-enum">
<db:title>enum QModbusDataUnit::RegisterType</db:title>
<db:para>This enum describes all supported register types.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Set by the default constructor, do not use.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:emphasis>::DiscreteInputs</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This type of data can be provided by an I/O system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:emphasis>::Coils</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>This type of data can be alterable by an application program.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:emphasis>::InputRegisters</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>This type of data can be provided by an I/O system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link></db:emphasis>::HoldingRegisters</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>This type of data can be alterable by an application program.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QModbusDataUnit">
<db:title>[noexcept] QModbusDataUnit::QModbusDataUnit()</db:title>
<db:para>Constructs an empty, invalid <db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link>. Start address is set to <db:code>-1</db:code> and the <db:link xlink:href="qmodbusdataunit.xml#registerType">registerType</db:link> is set to <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::Invalid</db:link>.</db:para>
</db:section>
<db:section xml:id="QModbusDataUnit-1">
<db:title>[explicit] QModbusDataUnit::QModbusDataUnit(QModbusDataUnit::RegisterType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Constructs a unit of data for register <db:code role="parameter">type</db:code>. Start address is set to <db:code>0</db:code>, data range and data values are empty.</db:para>
</db:section>
<db:section xml:id="QModbusDataUnit-2">
<db:title>QModbusDataUnit::QModbusDataUnit(QModbusDataUnit::RegisterType <db:emphasis>type</db:emphasis>, int <db:emphasis>address</db:emphasis>, const QVector&lt;quint16&gt; &amp;<db:emphasis>data</db:emphasis>)</db:title>
<db:para>Constructs a unit of data for register<db:code role="parameter">type</db:code>. Start address of the data is set to <db:code role="parameter">address</db:code> and the unit's values to <db:code role="parameter">data</db:code>. The value count is implied by the <db:code role="parameter">data</db:code> size.</db:para>
</db:section>
<db:section xml:id="QModbusDataUnit-3">
<db:title>QModbusDataUnit::QModbusDataUnit(QModbusDataUnit::RegisterType <db:emphasis>type</db:emphasis>, int <db:emphasis>address</db:emphasis>, quint16 <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Constructs a unit of data for register<db:code role="parameter">type</db:code>. Start address of the data is set to <db:code role="parameter">address</db:code> and the size of the unit to <db:code role="parameter">size</db:code>. The entries of <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>() are initialized with <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QModbusDataUnit::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:code>QModbusDataUnit</db:code> is valid; otherwise <db:code>false</db:code>. A <db:code>QModbusDataUnit</db:code> is considered valid if the <db:link xlink:href="qmodbusdataunit.xml#registerType">registerType</db:link>() is not <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::Invalid</db:link> and the <db:link xlink:href="qmodbusdataunit.xml#startAddress">startAddress</db:link>() is greater than or equal to <db:code>0</db:code>.</db:para>
</db:section>
<db:section xml:id="registerType">
<db:title>QModbusDataUnit::RegisterType QModbusDataUnit::registerType() const</db:title>
<db:para>Returns the type of the register.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#setRegisterType">setRegisterType</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::RegisterType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRegisterType">
<db:title>void QModbusDataUnit::setRegisterType(QModbusDataUnit::RegisterType <db:emphasis>type</db:emphasis>)</db:title>
<db:para>Sets the register <db:code role="parameter">type</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#registerType">registerType</db:link>()</db:member>
<db:member><db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::RegisterType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartAddress">
<db:title>void QModbusDataUnit::setStartAddress(int <db:emphasis>address</db:emphasis>)</db:title>
<db:para>Sets the start <db:code role="parameter">address</db:code> of the data unit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#startAddress">startAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValue">
<db:title>void QModbusDataUnit::setValue(int <db:emphasis>index</db:emphasis>, quint16 <db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the register at position <db:code role="parameter">index</db:code> to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#value">value</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValueCount">
<db:title>void QModbusDataUnit::setValueCount(uint <db:emphasis>newCount</db:emphasis>)</db:title>
<db:para>Sets the size of the requested register's data block to <db:code role="parameter">newCount</db:code>.</db:para>
<db:para>This may be different from <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>() size as this function is used to indicated the size of a data request. Only once the data request has been processed <db:link xlink:href="qmodbusdataunit.xml#valueCount">valueCount</db:link>() is equal to the size of <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#valueCount">valueCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setValues">
<db:title>void QModbusDataUnit::setValues(const QVector&lt;quint16&gt; &amp;<db:emphasis>values</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">values</db:code> of the data unit. <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::DiscreteInputs</db:link> and <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::Coils</db:link> tables only accept single bit value, so <db:code>0</db:code> is interpreted as <db:code>0</db:code> and anything else as <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startAddress">
<db:title>int QModbusDataUnit::startAddress() const</db:title>
<db:para>Returns the start address of data unit in the register.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#setStartAddress">setStartAddress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>quint16 QModbusDataUnit::value(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Return the value at position <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#setValue">setValue</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="valueCount">
<db:title>uint QModbusDataUnit::valueCount() const</db:title>
<db:para>Returns the size of the requested register's data block or the size of data read from the device.</db:para>
<db:para>This function may not always return a count that equals <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>() size. Since this class is used to request data from the remote data register, the valueCount() can be used to indicate the size of the requested register's data block. Once the request has been processed, the valueCount() is equal to the size of <db:link xlink:href="qmodbusdataunit.xml#values">values</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#setValueCount">setValueCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="values">
<db:title>QVector&lt;quint16&gt; QModbusDataUnit::values() const</db:title>
<db:para>Returns the data in the data unit. <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::DiscreteInputs</db:link> and <db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::Coils</db:link> tables only accept single bit value, so <db:code>0</db:code> is interpreted as <db:code>0</db:code> and anything else as <db:code>1</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmodbusdataunit.xml#setValues">setValues</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="QModbusDataUnitMap-typedef">
<db:title>[since 5.8] QModbusDataUnitMap</db:title>
<db:para>Synonym for <db:link xlink:href="qmap.xml">QMap</db:link>&lt;<db:link xlink:href="qmodbusdataunit.xml#RegisterType-enum">QModbusDataUnit::RegisterType</db:link>, <db:link xlink:href="qmodbusdataunit.xml">QModbusDataUnit</db:link>&gt;.</db:para>
<db:para>This typedef was introduced in Qt 5.8.</db:para>
</db:section>
</db:section>
</db:article>
