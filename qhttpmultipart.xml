<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpMultiPart Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> class resembles a MIME multipart message to be sent over HTTP.</db:para>
<db:para>This class was introduced in Qt 4.8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpMultiPart</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.8</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QHttpMultiPart is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> resembles a MIME multipart message, as described in RFC 2046, which is to be sent over HTTP. A multipart message consists of an arbitrary number of body parts (see <db:link xlink:href="qhttppart.xml">QHttpPart</db:link>), which are separated by a unique boundary. The boundary of the <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> is constructed with the string &quot;boundary_.oOo._&quot; followed by random characters, and provides enough uniqueness to make sure it does not occur inside the parts itself. If desired, the boundary can still be set via <db:link xlink:href="qhttpmultipart.xml#setBoundary">setBoundary</db:link>().</db:para>
<db:para>As an example, consider the following code snippet, which constructs a multipart message containing a text part followed by an image part:</db:para>
<db:programlisting language="cpp">QHttpMultiPart *multiPart = new QHttpMultiPart(QHttpMultiPart::FormDataType);

QHttpPart textPart;
textPart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(&quot;form-data; name=\&quot;text\&quot;&quot;));
textPart.setBody(&quot;my text&quot;);

QHttpPart imagePart;
imagePart.setHeader(QNetworkRequest::ContentTypeHeader, QVariant(&quot;image/jpeg&quot;));
imagePart.setHeader(QNetworkRequest::ContentDispositionHeader, QVariant(&quot;form-data; name=\&quot;image\&quot;&quot;));
QFile *file = new QFile(&quot;image.jpg&quot;);
file-&gt;open(QIODevice::ReadOnly);
imagePart.setBodyDevice(file);
file-&gt;setParent(multiPart); // we cannot delete the file now, so delete it with the multiPart

multiPart-&gt;append(textPart);
multiPart-&gt;append(imagePart);

QUrl url(&quot;http://my.server.tld&quot;);
QNetworkRequest request(url);

QNetworkAccessManager manager;
QNetworkReply *reply = manager.post(request, multiPart);
multiPart-&gt;setParent(reply); // delete the multiPart with the reply
// here connect signals etc.
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttppart.xml">QHttpPart</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ContentType-enum">
<db:title>enum QHttpMultiPart::ContentType</db:title>
<db:para>List of known content types for a multipart subtype as described in RFC 2046 and others.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:emphasis>::MixedType</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>corresponds to the &quot;multipart/mixed&quot; subtype, meaning the body parts are independent of each other, as described in RFC 2046.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:emphasis>::RelatedType</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>corresponds to the &quot;multipart/related&quot; subtype, meaning the body parts are related to each other, as described in RFC 2387.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:emphasis>::FormDataType</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>corresponds to the &quot;multipart/form-data&quot; subtype, meaning the body parts contain form elements, as described in RFC 2388.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link></db:emphasis>::AlternativeType</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>corresponds to the &quot;multipart/alternative&quot; subtype, meaning the body parts are alternative representations of the same information, as described in RFC 2046.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#setContentType">setContentType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpMultiPart">
<db:title>[explicit] QHttpMultiPart::QHttpMultiPart(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> with content type <db:link xlink:href="qhttpmultipart.xml#ContentType-enum">MixedType</db:link> and sets <db:code role="parameter">parent</db:code> as the parent object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#ContentType-enum">QHttpMultiPart::ContentType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QHttpMultiPart-1">
<db:title>[explicit] QHttpMultiPart::QHttpMultiPart(QHttpMultiPart::ContentType <db:emphasis>contentType</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qhttpmultipart.xml">QHttpMultiPart</db:link> with content type <db:code role="parameter">contentType</db:code> and sets parent as the parent object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#ContentType-enum">QHttpMultiPart::ContentType</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QHttpMultiPart">
<db:title>[virtual noexcept] QHttpMultiPart::~QHttpMultiPart()</db:title>
<db:para>Destroys the multipart.</db:para>
</db:section>
<db:section xml:id="append">
<db:title>void QHttpMultiPart::append(const QHttpPart &amp;<db:emphasis>httpPart</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">httpPart</db:code> to this multipart.</db:para>
</db:section>
<db:section xml:id="boundary">
<db:title>QByteArray QHttpMultiPart::boundary() const</db:title>
<db:para>returns the boundary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#setBoundary">setBoundary</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBoundary">
<db:title>void QHttpMultiPart::setBoundary(const QByteArray &amp;<db:emphasis>boundary</db:emphasis>)</db:title>
<db:para>Sets the boundary to <db:code role="parameter">boundary</db:code>.</db:para>
<db:para>Usually, you do not need to generate a boundary yourself; upon construction the boundary is initiated with the string &quot;boundary_.oOo._&quot; followed by random characters, and provides enough uniqueness to make sure it does not occur inside the parts itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#boundary">boundary</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setContentType">
<db:title>void QHttpMultiPart::setContentType(QHttpMultiPart::ContentType <db:emphasis>contentType</db:emphasis>)</db:title>
<db:para>Sets the content type to <db:code role="parameter">contentType</db:code>. The content type will be used in the HTTP header section when sending the multipart message via <db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>(). In case you want to use a multipart subtype not contained in <db:link xlink:href="qhttpmultipart.xml#ContentType-enum">QHttpMultiPart::ContentType</db:link>, you can add the &quot;Content-Type&quot; header field to the <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link> by hand, and then use this request together with the multipart message for posting.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpmultipart.xml#ContentType-enum">QHttpMultiPart::ContentType</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#post">QNetworkAccessManager::post</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
