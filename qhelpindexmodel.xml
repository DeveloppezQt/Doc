<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHelpIndexModel Class</db:title>
<db:productname>QtHelp</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Help Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qhelpindexmodel.xml">QHelpIndexModel</db:link> class provides a model that supplies index keywords to views.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHelpIndexModel</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Help)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Help)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += help</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qstringlistmodel.xml" xlink:role="class">QStringListModel</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="createIndex">
<db:title>void QHelpIndexModel::createIndex(const QString &amp;<db:emphasis>customFilterName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>createIndex</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>customFilterName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void createIndex(const QString &amp;customFilterName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a new index by querying the help system for keywords for the specified <db:code role="parameter">customFilterName</db:code>.</db:para>
</db:section>
<db:section xml:id="filter">
<db:title>QModelIndex QHelpIndexModel::filter(const QString &amp;<db:emphasis>filter</db:emphasis>, const QString &amp;<db:emphasis>wildcard</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QModelIndex</db:type>
<db:methodname>filter</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>filter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>wildcard</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QModelIndex filter(const QString &amp;filter, const QString &amp;wildcard)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Filters the indices and returns the model index of the best matching keyword. In a first step, only the keywords containing <db:code role="parameter">filter</db:code> are kept in the model's index list. Analogously, if <db:code role="parameter">wildcard</db:code> is not empty, only the keywords matched are left in the index list. In a second step, the best match is determined and its index model returned. When specifying a wildcard expression, the <db:code role="parameter">filter</db:code> string is used to search for the best match.</db:para>
</db:section>
<db:section xml:id="helpEngine">
<db:title>QHelpEngineCore *QHelpIndexModel::helpEngine() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHelpEngineCore *</db:type>
<db:methodname>helpEngine</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHelpEngineCore * helpEngine() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the associated help engine that manages this model.</db:para>
</db:section>
<db:section xml:id="indexCreated">
<db:title>void QHelpIndexModel::indexCreated()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>indexCreated</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void indexCreated()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the index has been created.</db:para>
</db:section>
<db:section xml:id="indexCreationStarted">
<db:title>void QHelpIndexModel::indexCreationStarted()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>indexCreationStarted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void indexCreationStarted()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the creation of a new index has started. The current index is invalid from this point on until the signal <db:link xlink:href="qhelpindexmodel.xml#indexCreated">indexCreated</db:link>() is emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhelpindexmodel.xml#isCreatingIndex">isCreatingIndex</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isCreatingIndex">
<db:title>bool QHelpIndexModel::isCreatingIndex() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isCreatingIndex</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isCreatingIndex() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the index is currently built up, otherwise false.</db:para>
</db:section>
</db:section>
</db:article>
