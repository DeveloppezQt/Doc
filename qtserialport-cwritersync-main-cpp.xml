<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Command Line Writer Sync Example</db:title>
<db:productname>QtSerialPort</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Port Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to send data synchronously over serial port.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Laszlo Papp &lt;lpapp@kde.org&gt;
** Contact: http://www.qt.io/licensing/
**
** This file is part of the QtSerialPort module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL21$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 or version 3 as published by the Free
** Software Foundation and appearing in the file LICENSE.LGPLv21 and
** LICENSE.LGPLv3 included in the packaging of this file. Please review the
** following information to ensure the GNU Lesser General Public License
** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** As a special exception, The Qt Company gives you certain additional
** rights. These rights are described in The Qt Company LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtSerialPort/QSerialPort&gt;

#include &lt;QTextStream&gt;
#include &lt;QCoreApplication&gt;
#include &lt;QFile&gt;
#include &lt;QStringList&gt;

QT_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QCoreApplication coreApplication(argc, argv);
    int argumentCount = QCoreApplication::arguments().size();
    QStringList argumentList = QCoreApplication::arguments();

    QTextStream standardOutput(stdout);

    if (argumentCount == 1) {
        standardOutput &lt;&lt; QObject::tr(&quot;Usage: %1 &lt;serialportname&gt; [baudrate]&quot;).arg(argumentList.first()) &lt;&lt; endl;
        return 1;
    }

    QSerialPort serialPort;
    QString serialPortName = argumentList.at(1);
    serialPort.setPortName(serialPortName);

    int serialPortBaudRate = (argumentCount &gt; 2) ? argumentList.at(2).toInt() : QSerialPort::Baud9600;
    serialPort.setBaudRate(serialPortBaudRate);

    if (!serialPort.open(QIODevice::WriteOnly)) {
        standardOutput &lt;&lt; QObject::tr(&quot;Failed to open port %1, error: %2&quot;).arg(serialPortName).arg(serialPort.errorString()) &lt;&lt; endl;
        return 1;
    }

    QFile dataFile;
    if (!dataFile.open(stdin, QIODevice::ReadOnly)) {
        standardOutput &lt;&lt; QObject::tr(&quot;Failed to open stdin for reading&quot;) &lt;&lt; endl;
        return 1;
    }

    QByteArray writeData(dataFile.readAll());
    dataFile.close();

    if (writeData.isEmpty()) {
        standardOutput &lt;&lt; QObject::tr(&quot;Either no data was currently available on the standard input for reading, or an error occurred for port %1, error: %2&quot;).arg(serialPortName).arg(serialPort.errorString()) &lt;&lt; endl;
        return 1;
    }

    qint64 bytesWritten = serialPort.write(writeData);

    if (bytesWritten == -1) {
        standardOutput &lt;&lt; QObject::tr(&quot;Failed to write the data to port %1, error: %2&quot;).arg(serialPortName).arg(serialPort.errorString()) &lt;&lt; endl;
        return 1;
    } else if (bytesWritten != writeData.size()) {
        standardOutput &lt;&lt; QObject::tr(&quot;Failed to write all the data to port %1, error: %2&quot;).arg(serialPortName).arg(serialPort.errorString()) &lt;&lt; endl;
        return 1;
    } else if (!serialPort.waitForBytesWritten(5000)) {
        standardOutput &lt;&lt; QObject::tr(&quot;Operation timed out or an error occurred for port %1, error: %2&quot;).arg(serialPortName).arg(serialPort.errorString()) &lt;&lt; endl;
        return 1;
    }

    standardOutput &lt;&lt; QObject::tr(&quot;Data successfully sent to port %1&quot;).arg(serialPortName) &lt;&lt; endl;

    return 0;
}

</db:programlisting>
</db:article>
