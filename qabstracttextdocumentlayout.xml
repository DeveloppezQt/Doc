<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractTextDocumentLayout Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> class is an abstract base class used to implement custom layouts for QTextDocuments.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractTextDocumentLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qplaintextdocumentlayout.xml" xlink:role="class">QPlainTextDocumentLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAbstractTextDocumentLayout is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The standard layout provided by Qt can handle simple word processing including inline images, lists and tables.</db:para>
<db:para>Some applications, e.g., a word processor or a DTP application might need more features than the ones provided by Qt's layout engine, in which case you can subclass <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> to provide custom layout behavior for your text documents.</db:para>
<db:para>An instance of the <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> subclass can be installed on a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> object with the <db:link xlink:href="qtextdocument.xml#setDocumentLayout">setDocumentLayout</db:link>() function.</db:para>
<db:para>You can insert custom objects into a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>; see the <db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link> class description for details.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextobjectinterface.xml">QTextObjectInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractTextDocumentLayout">
<db:title>[explicit] QAbstractTextDocumentLayout::QAbstractTextDocumentLayout(QTextDocument *<db:emphasis>document</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractTextDocumentLayout</db:methodname>
<db:methodparam>
<db:type>QTextDocument *</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractTextDocumentLayout(QTextDocument *document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new text document layout for the given <db:code role="parameter">document</db:code>.</db:para>
</db:section>
<db:section xml:id="anchorAt">
<db:title>QString QAbstractTextDocumentLayout::anchorAt(const QPointF &amp;<db:emphasis>position</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>anchorAt</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString anchorAt(const QPointF &amp;position) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the reference of the anchor the given <db:code role="parameter">position</db:code>, or an empty string if no anchor exists at that point.</db:para>
</db:section>
<db:section xml:id="blockBoundingRect">
<db:title>[pure virtual] QRectF QAbstractTextDocumentLayout::blockBoundingRect(const QTextBlock &amp;<db:emphasis>block</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>blockBoundingRect</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF blockBoundingRect(const QTextBlock &amp;block) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of <db:code role="parameter">block</db:code>.</db:para>
</db:section>
<db:section xml:id="blockWithMarkerAt">
<db:title>[since 5.14] QTextBlock QAbstractTextDocumentLayout::blockWithMarkerAt(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextBlock</db:type>
<db:methodname>blockWithMarkerAt</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextBlock blockWithMarkerAt(const QPointF &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the block (probably a list item) whose <db:link xlink:href="qtextblockformat.xml#marker">marker</db:link> is found at the given position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
</db:section>
<db:section xml:id="document">
<db:title>QTextDocument *QAbstractTextDocumentLayout::document() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextDocument *</db:type>
<db:methodname>document</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextDocument * document() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text document that this layout is operating on.</db:para>
</db:section>
<db:section xml:id="documentChanged">
<db:title>[pure virtual protected] void QAbstractTextDocumentLayout::documentChanged(int <db:emphasis>position</db:emphasis>, int <db:emphasis>charsRemoved</db:emphasis>, int <db:emphasis>charsAdded</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>documentChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>charsRemoved</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>charsAdded</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void documentChanged(int position, int charsRemoved, int charsAdded) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called whenever the contents of the document change. A change occurs when text is inserted, removed, or a combination of these two. The change is specified by <db:code role="parameter">position</db:code>, <db:code role="parameter">charsRemoved</db:code>, and <db:code role="parameter">charsAdded</db:code> corresponding to the starting character position of the change, the number of characters removed from the document, and the number of characters added.</db:para>
<db:para>For example, when inserting the text &quot;Hello&quot; into an empty document, <db:code role="parameter">charsRemoved</db:code> would be 0 and <db:code role="parameter">charsAdded</db:code> would be 5 (the length of the string).</db:para>
<db:para>Replacing text is a combination of removing and inserting. For example, if the text &quot;Hello&quot; gets replaced by &quot;Hi&quot;, <db:code role="parameter">charsRemoved</db:code> would be 5 and <db:code role="parameter">charsAdded</db:code> would be 2.</db:para>
<db:para>For subclasses of <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link>, this is the central function where a large portion of the work to lay out and position document contents is done.</db:para>
<db:para>For example, in a subclass that only arranges blocks of text, an implementation of this function would have to do the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Determine the list of changed <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>(s) using the parameters provided.</db:para>
</db:listitem>
<db:listitem>
<db:para>Each <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> object's corresponding <db:link xlink:href="qtextlayout.xml">QTextLayout</db:link> object needs to be processed. You can access the <db:link xlink:href="qtextblock.xml">QTextBlock</db:link>'s layout using the <db:link xlink:href="qtextblock.xml#layout">QTextBlock::layout</db:link>() function. This processing should take the document's page size into consideration.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the total number of pages changed, the <db:link xlink:href="qabstracttextdocumentlayout.xml#pageCountChanged">pageCountChanged</db:link>() signal should be emitted.</db:para>
</db:listitem>
<db:listitem>
<db:para>If the total size changed, the <db:link xlink:href="qabstracttextdocumentlayout.xml#documentSizeChanged">documentSizeChanged</db:link>() signal should be emitted.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qabstracttextdocumentlayout.xml#update">update</db:link>() signal should be emitted to schedule a repaint of areas in the layout that require repainting.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextlayout.xml">QTextLayout</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentSize">
<db:title>[pure virtual] QSizeF QAbstractTextDocumentLayout::documentSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSizeF</db:type>
<db:methodname>documentSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSizeF documentSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the total size of the document's layout.</db:para>
<db:para>This information can be used by display widgets to update their scroll bars correctly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#documentSizeChanged">documentSizeChanged</db:link>()</db:member>
<db:member><db:link xlink:href="qtextdocument.xml#pageSize-prop">QTextDocument::pageSize</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="documentSizeChanged">
<db:title>void QAbstractTextDocumentLayout::documentSizeChanged(const QSizeF &amp;<db:emphasis>newSize</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>documentSizeChanged</db:methodname>
<db:methodparam>
<db:type>const QSizeF &amp;</db:type>
<db:parameter>newSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void documentSizeChanged(const QSizeF &amp;newSize)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the size of the document layout changes to <db:code role="parameter">newSize</db:code>.</db:para>
<db:para>Subclasses of <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> should emit this signal when the document's entire layout size changes. This signal is useful for widgets that display text documents since it enables them to update their scroll bars correctly.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#documentSize">documentSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="draw">
<db:title>[pure virtual] void QAbstractTextDocumentLayout::draw(QPainter *<db:emphasis>painter</db:emphasis>, const QAbstractTextDocumentLayout::PaintContext &amp;<db:emphasis>context</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>draw</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QAbstractTextDocumentLayout::PaintContext &amp;</db:type>
<db:parameter>context</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void draw(QPainter *painter, const QAbstractTextDocumentLayout::PaintContext &amp;context) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Draws the layout with the given <db:code role="parameter">painter</db:code> using the given <db:code role="parameter">context</db:code>.</db:para>
</db:section>
<db:section xml:id="drawInlineObject">
<db:title>[virtual protected] void QAbstractTextDocumentLayout::drawInlineObject(QPainter *<db:emphasis>painter</db:emphasis>, const QRectF &amp;<db:emphasis>rect</db:emphasis>, QTextInlineObject <db:emphasis>object</db:emphasis>, int <db:emphasis>posInDocument</db:emphasis>, const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>drawInlineObject</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QTextInlineObject</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posInDocument</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void drawInlineObject(QPainter *painter, const QRectF &amp;rect, QTextInlineObject object, int posInDocument, const QTextFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called to draw the inline object, <db:code role="parameter">object</db:code>, with the given <db:code role="parameter">painter</db:code> within the rectangle specified by <db:code role="parameter">rect</db:code> using the specified text <db:code role="parameter">format</db:code>.</db:para>
<db:para><db:code role="parameter">posInDocument</db:code> specifies the position of the object within the document.</db:para>
<db:para>The default implementation calls drawObject() on the object handlers. This function is called only within Qt. Subclasses can reimplement this function to customize the drawing of inline objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#draw">draw</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="format">
<db:title>[protected] QTextCharFormat QAbstractTextDocumentLayout::format(int <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QTextCharFormat</db:type>
<db:methodname>format</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextCharFormat format(int position)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the character format that is applicable at the given <db:code role="parameter">position</db:code>.</db:para>
</db:section>
<db:section xml:id="formatAt">
<db:title>[since 5.8] QTextFormat QAbstractTextDocumentLayout::formatAt(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextFormat</db:type>
<db:methodname>formatAt</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextFormat formatAt(const QPointF &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the text format at the given position <db:code role="parameter">pos</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="frameBoundingRect">
<db:title>[pure virtual] QRectF QAbstractTextDocumentLayout::frameBoundingRect(QTextFrame *<db:emphasis>frame</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>frameBoundingRect</db:methodname>
<db:methodparam>
<db:type>QTextFrame *</db:type>
<db:parameter>frame</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF frameBoundingRect(QTextFrame *frame) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bounding rectangle of <db:code role="parameter">frame</db:code>.</db:para>
</db:section>
<db:section xml:id="handlerForObject">
<db:title>QTextObjectInterface *QAbstractTextDocumentLayout::handlerForObject(int <db:emphasis>objectType</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTextObjectInterface *</db:type>
<db:methodname>handlerForObject</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>objectType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextObjectInterface * handlerForObject(int objectType) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a handler for objects of the given <db:code role="parameter">objectType</db:code>.</db:para>
</db:section>
<db:section xml:id="hitTest">
<db:title>[pure virtual] int QAbstractTextDocumentLayout::hitTest(const QPointF &amp;<db:emphasis>point</db:emphasis>, Qt::HitTestAccuracy <db:emphasis>accuracy</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>hitTest</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::HitTestAccuracy</db:type>
<db:parameter>accuracy</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int hitTest(const QPointF &amp;point, Qt::HitTestAccuracy accuracy) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the cursor position for the given <db:code role="parameter">point</db:code> with the specified <db:code role="parameter">accuracy</db:code>. Returns -1 if no valid cursor position was found.</db:para>
</db:section>
<db:section xml:id="imageAt">
<db:title>[since 5.8] QString QAbstractTextDocumentLayout::imageAt(const QPointF &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>imageAt</db:methodname>
<db:methodparam>
<db:type>const QPointF &amp;</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString imageAt(const QPointF &amp;pos) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the source of the image at the given position <db:code role="parameter">pos</db:code>, or an empty string if no image exists at that point.</db:para>
<db:para>This function was introduced in Qt 5.8.</db:para>
</db:section>
<db:section xml:id="pageCount">
<db:title>[pure virtual] int QAbstractTextDocumentLayout::pageCount() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>pageCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int pageCount() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of pages contained in the layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#pageCountChanged">pageCountChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pageCountChanged">
<db:title>void QAbstractTextDocumentLayout::pageCountChanged(int <db:emphasis>newPages</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pageCountChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>newPages</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pageCountChanged(int newPages)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the number of pages in the layout changes; <db:code role="parameter">newPages</db:code> is the updated page count.</db:para>
<db:para>Subclasses of <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> should emit this signal when the number of pages in the layout has changed. Changes to the page count are caused by changes to the layout or the document content itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#pageCount">pageCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="paintDevice">
<db:title>QPaintDevice *QAbstractTextDocumentLayout::paintDevice() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPaintDevice *</db:type>
<db:methodname>paintDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPaintDevice * paintDevice() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the paint device used to render the document's layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#setPaintDevice">setPaintDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionInlineObject">
<db:title>[virtual protected] void QAbstractTextDocumentLayout::positionInlineObject(QTextInlineObject <db:emphasis>item</db:emphasis>, int <db:emphasis>posInDocument</db:emphasis>, const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>positionInlineObject</db:methodname>
<db:methodparam>
<db:type>QTextInlineObject</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posInDocument</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void positionInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Lays out the inline object <db:code role="parameter">item</db:code> using the given text <db:code role="parameter">format</db:code>.</db:para>
<db:para><db:code role="parameter">posInDocument</db:code> specifies the position of the object within the document.</db:para>
<db:para>The default implementation does nothing. This function is called only within Qt. Subclasses can reimplement this function to customize the position of inline objects.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#drawInlineObject">drawInlineObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="registerHandler">
<db:title>void QAbstractTextDocumentLayout::registerHandler(int <db:emphasis>objectType</db:emphasis>, QObject *<db:emphasis>component</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>registerHandler</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>objectType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>component</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void registerHandler(int objectType, QObject *component)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the given <db:code role="parameter">component</db:code> as a handler for items of the given <db:code role="parameter">objectType</db:code>.</db:para>
<db:note>
<db:para>registerHandler() has to be called once for each object type. This means that there is only one handler for multiple replacement characters of the same object type.</db:para>
</db:note>
<db:para>The text document layout does not take ownership of <db:code>component</db:code>.</db:para>
</db:section>
<db:section xml:id="resizeInlineObject">
<db:title>[virtual protected] void QAbstractTextDocumentLayout::resizeInlineObject(QTextInlineObject <db:emphasis>item</db:emphasis>, int <db:emphasis>posInDocument</db:emphasis>, const QTextFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>resizeInlineObject</db:methodname>
<db:methodparam>
<db:type>QTextInlineObject</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>posInDocument</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QTextFormat &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void resizeInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &amp;format)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the size of the inline object <db:code role="parameter">item</db:code> corresponding to the text <db:code role="parameter">format</db:code>.</db:para>
<db:para><db:code role="parameter">posInDocument</db:code> specifies the position of the object within the document.</db:para>
<db:para>The default implementation resizes the <db:code role="parameter">item</db:code> to the size returned by the object handler's intrinsicSize() function. This function is called only within Qt. Subclasses can reimplement this function to customize the resizing of inline objects.</db:para>
</db:section>
<db:section xml:id="setPaintDevice">
<db:title>void QAbstractTextDocumentLayout::setPaintDevice(QPaintDevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPaintDevice</db:methodname>
<db:methodparam>
<db:type>QPaintDevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPaintDevice(QPaintDevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the paint device used for rendering the document's layout to the given <db:code role="parameter">device</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstracttextdocumentlayout.xml#paintDevice">paintDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unregisterHandler">
<db:title>[since 5.2] void QAbstractTextDocumentLayout::unregisterHandler(int <db:emphasis>objectType</db:emphasis>, QObject *<db:emphasis>component</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>unregisterHandler</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>objectType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>component</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unregisterHandler(int objectType, QObject *component)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Unregisters the given <db:code role="parameter">component</db:code> as a handler for items of the given <db:code role="parameter">objectType</db:code>, or any handler if the <db:code role="parameter">component</db:code> is not specified.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="update">
<db:title>void QAbstractTextDocumentLayout::update(const QRectF &amp;<db:emphasis>rect</db:emphasis> = QRectF(0., 0., 1000000000., 1000000000.))</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>update</db:methodname>
<db:methodparam>
<db:type>const QRectF &amp;</db:type>
<db:parameter>rect</db:parameter>
<db:initializer>QRectF(0., 0., 1000000000., 1000000000.)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void update(const QRectF &amp;rect)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the rectangle <db:code role="parameter">rect</db:code> has been updated.</db:para>
<db:para>Subclasses of <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> should emit this signal when the layout of the contents change in order to repaint.</db:para>
</db:section>
<db:section xml:id="updateBlock">
<db:title>[since 4.4] void QAbstractTextDocumentLayout::updateBlock(const QTextBlock &amp;<db:emphasis>block</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>updateBlock</db:methodname>
<db:methodparam>
<db:type>const QTextBlock &amp;</db:type>
<db:parameter>block</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateBlock(const QTextBlock &amp;block)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the specified <db:code role="parameter">block</db:code> has been updated.</db:para>
<db:para>Subclasses of <db:link xlink:href="qabstracttextdocumentlayout.xml">QAbstractTextDocumentLayout</db:link> should emit this signal when the layout of <db:code role="parameter">block</db:code> has changed in order to repaint.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
</db:section>
</db:section>
</db:article>
