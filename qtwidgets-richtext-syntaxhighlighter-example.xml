<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Syntax Highlighter Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Syntax Highlighter example shows how to perform simple syntax highlighting.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/syntaxhighlighter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Syntax Highlighter application displays C++ files with custom syntax highlighting.</db:para>
<db:para>The example consists of two classes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Highlighter class defines and applies the highlighting rules.</db:para>
</db:listitem>
<db:listitem>
<db:para>The MainWindow widget is the application's main window.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>We will first review the Highlighter class to see how you can customize the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class to fit your preferences, then we will take a look at the relevant parts of the MainWindow class to see how you can use your custom highlighter class in an application.</db:para>
<db:section xml:id="highlighter-class-definition">
<db:title>Highlighter Class Definition</db:title>
<db:programlisting language="cpp">class Highlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    Highlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &amp;amp;text) override;

private:
    struct HighlightingRule
    {
        QRegularExpression pattern;
        QTextCharFormat format;
    };
    QList&amp;lt;HighlightingRule&amp;gt; highlightingRules;

    QRegularExpression commentStartExpression;
    QRegularExpression commentEndExpression;

    QTextCharFormat keywordFormat;
    QTextCharFormat classFormat;
    QTextCharFormat singleLineCommentFormat;
    QTextCharFormat multiLineCommentFormat;
    QTextCharFormat quotationFormat;
    QTextCharFormat functionFormat;
};
</db:programlisting>
<db:para>To provide your own syntax highlighting, you must subclass <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link>, reimplement the <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() function, and define your own highlighting rules.</db:para>
<db:para>We have chosen to store our highlighting rules using a private struct: A rule consists of a <db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link> pattern and a <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> instance. The various rules are then stored using a <db:link xlink:href="qlist.xml">QList</db:link>.</db:para>
<db:para>The <db:link xlink:href="qtextcharformat.xml">QTextCharFormat</db:link> class provides formatting information for characters in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link> specifying the visual properties of the text, as well as information about its role in a hypertext document. In this example, we will only define the font weight and color using the <db:link xlink:href="qtextcharformat.xml#setFontWeight">QTextCharFormat::setFontWeight</db:link>() and <db:link xlink:href="qtextformat.xml#setForeground">QTextCharFormat::setForeground</db:link>() functions.</db:para>
</db:section>
<db:section xml:id="highlighter-class-implementation">
<db:title>Highlighter Class Implementation</db:title>
<db:para>When subclassing the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class you must pass the parent parameter to the base class constructor. The parent is the text document upon which the syntax highlighting will be applied. In this example, we have also chosen to define our highlighting rules in the constructor:</db:para>
<db:programlisting language="cpp">Highlighter::Highlighter(QTextDocument *parent)
    : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    keywordFormat.setForeground(Qt::darkBlue);
    keywordFormat.setFontWeight(QFont::Bold);
    const QString keywordPatterns[] = {
        QStringLiteral(&quot;\\bchar\\b&quot;), QStringLiteral(&quot;\\bclass\\b&quot;), QStringLiteral(&quot;\\bconst\\b&quot;),
        QStringLiteral(&quot;\\bdouble\\b&quot;), QStringLiteral(&quot;\\benum\\b&quot;), QStringLiteral(&quot;\\bexplicit\\b&quot;),
        QStringLiteral(&quot;\\bfriend\\b&quot;), QStringLiteral(&quot;\\binline\\b&quot;), QStringLiteral(&quot;\\bint\\b&quot;),
        QStringLiteral(&quot;\\blong\\b&quot;), QStringLiteral(&quot;\\bnamespace\\b&quot;), QStringLiteral(&quot;\\boperator\\b&quot;),
        QStringLiteral(&quot;\\bprivate\\b&quot;), QStringLiteral(&quot;\\bprotected\\b&quot;), QStringLiteral(&quot;\\bpublic\\b&quot;),
        QStringLiteral(&quot;\\bshort\\b&quot;), QStringLiteral(&quot;\\bsignals\\b&quot;), QStringLiteral(&quot;\\bsigned\\b&quot;),
        QStringLiteral(&quot;\\bslots\\b&quot;), QStringLiteral(&quot;\\bstatic\\b&quot;), QStringLiteral(&quot;\\bstruct\\b&quot;),
        QStringLiteral(&quot;\\btemplate\\b&quot;), QStringLiteral(&quot;\\btypedef\\b&quot;), QStringLiteral(&quot;\\btypename\\b&quot;),
        QStringLiteral(&quot;\\bunion\\b&quot;), QStringLiteral(&quot;\\bunsigned\\b&quot;), QStringLiteral(&quot;\\bvirtual\\b&quot;),
        QStringLiteral(&quot;\\bvoid\\b&quot;), QStringLiteral(&quot;\\bvolatile\\b&quot;), QStringLiteral(&quot;\\bbool\\b&quot;)
    };
    for (const QString &amp;amp;pattern : keywordPatterns) {
        rule.pattern = QRegularExpression(pattern);
        rule.format = keywordFormat;
        highlightingRules.append(rule);
    }
</db:programlisting>
<db:para>First we define a keyword rule which recognizes the most common C++ keywords. We give the keywordFormat a bold, dark blue font. For each keyword, we assign the keyword and the specified format to a HighlightingRule object and append the object to our list of rules.</db:para>
<db:programlisting language="cpp">    classFormat.setFontWeight(QFont::Bold);
    classFormat.setForeground(Qt::darkMagenta);
    rule.pattern = QRegularExpression(QStringLiteral(&quot;\\bQ[A-Za-z]+\\b&quot;));
    rule.format = classFormat;
    highlightingRules.append(rule);

    quotationFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression(QStringLiteral(&quot;\&quot;.*\&quot;&quot;));
    rule.format = quotationFormat;
    highlightingRules.append(rule);

    functionFormat.setFontItalic(true);
    functionFormat.setForeground(Qt::blue);
    rule.pattern = QRegularExpression(QStringLiteral(&quot;\\b[A-Za-z0-9_]+(?=\\()&quot;));
    rule.format = functionFormat;
    highlightingRules.append(rule);
</db:programlisting>
<db:para>Then we create a format that we will apply to Qt class names. The class names will be rendered with a dark magenta color and a bold style. We specify a string pattern that is actually a regular expression capturing all Qt class names. Then we assign the regular expression and the specified format to a HighlightingRule object and append the object to our list of rules.</db:para>
<db:para>We also define highlighting rules for quotations and functions using the same approach: The patterns have the form of regular expressions and are stored in HighlightingRule objects with the associated format.</db:para>
<db:programlisting language="cpp">    singleLineCommentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression(QStringLiteral(&quot;//[^\n]*&quot;));
    rule.format = singleLineCommentFormat;
    highlightingRules.append(rule);

    multiLineCommentFormat.setForeground(Qt::red);

    commentStartExpression = QRegularExpression(QStringLiteral(&quot;/\\*&quot;));
    commentEndExpression = QRegularExpression(QStringLiteral(&quot;\\*/&quot;));
}
</db:programlisting>
<db:para>The C++ language has two variations of comments: The single line comment (//) and the multiline comment (/*...*/). The single line comment can easily be defined through a highlighting rule similar to the previous ones. But the multiline comment needs special care due to the design of the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class.</db:para>
<db:para>After a <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> object is created, its <db:link xlink:href="qsyntaxhighlighter.xml#highlightBlock">highlightBlock</db:link>() function will be called automatically whenever it is necessary by the rich text engine, highlighting the given text block. The problem appears when a comment spans several text blocks. We will take a closer look at how this problem can be solved when reviewing the implementation of the Highlighter::highlightBlock() function. At this point we only specify the multiline comment's color.</db:para>
<db:programlisting language="cpp">void Highlighter::highlightBlock(const QString &amp;amp;text)
{
    for (const HighlightingRule &amp;amp;rule : qAsConst(highlightingRules)) {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text);
        while (matchIterator.hasNext()) {
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format);
        }
    }
</db:programlisting>
<db:para>The highlightBlock() function is called automatically whenever it is necessary by the rich text engine, i.e. when there are text blocks that have changed.</db:para>
<db:para>First we apply the syntax highlighting rules that we stored in the highlightingRules list. For each rule (i.e. for each HighlightingRule object) we search for the pattern in the given text block using the <db:link xlink:href="qstring.xml#indexOf">QString::indexOf</db:link>() function. When the first occurrence of the pattern is found, we use the <db:link xlink:href="qregularexpressionmatch.xml#capturedLength">QRegularExpressionMatch::capturedLength</db:link>() function to determine the string that will be formatted. <db:link xlink:href="qregularexpressionmatch.xml#capturedLength">QRegularExpressionMatch::capturedLength</db:link>() returns the length of the last matched string, or 0 if there was no match.</db:para>
<db:para>To perform the actual formatting the <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class provides the <db:link xlink:href="qsyntaxhighlighter.xml#setFormat">setFormat</db:link>() function. This function operates on the text block that is passed as argument to the highlightBlock() function. The specified format is applied to the text from the given start position for the given length. The formatting properties set in the given format are merged at display time with the formatting information stored directly in the document. Note that the document itself remains unmodified by the format set through this function.</db:para>
<db:para>This process is repeated until the last occurrence of the pattern in the current text block is found.</db:para>
<db:programlisting language="cpp">    setCurrentBlockState(0);
</db:programlisting>
<db:para>To deal with constructs that can span several text blocks (like the C++ multiline comment), it is necessary to know the end state of the previous text block (e.g. &quot;in comment&quot;). Inside your highlightBlock() implementation you can query the end state of the previous text block using the <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">QSyntaxHighlighter::previousBlockState</db:link>() function. After parsing the block you can save the last state using <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">QSyntaxHighlighter::setCurrentBlockState</db:link>().</db:para>
<db:para>The <db:link xlink:href="qsyntaxhighlighter.xml#previousBlockState">previousBlockState</db:link>() function return an int value. If no state is set, the returned value is -1. You can designate any other value to identify any given state using the <db:link xlink:href="qsyntaxhighlighter.xml#setCurrentBlockState">setCurrentBlockState</db:link>() function. Once the state is set, the <db:link xlink:href="qtextblock.xml">QTextBlock</db:link> keeps that value until it is set again or until the corresponding paragraph of text is deleted.</db:para>
<db:para>In this example we have chosen to use 0 to represent the &quot;not in comment&quot; state, and 1 for the &quot;in comment&quot; state. When the stored syntax highlighting rules are applied we initialize the current block state to 0.</db:para>
<db:programlisting language="cpp">    int startIndex = 0;
    if (previousBlockState() != 1)
        startIndex = text.indexOf(commentStartExpression);
</db:programlisting>
<db:para>If the previous block state was &quot;in comment&quot; (previousBlockState() == 1), we start the search for an end expression at the beginning of the text block. If the previousBlockState() returns 0, we start the search at the location of the first occurrence of a start expression.</db:para>
<db:programlisting language="cpp">    while (startIndex &amp;gt;= 0) {
        QRegularExpressionMatch match = commentEndExpression.match(text, startIndex);
        int endIndex = match.capturedStart();
        int commentLength = 0;
        if (endIndex == -1) {
            setCurrentBlockState(1);
            commentLength = text.length() - startIndex;
        } else {
            commentLength = endIndex - startIndex
                            + match.capturedLength();
        }
        setFormat(startIndex, commentLength, multiLineCommentFormat);
        startIndex = text.indexOf(commentStartExpression, startIndex + commentLength);
    }
}
</db:programlisting>
<db:para>When an end expression is found, we calculate the length of the comment and apply the multiline comment format. Then we search for the next occurrence of the start expression and repeat the process. If no end expression can be found in the current text block we set the current block state to 1, i.e. &quot;in comment&quot;.</db:para>
<db:para>This completes the Highlighter class implementation; it is now ready for use.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>Using a <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> subclass is simple; just provide your application with an instance of the class and pass it the document upon which you want the highlighting to be applied.</db:para>
<db:programlisting language="cpp">class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);

public slots:
    void about();
    void newFile();
    void openFile(const QString &amp;amp;path = QString());

private:
    void setupEditor();
    void setupFileMenu();
    void setupHelpMenu();

    QTextEdit *editor;
    Highlighter *highlighter;
};
</db:programlisting>
<db:para>In this example we declare a pointer to a Highlighter instance which we later will initialize in the private setupEditor() function.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The constructor of the main window is straight forward. We first set up the menus, then we initialize the editor and make it the central widget of the application. Finally we set the main window's title.</db:para>
<db:programlisting language="cpp">MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    setupFileMenu();
    setupHelpMenu();
    setupEditor();

    setCentralWidget(editor);
    setWindowTitle(tr(&quot;Syntax Highlighter&quot;));
}
</db:programlisting>
<db:para>We initialize and install the Highlighter object in the private setupEditor() convenience function:</db:para>
<db:programlisting language="cpp">void MainWindow::setupEditor()
{
    QFont font;
    font.setFamily(&quot;Courier&quot;);
    font.setFixedPitch(true);
    font.setPointSize(10);

    editor = new QTextEdit;
    editor-&amp;gt;setFont(font);

    highlighter = new Highlighter(editor-&amp;gt;document());

    QFile file(&quot;mainwindow.h&quot;);
    if (file.open(QFile::ReadOnly | QFile::Text))
        editor-&amp;gt;setPlainText(file.readAll());
}
</db:programlisting>
<db:para>First we create the font we want to use in the editor, then we create the editor itself which is an instance of the <db:link xlink:href="qtextedit.xml">QTextEdit</db:link> class. Before we initialize the editor with the MainWindow class definition file, we create a Highlighter instance passing the editor's document as argument. This is the document that the highlighting will be applied to. Then we are done.</db:para>
<db:para>A <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> object can only be installed on one document at the time, but you can easily reinstall the highlighter on another document using the <db:link xlink:href="qsyntaxhighlighter.xml#setDocument">QSyntaxHighlighter::setDocument</db:link>() function. The <db:link xlink:href="qsyntaxhighlighter.xml">QSyntaxHighlighter</db:link> class also provides the <db:link xlink:href="qsyntaxhighlighter.xml#document">document</db:link>() function which returns the currently set document.</db:para>
</db:section>
<db:section xml:id="other-code-editor-features">
<db:title>Other Code Editor Features</db:title>
<db:para>The <db:link xlink:href="qtwidgets-widgets-codeeditor-example.xml">Code Editor Example</db:link> shows how to implement line numbers and how to highlight the current line.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/richtext/syntaxhighlighter?h=6.1">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
