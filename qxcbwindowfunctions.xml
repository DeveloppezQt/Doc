<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QXcbWindowFunctions Class</db:title>
<db:productname>QtPlatformHeaders</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Platform Headers Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link> class is an inline class containing miscellaneous functionality for xcb window specific functionality.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QXcbWindowFunctions</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A common usage pattern is as follows:</db:para>
<db:programlisting language="cpp">int main(int argc, char **argv)
{
    QApplication app(argc, argv);

    QPushButton topLevelWidget(&quot;Hello World!&quot;);
    topLevelWidget.winId(); //have to create the QWindow

    QWindow *tlwWindow = topLevelWidget.windowHandle();

    QXcbWindowFunctions::setWmWindowType(tlwWindow, QXcbWindowFunctions::Dock);

    topLevelWidget.show();

    return app.exec();
}
</db:programlisting>
<db:note>
<db:para>There is no binary compatibility guarantee for this class, meaning that an application using it is only guaranteed to work with the Qt version it was developed against.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SetWmWindowIconText-typedef">
<db:title>QXcbWindowFunctions::SetWmWindowIconText</db:title>
<db:typedefsynopsis>
<db:typedefname>SetWmWindowIconText</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is the typedef for the function returned by <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> when passed the value returned by <db:link xlink:href="qxcbwindowfunctions.xml#setWmWindowIconTextIdentifier">setWmWindowIconTextIdentifier</db:link>().</db:para>
</db:section>
<db:section xml:id="SetWmWindowRole-typedef">
<db:title>[since 5.6.2] QXcbWindowFunctions::SetWmWindowRole</db:title>
<db:typedefsynopsis>
<db:typedefname>SetWmWindowRole</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is the typedef for the function returned by <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> when passed the value returned by <db:link xlink:href="qxcbwindowfunctions.xml#setWmWindowRoleIdentifier">setWmWindowRoleIdentifier</db:link>().</db:para>
<db:para>This typedef was introduced in Qt 5.6.2.</db:para>
</db:section>
<db:section xml:id="SetWmWindowType-typedef">
<db:title>QXcbWindowFunctions::SetWmWindowType</db:title>
<db:typedefsynopsis>
<db:typedefname>SetWmWindowType</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is the typedef for the function returned by <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> when passed the value returned by <db:link xlink:href="qxcbwindowfunctions.xml#setWmWindowTypeIdentifier">setWmWindowTypeIdentifier</db:link>().</db:para>
</db:section>
<db:section xml:id="VisualId-typedef">
<db:title>QXcbWindowFunctions::VisualId</db:title>
<db:typedefsynopsis>
<db:typedefname>VisualId</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This is the typedef for the function returned by <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> when passed the value returned by <db:link xlink:href="qxcbwindowfunctions.xml#visualIdIdentifier">visualIdIdentifier</db:link>().</db:para>
</db:section>
<db:section xml:id="WmWindowType-enum">
<db:title>enum QXcbWindowFunctions::WmWindowType</db:title>
<db:bridgehead renderas="sect2">flags QXcbWindowFunctions::WmWindowTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>WmWindowType</db:enumname>
<db:enumitem>
<db:enumidentifier>Normal</db:enumidentifier>
<db:enumvalue>0x000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Desktop</db:enumidentifier>
<db:enumvalue>0x000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Dock</db:enumidentifier>
<db:enumvalue>0x000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Toolbar</db:enumidentifier>
<db:enumvalue>0x000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Menu</db:enumidentifier>
<db:enumvalue>0x000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Utility</db:enumidentifier>
<db:enumvalue>0x000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Splash</db:enumidentifier>
<db:enumvalue>0x000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Dialog</db:enumidentifier>
<db:enumvalue>0x000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DropDownMenu</db:enumidentifier>
<db:enumvalue>0x000100</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PopupMenu</db:enumidentifier>
<db:enumvalue>0x000200</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Tooltip</db:enumidentifier>
<db:enumvalue>0x000400</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Notification</db:enumidentifier>
<db:enumvalue>0x000800</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Combo</db:enumidentifier>
<db:enumvalue>0x001000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Dnd</db:enumidentifier>
<db:enumvalue>0x002000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>KdeOverride</db:enumidentifier>
<db:enumvalue>0x004000</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QXcbWindowFunctions::WmWindowTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum represents the supported WM_WINDOW_TYPE atoms.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Normal</db:code></db:para>
</db:td>
<db:td><db:code>0x000001</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Desktop</db:code></db:para>
</db:td>
<db:td><db:code>0x000002</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Dock</db:code></db:para>
</db:td>
<db:td><db:code>0x000004</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Toolbar</db:code></db:para>
</db:td>
<db:td><db:code>0x000008</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Menu</db:code></db:para>
</db:td>
<db:td><db:code>0x000010</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Utility</db:code></db:para>
</db:td>
<db:td><db:code>0x000020</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Splash</db:code></db:para>
</db:td>
<db:td><db:code>0x000040</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Dialog</db:code></db:para>
</db:td>
<db:td><db:code>0x000080</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::DropDownMenu</db:code></db:para>
</db:td>
<db:td><db:code>0x000100</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::PopupMenu</db:code></db:para>
</db:td>
<db:td><db:code>0x000200</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Tooltip</db:code></db:para>
</db:td>
<db:td><db:code>0x000400</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Notification</db:code></db:para>
</db:td>
<db:td><db:code>0x000800</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Combo</db:code></db:para>
</db:td>
<db:td><db:code>0x001000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::Dnd</db:code></db:para>
</db:td>
<db:td><db:code>0x002000</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qxcbwindowfunctions.xml">QXcbWindowFunctions</db:link></db:emphasis>::KdeOverride</db:code></db:para>
</db:td>
<db:td><db:code>0x004000</db:code></db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>WmWindowTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;WmWindowType&gt;. </db:code>It stores an OR combination of <db:code>WmWindowType</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="setWmWindowIconText">
<db:title>[static] void QXcbWindowFunctions::setWmWindowIconText(QWindow *<db:emphasis>window</db:emphasis>, const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setWmWindowIconText</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWmWindowIconText(QWindow *window, const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function that can be used directly instead of resolving the function pointer. <db:code role="parameter">window</db:code> and <db:code role="parameter">text</db:code> will be relayed to the function retrieved by <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:section>
<db:section xml:id="setWmWindowIconTextIdentifier">
<db:title>[static] const QByteArray QXcbWindowFunctions::setWmWindowIconTextIdentifier()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:methodname>setWmWindowIconTextIdentifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray setWmWindowIconTextIdentifier()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the byte array that can be used to query <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> to retrieve the <db:link xlink:href="qxcbwindowfunctions.xml#SetWmWindowIconText-typedef">SetWmWindowIconText</db:link> function.</db:para>
</db:section>
<db:section xml:id="setWmWindowRole">
<db:title>[static, since 5.6.2] void QXcbWindowFunctions::setWmWindowRole(QWindow *<db:emphasis>window</db:emphasis>, const QByteArray &amp;<db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setWmWindowRole</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWmWindowRole(QWindow *window, const QByteArray &amp;role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the WM_WINDOW_ROLE property from <db:code role="parameter">role</db:code> on the corresponding X11 window.</db:para>
<db:para>This is a convenience function that can be used directly instead of resolving the function pointer. <db:code role="parameter">window</db:code> and <db:code role="parameter">role</db:code> will be relayed to the function retrieved by <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.6.2.</db:para>
</db:section>
<db:section xml:id="setWmWindowRoleIdentifier">
<db:title>[static, since 5.6.2] const QByteArray QXcbWindowFunctions::setWmWindowRoleIdentifier()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:methodname>setWmWindowRoleIdentifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray setWmWindowRoleIdentifier()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the byte array that can be used to query <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> to retrieve the <db:link xlink:href="qxcbwindowfunctions.xml#SetWmWindowRole-typedef">SetWmWindowRole</db:link> function.</db:para>
<db:para>This function was introduced in Qt 5.6.2.</db:para>
</db:section>
<db:section xml:id="setWmWindowType">
<db:title>[static] void QXcbWindowFunctions::setWmWindowType(QWindow *<db:emphasis>window</db:emphasis>, QXcbWindowFunctions::WmWindowType <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:void/>
<db:methodname>setWmWindowType</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QXcbWindowFunctions::WmWindowType</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWmWindowType(QWindow *window, QXcbWindowFunctions::WmWindowType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function that can be used directly instead of resolving the function pointer. <db:code role="parameter">window</db:code> and <db:code role="parameter">type</db:code> will be relayed to the function retrieved by <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
</db:section>
<db:section xml:id="setWmWindowTypeIdentifier">
<db:title>[static] const QByteArray QXcbWindowFunctions::setWmWindowTypeIdentifier()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:methodname>setWmWindowTypeIdentifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray setWmWindowTypeIdentifier()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the byte array that can be used to query <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> to retrieve the <db:link xlink:href="qxcbwindowfunctions.xml#SetWmWindowType-typedef">SetWmWindowType</db:link> function.</db:para>
</db:section>
<db:section xml:id="visualId">
<db:title>[static] uint QXcbWindowFunctions::visualId(QWindow *<db:emphasis>window</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>uint</db:type>
<db:methodname>visualId</db:methodname>
<db:methodparam>
<db:type>QWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">uint visualId(QWindow *window)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is a convenience function that can be used directly instead of resolving the function pointer. <db:code role="parameter">window</db:code> will be relayed to the function retrieved by <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link>.</db:para>
<db:para>Returns the unsigned integer result of calling the function or UINT_MAX if the function was not found.</db:para>
</db:section>
<db:section xml:id="visualIdIdentifier">
<db:title>[static] const QByteArray QXcbWindowFunctions::visualIdIdentifier()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>const QByteArray</db:type>
<db:methodname>visualIdIdentifier</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QByteArray visualIdIdentifier()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function returns the byte array that can be used to query <db:link xlink:href="qguiapplication.xml#platformFunction">QGuiApplication::platformFunction</db:link> to retrieve the <db:link xlink:href="qxcbwindowfunctions.xml#VisualId-typedef">VisualId</db:link> function.</db:para>
</db:section>
</db:section>
</db:article>
