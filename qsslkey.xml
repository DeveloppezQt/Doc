<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSslKey Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsslkey.xml">QSslKey</db:link> class provides an interface for private and public keys.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSslKey</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSslKey is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member><db:member>ssl</db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsslkey.xml">QSslKey</db:link> provides a simple API for managing keys.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml">QSslSocket</db:link></db:member>
<db:member><db:link xlink:href="qsslcertificate.xml">QSslCertificate</db:link></db:member>
<db:member><db:link xlink:href="qsslcipher.xml">QSslCipher</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSslKey">
<db:title>QSslKey::QSslKey()</db:title>
<db:constructorsynopsis>
<db:methodname>QSslKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a null key.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslkey.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSslKey-1">
<db:title>QSslKey::QSslKey(const QByteArray &amp;<db:emphasis>encoded</db:emphasis>, QSsl::KeyAlgorithm <db:emphasis>algorithm</db:emphasis>, QSsl::EncodingFormat <db:emphasis>encoding</db:emphasis> = QSsl::Pem, QSsl::KeyType <db:emphasis>type</db:emphasis> = QSsl::PrivateKey, const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QSslKey</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>encoded</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyAlgorithm</db:type>
<db:parameter>algorithm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>encoding</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>QSsl::PrivateKey</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey(const QByteArray &amp;encoded, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslkey.xml">QSslKey</db:link> by decoding the string in the byte array <db:code role="parameter">encoded</db:code> using a specified <db:code role="parameter">algorithm</db:code> and <db:code role="parameter">encoding</db:code> format. <db:code role="parameter">type</db:code> specifies whether the key is public or private.</db:para>
<db:para>If the key is encrypted then <db:code role="parameter">passPhrase</db:code> is used to decrypt it.</db:para>
<db:para>After construction, use <db:link xlink:href="qsslkey.xml#isNull">isNull</db:link>() to check if <db:code role="parameter">encoded</db:code> contained a valid key.</db:para>
</db:section>
<db:section xml:id="QSslKey-2">
<db:title>QSslKey::QSslKey(QIODevice *<db:emphasis>device</db:emphasis>, QSsl::KeyAlgorithm <db:emphasis>algorithm</db:emphasis>, QSsl::EncodingFormat <db:emphasis>encoding</db:emphasis> = QSsl::Pem, QSsl::KeyType <db:emphasis>type</db:emphasis> = QSsl::PrivateKey, const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray())</db:title>
<db:constructorsynopsis>
<db:methodname>QSslKey</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyAlgorithm</db:type>
<db:parameter>algorithm</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::EncodingFormat</db:type>
<db:parameter>encoding</db:parameter>
<db:initializer>QSsl::Pem</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>QSsl::PrivateKey</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey(QIODevice *device, QSsl::KeyAlgorithm algorithm, QSsl::EncodingFormat encoding, QSsl::KeyType type, const QByteArray &amp;passPhrase)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslkey.xml">QSslKey</db:link> by reading and decoding data from a <db:code role="parameter">device</db:code> using a specified <db:code role="parameter">algorithm</db:code> and <db:code role="parameter">encoding</db:code> format. <db:code role="parameter">type</db:code> specifies whether the key is public or private.</db:para>
<db:para>If the key is encrypted then <db:code role="parameter">passPhrase</db:code> is used to decrypt it.</db:para>
<db:para>After construction, use <db:link xlink:href="qsslkey.xml#isNull">isNull</db:link>() to check if <db:code role="parameter">device</db:code> provided a valid key.</db:para>
</db:section>
<db:section xml:id="QSslKey-3">
<db:title>[explicit, since 5.0] QSslKey::QSslKey(Qt::HANDLE <db:emphasis>handle</db:emphasis>, QSsl::KeyType <db:emphasis>type</db:emphasis> = QSsl::PrivateKey)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslKey</db:methodname>
<db:methodparam>
<db:type>Qt::HANDLE</db:type>
<db:parameter>handle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSsl::KeyType</db:type>
<db:parameter>type</db:parameter>
<db:initializer>QSsl::PrivateKey</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey(Qt::HANDLE handle, QSsl::KeyType type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qsslkey.xml">QSslKey</db:link> from a valid native key <db:code role="parameter">handle</db:code>. <db:code role="parameter">type</db:code> specifies whether the key is public or private.</db:para>
<db:para><db:link xlink:href="qsslkey.xml">QSslKey</db:link> will take ownership for this key and you must not free the key using the native library.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="QSslKey-4">
<db:title>QSslKey::QSslKey(const QSslKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QSslKey</db:methodname>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey(const QSslKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an identical copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSslKey">
<db:title>QSslKey::~QSslKey()</db:title>
<db:destructorsynopsis>
<db:methodname>~QSslKey</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QSslKey()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qsslkey.xml">QSslKey</db:link> object.</db:para>
</db:section>
<db:section xml:id="algorithm">
<db:title>QSsl::KeyAlgorithm QSslKey::algorithm() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSsl::KeyAlgorithm</db:type>
<db:methodname>algorithm</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSsl::KeyAlgorithm algorithm() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key algorithm.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QSslKey::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the contents of this key, making it a null key.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslkey.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="handle">
<db:title>Qt::HANDLE QSslKey::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::HANDLE</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::HANDLE handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to the native key handle, if there is one, else nullptr.</db:para>
<db:para>You can use this handle together with the native API to access extended information about the key.</db:para>
<db:warning>
<db:para>Use of this function has a high probability of being non-portable, and its return value may vary across platforms, and between minor Qt releases.</db:para>
</db:warning>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QSslKey::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this is a null key; otherwise false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslkey.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="length">
<db:title>int QSslKey::length() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>length</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int length() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the length of the key in bits, or -1 if the key is null.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.0] void QSslKey::swap(QSslKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QSslKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QSslKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this ssl key with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="toDer">
<db:title>QByteArray QSslKey::toDer(const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toDer</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toDer(const QByteArray &amp;passPhrase) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key in DER encoding.</db:para>
<db:para>The <db:code role="parameter">passPhrase</db:code> argument should be omitted as DER cannot be encrypted. It will be removed in a future version of Qt.</db:para>
</db:section>
<db:section xml:id="toPem">
<db:title>QByteArray QSslKey::toPem(const QByteArray &amp;<db:emphasis>passPhrase</db:emphasis> = QByteArray()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>toPem</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>passPhrase</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toPem(const QByteArray &amp;passPhrase) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the key in PEM encoding. The result is encrypted with <db:code role="parameter">passPhrase</db:code> if the key is a private key and <db:code role="parameter">passPhrase</db:code> is non-empty.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>QSsl::KeyType QSslKey::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSsl::KeyType</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSsl::KeyType type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the key (i.e., PublicKey or PrivateKey).</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSslKey::operator!=(const QSslKey &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QSslKey &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this key is not equal to key <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QSslKey &amp;QSslKey::operator=(const QSslKey &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QSslKey &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSslKey &amp; operator=(const QSslKey &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies the contents of <db:code role="parameter">other</db:code> into this key, making the two keys identical.</db:para>
<db:para>Returns a reference to this <db:link xlink:href="qsslkey.xml">QSslKey</db:link>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSslKey::operator==(const QSslKey &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QSslKey &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QSslKey &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this key is equal to <db:code role="parameter">other</db:code>; otherwise returns false.</db:para>
</db:section>
</db:section>
</db:article>
