<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>StackedBarChart Drilldown Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to implement drilldown using a stacked barchart.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QMainWindow&gt;
#include &lt;QtCharts/QChartView&gt;
#include &lt;QtCharts/QBarSet&gt;
#include &lt;QtCharts/QLegend&gt;
#include &quot;drilldownseries.h&quot;
#include &quot;drilldownchart.h&quot;

QT_CHARTS_USE_NAMESPACE

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    QMainWindow window;

    DrilldownChart *drilldownChart =  new DrilldownChart();
    drilldownChart-&gt;setAnimationOptions(QChart::SeriesAnimations);

    // Define categories
    QStringList months;
    months &lt;&lt; &quot;May&quot; &lt;&lt; &quot;Jun&quot; &lt;&lt; &quot;Jul&quot; &lt;&lt; &quot;Aug&quot; &lt;&lt; &quot;Sep&quot;;
    QStringList weeks;
    weeks &lt;&lt; &quot;week 1&quot; &lt;&lt; &quot;week 2&quot; &lt;&lt; &quot;week 3&quot; &lt;&lt; &quot;week 4&quot;;
    QStringList plants;
    plants &lt;&lt; &quot;Habanero&quot; &lt;&lt; &quot;Lemon Drop&quot; &lt;&lt; &quot;Starfish&quot; &lt;&lt; &quot;Aji Amarillo&quot;;

    // Create drilldown structure
    DrilldownBarSeries *seasonSeries = new DrilldownBarSeries(months, drilldownChart);
    seasonSeries-&gt;setName(&quot;Crop by month - Season&quot;);

    // Each month in season series has drilldown series for weekly data
    for (int month = 0; month &lt; months.count(); month++) {

        // Create drilldown series for every week
        DrilldownBarSeries *weeklySeries = new DrilldownBarSeries(weeks, drilldownChart);
        seasonSeries-&gt;mapDrilldownSeries(month, weeklySeries);

        // Drilling down from weekly data brings us back to season data.
        for (int week = 0; week &lt; weeks.count(); week++) {
            weeklySeries-&gt;mapDrilldownSeries(week, seasonSeries);
            weeklySeries-&gt;setName(QString(&quot;Crop by week - &quot; + months.at(month)));
        }

        // Use clicked signal to implement drilldown
        QObject::connect(weeklySeries, SIGNAL(clicked(int,QBarSet*)), drilldownChart, SLOT(handleClicked(int,QBarSet*)));
    }

    // Enable drilldown from season series using clicked signal
    QObject::connect(seasonSeries, SIGNAL(clicked(int,QBarSet*)), drilldownChart, SLOT(handleClicked(int,QBarSet*)));

    // Fill monthly and weekly series with data
    foreach (QString plant, plants) {
        QBarSet *monthlyCrop = new QBarSet(plant);
        for (int month = 0; month &lt; months.count(); month++) {
            QBarSet *weeklyCrop = new QBarSet(plant);
            for (int week = 0; week &lt; weeks.count(); week++)
                *weeklyCrop &lt;&lt; (qrand() % 20);
            // Get the drilldown series from season series and add crop to it.
            seasonSeries-&gt;drilldownSeries(month)-&gt;append(weeklyCrop);
            *monthlyCrop &lt;&lt; weeklyCrop-&gt;sum();
        }
        seasonSeries-&gt;append(monthlyCrop);
    }

    // Show season series in initial view
    drilldownChart-&gt;changeSeries(seasonSeries);
    drilldownChart-&gt;setTitle(seasonSeries-&gt;name());

    drilldownChart-&gt;axisX()-&gt;setGridLineVisible(false);
    drilldownChart-&gt;legend()-&gt;setVisible(true);
    drilldownChart-&gt;legend()-&gt;setAlignment(Qt::AlignBottom);

    QChartView *chartView = new QChartView(drilldownChart);
    window.setCentralWidget(chartView);
    window.resize(480, 300);
    window.show();

    return a.exec();
}

</db:programlisting>
</db:article>
