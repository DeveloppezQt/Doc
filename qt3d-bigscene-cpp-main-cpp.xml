<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Big Scene C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt 3D Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL3$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPLv3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or later as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file. Please review the following information to
** ensure the GNU General Public License version 2.0 requirements will be
** met: http://www.gnu.org/licenses/gpl-2.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;entity.h&quot;

#include &lt;QGuiApplication&gt;
#include &lt;window.h&gt;

#include &lt;QPropertyAnimation&gt;
#include &lt;QUrl&gt;
#include &lt;QTimer&gt;
#include &lt;Qt3DCore/QEntity&gt;
#include &lt;Qt3DCore/QCamera&gt;
#include &lt;Qt3DCore/QTransform&gt;
#include &lt;Qt3DCore/qaspectengine.h&gt;
#include &lt;Qt3DInput/QInputAspect&gt;
#include &lt;Qt3DRender/QParameter&gt;
#include &lt;Qt3DRender/QFrameGraph&gt;
#include &lt;Qt3DRender/QCylinderMesh&gt;
#include &lt;Qt3DRender/QRenderAspect&gt;
#include &lt;Qt3DRender/QCameraSelector&gt;
#include &lt;Qt3DRender/QPhongMaterial&gt;
#include &lt;Qt3DRender/QForwardRenderer&gt;
#include &lt;qmath.h&gt;

using namespace Qt3DCore;
using namespace Qt3DRender;

int main(int ac, char **av)
{
    QGuiApplication app(ac, av);

    Window view;
    Qt3DCore::QAspectEngine engine;
    engine.registerAspect(new Qt3DRender::QRenderAspect());
    Qt3DInput::QInputAspect *input = new Qt3DInput::QInputAspect;
    engine.registerAspect(input);
    QVariantMap data;
    data.insert(QStringLiteral(&quot;surface&quot;), QVariant::fromValue(static_cast&lt;QSurface *&gt;(&amp;view)));
    data.insert(QStringLiteral(&quot;eventSource&quot;), QVariant::fromValue(&amp;view));
    engine.setData(data);
    QEntity *root = new QEntity();

    // Camera
    QCamera *cameraEntity = new QCamera(root);
    cameraEntity-&gt;setObjectName(QStringLiteral(&quot;cameraEntity&quot;));
    cameraEntity-&gt;lens()-&gt;setPerspectiveProjection(45.0f, 16.0f/9.0f, 0.1f, 1000.0f);
    cameraEntity-&gt;setPosition(QVector3D(0, -250.0f, -50.0f));
    cameraEntity-&gt;setUpVector(QVector3D(0, 1, 0));
    cameraEntity-&gt;setViewCenter(QVector3D(0, 0, 0));
    input-&gt;setCamera(cameraEntity);

    // FrameGraph
    QFrameGraph *frameGraph = new QFrameGraph();
    QForwardRenderer *forwardRenderer = new QForwardRenderer();
    forwardRenderer-&gt;setCamera(cameraEntity);
    forwardRenderer-&gt;setClearColor(Qt::black);
    frameGraph-&gt;setActiveFrameGraph(forwardRenderer);
    root-&gt;addComponent(frameGraph);

    const float radius = 100.0f;
    const int max = 1000;
    const float det = 1.0f / max;

    // Scene
    for (int i = 0; i &lt; max; i++) {
        Entity *e = new Entity();
        const float angle = M_PI * 2.0f * i * det * 10.;

        e-&gt;setDiffuseColor(QColor(qFabs(qCos(angle)) * 255, 204, 75));
        e-&gt;setPosition(QVector3D(radius * qCos(angle), 200.* i * det, radius * qSin(angle)));
        e-&gt;setTheta(30.0f * i);
        e-&gt;setPhi(45.0f * i);

        QPropertyAnimation *animX = new QPropertyAnimation(e, QByteArrayLiteral(&quot;theta&quot;));
        animX-&gt;setDuration(2400 * (i + 1));
        animX-&gt;setStartValue(QVariant::fromValue(i * 30.0f));
        animX-&gt;setEndValue(QVariant::fromValue((i + 1) * 390.0f));
        animX-&gt;setLoopCount(-1);
        animX-&gt;start();

        QPropertyAnimation *animZ = new QPropertyAnimation(e, QByteArrayLiteral(&quot;phi&quot;));
        animZ-&gt;setDuration(2400 * (i + 1));
        animZ-&gt;setStartValue(QVariant::fromValue(i * 20.0f));
        animZ-&gt;setEndValue(QVariant::fromValue((i + 1) * 380.0f));
        animZ-&gt;setLoopCount(-1);
        animZ-&gt;start();

        e-&gt;setParent(root);
    }

    engine.setRootEntity(root);
    view.show();

    if (app.arguments().contains((&quot;--bench&quot;)))
        QTimer::singleShot(25 * 1000, &amp;app, &amp;QCoreApplication::quit);

    return app.exec();
}

</db:programlisting>
</db:article>
