<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaPlayer Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class allows the playing of a media files.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaPlayer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Multimedia)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Multimedia)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtmultimedia-mediaplayer.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaPlayer is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_playback</db:member><db:member>multimedia_video</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class is a high level media playback class. It can be used to playback audio of video media files. The content to playback is specified as a <db:link xlink:href="qurl.xml">QUrl</db:link> object.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
audioOutput = new QAudioOutput;
player-&amp;gt;setAudioOutput(audioOutput);
connect(player, &amp;amp;QMediaPlayer::positionChanged, this, &amp;amp;MediaExample::positionChanged);
player-&amp;gt;setSource(QUrl::fromLocalFile(&quot;/Users/me/Music/coolsong.mp3&quot;));
audioOutput-&amp;gt;setVolume(50);
player-&amp;gt;play();
</db:programlisting>
<db:para><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> can be used with <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> for video rendering.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QMediaPlayer::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AccessDeniedError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines a media player error condition.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A media resource couldn't be resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The format of a media resource isn't (fully) supported. Playback may still be possible, but without an audio or video component.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A network error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::AccessDeniedError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>There are not the appropriate permissions to play a media resource.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Loops-enum">
<db:title>enum QMediaPlayer::Loops</db:title>
<db:enumsynopsis>
<db:enumname>Loops</db:enumname>
<db:enumitem>
<db:enumidentifier>Infinite</db:enumidentifier>
<db:enumvalue>-1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Once</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Some predefined constants for the <db:link xlink:href="qmediaplayer.xml#loops-prop">loops</db:link> property.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::Infinite</db:code></db:para>
</db:td>
<db:td><db:code>-1</db:code></db:td>
<db:td>
<db:para>Loop forever.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::Once</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Play the media once (the default).</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="MediaStatus-enum">
<db:title>enum QMediaPlayer::MediaStatus</db:title>
<db:enumsynopsis>
<db:enumname>MediaStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>NoMedia</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadingMedia</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadedMedia</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StalledMedia</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BufferingMedia</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BufferedMedia</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfMedia</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidMedia</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the status of a media player's current media.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NoMedia</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The is no current media. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::LoadingMedia</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The current media is being loaded. The player may be in any state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::LoadedMedia</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The current media has been loaded. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::StalledMedia</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Playback of the current media has stalled due to insufficient buffering or some other temporary interruption. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::BufferingMedia</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The player is buffering data but has enough data buffered for playback to continue for the immediate future. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::BufferedMedia</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The player has fully buffered the current media. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::EndOfMedia</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Playback has reached the end of the current media. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::InvalidMedia</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>The current media cannot be played. The player is in the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="PlaybackState-enum">
<db:title>enum QMediaPlayer::PlaybackState</db:title>
<db:enumsynopsis>
<db:enumname>PlaybackState</db:enumname>
<db:enumitem>
<db:enumidentifier>StoppedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PlayingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PausedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the current state of a media player.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The media player is not playing content, playback will begin from the start of the current track.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::PlayingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The media player is currently playing content. This indicates the same as the <db:link xlink:href="qmediaplayer.xml#playing-prop">playing</db:link> property.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::PausedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The media player has paused playback, playback of the current track will resume from the position the player was paused at.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="activeAudioTrack-prop">
<db:title>activeAudioTrack : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>activeAudioTrack</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeAudioTrack</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveAudioTrack</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeTracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the currently active audio track.</db:para>
<db:para>By default, the first available audio track will be chosen.</db:para>
<db:para>Set <db:code role="parameter">index</db:code> to <db:code>-1</db:code> to disable all audio tracks.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">activeAudioTrack</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveAudioTrack</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#activeTracksChanged">activeTracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="activeSubtitleTrack-prop">
<db:title>activeSubtitleTrack : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>activeSubtitleTrack</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeSubtitleTrack</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveSubtitleTrack</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeTracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the currently active subtitle track.</db:para>
<db:para>Set <db:code role="parameter">index</db:code> to <db:code>-1</db:code> to disable subtitles.</db:para>
<db:para>Subtitles are disabled by default.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">activeSubtitleTrack</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveSubtitleTrack</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#activeTracksChanged">activeTracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="activeVideoTrack-prop">
<db:title>activeVideoTrack : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>activeVideoTrack</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">activeVideoTrack</db:synopsisinfo>
<db:synopsisinfo role="setter">setActiveVideoTrack</db:synopsisinfo>
<db:synopsisinfo role="notifier">activeTracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the currently active video track.</db:para>
<db:para>By default, the first available audio track will be chosen.</db:para>
<db:para>Set <db:code role="parameter">index</db:code> to <db:code>-1</db:code> to disable all video tracks.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">activeVideoTrack</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setActiveVideoTrack</db:emphasis>(<db:type>int</db:type> <db:emphasis>index</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#activeTracksChanged">activeTracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="audioOutput-prop">
<db:title>audioOutput : QAudioOutput*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAudioOutput*</db:type>
<db:varname>audioOutput</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">audioOutput</db:synopsisinfo>
<db:synopsisinfo role="setter">setAudioOutput</db:synopsisinfo>
<db:synopsisinfo role="notifier">audioOutputChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the audio output device used by the media player.</db:para>
<db:para>The current audio output to be used when playing back media. Setting a new audio output will replace the currently used output.</db:para>
<db:para>Setting this property to <db:code>nullptr</db:code> will disable any audio output.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link></db:type> *<db:emphasis role="bold">audioOutput</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAudioOutput</db:emphasis>(<db:type><db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link></db:type> *<db:emphasis>output</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">audioOutputChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="audioTracks-prop">
<db:title>[read-only] audioTracks : const QList&lt;QMediaMetaData&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;QMediaMetaData&gt;</db:type>
<db:varname>audioTracks</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">audioTracks</db:synopsisinfo>
<db:synopsisinfo role="notifier">tracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Lists the set of available audio tracks inside the media.</db:para>
<db:para>The <db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link> returned describes the properties of individual tracks.</db:para>
<db:para>Different audio tracks can for example contain audio in different languages.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type>&gt; <db:emphasis role="bold">audioTracks</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#tracksChanged">tracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="bufferProgress-prop">
<db:title>[read-only] bufferProgress : const float</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>float</db:type>
<db:varname>bufferProgress</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bufferProgress</db:synopsisinfo>
<db:synopsisinfo role="notifier">bufferProgressChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the percentage of the temporary buffer filled before playback begins or resumes, from <db:code>0</db:code>. (empty) to <db:code>1</db:code>. (full).</db:para>
<db:para>When the player object is buffering; this property holds the percentage of the temporary buffer that is filled. The buffer will need to reach 100% filled before playback can start or resume, at which time <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>() will return <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">BufferedMedia</db:link> or <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">BufferingMedia</db:link>. If the value is anything lower than <db:code>100</db:code>, <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>() will return <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">StalledMedia</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>float</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#bufferProgress">bufferProgress</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#bufferProgressChanged">bufferProgressChanged</db:link></db:emphasis>(<db:type>float</db:type> <db:emphasis>filled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>duration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duration</db:synopsisinfo>
<db:synopsisinfo role="notifier">durationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the duration of the current media.</db:para>
<db:para>The value is the total playback time in milliseconds of the current media. The value may change across the life time of the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object and may not be available when initial playback begins, connect to the <db:link xlink:href="qmediaplayer.xml#durationChanged">durationChanged</db:link>() signal to receive status notifications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#duration">duration</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#durationChanged">durationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>duration</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const Error</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Error</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">error</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a string describing the last error condition.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplayer.xml#Error-enum">QMediaPlayer::Error</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#error">error</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString-prop">
<db:title>[read-only] errorString : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>errorString</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
<db:synopsisinfo role="notifier">errorChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a string describing the current error condition in more detail.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#errorChanged">errorChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasAudio-prop">
<db:title>[read-only] hasAudio : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasAudio</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasAudio</db:synopsisinfo>
<db:synopsisinfo role="notifier">hasAudioChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the media contains audio.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasAudio</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#hasAudioChanged">hasAudioChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="hasVideo-prop">
<db:title>[read-only] hasVideo : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>hasVideo</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">hasVideo</db:synopsisinfo>
<db:synopsisinfo role="notifier">hasVideoChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the media contains video.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">hasVideo</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#hasVideoChanged">hasVideoChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>videoAvailable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="loops-prop">
<db:title>loops : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>loops</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">loops</db:synopsisinfo>
<db:synopsisinfo role="setter">setLoops</db:synopsisinfo>
<db:synopsisinfo role="notifier">loopsChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Determines how often the media is played before the player stops. Set to <db:link xlink:href="qmediaplayer.xml#Loops-enum">QMediaPlayer::Infinite</db:link> to loop the current media file forever.</db:para>
<db:para>The default value is <db:code>1</db:code>. Setting this property to <db:code>0</db:code> has no effect.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">loops</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setLoops</db:emphasis>(<db:type>int</db:type> <db:emphasis>loops</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">loopsChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="mediaStatus-prop">
<db:title>[read-only] mediaStatus : const MediaStatus</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>MediaStatus</db:type>
<db:varname>mediaStatus</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mediaStatus</db:synopsisinfo>
<db:synopsisinfo role="notifier">mediaStatusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of the current media stream.</db:para>
<db:para>The stream status describes how the playback of the current stream is progressing.</db:para>
<db:para>By default this property is <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::NoMedia</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::MediaStatus</db:link></db:type> <db:emphasis role="bold">mediaStatus</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#mediaStatusChanged">mediaStatusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::MediaStatus</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="metaData-prop">
<db:title>[read-only] metaData : const QMediaMetaData</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaMetaData</db:type>
<db:varname>metaData</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">metaData</db:synopsisinfo>
<db:synopsisinfo role="notifier">metaDataChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns meta data for the current media used by the media player.</db:para>
<db:para>Meta data can contain information such as the title of the video or its creation date.</db:para>
<db:note>
<db:para>The Windows implementation provides metadata only for media located on the local file system.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type> <db:emphasis role="bold">metaData</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">metaDataChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playbackRate-prop">
<db:title>playbackRate : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>playbackRate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">playbackRate</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaybackRate</db:synopsisinfo>
<db:synopsisinfo role="notifier">playbackRateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the playback rate of the current media.</db:para>
<db:para>This value is a multiplier applied to the media's standard playback rate. By default this value is 1.0, indicating that the media is playing at the standard speed. Values higher than 1.0 will increase the playback speed, while values between 0.0 and 1.0 results in slower playback. Negative playback rates are not supported.</db:para>
<db:para>Not all playback services support change of the playback rate. It is framework defined as to the status and quality of audio and video while fast forwarding or rewinding.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#playbackRate">playbackRate</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaybackRate</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#playbackRateChanged">playbackRateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playbackState-prop">
<db:title>[read-only] playbackState : const PlaybackState</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>PlaybackState</db:type>
<db:varname>playbackState</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">playbackState</db:synopsisinfo>
<db:synopsisinfo role="notifier">playbackStateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the <db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PlaybackState</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">QMediaPlayer::PlaybackState</db:link></db:type> <db:emphasis role="bold">playbackState</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">playbackStateChanged</db:emphasis>(<db:type><db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">QMediaPlayer::PlaybackState</db:link></db:type> <db:emphasis>newState</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#playing-prop">playing</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playing-prop">
<db:title>[read-only, since 6.5] playing : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>playing</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isPlaying</db:synopsisinfo>
<db:synopsisinfo role="notifier">playingChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the media is playing.</db:para>
<db:para>This property was introduced in Qt 6.5.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isPlaying</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">playingChanged</db:emphasis>(<db:type>bool</db:type> <db:emphasis>playing</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#playbackState-prop">playbackState</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#PlaybackState-enum">PlayingState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">position</db:synopsisinfo>
<db:synopsisinfo role="setter">setPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the playback position of the current media.</db:para>
<db:para>The value is the current playback position, expressed in milliseconds since the beginning of the media. Periodically changes in the position will be indicated with the <db:link xlink:href="qmediaplayer.xml#positionChanged">positionChanged</db:link>() signal.</db:para>
<db:para>If the <db:link xlink:href="qmediaplayer.xml#seekable-prop">seekable</db:link> property is true, this property can be set to milliseconds.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#position">position</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPosition</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#positionChanged">positionChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="seekable-prop">
<db:title>[read-only] seekable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>seekable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSeekable</db:synopsisinfo>
<db:synopsisinfo role="notifier">seekableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the seek-able status of the current media</db:para>
<db:para>If seeking is supported this property will be true; false otherwise. The status of this property may change across the life time of the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object, use the <db:link xlink:href="qmediaplayer.xml#seekableChanged">seekableChanged</db:link> signal to monitor changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#isSeekable">isSeekable</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#seekableChanged">seekableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>seekable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="source-prop">
<db:title>source : QUrl</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QUrl</db:type>
<db:varname>source</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">source</db:synopsisinfo>
<db:synopsisinfo role="setter">setSource</db:synopsisinfo>
<db:synopsisinfo role="notifier">sourceChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active media source being used by the player object.</db:para>
<db:para>The player object will use the <db:link xlink:href="qurl.xml">QUrl</db:link> for selection of the content to be played.</db:para>
<db:para>By default this property has a null <db:link xlink:href="qurl.xml">QUrl</db:link>.</db:para>
<db:para>Setting this property to a null <db:link xlink:href="qurl.xml">QUrl</db:link> will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> <db:emphasis role="bold">source</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#setSource">setSource</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>source</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#sourceChanged">sourceChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qurl.xml">QUrl</db:link></db:type> &amp;<db:emphasis>media</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qurl.xml">QUrl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="subtitleTracks-prop">
<db:title>[read-only] subtitleTracks : const QList&lt;QMediaMetaData&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;QMediaMetaData&gt;</db:type>
<db:varname>subtitleTracks</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">subtitleTracks</db:synopsisinfo>
<db:synopsisinfo role="notifier">tracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Lists the set of available subtitle tracks inside the media.</db:para>
<db:para>The <db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link> returned describes the properties of individual tracks.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type>&gt; <db:emphasis role="bold">subtitleTracks</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#tracksChanged">tracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="videoOutput-prop">
<db:title>videoOutput : QObject*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QObject*</db:type>
<db:varname>videoOutput</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">videoOutput</db:synopsisinfo>
<db:synopsisinfo role="setter">setVideoOutput</db:synopsisinfo>
<db:synopsisinfo role="notifier">videoOutputChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video output to be used by the media player.</db:para>
<db:para>A media player can only have one video output attached, so setting this property will replace the previously connected video output.</db:para>
<db:para>Setting this property to <db:code>nullptr</db:code> will disable video output.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qobject.xml#QObject">QObject</db:link></db:type> *<db:emphasis role="bold">videoOutput</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVideoOutput</db:emphasis>(<db:emphasis>QObject *</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">videoOutputChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="videoTracks-prop">
<db:title>[read-only] videoTracks : const QList&lt;QMediaMetaData&gt;</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QList&lt;QMediaMetaData&gt;</db:type>
<db:varname>videoTracks</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">videoTracks</db:synopsisinfo>
<db:synopsisinfo role="notifier">tracksChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Lists the set of available video tracks inside the media.</db:para>
<db:para>The <db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link> returned describes the properties of individual tracks.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qlist.xml">QList</db:link></db:type>&lt;<db:type><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link></db:type>&gt; <db:emphasis role="bold">videoTracks</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#tracksChanged">tracksChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaPlayer">
<db:title>[explicit] QMediaPlayer::QMediaPlayer(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaPlayer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlayer(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> instance as a child of <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaPlayer">
<db:title>[virtual] QMediaPlayer::~QMediaPlayer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaPlayer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaPlayer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the player object.</db:para>
</db:section>
<db:section xml:id="bufferProgress">
<db:title>float QMediaPlayer::bufferProgress() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>float</db:type>
<db:methodname>bufferProgress</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bufferProgress</db:synopsisinfo>
<db:synopsisinfo role="signature">float bufferProgress() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a number between 0 and 1 when buffering data.</db:para>
<db:para>0 means that there is no buffered data available, playback is usually stalled in this case. Playback will resume once the buffer reaches 1, meaning enough data has been buffered to be able to resume playback.</db:para>
<db:para>bufferProgress() will always return 1 for local files.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#bufferProgress-prop">bufferProgress</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="bufferProgressChanged">
<db:title>void QMediaPlayer::bufferProgressChanged(float <db:emphasis>filled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bufferProgressChanged</db:methodname>
<db:methodparam>
<db:type>float</db:type>
<db:parameter>filled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bufferProgress</db:synopsisinfo>
<db:synopsisinfo role="signature">void bufferProgressChanged(float filled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the amount of the local buffer <db:code role="parameter">filled</db:code> as a number between 0 and 1.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#bufferProgress-prop">bufferProgress</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="bufferedTimeRange">
<db:title>QMediaTimeRange QMediaPlayer::bufferedTimeRange() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaTimeRange</db:type>
<db:methodname>bufferedTimeRange</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaTimeRange bufferedTimeRange() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qmediatimerange.xml">QMediaTimeRange</db:link> describing the currently buffered data.</db:para>
<db:para>When streaming media from a remote source, different parts of the media file can be available locally. The returned <db:link xlink:href="qmediatimerange.xml">QMediaTimeRange</db:link> object describes the time ranges that are buffered and available for immediate playback.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediatimerange.xml">QMediaTimeRange</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration">
<db:title>qint64 QMediaPlayer::duration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>duration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 duration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the duration of the current media in ms.</db:para>
<db:para>Returns 0 if the media player doesn't have a valid media file or stream. For live streams, the duration usually changes during playback as more data becomes available.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaPlayer::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>durationChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">void durationChanged(qint64 duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the duration of the content has changed to <db:code role="parameter">duration</db:code>, expressed in milliseconds.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="error">
<db:title>QMediaPlayer::Error QMediaPlayer::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaPlayer::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">error</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlayer::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current error state.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#error-prop">error</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>void QMediaPlayer::errorOccurred(QMediaPlayer::Error <db:emphasis>error</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>errorString</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QMediaPlayer::Error error, const QString &amp;errorString)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> condition has occurred, with <db:code role="parameter">errorString</db:code> containing a description of the error.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#errorString-prop">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasAudioChanged">
<db:title>void QMediaPlayer::hasAudioChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hasAudioChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">hasAudio</db:synopsisinfo>
<db:synopsisinfo role="signature">void hasAudioChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the availability of audio content has changed to <db:code role="parameter">available</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#hasAudio-prop">hasAudio</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="hasVideoChanged">
<db:title>void QMediaPlayer::hasVideoChanged(bool <db:emphasis>videoAvailable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hasVideoChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>videoAvailable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">hasVideo</db:synopsisinfo>
<db:synopsisinfo role="signature">void hasVideoChanged(bool videoAvailable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the availability of visual content has changed to <db:code role="parameter">videoAvailable</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#hasVideo-prop">hasVideo</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="isAvailable">
<db:title>bool QMediaPlayer::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the media player is supported on this platform.</db:para>
</db:section>
<db:section xml:id="isSeekable">
<db:title>bool QMediaPlayer::isSeekable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSeekable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">seekable</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSeekable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the media is seekable. Most file based media files are seekable, but live streams usually are not.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#seekable-prop">seekable</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#position">position</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaStatusChanged">
<db:title>void QMediaPlayer::mediaStatusChanged(QMediaPlayer::MediaStatus <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaStatusChanged</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::MediaStatus</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">mediaStatus</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaStatusChanged(QMediaPlayer::MediaStatus status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">status</db:code> of the current media has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pause">
<db:title>void QMediaPlayer::pause()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pause playing the current source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#play">play</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="play">
<db:title>void QMediaPlayer::play()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>play</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void play()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start or resume playing the current source.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playbackRate">
<db:title>qreal QMediaPlayer::playbackRate() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>playbackRate</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playbackRate</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal playbackRate() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current playback rate.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#playbackRate-prop">playbackRate</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#playbackRate-prop">setPlaybackRate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="playbackRateChanged">
<db:title>void QMediaPlayer::playbackRateChanged(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>playbackRateChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playbackRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void playbackRateChanged(qreal rate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the <db:link xlink:href="qmediaplayer.xml#playbackRate">playbackRate</db:link> has changed to <db:code role="parameter">rate</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#playbackRate-prop">playbackRate</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="position">
<db:title>qint64 QMediaPlayer::position() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>position</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">position</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 position() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current position inside the media being played back in ms.</db:para>
<db:para>Returns 0 if the media player doesn't have a valid media file or stream. For live streams, the duration usually changes during playback as more data becomes available.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qmediaplayer.xml#position-prop">position</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#position-prop">setPosition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="positionChanged">
<db:title>void QMediaPlayer::positionChanged(qint64 <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>positionChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">position</db:synopsisinfo>
<db:synopsisinfo role="signature">void positionChanged(qint64 position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the position of the content has changed to <db:code role="parameter">position</db:code>, expressed in milliseconds.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#position-prop">position</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="seekableChanged">
<db:title>void QMediaPlayer::seekableChanged(bool <db:emphasis>seekable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>seekableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>seekable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">seekable</db:synopsisinfo>
<db:synopsisinfo role="signature">void seekableChanged(bool seekable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the <db:code role="parameter">seekable</db:code> status of the player object has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#seekable-prop">seekable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setSource">
<db:title>void QMediaPlayer::setSource(const QUrl &amp;<db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSource</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSource(const QUrl &amp;source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current <db:code role="parameter">source</db:code>.</db:para>
<db:para>Setting the media to a null <db:link xlink:href="qurl.xml">QUrl</db:link> will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media. Setting the media will stop the playback.</db:para>
<db:note>
<db:para>This function returns immediately after recording the specified source of the media. It does not wait for the media to finish loading and does not check for errors. Listen for the <db:link xlink:href="qmediaplayer.xml#mediaStatusChanged">mediaStatusChanged</db:link>() and <db:link xlink:href="qmediaplayer.xml#error">error</db:link>() signals to be notified when the media is loaded and when an error occurs during loading.</db:para>
</db:note>
<db:note>
<db:para>FFmpeg, used by the FFmpeg media backend, restricts use of nested protocols for security reasons. In controlled environments where all inputs are trusted, the list of approved protocols can be overridden using the QT_FFMPEG_PROTOCOL_WHITELIST environment variable. This environment variable is Qt's private API and can change between patch releases without notice.</db:para>
</db:note>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediaplayer.xml#source-prop">source</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#source-prop">source</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceDevice">
<db:title>void QMediaPlayer::setSourceDevice(QIODevice *<db:emphasis>device</db:emphasis>, const QUrl &amp;<db:emphasis>sourceUrl</db:emphasis> = QUrl())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSourceDevice</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>sourceUrl</db:parameter>
<db:initializer>QUrl()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSourceDevice(QIODevice *device, const QUrl &amp;sourceUrl)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current source <db:code role="parameter">device</db:code>.</db:para>
<db:para>The media data will be read from <db:code role="parameter">device</db:code>. The <db:code role="parameter">sourceUrl</db:code> can be provided to resolve additional information about the media, mime type etc. The <db:code role="parameter">device</db:code> must be open and readable.</db:para>
<db:para>For macOS the <db:code role="parameter">device</db:code> should also be seek-able.</db:para>
<db:note>
<db:para>This function returns immediately after recording the specified source of the media. It does not wait for the media to finish loading and does not check for errors. Listen for the <db:link xlink:href="qmediaplayer.xml#mediaStatusChanged">mediaStatusChanged</db:link>() and <db:link xlink:href="qmediaplayer.xml#error">error</db:link>() signals to be notified when the media is loaded, and if an error occurs during loading.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#sourceDevice">sourceDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVideoSink">
<db:title>void QMediaPlayer::setVideoSink(QVideoSink *<db:emphasis>sink</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoSink</db:methodname>
<db:methodparam>
<db:type>QVideoSink *</db:type>
<db:parameter>sink</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoSink(QVideoSink *sink)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">sink</db:code> to be the <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> instance to retrieve video data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#videoSink">videoSink</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceChanged">
<db:title>void QMediaPlayer::sourceChanged(const QUrl &amp;<db:emphasis>media</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>sourceChanged</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">source</db:synopsisinfo>
<db:synopsisinfo role="signature">void sourceChanged(const QUrl &amp;media)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the media source has been changed to <db:code role="parameter">media</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#source-prop">source</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="sourceDevice">
<db:title>const QIODevice *QMediaPlayer::sourceDevice() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QIODevice *</db:type>
<db:methodname>sourceDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QIODevice * sourceDevice() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stream source of media data.</db:para>
<db:para>This is only valid if a stream was passed to <db:link xlink:href="qmediaplayer.xml#setSource">setSource</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#setSourceDevice">setSourceDevice</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#setSource">setSource</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QMediaPlayer::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop playing, and reset the play position to the beginning.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#play">play</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#pause">pause</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoSink">
<db:title>QVideoSink *QMediaPlayer::videoSink() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVideoSink *</db:type>
<db:methodname>videoSink</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVideoSink * videoSink() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> instance.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#setVideoSink">setVideoSink</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
