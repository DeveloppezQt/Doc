<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaPlayer Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class allows the playing of a media source.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaPlayer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediaobject.xml" xlink:role="class">QMediaObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaPlayer is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_playback</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class is a high level media playback class. It can be used to playback such content as songs, movies and internet radio. The content to playback is specified as a <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> object, which can be thought of as a main or canonical URL with additional information attached. When provided with a <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> playback may be able to commence.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
connect(player, SIGNAL(positionChanged(qint64)), this, SLOT(positionChanged(qint64)));
player-&amp;gt;setMedia(QUrl::fromLocalFile(&quot;/Users/me/Music/coolsong.mp3&quot;));
player-&amp;gt;setVolume(50);
player-&amp;gt;play();
</db:programlisting>
<db:para><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> can be used with <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> for video rendering and <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link> for accessing playlist functionality.</db:para>
<db:programlisting language="cpp">playlist = new QMediaPlaylist;
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie1.mp4&quot;));
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie2.mp4&quot;));
playlist-&amp;gt;addMedia(QUrl(&quot;http://example.com/movie3.mp4&quot;));
playlist-&amp;gt;setCurrentIndex(1);

player = new QMediaPlayer;
player-&amp;gt;setPlaylist(playlist);

videoWidget = new QVideoWidget;
player-&amp;gt;setVideoOutput(videoWidget);
videoWidget-&amp;gt;show();

player-&amp;gt;play();
</db:programlisting>
<db:para>Since <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> is a <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>, you can use several of the <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> functions for things like:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Accessing the currently playing media's metadata (<db:link xlink:href="qmediaobject.xml#metaData">QMediaObject::metaData</db:link>() and <db:link xlink:href="qmediametadata.xml">predefined meta-data keys</db:link>)</db:para>
</db:listitem>
<db:listitem>
<db:para>Checking to see if the media playback service is currently available (<db:link xlink:href="qmediaobject.xml#availability">QMediaObject::availability</db:link>())</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml">QMediaObject</db:link></db:member>
<db:member><db:link xlink:href="qmediaservice.xml">QMediaService</db:link></db:member>
<db:member><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link></db:member>
<db:member><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QMediaPlayer::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ResourceError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FormatError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NetworkError</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AccessDeniedError</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ServiceMissingError</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MediaIsPlaylist</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines a media player error condition.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A media resource couldn't be resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The format of a media resource isn't (fully) supported. Playback may still be possible, but without an audio or video component.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NetworkError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>A network error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::AccessDeniedError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>There are not the appropriate permissions to play a media resource.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::ServiceMissingError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A valid playback service was not found, playback cannot proceed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Flag-enum">
<db:title>enum QMediaPlayer::Flag</db:title>
<db:bridgehead renderas="sect2">flags QMediaPlayer::Flags</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Flag</db:enumname>
<db:enumitem>
<db:enumidentifier>LowLatency</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StreamPlayback</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>VideoSurface</db:enumidentifier>
<db:enumvalue>0x04</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QMediaPlayer::Flags</db:typedefname>
</db:typedefsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::LowLatency</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>The player is expected to be used with simple audio formats, but playback should start without significant delay. Such playback service can be used for beeps, ringtones, etc.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::StreamPlayback</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>The player is expected to play <db:link xlink:href="qiodevice.xml">QIODevice</db:link> based streams. If passed to <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> constructor, the service supporting streams playback will be chosen.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::VideoSurface</db:code></db:para>
</db:td>
<db:td><db:code>0x04</db:code></db:td>
<db:td>
<db:para>The player is expected to be able to render to a <db:link xlink:href="qabstractvideosurface.xml">QAbstractVideoSurface</db:link> <db:link xlink:href="qmediaplayer.xml#setVideoOutput">output</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Flags</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Flag&gt;. </db:code>It stores an OR combination of <db:code>Flag</db:code> values.</db:para>
</db:section>
<db:section xml:id="MediaStatus-enum">
<db:title>enum QMediaPlayer::MediaStatus</db:title>
<db:enumsynopsis>
<db:enumname>MediaStatus</db:enumname>
<db:enumitem>
<db:enumidentifier>UnknownMediaStatus</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>NoMedia</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadingMedia</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>LoadedMedia</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>StalledMedia</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BufferingMedia</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BufferedMedia</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>EndOfMedia</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>InvalidMedia</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the status of a media player's current media.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::UnknownMediaStatus</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The status of the media cannot be determined.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::NoMedia</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The is no current media. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::LoadingMedia</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The current media is being loaded. The player may be in any state.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::LoadedMedia</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The current media has been loaded. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::StalledMedia</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Playback of the current media has stalled due to insufficient buffering or some other temporary interruption. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#State-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::BufferingMedia</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The player is buffering data but has enough data buffered for playback to continue for the immediate future. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#State-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::BufferedMedia</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The player has fully buffered the current media. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">PlayingState</db:link> or <db:link xlink:href="qmediaplayer.xml#State-enum">PausedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::EndOfMedia</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Playback has reached the end of the current media. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::InvalidMedia</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>The current media cannot be played. The player is in the <db:link xlink:href="qmediaplayer.xml#State-enum">StoppedState</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QMediaPlayer::State</db:title>
<db:enumsynopsis>
<db:enumname>State</db:enumname>
<db:enumitem>
<db:enumidentifier>StoppedState</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PlayingState</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PausedState</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>Defines the current state of a media player.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The media player is not playing content, playback will begin from the start of the current track.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::PlayingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The media player is currently playing content.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:emphasis>::PausedState</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The media player has paused playback, playback of the current track will resume from the position the player was paused at.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="audioAvailable-prop">
<db:title>[read-only] audioAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>audioAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isAudioAvailable</db:synopsisinfo>
<db:synopsisinfo role="notifier">audioAvailableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the audio availabilty status for the current media.</db:para>
<db:para>As the life time of <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> can be longer than the playback of one <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link>, this property may change over time, the <db:link xlink:href="qmediaplayer.xml#audioAvailableChanged">audioAvailableChanged</db:link> signal can be used to monitor it's status.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isAudioAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#audioAvailableChanged">audioAvailableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="audioRole-prop">
<db:title>[since 5.6] audioRole : QAudio::Role</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QAudio::Role</db:type>
<db:varname>audioRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">audioRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setAudioRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">audioRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the role of the audio stream played by the media player.</db:para>
<db:para>It can be set to specify the type of audio being played, allowing the system to make appropriate decisions when it comes to volume, routing or post-processing.</db:para>
<db:para>The audio role must be set before calling <db:link xlink:href="qmediaplayer.xml#setMedia">setMedia</db:link>().</db:para>
<db:para><db:link xlink:href="qmediaplayer.xml#customAudioRole-prop">customAudioRole</db:link> is cleared when this property is set to anything other than <db:link xlink:href="qaudio.xml#Role-enum">QAudio::CustomRole</db:link>.</db:para>
<db:para>This property was introduced in Qt 5.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaudio.xml#Role-enum">QAudio::Role</db:link></db:type> <db:emphasis role="bold">audioRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAudioRole</db:emphasis>(<db:type><db:link xlink:href="qaudio.xml#Role-enum">QAudio::Role</db:link></db:type> <db:emphasis>audioRole</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#audioRoleChanged">audioRoleChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qaudio.xml#Role-enum">QAudio::Role</db:link></db:type> <db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#supportedAudioRoles">supportedAudioRoles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferStatus-prop">
<db:title>[read-only] bufferStatus : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>bufferStatus</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">bufferStatus</db:synopsisinfo>
<db:synopsisinfo role="notifier">bufferStatusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the percentage of the temporary buffer filled before playback begins or resumes, from <db:code>0</db:code> (empty) to <db:code>100</db:code> (full).</db:para>
<db:para>When the player object is buffering; this property holds the percentage of the temporary buffer that is filled. The buffer will need to reach 100% filled before playback can start or resume, at which time <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>() will return <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">BufferedMedia</db:link> or <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">BufferingMedia</db:link>. If the value is anything lower than <db:code>100</db:code>, <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>() will return <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">StalledMedia</db:link>.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">bufferStatus</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#bufferStatusChanged">bufferStatusChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>percentFilled</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentMedia-prop">
<db:title>[read-only] currentMedia : const QMediaContent</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaContent</db:type>
<db:varname>currentMedia</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">currentMedia</db:synopsisinfo>
<db:synopsisinfo role="notifier">currentMediaChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current active media content being played by the player object. This value could be different from <db:link xlink:href="qmediaplayer.xml#media-prop">QMediaPlayer::media</db:link> property if a playlist is used. In this case currentMedia indicates the current media content being processed by the player, while <db:link xlink:href="qmediaplayer.xml#media-prop">QMediaPlayer::media</db:link> property contains the original playlist.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> <db:emphasis role="bold">currentMedia</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#currentMediaChanged">currentMediaChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> &amp;<db:emphasis>media</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#media-prop">media</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="customAudioRole-prop">
<db:title>[since 5.11] customAudioRole : QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>customAudioRole</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">customAudioRole</db:synopsisinfo>
<db:synopsisinfo role="setter">setCustomAudioRole</db:synopsisinfo>
<db:synopsisinfo role="notifier">customAudioRoleChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the role of the audio stream played by the media player.</db:para>
<db:para>It can be set to specify the type of audio being played when the backend supports audio roles unknown to Qt. Specifying a role allows the system to make appropriate decisions when it comes to volume, routing or post-processing.</db:para>
<db:para>The audio role must be set before calling <db:link xlink:href="qmediaplayer.xml#setMedia">setMedia</db:link>().</db:para>
<db:para><db:link xlink:href="qmediaplayer.xml#audioRole-prop">audioRole</db:link> is set to <db:link xlink:href="qaudio.xml#Role-enum">QAudio::CustomRole</db:link> when this property is set.</db:para>
<db:para>This property was introduced in Qt 5.11.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">customAudioRole</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setCustomAudioRole</db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>audioRole</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#customAudioRoleChanged">customAudioRoleChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>role</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#supportedCustomAudioRoles">supportedCustomAudioRoles</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration-prop">
<db:title>[read-only] duration : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>duration</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">duration</db:synopsisinfo>
<db:synopsisinfo role="notifier">durationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the duration of the current media.</db:para>
<db:para>The value is the total playback time in milliseconds of the current media. The value may change across the life time of the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object and may not be available when initial playback begins, connect to the <db:link xlink:href="qmediaplayer.xml#durationChanged">durationChanged</db:link>() signal to receive status notifications.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">duration</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#durationChanged">durationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>duration</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>error</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">errorString</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a string describing the last error condition.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="media-prop">
<db:title>media : QMediaContent</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaContent</db:type>
<db:varname>media</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">media</db:synopsisinfo>
<db:synopsisinfo role="setter">setMedia</db:synopsisinfo>
<db:synopsisinfo role="notifier">mediaChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the active media source being used by the player object.</db:para>
<db:para>The player object will use the <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> for selection of the content to be played.</db:para>
<db:para>By default this property has a null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link>.</db:para>
<db:para>Setting this property to a null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> <db:emphasis role="bold">media</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#setMedia">setMedia</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> &amp;<db:emphasis>media</db:emphasis>, <db:type><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:type> *<db:emphasis>stream</db:emphasis> = nullptr)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#mediaChanged">mediaChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:type> &amp;<db:emphasis>media</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#currentMedia-prop">currentMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaStatus-prop">
<db:title>[read-only] mediaStatus : const MediaStatus</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>MediaStatus</db:type>
<db:varname>mediaStatus</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">mediaStatus</db:synopsisinfo>
<db:synopsisinfo role="notifier">mediaStatusChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the status of the current media stream.</db:para>
<db:para>The stream status describes how the playback of the current stream is progressing.</db:para>
<db:para>By default this property is <db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::NoMedia</db:link></db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::MediaStatus</db:link></db:type> <db:emphasis role="bold">mediaStatus</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#mediaStatusChanged">mediaStatusChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaplayer.xml#MediaStatus-enum">QMediaPlayer::MediaStatus</db:link></db:type> <db:emphasis>status</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#state-prop">state</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="muted-prop">
<db:title>muted : bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>muted</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isMuted</db:synopsisinfo>
<db:synopsisinfo role="setter">setMuted</db:synopsisinfo>
<db:synopsisinfo role="notifier">mutedChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the muted state of the current media.</db:para>
<db:para>The value will be true if the playback volume is muted; otherwise false.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isMuted</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setMuted</db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#mutedChanged">mutedChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>muted</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playbackRate-prop">
<db:title>playbackRate : qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>playbackRate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">playbackRate</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaybackRate</db:synopsisinfo>
<db:synopsisinfo role="notifier">playbackRateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the playback rate of the current media.</db:para>
<db:para>This value is a multiplier applied to the media's standard play rate. By default this value is 1.0, indicating that the media is playing at the standard pace. Values higher than 1.0 will increase the rate of play. Values less than zero can be set and indicate the media will rewind at the multiplier of the standard pace.</db:para>
<db:para>Not all playback services support change of the playback rate. It is framework defined as to the status and quality of audio and video while fast forwarding or rewinding.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">playbackRate</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaybackRate</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#playbackRateChanged">playbackRateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>rate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="playlist-prop">
<db:title>playlist : QMediaPlaylist*</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QMediaPlaylist*</db:type>
<db:varname>playlist</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">playlist</db:synopsisinfo>
<db:synopsisinfo role="setter">setPlaylist</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the media playlist being used by the player object.</db:para>
<db:para>The player object will use the current playlist item for selection of the content to be played.</db:para>
<db:para>By default this property is set to null.</db:para>
<db:para>If the media playlist is used as a source, <db:link xlink:href="qmediaplayer.xml#currentMedia-prop">QMediaPlayer::currentMedia</db:link> is updated with a current playlist item. The current source should be selected with <db:link xlink:href="qmediaplaylist.xml#setCurrentIndex">QMediaPlaylist::setCurrentIndex</db:link>(int) instead of <db:link xlink:href="qmediaplayer.xml#setMedia">QMediaPlayer::setMedia</db:link>(), otherwise the current playlist will be discarded.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:type> *<db:emphasis role="bold">playlist</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPlaylist</db:emphasis>(<db:type><db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link></db:type> *<db:emphasis>playlist</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="position-prop">
<db:title>position : qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>position</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">position</db:synopsisinfo>
<db:synopsisinfo role="setter">setPosition</db:synopsisinfo>
<db:synopsisinfo role="notifier">positionChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the playback position of the current media.</db:para>
<db:para>The value is the current playback position, expressed in milliseconds since the beginning of the media. Periodically changes in the position will be indicated with the signal <db:link xlink:href="qmediaplayer.xml#positionChanged">positionChanged</db:link>(), the interval between updates can be set with <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link>'s method <db:link xlink:href="qmediaobject.xml#notifyInterval-prop">setNotifyInterval</db:link>().</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">position</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setPosition</db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#positionChanged">positionChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qtglobal.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis>position</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="seekable-prop">
<db:title>[read-only] seekable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>seekable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isSeekable</db:synopsisinfo>
<db:synopsisinfo role="notifier">seekableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the seek-able status of the current media</db:para>
<db:para>If seeking is supported this property will be true; false otherwise. The status of this property may change across the life time of the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> object, use the <db:link xlink:href="qmediaplayer.xml#seekableChanged">seekableChanged</db:link> signal to monitor changes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isSeekable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#seekableChanged">seekableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>seekable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>State</db:type>
<db:varname>state</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">state</db:synopsisinfo>
<db:synopsisinfo role="notifier">stateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the media player's playback state.</db:para>
<db:para>By default this property is QMediaPlayer::Stopped</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qmediaplayer.xml#State-enum">QMediaPlayer::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qmediaplayer.xml#State-enum">QMediaPlayer::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#play">play</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#pause">pause</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoAvailable-prop">
<db:title>[read-only] videoAvailable : const bool</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>bool</db:type>
<db:varname>videoAvailable</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">isVideoAvailable</db:synopsisinfo>
<db:synopsisinfo role="notifier">videoAvailableChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video availability status for the current media.</db:para>
<db:para>If available, the <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> class can be used to view the video. As the life time of <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> can be longer than the playback of one <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link>, this property may change over time, the <db:link xlink:href="qmediaplayer.xml#videoAvailableChanged">videoAvailableChanged</db:link> signal can be used to monitor it's status.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isVideoAvailable</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#videoAvailableChanged">videoAvailableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>videoAvailable</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link></db:member>
<db:member><db:link xlink:href="qmediacontent.xml">QMediaContent</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volume-prop">
<db:title>volume : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>volume</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">volume</db:synopsisinfo>
<db:synopsisinfo role="setter">setVolume</db:synopsisinfo>
<db:synopsisinfo role="notifier">volumeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current playback volume.</db:para>
<db:para>The playback volume is scaled linearly, ranging from <db:code>0</db:code> (silence) to <db:code>100</db:code> (full volume). Values outside this range will be clamped.</db:para>
<db:para>By default the volume is <db:code>100</db:code>.</db:para>
<db:para>UI volume controls should usually be scaled nonlinearly. For example, using a logarithmic scale will produce linear changes in perceived loudness, which is what a user would normally expect from a volume control. See <db:link xlink:href="qaudio.xml#convertVolume">QAudio::convertVolume</db:link>() for more details.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">volume</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setVolume</db:emphasis>(<db:type>int</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaplayer.xml#volumeChanged">volumeChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>volume</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaPlayer">
<db:title>[explicit] QMediaPlayer::QMediaPlayer(QObject *<db:emphasis>parent</db:emphasis> = nullptr, QMediaPlayer::Flags <db:emphasis>flags</db:emphasis> = Flags())</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaPlayer</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMediaPlayer::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlayer(QObject *parent, QMediaPlayer::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> instance parented to <db:code role="parameter">parent</db:code> and with <db:code role="parameter">flags</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaPlayer">
<db:title>[virtual] QMediaPlayer::~QMediaPlayer()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaPlayer</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaPlayer()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the player object.</db:para>
</db:section>
<db:section xml:id="audioAvailableChanged">
<db:title>void QMediaPlayer::audioAvailableChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioAvailableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioAvailable</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioAvailableChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the availability of audio content has changed to <db:code role="parameter">available</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#audioAvailable-prop">audioAvailable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="audioRoleChanged">
<db:title>[since 5.6] void QMediaPlayer::audioRoleChanged(QAudio::Role <db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>audioRoleChanged</db:methodname>
<db:methodparam>
<db:type>QAudio::Role</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">audioRole</db:synopsisinfo>
<db:synopsisinfo role="signature">void audioRoleChanged(QAudio::Role role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the audio <db:code role="parameter">role</db:code> of the media player has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#audioRole-prop">audioRole</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="availability">
<db:title>[override virtual] QMultimedia::AvailabilityStatus QMediaPlayer::availability() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMultimedia::AvailabilityStatus</db:type>
<db:methodname>availability</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::AvailabilityStatus availability() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qmediaobject.xml#availability" role="function">QMediaObject::availability() const</db:link>.</db:para>
</db:section>
<db:section xml:id="bufferStatusChanged">
<db:title>void QMediaPlayer::bufferStatusChanged(int <db:emphasis>percentFilled</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bufferStatusChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>percentFilled</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">bufferStatus</db:synopsisinfo>
<db:synopsisinfo role="signature">void bufferStatusChanged(int percentFilled)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the amount of the local buffer filled as a percentage by <db:code role="parameter">percentFilled</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#bufferStatus-prop">bufferStatus</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="currentMediaChanged">
<db:title>void QMediaPlayer::currentMediaChanged(const QMediaContent &amp;<db:emphasis>media</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>currentMediaChanged</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">currentMedia</db:synopsisinfo>
<db:synopsisinfo role="signature">void currentMediaChanged(const QMediaContent &amp;media)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the current playing content has been changed to <db:code role="parameter">media</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#currentMedia-prop">currentMedia</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#currentMedia-prop">currentMedia</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#mediaChanged">mediaChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentNetworkConfiguration">
<db:title>QNetworkConfiguration QMediaPlayer::currentNetworkConfiguration() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNetworkConfiguration</db:type>
<db:methodname>currentNetworkConfiguration</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkConfiguration currentNetworkConfiguration() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current network access point in use. If a default contructed <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> is returned this feature is not available or that none of the current supplied configurations are in use.</db:para>
</db:section>
<db:section xml:id="customAudioRoleChanged">
<db:title>[since 5.11] void QMediaPlayer::customAudioRoleChanged(const QString &amp;<db:emphasis>role</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>customAudioRoleChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>role</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">customAudioRole</db:synopsisinfo>
<db:synopsisinfo role="signature">void customAudioRoleChanged(const QString &amp;role)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the audio <db:code role="parameter">role</db:code> of the media player has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#customAudioRole-prop">customAudioRole</db:link>. </db:para>
</db:note>
<db:para>This function was introduced in Qt 5.11.</db:para>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QMediaPlayer::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>durationChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>duration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">duration</db:synopsisinfo>
<db:synopsisinfo role="signature">void durationChanged(qint64 duration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the duration of the content has changed to <db:code role="parameter">duration</db:code>, expressed in milliseconds.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#duration-prop">duration</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="error">
<db:title>QMediaPlayer::Error QMediaPlayer::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMediaPlayer::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaPlayer::Error error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current error state.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QMediaPlayer::error(QMediaPlayer::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QMediaPlayer::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> condition has occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#error-prop">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasSupport">
<db:title>[static] QMultimedia::SupportEstimate QMediaPlayer::hasSupport(const QString &amp;<db:emphasis>mimeType</db:emphasis>, const QStringList &amp;<db:emphasis>codecs</db:emphasis> = QStringList(), QMediaPlayer::Flags <db:emphasis>flags</db:emphasis> = Flags())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QMultimedia::SupportEstimate</db:type>
<db:methodname>hasSupport</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>mimeType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>codecs</db:parameter>
<db:initializer>QStringList()</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QMediaPlayer::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::SupportEstimate hasSupport(const QString &amp;mimeType, const QStringList &amp;codecs, QMediaPlayer::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the level of support a media player has for a <db:code role="parameter">mimeType</db:code> and a set of <db:code role="parameter">codecs</db:code>.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument allows additional requirements such as performance indicators to be specified.</db:para>
</db:section>
<db:section xml:id="mediaChanged">
<db:title>void QMediaPlayer::mediaChanged(const QMediaContent &amp;<db:emphasis>media</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaChanged</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">media</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaChanged(const QMediaContent &amp;media)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the media source has been changed to <db:code role="parameter">media</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#media-prop">media</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#media-prop">media</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaplayer.xml#currentMediaChanged">currentMediaChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaStatusChanged">
<db:title>void QMediaPlayer::mediaStatusChanged(QMediaPlayer::MediaStatus <db:emphasis>status</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mediaStatusChanged</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::MediaStatus</db:type>
<db:parameter>status</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">mediaStatus</db:synopsisinfo>
<db:synopsisinfo role="signature">void mediaStatusChanged(QMediaPlayer::MediaStatus status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">status</db:code> of the current media has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#mediaStatus-prop">mediaStatus</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mediaStream">
<db:title>const QIODevice *QMediaPlayer::mediaStream() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QIODevice *</db:type>
<db:methodname>mediaStream</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QIODevice * mediaStream() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stream source of media data.</db:para>
<db:para>This is only valid if a stream was passed to <db:link xlink:href="qmediaplayer.xml#setMedia">setMedia</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#setMedia">setMedia</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QMediaPlayer::mutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mutedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">muted</db:synopsisinfo>
<db:synopsisinfo role="signature">void mutedChanged(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the mute state has changed to <db:code role="parameter">muted</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#muted-prop">muted</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="networkConfigurationChanged">
<db:title>void QMediaPlayer::networkConfigurationChanged(const QNetworkConfiguration &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>networkConfigurationChanged</db:methodname>
<db:methodparam>
<db:type>const QNetworkConfiguration &amp;</db:type>
<db:parameter>configuration</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void networkConfigurationChanged(const QNetworkConfiguration &amp;configuration)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal that the active in use network access point has been changed to <db:code role="parameter">configuration</db:code> and all subsequent network access will use this <db:code role="parameter">configuration</db:code>.</db:para>
</db:section>
<db:section xml:id="pause">
<db:title>void QMediaPlayer::pause()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pause</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pause()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pause playing the current source.</db:para>
</db:section>
<db:section xml:id="play">
<db:title>void QMediaPlayer::play()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>play</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void play()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Start or resume playing the current source.</db:para>
</db:section>
<db:section xml:id="playbackRateChanged">
<db:title>void QMediaPlayer::playbackRateChanged(qreal <db:emphasis>rate</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>playbackRateChanged</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>rate</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">playbackRate</db:synopsisinfo>
<db:synopsisinfo role="signature">void playbackRateChanged(qreal rate)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the <db:link xlink:href="qmediaplayer.xml#playbackRate-prop">playbackRate</db:link> has changed to <db:code role="parameter">rate</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#playbackRate-prop">playbackRate</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="positionChanged">
<db:title>void QMediaPlayer::positionChanged(qint64 <db:emphasis>position</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>positionChanged</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>position</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">position</db:synopsisinfo>
<db:synopsisinfo role="signature">void positionChanged(qint64 position)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the position of the content has changed to <db:code role="parameter">position</db:code>, expressed in milliseconds.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#position-prop">position</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="seekableChanged">
<db:title>void QMediaPlayer::seekableChanged(bool <db:emphasis>seekable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>seekableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>seekable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">seekable</db:synopsisinfo>
<db:synopsisinfo role="signature">void seekableChanged(bool seekable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals the <db:code role="parameter">seekable</db:code> status of the player object has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#seekable-prop">seekable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="setMedia">
<db:title>void QMediaPlayer::setMedia(const QMediaContent &amp;<db:emphasis>media</db:emphasis>, QIODevice *<db:emphasis>stream</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMedia</db:methodname>
<db:methodparam>
<db:type>const QMediaContent &amp;</db:type>
<db:parameter>media</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>stream</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">media</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMedia(const QMediaContent &amp;media, QIODevice *stream)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the current <db:code role="parameter">media</db:code> source.</db:para>
<db:para>If a <db:code role="parameter">stream</db:code> is supplied; media data will be read from it instead of resolving the media source. In this case the media source may still be used to resolve additional information about the media such as mime type. The <db:code role="parameter">stream</db:code> must be open and readable.</db:para>
<db:para>Setting the media to a null <db:link xlink:href="qmediacontent.xml">QMediaContent</db:link> will cause the player to discard all information relating to the current media source and to cease all I/O operations related to that media.</db:para>
<db:note>
<db:para>This function returns immediately after recording the specified source of the media. It does not wait for the media to finish loading and does not check for errors. Listen for the <db:link xlink:href="qmediaplayer.xml#mediaStatusChanged">mediaStatusChanged</db:link>() and <db:link xlink:href="qmediaplayer.xml#error">error</db:link>() signals to be notified when the media is loaded and when an error occurs during loading.</db:para>
</db:note>
<db:para>Since Qt 5.12.2, the url scheme <db:code>gst-pipeline</db:code> provides custom pipelines for the GStreamer backend.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer;
player-&amp;gt;setMedia(QUrl(&quot;gst-pipeline: videotestsrc ! autovideosink&quot;));
player-&amp;gt;play();
</db:programlisting>
<db:para>If the pipeline contains a video sink element named <db:code>qtvideosink</db:code>, current <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> can be used to render the video.</db:para>
<db:para>If the pipeline contains appsrc element, it will be used to push data from <db:code role="parameter">stream</db:code>.</db:para>
<db:programlisting language="cpp">QImage img(&quot;images/qt-logo.png&quot;);
img = img.convertToFormat(QImage::Format_ARGB32);
QByteArray ba(reinterpret_cast&amp;lt;const char *&amp;gt;(img.bits()), img.sizeInBytes());
QBuffer buffer(&amp;amp;ba);
buffer.open(QIODevice::ReadOnly);
player = new QMediaPlayer;
player-&amp;gt;setMedia(QUrl(&quot;gst-pipeline: appsrc blocksize=4294967295 ! \
    video/x-raw,format=BGRx,framerate=30/1,width=200,height=147 ! \
    coloreffects preset=heat ! videoconvert ! video/x-raw,format=I420 ! jpegenc ! rtpjpegpay ! \
    udpsink host=127.0.0.1 port=5000&quot;), &amp;amp;buffer);
player-&amp;gt;play();

QMediaPlayer *receiver = new QMediaPlayer;
videoWidget = new QVideoWidget;
receiver-&amp;gt;setVideoOutput(videoWidget);
receiver-&amp;gt;setMedia(QUrl(&quot;gst-pipeline: udpsrc port=5000 ! \
    application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! \
    xvimagesink name=qtvideosink&quot;));
receiver-&amp;gt;play();
// Content will be shown in this widget.
videoWidget-&amp;gt;show();
</db:programlisting>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qmediaplayer.xml#media-prop">media</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#media-prop">media</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNetworkConfigurations">
<db:title>void QMediaPlayer::setNetworkConfigurations(const QList&lt;QNetworkConfiguration&gt; &amp;<db:emphasis>configurations</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNetworkConfigurations</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QNetworkConfiguration&gt; &amp;</db:type>
<db:parameter>configurations</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNetworkConfigurations(const QList&lt;QNetworkConfiguration&gt; &amp;configurations)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the network access points for remote media playback. <db:code role="parameter">configurations</db:code> contains, in ascending preferential order, a list of configuration that can be used for network access.</db:para>
<db:para>This will invalidate the choice of previous configurations.</db:para>
</db:section>
<db:section xml:id="setVideoOutput">
<db:title>void QMediaPlayer::setVideoOutput(QVideoWidget *<db:emphasis>output</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoOutput</db:methodname>
<db:methodparam>
<db:type>QVideoWidget *</db:type>
<db:parameter>output</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoOutput(QVideoWidget *output)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attach a <db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link> video <db:code role="parameter">output</db:code> to the media player.</db:para>
<db:para>If the media player has already video output attached, it will be replaced with a new one.</db:para>
</db:section>
<db:section xml:id="setVideoOutput-1">
<db:title>void QMediaPlayer::setVideoOutput(QGraphicsVideoItem *<db:emphasis>output</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoOutput</db:methodname>
<db:methodparam>
<db:type>QGraphicsVideoItem *</db:type>
<db:parameter>output</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoOutput(QGraphicsVideoItem *output)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Attach a <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> video <db:code role="parameter">output</db:code> to the media player.</db:para>
<db:para>If the media player has already video output attached, it will be replaced with a new one.</db:para>
</db:section>
<db:section xml:id="setVideoOutput-2">
<db:title>void QMediaPlayer::setVideoOutput(QAbstractVideoSurface *<db:emphasis>surface</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setVideoOutput</db:methodname>
<db:methodparam>
<db:type>QAbstractVideoSurface *</db:type>
<db:parameter>surface</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVideoOutput(QAbstractVideoSurface *surface)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a video <db:code role="parameter">surface</db:code> as the video output of a media player.</db:para>
<db:para>If a video output has already been set on the media player the new surface will replace it.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QMediaPlayer::stateChanged(QMediaPlayer::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">state</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QMediaPlayer::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the <db:code role="parameter">state</db:code> of the Player object has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#state-prop">state</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QMediaPlayer::stop()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stop playing, and reset the play position to the beginning.</db:para>
</db:section>
<db:section xml:id="supportedAudioRoles">
<db:title>[since 5.6] QList&lt;QAudio::Role&gt; QMediaPlayer::supportedAudioRoles() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QAudio::Role&gt;</db:type>
<db:methodname>supportedAudioRoles</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QAudio::Role&gt; supportedAudioRoles() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported audio roles.</db:para>
<db:para>If setting the audio role is not supported, an empty list is returned.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#audioRole-prop">audioRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="supportedCustomAudioRoles">
<db:title>[since 5.11] QStringList QMediaPlayer::supportedCustomAudioRoles() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedCustomAudioRoles</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedCustomAudioRoles() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of supported custom audio roles. An empty list may indicate that the supported custom audio roles aren't known. The list may not be complete.</db:para>
<db:para>This function was introduced in Qt 5.11.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#customAudioRole-prop">customAudioRole</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="videoAvailableChanged">
<db:title>void QMediaPlayer::videoAvailableChanged(bool <db:emphasis>videoAvailable</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>videoAvailableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>videoAvailable</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">videoAvailable</db:synopsisinfo>
<db:synopsisinfo role="signature">void videoAvailableChanged(bool videoAvailable)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the availability of visual content has changed to <db:code role="parameter">videoAvailable</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#videoAvailable-prop">videoAvailable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QMediaPlayer::volumeChanged(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">volume</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeChanged(int volume)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the playback volume has changed to <db:code role="parameter">volume</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaplayer.xml#volume-prop">volume</db:link>. </db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QMediaPlayer</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="supportedMimeTypes">
<db:title>[static] QStringList QMediaPlayer::supportedMimeTypes(QMediaPlayer::Flags <db:emphasis>flags</db:emphasis> = Flags())</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>supportedMimeTypes</db:methodname>
<db:methodparam>
<db:type>QMediaPlayer::Flags</db:type>
<db:parameter>flags</db:parameter>
<db:initializer>Flags()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList supportedMimeTypes(QMediaPlayer::Flags flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of MIME types supported by the media player.</db:para>
<db:para>The <db:code role="parameter">flags</db:code> argument causes the resultant list to be restricted to MIME types which can be supported given additional requirements, such as performance indicators.</db:para>
<db:para>This function may not return useful results on some platforms, and support for a specific file of a given mime type is not guaranteed even if the mime type is in general supported. In addition, in some cases this function will need to load all available media plugins and query them for their support, which may take some time.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
