<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick TableViews examples - Pixelator</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Pixelator example shows how a QML <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link> and a delegate can be used for custom table models.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qt-pixelator.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
<db:programlisting language="cpp">class ImageModel : public QAbstractTableModel
{
    Q_OBJECT
    Q_PROPERTY(QString source READ source WRITE setSource NOTIFY sourceChanged)
    QML_ELEMENT
public:
    ImageModel(QObject *parent = nullptr);

    QString source() const;
    void setSource(const QString &amp;amp;source);

    int rowCount(const QModelIndex &amp;amp;parent = QModelIndex()) const override;
    int columnCount(const QModelIndex &amp;amp;parent = QModelIndex()) const override;

    QVariant data(const QModelIndex &amp;amp;index, int role = Qt::DisplayRole) const override;

    QVariant headerData(int /* section */, Qt::Orientation /* orientation */,
                        int role) const override;

signals:
    void sourceChanged();

private:
    QString m_source;
    QImage m_image;
};
</db:programlisting>
<db:para>We only require a simple, read-only table model. Thus, we need to implement functions to indicate the dimensions of the image and supply data to the <db:link xlink:href="qml-qtquick-tableview.xml">TableView</db:link>. We use the <db:link xlink:href="properties.xml">Qt Property System</db:link> and a source property as <db:code>QString</db:code> to set the path of the image. We also add the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> macro to expose the model to QML.</db:para>
<db:programlisting language="cpp">void ImageModel::setSource(const QString &amp;amp;source)
{
    if (m_source == source)
        return;

    beginResetModel();
    m_source = source;
    m_image.load(m_source);
    endResetModel();
}
</db:programlisting>
<db:para>Here we load the image when the source path is set. When the source path has changed, we need to call <db:code>beginResetModel()</db:code> before. After the image has been loaded, we need to call <db:code>endResetModel()</db:code>.</db:para>
<db:programlisting language="cpp">int ImageModel::rowCount(const QModelIndex &amp;amp;parent) const
{
    if (parent.isValid())
        return 0;
    return m_image.height();
}

int ImageModel::columnCount(const QModelIndex &amp;amp;parent) const
{
    if (parent.isValid())
        return 0;
    return m_image.width();
}
</db:programlisting>
<db:para>The row and column count is set to image height and width, respectively.</db:para>
<db:programlisting language="cpp">QVariant ImageModel::data(const QModelIndex &amp;amp;index, int role) const
{
    if (!index.isValid() || role != Qt::DisplayRole)
        return QVariant();
    return qGray(m_image.pixel(index.column(), index.row()));
}
</db:programlisting>
<db:para>This overloaded function allows us to access the pixel data from the image. When we call this function with the display role, we return the pixel's gray value.</db:para>
<db:programlisting language="qml">Component {
    id: pixelDelegate

    Item {
        required property real display

        readonly property real gray: display / 255.0
        readonly property real size: 16

        implicitWidth: size
        implicitHeight: size
</db:programlisting>
<db:para>Each pixel in the <db:code>TableView</db:code> is displayed via a delegate component. It contains an item that has an implicit height and width defining the cell size of the table. It also has a property for the gray value of the pixel that is retrieved from the model.</db:para>
<db:programlisting language="qml">Rectangle {
    id: rect
    anchors.centerIn: parent
    color: &quot;#09102b&quot;
    radius: parent.size - parent.gray * parent.size
    implicitWidth: radius
    implicitHeight: radius
</db:programlisting>
<db:para>Inside the <db:code>Item</db:code>, there is a rounded <db:code>Rectangle</db:code> with the size and radius according to the pixel's gray value.</db:para>
<db:programlisting language="qml">MouseArea {
    anchors.fill: parent
    hoverEnabled: true
    onEntered: rect.color = &quot;#cecfd5&quot;
    onExited: colorAnimation.start()
}
</db:programlisting>
<db:para>For a little bit of interaction, we place a <db:code>MouseArea</db:code> inside the <db:code>Item</db:code> and change the Rectangle's color on mouse over.</db:para>
<db:programlisting language="qml">ColorAnimation on color {
    id: colorAnimation
    running: false
    to: &quot;#41cd52&quot;
    duration: 1500
}
</db:programlisting>
<db:para>The <db:code>Rectangle</db:code> also has a short color animation to fade between the colors when it is changed.</db:para>
<db:programlisting language="qml">TableView {
    id: tableView
    anchors.fill: parent
    model: ImageModel {
        source: &quot;:/qt.png&quot;
    }

    delegate: pixelDelegate
}
</db:programlisting>
<db:para>The <db:code>TableView</db:code> spans over the whole window and has an instance of our custom <db:code>ImageModel</db:code> attached.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/tableview/pixelator?h=5.15">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
