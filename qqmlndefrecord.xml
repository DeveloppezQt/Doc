<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlNdefRecord Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link> class implements the <db:link xlink:href="qml-qtnfc-ndefrecord.xml">NdefRecord</db:link> type in QML.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlNdefRecord</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtnfc-ndefrecord.xml" xlink:role="">NdefRecord</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QQmlNdefRecord is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link> class is the base class for all <db:link xlink:href="qml-qtnfc-ndefrecord.xml">NdefRecord</db:link> types in QML. To support a new NDEF record type in QML subclass this class and expose new properties, member functions and signals appropriate for the new record type. The following must be done to create a new NDEF record type in QML:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The subclass must have a <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro in its declaration.</db:para>
</db:listitem>
<db:listitem>
<db:para>The subclass must have an <db:link xlink:href="qobject.xml#Q_INVOKABLE">invokable</db:link> constructor that takes a <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link> and a <db:link xlink:href="qobject.xml">QObject</db:link> pointer.</db:para>
</db:listitem>
<db:listitem>
<db:para>The subclass must be declared as an NDEF record by expanding the <db:link xlink:href="qqmlndefrecord.xml#Q_DECLARE_NDEFRECORD">Q_DECLARE_NDEFRECORD</db:link>() macro in the implementation file of the subclass.</db:para>
</db:listitem>
<db:listitem>
<db:para>The subclass must be registered with QML.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For example the declaration of such a class may look like the following.</db:para>
<db:programlisting language="cpp">class QQmlNdefFooRecord : public QQmlNdefRecord
{
    Q_OBJECT

    Q_PROPERTY(int foo READ foo WRITE setFoo NOTIFY fooChanged)

public:
    explicit QQmlNdefFooRecord(QObject *parent = 0);
    Q_INVOKABLE QQmlNdefFooRecord(const QNdefRecord &amp;record, QObject *parent = 0);
    ~QQmlNdefFooRecord();

    int foo() const;
    void setFoo(int value);

signals:
    void fooChanged();
};
</db:programlisting>
<db:para>Within the implementation file the <db:link xlink:href="qqmlndefrecord.xml#Q_DECLARE_NDEFRECORD">Q_DECLARE_NDEFRECORD</db:link>() macro is expanded:</db:para>
<db:programlisting language="cpp">Q_DECLARE_NDEFRECORD(QQmlNdefFooRecord, QNdefRecord::ExternalRtd, &quot;com.example:f&quot;)
</db:programlisting>
<db:para>Finially the application or plugin code calls <db:link xlink:href="qqmlengine.xml#qmlRegisterType">qmlRegisterType</db:link>():</db:para>
<db:programlisting language="cpp">qmlRegisterType&lt;QQmlNdefFooRecord&gt;(uri, 1, 0, &quot;NdefFooRecord&quot;);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtnfc-ndefrecord.xml">NdefRecord</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="TypeNameFormat-enum">
<db:title>enum QQmlNdefRecord::TypeNameFormat</db:title>
<db:para>This enum describes the type name format of an NDEF record. The values of this enum are according to <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::TypeNameFormat</db:link></db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::Empty</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::Empty</db:code></db:td>
<db:td>
<db:para>An empty NDEF record, the record does not contain a payload.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::NfcRtd</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::NfcRtd</db:code></db:td>
<db:td>
<db:para>The NDEF record type is defined by an NFC RTD Specification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::Mime</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::Mime</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct described in RFC 2046.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::Uri</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::Uri</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct described in RFC 3986.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::ExternalRtd</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::ExternalRtd</db:code></db:td>
<db:td>
<db:para>The NDEF record type follows the construct for external type names described the NFC RTD Specification.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link></db:emphasis>::Unknown</db:code></db:para>
</db:td>
<db:td><db:code>QNdefRecord::Unknown</db:code></db:td>
<db:td>
<db:para>The NDEF record type is unknown.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="record-prop">
<db:title>record : QNdefRecord</db:title>
<db:para>This property hold the NDEF record that this class represents.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#record">record</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#setRecord">setRecord</db:link></db:emphasis>(const <db:type><db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link></db:type> &amp;<db:emphasis>record</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">recordChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="type-prop">
<db:title>type : QString</db:title>
<db:para>This property hold the type of the NDEF record.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#type">type</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#setType">setType</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>newtype</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#typeChanged">typeChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="typeNameFormat-prop">
<db:title>typeNameFormat : TypeNameFormat</db:title>
<db:para>This property hold the TNF of the NDEF record.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qqmlndefrecord.xml#TypeNameFormat-enum">QQmlNdefRecord::TypeNameFormat</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#typeNameFormat">typeNameFormat</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qqmlndefrecord.xml#setTypeNameFormat">setTypeNameFormat</db:link></db:emphasis>(<db:type><db:link xlink:href="qqmlndefrecord.xml#TypeNameFormat-enum">QQmlNdefRecord::TypeNameFormat</db:link></db:type> <db:emphasis>newTypeNameFormat</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">typeNameFormatChanged</db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQmlNdefRecord">
<db:title>[explicit] QQmlNdefRecord::QQmlNdefRecord(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new empty <db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QQmlNdefRecord-1">
<db:title>[explicit] QQmlNdefRecord::QQmlNdefRecord(const QNdefRecord &amp;<db:emphasis>record</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a new <db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link> representing <db:code role="parameter">record</db:code>. The parent of the newly constructed object will be set to <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QQmlNdefRecord">
<db:title>[virtual noexcept] QQmlNdefRecord::~QQmlNdefRecord()</db:title>
<db:para>Destroys the <db:link xlink:href="qqmlndefrecord.xml">QQmlNdefRecord</db:link> instance.</db:para>
</db:section>
<db:section xml:id="record">
<db:title>QNdefRecord QQmlNdefRecord::record() const</db:title>
<db:para>Returns a copy of the record.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qqmlndefrecord.xml#record-prop">record</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlndefrecord.xml#setRecord">setRecord</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRecord">
<db:title>void QQmlNdefRecord::setRecord(const QNdefRecord &amp;<db:emphasis>record</db:emphasis>)</db:title>
<db:para>Sets the record to <db:code role="parameter">record</db:code>. If the record is set the <db:link xlink:href="qqmlndefrecord.xml#record-prop">recordChanged</db:link>() signal will be emitted.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qqmlndefrecord.xml#record-prop">record</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlndefrecord.xml#record">record</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setType">
<db:title>void QQmlNdefRecord::setType(const QString &amp;<db:emphasis>newtype</db:emphasis>)</db:title>
<db:para>Sets the record type to <db:code role="parameter">newtype</db:code> if it is not currently equal to <db:link xlink:href="qqmlndefrecord.xml#type">type</db:link>(); otherwise does nothing. If the record type is set the <db:link xlink:href="qqmlndefrecord.xml#typeChanged">typeChanged</db:link>() signal will be emitted.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qqmlndefrecord.xml#type-prop">type</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setType">QNdefRecord::setType</db:link>()</db:member>
<db:member><db:link xlink:href="qndefrecord.xml#type">QNdefRecord::type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTypeNameFormat">
<db:title>void QQmlNdefRecord::setTypeNameFormat(QQmlNdefRecord::TypeNameFormat <db:emphasis>newTypeNameFormat</db:emphasis>)</db:title>
<db:para>Sets the type name format of the NDEF record to <db:code role="parameter">newTypeNameFormat</db:code>.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qqmlndefrecord.xml#typeNameFormat-prop">typeNameFormat</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlndefrecord.xml#typeNameFormat">typeNameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QString QQmlNdefRecord::type() const</db:title>
<db:para>Returns the type of the record.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qqmlndefrecord.xml#type-prop">type</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndefrecord.xml#setType">QNdefRecord::setType</db:link>()</db:member>
<db:member><db:link xlink:href="qndefrecord.xml#type">QNdefRecord::type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="typeChanged">
<db:title>void QQmlNdefRecord::typeChanged()</db:title>
<db:para>This signal is emitted when the record type changes.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qqmlndefrecord.xml#type-prop">type</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="typeNameFormat">
<db:title>QQmlNdefRecord::TypeNameFormat QQmlNdefRecord::typeNameFormat() const</db:title>
<db:para>Returns the type name format of the NDEF record.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qqmlndefrecord.xml#typeNameFormat-prop">typeNameFormat</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qqmlndefrecord.xml#setTypeNameFormat">setTypeNameFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_NDEFRECORD">
<db:title>Q_DECLARE_NDEFRECORD(<db:emphasis>className</db:emphasis>, <db:emphasis>typeNameFormat</db:emphasis>, <db:emphasis>type</db:emphasis>)</db:title>
<db:para>This macro ensures that <db:code role="parameter">className</db:code> is declared as the class implementing the NDEF record identified by <db:code role="parameter">typeNameFormat</db:code> and <db:code role="parameter">type</db:code>.</db:para>
<db:para>This macro should be expanded in the implementation file for <db:code role="parameter">className</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
