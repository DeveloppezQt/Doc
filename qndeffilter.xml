<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNdefFilter Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qndeffilter.xml">QNdefFilter</db:link> class provides a filter for matching NDEF messages.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNdefFilter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNdefFilter is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qndeffilter.xml">QNdefFilter</db:link> encapsulates the structure of an NDEF message and is used by <db:link xlink:href="qnearfieldmanager.xml#registerNdefMessageHandler">QNearFieldManager::registerNdefMessageHandler</db:link>() to match NDEF message that have a particular structure.</db:para>
<db:para>The following filter matches NDEF messages that contain a single smart poster record:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.append(QNdefRecord::NfcRtd, &quot;Sp&quot;);
</db:programlisting>
<db:para>The following filter matches NDEF messages that contain a URI, a localized piece of text and an optional JPEG image. The order of the records must be in the order specified:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.setOrderMatch(true);
filter.appendRecord(QNdefRecord::NfcRtd, &quot;U&quot;);
filter.appendRecord&amp;lt;QNdefNfcTextRecord&amp;gt;();
filter.appendRecord(QNdefRecord::Mime, &quot;image/jpeg&quot;, 0, 1);
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNdefFilter">
<db:title>QNdefFilter::QNdefFilter()</db:title>
<db:constructorsynopsis>
<db:methodname>QNdefFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QNdefFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new NDEF filter.</db:para>
</db:section>
<db:section xml:id="QNdefFilter-1">
<db:title>QNdefFilter::QNdefFilter(const QNdefFilter &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QNdefFilter</db:methodname>
<db:methodparam>
<db:type>const QNdefFilter &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QNdefFilter(const QNdefFilter &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>constructs a new NDEF filter that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNdefFilter">
<db:title>QNdefFilter::~QNdefFilter()</db:title>
<db:destructorsynopsis>
<db:methodname>~QNdefFilter</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QNdefFilter()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the NDEF filter.</db:para>
</db:section>
<db:section xml:id="appendRecord">
<db:title>void QNdefFilter::appendRecord(unsigned int <db:emphasis>min</db:emphasis> = 1, unsigned int <db:emphasis>max</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRecord</db:methodname>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>min</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>max</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRecord(unsigned int min, unsigned int max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a record matching the template parameter to the NDEF filter. The record must occur between <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> times in the NDEF message.</db:para>
</db:section>
<db:section xml:id="appendRecord-1">
<db:title>void QNdefFilter::appendRecord(QNdefRecord::TypeNameFormat <db:emphasis>typeNameFormat</db:emphasis>, const QByteArray &amp;<db:emphasis>type</db:emphasis>, unsigned int <db:emphasis>min</db:emphasis> = 1, unsigned int <db:emphasis>max</db:emphasis> = 1)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRecord</db:methodname>
<db:methodparam>
<db:type>QNdefRecord::TypeNameFormat</db:type>
<db:parameter>typeNameFormat</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>min</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>unsigned int</db:type>
<db:parameter>max</db:parameter>
<db:initializer>1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRecord(QNdefRecord::TypeNameFormat typeNameFormat, const QByteArray &amp;type, unsigned int min, unsigned int max)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends a record with type name format <db:code role="parameter">typeNameFormat</db:code> and type <db:code role="parameter">type</db:code> to the NDEF filter. The record must occur between <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> times in the NDEF message.</db:para>
</db:section>
<db:section xml:id="appendRecord-2">
<db:title>void QNdefFilter::appendRecord(const QNdefFilter::Record &amp;<db:emphasis>record</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>appendRecord</db:methodname>
<db:methodparam>
<db:type>const QNdefFilter::Record &amp;</db:type>
<db:parameter>record</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void appendRecord(const QNdefFilter::Record &amp;record)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Appends <db:code role="parameter">record</db:code> to the NDEF filter.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QNdefFilter::clear()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the filter.</db:para>
</db:section>
<db:section xml:id="orderMatch">
<db:title>bool QNdefFilter::orderMatch() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>orderMatch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool orderMatch() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the filter takes NDEF record order into account when matching; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndeffilter.xml#setOrderMatch">setOrderMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recordAt">
<db:title>QNdefFilter::Record QNdefFilter::recordAt(int <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNdefFilter::Record</db:type>
<db:methodname>recordAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNdefFilter::Record recordAt(int i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the NDEF record at index <db:code role="parameter">i</db:code>.</db:para>
</db:section>
<db:section xml:id="recordCount">
<db:title>int QNdefFilter::recordCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>recordCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int recordCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of NDEF records in the filter.</db:para>
</db:section>
<db:section xml:id="setOrderMatch">
<db:title>void QNdefFilter::setOrderMatch(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOrderMatch</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>on</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOrderMatch(bool on)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the ording requirements of the filter. If <db:code role="parameter">on</db:code> is true the filter will only match if the order of records in the filter matches the order of the records in the NDEF message. If <db:code role="parameter">on</db:code> is false the order of the records is not taken into account when matching.</db:para>
<db:para>By default record order is not taken into account.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndeffilter.xml#orderMatch">orderMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNdefFilter &amp;QNdefFilter::operator=(const QNdefFilter &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QNdefFilter &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QNdefFilter &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QNdefFilter &amp; operator=(const QNdefFilter &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this filter and returns a reference to this filter.</db:para>
</db:section>
</db:section>
</db:article>
