<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNdefFilter Class</db:title>
<db:productname>QtNfc</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt NFC Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qndeffilter.xml">QNdefFilter</db:link> class provides a filter for matching NDEF messages.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNdefFilter</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Nfc)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Nfc)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += nfc</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNdefFilter is part of <db:simplelist><db:member>connectivity-nfc</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qndeffilter.xml">QNdefFilter</db:link> encapsulates the structure of an NDEF message and is used for matching messages that have a particular structure.</db:para>
<db:para>The following filter matches NDEF messages that contain a single smart poster record:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.append(QNdefRecord::NfcRtd, &quot;Sp&quot;);
</db:programlisting>
<db:para>The following filter matches NDEF messages that contain a URI, a localized piece of text and an optional JPEG image. The order of the records must be in the order specified:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.setOrderMatch(true);
filter.appendRecord(QNdefRecord::NfcRtd, &quot;U&quot;);
filter.appendRecord&lt;QNdefNfcTextRecord&gt;();
filter.appendRecord(QNdefRecord::Mime, &quot;image/jpeg&quot;, 0, 1);
</db:programlisting>
<db:para>The <db:link xlink:href="qndeffilter.xml#match">match</db:link>() method can be used to check if a message matches the filter.</db:para>
<db:section xml:id="matching-algorithms">
<db:title>Matching Algorithms</db:title>
<db:para>The filter behavior depends on the value of <db:link xlink:href="qndeffilter.xml#orderMatch">orderMatch</db:link>() parameter.</db:para>
<db:note>
<db:para>In the discussion below we will consider the filter records to be equal if their <db:code>typeNameFormat</db:code> and <db:code>type</db:code> parameters match. Joining two records means adding their <db:code>minimum</db:code> and <db:code>maximum</db:code> values, respectively.</db:para>
</db:note>
<db:section xml:id="unordered-matching">
<db:title>Unordered Matching</db:title>
<db:para>If the record order is not taken into account, all the equal records in the filter can be joined. The resulting filter will contain only unique records, each with the updated <db:code>minimum</db:code> and <db:code>maximum</db:code> value.</db:para>
<db:para>Consider the following example:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.appendRecord&lt;QNdefNfcTextRecord&gt;(0, 1);
filter.appendRecord&lt;QNdefNfcTextRecord&gt;(0, 1);
filter.appendRecord(QNdefRecord::Mime, &quot;&quot;, 1, 1);
filter.appendRecord&lt;QNdefNfcTextRecord&gt;(1, 1);
filter.setOrderMatch(false);
</db:programlisting>
<db:para>With the unordered matching, the filter will be simplified to the following:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.appendRecord&lt;QNdefNfcTextRecord&gt;(1, 3);
filter.appendRecord(QNdefRecord::Mime, &quot;&quot;, 1, 1);
filter.setOrderMatch(false);
</db:programlisting>
<db:para>Once the filter contains only the unique records, the matching algorithm iterates through the message and calculates the actual amount of records of each type. If all the actual amounts fit in the corresponding [minimum, maximum] ranges, the matching algorithm returns <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="ordered-matching">
<db:title>Ordered Matching</db:title>
<db:para>If the record order is important, a different approach is applied. In this case the equal records can't be simply joined together. However, the consecutive equal records can still be joined. Then, the matching algorithm iterates through the message, this time also taking the positions of the records into account.</db:para>
</db:section>
<db:section xml:id="handling-empty-type-in-filter-record">
<db:title>Handling Empty Type in Filter Record</db:title>
<db:para>It's possible to add a filter record with an empty <db:code>type</db:code>. In this case the empty type will act as a wildcard for any type.</db:para>
<db:para>For example, the filter can be defined as follows:</db:para>
<db:programlisting language="cpp">QNdefFilter filter;
filter.addRecord(QNdefRecord::Mime, &quot;&quot;, 1, 1);
</db:programlisting>
<db:para>This filter specifies that the message must contain exactly one NDEF record with <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">Mime</db:link> <db:link xlink:href="qndefrecord.xml#typeNameFormat">typeNameFormat</db:link>(), and any <db:link xlink:href="qndefrecord.xml#type">type</db:link>().</db:para>
</db:section>
<db:section xml:id="handling-extra-records-in-the-message">
<db:title>Handling Extra Records in the Message</db:title>
<db:para>If the message contains some records that do not match <db:emphasis>any</db:emphasis> record in the filter, the matching algorithm will return <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="filter-examples">
<db:title>Filter Examples</db:title>
<db:para>In the table below, each filter record is specified by the following parameters (in the given order):</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>typeNameFormat</db:code> - contains the <db:link xlink:href="qndefrecord.xml#typeNameFormat">typeNameFormat</db:link>() of the record.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>type</db:code> - contains the <db:link xlink:href="qndefrecord.xml#type">type</db:link>() of the record.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>minimum</db:code> - contains the minimum amount of occurrences of the record in the message.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>maximum</db:code> - contains the maximum amount of occurrences of the record in the message.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The filter contains multiple records.</db:para>
<db:para>The message consists of multiple <db:link xlink:href="qndefrecord.xml">QNdefRecord</db:link>s. In the table below, only the <db:link xlink:href="qndefrecord.xml#typeNameFormat">typeNameFormat</db:link>() and <db:link xlink:href="qndefrecord.xml#type">type</db:link>() of each record will be shown, because the other parameters do not matter for filtering.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Filter</db:para>
</db:th>
<db:th>
<db:para>Message</db:para>
</db:th>
<db:th>
<db:para>Match Result</db:para>
</db:th>
<db:th>
<db:para>Comment</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Empty filter</db:para>
</db:td>
<db:td>
<db:para>Empty message</db:para>
</db:td>
<db:td>
<db:para>Match</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Empty filter</db:para>
</db:td>
<db:td>
<db:para>Non-empty message</db:para>
</db:td>
<db:td>
<db:para>No match</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Non-empty filter</db:para>
</db:td>
<db:td>
<db:para>Empty message</db:para>
</db:td>
<db:td>
<db:para>No match</db:para>
</db:td>
<db:td>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;, 1, 2), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;&quot;, 1, 1), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Empty</db:link>, &quot;&quot;, 0, 100)]</db:para>
</db:td>
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;image/jpeg&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Empty</db:link>, &quot;&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Empty</db:link>, &quot;&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;)]</db:para>
</db:td>
<db:td>
<db:para>Unordered: match</db:para>
</db:td>
<db:td rowspan="2">
<db:para>Ordered filter does not match because the message must start with a <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link> record, but it starts with <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ordered: no match</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;, 0, 2), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;&quot;, 1, 1), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;, 1, 1)]</db:para>
</db:td>
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;image/jpeg&quot;)]</db:para>
</db:td>
<db:td>
<db:para>Unordered: match</db:para>
</db:td>
<db:td rowspan="2">
<db:para>Ordered filter does not match because an <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link> record is expected after <db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, but the message does not have it.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ordered: no match</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;, 0, 2), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;, 1, 1), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;&quot;, 1, 1)]</db:para>
</db:td>
<db:td rowspan="2">
<db:para>[(<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::NfcRtd</db:link>, &quot;T&quot;), (<db:link xlink:href="qndefrecord.xml#TypeNameFormat-enum">QNdefRecord::Mime</db:link>, &quot;image/jpeg&quot;)]</db:para>
</db:td>
<db:td>
<db:para>Unordered: match</db:para>
</db:td>
<db:td rowspan="2">
<db:para>Both cases match because the message contains the required minimum of records in the correct order.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Ordered: match</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNdefFilter">
<db:title>QNdefFilter::QNdefFilter()</db:title>
<db:para>Constructs a new NDEF filter.</db:para>
</db:section>
<db:section xml:id="QNdefFilter-1">
<db:title>QNdefFilter::QNdefFilter(const QNdefFilter &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a new NDEF filter that is a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QNdefFilter">
<db:title>[noexcept] QNdefFilter::~QNdefFilter()</db:title>
<db:para>Destroys the NDEF filter.</db:para>
</db:section>
<db:section xml:id="appendRecord">
<db:title>bool QNdefFilter::appendRecord(const QNdefFilter::Record &amp;<db:emphasis>record</db:emphasis>)</db:title>
<db:para>Verifies the <db:code role="parameter">record</db:code> and appends it to the NDEF filter.</db:para>
<db:para>Returns <db:code>true</db:code> if the record was appended successfully. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="appendRecord-1">
<db:title>bool QNdefFilter::appendRecord(unsigned int <db:emphasis>min</db:emphasis> = 1, unsigned int <db:emphasis>max</db:emphasis> = 1)</db:title>
<db:para>Appends a record matching the template parameter to the NDEF filter. The record must occur between <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> times in the NDEF message.</db:para>
<db:para>Returns <db:code>true</db:code> if the record was appended successfully. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="appendRecord-2">
<db:title>bool QNdefFilter::appendRecord(QNdefRecord::TypeNameFormat <db:emphasis>typeNameFormat</db:emphasis>, const QByteArray &amp;<db:emphasis>type</db:emphasis>, unsigned int <db:emphasis>min</db:emphasis> = 1, unsigned int <db:emphasis>max</db:emphasis> = 1)</db:title>
<db:para>Appends a record with type name format <db:code role="parameter">typeNameFormat</db:code> and type <db:code role="parameter">type</db:code> to the NDEF filter. The record must occur between <db:code role="parameter">min</db:code> and <db:code role="parameter">max</db:code> times in the NDEF message.</db:para>
<db:para>Returns <db:code>true</db:code> if the record was appended successfully. Otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QNdefFilter::clear()</db:title>
<db:para>Clears the filter.</db:para>
</db:section>
<db:section xml:id="match">
<db:title>[since 6.2] bool QNdefFilter::match(const QNdefMessage &amp;<db:emphasis>message</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:code role="parameter">message</db:code> matches the given filter. Otherwise returns <db:code>false</db:code>.</db:para>
<db:para>See <db:link xlink:href="qndeffilter.xml#matching-algorithms">Matching Algorithms</db:link> for more detailed explanation of matching.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="orderMatch">
<db:title>bool QNdefFilter::orderMatch() const</db:title>
<db:para>Returns <db:code>true</db:code> if the filter takes NDEF record order into account when matching. Otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndeffilter.xml#setOrderMatch">setOrderMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recordAt">
<db:title>QNdefFilter::Record QNdefFilter::recordAt(qsizetype <db:emphasis>i</db:emphasis>) const</db:title>
<db:para>Returns the NDEF record at index <db:code role="parameter">i</db:code>.</db:para>
<db:para><db:code role="parameter">i</db:code> must be a valid index (i.e. 0 &lt;= i &lt; <db:link xlink:href="qndeffilter.xml#recordCount">recordCount</db:link>()).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndeffilter.xml#recordCount">recordCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="recordCount">
<db:title>qsizetype QNdefFilter::recordCount() const</db:title>
<db:para>Returns the number of NDEF records in the filter.</db:para>
</db:section>
<db:section xml:id="setOrderMatch">
<db:title>void QNdefFilter::setOrderMatch(bool <db:emphasis>on</db:emphasis>)</db:title>
<db:para>Sets the ordering requirements of the filter. If <db:code role="parameter">on</db:code> is <db:code>true</db:code>, the filter will only match if the order of records in the filter matches the order of the records in the NDEF message. If <db:code role="parameter">on</db:code> is <db:code>false</db:code>, the order of the records is not taken into account when matching.</db:para>
<db:para>By default record order is not taken into account.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qndeffilter.xml#orderMatch">orderMatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QNdefFilter &amp;QNdefFilter::operator=(const QNdefFilter &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this filter and returns a reference to this filter.</db:para>
</db:section>
</db:section>
</db:article>
