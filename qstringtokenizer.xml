<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStringTokenizer Class</db:title>
<db:subtitle>template &lt;typename Haystack, typename Needle&gt; class QStringTokenizer</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> class splits strings into tokens along given separators.</db:para>
<db:para>This class was introduced in Qt 6.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStringTokenizer</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtprivate-tok-haystackpinning.xml" xlink:role="class">QtPrivate::Tok::HaystackPinning</db:link> (private), <db:link xlink:href="qtprivate-tok-needlepinning.xml" xlink:role="class">QtPrivate::Tok::NeedlePinning</db:link> (private), and </db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStringTokenizer is part of <db:simplelist><db:member>tools</db:member><db:member>string-processing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Splits a string into substrings wherever a given separator occurs, returning a (lazily constructed) list of those strings. If the separator does not match anywhere in the string, produces a single-element list containing this string. If the separator is empty, <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> produces an empty string, followed by each of the string's characters, followed by another empty string. The two enumerations <db:link xlink:href="qt.xml#SplitBehaviorFlags-enum">Qt::SplitBehavior</db:link> and <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitivity</db:link> further control the output.</db:para>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> drives <db:link xlink:href="qstringview.xml#tokenize">QStringView::tokenize</db:link>(), but, at least with a recent compiler, you can use it directly, too:</db:para>
<db:programlisting language="cpp">for (auto it : QStringTokenizer{string, separator})
    use(*it);
</db:programlisting>
<db:note>
<db:para>You should never, ever, name the template arguments of a <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> explicitly. If you can use C++17 Class Template Argument Deduction (CTAD), you may write <db:code>QStringTokenizer{string, separator}</db:code> (without template arguments). If you can't use C++17 CTAD, you must use the <db:link xlink:href="qstringview.xml#split">QStringView::split</db:link>() or QLatin1StringView::split() member functions and store the return value only in <db:code>auto</db:code> variables:</db:para>
</db:note>
<db:programlisting language="cpp">auto result = string.split(sep);
</db:programlisting>
<db:para>This is because the template arguments of <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> have a very subtle dependency on the specific string and separator types from with which they are constructed, and they don't usually correspond to the actual types passed.</db:para>
<db:section xml:id="lazy-sequences">
<db:title>Lazy Sequences</db:title>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> acts as a so-called lazy sequence, that is, each next element is only computed once you ask for it. Lazy sequences have the advantage that they only require O(1) memory. They have the disadvantage that, at least for <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>, they only allow forward, not random-access, iteration.</db:para>
<db:para>The intended use-case is that you just plug it into a ranged for loop:</db:para>
<db:programlisting language="cpp">for (auto it : QStringTokenizer{string, separator})
    use(*it);
</db:programlisting>
<db:para>or a C++20 ranged algorithm:</db:para>
<db:programlisting language="cpp">std::ranges::for_each(QStringTokenizer{string, separator},
                      [] (auto token) { use(token); });
</db:programlisting>
</db:section>
<db:section xml:id="end-sentinel">
<db:title>End Sentinel</db:title>
<db:para>The <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> iterators cannot be used with classical STL algorithms, because those require iterator/iterator pairs, while <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> uses sentinels. That is, it uses a different type, <db:link xlink:href="qstringtokenizer.xml#sentinel-typedef">QStringTokenizer::sentinel</db:link>, to mark the end of the range. This improves performance, because the sentinel is an empty type. Sentinels are supported from C++17 (for ranged for) and C++20 (for algorithms using the new ranges library).</db:para>
</db:section>
<db:section xml:id="temporaries">
<db:title>Temporaries</db:title>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> is very carefully designed to avoid dangling references. If you construct a tokenizer from a temporary string (an rvalue), that argument is stored internally, so the referenced data isn't deleted before it is tokenized:</db:para>
<db:programlisting language="cpp">auto tok = QStringTokenizer{widget.text(), u','};
// return value of `widget.text()` is destroyed, but content was moved into `tok`
for (auto e : tok)
   use(e);
</db:programlisting>
<db:para>If you pass named objects (lvalues), then <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> does not store a copy. You are responsible to keep the named object's data around for longer than the tokenizer operates on it:</db:para>
<db:programlisting language="cpp">auto text = widget.text();
auto tok = QStringTokenizer{text, u','};
text.clear();      // destroy content of `text`
for (auto e : tok) // ERROR: `tok` references deleted data!
    use(e);
</db:programlisting>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#split">QStringView::split</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#split">QString::split</db:link>()</db:member>
<db:member><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="const_iterator-typedef">
<db:title>[alias] QStringTokenizer::const_iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>const_iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#iterator-typedef">iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="const_pointer-typedef">
<db:title>[alias] QStringTokenizer::const_pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>const_pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>.</db:para>
</db:section>
<db:section xml:id="const_reference-typedef">
<db:title>[alias] QStringTokenizer::const_reference</db:title>
<db:typedefsynopsis>
<db:typedefname>const_reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>.</db:para>
</db:section>
<db:section xml:id="difference_type-typedef">
<db:title>[alias] QStringTokenizer::difference_type</db:title>
<db:typedefsynopsis>
<db:typedefname>difference_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype.</db:para>
</db:section>
<db:section xml:id="iterator-typedef">
<db:title>[alias] QStringTokenizer::iterator</db:title>
<db:typedefsynopsis>
<db:typedefname>iterator</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style const iterator for <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link>.</db:para>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qstringtokenizer.xml#const_iterator-typedef">const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointer-typedef">
<db:title>[alias] QStringTokenizer::pointer</db:title>
<db:typedefsynopsis>
<db:typedefname>pointer</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type *</db:code>.</db:para>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> does not support mutable iterators, so this is the same as <db:link xlink:href="qstringtokenizer.xml#const_pointer-typedef">const_pointer</db:link>.</db:para>
</db:section>
<db:section xml:id="reference-typedef">
<db:title>[alias] QStringTokenizer::reference</db:title>
<db:typedefsynopsis>
<db:typedefname>reference</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>value_type &amp;</db:code>.</db:para>
<db:para><db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> does not support mutable references, so this is the same as <db:link xlink:href="qstringtokenizer.xml#const_reference-typedef">const_reference</db:link>.</db:para>
</db:section>
<db:section xml:id="sentinel-typedef">
<db:title>[alias] QStringTokenizer::sentinel</db:title>
<db:typedefsynopsis>
<db:typedefname>sentinel</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>This typedef provides an STL-style sentinel for <db:link xlink:href="qstringtokenizer.xml#iterator-typedef">QStringTokenizer::iterator</db:link> and <db:link xlink:href="qstringtokenizer.xml#const_iterator-typedef">QStringTokenizer::const_iterator</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#const_iterator-typedef">const_iterator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size_type-typedef">
<db:title>[alias] QStringTokenizer::size_type</db:title>
<db:typedefsynopsis>
<db:typedefname>size_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for qsizetype.</db:para>
</db:section>
<db:section xml:id="value_type-typedef">
<db:title>[alias] QStringTokenizer::value_type</db:title>
<db:typedefsynopsis>
<db:typedefname>value_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Alias for <db:code>const QStringView</db:code> or <db:code>const QLatin1StringView</db:code>, depending on the tokenizer's <db:code>Haystack</db:code> template argument.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStringTokenizer">
<db:title>[explicit constexpr] QStringTokenizer::QStringTokenizer(Haystack <db:emphasis>haystack</db:emphasis>, Needle <db:emphasis>needle</db:emphasis>, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis>, Qt::SplitBehavior <db:emphasis>sb</db:emphasis> = Qt::KeepEmptyParts)</db:title>
<db:bridgehead renderas="sect2" xml:id="QStringTokenizer-1">[explicit constexpr] QStringTokenizer::QStringTokenizer(Haystack <db:emphasis>haystack</db:emphasis>, Needle <db:emphasis>needle</db:emphasis>, Qt::SplitBehavior <db:emphasis>sb</db:emphasis> = Qt::KeepEmptyParts, Qt::CaseSensitivity <db:emphasis>cs</db:emphasis> = Qt::CaseSensitive)</db:bridgehead>
<db:para>Constructs a string tokenizer that splits the string <db:code role="parameter">haystack</db:code> into substrings wherever <db:code role="parameter">needle</db:code> occurs, and allows iteration over those strings as they are found. If <db:code role="parameter">needle</db:code> does not match anywhere in <db:code role="parameter">haystack</db:code>, a single element containing <db:code role="parameter">haystack</db:code> is produced.</db:para>
<db:para><db:code role="parameter">cs</db:code> specifies whether <db:code role="parameter">needle</db:code> should be matched case sensitively or case insensitively.</db:para>
<db:para>If <db:code role="parameter">sb</db:code> is <db:link xlink:href="qt.xml#SplitBehaviorFlags-enum">Qt::SkipEmptyParts</db:link>, empty entries don't appear in the result. By default, empty entries are included.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringview.xml#split">QStringView::split</db:link>()</db:member>
<db:member><db:link xlink:href="qstring.xml#split">QString::split</db:link>()</db:member>
<db:member><db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitivity</db:link></db:member>
<db:member><db:link xlink:href="qt.xml#SplitBehaviorFlags-enum">Qt::SplitBehavior</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="begin">
<db:title>QStringTokenizer::iterator QStringTokenizer::begin() const</db:title>
<db:bridgehead renderas="sect2" xml:id="cbegin">QStringTokenizer::iterator QStringTokenizer::cbegin() const</db:bridgehead>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style iterator</db:link> pointing to the first token in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#end">end</db:link>()</db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cend">
<db:title>[constexpr] QStringTokenizer::sentinel QStringTokenizer::cend() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringTokenizer::sentinel</db:type>
<db:methodname>cend</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringTokenizer::sentinel cend() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Same as <db:link xlink:href="qstringtokenizer.xml#end">end</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#cbegin">cbegin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#end">end</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="end">
<db:title>[constexpr] QStringTokenizer::sentinel QStringTokenizer::end() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringTokenizer::sentinel</db:type>
<db:methodname>end</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringTokenizer::sentinel end() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a const <db:link xlink:href="containers.xml#stl-style-iterators">STL-style sentinel</db:link> pointing to the imaginary token after the last token in the list.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstringtokenizer.xml#begin">begin</db:link>()</db:member>
<db:member><db:link xlink:href="qstringtokenizer.xml#cend">cend</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toContainer">
<db:title>LContainer QStringTokenizer::toContainer(LContainer &amp;&amp;<db:emphasis>c</db:emphasis> = {}) const &amp;</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>LContainer</db:type>
<db:methodname>toContainer</db:methodname>
<db:methodparam>
<db:type>LContainer &amp;&amp;</db:type>
<db:parameter>c</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="refness">1</db:synopsisinfo>
<db:synopsisinfo role="signature">LContainer toContainer(LContainer &amp;&amp;c) const &amp;</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the lazy sequence into a (typically) random-access container of type <db:code>LContainer</db:code>.</db:para>
<db:para>This function is only available if <db:code>Container</db:code> has a <db:code>value_type</db:code> matching this tokenizer's <db:link xlink:href="qstringtokenizer.xml#value_type-typedef">value_type</db:link>.</db:para>
<db:para>If you pass in a named container (an lvalue) for <db:code role="parameter">c</db:code>, then that container is filled, and a reference to it is returned. If you pass in a temporary container (an rvalue, incl. the default argument), then that container is filled, and returned by value.</db:para>
<db:programlisting language="cpp">// assuming tok's value_type is QStringView, then...
auto tok = QStringTokenizer{~~~};
// ... rac1 is a QList:
auto rac1 = tok.toContainer();
// ... rac2 is std::pmr::vector&amp;lt;QStringView&amp;gt;:
auto rac2 = tok.toContainer&amp;lt;std::pmr::vector&amp;lt;QStringView&amp;gt;&amp;gt;();
auto rac3 = QVarLengthArray&amp;lt;QStringView, 12&amp;gt;{};
// appends the token sequence produced by tok to rac3
//  and returns a reference to rac3 (which we ignore here):
tok.toContainer(rac3);
</db:programlisting>
<db:para>This gives you maximum flexibility in how you want the sequence to be stored.</db:para>
</db:section>
<db:section xml:id="toContainer-1">
<db:title>RContainer QStringTokenizer::toContainer(RContainer &amp;&amp;<db:emphasis>c</db:emphasis> = {}) const &amp;&amp;</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>RContainer</db:type>
<db:methodname>toContainer</db:methodname>
<db:methodparam>
<db:type>RContainer &amp;&amp;</db:type>
<db:parameter>c</db:parameter>
<db:initializer>{}</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="refness">2</db:synopsisinfo>
<db:synopsisinfo role="signature">RContainer toContainer(RContainer &amp;&amp;c) const &amp;&amp;</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the lazy sequence into a (typically) random-access container of type <db:code>RContainer</db:code>.</db:para>
<db:para>In addition to the constraints on the lvalue-this overload, this rvalue-this overload is only available when this <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> does not store the haystack internally, as this could create a container full of dangling references:</db:para>
<db:programlisting language="cpp">auto tokens = QStringTokenizer{widget.text(), u','}.toContainer();
// ERROR: cannot call toContainer() on rvalue
// 'tokens' references the data of the copy of widget.text()
// stored inside the QStringTokenizer, which has since been deleted
</db:programlisting>
<db:para>To fix, store the <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> in a temporary:</db:para>
<db:programlisting language="cpp">auto tokenizer = QStringTokenizer{widget.text90, u','};
auto tokens = tokenizer.toContainer();
// OK: the copy of widget.text() stored in 'tokenizer' keeps the data
// referenced by 'tokens' alive.
</db:programlisting>
<db:para>You can force this function into existence by passing a view instead:</db:para>
<db:programlisting language="cpp">func(QStringTokenizer{QStringView{widget.text()}, u','}.toContainer());
// OK: compiler keeps widget.text() around until after func() has executed
</db:programlisting>
<db:para>If you pass in a named container (an lvalue)for <db:code role="parameter">c</db:code>, then that container is filled, and a reference to it is returned. If you pass in a temporary container (an rvalue, incl. the default argument), then that container is filled, and returned by value.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qTokenize">
<db:title>[constexpr, since 6.0] decltype(QtPrivate::Tok::TokenizerResult&lt;Haystack, Needle&gt;{std::forward&lt;Haystack&gt;(h), std::forward&lt;Needle&gt;(n), flags...}) qTokenize(Haystack &amp;&amp;<db:emphasis>haystack</db:emphasis>, Needle &amp;&amp;<db:emphasis>needle</db:emphasis>, Flags... <db:emphasis>flags</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>decltype(QtPrivate::Tok::TokenizerResult&lt;Haystack, Needle&gt;{std::forward&lt;Haystack&gt;(h), std::forward&lt;Needle&gt;(n), flags...})</db:type>
<db:methodname>qTokenize</db:methodname>
<db:methodparam>
<db:type>Haystack &amp;&amp;</db:type>
<db:parameter>haystack</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Needle &amp;&amp;</db:type>
<db:parameter>needle</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Flags...</db:type>
<db:parameter>flags</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">decltype(QtPrivate::Tok::TokenizerResult&lt;Haystack, Needle&gt;{std::forward&lt;Haystack&gt;(h), std::forward&lt;Needle&gt;(n), flags...}) qTokenize(Haystack &amp;&amp;haystack, Needle &amp;&amp;needle, Flags... flags)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Factory function for a <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> that splits the string <db:code role="parameter">haystack</db:code> into substrings wherever <db:code role="parameter">needle</db:code> occurs, and allows iteration over those strings as they are found. If <db:code role="parameter">needle</db:code> does not match anywhere in <db:code role="parameter">haystack</db:code>, a single element containing <db:code role="parameter">haystack</db:code> is produced.</db:para>
<db:para>Pass values from <db:link xlink:href="qt.xml#CaseSensitivity-enum">Qt::CaseSensitivity</db:link> and <db:link xlink:href="qt.xml#SplitBehaviorFlags-enum">Qt::SplitBehavior</db:link> enumerators as <db:code role="parameter">flags</db:code> to modify the behavior of the tokenizer.</db:para>
<db:para>You can use this function if your compiler doesn't, yet, support C++17 Class Template Argument Deduction (CTAD). We recommend direct use of <db:link xlink:href="qstringtokenizer.xml">QStringTokenizer</db:link> with CTAD instead.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
</db:section>
</db:section>
</db:article>
