<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt WebChannel Standalone Example</db:title>
<db:productname>QtWebChannel</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebChannel Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A simple chat between a server and a remote client running in a browser.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/standalone-screenshot.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Standalone</db:emphasis> demonstrates how to use the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> C++ API to communicate with an external client. It is a simple chat between a C++ application and a remote HTML client running in your default browser.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="communicating-with-a-remote-client">
<db:title>Communicating with a Remote Client</db:title>
<db:para>The C++ application sets up a <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> instance and publishes a <db:code>Core</db:code> object over it. For the remote client side, the <db:code>index.html</db:code> file is opened. Both show a dialog with the list of received messages and an input box to send messages to the other end.</db:para>
<db:para>The <db:code>Core</db:code> emits the <db:code>Core::sendText()</db:code> signal when the user sends a message. The signal automatically gets propagated to the HTML client. When the user enters a message on the HTML side, <db:code>Core::receiveText()</db:code> is called.</db:para>
<db:para>All communication between the HTML client and the C++ server is done over a WebSocket. The C++ side instantiates a <db:link xlink:href="qwebsocketserver.xml">QWebSocketServer</db:link> and wraps incoming <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> connections in <db:link xlink:href="qwebchannelabstracttransport.xml">QWebChannelAbstractTransport</db:link> objects. These objects are then connected to the <db:link xlink:href="qwebchannel.xml">QWebChannel</db:link> instance.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebchannel.git/tree/examples/webchannel/standalone?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtwebchannel-javascript.xml">Qt WebChannel JavaScript API</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
