<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QNetworkSession Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> class provides control over the system's access points and enables session management for cases when multiple clients access the same access point.</db:para>
<db:para>This class was introduced in Qt 4.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkSession</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkSession is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> enables control over the system's network interfaces. The session's configuration parameter are determined via the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> object to which it is bound. Depending on the type of the session (single access point or service network) a session may be linked to one or more network interfaces. By means of <db:link xlink:href="qnetworksession.xml#open">opening</db:link> and <db:link xlink:href="qnetworksession.xml#close">closing</db:link> of network sessions a developer can start and stop the systems network interfaces. If the configuration represents multiple access points (see <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">QNetworkConfiguration::ServiceNetwork</db:link>) more advanced features such as roaming may be supported.</db:para>
<db:para><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> supports session management within the same process and depending on the platform's capabilities may support out-of-process sessions. If the same network configuration is used by multiple open sessions the underlying network interface is only terminated once the last session has been closed.</db:para>
<db:section xml:id="roaming">
<db:title>Roaming</db:title>
<db:para>Applications may connect to the <db:link xlink:href="qnetworksession.xml#preferredConfigurationChanged">preferredConfigurationChanged</db:link>() signal in order to receive notifications when a more suitable access point becomes available. In response to this signal the application must either initiate the roaming via <db:link xlink:href="qnetworksession.xml#migrate">migrate</db:link>() or <db:link xlink:href="qnetworksession.xml#ignore">ignore</db:link>() the new access point. Once the session has roamed the <db:link xlink:href="qnetworksession.xml#newConfigurationActivated">newConfigurationActivated</db:link>() signal is emitted. The application may now test the carrier and must either <db:link xlink:href="qnetworksession.xml#accept">accept</db:link>() or <db:link xlink:href="qnetworksession.xml#reject">reject</db:link>() it. The session will return to the previous access point if the roaming was rejected. The subsequent state diagram depicts the required state transitions.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/roaming-states.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Some platforms may distinguish forced roaming and application level roaming (ALR). ALR implies that the application controls (via <db:link xlink:href="qnetworksession.xml#migrate">migrate</db:link>(), <db:link xlink:href="qnetworksession.xml#ignore">ignore</db:link>(), <db:link xlink:href="qnetworksession.xml#accept">accept</db:link>() and <db:link xlink:href="qnetworksession.xml#reject">reject</db:link>()) whether a network session can roam from one access point to the next. Such control is useful if the application maintains stateful socket connections and wants to control the transition from one interface to the next. Forced roaming implies that the system automatically roams to the next network without consulting the application. This has the advantage that the application can make use of roaming features without actually being aware of it. It is expected that the application detects that the underlying socket is broken and automatically reconnects via the new network link.</db:para>
<db:para>If the platform supports both modes of roaming, an application indicates its preference by connecting to the <db:link xlink:href="qnetworksession.xml#preferredConfigurationChanged">preferredConfigurationChanged</db:link>() signal. Connecting to this signal means that the application wants to take control over the roaming behavior and therefore implies application level roaming. If the client does not connect to the <db:link xlink:href="qnetworksession.xml#preferredConfigurationChanged">preferredConfigurationChanged</db:link>(), forced roaming is used. If forced roaming is not supported the network session will not roam by default.</db:para>
<db:para>Some applications may want to suppress any form of roaming altogether. Possible use cases may be high priority downloads or remote services which cannot handle a roaming enabled client. Clients can suppress roaming by connecting to the <db:link xlink:href="qnetworksession.xml#preferredConfigurationChanged">preferredConfigurationChanged</db:link>() signal and answer each signal emission with <db:link xlink:href="qnetworksession.xml#ignore">ignore</db:link>().</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:member>
<db:member><db:link xlink:href="qnetworkconfigurationmanager.xml">QNetworkConfigurationManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SessionError-enum">
<db:title>enum QNetworkSession::SessionError</db:title>
<db:para>This enum describes the session errors that can occur.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::UnknownSessionError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>An unidentified error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::SessionAbortedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The session was aborted by the user or system.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::RoamingError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The session cannot roam to a new configuration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::OperationNotSupportedError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The operation is not supported for current configuration.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::InvalidConfigurationError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The operation cannot currently be performed for the current configuration.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QNetworkSession::State</db:title>
<db:para>This enum describes the connectivity state of the session. If the session is based on a single access point configuration the state of the session is the same as the state of the associated network interface.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Invalid</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The session is invalid due to an invalid configuration. This may happen due to a removed access point or a configuration that was invalid to begin with.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::NotAvailable</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The session is based on a defined but not yet discovered <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> (see <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">QNetworkConfiguration::StateFlag</db:link>).</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Connecting</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The network session is being established.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Connected</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The network session is connected. If the current process wishes to use this session it has to register its interest by calling <db:link xlink:href="qnetworksession.xml#open">open</db:link>(). A network session is considered to be ready for socket operations if it <db:link xlink:href="qnetworksession.xml#isOpen">isOpen</db:link>() and connected.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Closing</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The network session is in the process of being shut down.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Disconnected</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The network session is not connected. The associated <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> has the state <db:link xlink:href="qnetworkconfiguration.xml#StateFlag-enum">QNetworkConfiguration::Discovered</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::Roaming</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>The network session is roaming from one access point to another access point.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="UsagePolicy-enum">
<db:title>[since 5.0] enum QNetworkSession::UsagePolicy</db:title>
<db:bridgehead renderas="sect2">flags QNetworkSession::UsagePolicies</db:bridgehead>
<db:para>These flags allow the system to inform the application of network usage restrictions that may be in place.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::NoPolicy</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No policy in force, usage is unrestricted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link></db:emphasis>::NoBackgroundTrafficPolicy</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Background network traffic (not user initiated) should be avoided for example to save battery or data charges</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 5.0.</db:para>
<db:para>The <db:code>UsagePolicies</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;UsagePolicy&gt;. </db:code>It stores an OR combination of <db:code>UsagePolicy</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkSession">
<db:title>[explicit] QNetworkSession::QNetworkSession(const QNetworkConfiguration &amp;<db:emphasis>connectionConfig</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a session based on <db:code role="parameter">connectionConfig</db:code> with the given <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QNetworkSession">
<db:title>[virtual noexcept] QNetworkSession::~QNetworkSession()</db:title>
<db:para>Frees the resources associated with the <db:link xlink:href="qnetworksession.xml">QNetworkSession</db:link> object.</db:para>
</db:section>
<db:section xml:id="accept">
<db:title>void QNetworkSession::accept()</db:title>
<db:para>Instructs the session to permanently accept the new access point. Once this function has been called the session may not return to the old access point.</db:para>
<db:para>The old access point may be closed in the process if there are no other network sessions for it. Therefore any open socket that still uses the old access point may become unusable and should be closed before completing the migration.</db:para>
</db:section>
<db:section xml:id="activeTime">
<db:title>quint64 QNetworkSession::activeTime() const</db:title>
<db:para>Returns the number of seconds that the session has been active.</db:para>
</db:section>
<db:section xml:id="bytesReceived">
<db:title>quint64 QNetworkSession::bytesReceived() const</db:title>
<db:para>Returns the amount of data received in bytes; otherwise 0.</db:para>
<db:para>This field value includes the usage across all open network sessions which use the same network interface.</db:para>
<db:para>If the session is based on a service network configuration the number of sent bytes across all active member configurations are returned.</db:para>
<db:para>This function may not always be supported on all platforms and returns 0. The platform capability can be detected via <db:link xlink:href="qnetworkconfigurationmanager.xml#Capability-enum">QNetworkConfigurationManager::DataStatistics</db:link>.</db:para>
<db:note>
<db:para>On some platforms this function may run the main event loop.</db:para>
</db:note>
</db:section>
<db:section xml:id="bytesWritten">
<db:title>quint64 QNetworkSession::bytesWritten() const</db:title>
<db:para>Returns the amount of data sent in bytes; otherwise 0.</db:para>
<db:para>This field value includes the usage across all open network sessions which use the same network interface.</db:para>
<db:para>If the session is based on a service network configuration the number of sent bytes across all active member configurations are returned.</db:para>
<db:para>This function may not always be supported on all platforms and returns 0. The platform capability can be detected via <db:link xlink:href="qnetworkconfigurationmanager.xml#Capability-enum">QNetworkConfigurationManager::DataStatistics</db:link>.</db:para>
<db:note>
<db:para>On some platforms this function may run the main event loop.</db:para>
</db:note>
</db:section>
<db:section xml:id="close">
<db:title>void QNetworkSession::close()</db:title>
<db:para>Decreases the session counter on the associated network configuration. If the session counter reaches zero the active network interface is shut down. This also means that <db:link xlink:href="qnetworksession.xml#state">state</db:link>() will only change from <db:link xlink:href="qnetworksession.xml#State-enum">Connected</db:link> to <db:link xlink:href="qnetworksession.xml#State-enum">Disconnected</db:link> if the current session was the last open session.</db:para>
<db:para>If the platform does not support out-of-process sessions calling this function does not stop the interface. In this case <db:link xlink:href="qnetworksession.xml#stop">stop</db:link>() has to be used to force a shut down. The platform capabilities can be detected via <db:link xlink:href="qnetworkconfigurationmanager.xml#capabilities">QNetworkConfigurationManager::capabilities</db:link>().</db:para>
<db:para>Note that this call is asynchronous. Depending on the outcome of this call the results can be enquired by connecting to the <db:link xlink:href="qnetworksession.xml#stateChanged">stateChanged</db:link>(), <db:link xlink:href="qnetworksession.xml#opened">opened</db:link>() or <db:link xlink:href="qnetworksession.xml#error">error</db:link>() signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#isOpen">isOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="closed">
<db:title>void QNetworkSession::closed()</db:title>
<db:para>This signal is emitted when the network session has been closed.</db:para>
</db:section>
<db:section xml:id="configuration">
<db:title>QNetworkConfiguration QNetworkSession::configuration() const</db:title>
<db:para>Returns the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> that this network session object is based on.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QNetworkSession::SessionError QNetworkSession::error() const</db:title>
<db:para>Returns the type of error that last occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#state">state</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QNetworkSession::error(QNetworkSession::SessionError <db:emphasis>error</db:emphasis>)</db:title>
<db:para>This signal is emitted after an error occurred. The <db:code role="parameter">error</db:code> parameter describes the error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>QString QNetworkSession::errorString() const</db:title>
<db:para>Returns a human-readable description of the last device error that occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignore">
<db:title>void QNetworkSession::ignore()</db:title>
<db:para>This function indicates that the application does not wish to roam the session.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#migrate">migrate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="interface">
<db:title>QNetworkInterface QNetworkSession::interface() const</db:title>
<db:para>Returns the network interface that is used by this session.</db:para>
<db:para>This function only returns a valid <db:link xlink:href="qnetworkinterface.xml">QNetworkInterface</db:link> when this session is <db:link xlink:href="qnetworksession.xml#State-enum">Connected</db:link>.</db:para>
<db:para>The returned interface may change as a result of a roaming process.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isOpen">
<db:title>bool QNetworkSession::isOpen() const</db:title>
<db:para>Returns true if this session is open. If the number of all open sessions is greater than zero the underlying network interface will remain connected/up.</db:para>
<db:para>The session can be controlled via <db:link xlink:href="qnetworksession.xml#open">open</db:link>() and <db:link xlink:href="qnetworksession.xml#close">close</db:link>().</db:para>
</db:section>
<db:section xml:id="migrate">
<db:title>void QNetworkSession::migrate()</db:title>
<db:para>Instructs the session to roam to the new access point. The old access point remains active until the application calls <db:link xlink:href="qnetworksession.xml#accept">accept</db:link>().</db:para>
<db:para>The <db:link xlink:href="qnetworksession.xml#newConfigurationActivated">newConfigurationActivated</db:link>() signal is emitted once roaming has been completed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#accept">accept</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="newConfigurationActivated">
<db:title>void QNetworkSession::newConfigurationActivated()</db:title>
<db:para>This signal is emitted once the session has roamed to the new access point. The application may reopen its socket and test the suitability of the new network link. Subsequently it must either <db:link xlink:href="qnetworksession.xml#accept">accept</db:link>() or <db:link xlink:href="qnetworksession.xml#reject">reject</db:link>() the new access point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#accept">accept</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#reject">reject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>void QNetworkSession::open()</db:title>
<db:para>Creates an open session which increases the session counter on the underlying network interface. The system will not terminate a network interface until the session reference counter reaches zero. Therefore an open session allows an application to register its use of the interface.</db:para>
<db:para>As a result of calling open() the interface will be started if it is not connected/up yet. Some platforms may not provide support for out-of-process sessions. On such platforms the session counter ignores any sessions held by another process. The platform capabilities can be detected via <db:link xlink:href="qnetworkconfigurationmanager.xml#capabilities">QNetworkConfigurationManager::capabilities</db:link>().</db:para>
<db:para>Note that this call is asynchronous. Depending on the outcome of this call the results can be enquired by connecting to the <db:link xlink:href="qnetworksession.xml#stateChanged">stateChanged</db:link>(), <db:link xlink:href="qnetworksession.xml#opened">opened</db:link>() or <db:link xlink:href="qnetworksession.xml#error">error</db:link>() signals.</db:para>
<db:para>It is not a requirement to open a session in order to monitor the underlying network interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#close">close</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#isOpen">isOpen</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="opened">
<db:title>void QNetworkSession::opened()</db:title>
<db:para>This signal is emitted when the network session has been opened.</db:para>
<db:para>The underlying network interface will not be shut down as long as the session remains open. Note that this feature is dependent on <db:link xlink:href="qnetworkconfigurationmanager.xml#Capability-enum">system wide session support</db:link>.</db:para>
</db:section>
<db:section xml:id="preferredConfigurationChanged">
<db:title>void QNetworkSession::preferredConfigurationChanged(const QNetworkConfiguration &amp;<db:emphasis>config</db:emphasis>, bool <db:emphasis>isSeamless</db:emphasis>)</db:title>
<db:para>This signal is emitted when the preferred configuration/access point for the session changes. Only sessions which are based on service network configurations may emit this signal. <db:code role="parameter">config</db:code> can be used to determine access point specific details such as proxy settings and <db:code role="parameter">isSeamless</db:code> indicates whether roaming will break the sessions IP address.</db:para>
<db:para>As a consequence to this signal the application must either start the roaming process by calling <db:link xlink:href="qnetworksession.xml#migrate">migrate</db:link>() or choose to <db:link xlink:href="qnetworksession.xml#ignore">ignore</db:link>() the new access point.</db:para>
<db:para>If the roaming process is non-seamless the IP address will change which means that a socket becomes invalid. However seamless mobility can ensure that the local IP address does not change. This is achieved by using a virtual IP address which is bound to the actual link address. During the roaming process the virtual address is attached to the new link address.</db:para>
<db:para>Some platforms may support the concept of Forced Roaming and Application Level Roaming (ALR). Forced roaming implies that the platform may simply roam to a new configuration without consulting applications. It is up to the application to detect the link layer loss and reestablish its sockets. In contrast ALR provides the opportunity to prevent the system from roaming. If this session is based on a configuration that supports roaming the application can choose whether it wants to be consulted (ALR use case) by connecting to this signal. For as long as this signal connection remains the session remains registered as a roaming stakeholder; otherwise roaming will be enforced by the platform.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#migrate">migrate</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#ignore">ignore</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkconfiguration.xml#isRoamingAvailable">QNetworkConfiguration::isRoamingAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="reject">
<db:title>void QNetworkSession::reject()</db:title>
<db:para>The new access point is not suitable for the application. By calling this function the session returns to the previous access point/configuration. This action may invalidate any socket that has been created via the not desired access point.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#accept">accept</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sessionProperty">
<db:title>QVariant QNetworkSession::sessionProperty(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:para>Returns the value for property <db:code role="parameter">key</db:code>.</db:para>
<db:para>A network session can have properties attached which may describe the session in more details. This function can be used to gain access to those properties.</db:para>
<db:para>The following property keys are guaranteed to be specified on all platforms:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Key</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>ActiveConfiguration</db:para>
</db:td>
<db:td>
<db:para>If the session <db:link xlink:href="qnetworksession.xml#isOpen">isOpen</db:link>() this property returns the identifier of the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> that is used by this session; otherwise an empty string.</db:para>
<db:para>The main purpose of this key is to determine which Internet access point is used if the session is based on a <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">ServiceNetwork</db:link>. The following code snippet highlights the difference:</db:para>
<db:programlisting language="cpp">QNetworkConfigurationManager mgr;
QNetworkConfiguration ap = mgr.defaultConfiguration();
QNetworkSession *session = new QNetworkSession(ap);
... //code activates session

QString ident = session-&gt;sessionProperty(&quot;ActiveConfiguration&quot;).toString();
if ( ap.type() == QNetworkConfiguration::ServiceNetwork ) {
    Q_ASSERT( ap.identifier() != ident );
    Q_ASSERT( ap.children().contains( mgr.configurationFromIdentifier(ident) ) );
} else if ( ap.type() == QNetworkConfiguration::InternetAccessPoint ) {
    Q_ASSERT( ap.identifier() == ident );
}
</db:programlisting>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>UserChoiceConfiguration</db:para>
</db:td>
<db:td>
<db:para>If the session <db:link xlink:href="qnetworksession.xml#isOpen">isOpen</db:link>() and is bound to a <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> of type UserChoice, this property returns the identifier of the <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> that the configuration resolved to when <db:link xlink:href="qnetworksession.xml#open">open</db:link>() was called; otherwise an empty string.</db:para>
<db:para>The purpose of this key is to determine the real <db:link xlink:href="qnetworkconfiguration.xml">QNetworkConfiguration</db:link> that the session is using. This key is different from <db:emphasis>ActiveConfiguration</db:emphasis> in that this key may return an identifier for either a <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">service network</db:link> or a <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">Internet access points</db:link> configurations, whereas <db:emphasis>ActiveConfiguration</db:emphasis> always returns identifiers to <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">Internet access points</db:link> configurations.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>ConnectInBackground</db:para>
</db:td>
<db:td>
<db:para>Setting this property to <db:emphasis>true</db:emphasis> before calling <db:link xlink:href="qnetworksession.xml#open">open</db:link>() implies that the connection attempt is made but if no connection can be established, the user is not connsulted and asked to select a suitable connection. This property is not set by default and support for it depends on the platform.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>AutoCloseSessionTimeout</db:para>
</db:td>
<db:td>
<db:para>If the session requires polling to keep its state up to date, this property holds the timeout in milliseconds before the session will automatically close. If the value of this property is -1 the session will not automatically close. This property is set to -1 by default.</db:para>
<db:para>The purpose of this property is to minimize resource use on platforms that use polling to update the state of the session. Applications can set the value of this property to the desired timeout before the session is closed. In response to the <db:link xlink:href="qnetworksession.xml#closed">closed</db:link>() signal the network session should be deleted to ensure that all polling is stopped. The session can then be recreated once it is required again. This property has no effect for sessions that do not require polling.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#setSessionProperty">setSessionProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSessionProperty">
<db:title>void QNetworkSession::setSessionProperty(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the property <db:code role="parameter">value</db:code> on the session. The property is identified using <db:code role="parameter">key</db:code>. Removing an already set property can be achieved by passing an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>Note that the <db:emphasis>UserChoiceConfiguration</db:emphasis> and <db:emphasis>ActiveConfiguration</db:emphasis> properties are read only and cannot be changed using this method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#sessionProperty">sessionProperty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="state">
<db:title>QNetworkSession::State QNetworkSession::state() const</db:title>
<db:para>Returns the state of the session.</db:para>
<db:para>If the session is based on a single access point configuration the state of the session is the same as the state of the associated network interface. Therefore a network session object can be used to monitor network interfaces.</db:para>
<db:para>A <db:link xlink:href="qnetworkconfiguration.xml#Type-enum">QNetworkConfiguration::ServiceNetwork</db:link> based session summarizes the state of all its children and therefore returns the <db:link xlink:href="qnetworksession.xml#State-enum">Connected</db:link> state if at least one of the service network's <db:link xlink:href="qnetworkconfiguration.xml#children">children</db:link>() configurations is active.</db:para>
<db:para>Note that it is not required to hold an open session in order to obtain the network interface state. A connected but closed session may be used to monitor network interfaces whereas an open and connected session object may prevent the network interface from being shut down.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#stateChanged">stateChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QNetworkSession::stateChanged(QNetworkSession::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>This signal is emitted whenever the state of the network session changes. The <db:code role="parameter">state</db:code> parameter is the new state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#state">state</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stop">
<db:title>void QNetworkSession::stop()</db:title>
<db:para>Invalidates all open sessions against the network interface and therefore stops the underlying network interface. This function always changes the session's <db:link xlink:href="qnetworksession.xml#state">state</db:link>() flag to <db:link xlink:href="qnetworksession.xml#State-enum">Disconnected</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="usagePolicies">
<db:title>QNetworkSession::UsagePolicies QNetworkSession::usagePolicies() const</db:title>
<db:para>Returns the network usage policies currently in force by the system.</db:para>
</db:section>
<db:section xml:id="usagePoliciesChanged">
<db:title>[since 5.0] void QNetworkSession::usagePoliciesChanged(QNetworkSession::UsagePolicies <db:emphasis>usagePolicies</db:emphasis>)</db:title>
<db:para>This signal is emitted when the <db:code role="parameter">usagePolicies</db:code> in force are changed by the system.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="waitForOpened">
<db:title>bool QNetworkSession::waitForOpened(int <db:emphasis>msecs</db:emphasis> = 30000)</db:title>
<db:para>Waits until the session has been opened, up to <db:code role="parameter">msecs</db:code> milliseconds. If the session has been opened, this function returns true; otherwise it returns false. In the case where it returns false, you can call <db:link xlink:href="qnetworksession.xml#error">error</db:link>() to determine the cause of the error.</db:para>
<db:para>The following example waits up to one second for the session to be opened:</db:para>
<db:programlisting language="cpp">session-&gt;open();
if (session-&gt;waitForOpened(1000))
    qDebug(&quot;Open!&quot;);
</db:programlisting>
<db:para>If <db:code role="parameter">msecs</db:code> is -1, this function will not time out.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworksession.xml#open">open</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworksession.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
