<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QImageIOPlugin Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link> class defines an interface for writing an image format plugin.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QImageIOPlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QImageIOPlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link> is a factory for creating <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> objects, which are used internally by <db:link xlink:href="qimagereader.xml">QImageReader</db:link> and <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link> to add support for different image formats to Qt.</db:para>
<db:para>Writing an image I/O plugin is achieved by subclassing this base class, reimplementing the pure virtual functions <db:link xlink:href="qimageioplugin.xml#capabilities">capabilities</db:link>() and <db:link xlink:href="qimageioplugin.xml#create">create</db:link>(), and exporting the class with the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro. See <db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link> for details.</db:para>
<db:para>An image format plugin can support three capabilities: reading (<db:link xlink:href="qimageioplugin.xml#Capability-enum">CanRead</db:link>), writing (<db:link xlink:href="qimageioplugin.xml#Capability-enum">CanWrite</db:link>) and <db:emphasis>incremental</db:emphasis> reading (<db:link xlink:href="qimageioplugin.xml#Capability-enum">CanReadIncremental</db:link>). Reimplement <db:link xlink:href="qimageioplugin.xml#capabilities">capabilities</db:link>() in your subclass to expose the capabilities of your image format.</db:para>
<db:para><db:link xlink:href="qimageioplugin.xml#create">create</db:link>() should create an instance of your <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> subclass, with the provided device and format properly set, and return this handler.</db:para>
<db:para>The json metadata file for the plugin needs to contain information about the image formats the plugins supports, together with the corresponding MIME types (one for each format). For a jpeg plugin, this could, for example, look as follows:</db:para>
<db:programlisting language="cpp">{
  &quot;Keys&quot;: [ &quot;jpg&quot;, &quot;jpeg&quot; ],
  &quot;MimeTypes&quot;: [ &quot;image/jpeg&quot;, &quot;image/jpeg&quot; ]
}
</db:programlisting>
<db:para>Different plugins can support different capabilities. For example, you may have one plugin that supports reading the GIF format, and another that supports writing. Qt will select the correct plugin for the job, depending on the return value of <db:link xlink:href="qimageioplugin.xml#capabilities">capabilities</db:link>(). If several plugins support the same capability, Qt will select one arbitrarily.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link></db:member>
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Capability-enum">
<db:title>enum QImageIOPlugin::Capability</db:title>
<db:bridgehead renderas="sect2">flags QImageIOPlugin::Capabilities</db:bridgehead>
<db:enumsynopsis>
<db:enumname>Capability</db:enumname>
<db:enumitem>
<db:enumidentifier>CanRead</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanWrite</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>CanReadIncremental</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QImageIOPlugin::Capabilities</db:typedefname>
</db:typedefsynopsis>
<db:para>This enum describes the capabilities of a <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:emphasis>::CanRead</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>The plugin can read images.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:emphasis>::CanWrite</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>The plugin can write images.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link></db:emphasis>::CanReadIncremental</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>The plugin can read images incrementally.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>Capabilities</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;Capability&gt;. </db:code>It stores an OR combination of <db:code>Capability</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QImageIOPlugin">
<db:title>[explicit] QImageIOPlugin::QImageIOPlugin(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QImageIOPlugin</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageIOPlugin(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an image plugin with the given <db:code role="parameter">parent</db:code>. This is invoked automatically by the moc generated code that exports the plugin.</db:para>
</db:section>
<db:section xml:id="dtor.QImageIOPlugin">
<db:title>[virtual] QImageIOPlugin::~QImageIOPlugin()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QImageIOPlugin</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QImageIOPlugin()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the picture format plugin.</db:para>
<db:para>You never have to call this explicitly. Qt destroys a plugin automatically when it is no longer used.</db:para>
</db:section>
<db:section xml:id="capabilities">
<db:title>[pure virtual] QImageIOPlugin::Capabilities QImageIOPlugin::capabilities(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QImageIOPlugin::Capabilities</db:type>
<db:methodname>capabilities</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageIOPlugin::Capabilities capabilities(QIODevice *device, const QByteArray &amp;format) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the capabilities of the plugin, based on the data in <db:code role="parameter">device</db:code> and the format <db:code role="parameter">format</db:code>. If <db:code role="parameter">device</db:code> is <db:code>0</db:code>, it should simply report whether the format can be read or written. Otherwise, it should attempt to determine whether the given format (or any format supported by the plugin if <db:code role="parameter">format</db:code> is empty) can be read from or written to <db:code role="parameter">device</db:code>. It should do this without changing the state of <db:code role="parameter">device</db:code> (typically by using <db:link xlink:href="qiodevice.xml#peek">QIODevice::peek</db:link>()).</db:para>
<db:para>For example, if the <db:link xlink:href="qimageioplugin.xml">QImageIOPlugin</db:link> supports the BMP format, <db:code role="parameter">format</db:code> is either empty or <db:code>&quot;bmp&quot;</db:code>, and the data in the device starts with the characters <db:code>&quot;BM&quot;</db:code>, this function should return <db:link xlink:href="qimageioplugin.xml#Capability-enum">CanRead</db:link>. If <db:code role="parameter">format</db:code> is <db:code>&quot;bmp&quot;</db:code>, <db:code role="parameter">device</db:code> is <db:code>0</db:code> and the handler supports both reading and writing, this function should return <db:link xlink:href="qimageioplugin.xml#Capability-enum">CanRead</db:link> | <db:link xlink:href="qimageioplugin.xml#Capability-enum">CanWrite</db:link>.</db:para>
<db:para>Format names are always given in lower case.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>[pure virtual] QImageIOHandler *QImageIOPlugin::create(QIODevice *<db:emphasis>device</db:emphasis>, const QByteArray &amp;<db:emphasis>format</db:emphasis> = QByteArray()) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QImageIOHandler *</db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>format</db:parameter>
<db:initializer>QByteArray()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImageIOHandler * create(QIODevice *device, const QByteArray &amp;format) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a <db:link xlink:href="qimageiohandler.xml">QImageIOHandler</db:link> subclass, with <db:code role="parameter">device</db:code> and <db:code role="parameter">format</db:code> set. The <db:code role="parameter">format</db:code> must come from the values listed in the <db:code>&quot;Keys&quot;</db:code> entry in the plugin metadata, or be empty. If it is empty, the data in <db:code role="parameter">device</db:code> must have been recognized by the <db:link xlink:href="qimageioplugin.xml#capabilities">capabilities</db:link>() method (with a likewise empty format).</db:para>
<db:para>Format names are always given in lower case.</db:para>
</db:section>
</db:section>
</db:article>
