<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QNetworkRequestFactory Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Convenience class for grouping remote server endpoints that share common network request properties.</db:para>
<db:para>This class was introduced in Qt 6.7.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkRequestFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.7</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkRequestFactory is part of <db:simplelist><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>REST servers often have endpoints that require the same headers and other data. Grouping such endpoints with a <db:link xlink:href="qnetworkrequestfactory.xml">QNetworkRequestFactory</db:link> makes it more convenient to issue requests to these endpoints; only the typically varying parts such as <db:emphasis>path</db:emphasis> and <db:emphasis>query</db:emphasis> parameters are provided when creating a new request.</db:para>
<db:para>Basic usage steps of <db:link xlink:href="qnetworkrequestfactory.xml">QNetworkRequestFactory</db:link> are as follows:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Instantiation</db:para>
</db:listitem>
<db:listitem>
<db:para>Setting the data common to all requests</db:para>
</db:listitem>
<db:listitem>
<db:para>Issuing requests</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>An example of usage:</db:para>
<db:programlisting language="cpp">// Instantiate a factory somewhere suitable in the application
QNetworkRequestFactory api{{&quot;https://example.com/v1&quot;_L1}};

// Set bearer token
api.setBearerToken(&quot;my_token&quot;);

// Issue requests (reply handling omitted for brevity)
manager.get(api.createRequest(&quot;models&quot;_L1)); // https://example.com/v1/models
// The conventional leading '/' for the path can be used as well
manager.get(api.createRequest(&quot;/models&quot;_L1)); // https://example.com/v1/models
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkRequestFactory">
<db:title>QNetworkRequestFactory::QNetworkRequestFactory()</db:title>
<db:para>Creates a new <db:link xlink:href="qnetworkrequestfactory.xml">QNetworkRequestFactory</db:link> object. Use <db:link xlink:href="qnetworkrequestfactory.xml#setBaseUrl">setBaseUrl</db:link>() to set a valid base URL for the requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#QNetworkRequestFactory-3">QNetworkRequestFactory</db:link>(const QUrl &amp;baseUrl)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setBaseUrl">setBaseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QNetworkRequestFactory-3">
<db:title>[explicit] QNetworkRequestFactory::QNetworkRequestFactory(const QUrl &amp;<db:emphasis>baseUrl</db:emphasis>)</db:title>
<db:para>Creates a new <db:link xlink:href="qnetworkrequestfactory.xml">QNetworkRequestFactory</db:link> object, initializing the base URL to <db:code role="parameter">baseUrl</db:code>. The base URL is used to populate subsequent network requests.</db:para>
<db:para>If the URL contains a <db:emphasis>path</db:emphasis> component, it will be extracted and used as a base path in subsequent network requests. This means that any paths provided when requesting individual requests will be appended to this base path, as illustrated below:</db:para>
<db:programlisting language="cpp">// Here the API version v2 is used as the base path:
QNetworkRequestFactory api{{&quot;https://example.com/v2&quot;_L1}};
// ...
manager.get(api.createRequest(&quot;models&quot;_L1)); // https://example.com/v2/models
// Equivalent with a leading '/'
manager.get(api.createRequest(&quot;/models&quot;_L1)); // https://example.com/v2/models
</db:programlisting>
</db:section>
<db:section xml:id="QNetworkRequestFactory-2">
<db:title>QNetworkRequestFactory::QNetworkRequestFactory(const QNetworkRequestFactory &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QNetworkRequestFactory-1">
<db:title>[noexcept] QNetworkRequestFactory::QNetworkRequestFactory(QNetworkRequestFactory &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs the factory from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QNetworkRequestFactory">
<db:title>[noexcept] QNetworkRequestFactory::~QNetworkRequestFactory()</db:title>
<db:para>Destroys this <db:link xlink:href="qnetworkrequestfactory.xml">QNetworkRequestFactory</db:link> object.</db:para>
</db:section>
<db:section xml:id="attribute">
<db:title>[since 6.8] QVariant QNetworkRequestFactory::attribute(QNetworkRequest::Attribute <db:emphasis>attribute</db:emphasis>) const</db:title>
<db:para>Returns the value associated with <db:code role="parameter">attribute</db:code>. If the attribute has not been set, returns a default-constructed <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#attribute-1">attribute</db:link>(QNetworkRequest::Attribute, const QVariant &amp;)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearAttributes">clearAttributes</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attribute-1">
<db:title>[since 6.8] QVariant QNetworkRequestFactory::attribute(QNetworkRequest::Attribute <db:emphasis>attribute</db:emphasis>, const QVariant &amp;<db:emphasis>defaultValue</db:emphasis>) const</db:title>
<db:para>Returns the value associated with <db:code role="parameter">attribute</db:code>. If the attribute has not been set, returns <db:code role="parameter">defaultValue</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearAttributes">clearAttributes</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="baseUrl">
<db:title>QUrl QNetworkRequestFactory::baseUrl() const</db:title>
<db:para>Returns the base URL used for the individual requests.</db:para>
<db:para>The base URL may contain a path component. This path is used as path &quot;prefix&quot; for the paths that are provided when generating individual requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setBaseUrl">setBaseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bearerToken">
<db:title>QByteArray QNetworkRequestFactory::bearerToken() const</db:title>
<db:para>Returns the bearer token that has been set.</db:para>
<db:para>The bearer token, if present, is used to set the Authorization: Bearer my_token header for requests. This is a common authorization convention and is provided as an additional convenience.</db:para>
<db:para>The means to acquire the bearer token vary. Standard methods include OAuth2 and the service provider's website/dashboard. It is expected that the bearer token changes over time. For example, when updated with a refresh token, always setting the new token again ensures that subsequent requests have the latest, valid token.</db:para>
<db:para>The presence of the bearer token does not impact the <db:link xlink:href="qnetworkrequestfactory.xml#commonHeaders">commonHeaders</db:link>() listing. If the <db:link xlink:href="qnetworkrequestfactory.xml#commonHeaders">commonHeaders</db:link>() also lists Authorization header, it will be overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setBearerToken">setBearerToken</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#commonHeaders">commonHeaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearAttribute">
<db:title>[since 6.8] void QNetworkRequestFactory::clearAttribute(QNetworkRequest::Attribute <db:emphasis>attribute</db:emphasis>)</db:title>
<db:para>Clears <db:code role="parameter">attribute</db:code> set to this factory.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearAttributes">
<db:title>[since 6.8] void QNetworkRequestFactory::clearAttributes()</db:title>
<db:para>Clears any attributes set to this factory.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setAttribute">setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearBearerToken">
<db:title>void QNetworkRequestFactory::clearBearerToken()</db:title>
<db:para>Clears the bearer token.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#bearerToken">bearerToken</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearCommonHeaders">
<db:title>void QNetworkRequestFactory::clearCommonHeaders()</db:title>
<db:para>Clears current headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#commonHeaders">commonHeaders</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setCommonHeaders">setCommonHeaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearPassword">
<db:title>void QNetworkRequestFactory::clearPassword()</db:title>
<db:para>Clears the password set to this factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#password">password</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setPassword">setPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#userName">userName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearQueryParameters">
<db:title>void QNetworkRequestFactory::clearQueryParameters()</db:title>
<db:para>Clears the query parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#queryParameters">queryParameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearUserName">
<db:title>void QNetworkRequestFactory::clearUserName()</db:title>
<db:para>Clears the username set to this factory.</db:para>
</db:section>
<db:section xml:id="commonHeaders">
<db:title>QHttpHeaders QNetworkRequestFactory::commonHeaders() const</db:title>
<db:para>Returns the currently set headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setCommonHeaders">setCommonHeaders</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearCommonHeaders">clearCommonHeaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRequest">
<db:title>QNetworkRequest QNetworkRequestFactory::createRequest() const</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>.</db:para>
<db:para>The returned request is filled with the data that this factory has been configured with.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest-2">createRequest</db:link>(const QUrlQuery&amp;)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest-3">createRequest</db:link>(const QString&amp;, const QUrlQuery&amp;)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRequest-1">
<db:title>QNetworkRequest QNetworkRequestFactory::createRequest(const QString &amp;<db:emphasis>path</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>.</db:para>
<db:para>The returned request's URL is formed by appending the provided <db:code role="parameter">path</db:code> to the <db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link> (which may itself have a path component).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest-3">createRequest</db:link>(const QString &amp;, const QUrlQuery &amp;)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRequest-2">
<db:title>QNetworkRequest QNetworkRequestFactory::createRequest(const QUrlQuery &amp;<db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>.</db:para>
<db:para>The returned request's URL is formed by appending the provided <db:code role="parameter">query</db:code> to the <db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest-3">createRequest</db:link>(const QString &amp;, const QUrlQuery &amp;)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="createRequest-3">
<db:title>QNetworkRequest QNetworkRequestFactory::createRequest(const QString &amp;<db:emphasis>path</db:emphasis>, const QUrlQuery &amp;<db:emphasis>query</db:emphasis>) const</db:title>
<db:para>Returns a <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>.</db:para>
<db:para>The returned requests URL is formed by appending the provided <db:code role="parameter">path</db:code> and <db:code role="parameter">query</db:code> to the <db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link> (which may have a path component).</db:para>
<db:para>If the provided <db:code role="parameter">path</db:code> contains query items, they will be combined with the items in <db:code role="parameter">query</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest-2">createRequest</db:link>(const QUrlQuery&amp;)</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="password">
<db:title>QString QNetworkRequestFactory::password() const</db:title>
<db:para>Returns the password set to this factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setPassword">setPassword</db:link>()</db:member>
<db:member>password()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearPassword">clearPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#userName">userName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="priority">
<db:title>[since 6.8] QNetworkRequest::Priority QNetworkRequestFactory::priority() const</db:title>
<db:para>Returns the priority assigned to any future requests created by this factory.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setPriority">setPriority</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#priority">QNetworkRequest::priority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="queryParameters">
<db:title>QUrlQuery QNetworkRequestFactory::queryParameters() const</db:title>
<db:para>Returns query parameters that are added to individual requests' query parameters. The query parameters are added to any potential query parameters provided with the individual <db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>() calls.</db:para>
<db:para>Use cases for using repeating query parameters are server dependent, but typical examples include language setting ?lang=en, format specification ?format=json, API version specification ?version=1.0 and API key authentication.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setQueryParameters">setQueryParameters</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearQueryParameters">clearQueryParameters</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>[since 6.8] void QNetworkRequestFactory::setAttribute(QNetworkRequest::Attribute <db:emphasis>attribute</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the value associated with <db:code role="parameter">attribute</db:code> to <db:code role="parameter">value</db:code>. If the attribute is already set, the previous value is replaced. The attributes are set to any future requests created by this factory.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearAttribute">clearAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearAttributes">clearAttributes</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBaseUrl">
<db:title>void QNetworkRequestFactory::setBaseUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the base URL used in individual requests to <db:code role="parameter">url</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#baseUrl">baseUrl</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBearerToken">
<db:title>void QNetworkRequestFactory::setBearerToken(const QByteArray &amp;<db:emphasis>token</db:emphasis>)</db:title>
<db:para>Sets the bearer token to <db:code role="parameter">token</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#bearerToken">bearerToken</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearBearerToken">clearBearerToken</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCommonHeaders">
<db:title>void QNetworkRequestFactory::setCommonHeaders(const QHttpHeaders &amp;<db:emphasis>headers</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">headers</db:code> that are common to all requests.</db:para>
<db:para>These headers are added to individual requests' headers. This is a convenience mechanism for setting headers that repeat across requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#commonHeaders">commonHeaders</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearCommonHeaders">clearCommonHeaders</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPassword">
<db:title>void QNetworkRequestFactory::setPassword(const QString &amp;<db:emphasis>password</db:emphasis>)</db:title>
<db:para>Sets the password of this factory to <db:code role="parameter">password</db:code>.</db:para>
<db:para>The password is set in the request URL when <db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>() is called. The <db:link xlink:href="qrestaccessmanager.xml">QRestAccessManager</db:link> / <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will attempt to use these credentials when the server indicates that authentication is required.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#password">password</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearPassword">clearPassword</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#userName">userName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPriority">
<db:title>[since 6.8] void QNetworkRequestFactory::setPriority(QNetworkRequest::Priority <db:emphasis>priority</db:emphasis>)</db:title>
<db:para>Sets the priority for any future requests created by this factory to <db:code role="parameter">priority</db:code>.</db:para>
<db:para>The default priority is <db:link xlink:href="qnetworkrequest.xml#Priority-enum">QNetworkRequest::NormalPriority</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#priority">priority</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setPriority">QNetworkRequest::setPriority</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setQueryParameters">
<db:title>void QNetworkRequestFactory::setQueryParameters(const QUrlQuery &amp;<db:emphasis>query</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">query</db:code> parameters that are added to individual requests' query parameters.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#queryParameters">queryParameters</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearQueryParameters">clearQueryParameters</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QNetworkRequestFactory::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:para>Sets the SSL configuration to <db:code role="parameter">configuration</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTransferTimeout">
<db:title>void QNetworkRequestFactory::setTransferTimeout(std::chrono::milliseconds <db:emphasis>timeout</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">timeout</db:code> used for transfers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#transferTimeout">transferTimeout</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setTransferTimeout">QNetworkRequest::setTransferTimeout</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#setTransferTimeout">QNetworkAccessManager::setTransferTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUserName">
<db:title>void QNetworkRequestFactory::setUserName(const QString &amp;<db:emphasis>userName</db:emphasis>)</db:title>
<db:para>Sets the username of this factory to <db:code role="parameter">userName</db:code>.</db:para>
<db:para>The username is set in the request URL when <db:link xlink:href="qnetworkrequestfactory.xml#createRequest">createRequest</db:link>() is called. The <db:link xlink:href="qrestaccessmanager.xml">QRestAccessManager</db:link> / <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> will attempt to use these credentials when the server indicates that authentication is required.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#userName">userName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearUserName">clearUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#password">password</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QNetworkRequestFactory::sslConfiguration() const</db:title>
<db:para>Returns the SSL configuration set to this factory. The SSL configuration is set to each individual request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QNetworkRequestFactory::swap(QNetworkRequestFactory &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this factory with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="transferTimeout">
<db:title>std::chrono::milliseconds QNetworkRequestFactory::transferTimeout() const</db:title>
<db:para>Returns the timeout used for transfers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setTransferTimeout">setTransferTimeout</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#transferTimeout">QNetworkRequest::transferTimeout</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#transferTimeout">QNetworkAccessManager::transferTimeout</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="userName">
<db:title>QString QNetworkRequestFactory::userName() const</db:title>
<db:para>Returns the username set to this factory.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#setUserName">setUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#clearUserName">clearUserName</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequestfactory.xml#password">password</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QNetworkRequestFactory &amp;QNetworkRequestFactory::operator=(QNetworkRequestFactory &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> and returns a reference to this factory.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QNetworkRequestFactory &amp;QNetworkRequestFactory::operator=(const QNetworkRequestFactory &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code> and returns a reference to this factory.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDebug operator&lt;&lt;(QDebug <db:emphasis>debug</db:emphasis>, const QNetworkRequestFactory &amp;<db:emphasis>factory</db:emphasis>)</db:title>
<db:para>Writes <db:code role="parameter">factory</db:code> into <db:code role="parameter">debug</db:code> stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">Debugging Techniques</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
