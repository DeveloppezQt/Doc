<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMenuBar Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> class provides a horizontal menu bar.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMenuBar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMenuBar is part of <db:simplelist><db:member>mainwindow-classes</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A menu bar consists of a list of pull-down menu items. You add menu items with <db:link xlink:href="qmenubar.xml#addMenu">addMenu</db:link>(). For example, asuming that menubar is a pointer to a <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> and fileMenu is a pointer to a <db:link xlink:href="qmenu.xml">QMenu</db:link>, the following statement inserts the menu into the menu bar:</db:para>
<db:programlisting language="cpp">menubar-&gt;addMenu(fileMenu);
</db:programlisting>
<db:para>The ampersand in the menu item's text sets Alt+F as a shortcut for this menu. (You can use &quot;&amp;&amp;&quot; to get a real ampersand in the menu bar.)</db:para>
<db:para>There is no need to lay out a menu bar. It automatically sets its own geometry to the top of the parent widget and changes it appropriately whenever the parent is resized.</db:para>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>In most main window style applications you would use the <db:link xlink:href="qmainwindow.xml#menuBar">menuBar</db:link>() function provided in <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>, adding <db:link xlink:href="qmenu.xml">QMenu</db:link>s to the menu bar and adding <db:link xlink:href="qaction.xml">QAction</db:link>s to the pop-up menus.</db:para>
<db:para>Example (from the <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example):</db:para>
<db:programlisting language="cpp">    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newAct);
</db:programlisting>
<db:para>Menu items may be removed with <db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>().</db:para>
<db:para>Widgets can be added to menus by using instances of the <db:link xlink:href="qwidgetaction.xml">QWidgetAction</db:link> class to hold them. These actions can then be inserted into menus in the usual way; see the <db:link xlink:href="qmenu.xml">QMenu</db:link> documentation for more details.</db:para>
</db:section>
<db:section xml:id="platform-dependent-look-and-feel">
<db:title>Platform Dependent Look and Feel</db:title>
<db:para>Different platforms have different requirements for the appearance of menu bars and their behavior when the user interacts with them. For example, Windows systems are often configured so that the underlined character mnemonics that indicate keyboard shortcuts for items in the menu bar are only shown when the <db:guilabel>Alt</db:guilabel> key is pressed.</db:para>
</db:section>
<db:section xml:id="qmenubar-as-a-global-menu-bar">
<db:title>QMenuBar as a Global Menu Bar</db:title>
<db:para>On macOS and on certain Linux desktop environments such as Ubuntu Unity, <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> is a wrapper for using the system-wide menu bar. If you have multiple menu bars in one dialog the outermost menu bar (normally inside a widget with widget flag <db:link xlink:href="qt.xml#WindowType-enum">Qt::Window</db:link>) will be used for the system-wide menu bar.</db:para>
<db:para>Qt for macOS also provides a menu bar merging feature to make <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> conform more closely to accepted macOS menu bar layout. The merging functionality is based on string matching the title of a <db:link xlink:href="qmenu.xml">QMenu</db:link> entry. These strings are translated (using <db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>()) in the &quot;<db:link xlink:href="qmenubar.xml">QMenuBar</db:link>&quot; context. If an entry is moved its slots will still fire as if it was in the original place. The table below outlines the strings looked for and where the entry is placed if matched:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>String matches</db:para>
</db:th>
<db:th>
<db:para>Placement</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>about.*</db:para>
</db:td>
<db:td>
<db:para>Application Menu | About &lt;application name&gt;</db:para>
</db:td>
<db:td>
<db:para>The application name is fetched from the Info.plist file (see note below). If this entry is not found no About item will appear in the Application Menu.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>config, options, setup, settings or preferences</db:para>
</db:td>
<db:td>
<db:para>Application Menu | Preferences</db:para>
</db:td>
<db:td>
<db:para>If this entry is not found the Settings item will be disabled</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>quit or exit</db:para>
</db:td>
<db:td>
<db:para>Application Menu | Quit &lt;application name&gt;</db:para>
</db:td>
<db:td>
<db:para>If this entry is not found a default Quit item will be created to call <db:link xlink:href="qcoreapplication.xml#quit">QCoreApplication::quit</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>You can override this behavior by using the <db:link xlink:href="qaction.xml#menuRole-prop">QAction::menuRole</db:link>() property.</db:para>
<db:para>If you want all windows in a Mac application to share one menu bar, you must create a menu bar that does not have a parent. Create a parent-less menu bar this way:</db:para>
<db:programlisting language="cpp">QMenuBar *menuBar = new QMenuBar(0);
</db:programlisting>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Do <db:emphasis>not</db:emphasis> call <db:link xlink:href="qmainwindow.xml#menuBar">QMainWindow::menuBar</db:link>() to create the shared menu bar, because that menu bar will have the <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> as its parent. That menu bar would only be displayed for the parent <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The text used for the application name in the macOS menu bar is obtained from the value set in the Info.plist file in the application's bundle. See <db:link xlink:href="osx-deployment.xml">Qt for macOS - Deployment</db:link> for more information.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> On Linux, if the com.canonical.AppMenu.Registrar service is available on the D-Bus session bus, then Qt will communicate with it to install the application's menus into the global menu bar, as described.</db:para>
</db:section>
<db:section xml:id="examples">
<db:title>Examples</db:title>
<db:para>The <db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus</db:link> example shows how to use <db:link xlink:href="qmenubar.xml">QMenuBar</db:link> and <db:link xlink:href="qmenu.xml">QMenu</db:link>. The other <db:link xlink:href="examples-mainwindow.xml">main window application examples</db:link> also provide menus using these classes.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenu.xml">QMenu</db:link></db:member>
<db:member><db:link xlink:href="qshortcut.xml">QShortcut</db:link></db:member>
<db:member><db:link xlink:href="qaction.xml">QAction</db:link></db:member>
<db:member><db:link xlink:href="http://developer.apple.com/documentation/UserExperience/Conceptual/AppleHIGuidelines/XHIGIntro/XHIGIntro.html">Introduction to Apple Human Interface Guidelines</db:link></db:member>
<db:member><db:link xlink:href="guibooks.xml#fowler">GUI Design Handbook: Menu Bar</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-mainwindows-menus-example.xml">Menus Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="defaultUp-prop">
<db:title>defaultUp : bool</db:title>
<db:para>This property holds the popup orientation</db:para>
<db:para>The default popup orientation. By default, menus pop &quot;down&quot; the screen. By setting the property to true, the menu will pop &quot;up&quot;. You might call this for menus that are <db:emphasis>below</db:emphasis> the document to which they refer.</db:para>
<db:para>If the menu would not fit on the screen, the other direction is used automatically.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isDefaultUp</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setDefaultUp</db:emphasis>(<db:emphasis>bool</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="nativeMenuBar-prop">
<db:title>[since 4.6] nativeMenuBar : bool</db:title>
<db:para>This property holds whether or not a menubar will be used as a native menubar on platforms that support it</db:para>
<db:para>This property specifies whether or not the menubar should be used as a native menubar on platforms that support it. The currently supported platforms are macOS, and Linux desktops which use the com.canonical.dbusmenu D-Bus interface (such as Ubuntu Unity). If this property is true, the menubar is used in the native menubar and is not in the window of its parent; if false the menubar remains in the window. On other platforms, setting this attribute has no effect, and reading this attribute will always return false.</db:para>
<db:para>The default is to follow whether the <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_DontUseNativeMenuBar</db:link> attribute is set for the application. Explicitly setting this property overrides the presence (or absence) of the attribute.</db:para>
<db:para>This property was introduced in Qt 4.6.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isNativeMenuBar</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNativeMenuBar</db:emphasis>(<db:type>bool</db:type> <db:emphasis>nativeMenuBar</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMenuBar">
<db:title>[explicit] QMenuBar::QMenuBar(QWidget *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a menu bar with parent <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMenuBar">
<db:title>[virtual noexcept] QMenuBar::~QMenuBar()</db:title>
<db:para>Destroys the menu bar.</db:para>
</db:section>
<db:section xml:id="actionAt">
<db:title>QAction *QMenuBar::actionAt(const QPoint &amp;<db:emphasis>pt</db:emphasis>) const</db:title>
<db:para>Returns the <db:link xlink:href="qaction.xml">QAction</db:link> at <db:code role="parameter">pt</db:code>. Returns 0 if there is no action at <db:code role="parameter">pt</db:code> or if the location has a separator.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#addAction">addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenubar.xml#addSeparator">addSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actionEvent">
<db:title>[override virtual protected] void QMenuBar::actionEvent(QActionEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#actionEvent" role="function">QWidget::actionEvent(QActionEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="actionGeometry">
<db:title>QRect QMenuBar::actionGeometry(QAction *<db:emphasis>act</db:emphasis>) const</db:title>
<db:para>Returns the geometry of action <db:code role="parameter">act</db:code> as a <db:link xlink:href="qrect.xml">QRect</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#actionAt">actionAt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="activeAction">
<db:title>QAction *QMenuBar::activeAction() const</db:title>
<db:para>Returns the <db:link xlink:href="qaction.xml">QAction</db:link> that is currently highlighted. A null pointer will be returned if no action is currently selected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#setActiveAction">setActiveAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction">
<db:title>QAction *QMenuBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with <db:code role="parameter">text</db:code>. The function adds the newly created action to the menu's list of actions, and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addAction-1">
<db:title>QAction *QMenuBar::addAction(const QString &amp;<db:emphasis>text</db:emphasis>, const QObject *<db:emphasis>receiver</db:emphasis>, const char *<db:emphasis>member</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>This convenience function creates a new action with the given <db:code role="parameter">text</db:code>. The action's <db:link xlink:href="qmenubar.xml#triggered">triggered</db:link>() signal is connected to the <db:code role="parameter">receiver</db:code>'s <db:code role="parameter">member</db:code> slot. The function adds the newly created action to the menu's list of actions and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qwidget.xml#actions">QWidget::actions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu">
<db:title>QAction *QMenuBar::addMenu(QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Appends <db:code role="parameter">menu</db:code> to the menu bar. Returns the menu's menuAction().</db:para>
<db:note>
<db:para>The returned <db:link xlink:href="qaction.xml">QAction</db:link> object can be used to hide the corresponding menu.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu-1">
<db:title>QMenu *QMenuBar::addMenu(const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Appends a new <db:link xlink:href="qmenu.xml">QMenu</db:link> with <db:code role="parameter">title</db:code> to the menu bar. The menu bar takes ownership of the menu. Returns the new menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMenu-2">
<db:title>QMenu *QMenuBar::addMenu(const QIcon &amp;<db:emphasis>icon</db:emphasis>, const QString &amp;<db:emphasis>title</db:emphasis>)</db:title>
<db:para>Appends a new <db:link xlink:href="qmenu.xml">QMenu</db:link> with <db:code role="parameter">icon</db:code> and <db:code role="parameter">title</db:code> to the menu bar. The menu bar takes ownership of the menu. Returns the new menu.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#addAction">QWidget::addAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#menuAction">QMenu::menuAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSeparator">
<db:title>QAction *QMenuBar::addSeparator()</db:title>
<db:para>Appends a separator to the menu.</db:para>
</db:section>
<db:section xml:id="changeEvent">
<db:title>[override virtual protected] void QMenuBar::changeEvent(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#changeEvent" role="function">QWidget::changeEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="clear">
<db:title>void QMenuBar::clear()</db:title>
<db:para>Removes all the actions from the menu bar.</db:para>
<db:note>
<db:para>On macOS, menu items that have been merged to the system menu bar are not removed by this function. One way to handle this would be to remove the extra actions yourself. You can set the <db:link xlink:href="qaction.xml#MenuRole-enum">menu role</db:link> on the different menus, so that you know ahead of time which menu items get merged and which do not. Then decide what to recreate or remove yourself.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#removeAction">removeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cornerWidget">
<db:title>QWidget *QMenuBar::cornerWidget(Qt::Corner <db:emphasis>corner</db:emphasis> = Qt::TopRightCorner) const</db:title>
<db:para>Returns the widget on the left of the first or on the right of the last menu item, depending on <db:code role="parameter">corner</db:code>.</db:para>
<db:note>
<db:para>Using a corner other than <db:link xlink:href="qt.xml#Corner-enum">Qt::TopRightCorner</db:link> or <db:link xlink:href="qt.xml#Corner-enum">Qt::TopLeftCorner</db:link> will result in a warning.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#setCornerWidget">setCornerWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QMenuBar::event(QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QMenuBar::eventFilter(QObject *<db:emphasis>object</db:emphasis>, QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusInEvent">
<db:title>[override virtual protected] void QMenuBar::focusInEvent(<db:emphasis>QFocusEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusInEvent" role="function">QWidget::focusInEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="focusOutEvent">
<db:title>[override virtual protected] void QMenuBar::focusOutEvent(<db:emphasis>QFocusEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#focusOutEvent" role="function">QWidget::focusOutEvent(QFocusEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QMenuBar::heightForWidth(<db:emphasis>int</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#heightForWidth" role="function">QWidget::heightForWidth(int w) const</db:link>.</db:para>
</db:section>
<db:section xml:id="hovered">
<db:title>void QMenuBar::hovered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when a menu action is highlighted; <db:code role="parameter">action</db:code> is the action that caused the event to be sent.</db:para>
<db:para>Often this is used to update status information.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#triggered">triggered</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#hovered">QAction::hovered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initStyleOption">
<db:title>[protected] void QMenuBar::initStyleOption(QStyleOptionMenuItem *<db:emphasis>option</db:emphasis>, const QAction *<db:emphasis>action</db:emphasis>) const</db:title>
<db:para>Initialize <db:code role="parameter">option</db:code> with the values from the menu bar and information from <db:code role="parameter">action</db:code>. This method is useful for subclasses when they need a <db:link xlink:href="qstyleoptionmenuitem.xml">QStyleOptionMenuItem</db:link>, but don't want to fill in all the information themselves.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstyleoption.xml#initFrom">QStyleOption::initFrom</db:link>()</db:member>
<db:member><db:link xlink:href="qmenu.xml#initStyleOption">QMenu::initStyleOption</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertMenu">
<db:title>QAction *QMenuBar::insertMenu(QAction *<db:emphasis>before</db:emphasis>, QMenu *<db:emphasis>menu</db:emphasis>)</db:title>
<db:para>This convenience function inserts <db:code role="parameter">menu</db:code> before action <db:code role="parameter">before</db:code> and returns the menus menuAction().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#insertAction">QWidget::insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenubar.xml#addMenu">addMenu</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSeparator">
<db:title>QAction *QMenuBar::insertSeparator(QAction *<db:emphasis>before</db:emphasis>)</db:title>
<db:para>This convenience function creates a new separator action, i.e. an action with <db:link xlink:href="qaction.xml#isSeparator">QAction::isSeparator</db:link>() returning true. The function inserts the newly created action into this menu bar's list of actions before action <db:code role="parameter">before</db:code> and returns it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwidget.xml#insertAction">QWidget::insertAction</db:link>()</db:member>
<db:member><db:link xlink:href="qmenubar.xml#addSeparator">addSeparator</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="keyPressEvent">
<db:title>[override virtual protected] void QMenuBar::keyPressEvent(QKeyEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#keyPressEvent" role="function">QWidget::keyPressEvent(QKeyEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="leaveEvent">
<db:title>[override virtual protected] void QMenuBar::leaveEvent(<db:emphasis>QEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#leaveEvent" role="function">QWidget::leaveEvent(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSizeHint">
<db:title>[override virtual] QSize QMenuBar::minimumSizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#minimumSizeHint-prop" role="property">QWidget::minimumSizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QMenuBar::mouseMoveEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QMenuBar::mousePressEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QMenuBar::mouseReleaseEvent(QMouseEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QMenuBar::paintEvent(QPaintEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="resizeEvent">
<db:title>[override virtual protected] void QMenuBar::resizeEvent(<db:emphasis>QResizeEvent *</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#resizeEvent" role="function">QWidget::resizeEvent(QResizeEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="setActiveAction">
<db:title>[since 4.1] void QMenuBar::setActiveAction(QAction *<db:emphasis>act</db:emphasis>)</db:title>
<db:para>Sets the currently highlighted action to <db:code role="parameter">act</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#activeAction">activeAction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCornerWidget">
<db:title>void QMenuBar::setCornerWidget(QWidget *<db:emphasis>widget</db:emphasis>, Qt::Corner <db:emphasis>corner</db:emphasis> = Qt::TopRightCorner)</db:title>
<db:para>This sets the given <db:code role="parameter">widget</db:code> to be shown directly on the left of the first menu item, or on the right of the last menu item, depending on <db:code role="parameter">corner</db:code>.</db:para>
<db:para>The menu bar takes ownership of <db:code role="parameter">widget</db:code>, reparenting it into the menu bar. However, if the <db:code role="parameter">corner</db:code> already contains a widget, this previous widget will no longer be managed and will still be a visible child of the menu bar.</db:para>
<db:note>
<db:para>Using a corner other than <db:link xlink:href="qt.xml#Corner-enum">Qt::TopRightCorner</db:link> or <db:link xlink:href="qt.xml#Corner-enum">Qt::TopLeftCorner</db:link> will result in a warning.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#cornerWidget">cornerWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QMenuBar::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#visible-prop" role="property">QWidget::visible</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QMenuBar::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
<db:section xml:id="timerEvent">
<db:title>[override virtual protected] void QMenuBar::timerEvent(QTimerEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#timerEvent" role="function">QObject::timerEvent(QTimerEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="triggered">
<db:title>void QMenuBar::triggered(QAction *<db:emphasis>action</db:emphasis>)</db:title>
<db:para>This signal is emitted when an action in a menu belonging to this menubar is triggered as a result of a mouse click; <db:code role="parameter">action</db:code> is the action that caused the signal to be emitted.</db:para>
<db:note>
<db:para><db:link xlink:href="qmenubar.xml">QMenuBar</db:link> has to have ownership of the <db:link xlink:href="qmenu.xml">QMenu</db:link> in order this signal to work.</db:para>
</db:note>
<db:para>Normally, you connect each menu action to a single slot using <db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>(), but sometimes you will want to connect several items to a single slot (most often if the user selects from an array). This signal is useful in such cases.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmenubar.xml#hovered">hovered</db:link>()</db:member>
<db:member><db:link xlink:href="qaction.xml#triggered">QAction::triggered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
