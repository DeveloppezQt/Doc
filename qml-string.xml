<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>string QML Value Type</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A free form text string.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The string type refers to a free form text string in quotes, for example &quot;Hello world!&quot;. The QML language provides this value type by default.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="qml">Text { text: &quot;Hello world!&quot; }
</db:programlisting>
<db:para>Properties of type string are empty by default.</db:para>
<db:para>Strings have a length attribute that holds the number of characters in the string.</db:para>
<db:para>The string value type is backed by the C++ type <db:link xlink:href="qstring.xml">QString</db:link>. It extends the JavaScript String primitive type in that it provides much of the same API, plus some extra methods. For example, the QML string value type method arg() supports value substitution:</db:para>
<db:programlisting language="qml">var message = &quot;There are %1 items&quot;
var count = 20
console.log(message.arg(count))
</db:programlisting>
<db:para>The example above prints &quot;There are 20 items&quot;.</db:para>
<db:para>The QML string value type supports most of the ECMAScript string features, such as template (string) literals, string interpolation, multi-line strings, and looping over strings.</db:para>
<db:para>In general, QML string supports most JavaScript String methods, including checking for inclusion using string.includes(), string.startsWith(), and string.endsWith(); repeating a string using string.repeats(), and slicing and splitting using string.slice() and string.split().</db:para>
<db:para>For more information about which version of ECMAScript QML supports, see <db:link xlink:href="qtqml-javascript-hostenvironment.xml">JavaScript Host Environment</db:link></db:para>
<db:para>For more information about JavaScript String methods, see <db:link xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">mdn JavaScript String</db:link></db:para>
<db:para>When integrating with C++, note that any <db:link xlink:href="qstring.xml">QString</db:link> value <db:link xlink:href="qtqml-cppintegration-data.xml">passed into QML from C++</db:link> is automatically converted into a string value, and vice-versa.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-typesystem-valuetypes.xml">QML Value Types</db:link></db:member>
<db:member><db:link xlink:href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ECMAScript Language Specification</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:article>
