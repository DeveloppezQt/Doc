<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Textured Surface Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Using texture with Q3DSurface.</db:para>
<db:para>This documentation was introduced in QtDataVisualization 1.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Data Visualization module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;surfacegraph.h&quot;

#include &lt;QtWidgets/QApplication&gt;
#include &lt;QtWidgets/QWidget&gt;
#include &lt;QtWidgets/QHBoxLayout&gt;
#include &lt;QtWidgets/QVBoxLayout&gt;
#include &lt;QtWidgets/QGroupBox&gt;
#include &lt;QtWidgets/QCheckBox&gt;
#include &lt;QtWidgets/QLabel&gt;
#include &lt;QtWidgets/QMessageBox&gt;
#include &lt;QtGui/QScreen&gt;
#include &lt;QtGui/QPainter&gt;

int main(int argc, char **argv)
{
    QApplication app(argc, argv);
    Q3DSurface *graph = new Q3DSurface();
    QWidget *container = QWidget::createWindowContainer(graph);

    if (!graph-&gt;hasContext()) {
        QMessageBox msgBox;
        msgBox.setText(&quot;Couldn't initialize the OpenGL context.&quot;);
        msgBox.exec();
        return -1;
    }

    QSize screenSize = graph-&gt;screen()-&gt;size();
    container-&gt;setMinimumSize(QSize(screenSize.width() / 2, screenSize.height() / 1.6));
    container-&gt;setMaximumSize(screenSize);
    container-&gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    container-&gt;setFocusPolicy(Qt::StrongFocus);

    QWidget *widget = new QWidget;
    QHBoxLayout *hLayout = new QHBoxLayout(widget);
    QVBoxLayout *vLayout = new QVBoxLayout();
    hLayout-&gt;addWidget(container, 1);
    hLayout-&gt;addLayout(vLayout);
    vLayout-&gt;setAlignment(Qt::AlignTop);

    widget-&gt;setWindowTitle(QStringLiteral(&quot;Textured surface example&quot;));

    QCheckBox *enableTexture = new QCheckBox(widget);
    enableTexture-&gt;setText(QStringLiteral(&quot;Surface texture&quot;));

    int height = 400;
    int width = 100;
    int border = 10;
    QLinearGradient gr(0, 0, 1, height - 2 * border);
    gr.setColorAt(1.0f, Qt::black);
    gr.setColorAt(0.8f, Qt::darkGreen);
    gr.setColorAt(0.6f, Qt::green);
    gr.setColorAt(0.4f, Qt::yellow);
    gr.setColorAt(0.2f, Qt::red);
    gr.setColorAt(0.0f, Qt::darkRed);

    QPixmap pm(width, height);
    pm.fill(Qt::transparent);
    QPainter pmp(&amp;pm);
    pmp.setBrush(QBrush(gr));
    pmp.setPen(Qt::NoPen);
    pmp.drawRect(border, border, 35, height - 2 * border);
    pmp.setPen(Qt::black);
    int step = (height - 2 * border) / 5;
    for (int i = 0; i &lt; 6; i++) {
        int yPos = i * step + border;
        pmp.drawLine(border, yPos, 55, yPos);
        pmp.drawText(60, yPos + 2, QString(&quot;%1 m&quot;).arg(550 - (i * 110)));
    }

    QLabel *label = new QLabel(widget);
    label-&gt;setPixmap(pm);

    QGroupBox *heightMapGroupBox = new QGroupBox(QStringLiteral(&quot;Highlight color map&quot;));
    QVBoxLayout *colorMapVBox = new QVBoxLayout;
    colorMapVBox-&gt;addWidget(label);
    heightMapGroupBox-&gt;setLayout(colorMapVBox);

    vLayout-&gt;addWidget(enableTexture);
    vLayout-&gt;addWidget(heightMapGroupBox);

    widget-&gt;show();

    SurfaceGraph *modifier = new SurfaceGraph(graph);

    QObject::connect(enableTexture, &amp;QCheckBox::stateChanged,
                     modifier, &amp;SurfaceGraph::toggleSurfaceTexture);

    enableTexture-&gt;setChecked(true);

    return app.exec();
}

</db:programlisting>
</db:article>
