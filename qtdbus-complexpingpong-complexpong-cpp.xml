<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>D-Bus Complex Ping Pong Example</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates usage of the Qt D-Bus typesystem.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

#include &lt;QtCore/QCoreApplication&gt;
#include &lt;QtCore/QTimer&gt;
#include &lt;QtDBus/QtDBus&gt;

#include &quot;ping-common.h&quot;
#include &quot;complexpong.h&quot;

// the property
QString Pong::value() const
{
    return m_value;
}

void Pong::setValue(const QString &amp;newValue)
{
    m_value = newValue;
}

void Pong::quit()
{
    QTimer::singleShot(0, QCoreApplication::instance(), SLOT(quit()));
}

QDBusVariant Pong::query(const QString &amp;query)
{
    QString q = query.toLower();
    if (q == &quot;hello&quot;)
        return QDBusVariant(&quot;World&quot;);
    if (q == &quot;ping&quot;)
        return QDBusVariant(&quot;Pong&quot;);
    if (q.indexOf(&quot;the answer to life, the universe and everything&quot;) != -1)
        return QDBusVariant(42);
    if (q.indexOf(&quot;unladen swallow&quot;) != -1) {
        if (q.indexOf(&quot;european&quot;) != -1)
            return QDBusVariant(11.0);
        return QDBusVariant(QByteArray(&quot;african or european?&quot;));
    }

    return QDBusVariant(&quot;Sorry, I don't know the answer&quot;);
}

int main(int argc, char **argv)
{
    QCoreApplication app(argc, argv);

    QObject obj;
    Pong *pong = new Pong(&amp;obj);
    pong-&gt;connect(&amp;app, SIGNAL(aboutToQuit()), SIGNAL(aboutToQuit()));
    pong-&gt;setProperty(&quot;value&quot;, &quot;initial value&quot;);
    QDBusConnection::sessionBus().registerObject(&quot;/&quot;, &amp;obj);

    if (!QDBusConnection::sessionBus().registerService(SERVICE_NAME)) {
        fprintf(stderr, &quot;%s\n&quot;,
                qPrintable(QDBusConnection::sessionBus().lastError().message()));
        exit(1);
    }

    app.exec();
    return 0;
}

</db:programlisting>
</db:article>
