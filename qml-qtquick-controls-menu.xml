<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Menu QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Menu popup that can be used as a context menu or popup menu.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Popup</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Menu is part of <db:simplelist><db:member>qtquickcontrols-menus</db:member><db:member>qtquickcontrols-popups</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtquickcontrols-menu.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Menu has two main use cases:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Context menus; for example, a menu that is shown after right clicking</db:para>
</db:listitem>
<db:listitem>
<db:para>Popup menus; for example, a menu that is shown after clicking a button</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>When used as a context menu, the recommended way of opening the menu is to call <db:link xlink:href="qml-qtquick-controls-menu.xml#popup-method">popup</db:link>(). Unless a position is explicitly specified, the menu is positioned at the mouse cursor on desktop platforms that have a mouse cursor available, and otherwise centered over its parent item.</db:para>
<db:programlisting language="cpp">MouseArea {
    anchors.fill: parent
    acceptedButtons: Qt.LeftButton | Qt.RightButton
    onClicked: {
        if (mouse.button === Qt.RightButton)
            contextMenu.popup()
    }
    onPressAndHold: {
        if (mouse.source === Qt.MouseEventNotSynthesized)
            contextMenu.popup()
    }

    Menu {
        id: contextMenu
        MenuItem { text: &quot;Cut&quot; }
        MenuItem { text: &quot;Copy&quot; }
        MenuItem { text: &quot;Paste&quot; }
    }
}
</db:programlisting>
<db:para>When used as a popup menu, it is easiest to specify the position by specifying the desired <db:link xlink:href="qml-qtquick-controls-popup.xml#x-prop">x</db:link> and <db:link xlink:href="qml-qtquick-controls-popup.xml#y-prop">y</db:link> coordinates using the respective properties, and call <db:link xlink:href="qml-qtquick-controls-popup.xml#open-method">open</db:link>() to open the menu.</db:para>
<db:programlisting language="cpp">Button {
    id: fileButton
    text: &quot;File&quot;
    onClicked: menu.open()

    Menu {
        id: menu
        y: fileButton.height

        MenuItem {
            text: &quot;New...&quot;
        }
        MenuItem {
            text: &quot;Open...&quot;
        }
        MenuItem {
            text: &quot;Save&quot;
        }
    }
}
</db:programlisting>
<db:para>If the button should also close the menu when clicked, use the <db:code>Popup.CloseOnPressOutsideParent</db:code> flag:</db:para>
<db:programlisting language="cpp">onClicked: menu.visible = !menu.visible

Menu {
    // ...
    closePolicy: Popup.CloseOnEscape | Popup.CloseOnPressOutsideParent
</db:programlisting>
<db:para>Since <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.3 (Qt 5.10), it is also possible to create sub-menus and declare Action objects inside Menu:</db:para>
<db:programlisting language="cpp">Menu {
    Action { text: &quot;Cut&quot; }
    Action { text: &quot;Copy&quot; }
    Action { text: &quot;Paste&quot; }

    MenuSeparator { }

    Menu {
        title: &quot;Find/Replace&quot;
        Action { text: &quot;Find Next&quot; }
        Action { text: &quot;Find Previous&quot; }
        Action { text: &quot;Replace&quot; }
    }
}
</db:programlisting>
<db:para>Sub-menus are <db:link xlink:href="qml-qtquick-controls-menu.xml#cascade-prop">cascading</db:link> by default on desktop platforms that have a mouse cursor available. Non-cascading menus are shown one menu at a time, and centered over the parent menu.</db:para>
<db:para>Typically, menu items are statically declared as children of the menu, but Menu also provides API to <db:link xlink:href="qml-qtquick-controls-menu.xml#addItem-method">add</db:link>, <db:link xlink:href="qml-qtquick-controls-menu.xml#insertItem-method">insert</db:link>, <db:link xlink:href="qml-qtquick-controls-menu.xml#moveItem-method">move</db:link> and <db:link xlink:href="qml-qtquick-controls-menu.xml#removeItem-method">remove</db:link> items dynamically. The items in a menu can be accessed using <db:link xlink:href="qml-qtquick-controls-menu.xml#itemAt-method">itemAt</db:link>() or <db:link xlink:href="qml-qtquick-controls-popup.xml#contentChildren-prop">contentChildren</db:link>.</db:para>
<db:para>Although <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItems</db:link> are most commonly used with Menu, it can contain any type of item.</db:para>
<db:section xml:id="margins">
<db:title>Margins</db:title>
<db:para>As it is inherited from Popup, Menu supports <db:link xlink:href="qml-qtquick-controls-popup.xml#margins-prop">margins</db:link>. By default, all of the built-in styles specify <db:code>0</db:code> for Menu's margins to ensure that the menu is kept within the bounds of the window. To allow a menu to go outside of the window (to animate it moving into view, for example), set the margins property to <db:code>-1</db:code>.</db:para>
</db:section>
<db:section xml:id="dynamically-generating-menu-items">
<db:title>Dynamically Generating Menu Items</db:title>
<db:para>You can dynamically create menu items with <db:link xlink:href="qml-qtqml-models-instantiator.xml">Instantiator</db:link> or <db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">dynamic object creation</db:link>.</db:para>
<db:section xml:id="using-instantiator">
<db:title>Using Instantiator</db:title>
<db:para>You can dynamically generate menu items with <db:link xlink:href="qml-qtqml-models-instantiator.xml">Instantiator</db:link>. The following code shows how you can implement a &quot;Recent Files&quot; submenu, where the items come from a list of files stored in settings:</db:para>
<db:programlisting language="qml">Menu {
    title: qsTr(&quot;File&quot;)

    Menu {
        id: recentFilesMenu
        title: qsTr(&quot;Recent Files&quot;)
        enabled: recentFilesInstantiator.count &amp;gt; 0

        Instantiator {
            id: recentFilesInstantiator
            model: settings.recentFiles
            delegate: MenuItem {
                text: settings.displayableFilePath(modelData)
                onTriggered: loadFile(modelData)
            }

            onObjectAdded: (index, object) =&amp;gt; recentFilesMenu.insertItem(index, object)
            onObjectRemoved: (index, object) =&amp;gt; recentFilesMenu.removeItem(object)
        }

        MenuSeparator {}

        MenuItem {
            text: qsTr(&quot;Clear Recent Files&quot;)
            onTriggered: settings.clearRecentFiles()
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="using-dynamic-object-creation">
<db:title>Using Dynamic Object Creation</db:title>
<db:para>You can also dynamically load a component from a QML file using <db:link xlink:href="qml-qtqml-qt.xml#createComponent-method">Qt.createComponent</db:link>(). Once the component is ready, you can call its <db:link xlink:href="qml-qtqml-component.xml#createObject-method">createObject</db:link>() method to create an instance of that component.</db:para>
<db:programlisting language="qml">Row {
    anchors.centerIn: parent

    Component {
        id: menuItemComponent

        MenuItem {}
    }

    Button {
        id: button
        text: &quot;Menu&quot;
        onClicked: menu.open()
        Menu {
            id: menu
        }
    }

    Button {
        text: &quot;Add item&quot;
        onClicked: {
            onClicked: {
                let menuItem = menuItemComponent.createObject(
                    menu.contentItem, { text: qsTr(&quot;New item&quot;) })
                menu.addMenu(menuItem)
            }
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquickcontrols-customize.xml#customizing-menu">Customizing Menu</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-menus.xml">Menu Controls</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-popups.xml">Popup Controls</db:link></db:member>
<db:member><db:link xlink:href="qtqml-javascript-dynamicobjectcreation.xml">Dynamic QML Object Creation from JavaScript</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="cascade-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] cascade : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>cascade</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the menu cascades its sub-menus.</db:para>
<db:para>The default value is platform-specific. Menus are cascading by default on desktop platforms that have a mouse cursor available. Non-cascading menus are shown one menu at a time, and centered over the parent menu.</db:para>
<db:note>
<db:para>Changing the value of the property has no effect while the menu is open.</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml#overlap-prop">overlap</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentData-prop">
<db:title>[default] contentData : list&lt;QtObject&gt;</db:title>
<db:fieldsynopsis>
<db:type>list&lt;QtObject&gt;</db:type>
<db:varname>contentData</db:varname>
<db:modifier>writable</db:modifier>
<db:modifier>[default]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of content data.</db:para>
<db:para>The list contains all objects that have been declared in QML as children of the menu, and also items that have been dynamically added or inserted using the <db:link xlink:href="qml-qtquick-controls-menu.xml#addItem-method">addItem</db:link>() and <db:link xlink:href="qml-qtquick-controls-menu.xml#insertItem-method">insertItem</db:link>() methods, respectively.</db:para>
<db:note>
<db:para>Unlike <db:code>contentChildren</db:code>, <db:code>contentData</db:code> does include non-visual QML objects. It is not re-ordered when items are inserted or moved.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-item.xml#data-prop">Item::data</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#contentChildren-prop">contentChildren</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="contentModel-prop">
<db:title>[read-only] contentModel : model</db:title>
<db:fieldsynopsis>
<db:type>model</db:type>
<db:varname>contentModel</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model used to display menu items.</db:para>
<db:para>The content model is provided for visualization purposes. It can be assigned as a model to a content item that presents the contents of the menu.</db:para>
<db:programlisting language="cpp">Menu {
    id: menu
    contentItem: ListView {
        model: menu.contentModel
    }
}
</db:programlisting>
<db:para>The model allows menu items to be statically declared as children of the menu.</db:para>
</db:section>
<db:section xml:id="count-prop">
<db:title>[read-only, since QtQuick.Controls 2.3 (Qt 5.10)] count : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>count</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of items.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="currentIndex-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] currentIndex : int</db:title>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>currentIndex</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the index of the currently highlighted item.</db:para>
<db:para>Menu items can be highlighted by mouse hover or keyboard navigation.</db:para>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menuitem.xml#highlighted-prop">MenuItem::highlighted</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="delegate-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] delegate : Component</db:title>
<db:fieldsynopsis>
<db:type>Component</db:type>
<db:varname>delegate</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the component that is used to create items to present actions.</db:para>
<db:programlisting language="cpp">Menu {
    Action { text: &quot;Cut&quot; }
    Action { text: &quot;Copy&quot; }
    Action { text: &quot;Paste&quot; }
}
</db:programlisting>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml">Action</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="focus-prop">
<db:title>focus : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>focus</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds whether the popup wants focus.</db:para>
<db:para>When the popup actually receives focus, <db:link xlink:href="qml-qtquick-controls-popup.xml#activeFocus-prop">activeFocus</db:link> will be <db:code>true</db:code>. For more information, see <db:link xlink:href="qtquick-input-focus.xml">Keyboard Focus in Qt Quick</db:link>.</db:para>
<db:para>The default value is <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#activeFocus-prop">activeFocus</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon group</db:title>
<db:bridgehead renderas="sect2" xml:id="icon.cache-prop">icon.cache : bool</db:bridgehead>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>icon.cache</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.color-prop">icon.color : color</db:bridgehead>
<db:fieldsynopsis>
<db:type>color</db:type>
<db:varname>icon.color</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.height-prop">icon.height : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>icon.height</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.name-prop">icon.name : string</db:bridgehead>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>icon.name</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.source-prop">icon.source : url</db:bridgehead>
<db:fieldsynopsis>
<db:type>url</db:type>
<db:varname>icon.source</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:bridgehead renderas="sect2" xml:id="icon.width-prop">icon.width : int</db:bridgehead>
<db:fieldsynopsis>
<db:type>int</db:type>
<db:varname>icon.width</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property group was added in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 6.5.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>name</db:para>
</db:td>
<db:td>
<db:para>This property holds the name of the icon to use.</db:para>
<db:para>The icon will be loaded from the platform theme. If the icon is found in the theme, it will always be used; even if <db:link xlink:href="qml-qtquick-controls-menu.xml#icon.source-prop">icon.source</db:link> is also set. If the icon is not found, <db:link xlink:href="qml-qtquick-controls-menu.xml#icon.source-prop">icon.source</db:link> will be used instead.</db:para>
<db:para>For more information on theme icons, see <db:link xlink:href="qicon.xml#fromTheme">QIcon::fromTheme</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>source</db:para>
</db:td>
<db:td>
<db:para>This property holds the name of the icon to use.</db:para>
<db:para>The icon will be loaded as a regular image.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-controls-menu.xml#icon.name-prop">icon.name</db:link> is set and refers to a valid theme icon, it will always be used instead of this property.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>width</db:para>
</db:td>
<db:td>
<db:para>This property holds the width of the icon.</db:para>
<db:para>The icon's width will never exceed this value, though it will shrink when necessary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>height</db:para>
</db:td>
<db:td>
<db:para>This property holds the height of the icon.</db:para>
<db:para>The icon's height will never exceed this value, though it will shrink when necessary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>color</db:para>
</db:td>
<db:td>
<db:para>This property holds the color of the icon.</db:para>
<db:para>The icon is tinted with the specified color, unless the color is set to <db:code>&quot;transparent&quot;</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>cache</db:para>
</db:td>
<db:td>
<db:para>This property specifies whether the icon should be cached.</db:para>
<db:para>The default value is true.</db:para>
<db:para>For more information, see <db:link xlink:href="qml-qtquick-image.xml#cache-prop">cache</db:link>.</db:para>
<db:para>This property was introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.13.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#text-prop">AbstractButton::text</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-abstractbutton.xml#display-prop">AbstractButton::display</db:link></db:member>
<db:member><db:link xlink:href="qtquickcontrols-icons.xml">Icons in Qt Quick Controls</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="overlap-prop">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] overlap : real</db:title>
<db:fieldsynopsis>
<db:type>real</db:type>
<db:varname>overlap</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the amount of pixels by which the menu horizontally overlaps its parent menu.</db:para>
<db:para>The property only has effect when the menu is used as a cascading sub-menu.</db:para>
<db:para>The default value is style-specific.</db:para>
<db:note>
<db:para>Changing the value of the property has no effect while the menu is open.</db:para>
</db:note>
<db:para>This property was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml#cascade-prop">cascade</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>title</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the title for the menu.</db:para>
<db:para>The title of a menu is often displayed in the text of a menu item when the menu is a submenu, and in the text of a tool button when it is in a menubar.</db:para>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="popup-method-1">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(Item <db:emphasis>parent</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis> = null)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(Item parent, MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(MenuItem <db:emphasis>item</db:emphasis> = null)</db:bridgehead><db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the menu at the mouse cursor on desktop platforms that have a mouse cursor available, and otherwise centers the menu over its <db:code role="parameter">parent</db:code> item.</db:para>
<db:para>The menu can be optionally aligned to a specific menu <db:code role="parameter">item</db:code>.</db:para>
<db:para>This QML method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#open-method">Popup::open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popup-method-3">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(Item <db:emphasis>parent</db:emphasis>, point <db:emphasis>pos</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis> = null)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>point</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(Item parent, point pos, MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(point <db:emphasis>pos</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis> = null)</db:bridgehead><db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>point</db:type>
<db:parameter>pos</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(point pos, MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the menu at the specified position <db:code role="parameter">pos</db:code> in the popups coordinate system, that is, a coordinate relative to its <db:code role="parameter">parent</db:code> item.</db:para>
<db:para>The menu can be optionally aligned to a specific menu <db:code role="parameter">item</db:code>.</db:para>
<db:para>This QML method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#open-method">Popup::open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="popup-method-5">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(Item <db:emphasis>parent</db:emphasis>, real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis> = null)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>Item</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(Item parent, real x, real y, MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:bridgehead renderas="sect2">[since QtQuick.Controls 2.3 (Qt 5.10)] void popup(real <db:emphasis>x</db:emphasis>, real <db:emphasis>y</db:emphasis>, MenuItem <db:emphasis>item</db:emphasis> = null)</db:bridgehead><db:methodsynopsis>
<db:void/>
<db:methodname>popup</db:methodname>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>x</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>real</db:type>
<db:parameter>y</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>MenuItem</db:type>
<db:parameter>item</db:parameter>
<db:initializer>null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">qmlmethod</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">void popup(real x, real y, MenuItem item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Opens the menu at the specified position <db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code> in the popups coordinate system, that is, a coordinate relative to its <db:code role="parameter">parent</db:code> item.</db:para>
<db:para>The menu can be optionally aligned to a specific menu <db:code role="parameter">item</db:code>.</db:para>
<db:para>This QML method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml#dismiss-method">dismiss</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#open-method">Popup::open</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="actionAt-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] Action actionAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the action at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if the index is not valid or there is no action at the specified index.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="addAction-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void addAction(Action <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">action</db:code> to the end of this menu.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="addItem-method">
<db:title>void addItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">item</db:code> to the end of the list of items.</db:para>
</db:section>
<db:section xml:id="addMenu-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void addMenu(Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Adds <db:code role="parameter">menu</db:code> as a sub-menu to the end of this menu.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="dismiss-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void dismiss()</db:title>
<db:para>Closes all menus in the hierarchy that this menu belongs to.</db:para>
<db:note>
<db:para>Unlike <db:link xlink:href="qml-qtquick-controls-popup.xml#close-method">close</db:link>() that only closes a menu and its sub-menus, <db:code>dismiss()</db:code> closes the whole hierarchy of menus, including the parent menus. In practice, <db:code>close()</db:code> is suitable e.g. for implementing navigation in a hierarchy of menus, and <db:code>dismiss()</db:code> is the appropriate method for closing the whole hierarchy of menus.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menu.xml#popup-method">popup</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-popup.xml#close-method">Popup::close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertAction-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void insertAction(int <db:emphasis>index</db:emphasis>, Action <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">action</db:code> at <db:code role="parameter">index</db:code>. The index is within all items in the menu.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="insertItem-method">
<db:title>void insertItem(int <db:emphasis>index</db:emphasis>, Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">item</db:code> at <db:code role="parameter">index</db:code>.</db:para>
</db:section>
<db:section xml:id="insertMenu-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void insertMenu(int <db:emphasis>index</db:emphasis>, Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">menu</db:code> as a sub-menu at <db:code role="parameter">index</db:code>. The index is within all items in the menu.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="itemAt-method">
<db:title>Item itemAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the item at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if it does not exist.</db:para>
</db:section>
<db:section xml:id="menuAt-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] Menu menuAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Returns the sub-menu at <db:code role="parameter">index</db:code>, or <db:code>null</db:code> if the index is not valid or there is no sub-menu at the specified index.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="moveItem-method">
<db:title>void moveItem(int <db:emphasis>from</db:emphasis>, int <db:emphasis>to</db:emphasis>)</db:title>
<db:para>Moves an item <db:code role="parameter">from</db:code> one index <db:code role="parameter">to</db:code> another.</db:para>
</db:section>
<db:section xml:id="removeAction-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void removeAction(Action <db:emphasis>action</db:emphasis>)</db:title>
<db:para>Removes and destroys the specified <db:code role="parameter">action</db:code>.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="removeItem-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void removeItem(Item <db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes and destroys the specified <db:code role="parameter">item</db:code>.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="removeMenu-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] void removeMenu(Menu <db:emphasis>menu</db:emphasis>)</db:title>
<db:para>Removes and destroys the specified <db:code role="parameter">menu</db:code>.</db:para>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="takeAction-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] Action takeAction(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and returns the action at <db:code role="parameter">index</db:code>. The index is within all items in the menu.</db:para>
<db:note>
<db:para>The ownership of the action is transferred to the caller.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="takeItem-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] MenuItem takeItem(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and returns the item at <db:code role="parameter">index</db:code>.</db:para>
<db:note>
<db:para>The ownership of the item is transferred to the caller.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
<db:section xml:id="takeMenu-method">
<db:title>[since QtQuick.Controls 2.3 (Qt 5.10)] Menu takeMenu(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Removes and returns the menu at <db:code role="parameter">index</db:code>. The index is within all items in the menu.</db:para>
<db:note>
<db:para>The ownership of the menu is transferred to the caller.</db:para>
</db:note>
<db:para>This method was introduced in QtQuick.Controls 2.3 (Qt 5.10).</db:para>
</db:section>
</db:section>
</db:article>
