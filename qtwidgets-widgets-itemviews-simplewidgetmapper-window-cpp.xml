<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Simple Widget Mapper Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Simple Widget Mapper example shows how to use a widget mapper to display data from a model in a collection of widgets.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;window.h&quot;

#include &amp;lt;QtWidgets&amp;gt;

Window::Window(QWidget *parent)
    : QWidget(parent)
{
    setupModel();

    nameLabel = new QLabel(tr(&quot;Na&amp;amp;me:&quot;));
    nameEdit = new QLineEdit();
    addressLabel = new QLabel(tr(&quot;&amp;amp;Address:&quot;));
    addressEdit = new QTextEdit();
    ageLabel = new QLabel(tr(&quot;A&amp;amp;ge (in years):&quot;));
    ageSpinBox = new QSpinBox();
    nextButton = new QPushButton(tr(&quot;&amp;amp;Next&quot;));
    previousButton = new QPushButton(tr(&quot;&amp;amp;Previous&quot;));

    nameLabel-&amp;gt;setBuddy(nameEdit);
    addressLabel-&amp;gt;setBuddy(addressEdit);
    ageLabel-&amp;gt;setBuddy(ageSpinBox);

    mapper = new QDataWidgetMapper(this);
    mapper-&amp;gt;setModel(model);
    mapper-&amp;gt;addMapping(nameEdit, 0);
    mapper-&amp;gt;addMapping(addressEdit, 1);
    mapper-&amp;gt;addMapping(ageSpinBox, 2);

    connect(previousButton, &amp;amp;QAbstractButton::clicked, mapper, &amp;amp;QDataWidgetMapper::toPrevious);
    connect(nextButton, &amp;amp;QAbstractButton::clicked, mapper, &amp;amp;QDataWidgetMapper::toNext);
    connect(mapper, &amp;amp;QDataWidgetMapper::currentIndexChanged, this, &amp;amp;Window::updateButtons);

    QGridLayout *layout = new QGridLayout();
    layout-&amp;gt;addWidget(nameLabel, 0, 0, 1, 1);
    layout-&amp;gt;addWidget(nameEdit, 0, 1, 1, 1);
    layout-&amp;gt;addWidget(previousButton, 0, 2, 1, 1);
    layout-&amp;gt;addWidget(addressLabel, 1, 0, 1, 1);
    layout-&amp;gt;addWidget(addressEdit, 1, 1, 2, 1);
    layout-&amp;gt;addWidget(nextButton, 1, 2, 1, 1);
    layout-&amp;gt;addWidget(ageLabel, 3, 0, 1, 1);
    layout-&amp;gt;addWidget(ageSpinBox, 3, 1, 1, 1);
    setLayout(layout);

    setWindowTitle(tr(&quot;Simple Widget Mapper&quot;));
    mapper-&amp;gt;toFirst();
}

void Window::setupModel()
{
    model = new QStandardItemModel(5, 3, this);

    QStringList names;
    names &amp;lt;&amp;lt; &quot;Alice&quot; &amp;lt;&amp;lt; &quot;Bob&quot; &amp;lt;&amp;lt; &quot;Carol&quot; &amp;lt;&amp;lt; &quot;Donald&quot; &amp;lt;&amp;lt; &quot;Emma&quot;;

    QStringList addresses;
    addresses &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;123 Main Street&amp;lt;br/&amp;gt;Market Town&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;PO Box 32&amp;lt;br/&amp;gt;Mail Handling Service&quot;
                 &quot;&amp;lt;br/&amp;gt;Service City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;The Lighthouse&amp;lt;br/&amp;gt;Remote Island&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;47338 Park Avenue&amp;lt;br/&amp;gt;Big City&amp;lt;/qt&amp;gt;&quot;
              &amp;lt;&amp;lt; &quot;&amp;lt;qt&amp;gt;Research Station&amp;lt;br/&amp;gt;Base Camp&amp;lt;br/&amp;gt;Big Mountain&amp;lt;/qt&amp;gt;&quot;;

    QStringList ages;
    ages &amp;lt;&amp;lt; &quot;20&quot; &amp;lt;&amp;lt; &quot;31&quot; &amp;lt;&amp;lt; &quot;32&quot; &amp;lt;&amp;lt; &quot;19&quot; &amp;lt;&amp;lt; &quot;26&quot;;

    for (int row = 0; row &amp;lt; 5; ++row) {
      QStandardItem *item = new QStandardItem(names[row]);
      model-&amp;gt;setItem(row, 0, item);
      item = new QStandardItem(addresses[row]);
      model-&amp;gt;setItem(row, 1, item);
      item = new QStandardItem(ages[row]);
      model-&amp;gt;setItem(row, 2, item);
    }
}

void Window::updateButtons(int row)
{
    previousButton-&amp;gt;setEnabled(row &amp;gt; 0);
    nextButton-&amp;gt;setEnabled(row &amp;lt; model-&amp;gt;rowCount() - 1);
}

</db:programlisting>
</db:article>
