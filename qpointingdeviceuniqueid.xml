<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPointingDeviceUniqueId Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qpointingdeviceuniqueid.xml">QPointingDeviceUniqueId</db:link> identifies a unique object, such as a tagged token or stylus, which is used with a pointing device.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPointingDeviceUniqueId</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Instantiated By</db:term>
<db:listitem>
<db:para>qml-qtquick-pointingdeviceuniqueid.xml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPointingDeviceUniqueId is part of <db:simplelist><db:member>events</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>QPointingDeviceUniqueIds can be compared for equality, and can be used as keys in a <db:link xlink:href="qhash.xml#qhash">QHash</db:link>. You get access to the numerical ID via <db:link xlink:href="qpointingdeviceuniqueid.xml#numericId-prop">numericId</db:link>(), if the device supports such IDs. For future extensions, though, you should not use that function, but compare objects of this type using the equality operator.</db:para>
<db:para>This class is a thin wrapper around an integer ID. You pass it into and out of functions by value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qeventpoint.xml">QEventPoint</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="numericId-prop">
<db:title>[read-only] numericId : const qint64</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qint64</db:type>
<db:varname>numericId</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">numericId</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the numeric unique ID of the token represented by a touchpoint</db:para>
<db:para>If the device provides a numeric ID, <db:link xlink:href="qpointingdeviceuniqueid.xml#isValid">isValid</db:link>() returns true, and this property provides the numeric ID; otherwise it is -1.</db:para>
<db:para>You should not use the value of this property in portable code, but instead rely on equality to identify pointers.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qint64-typedef">qint64</db:link></db:type> <db:emphasis role="bold">numericId</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointingdeviceuniqueid.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPointingDeviceUniqueId">
<db:title>QPointingDeviceUniqueId::QPointingDeviceUniqueId()</db:title>
<db:constructorsynopsis>
<db:methodname>QPointingDeviceUniqueId</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDeviceUniqueId()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an invalid unique pointer ID.</db:para>
</db:section>
<db:section xml:id="fromNumericId">
<db:title>[static] QPointingDeviceUniqueId QPointingDeviceUniqueId::fromNumericId(qint64 <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QPointingDeviceUniqueId</db:type>
<db:methodname>fromNumericId</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPointingDeviceUniqueId fromNumericId(qint64 id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Constructs a unique pointer ID from numeric ID <db:code role="parameter">id</db:code>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QPointingDeviceUniqueId::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether this unique pointer ID is valid, that is, it represents an actual pointer.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qHash">
<db:title>size_t qHash(QPointingDeviceUniqueId <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(QPointingDeviceUniqueId key, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(QPointingDeviceUniqueId <db:emphasis>lhs</db:emphasis>, QPointingDeviceUniqueId <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(QPointingDeviceUniqueId lhs, QPointingDeviceUniqueId rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the two unique pointer IDs <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> identify different pointers (<db:code>true</db:code>) or not (<db:code>false</db:code>).</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(QPointingDeviceUniqueId <db:emphasis>lhs</db:emphasis>, QPointingDeviceUniqueId <db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPointingDeviceUniqueId</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(QPointingDeviceUniqueId lhs, QPointingDeviceUniqueId rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the two unique pointer IDs <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> identify the same pointer (<db:code>true</db:code>) or not (<db:code>false</db:code>).</db:para>
</db:section>
</db:section>
</db:article>
