<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Quick</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt Quick to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>In this topic we summarize those changes in Qt Quick, and provide guidance to handle them.</db:para>
<db:section xml:id="changes-to-qt-quick-qml-types">
<db:title>Changes to Qt Quick QML Types</db:title>
<db:section xml:id="changed-type-of-font-weight">
<db:title>Changed Type of font.weight</db:title>
<db:para>The type of <db:code>font.weight</db:code> has been changed to <db:code>int</db:code>. The pre-defined weight classes still exist, but it is now possible to use arbitrary integers to select fonts which do not match any of these weight classes. This ensures parity with the C++ API, where it has always been possible to express the font weight as an arbitrary integer.</db:para>
<db:para>Most code will be unaffected by this change, except in the case where an implicit conversion from a string to enum value was used.</db:para>
<db:programlisting language="cpp">font.weight: &quot;Bold&quot;
</db:programlisting>
<db:para>This code will no longer parse correctly and has to be replaced by its equivalent enum value, as demonstrated below.</db:para>
<db:programlisting language="cpp">font.weight: Font.Bold
</db:programlisting>
</db:section>
<db:section xml:id="fontloader-name-is-now-a-read-only-property">
<db:title>FontLoader.name Is Now a Read-Only Property</db:title>
<db:para>In Qt 5, the <db:code>name</db:code> property of <db:link xlink:href="qml-qtquick-fontloader.xml">FontLoader</db:link> was writable and would override the source property of the item when set. This caused some confusion as to its purpose and could cause undeterministic behavior if there was a race condition between the setters for the conflicting properties.</db:para>
<db:para>This means that code such as the following will no longer work.</db:para>
<db:programlisting language="cpp">FontLoader {
    id: fontLoader
    name: &quot;Helvetica&quot;
}

Text {
    font.family: fontLoader.name
    text: &quot;Foobar&quot;
}
</db:programlisting>
<db:para>Instead, use a custom property to store font family names.</db:para>
<db:programlisting language="cpp">property string fontName: &quot;Helvetica&quot;

Text {
    font.family: fontName
    text: &quot;Foobar&quot;
}
</db:programlisting>
</db:section>
<db:section xml:id="the-openglinfo-qml-type-is-removed">
<db:title>The OpenGLInfo QML Type Is Removed</db:title>
<db:para>In Qt 5.8, OpenGLInfo was deprecated and is removed for Qt 6. Please use <db:link xlink:href="qml-qtquick-graphicsinfo.xml">GraphicsInfo</db:link> instead.</db:para>
</db:section>
</db:section>
<db:section xml:id="shadereffect-no-longer-supports-inline-glsl-shader-strings">
<db:title>ShaderEffect No Longer Supports Inline GLSL Shader Strings</db:title>
<db:para>Just like with <db:link xlink:href="qsgmaterial.xml">custom materials</db:link>, the effects are no longer specified in form of GLSL shader strings. Rather, shaders are expected to be preprocessed by the tools from the <db:link xlink:href="qtshadertools-index.xml">Qt Shader Tools</db:link> module, such as the <db:code>qsb</db:code> command line tool, thus ensuring the shader assets are usable regardless of which graphics API (Vulkan, Metal, OpenGL, or Direct 3D) is used at runtime. <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> items are expected to reference the resulting <db:code>.qsb</db:code> files.</db:para>
<db:section xml:id="shadereffect-source-properties-are-now-urls">
<db:title>ShaderEffect Source Properties Are Now URLs</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> properties <db:link xlink:href="qml-qtquick-shadereffect.xml#vertexShader-prop">vertexShader</db:link> and <db:link xlink:href="qml-qtquick-shadereffect.xml#fragmentShader-prop">fragmentShader</db:link> both have a type of <db:link xlink:href="qurl.xml">QUrl</db:link> now, instead of <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. Their behavior is therefore identical to other similar properties, such as <db:link xlink:href="qml-qtquick-image.xml#source-prop">Image.source</db:link>. Existing code that refers to files via the <db:code>file</db:code> or <db:code>qrc</db:code> scheme will continue to work as-is. In addition, this change allows referring to files with a path relative to the component's (the .qml file's) location. Specifying the <db:code>file:</db:code> scheme is therefore optional now.</db:para>
</db:section>
</db:section>
<db:section xml:id="changes-to-qt-quick-c-apis">
<db:title>Changes to Qt Quick C++ APIs</db:title>
<db:section xml:id="changes-to-qquickitem">
<db:title>Changes to QQuickItem</db:title>
<db:para><db:link xlink:href="qquickitem.xml">QQuickItem</db:link>'s geometryChanged() function was renamed to <db:link xlink:href="qquickitem.xml#geometryChange">geometryChange</db:link>().</db:para>
</db:section>
<db:section xml:id="changes-to-qquickwidget">
<db:title>Changes to QQuickWidget</db:title>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> is functional only when the scenegraph is rendering with OpenGL. It will not be functional when using another graphics API, such as Vulkan or Metal. Applications relying on <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> should force the usage of OpenGL by calling <db:code>QQuickWindow::setGraphicsApi(QSGRendererInterface::OpenGL)</db:code> in their main() function.</db:para>
</db:section>
<db:section xml:id="changes-to-qquick-apis">
<db:title>Changes to QQuick* APIs</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>Applications wishing to integrate their own set of Vulkan, Metal, or Direct3D rendering commands should be aware of new <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> signals in addition to <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() and afterRendering(). The existing Qt 5 pattern of connecting to just beforeRendering or afterRendering is often not sufficient anymore on its own, and will likely need to be complemented by connecting to additional signals, such as <db:link xlink:href="qquickwindow.xml#beforeRenderPassRecording">beforeRenderPassRecording</db:link>() or <db:link xlink:href="qquickwindow.xml#afterRenderPassRecording">afterRenderPassRecording</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>Applications that rely on the <db:link xlink:href="qquickwindow.xml#beforeRendering">QQuickWindow::beforeRendering</db:link>() or afterRendering() signals to issue their own set of OpenGL rendering commands should call <db:link xlink:href="qquickwindow.xml#beginExternalCommands">QQuickWindow::beginExternalCommands</db:link>() before, and <db:link xlink:href="qquickwindow.xml#endExternalCommands">QQuickWindow::endExternalCommands</db:link>() after, the OpenGL calls. This ensures that state changes made by the application code does not lead to confusion with regards to the scene graph renderer's own cached state. Note however, that, just like in Qt 5, changing OpenGL 3.x or 4.x state that is not used by the Qt Quick renderer can still lead to unexpected issues, so therefore application are advised to reset any such OpenGL state to the default value before returning from the slots or lambdas connected to these signals.</db:para>
</db:listitem>
<db:listitem>
<db:para>The existing <db:link xlink:href="qquickwindow.xml#setRenderTarget">QQuickWindow::setRenderTarget</db:link>() overloads, and the related getters, are removed and replaced by a new function taking a <db:link xlink:href="qquickrendertarget.xml">QQuickRenderTarget</db:link>. Applications performing redirected rendering in combination with <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> are now expected to use this new function to specify the render target in a manner that is not tied to OpenGL.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qquickwindow.xml#setSceneGraphBackend">QQuickWindow::setSceneGraphBackend</db:link>() overload taking a <db:link xlink:href="qsgrendererinterface.xml#GraphicsApi-enum">QSGRendererInterface::GraphicsApi</db:link> argument has been renamed to <db:link xlink:href="qquickwindow.xml#setGraphicsApi">setGraphicsApi</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link> functions setPersistentOpenGLContext and isPersistentOpenGLContext are renamed, and are now <db:link xlink:href="qquickwindow.xml#setPersistentGraphics">QQuickWindow::setPersistentGraphics</db:link>() and <db:link xlink:href="qquickwindow.xml#isPersistentGraphics">QQuickWindow::isPersistentGraphics</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>setClearBeforeRendering() and clearBeforeRendering() have been removed from <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. There is no option for skipping the color buffer clearing in Qt 6. Calling setClearBeforeRendering() was often necessary in Qt 5 in combination with underlays, to prevent Qt Quick from clearing the content rendered into the color buffer. In Qt 6, there is a more robust approach: connecting to the <db:code>beforeRenderPassRecording()</db:code> signal, that is emitted after clearing, but before rendering Qt Quick's content.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QQuickWindow::openglContext() function has been removed. When the application has ensured the scene graph is using OpenGL for rendering, it can query the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> from <db:link xlink:href="qsgrendererinterface.xml#getResource">QSGRendererInterface::getResource</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>The QQuickWindow::openglContextCreated() signal has been removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>The deprecated QQuickWindow::createTextureFromId() function has been removed. Instead, use the fromNative() function from QPlatformInterface::QSGOpenGLTexture, QPlatformInterface::QSGVulkanTexture, QPlatformInterface::QSGD3D11Texture, or QPlatformInterface::QSGMetalTexture.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> class is available with an unchanged API, but is only functional when the scenegraph is rendering with OpenGL. It will not be functional when using another graphics API, such as Vulkan or Metal. Applications relying on <db:link xlink:href="qquickframebufferobject.xml">QQuickFramebufferObject</db:link> should force the usage of OpenGL by calling <db:code>QQuickWindow::setGraphicsApi(QSGRendererInterface::OpenGL)</db:code> in their main() function.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> has a slightly changed API: grab() is now removed, use <db:link xlink:href="qquickwindow.xml#grabWindow">QQuickWindow::grabWindow</db:link>() instead, where applicable. The initialize() function no longer takes a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. Applications are now also required to call <db:link xlink:href="qquickrendercontrol.xml#beginFrame">QQuickRenderControl::beginFrame</db:link>() and <db:link xlink:href="qquickrendercontrol.xml#endFrame">QQuickRenderControl::endFrame</db:link>() as appropriate. When multisampling is desired, the new function <db:link xlink:href="qquickrendercontrol.xml#setSamples">QQuickRenderControl::setSamples</db:link>() must be called to indicate the sample count.</db:para>
</db:listitem>
<db:listitem>
<db:para>Applications wishing to perform Qt Quick rendering in combination with an existing native graphics device or context object must take the new <db:link xlink:href="qquickwindow.xml#setGraphicsDevice">QQuickWindow::setGraphicsDevice</db:link>() function into use as <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> no longer provides the <db:code>initialize(QOpenGLContext*)</db:code> function.</db:para>
</db:listitem>
<db:listitem>
<db:para>Setting <db:link xlink:href="qquickpainteditem.xml">QQuickPaintedItem</db:link> and <db:link xlink:href="qml-qtquick-context2d.xml">Context2D</db:link> to <db:code>Framebuffer</db:code> mode has no effect. It will behave as if the mode was set to the default Image mode.</db:para>
</db:listitem>
<db:listitem>
<db:para>The environment variable <db:code>QSG_NO_DEPTH_BUFFER</db:code> is still supported in Qt 6.0, but its usage is recommended to be replaced by calling <db:link xlink:href="qquickgraphicsconfiguration.xml#setDepthBufferFor2D">setDepthBufferFor2D</db:link>() on a <db:link xlink:href="qquickgraphicsconfiguration.xml">QQuickGraphicsConfiguration</db:link> that is then associated with the <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-to-qsg-apis">
<db:title>Changes to QSG* APIs</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsgmaterialshader.xml">QSGMaterialShader</db:link> has a changed interface. Implementations should not rely on OpenGL anymore, and cannot assume that functions, such as the now-removed updateState(), are called with a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> current. In the new, data-oriented interface updateState() is replaced by <db:link xlink:href="qsgmaterialshader.xml#updateUniformData">updateUniformData</db:link>(), <db:link xlink:href="qsgmaterialshader.xml#updateSampledImage">updateSampledImage</db:link>(), and <db:link xlink:href="qsgmaterialshader.xml#updateGraphicsPipelineState">updateGraphicsPipelineState</db:link>(). Instead of GLSL shader code provided as strings, shaders are now expected to be preprocessed by the tools from the Qt Shader Tools module, such as the <db:code>qsb</db:code> command line tool, thus ensuring the shader assets are usable regardless of which graphics API (Vulkan, Metal, OpenGL, or Direct 3D) is used at run time.</db:para>
</db:listitem>
<db:listitem>
<db:para>QSGEngine has been removed. In the unlikely case of an application utilizing this class, it is recommended to port to using <db:link xlink:href="qquickrendercontrol.xml">QQuickRenderControl</db:link> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>QSGAbstractRenderer is no longer public. The usage of this class made sense only in combination with QSGEngine, and with that class being removed QSGAbstractRenderer has been moved back to private.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QSGSimpleMaterial convenience class has been removed. Applications are expected to use the revised, OpenGL-independent <db:link xlink:href="qsgmaterial.xml">QSGMaterial</db:link> APIs instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>To access the underlying native texture object for a <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link>, textureId() is no longer available. Instead, use QSGTexture::platformInterface() with QPlatformInterface::QSGOpenGLTexture, QPlatformInterface::QSGVulkanTexture, QPlatformInterface::QSGD3D11Texture, or QPlatformInterface::QSGMetalTexture.</db:para>
</db:listitem>
<db:listitem>
<db:para>Subclasses of <db:link xlink:href="qsgimagenode.xml">QSGImageNode</db:link> are now required to override new additional virtuals, such as setAnisotropyLevel() and anisotropyLevel().</db:para>
</db:listitem>
<db:listitem>
<db:para>Subclasses of <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> will likely need to be redesigned. Some of the OpenGL-specific virtual functions, such as bind() or updateBindOptions(), are no longer present, while there are new virtuals that are mandatory to implement, such as <db:link xlink:href="qsgtexture.xml#comparisonKey">comparisonKey</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-opengl-use-in-qt-quick">
<db:title>Changes to OpenGL Use in Qt Quick</db:title>
<db:para>While it will present no breaks for many applications, application developers should be aware that, OpenGL is not always the default choice anymore for Qt Quick rendering in Qt 6. Unless the <db:code>software</db:code> backend is used, a Qt Quick application could use OpenGL, Vulkan, Metal, or Direct3D 11 at runtime. When no explicit request is made, either via the <db:code>QSG_RHI_BACKEND</db:code> environment variable or the <db:link xlink:href="qquickwindow.xml#setSceneGraphBackend">QQuickWindow::setSceneGraphBackend</db:link>() function, a platform-specific default is chosen by Qt Quick.</db:para>
<db:para>For more information, visit the <db:link xlink:href="qtquick-visualcanvas-scenegraph.xml">Qt Quick Scene Graph</db:link> and the <db:link xlink:href="qtquick-visualcanvas-scenegraph-renderer.xml">Qt Quick Scene Graph Default Renderer</db:link> pages.</db:para>
</db:section>
</db:article>
