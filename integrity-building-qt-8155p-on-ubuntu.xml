<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Building Qt for Qualcomm Snapdragon 8155P Board on Ubuntu</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-linux-monolith.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Build Qt with Ubuntu host"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="integrity-building-monolith.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Building a monolith project"/></db:extendedlink>
<db:abstract>
<db:para>Qt Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Having Green Hills INTEGRITY and Qualcomm development environments setup is a required before proceeding. See <db:link xlink:href="integrity-installing-dependencies.xml">Installing Platform Dependencies</db:link>.</db:para>
<db:section xml:id="creating-a-set-environment-shell-script">
<db:title>Creating a set environment shell script</db:title>
<db:para>To set up the development environment for Qt for INTEGRITY, build Qt from the sources for the Qualcomm Snapdragon 8155P board. Before building Qt for INTEGRITY, set up build environment. Here a batch script to automate that, as it needs to be done before each build.</db:para>
<db:para>Create a new shell script <db:emphasis>setEnvironment.sh</db:emphasis>, and save it under your home folder. Add the following export commands to the script:</db:para>
<db:programlisting language="cpp" role="bad">export PATH=$PATH:/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/comp
export INTEGRITY_DIR=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/integrity
export INTEGRITY_BSP=platform-sa8155
export INTEGRITY_BUILD_TARGET=chk
export QC_MULTIMEDIA_INC_DIR=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/include/amss/multimedia
export GL_INC_DIR=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/AMSS/multimedia/graphics/include/public
export GL_LIB_DIR=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/out/rel/libs/base:/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/out/rel/libs/multimedia/display:/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/out/rel/libs/multimedia/graphics:/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/out/rel/libs/platform/:/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/AMSS/multimedia/graphics/opengl/esx/build/integrity/prebuilt/
</db:programlisting>
<db:para>These export paths assume you have used the /work/ghs/* installation directories while installing the MULTI IDE and INTEGRITY (see <db:link xlink:href="integrity-installing-dependencies.xml">Installing Platform Dependencies</db:link>). If you have not used the default directories, adjust the export paths accordingly.</db:para>
<db:para>To initialize your build environment, run the following command in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">source ~/setEnvironment.sh
</db:programlisting>
<db:note>
<db:para>Run this command in your terminal every time you build Qt, or use the qmake or CMake build systems.</db:para>
</db:note>
</db:section>
<db:section xml:id="getting-qt-sources">
<db:title>Getting Qt sources</db:title>
<db:para>You can download the Qt source code from your <db:link xlink:href="https://login.qt.io/login">Qt Account</db:link>.</db:para>
<db:para>You can also get the Qt sources from the Git repo. Qt Wiki has instructions for getting Qt sources from Git, see <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_source_code">Getting source code</db:link>.</db:para>
<db:note>
<db:para>Qt sources version must be 6.2 or later.</db:para>
</db:note>
<db:note>
<db:para>The init-repository script initializes the Qt 6 repository and clones various Qt 6 sub-modules (see <db:link xlink:href="https://wiki.qt.io/Building_Qt_5_from_Git#Getting_the_submodule_source_code">Getting the submodule source code</db:link>). Qt modules supported by Qt for INTEGRITY are listed in <db:link xlink:href="wasm.xml#supported-qt-modules">Supported Qt Modules</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="building-qt-desktop-for-cross-compiling-tools-usage">
<db:title>Building Qt Desktop for cross-compiling tools usage</db:title>
<db:para>The cross-compiling Qt requires a host build of Qt being available. During the build, tools such as moc, rcc, qmlcachegen, qsb, and others, are invoked from there. For more detailed information please read <db:link xlink:href="https://www.qt.io/blog/qt-6-build-system">Cross-compiling Qt</db:link>.</db:para>
<db:para>Run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">mkdir hostbuild
cd hostbuild/
../qt5/configure -nomake tests -nomake examples -release -prefix /work/ghs/hostbuild
cmake --build . --parallel 6
cmake --install .
</db:programlisting>
<db:note>
<db:para>configure always uses the <db:emphasis role="bold">Ninja</db:emphasis> generator and build tool if a ninja executable is available. Ninja is cross-platform, feature-rich, performant, and recommended on all platforms. The use of other generators might work but is not officially supported.</db:para>
</db:note>
</db:section>
<db:section xml:id="creating-a-toolchain-file-for-integrity">
<db:title>Creating a toolchain file for INTEGRITY</db:title>
<db:para>To cross-compile a project with CMake, one must specify a toolchain file. This CMake-language file sets the right values for the platform name, the compiler/linker used, and a whole bunch of other toolchain-specific things. For Integrity build on Ubuntu create a toolchain.cmake file with content:</db:para>
<db:programlisting language="cpp"># Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: BSD-3-Clause

set(TARGET_ROOT_PATH &quot;/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot&quot;)
set(CMAKE_BUILD_TYPE &quot;Release&quot;)

set(CMAKE_C_COMPILER cxintarm64)
set(CMAKE_CXX_COMPILER cxintarm64)
set(CMAKE_ASM_COMPILER cxintarm64)

#generic
set(CMAKE_SYSTEM_NAME Integrity)
set(CMAKE_SYSTEM_PROCESSOR arm)
set(CMAKE_CROSSCOMPILING True)

set(EGL_FOUND True)
set(UNIX True)

set (CMAKE_C_COMPILE_FEATURES c_std_99)
set (CMAKE_CXX_COMPILE_FEATURES
cxx_alias_templates
cxx_alignas
cxx_alignof
cxx_attributes
cxx_auto_type
cxx_constexp
cxx_decltype
cxx_delegating_constructors
cxx_explicit_conversions
cxx_extern_templates
cxx_inheriting_constructors
cxx_lambdas
cxx_noexcept
cxx_nonstatic_member_init
cxx_nullptr
cxx_override
cxx_range_for
cxx_raw_string_literals
cxx_reference_qualified_functions
cxx_rvalue_references
cxx_static_assert
cxx_std_17
cxx_thread_local
cxx_unicode_literals
cxx_uniform_initialization
cxx_unrestricted_unions
cxx_variadic_macros
cxx_variadic_templates)

#graphical lib paths
set(EGL_LIBRARY_GRAPHIC_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/out/chk/libs/multimedia/graphics)
set(EGL_LIBRARY_PLATFORM_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/out/chk/libs/platform)
set(EGL_LIBRARY_BASE_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/out/chk/libs/base)
set(EGL_LIBRARY_CHK_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/integrity/libs/arm64/chk)
set(EGL_LIBRARY_PREBUILD_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/AMSS/multimedia/graphics/opengl/esx/build/integrity/prebuilt)
set(EGL_LIBRARY_OPENWFD_PATH ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/out/chk/libs/multimedia/display)

#base
set(CMAKE_C_FLAGS  &quot;-bsp $ENV{INTEGRITY_BSP} -os_dir $ENV{INTEGRITY_DIR} -non_shared -startfile_dir=$ENV{INTEGRITY_DIR}/libs/$ENV{INTEGRITY_BSP}/$ENV{INTEGRITY_BUILD_TARGET} --rtos_library_directory=libs/$ENV{INTEGRITY_BSP}/$ENV{INTEGRITY_BUILD_TARGET} --rtos_library_directory=libs/arm64/$ENV{INTEGRITY_BUILD_TARGET} -bigswitch -DINTEGRITY -llibposix.a&quot;)
set(CMAKE_C_FLAGS_DEBUG &quot;-g -Omaxdebug&quot;)
set(CMAKE_C_FLAGS_RELEASE &quot;-Ospeed -Olink -Omax -no_uvfd&quot;)
set(CMAKE_C_FLAGS &quot;${CMAKE_C_FLAGS} --signed_fields --diag_suppress=1,82,228,236,381,611,961,997,1795,1931,1974,3148 --c++17 --thread_local_storage --exceptions --defer_parse_function_templates&quot;)
set(CMAKE_CXX_FLAGS &quot;${CMAKE_C_FLAGS} -frigor=accurate --signed_fields --no_implicit_include --link_once_templates -non_shared --new_outside_of_constructor --commons -I $ENV{QC_MULTIMEDIA_INC_DIR}&quot;)
set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})
set(CMAKE_CXX_FLAGS_RELEASE &quot;${CMAKE_C_FLAGS_RELEASE}&quot;)
set(CMAKE_FIND_LIBRARY_PREFIXES &quot;lib&quot;)
set(CMAKE_FIND_LIBRARY_SUFFIXES &quot;.a&quot;)
set(BUILD_SHARED_LIBS OFF)
set(QT_CFLAGS_OPTIMIZE_FULL &quot;-Ospeed -Olink -Omax -no_uvfd&quot;)
set(GLSLANG_OSDEP_PATH ../3rdparty/glslang/glslang/OSDependent/Unix)
set(GL_INC_DIR ${TARGET_ROOT_PATH}/apps/ghs_apps_proc/qc_bsp/AMSS/multimedia/graphics/include/public)
set(PKG_EGL_LIBRARY_DIRS ${TARGET_ROOT_PATH})

set(EGL_INCLUDE_DIR ${GL_INC_DIR})
set(EGL_LIBRARY &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libESXEGL_Adreno.a&quot;)

set(GLESv2_INCLUDE_DIR ${GL_INC_DIR})
set(GLESv2_LIBRARY &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libESXGLESv2_Adreno.a&quot;)

set(IntegrityPlatformGraphics_INCLUDE_DIR ${GL_INC_DIR})
set(IntegrityPlatformGraphics_LIBRARY &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libadreno_utils.a&quot;)
set(IntegrityPlatformGraphics_LIBRARIES_PACK
    &quot;${EGL_LIBRARY_BASE_PATH}/libplanedef.a&quot;
    &quot;${EGL_LIBRARY_BASE_PATH}/libmmosalfile.a&quot;
    &quot;${EGL_LIBRARY_BASE_PATH}/libOSAbstraction.a&quot;
    &quot;${EGL_LIBRARY_OPENWFD_PATH}/libopenwfd.a&quot;
    &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libOSUser.a&quot;
    &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libpanel.a&quot;
    &quot;${EGL_LIBRARY_GRAPHIC_PATH}/libGSLUser.a&quot;
    &quot;${EGL_LIBRARY_PREBUILD_PATH}/libglnext-llvm.a&quot;
    &quot;${EGL_LIBRARY_PLATFORM_PATH}/libpmem.a&quot;
    &quot;${EGL_LIBRARY_CHK_PATH}/libposix.a&quot;
    &quot;${EGL_LIBRARY_CHK_PATH}/libivfs.a&quot;
)

list(APPEND _qt_igy_gui_libs
    &quot;${GLESv2_LIBRARY}&quot;
    &quot;${IntegrityPlatformGraphics_LIBRARY}&quot;
    &quot;${IntegrityPlatformGraphics_LIBRARIES_PACK}&quot;)

set(OPENGL_INCLUDE_DIR ${GL_INC_DIR})
set(OPENGL_opengl_LIBRARY ${EGL_LIBRARY})
</db:programlisting>
</db:section>
<db:section xml:id="configuring-qt-for-integrity">
<db:title>Configuring Qt for INTEGRITY</db:title>
<db:para>Configure Qt for the Qualcomm Snapdragon 8155P board using these following commands:</db:para>
<db:programlisting language="cpp" role="bad">cd /work/ghs/targetbuild // Path to Qt installation directory
cmake ../qt5/ -DQT_HOST_PATH=/work/ghs/hostbuild/qtbase
-DCMAKE_TOOLCHAIN_FILE=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/toolchain_integrity.cmake
-DQT_QMAKE_TARGET_MKSPEC=devices/integrity-armv8-SA8155P -DBUILD_qtdoc=OFF
-DBUILD_qttranslations=OFF -DFEATURE_printdialog=OFF --debug-trycompile -DFEATURE_dbus=OFF
-GNinja -DUNIX=ON
-DEGL_LIBRARY=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/libeglmegapack.a
-DEGL_INCLUDE_DIR=/work/ghs/sa8155/es7/es7_dev_env/hlos_dev_boot/apps/ghs_apps_proc/qc_bsp/AMSS/multimedia/graphics/include/public
-DFEATURE_dnslookup=OFF -DFEATURE_glib=OFF -DFEATURE_libudev=OFF -DFEATURE_system_pcre2=OFF -DFEATURE_sql_mysql=OFF
-DCMAKE_INSTALL_PREFIX=/work/ghs/targetbuild
</db:programlisting>
<db:note>
<db:para>INTEGRITY supports only static Qt builds.</db:para>
</db:note>
<db:note>
<db:para>QT_HOST_PATH variable introduced in Qt 6. When cross-compiling, this must be set to the install location of Qt for the host platform. It is used to locate tools to be run on the host (moc, rcc, androiddeployqt, and so on).</db:para>
</db:note>
</db:section>
<db:section xml:id="building-qt-for-integrity">
<db:title>Building Qt for INTEGRITY</db:title>
<db:para>Build Qt by calling cmake in the terminal. You can run cmake with as many cores on your host machine as you desire. In our example we use six cores:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build . --parallel 6
</db:programlisting>
<db:anchor xml:id="installing-qt-for-sa8155"/>
</db:section>
<db:section xml:id="installing-qt">
<db:title>Installing Qt</db:title>
<db:para>If you have not used the configure option -prefix $PWD/qtbase in <db:link xlink:href="configure-linux-device.xml#configuring-qt">Configuring Qt</db:link>, run the following commands in a terminal:</db:para>
<db:programlisting language="cpp" role="bad">cd &amp;lt;Qt installation directory&amp;gt;
cmake --install .
</db:programlisting>
<db:para>If you have used the configure option -prefix $PWD/qtbase, you can use Qt from the build directory, without running the cmake install command.</db:para>
<db:para>Qt is now configured and built for the sa8155 board.</db:para>
</db:section>
</db:article>
