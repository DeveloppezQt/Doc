<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Effect QML Type</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Base component for creating a post-processing effect.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para>Object3D</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The Effect type allows the user to implement their own post-processing effects for <db:link xlink:href="qtquick3d-qmlmodule.xml">QtQuick3D</db:link>.</db:para>
<db:section xml:id="post-processing-effects">
<db:title>Post-processing effects</db:title>
<db:para>A post-processing effect is conceptually very similar to Qt Quick's <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> item. When an effect is present, the scene is rendered into a separate texture first. The effect is then applied by drawing a textured quad to the main render target, depending on the <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">render mode</db:link> of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. The effect can provide a vertex shader, a fragment shader, or both. Effects are always applied on the entire scene, per <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:para>Effects are associated with the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link> in the <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#effects-prop">SceneEnvironment::effects</db:link> property. The property is a list: effects can be chained together; they are applied in the order they are in the list, using the previous step's output as the input to the next one, with the last effect's output defining the contents of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:para>Effects are similar to <db:link xlink:href="qml-qtquick3d-custommaterial.xml">custom materials</db:link> in many ways. However, a custom material is associated with a model and is responsible for the shading of that given mesh. Whereas an effect's vertex shader always gets a quad (for example, two triangles) as its input, while its fragment shader samples the texture with the scene's content.</db:para>
<db:para>Unlike custom materials, effects support multiple passes. For many effects this it not necessary, and when there is a need to apply multiple effects, identical results can often be achieved by chaining together multiple effects in <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#effects-prop">the SceneEnvironment</db:link>. This is demonstrated by the <db:link xlink:href="qtquick3d-customeffect-example.xml">Custom Effect example</db:link> as well. However, passes have the possibility to request additional color buffers (texture), and specify which of these additional buffers they output to. This allows implementing more complex image processing techniques since subsequent passes can then use one or more of these additional buffers, plus the original scene's content, as their input. If necessary, these additional buffers can have an extended lifetime, meaning their content is preserved between frames, which allows implementing effects that rely on accumulating content from multiple frames, such as, motion blur.</db:para>
<db:para>When compared to Qt Quick's 2D <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, the 3D post-processing effects have the advantage of being able to work with depth buffer data, as well as the ability to implement multiple passes with intermediate buffers. In addition, the texture-related capabilities are extended: Qt Quick 3D allows more fine-grained control over filtering modes, and allows effects to work with texture formats other than RGBA8, for example, floating point formats.</db:para>
<db:note>
<db:para>Post-processing effects are currently available when the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> has its <db:link xlink:href="qml-qtquick3d-view3d.xml#renderMode-prop">renderMode</db:link> set to <db:code>Offscreen</db:code>, <db:code>Underlay</db:code> or <db:code>Overlay</db:code>. Effects will not be rendered for <db:code>Inline</db:code> mode.</db:para>
</db:note>
<db:note>
<db:para>When using post-processing effects, the application-provided shaders usually expect linear color data without tonemapping applied. It is then essential to bypass the built-in tonemapping by setting <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml#tonemapMode-prop">tonemapMode</db:link> to <db:code>SceneEnvironment.TonemapModeNone</db:code>.</db:para>
</db:note>
<db:note>
<db:para>By default the texture used as the effects' input is created with a floating point texture format, such as 16-bit floating point RGBA. The output texture's format is the same since by default it follows the input format. This can be overridden using <db:link xlink:href="qml-qtquick3d-buffer.xml">Buffer</db:link> and an empty name. The default RGBA16F is useful because it allows working with non-tonemapped linear data without having the color values outside the 0-1 range clamped.</db:para>
</db:note>
</db:section>
<db:section xml:id="exposing-data-to-the-shaders">
<db:title>Exposing data to the shaders</db:title>
<db:para>Like with <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link> or <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, the dynamic properties of an Effect object can be changed and animated using the usual QML and Qt Quick facilities, and the values are exposed to the shaders automatically. The following list shows how properties are mapped:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool, int, real -&gt; bool, int, float</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcolor.xml">QColor</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#rgba-method">color</db:link> -&gt; vec4, and the color gets converted to linear, assuming sRGB space for the color value specified in QML. The built-in Qt colors, such as <db:code>&quot;green&quot;</db:code> are in sRGB color space as well, and the same conversion is performed for all color properties of <db:link xlink:href="qml-qtquick3d-defaultmaterial.xml">DefaultMaterial</db:link> and <db:link xlink:href="qml-qtquick3d-principledmaterial.xml">PrincipledMaterial</db:link>, so this behavior of Effect matches those.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qrect.xml">QRect</db:link>, <db:link xlink:href="qrectf.xml">QRectF</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#rect-method">rect</db:link> -&gt; vec4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpoint.xml">QPoint</db:link>, <db:link xlink:href="qpointf.xml">QPointF</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#point-method">point</db:link>, <db:link xlink:href="qsize.xml">QSize</db:link>, <db:link xlink:href="qsizef.xml">QSizeF</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#size-method">size</db:link> -&gt; vec2</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector2d.xml">QVector2D</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#vector2d-method">vector2d</db:link> -&gt; vec3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector3d.xml">QVector3D</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#vector3d-method">vector3d</db:link> -&gt; vec3</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qvector4d.xml">QVector4D</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#vector4d-method">vector4d</db:link> -&gt; vec4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmatrix4x4.xml">QMatrix4x4</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#matrix4x4-method">matrix4x4</db:link> -&gt; mat4</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qquaternion.xml">QQuaternion</db:link>, <db:link xlink:href="qml-qtqml-qt.xml#quaternion-method">quaternion</db:link> -&gt; vec4, scalar value is <db:code>w</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtquick3d-textureinput.xml">TextureInput</db:link> -&gt; sampler2D or samplerCube, depending on whether <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> or <db:link xlink:href="qml-qtquick3d-cubemaptexture.xml">CubeMapTexture</db:link> is used in the texture property of the <db:link xlink:href="qml-qtquick3d-textureinput.xml">TextureInput</db:link>. Setting the <db:link xlink:href="qml-qtquick3d-textureinput.xml#enabled-prop">enabled</db:link> property to false leads to exposing a dummy texture to the shader, meaning the shaders are still functional but will sample a texture with opaque black image content. Pay attention to the fact that properties for samplers must always reference a <db:link xlink:href="qml-qtquick3d-textureinput.xml">TextureInput</db:link> object, not a <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> directly. When it comes to the <db:link xlink:href="qml-qtquick3d-texture.xml">Texture</db:link> properties, the source, tiling, and filtering related ones are the only ones that are taken into account implicitly with effects, as the rest (such as, UV transformations) is up to the custom shaders to implement as they see fit.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>When a uniform referenced in the shader code does not have a corresponding property, it will cause a shader compilation error when processing the effect at run time. There are some exceptions to this, such as, sampler uniforms, that get a dummy texture bound when no corresponding QML property is present, but as a general rule, all uniforms and samplers must have a corresponding property declared in the Effect object.</db:para>
</db:note>
</db:section>
<db:section xml:id="getting-started-with-effects">
<db:title>Getting started with effects</db:title>
<db:para>First, check if a suitable effect is available in the <db:link xlink:href="qtquick3d-effects-qmlmodule.xml">QtQuick3D.Effects module</db:link>. If so, there is no need to implement an effect with your own shaders. Otherwise, an Effect object and a fragment shader snippet needs to be written. Some effects will also want a customized vertex shader as well.</db:para>
<db:para>As a simple example, let's create an effect that combines the scene's content with an image, while further altering the red channel's value in an animated manner:</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:programlisting language="qml">Effect {
    id: simpleEffect
    property TextureInput tex: TextureInput {
        texture: Texture { source: &quot;image.png&quot; }
    }
    property real redLevel
    NumberAnimation on redLevel { from: 0; to: 1; duration: 5000; loops: -1 }
    passes: Pass {
       shaders: Shader {
           stage: Shader.Fragment
           shader: &quot;effect.frag&quot;
       }
    }
}
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp" role="bad">void MAIN()
{
    vec4 c = texture(tex, TEXTURE_UV);
    c.r *= redLevel;
    FRAGCOLOR = c * texture(INPUT, INPUT_UV);
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>Here the texture with the image <db:code>image.png</db:code> is exposed to the shader under the name <db:code>tex</db:code>. The value of redLevel is available in the shader in a <db:code>float</db:code> uniform with the same name.</db:para>
<db:para>The fragment shader must contain a function called <db:code>MAIN</db:code>. The final fragment color is determined by <db:code>FRAGCOLOR</db:code>. The main input texture, with the contents of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>'s scene, is accessible under a <db:code>sampler2D</db:code> with the name <db:code>INPUT</db:code>. The UV coordinates from the quad are in <db:code>INPUT_UV</db:code>. These UV values are always suitable for sampling <db:code>INPUT</db:code>, regardless of the underlying graphics API at run time (and so regardless of the Y axis direction in images since the necessary adjustments are applied automatically by Qt Quick 3D). Sampling the texture with our external image is done using <db:code>TEXTURE_UV</db:code>. <db:code>INPUT_UV</db:code> is not suitable in cross-platform applications since V needs to be flipped to cater for the coordinate system differences mentioned before, using a logic that is different for textures based on images and textures used as render targets. Fortunately this is all taken care of by the engine so the shader need no further logic for this.</db:para>
<db:para>Once simpleEffect is available, it can be associated with the effects list of a the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>'s <db:link xlink:href="qml-qtquick3d-sceneenvironment.xml">SceneEnvironment</db:link>:</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    effects: [ simpleEffect ]
}
</db:programlisting>
<db:para>The results would look something like the following, with the original scene on the left and with the effect applied on the right:</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/effect_intro_1.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/effect_intro_2.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>The <db:code>shader</db:code> property value in Shader is a URL, as is the custom in QML and Qt Quick, referencing the file containing the shader snippet, and works very similarly to <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link> or <db:link xlink:href="qml-qtquick-image.xml#source-prop">Image.source</db:link>. Only the <db:code>file</db:code> and <db:code>qrc</db:code> schemes are supported.. It is also possible to omit the <db:code>file</db:code> scheme, allowing to specify a relative path in a convenient way. Such a path is resolved relative to the component's (the <db:code>.qml</db:code> file's) location.</db:para>
</db:note>
<db:note>
<db:para>Shader code is always provided using Vulkan-style GLSL, regardless of the graphics API used by Qt at run time.</db:para>
</db:note>
<db:note>
<db:para>The vertex and fragment shader code provided by the effect are not full, complete GLSL shaders on their own. Rather, they provide a <db:code>MAIN</db:code> function, and optionally a set of <db:code>VARYING</db:code> declarations, which are then amended with further shader code by the engine.</db:para>
</db:note>
</db:section>
<db:section xml:id="effects-with-vertex-shaders">
<db:title>Effects with vertex shaders</db:title>
<db:para>A vertex shader, when present, must provide a function called <db:code>MAIN</db:code>. In the vast majority of cases the custom vertex shader will not want to provide its own calculation of the homogenous vertex position, but it is possible using <db:code>POSITION</db:code>, <db:code>VERTEX</db:code>, and <db:code>MODELVIEWPROJECTION_MATRIX</db:code>. When <db:code>POSITION</db:code> is not present in the custom shader code, a statement equivalent to <db:code>POSITION = MODELVIEWPROJECTION_MATRIX * vec4(VERTEX, 1.0);</db:code> will be injected automatically by Qt Quick 3D.</db:para>
<db:para>To pass data between the vertex and fragment shaders, use the VARYING keyword. Internally this will then be transformed into the appropriate vertex output or fragment input declaration. The fragment shader can use the same declaration, which then allows to read the interpolated value for the current fragment.</db:para>
<db:para>Let's look at example, that is in effect very similar to the built-in <db:link xlink:href="qml-qtquick3d-effects-distortionspiral.xml">DistortionSpiral</db:link> effect:</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:programlisting language="cpp" role="bad">VARYING vec2 center_vec;
void MAIN()
{
    center_vec = INPUT_UV - vec2(0.5, 0.5);
    center_vec.y *= INPUT_SIZE.y / INPUT_SIZE.x;
}
</db:programlisting>
</db:td>
<db:td>
<db:programlisting language="cpp" role="bad">VARYING vec2 center_vec;
void MAIN()
{
    float radius = 0.25;
    float dist_to_center = length(center_vec) / radius;
    vec2 texcoord = INPUT_UV;
    if (dist_to_center &amp;lt;= 1.0) {
        float rotation_amount = (1.0 - dist_to_center) * (1.0 - dist_to_center);
        float r = radians(360.0) * rotation_amount / 4.0;
        mat2 rotation = mat2(cos(r), sin(r), -sin(r), cos(r));
        texcoord = vec2(0.5, 0.5) + rotation * (INPUT_UV - vec2(0.5, 0.5));
    }
    FRAGCOLOR = texture(INPUT, texcoord);
}
</db:programlisting>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The Effect object's <db:code>passes</db:code> list should now specify both the vertex and fragment snippets:</db:para>
<db:programlisting language="qml">passes: Pass {
   shaders: [
       Shader {
           stage: Shader.Vertex
           shader: &quot;effect.vert&quot;
       },
       Shader {
           stage: Shader.Fragment
           shader: &quot;effect.frag&quot;
       }
    ]
}
</db:programlisting>
<db:para>The end result looks like the following:</db:para>
<db:informaltable style="generic" width="70%">
<db:tr valign="top">
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/effect_intro_1.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
<db:td>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/effect_intro_3.png"/>
</db:imageobject>
</db:mediaobject>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="special-keywords-in-effect-shaders">
<db:title>Special keywords in effect shaders</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>VARYING</db:code> - Declares a vertex output or fragment input, depending on the type of the current shader.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>MAIN</db:code> - This function must always be present in an effect shader.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>FRAGCOLOR</db:code> - <db:code>vec4</db:code> - The final fragment color; the output of the fragment shader. (fragment shader only)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>POSITION</db:code> - <db:code>vec4</db:code> - The homogenous position calculated in the vertex shader. (vertex shader only)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>MODELVIEWPROJECTION_MATRIX</db:code> - <db:code>mat4</db:code> - The transformation matrix for the screen quad.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>VERTEX</db:code> - <db:code>vec3</db:code> - The vertices of the quad; the input to the vertex shader. (vertex shader only)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>INPUT</db:code> - <db:code>sampler2D</db:code> - The sampler for the input texture with the scene rendered into it, unless a pass redirects its input via a <db:link xlink:href="qml-qtquick3d-bufferinput.xml">BufferInput</db:link> object, in which case <db:code>INPUT</db:code> refers to the additional color buffer's texture referenced by the <db:link xlink:href="qml-qtquick3d-bufferinput.xml">BufferInput</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>INPUT_UV</db:code> - <db:code>vec2</db:code> - UV coordinates for sampling <db:code>INPUT</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>TEXTURE_UV</db:code> - <db:code>vec2</db:code> - UV coordinates suitable for sampling a Texture with contents loaded from an image file.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>INPUT_SIZE</db:code> - <db:code>vec2</db:code> - The size of the <db:code>INPUT</db:code> texture, in pixels.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>OUTPUT_SIZE</db:code> - <db:code>vec2</db:code> - The size of the output buffer, in pixels. Often the same as <db:code>INPUT_SIZE</db:code>, unless the pass outputs to an extra Buffer with a size multiplier on it.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>FRAME</db:code> - <db:code>float</db:code> - A frame counter, incremented after each frame in the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>DEPTH_TEXTURE</db:code> - <db:code>sampler2D</db:code> - A depth texture with the depth buffer contents with the opaque objects in the scene. Like with <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link>, the presence of this keyword in the shader triggers generating the depth texture automatically.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="building-multi-pass-effects">
<db:title>Building multi-pass effects</db:title>
<db:para>A multi-pass effect often uses more than one set of shaders, and takes the <db:link xlink:href="qml-qtquick3d-pass.xml#output-prop">output</db:link> and <db:link xlink:href="qml-qtquick3d-pass.xml#commands-prop">commands</db:link> properties into use. Each entry in the passes list translates to a render pass drawing a quad into the pass's output texture, while sampling the effect's input texture and optionally other textures as well.</db:para>
<db:para>The typical outline of a multi-pass Effect can look like the following:</db:para>
<db:programlisting language="qml">passes: [
    Pass {
        shaders: [
            Shader {
                stage: Shader.Vertex
                shader: &quot;pass1.vert&quot;
            },
            Shader {
                stage: Shader.Fragment
                shader: &quot;pass1.frag&quot;
            }
            // This pass outputs to the intermediate texture described
            // by the Buffer object.
            output: intermediateColorBuffer
        ],
    },
    Pass {
        shaders: [
            Shader {
                stage: Shader.Vertex
                shader: &quot;pass2.vert&quot;
            },
            Shader {
                stage: Shader.Fragment
                shader: &quot;pass2.frag&quot;
            }
            // The output of the last pass needs no redirection, it is
            // the final result of the effect.
        ],
        commands: [
            // This pass reads from the intermediate texture, meaning
            // INPUT in the shader will refer to the texture associated
            // with the Buffer.
            BufferInput {
                buffer: intermediateColorBuffer
            }
        ]
    }
]
</db:programlisting>
<db:para>What is <db:code>intermediateColorBuffer</db:code>?</db:para>
<db:programlisting language="qml">Buffer {
    id: intermediateColorBuffer
    name: &quot;tempBuffer&quot;
    // format: Buffer.RGBA8
    // textureFilterOperation: Buffer.Linear
    // textureCoordOperation: Buffer.ClampToEdge
}
</db:programlisting>
<db:para>The commented properties are not necessary if the desired values match the defaults.</db:para>
<db:para>Internally the presence of this Buffer object and referencing it from the <db:code>output</db:code> property of a Pass leads to creating a texture with a size matching the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>, and so the size of the implicit input and output textures. When this is not desired, the <db:link xlink:href="qml-qtquick3d-buffer.xml#sizeMultiplier-prop">sizeMultiplier</db:link> property can be used to get an intermediate texture with a different size. This can lead to the <db:code>INPUT_SIZE</db:code> and <db:code>OUTPUT_SIZE</db:code> uniforms in the shader having different values.</db:para>
<db:para>By default the Effect cannot count on textures preserving their contents between frames. When a new intermediate texture is created, it is cleared to <db:code>vec4(0.0)</db:code>. Afterwards, the same texture can be reused for another purpose. Therefore, effect passes should always write to the entire texture, without making assumptions about their content at the start of the pass. There is an exception to this: Buffer objects with <db:link xlink:href="qml-qtquick3d-buffer.xml#bufferFlags-prop">bufferFlags</db:link> set to Buffer.SceneLifetime. This indicates that the texture is permanently associated with a pass of the effect and it will not be reused for other purposes. The contents of such color buffers is preserved between frames. This is typically used in a ping-pong fashion in effects like motion blur: the first pass takes the persistent buffer as its input, in addition to the effects main input texture, outputting to another intermediate buffer, while the second pass outputs to the persistent buffer. This way in the first frame the first pass samples an empty (transparent) texture, whereas in subsequent frames it samples the output of the second pass from the previous frame. A third pass can then blend the effect's input and the second pass' output together.</db:para>
<db:para>The <db:link xlink:href="qml-qtquick3d-bufferinput.xml">BufferInput</db:link> command type is used to expose custom texture buffers to the render pass.</db:para>
<db:para>For instance, to access <db:code>someBuffer</db:code> in the render pass shaders under the name, <db:code>mySampler</db:code>, the following can be added to its command list:</db:para>
<db:programlisting language="qml">BufferInput { buffer: someBuffer; sampler: &quot;mySampler&quot; }
</db:programlisting>
<db:para>If the <db:code>sampler</db:code> name is not specified, <db:code>INPUT</db:code> will be used as default.</db:para>
<db:para>Buffers can be useful to share intermediate results between render passes.</db:para>
<db:para>To expose preloaded textures to the effect, <db:link xlink:href="qml-qtquick3d-textureinput.xml">TextureInput</db:link> should be used instead. These can be defined as properties of the Effect itself, and will automatically be accessible to the shaders by their property names.</db:para>
<db:programlisting language="qml">property TextureInput tex: TextureInput {
    texture: Texture { source: &quot;image.png&quot; }
}
</db:programlisting>
<db:para>Here <db:code>tex</db:code> is a valid sampler in all shaders of all the passes of the effect.</db:para>
<db:para>When it comes to uniform values from properties, all passes in the Effect read the same values in their shaders. If necessary it is possible to override the value of a uniform just for a given pass. This is achieved by adding the <db:link xlink:href="qml-qtquick3d-setuniformvalue.xml">SetUniformValue</db:link> command to the list of commands for the pass.</db:para>
<db:note>
<db:para>The <db:link xlink:href="qml-qtquick3d-setuniformvalue.xml#target-prop">target</db:link> of the pass-specific uniform value setter can only refer to a name that is the name of a property of the effect. It can override the value for a property's corresponding uniform, but it cannot introduce new uniforms.</db:para>
</db:note>
</db:section>
<db:section xml:id="performance-considerations">
<db:title>Performance considerations</db:title>
<db:para>Be aware of the increased resource usage and potentially reduced performance when using post-processing effects. Just like with Qt Quick layers and <db:link xlink:href="qml-qtquick-shadereffect.xml">ShaderEffect</db:link>, rendering the scene into a texture and then using that to texture a quad is not a cheap operation, especially on low-end hardware with limited fragment processing power. The amount of additional graphics memory needed, as well as the increase in GPU load both depend on the size of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> (which, on embedded devices without a windowing system, may often be as big as the screen resolution). Multi-pass effects, as well as applying multiple effects increase the resource and performance requirements further.</db:para>
<db:para>Therefore, it is highly advisable to ensure early on in the development lifecycle that the targeted device and graphics stack is able to cope with the effects included in the design of the 3D scene at the final product's screen resolution.</db:para>
<db:para>While unavoidable with techniques that need it, <db:code>DEPTH_TEXTURE</db:code> implies an additional rendering pass to generate the contents of that texture, which can also present a hit on less capable hardware. Therefore, use <db:code>DEPTH_TEXTURE</db:code> in the effect's shaders only when essential.</db:para>
<db:para>The complexity of the operations in the shaders is also important. Just like with <db:link xlink:href="qml-qtquick3d-custommaterial.xml">CustomMaterial</db:link>, a sub-optimal fragment shader can easily lead to reduced rendering performance.</db:para>
<db:para>Be cautious with <db:link xlink:href="qml-qtquick3d-buffer.xml#sizeMultiplier-prop">sizeMultiplier in Buffer</db:link> when values larger than 1 are involved. For example, a multiplier of 4 means creating and then rendering to a texture that is 4 times the size of the <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>. Just like with shadow maps and multi- or supersampling, the increased resource and performance costs can quickly outweigh the benefits from better quality on systems with limited GPU power.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick3d-shader.xml">Shader</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-pass.xml">Pass</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-buffer.xml">Buffer</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick3d-bufferinput.xml">BufferInput</db:link></db:member>
<db:member><db:link xlink:href="qtquick3d-customeffect-example.xml">Qt Quick 3D - Custom Effect Example</db:link></db:member>
<db:member><db:link xlink:href="qtquick3d-effects-example.xml">Qt Quick 3D - Effects Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="passes-prop">
<db:title>[read-only] passes : list</db:title>
<db:fieldsynopsis>
<db:type>list</db:type>
<db:varname>passes</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Contains a list of render <db:link xlink:href="qml-qtquick3d-pass.xml">passes</db:link> implemented by the effect.</db:para>
</db:section>
</db:section>
</db:article>
