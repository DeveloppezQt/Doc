<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRouteRequest Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link> class represents the parameters and restrictions which define a request for routing information.</db:para>
<db:para>This class was introduced in Qt 5.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRouteRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRouteRequest is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The default state of a <db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link> instance will result in a request for basic route segment and navigation maneuvers describing the fastest route by car which covers the given waypoints.</db:para>
<db:para>There may be significant variation in the features supported by different providers of routing information, or even in the features supported by the same provider if different levels of authorization are used.</db:para>
<db:para>There are several functions in <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> which can be used to check which features are supported with the current provider and authorization level.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FeatureType-enum">
<db:title>enum QGeoRouteRequest::FeatureType</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::FeatureTypes</db:bridgehead>
<db:para>Defines a feature which is important to the planning of a route.</db:para>
<db:para>These values will be used in combination with <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">QGeoRouteRequest::FeatureWeight</db:link> to determine if they should or should not be part of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>Used by <db:link xlink:href="qgeoroutingmanager.xml#supportedFeatureTypes">QGeoRoutingManager::supportedFeatureTypes</db:link>() to indicate that no features will be taken into account when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TollFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Consdier tollways when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::HighwayFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Consider highways when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PublicTransitFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Consider public transit when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::FerryFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Consider ferries when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TunnelFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Consider tunnels when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::DirtRoadFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Consider dirt roads when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::ParksFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Consider parks when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MotorPoolLaneFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>Consider motor pool lanes when planning the route.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FeatureTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FeatureType&gt;. </db:code>It stores an OR combination of <db:code>FeatureType</db:code> values.</db:para>
</db:section>
<db:section xml:id="FeatureWeight-enum">
<db:title>enum QGeoRouteRequest::FeatureWeight</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::FeatureWeights</db:bridgehead>
<db:para>Defines the weight to associate with a feature during the planning of a route.</db:para>
<db:para>These values will be used in combination with QGeoRouteRequest::Feature to determine if they should or should not be part of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NeutralFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>The presence or absence of the feature will not affect the planning of the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PreferFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Routes which contain the feature will be preferred over those that do not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::RequireFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Only routes which contain the feature will be considered, otherwise no route will be returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::AvoidFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Routes which do not contain the feature will be preferred over those that do.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::DisallowFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Only routes which do not contain the feature will be considered, otherwise no route will be returned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FeatureWeights</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FeatureWeight&gt;. </db:code>It stores an OR combination of <db:code>FeatureWeight</db:code> values.</db:para>
</db:section>
<db:section xml:id="ManeuverDetail-enum">
<db:title>enum QGeoRouteRequest::ManeuverDetail</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::ManeuverDetails</db:bridgehead>
<db:para>Defines the amount of maneuver information that should be included with the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoManeuvers</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No maneuvers should be included with the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BasicManeuvers</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Basic manevuers will be included with the route. This will include <db:link xlink:href="qgeomaneuver.xml#instructionText">QGeoManeuver::instructionText</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ManeuverDetails</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ManeuverDetail&gt;. </db:code>It stores an OR combination of <db:code>ManeuverDetail</db:code> values.</db:para>
</db:section>
<db:section xml:id="RouteOptimization-enum">
<db:title>enum QGeoRouteRequest::RouteOptimization</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::RouteOptimizations</db:bridgehead>
<db:para>Defines the type of optimization which is applied to the planning of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::ShortestRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Minimize the length of the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::FastestRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Minimize the traveling time for the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MostEconomicRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Minimize the cost of the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MostScenicRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Maximize the scenic potential of the journey.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RouteOptimizations</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RouteOptimization&gt;. </db:code>It stores an OR combination of <db:code>RouteOptimization</db:code> values.</db:para>
</db:section>
<db:section xml:id="SegmentDetail-enum">
<db:title>enum QGeoRouteRequest::SegmentDetail</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::SegmentDetails</db:bridgehead>
<db:para>Defines the amount of route segment information that should be included with the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoSegmentData</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No segment data should be included with the route. A route requested with this level of segment detail will initialize <db:link xlink:href="qgeoroutesegment.xml#path">QGeoRouteSegment::path</db:link>() as a straight line between the positions of the previous and next <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> instances.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BasicSegmentData</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Basic segment data will be included with the route. This will include <db:link xlink:href="qgeoroutesegment.xml#path">QGeoRouteSegment::path</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SegmentDetails</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SegmentDetail&gt;. </db:code>It stores an OR combination of <db:code>SegmentDetail</db:code> values.</db:para>
</db:section>
<db:section xml:id="TravelMode-enum">
<db:title>enum QGeoRouteRequest::TravelMode</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::TravelModes</db:bridgehead>
<db:para>Defines modes of travel to be used for a route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::CarTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a car.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PedestrianTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is walking.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BicycleTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is riding a bicycle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PublicTransitTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is making use of public transit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TruckTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a truck.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>TravelModes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;TravelMode&gt;. </db:code>It stores an OR combination of <db:code>TravelMode</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRouteRequest-1">
<db:title>[explicit] QGeoRouteRequest::QGeoRouteRequest(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>waypoints</db:emphasis> = QList&lt;QGeoCoordinate&gt;())</db:title>
<db:para>Constructs a request to calculate a route through the coordinates <db:code role="parameter">waypoints</db:code>.</db:para>
<db:para>The route will traverse the objects of <db:code role="parameter">waypoints</db:code> in order.</db:para>
</db:section>
<db:section xml:id="QGeoRouteRequest-2">
<db:title>QGeoRouteRequest::QGeoRouteRequest(const QGeoCoordinate &amp;<db:emphasis>origin</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>destination</db:emphasis>)</db:title>
<db:para>Constructs a request to calculate a route between <db:code role="parameter">origin</db:code> and <db:code role="parameter">destination</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoRouteRequest">
<db:title>QGeoRouteRequest::QGeoRouteRequest(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Constructs a route request object from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRouteRequest">
<db:title>[noexcept] QGeoRouteRequest::~QGeoRouteRequest()</db:title>
<db:para>Destroys the request.</db:para>
</db:section>
<db:section xml:id="excludeAreas">
<db:title>QList&lt;QGeoRectangle&gt; QGeoRouteRequest::excludeAreas() const</db:title>
<db:para>Returns areas the route must not cross.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setExcludeAreas">setExcludeAreas</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="featureTypes">
<db:title>QList&lt;QGeoRouteRequest::FeatureType&gt; QGeoRouteRequest::featureTypes() const</db:title>
<db:para>Returns the list of features that will be considered when planning the route. Features with a weight of <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link> will not be returned.</db:para>
</db:section>
<db:section xml:id="featureWeight">
<db:title>QGeoRouteRequest::FeatureWeight QGeoRouteRequest::featureWeight(QGeoRouteRequest::FeatureType <db:emphasis>featureType</db:emphasis>) const</db:title>
<db:para>Returns the weight assigned to <db:code role="parameter">featureType</db:code> in the planning of the route.</db:para>
<db:para>If no feature weight has been specified for <db:code role="parameter">featureType</db:code> then <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setFeatureWeight">setFeatureWeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maneuverDetail">
<db:title>QGeoRouteRequest::ManeuverDetail QGeoRouteRequest::maneuverDetail() const</db:title>
<db:para>Returns the level of detail which will be used in the representation of routing maneuvers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setManeuverDetail">setManeuverDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numberAlternativeRoutes">
<db:title>int QGeoRouteRequest::numberAlternativeRoutes() const</db:title>
<db:para>Returns the number of alternative routes which will be requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setNumberAlternativeRoutes">setNumberAlternativeRoutes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="routeOptimization">
<db:title>QGeoRouteRequest::RouteOptimizations QGeoRouteRequest::routeOptimization() const</db:title>
<db:para>Returns the optimization criteria which this request specifies should be used while planning the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setRouteOptimization">setRouteOptimization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="segmentDetail">
<db:title>QGeoRouteRequest::SegmentDetail QGeoRouteRequest::segmentDetail() const</db:title>
<db:para>Returns the level of detail which will be used in the representation of routing segments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setSegmentDetail">setSegmentDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExcludeAreas">
<db:title>void QGeoRouteRequest::setExcludeAreas(const QList&lt;QGeoRectangle&gt; &amp;<db:emphasis>areas</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">areas</db:code> as excluded areas that the route must not cross.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#excludeAreas">excludeAreas</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeatureWeight">
<db:title>void QGeoRouteRequest::setFeatureWeight(QGeoRouteRequest::FeatureType <db:emphasis>featureType</db:emphasis>, QGeoRouteRequest::FeatureWeight <db:emphasis>featureWeight</db:emphasis>)</db:title>
<db:para>Assigns the weight <db:code role="parameter">featureWeight</db:code> to the feature <db:code role="parameter">featureType</db:code> during the planning of the route.</db:para>
<db:para>By default all features are assigned a weight of <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link>.</db:para>
<db:para>It is impossible to assign a weight to <db:link xlink:href="qgeorouterequest.xml#FeatureType-enum">QGeoRouteRequest::NoFeature</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#featureWeight">featureWeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setManeuverDetail">
<db:title>void QGeoRouteRequest::setManeuverDetail(QGeoRouteRequest::ManeuverDetail <db:emphasis>maneuverDetail</db:emphasis>)</db:title>
<db:para>Sets the level of detail to use when representing routing maneuvers to <db:code role="parameter">maneuverDetail</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#ManeuverDetail-enum">QGeoRouteRequest::BasicManeuvers</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#maneuverDetail">maneuverDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberAlternativeRoutes">
<db:title>void QGeoRouteRequest::setNumberAlternativeRoutes(int <db:emphasis>alternatives</db:emphasis>)</db:title>
<db:para>Sets the number of alternative routes to request to <db:code role="parameter">alternatives</db:code>. If <db:code role="parameter">alternatives</db:code> is negative the number of alternative routes is set to 0.</db:para>
<db:para>The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#numberAlternativeRoutes">numberAlternativeRoutes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRouteOptimization">
<db:title>void QGeoRouteRequest::setRouteOptimization(QGeoRouteRequest::RouteOptimizations <db:emphasis>optimization</db:emphasis>)</db:title>
<db:para>Sets the optimization criteria to use while planning the route to <db:code role="parameter">optimization</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#RouteOptimization-enum">QGeoRouteRequest::FastestRoute</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#routeOptimization">routeOptimization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSegmentDetail">
<db:title>void QGeoRouteRequest::setSegmentDetail(QGeoRouteRequest::SegmentDetail <db:emphasis>segmentDetail</db:emphasis>)</db:title>
<db:para>Sets the level of detail to use when representing routing segments to <db:code role="parameter">segmentDetail</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#segmentDetail">segmentDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTravelModes">
<db:title>void QGeoRouteRequest::setTravelModes(QGeoRouteRequest::TravelModes <db:emphasis>travelModes</db:emphasis>)</db:title>
<db:para>Sets the travel modes which should be considered during the planning of the route to <db:code role="parameter">travelModes</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#TravelMode-enum">QGeoRouteRequest::CarTravel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#travelModes">travelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWaypoints">
<db:title>void QGeoRouteRequest::setWaypoints(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>waypoints</db:emphasis>)</db:title>
<db:para>Sets <db:code role="parameter">waypoints</db:code> as the waypoints that the route should pass through.</db:para>
<db:para>The waypoints should be given in order from origin to destination.</db:para>
<db:para>This request will be invalid until the waypoints have been set to a list containing two or more coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#waypoints">waypoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="travelModes">
<db:title>QGeoRouteRequest::TravelModes QGeoRouteRequest::travelModes() const</db:title>
<db:para>Returns the travel modes which this request specifies should be considered during the planning of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setTravelModes">setTravelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waypoints">
<db:title>QList&lt;QGeoCoordinate&gt; QGeoRouteRequest::waypoints() const</db:title>
<db:para>Returns the waypoints that the route will pass through.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setWaypoints">setWaypoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QGeoRouteRequest::operator!=(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route request and <db:code role="parameter">other</db:code> are equal.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoRouteRequest &amp;QGeoRouteRequest::operator=(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns <db:code role="parameter">other</db:code> to this route request object and then returns a reference to this route request object.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QGeoRouteRequest::operator==(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns whether this route request and <db:code role="parameter">other</db:code> are equal.</db:para>
</db:section>
</db:section>
</db:article>
