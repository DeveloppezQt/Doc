<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoRouteRequest Class</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link> class represents the parameters and restrictions which define a request for routing information.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoRouteRequest</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGeoRouteRequest is part of <db:simplelist><db:member>QtLocation-routing</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The default state of a <db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link> instance will result in a request for basic route segment and navigation maneuvers describing the fastest route by car which covers the given waypoints.</db:para>
<db:para>There may be significant variation in the features supported by different providers of routing information, or even in the features supported by the same provider if different levels of authorization are used.</db:para>
<db:para>There are several functions in <db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link> which can be used to check which features are supported with the current provider and authorization level.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeoroutingmanager.xml">QGeoRoutingManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="FeatureType-enum">
<db:title>enum QGeoRouteRequest::FeatureType</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::FeatureTypes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FeatureType</db:enumname>
<db:enumitem>
<db:enumidentifier>NoFeature</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TollFeature</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HighwayFeature</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PublicTransitFeature</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FerryFeature</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TunnelFeature</db:enumidentifier>
<db:enumvalue>0x00000010</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DirtRoadFeature</db:enumidentifier>
<db:enumvalue>0x00000020</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>ParksFeature</db:enumidentifier>
<db:enumvalue>0x00000040</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MotorPoolLaneFeature</db:enumidentifier>
<db:enumvalue>0x00000080</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TrafficFeature</db:enumidentifier>
<db:enumvalue>0x00000100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::FeatureTypes</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines a feature which is important to the planning of a route.</db:para>
<db:para>These values will be used in combination with <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">QGeoRouteRequest::FeatureWeight</db:link> to determine if they should or should not be part of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>Used by <db:link xlink:href="qgeoroutingmanager.xml#supportedFeatureTypes">QGeoRoutingManager::supportedFeatureTypes</db:link>() to indicate that no features will be taken into account when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TollFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Consdier tollways when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::HighwayFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Consider highways when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PublicTransitFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Consider public transit when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::FerryFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Consider ferries when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TunnelFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000010</db:code></db:td>
<db:td>
<db:para>Consider tunnels when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::DirtRoadFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000020</db:code></db:td>
<db:td>
<db:para>Consider dirt roads when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::ParksFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000040</db:code></db:td>
<db:td>
<db:para>Consider parks when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MotorPoolLaneFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000080</db:code></db:td>
<db:td>
<db:para>Consider motor pool lanes when planning the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TrafficFeature</db:code></db:para>
</db:td>
<db:td><db:code>0x00000100</db:code></db:td>
<db:td>
<db:para>Consider the current traffic situation when planning the route. Since <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link> 5.10</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FeatureTypes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FeatureType&gt;. </db:code>It stores an OR combination of <db:code>FeatureType</db:code> values.</db:para>
</db:section>
<db:section xml:id="FeatureWeight-enum">
<db:title>enum QGeoRouteRequest::FeatureWeight</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::FeatureWeights</db:bridgehead>
<db:enumsynopsis>
<db:enumname>FeatureWeight</db:enumname>
<db:enumitem>
<db:enumidentifier>NeutralFeatureWeight</db:enumidentifier>
<db:enumvalue>0x00000000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PreferFeatureWeight</db:enumidentifier>
<db:enumvalue>0x00000001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequireFeatureWeight</db:enumidentifier>
<db:enumvalue>0x00000002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AvoidFeatureWeight</db:enumidentifier>
<db:enumvalue>0x00000004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>DisallowFeatureWeight</db:enumidentifier>
<db:enumvalue>0x00000008</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::FeatureWeights</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines the weight to associate with a feature during the planning of a route.</db:para>
<db:para>These values will be used in combination with QGeoRouteRequest::Feature to determine if they should or should not be part of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NeutralFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000000</db:code></db:td>
<db:td>
<db:para>The presence or absence of the feature will not affect the planning of the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PreferFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000001</db:code></db:td>
<db:td>
<db:para>Routes which contain the feature will be preferred over those that do not.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::RequireFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000002</db:code></db:td>
<db:td>
<db:para>Only routes which contain the feature will be considered, otherwise no route will be returned.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::AvoidFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000004</db:code></db:td>
<db:td>
<db:para>Routes which do not contain the feature will be preferred over those that do.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::DisallowFeatureWeight</db:code></db:para>
</db:td>
<db:td><db:code>0x00000008</db:code></db:td>
<db:td>
<db:para>Only routes which do not contain the feature will be considered, otherwise no route will be returned.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>FeatureWeights</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;FeatureWeight&gt;. </db:code>It stores an OR combination of <db:code>FeatureWeight</db:code> values.</db:para>
</db:section>
<db:section xml:id="ManeuverDetail-enum">
<db:title>enum QGeoRouteRequest::ManeuverDetail</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::ManeuverDetails</db:bridgehead>
<db:enumsynopsis>
<db:enumname>ManeuverDetail</db:enumname>
<db:enumitem>
<db:enumidentifier>NoManeuvers</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BasicManeuvers</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::ManeuverDetails</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines the amount of maneuver information that should be included with the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoManeuvers</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No maneuvers should be included with the route.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BasicManeuvers</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Basic manevuers will be included with the route. This will include <db:link xlink:href="qgeomaneuver.xml#instructionText-prop">QGeoManeuver::instructionText</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>ManeuverDetails</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;ManeuverDetail&gt;. </db:code>It stores an OR combination of <db:code>ManeuverDetail</db:code> values.</db:para>
</db:section>
<db:section xml:id="RouteOptimization-enum">
<db:title>enum QGeoRouteRequest::RouteOptimization</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::RouteOptimizations</db:bridgehead>
<db:enumsynopsis>
<db:enumname>RouteOptimization</db:enumname>
<db:enumitem>
<db:enumidentifier>ShortestRoute</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FastestRoute</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MostEconomicRoute</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MostScenicRoute</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::RouteOptimizations</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines the type of optimization which is applied to the planning of the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::ShortestRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Minimize the length of the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::FastestRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>Minimize the traveling time for the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MostEconomicRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>Minimize the cost of the journey.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::MostScenicRoute</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>Maximize the scenic potential of the journey.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>RouteOptimizations</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;RouteOptimization&gt;. </db:code>It stores an OR combination of <db:code>RouteOptimization</db:code> values.</db:para>
</db:section>
<db:section xml:id="SegmentDetail-enum">
<db:title>enum QGeoRouteRequest::SegmentDetail</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::SegmentDetails</db:bridgehead>
<db:enumsynopsis>
<db:enumname>SegmentDetail</db:enumname>
<db:enumitem>
<db:enumidentifier>NoSegmentData</db:enumidentifier>
<db:enumvalue>0x0000</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BasicSegmentData</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::SegmentDetails</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines the amount of route segment information that should be included with the route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::NoSegmentData</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>No segment data should be included with the route. A route requested with this level of segment detail will initialize <db:link xlink:href="qgeoroutesegment.xml#path-prop">QGeoRouteSegment::path</db:link>() as a straight line between the positions of the previous and next <db:link xlink:href="qgeomaneuver.xml">QGeoManeuver</db:link> instances.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BasicSegmentData</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>Basic segment data will be included with the route. This will include <db:link xlink:href="qgeoroutesegment.xml#path-prop">QGeoRouteSegment::path</db:link>().</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>SegmentDetails</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;SegmentDetail&gt;. </db:code>It stores an OR combination of <db:code>SegmentDetail</db:code> values.</db:para>
</db:section>
<db:section xml:id="TravelMode-enum">
<db:title>enum QGeoRouteRequest::TravelMode</db:title>
<db:bridgehead renderas="sect2">flags QGeoRouteRequest::TravelModes</db:bridgehead>
<db:enumsynopsis>
<db:enumname>TravelMode</db:enumname>
<db:enumitem>
<db:enumidentifier>CarTravel</db:enumidentifier>
<db:enumvalue>0x0001</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PedestrianTravel</db:enumidentifier>
<db:enumvalue>0x0002</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BicycleTravel</db:enumidentifier>
<db:enumvalue>0x0004</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PublicTransitTravel</db:enumidentifier>
<db:enumvalue>0x0008</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TruckTravel</db:enumidentifier>
<db:enumvalue>0x0010</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QGeoRouteRequest::TravelModes</db:typedefname>
</db:typedefsynopsis>
<db:para>Defines modes of travel to be used for a route.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::CarTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0001</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a car.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PedestrianTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0002</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is walking.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::BicycleTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0004</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is riding a bicycle.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::PublicTransitTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0008</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is making use of public transit.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qgeorouterequest.xml">QGeoRouteRequest</db:link></db:emphasis>::TruckTravel</db:code></db:para>
</db:td>
<db:td><db:code>0x0010</db:code></db:td>
<db:td>
<db:para>The route will be optimized for someone who is driving a truck.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>TravelModes</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;TravelMode&gt;. </db:code>It stores an OR combination of <db:code>TravelMode</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGeoRouteRequest">
<db:title>[explicit] QGeoRouteRequest::QGeoRouteRequest(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>waypoints</db:emphasis> = QList&lt;QGeoCoordinate&gt;())</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRouteRequest</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>waypoints</db:parameter>
<db:initializer>QList&lt;QGeoCoordinate&gt;()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest(const QList&lt;QGeoCoordinate&gt; &amp;waypoints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a request to calculate a route through the coordinates <db:code role="parameter">waypoints</db:code>.</db:para>
<db:para>The route will traverse the objects of <db:code role="parameter">waypoints</db:code> in order.</db:para>
</db:section>
<db:section xml:id="QGeoRouteRequest-1">
<db:title>QGeoRouteRequest::QGeoRouteRequest(const QGeoCoordinate &amp;<db:emphasis>origin</db:emphasis>, const QGeoCoordinate &amp;<db:emphasis>destination</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRouteRequest</db:methodname>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>origin</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoCoordinate &amp;</db:type>
<db:parameter>destination</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest(const QGeoCoordinate &amp;origin, const QGeoCoordinate &amp;destination)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a request to calculate a route between <db:code role="parameter">origin</db:code> and <db:code role="parameter">destination</db:code>.</db:para>
</db:section>
<db:section xml:id="QGeoRouteRequest-2">
<db:title>QGeoRouteRequest::QGeoRouteRequest(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QGeoRouteRequest</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest(const QGeoRouteRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a route request object from the contents of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QGeoRouteRequest">
<db:title>QGeoRouteRequest::~QGeoRouteRequest()</db:title>
<db:destructorsynopsis>
<db:methodname>~QGeoRouteRequest</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGeoRouteRequest()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the request.</db:para>
</db:section>
<db:section xml:id="departureTime">
<db:title>QDateTime QGeoRouteRequest::departureTime() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDateTime</db:type>
<db:methodname>departureTime</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDateTime departureTime() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the departure time in the request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setDepartureTime">setDepartureTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="excludeAreas">
<db:title>QList&lt;QGeoRectangle&gt; QGeoRouteRequest::excludeAreas() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGeoRectangle&gt;</db:type>
<db:methodname>excludeAreas</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGeoRectangle&gt; excludeAreas() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns areas the route must not cross.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setExcludeAreas">setExcludeAreas</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="featureTypes">
<db:title>QList&lt;QGeoRouteRequest::FeatureType&gt; QGeoRouteRequest::featureTypes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGeoRouteRequest::FeatureType&gt;</db:type>
<db:methodname>featureTypes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGeoRouteRequest::FeatureType&gt; featureTypes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of features that will be considered when planning the route. Features with a weight of <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link> will not be returned.</db:para>
</db:section>
<db:section xml:id="featureWeight">
<db:title>QGeoRouteRequest::FeatureWeight QGeoRouteRequest::featureWeight(QGeoRouteRequest::FeatureType <db:emphasis>featureType</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::FeatureWeight</db:type>
<db:methodname>featureWeight</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::FeatureType</db:type>
<db:parameter>featureType</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::FeatureWeight featureWeight(QGeoRouteRequest::FeatureType featureType) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the weight assigned to <db:code role="parameter">featureType</db:code> in the planning of the route.</db:para>
<db:para>If no feature weight has been specified for <db:code role="parameter">featureType</db:code> then <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setFeatureWeight">setFeatureWeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maneuverDetail">
<db:title>QGeoRouteRequest::ManeuverDetail QGeoRouteRequest::maneuverDetail() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::ManeuverDetail</db:type>
<db:methodname>maneuverDetail</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::ManeuverDetail maneuverDetail() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the level of detail which will be used in the representation of routing maneuvers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setManeuverDetail">setManeuverDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="numberAlternativeRoutes">
<db:title>int QGeoRouteRequest::numberAlternativeRoutes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>numberAlternativeRoutes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int numberAlternativeRoutes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of alternative routes which will be requested.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setNumberAlternativeRoutes">setNumberAlternativeRoutes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="routeOptimization">
<db:title>QGeoRouteRequest::RouteOptimizations QGeoRouteRequest::routeOptimization() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::RouteOptimizations</db:type>
<db:methodname>routeOptimization</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::RouteOptimizations routeOptimization() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the optimization criteria which this request specifies should be used while planning the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setRouteOptimization">setRouteOptimization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="segmentDetail">
<db:title>QGeoRouteRequest::SegmentDetail QGeoRouteRequest::segmentDetail() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::SegmentDetail</db:type>
<db:methodname>segmentDetail</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::SegmentDetail segmentDetail() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the level of detail which will be used in the representation of routing segments.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setSegmentDetail">setSegmentDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDepartureTime">
<db:title>void QGeoRouteRequest::setDepartureTime(const QDateTime &amp;<db:emphasis>departureTime</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDepartureTime</db:methodname>
<db:methodparam>
<db:type>const QDateTime &amp;</db:type>
<db:parameter>departureTime</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDepartureTime(const QDateTime &amp;departureTime)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the departure time <db:code role="parameter">departureTime</db:code> for the route calculation. This information can be used by the backend to calculate a faster route, for example, by avoiding traffic congestion during rush hour.</db:para>
<db:para>The default value is an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#departureTime">departureTime</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setExcludeAreas">
<db:title>void QGeoRouteRequest::setExcludeAreas(const QList&lt;QGeoRectangle&gt; &amp;<db:emphasis>areas</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setExcludeAreas</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoRectangle&gt; &amp;</db:type>
<db:parameter>areas</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setExcludeAreas(const QList&lt;QGeoRectangle&gt; &amp;areas)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">areas</db:code> as excluded areas that the route must not cross.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#excludeAreas">excludeAreas</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFeatureWeight">
<db:title>void QGeoRouteRequest::setFeatureWeight(QGeoRouteRequest::FeatureType <db:emphasis>featureType</db:emphasis>, QGeoRouteRequest::FeatureWeight <db:emphasis>featureWeight</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFeatureWeight</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::FeatureType</db:type>
<db:parameter>featureType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QGeoRouteRequest::FeatureWeight</db:type>
<db:parameter>featureWeight</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFeatureWeight(QGeoRouteRequest::FeatureType featureType, QGeoRouteRequest::FeatureWeight featureWeight)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the weight <db:code role="parameter">featureWeight</db:code> to the feature <db:code role="parameter">featureType</db:code> during the planning of the route.</db:para>
<db:para>By default all features are assigned a weight of <db:link xlink:href="qgeorouterequest.xml#FeatureWeight-enum">NeutralFeatureWeight</db:link>.</db:para>
<db:para>It is impossible to assign a weight to <db:link xlink:href="qgeorouterequest.xml#FeatureType-enum">QGeoRouteRequest::NoFeature</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#featureWeight">featureWeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setManeuverDetail">
<db:title>void QGeoRouteRequest::setManeuverDetail(QGeoRouteRequest::ManeuverDetail <db:emphasis>maneuverDetail</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setManeuverDetail</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::ManeuverDetail</db:type>
<db:parameter>maneuverDetail</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setManeuverDetail(QGeoRouteRequest::ManeuverDetail maneuverDetail)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the level of detail to use when representing routing maneuvers to <db:code role="parameter">maneuverDetail</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#ManeuverDetail-enum">QGeoRouteRequest::BasicManeuvers</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#maneuverDetail">maneuverDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setNumberAlternativeRoutes">
<db:title>void QGeoRouteRequest::setNumberAlternativeRoutes(int <db:emphasis>alternatives</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setNumberAlternativeRoutes</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>alternatives</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setNumberAlternativeRoutes(int alternatives)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the number of alternative routes to request to <db:code role="parameter">alternatives</db:code>. If <db:code role="parameter">alternatives</db:code> is negative the number of alternative routes is set to 0.</db:para>
<db:para>The default value is 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#numberAlternativeRoutes">numberAlternativeRoutes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRouteOptimization">
<db:title>void QGeoRouteRequest::setRouteOptimization(QGeoRouteRequest::RouteOptimizations <db:emphasis>optimization</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRouteOptimization</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::RouteOptimizations</db:type>
<db:parameter>optimization</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRouteOptimization(QGeoRouteRequest::RouteOptimizations optimization)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the optimization criteria to use while planning the route to <db:code role="parameter">optimization</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#RouteOptimization-enum">QGeoRouteRequest::FastestRoute</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#routeOptimization">routeOptimization</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSegmentDetail">
<db:title>void QGeoRouteRequest::setSegmentDetail(QGeoRouteRequest::SegmentDetail <db:emphasis>segmentDetail</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSegmentDetail</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::SegmentDetail</db:type>
<db:parameter>segmentDetail</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSegmentDetail(QGeoRouteRequest::SegmentDetail segmentDetail)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the level of detail to use when representing routing segments to <db:code role="parameter">segmentDetail</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#segmentDetail">segmentDetail</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setTravelModes">
<db:title>void QGeoRouteRequest::setTravelModes(QGeoRouteRequest::TravelModes <db:emphasis>travelModes</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setTravelModes</db:methodname>
<db:methodparam>
<db:type>QGeoRouteRequest::TravelModes</db:type>
<db:parameter>travelModes</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setTravelModes(QGeoRouteRequest::TravelModes travelModes)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the travel modes which should be considered during the planning of the route to <db:code role="parameter">travelModes</db:code>.</db:para>
<db:para>The default value is <db:link xlink:href="qgeorouterequest.xml#TravelMode-enum">QGeoRouteRequest::CarTravel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#travelModes">travelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWaypoints">
<db:title>void QGeoRouteRequest::setWaypoints(const QList&lt;QGeoCoordinate&gt; &amp;<db:emphasis>waypoints</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWaypoints</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QGeoCoordinate&gt; &amp;</db:type>
<db:parameter>waypoints</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWaypoints(const QList&lt;QGeoCoordinate&gt; &amp;waypoints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets <db:code role="parameter">waypoints</db:code> as the waypoints that the route should pass through.</db:para>
<db:para>The waypoints should be given in order from origin to destination.</db:para>
<db:para>This request will be invalid until the waypoints have been set to a list containing two or more coordinates.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#waypoints">waypoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="travelModes">
<db:title>QGeoRouteRequest::TravelModes QGeoRouteRequest::travelModes() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QGeoRouteRequest::TravelModes</db:type>
<db:methodname>travelModes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest::TravelModes travelModes() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the travel modes which this request specifies should be considered during the planning of the route.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setTravelModes">setTravelModes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="waypoints">
<db:title>QList&lt;QGeoCoordinate&gt; QGeoRouteRequest::waypoints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QGeoCoordinate&gt;</db:type>
<db:methodname>waypoints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QGeoCoordinate&gt; waypoints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the waypoints that the route will pass through.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeorouterequest.xml#setWaypoints">setWaypoints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QGeoRouteRequest &amp;QGeoRouteRequest::operator=(const QGeoRouteRequest &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QGeoRouteRequest &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QGeoRouteRequest &amp; operator=(const QGeoRouteRequest &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns <db:code role="parameter">other</db:code> to this route request object and then returns a reference to this route request object.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QGeoRouteRequest &amp;<db:emphasis>lhs</db:emphasis>, const QGeoRouteRequest &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QGeoRouteRequest &amp;lhs, const QGeoRouteRequest &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the route requests <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are not equal.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QGeoRouteRequest &amp;<db:emphasis>lhs</db:emphasis>, const QGeoRouteRequest &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QGeoRouteRequest &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QGeoRouteRequest &amp;lhs, const QGeoRouteRequest &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the route requests <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code> are equal.</db:para>
</db:section>
</db:section>
</db:article>
