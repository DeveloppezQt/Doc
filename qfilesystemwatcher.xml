<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFileSystemWatcher Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link> class provides an interface for monitoring files and directories for modifications.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFileSystemWatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFileSystemWatcher is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link> monitors the file system for changes to files and directories by watching a list of specified paths.</db:para>
<db:para>Call <db:link xlink:href="qfilesystemwatcher.xml#addPath">addPath</db:link>() to watch a particular file or directory. Multiple paths can be added using the <db:link xlink:href="qfilesystemwatcher.xml#addPaths">addPaths</db:link>() function. Existing paths can be removed by using the <db:link xlink:href="qfilesystemwatcher.xml#removePath">removePath</db:link>() and <db:link xlink:href="qfilesystemwatcher.xml#removePaths">removePaths</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link> examines each path added to it. Files that have been added to the <db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link> can be accessed using the <db:link xlink:href="qfilesystemwatcher.xml#files">files</db:link>() function, and directories using the <db:link xlink:href="qfilesystemwatcher.xml#directories">directories</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qfilesystemwatcher.xml#fileChanged">fileChanged</db:link>() signal is emitted when a file has been modified, renamed or removed from disk. Similarly, the <db:link xlink:href="qfilesystemwatcher.xml#directoryChanged">directoryChanged</db:link>() signal is emitted when a directory or its contents is modified or removed. Note that <db:link xlink:href="qfilesystemwatcher.xml">QFileSystemWatcher</db:link> stops monitoring files once they have been renamed or removed from disk, and directories once they have been removed from disk.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:emphasis role="bold">Notes</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>On systems running a Linux kernel without inotify support, file systems that contain watched paths cannot be unmounted.</db:para>
</db:listitem>
<db:listitem>
<db:para>The act of monitoring files and directories for modifications consumes system resources. This implies there is a limit to the number of files and directories your process can monitor simultaneously. On all BSD variants, for example, an open file descriptor is required for each monitored file. Some system limits the number of open file descriptors to 256 by default. This means that <db:link xlink:href="qfilesystemwatcher.xml#addPath">addPath</db:link>() and <db:link xlink:href="qfilesystemwatcher.xml#addPaths">addPaths</db:link>() will fail if your process tries to add more than 256 files or directories to the file system monitor. Also note that your process may have other file descriptors open in addition to the ones for files being monitored, and these other open descriptors also count in the total. macOS uses a different backend and does not suffer from this issue.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFileSystemWatcher">
<db:title>QFileSystemWatcher::QFileSystemWatcher(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileSystemWatcher</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileSystemWatcher(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file system watcher object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QFileSystemWatcher-1">
<db:title>QFileSystemWatcher::QFileSystemWatcher(const QStringList &amp;<db:emphasis>paths</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QFileSystemWatcher</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QFileSystemWatcher(const QStringList &amp;paths, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new file system watcher object with the given <db:code role="parameter">parent</db:code> which monitors the specified <db:code role="parameter">paths</db:code> list.</db:para>
</db:section>
<db:section xml:id="dtor.QFileSystemWatcher">
<db:title>[virtual] QFileSystemWatcher::~QFileSystemWatcher()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QFileSystemWatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QFileSystemWatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the file system watcher.</db:para>
</db:section>
<db:section xml:id="addPath">
<db:title>bool QFileSystemWatcher::addPath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>addPath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool addPath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">path</db:code> to the file system watcher if <db:code role="parameter">path</db:code> exists. The path is not added if it does not exist, or if it is already being monitored by the file system watcher.</db:para>
<db:para>If <db:code role="parameter">path</db:code> specifies a directory, the <db:link xlink:href="qfilesystemwatcher.xml#directoryChanged">directoryChanged</db:link>() signal will be emitted when <db:code role="parameter">path</db:code> is modified or removed from disk; otherwise the <db:link xlink:href="qfilesystemwatcher.xml#fileChanged">fileChanged</db:link>() signal is emitted when <db:code role="parameter">path</db:code> is modified, renamed or removed.</db:para>
<db:para>If the watch was successful, true is returned.</db:para>
<db:para>Reasons for a watch failure are generally system-dependent, but may include the resource not existing, access failures, or the total watch count limit, if the platform has one.</db:para>
<db:note>
<db:para>There may be a system dependent limit to the number of files and directories that can be monitored simultaneously. If this limit is been reached, <db:code role="parameter">path</db:code> will not be monitored, and false is returned.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#addPaths">addPaths</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemwatcher.xml#removePath">removePath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addPaths">
<db:title>QStringList QFileSystemWatcher::addPaths(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>addPaths</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList addPaths(const QStringList &amp;paths)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds each path in <db:code role="parameter">paths</db:code> to the file system watcher. Paths are not added if they not exist, or if they are already being monitored by the file system watcher.</db:para>
<db:para>If a path specifies a directory, the <db:link xlink:href="qfilesystemwatcher.xml#directoryChanged">directoryChanged</db:link>() signal will be emitted when the path is modified or removed from disk; otherwise the <db:link xlink:href="qfilesystemwatcher.xml#fileChanged">fileChanged</db:link>() signal is emitted when the path is modified, renamed, or removed.</db:para>
<db:para>The return value is a list of paths that could not be watched.</db:para>
<db:para>Reasons for a watch failure are generally system-dependent, but may include the resource not existing, access failures, or the total watch count limit, if the platform has one.</db:para>
<db:note>
<db:para>There may be a system dependent limit to the number of files and directories that can be monitored simultaneously. If this limit has been reached, the excess <db:code role="parameter">paths</db:code> will not be monitored, and they will be added to the returned <db:link xlink:href="qstringlist.xml">QStringList</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#addPath">addPath</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemwatcher.xml#removePaths">removePaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directories">
<db:title>QStringList QFileSystemWatcher::directories() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>directories</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList directories() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of paths to directories that are being watched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#files">files</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directoryChanged">
<db:title>void QFileSystemWatcher::directoryChanged(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>directoryChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void directoryChanged(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the directory at a specified <db:code role="parameter">path</db:code> is modified (e.g., when a file is added or deleted) or removed from disk. Note that if there are several changes during a short period of time, some of the changes might not emit this signal. However, the last change in the sequence of changes will always generate this signal.</db:para>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#fileChanged">fileChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileChanged">
<db:title>void QFileSystemWatcher::fileChanged(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fileChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fileChanged(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the file at the specified <db:code role="parameter">path</db:code> is modified, renamed or removed from disk.</db:para>
<db:note>
<db:para>As a safety measure, many applications save an open file by writing a new file and then deleting the old one. In your slot function, you can check watcher.files().contains(path). If it returns false, check whether the file still exists and then call addPath() to continue watching it.</db:para>
</db:note>
<db:note>
<db:para>This is a private signal. It can be used in signal connections but cannot be emitted by the user.</db:para></db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#directoryChanged">directoryChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="files">
<db:title>QStringList QFileSystemWatcher::files() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>files</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList files() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of paths to files that are being watched.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#directories">directories</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePath">
<db:title>bool QFileSystemWatcher::removePath(const QString &amp;<db:emphasis>path</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removePath</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>path</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removePath(const QString &amp;path)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the specified <db:code role="parameter">path</db:code> from the file system watcher.</db:para>
<db:para>If the watch is successfully removed, true is returned.</db:para>
<db:para>Reasons for watch removal failing are generally system-dependent, but may be due to the path having already been deleted, for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#removePaths">removePaths</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemwatcher.xml#addPath">addPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removePaths">
<db:title>QStringList QFileSystemWatcher::removePaths(const QStringList &amp;<db:emphasis>paths</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QStringList</db:type>
<db:methodname>removePaths</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>paths</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList removePaths(const QStringList &amp;paths)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the specified <db:code role="parameter">paths</db:code> from the file system watcher.</db:para>
<db:para>The return value is a list of paths which were not able to be unwatched successfully.</db:para>
<db:para>Reasons for watch removal failing are generally system-dependent, but may be due to the path having already been deleted, for example.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfilesystemwatcher.xml#removePath">removePath</db:link>()</db:member>
<db:member><db:link xlink:href="qfilesystemwatcher.xml#addPaths">addPaths</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
