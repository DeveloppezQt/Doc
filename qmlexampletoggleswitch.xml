<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Toggle Switch</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A reusable switch component made in QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example shows how to create a reusable switch component in QML.</db:para>
<db:para>The code for this example can be found in the <db:code>examples/quick/customitems/slideswitch</db:code> directory.</db:para>
<db:para>The objects that compose the switch are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>a <db:code>on</db:code> property (the interface to interact with the switch),</db:para>
</db:listitem>
<db:listitem>
<db:para>two images (the background image and the knob),</db:para>
</db:listitem>
<db:listitem>
<db:para>two mouse regions for user interation (on the background image and on the knob),</db:para>
</db:listitem>
<db:listitem>
<db:para>two states (an <db:emphasis>on</db:emphasis> state and an <db:emphasis>off</db:emphasis> state),</db:para>
</db:listitem>
<db:listitem>
<db:para>two functions or slots to react to the user interation (<db:code>toggle()</db:code> and <db:code>dorelease()</db:code>),</db:para>
</db:listitem>
<db:listitem>
<db:para>and a transition that describe how to go from one state to the other.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="switch-qml">
<db:title>Switch.qml</db:title>
<db:programlisting language="qml">import QtQuick 2.0

Item {
    id: toggleswitch
    width: background.width; height: background.height

    property bool on: false

    function toggle() {
        if (toggleswitch.state == &quot;on&quot;)
            toggleswitch.state = &quot;off&quot;;
        else
            toggleswitch.state = &quot;on&quot;;
    }

    function releaseSwitch() {
        if (knob.x == 1) {
            if (toggleswitch.state == &quot;off&quot;) return;
        }
        if (knob.x == 78) {
            if (toggleswitch.state == &quot;on&quot;) return;
        }
        toggle();
    }

    Image {
        id: background
        source: &quot;background.png&quot;
        MouseArea { anchors.fill: parent; onClicked: toggle() }
    }

    Image {
        id: knob
        x: 1; y: 2
        source: &quot;knob.png&quot;

        MouseArea {
            anchors.fill: parent
            drag.target: knob; drag.axis: Drag.XAxis; drag.minimumX: 1; drag.maximumX: 78
            onClicked: toggle()
            onReleased: releaseSwitch()
        }
    }

    states: [
        State {
            name: &quot;on&quot;
            PropertyChanges { target: knob; x: 78 }
            PropertyChanges { target: toggleswitch; on: true }
        },
        State {
            name: &quot;off&quot;
            PropertyChanges { target: knob; x: 1 }
            PropertyChanges { target: toggleswitch; on: false }
        }
    ]

    transitions: Transition {
        NumberAnimation { properties: &quot;x&quot;; easing.type: Easing.InOutQuad; duration: 200 }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="walkthrough">
<db:title>Walkthrough</db:title>
<db:section xml:id="interface">
<db:title>Interface</db:title>
<db:programlisting language="qml">    property bool on: false
</db:programlisting>
<db:para>This property is the interface of the switch. By default, the switch is off and this property is <db:code>false</db:code>. It can be used to activate/deactivate the switch or to query its current state.</db:para>
<db:para>In this example:</db:para>
<db:programlisting language="qml">Item {
    Switch {
        id: mySwitch
        on: true
    }
    Text {
        text: &quot;The switch is on&quot;
        visible: mySwitch.on == true
    }
}
</db:programlisting>
<db:para>the text will only be visible when the switch is on.</db:para>
</db:section>
<db:section xml:id="images-and-user-interaction">
<db:title>Images and user interaction</db:title>
<db:programlisting language="qml">    Image {
        id: background
        source: &quot;background.png&quot;
        MouseArea { anchors.fill: parent; onClicked: toggle() }
    }
</db:programlisting>
<db:para>First, we create the background image of the switch. In order for the switch to toggle when the user clicks on the background, we add a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> as a child item of the image. A <db:code>MouseArea</db:code> has a <db:code>onClicked</db:code> property that is triggered when the item is clicked. For the moment we will just call a <db:code>toggle()</db:code> function. We will see what this function does in a moment.</db:para>
<db:programlisting language="qml">    Image {
        id: knob
        x: 1; y: 2
        source: &quot;knob.png&quot;

        MouseArea {
            anchors.fill: parent
            drag.target: knob; drag.axis: Drag.XAxis; drag.minimumX: 1; drag.maximumX: 78
            onClicked: toggle()
            onReleased: releaseSwitch()
        }
    }
</db:programlisting>
<db:para>Then, we place the image of the knob on top of the background. The interaction here is a little more complex. We want the knob to move with the finger when it is clicked. That is what the <db:code>drag</db:code> property of the <db:code>MouseArea</db:code> is for. We also want to toggle the switch if the knob is released between state. We handle this case in the <db:code>dorelease()</db:code> function that is called in the <db:code>onReleased</db:code> property.</db:para>
</db:section>
<db:section xml:id="states">
<db:title>States</db:title>
<db:programlisting language="qml">    states: [
        State {
            name: &quot;on&quot;
            PropertyChanges { target: knob; x: 78 }
            PropertyChanges { target: toggleswitch; on: true }
        },
        State {
            name: &quot;off&quot;
            PropertyChanges { target: knob; x: 1 }
            PropertyChanges { target: toggleswitch; on: false }
        }
    ]
</db:programlisting>
<db:para>We define the two states of the switch:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>In the <db:emphasis>on</db:emphasis> state the knob is on the right (<db:code>x</db:code> position is 78) and the <db:code>on</db:code> property is <db:code>true</db:code>.</db:para>
</db:listitem>
<db:listitem>
<db:para>In the <db:emphasis>off</db:emphasis> state the knob is on the left (<db:code>x</db:code> position is 1) and the <db:code>on</db:code> property is <db:code>false</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information on states see <db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link>.</db:para>
</db:section>
<db:section xml:id="functions">
<db:title>Functions</db:title>
<db:para>We add two JavaScript functions to our switch:</db:para>
<db:programlisting language="qml">    function toggle() {
        if (toggleswitch.state == &quot;on&quot;)
            toggleswitch.state = &quot;off&quot;;
        else
            toggleswitch.state = &quot;on&quot;;
    }
</db:programlisting>
<db:para>This first function is called when the background image or the knob are clicked. We simply want the switch to toggle between the two states (<db:emphasis>on</db:emphasis> and <db:emphasis>off</db:emphasis>).</db:para>
<db:programlisting language="qml">    function releaseSwitch() {
        if (knob.x == 1) {
            if (toggleswitch.state == &quot;off&quot;) return;
        }
        if (knob.x == 78) {
            if (toggleswitch.state == &quot;on&quot;) return;
        }
        toggle();
    }
</db:programlisting>
<db:para>This second function is called when the knob is released and we want to make sure that the knob does not end up between states (neither <db:emphasis>on</db:emphasis> nor <db:emphasis>off</db:emphasis>). If it is the case call the <db:code>toggle()</db:code> function otherwise we do nothing.</db:para>
<db:para>For more information on scripts see <db:link xlink:href="qtqml-javascript-expressions.xml">JavaScript Expressions in QML Documents</db:link>.</db:para>
</db:section>
<db:section xml:id="transition">
<db:title>Transition</db:title>
<db:programlisting language="qml">    transitions: Transition {
        NumberAnimation { properties: &quot;x&quot;; easing.type: Easing.InOutQuad; duration: 200 }
    }
</db:programlisting>
<db:para>At this point, when the switch toggles between the two states the knob will instantly change its <db:code>x</db:code> position between 1 and 78. In order for the knob to move smoothly we add a transition that will animate the <db:code>x</db:code> property with an easing curve for a duration of 200ms.</db:para>
<db:para>For more information on transitions see <db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions in Qt Quick</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="usage">
<db:title>Usage</db:title>
<db:para>The switch can be used in a QML file, like this:</db:para>
<db:programlisting language="qml">    Switch { anchors.centerIn: parent; on: false }
</db:programlisting>
</db:section>
</db:article>
