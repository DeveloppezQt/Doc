<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMediaObject Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> class provides a common base for multimedia objects.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMediaObject</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qaudiodecoder.xml" xlink:role="class">QAudioDecoder</db:link>, <db:link xlink:href="qcamera.xml" xlink:role="class">QCamera</db:link>, <db:link xlink:href="qmediaplayer.xml" xlink:role="class">QMediaPlayer</db:link>, and <db:link xlink:href="qradiotuner.xml" xlink:role="class">QRadioTuner</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QMediaObject is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_core</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It provides some basic functionality that is common to other high level classes like <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link>, <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> and <db:link xlink:href="qcamera.xml">QCamera</db:link>, including availability and meta-data functionality, as well as functionality to connect media objects with support classes like <db:link xlink:href="qmediaplaylist.xml">QMediaPlaylist</db:link>.</db:para>
<db:para>The higher level <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> derived classes provide the actual multimedia functionality, by internally using a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>. Each media object hosts a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> and uses the <db:link xlink:href="qmediacontrol.xml">QMediaControl</db:link> interfaces implemented by the service to implement its API. These controls can be accessed from the media object if necessary, but in general the useful functionality can be accessed from the higher level classes.</db:para>
<db:para>Most media objects when constructed will request a new <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> instance, but some like <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> and <db:link xlink:href="qaudiorecorder.xml">QAudioRecorder</db:link> will share a service with another object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml">QMediaService</db:link></db:member>
<db:member><db:link xlink:href="qmediacontrol.xml">QMediaControl</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="notifyInterval-prop">
<db:title>notifyInterval : int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>notifyInterval</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">notifyInterval</db:synopsisinfo>
<db:synopsisinfo role="setter">setNotifyInterval</db:synopsisinfo>
<db:synopsisinfo role="notifier">notifyIntervalChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The interval at which notifiable properties will update.</db:para>
<db:para>The interval is expressed in milliseconds, the default value is 1000.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">notifyInterval</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setNotifyInterval</db:emphasis>(<db:type>int</db:type> <db:emphasis>milliSeconds</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qmediaobject.xml#notifyIntervalChanged">notifyIntervalChanged</db:link></db:emphasis>(<db:type>int</db:type> <db:emphasis>milliseconds</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml#addPropertyWatch">addPropertyWatch</db:link>()</db:member>
<db:member><db:link xlink:href="qmediaobject.xml#removePropertyWatch">removePropertyWatch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMediaObject">
<db:title>[protected] QMediaObject::QMediaObject(QObject *<db:emphasis>parent</db:emphasis>, QMediaService *<db:emphasis>service</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QMediaObject</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QMediaService *</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaObject(QObject *parent, QMediaService *service)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a media object which uses the functionality provided by a media <db:code role="parameter">service</db:code>.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qobject.xml">QObject</db:link>.</db:para>
<db:para>This class is meant as a base class for multimedia objects so this constructor is protected.</db:para>
</db:section>
<db:section xml:id="dtor.QMediaObject">
<db:title>[virtual] QMediaObject::~QMediaObject()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QMediaObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QMediaObject()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this media object.</db:para>
</db:section>
<db:section xml:id="addPropertyWatch">
<db:title>[protected] void QMediaObject::addPropertyWatch(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addPropertyWatch</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addPropertyWatch(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Watch the property <db:code role="parameter">name</db:code>. The property's notify signal will be emitted once every <db:code>notifyInterval</db:code> milliseconds.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml#notifyInterval-prop">notifyInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availability">
<db:title>[virtual] QMultimedia::AvailabilityStatus QMediaObject::availability() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMultimedia::AvailabilityStatus</db:type>
<db:methodname>availability</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMultimedia::AvailabilityStatus availability() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the availability of the functionality offered by this object.</db:para>
<db:para>In some cases the functionality may not be available (for example, if the current operating system or platform does not provide the required functionality), or it may be temporarily unavailable (for example, audio playback during a phone call or similar).</db:para>
</db:section>
<db:section xml:id="availabilityChanged">
<db:title>void QMediaObject::availabilityChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>availabilityChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void availabilityChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the availability state has changed to <db:code role="parameter">available</db:code>.</db:para>
</db:section>
<db:section xml:id="availabilityChanged-1">
<db:title>void QMediaObject::availabilityChanged(QMultimedia::AvailabilityStatus <db:emphasis>availability</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>availabilityChanged</db:methodname>
<db:methodparam>
<db:type>QMultimedia::AvailabilityStatus</db:type>
<db:parameter>availability</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void availabilityChanged(QMultimedia::AvailabilityStatus availability)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted when the availability of the service has changed to <db:code role="parameter">availability</db:code>.</db:para>
</db:section>
<db:section xml:id="availableMetaData">
<db:title>QStringList QMediaObject::availableMetaData() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>availableMetaData</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList availableMetaData() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of keys there is meta-data available for.</db:para>
</db:section>
<db:section xml:id="bind">
<db:title>[virtual] bool QMediaObject::bind(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>bind</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bind(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Bind <db:code role="parameter">object</db:code> to this <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> instance.</db:para>
<db:para>This method establishes a relationship between this media object and a helper object. The nature of the relationship depends on both parties. This methods returns true if the helper was successfully bound, false otherwise.</db:para>
<db:para>Most subclasses of <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> provide more convenient functions that wrap this functionality, so this function rarely needs to be called directly.</db:para>
<db:para>The object passed must implement the <db:link xlink:href="qmediabindableinterface.xml">QMediaBindableInterface</db:link> interface.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediabindableinterface.xml">QMediaBindableInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isAvailable">
<db:title>[virtual] bool QMediaObject::isAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the service is available for use.</db:para>
</db:section>
<db:section xml:id="isMetaDataAvailable">
<db:title>bool QMediaObject::isMetaDataAvailable() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMetaDataAvailable</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMetaDataAvailable() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if there is meta-data associated with this media object, else false.</db:para>
</db:section>
<db:section xml:id="metaData">
<db:title>QVariant QMediaObject::metaData(const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant metaData(const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value associated with a meta-data <db:code role="parameter">key</db:code>.</db:para>
<db:para>See the list of predefined <db:link xlink:href="qmediametadata.xml">meta-data keys</db:link>.</db:para>
</db:section>
<db:section xml:id="metaDataAvailableChanged">
<db:title>void QMediaObject::metaDataAvailableChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataAvailableChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>available</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataAvailableChanged(bool available)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">available</db:code> state of a media object's meta-data has changed.</db:para>
</db:section>
<db:section xml:id="metaDataChanged">
<db:title>void QMediaObject::metaDataChanged()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataChanged</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataChanged()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that this media object's meta-data has changed.</db:para>
<db:para>If multiple meta-data elements are changed, metaDataChanged(const <db:link xlink:href="qstring.xml">QString</db:link> &amp;key, const <db:link xlink:href="qvariant.xml">QVariant</db:link> &amp;value) signal is emitted for each of them with metaDataChanged() changed emitted once.</db:para>
</db:section>
<db:section xml:id="metaDataChanged-1">
<db:title>void QMediaObject::metaDataChanged(const QString &amp;<db:emphasis>key</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>metaDataChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void metaDataChanged(const QString &amp;key, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal the changes of one meta-data element <db:code role="parameter">value</db:code> with the given <db:code role="parameter">key</db:code>.</db:para>
</db:section>
<db:section xml:id="notifyIntervalChanged">
<db:title>void QMediaObject::notifyIntervalChanged(int <db:emphasis>milliseconds</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>notifyIntervalChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>milliseconds</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">notifyInterval</db:synopsisinfo>
<db:synopsisinfo role="signature">void notifyIntervalChanged(int milliseconds)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal a change in the notify interval period to <db:code role="parameter">milliseconds</db:code>.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qmediaobject.xml#notifyInterval-prop">notifyInterval</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="removePropertyWatch">
<db:title>[protected] void QMediaObject::removePropertyWatch(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>removePropertyWatch</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void removePropertyWatch(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Remove property <db:code role="parameter">name</db:code> from the list of properties whose changes are regularly signaled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaobject.xml#notifyInterval-prop">notifyInterval</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="service">
<db:title>[virtual] QMediaService *QMediaObject::service() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QMediaService *</db:type>
<db:methodname>service</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMediaService * service() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the media service that provides the functionality of this multimedia object.</db:para>
</db:section>
<db:section xml:id="unbind">
<db:title>[virtual] void QMediaObject::unbind(QObject *<db:emphasis>object</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>unbind</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>object</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void unbind(QObject *object)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Detach <db:code role="parameter">object</db:code> from the <db:link xlink:href="qmediaobject.xml">QMediaObject</db:link> instance.</db:para>
<db:para>Unbind the helper object from this media object. A warning will be generated if the object was not previously bound to this object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediabindableinterface.xml">QMediaBindableInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
