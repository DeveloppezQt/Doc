<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>BluetoothSocket QML Type</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables connecting and communicating with a Bluetooth service or device.</db:para>
<db:para>This type was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtBluetooth 5.12</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>It allows a QML class connect to another Bluetooth device and exchange strings with it. Data is sent and received using a <db:link xlink:href="qdatastream.xml">QDataStream</db:link> object allowing type safe transfers of QStrings. <db:link xlink:href="qdatastream.xml">QDataStream</db:link> is a well known format and can be decoded by non-Qt applications. Note that for the ease of use, <db:link xlink:href="qml-qtbluetooth-bluetoothsocket.xml">BluetoothSocket</db:link> is only well suited for use with strings. If you want to use a binary protocol for your application's communication you should consider using its C++ counterpart <db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link>.</db:para>
<db:para>Connections to remote devices can be over RFCOMM or L2CAP. Either the remote port or service UUID is required. This is specified by creating a <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml">BluetoothService</db:link>, or passing in the service return from <db:link xlink:href="qml-qtbluetooth-bluetoothdiscoverymodel.xml">BluetoothDiscoveryModel</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothsocket.xml">QBluetoothSocket</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="connected-prop">
<db:title>connected : bool</db:title>
<db:fieldsynopsis>
<db:type>bool</db:type>
<db:varname>connected</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the connection state of the socket. If the socket is connected to peer, it returns true. It can be set true or false to control the connection. When set to true, the property will not return true until the connection is established.</db:para>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>error</db:varname>
<db:modifier>[read-only]</db:modifier>

<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the last error that happened.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>NoError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>UnknownSocketError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>HostNotFoundError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ServiceNotFoundError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>NetworkError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>UnsupportedProtocolError</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>RemoteHostClosedError</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The errors are derived from <db:link xlink:href="qbluetoothsocket.xml#SocketError-enum">QBluetoothSocket::SocketError</db:link>. This property is read-only.</db:para>
</db:section>
<db:section xml:id="service-prop">
<db:title>service : BluetoothService</db:title>
<db:fieldsynopsis>
<db:type>BluetoothService</db:type>
<db:varname>service</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the details of the remote service to connect to. It can be set to a static <db:link xlink:href="qml-qtbluetooth-bluetoothservice.xml">BluetoothService</db:link> with a fixed description, or a service returned by service discovery.</db:para>
</db:section>
<db:section xml:id="state-prop">
<db:title>state : enumeration</db:title>
<db:fieldsynopsis>
<db:type>enumeration</db:type>
<db:varname>state</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current state of the socket.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:code>NoServiceSet</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Unconnected</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>ServiceLookup</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Connecting</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Connected</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Closing</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Listening</db:code></db:para>
</db:listitem>
<db:listitem>
<db:para><db:code>Bound</db:code></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The states (except <db:code>NoServiceSet</db:code>) are derived from <db:link xlink:href="qbluetoothsocket.xml#SocketState-enum">QBluetoothSocket::SocketState</db:link>. This property is read-only. <db:code>NoServiceSet</db:code> indicates that the socket state is not yet available due to the <db:link xlink:href="qml-qtbluetooth-bluetoothsocket.xml#service-prop">service</db:link> not being set yet.</db:para>
</db:section>
<db:section xml:id="stringData-prop">
<db:title>stringData : string</db:title>
<db:fieldsynopsis>
<db:type>string</db:type>
<db:varname>stringData</db:varname>
<db:modifier>writable</db:modifier>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property receives or sends data to a remote Bluetooth device. Arrival of data can be detected by connecting to this properties changed signal and can be read via stringData. Setting stringData will transmit the string. If excessive amounts of data are sent, the function may block sending. Reading will never block.</db:para>
</db:section>
</db:section>
</db:article>
