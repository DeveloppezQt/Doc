<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineUrlRequestJob Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link> class represents a custom URL request.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineUrlRequestJob</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link> is given to <db:link xlink:href="qwebengineurlschemehandler.xml#requestStarted">QWebEngineUrlSchemeHandler::requestStarted</db:link>() and must be handled by the derived implementations of the class. The job can be handled by calling either <db:link xlink:href="qwebengineurlrequestjob.xml#reply">reply</db:link>(), <db:link xlink:href="qwebengineurlrequestjob.xml#redirect">redirect</db:link>(), or <db:link xlink:href="qwebengineurlrequestjob.xml#fail">fail</db:link>().</db:para>
<db:para>The class is owned by the web engine and does not need to be deleted. However, the web engine may delete the job when it is no longer needed, and therefore the signal <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() must be monitored if a pointer to the object is stored.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QWebEngineUrlRequestJob::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UrlNotFound</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UrlInvalid</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestAborted</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestDenied</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RequestFailed</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum type holds the type of the error that occurred:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The request was successful.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::UrlNotFound</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The requested URL was not found.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::UrlInvalid</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The requested URL is invalid.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::RequestAborted</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The request was canceled.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::RequestDenied</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>The request was denied.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link></db:emphasis>::RequestFailed</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>The request failed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="fail">
<db:title>void QWebEngineUrlRequestJob::fail(QWebEngineUrlRequestJob::Error <db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>fail</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlRequestJob::Error</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void fail(QWebEngineUrlRequestJob::Error r)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Fails the request with the error <db:code role="parameter">r</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestjob.xml#Error-enum">Error</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="initiator">
<db:title>QUrl QWebEngineUrlRequestJob::initiator() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>initiator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl initiator() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the serialized origin of the content that initiated the request.</db:para>
<db:para>Generally, the origin consists of a scheme, hostname, and port. For example, <db:code>&quot;http://localhost:8080&quot;</db:code> would be a valid origin. The port is omitted if it is the scheme's default port (80 for <db:code>http</db:code>, 443 for <db:code>https</db:code>). The hostname is omitted for non-network schemes such as <db:code>file</db:code> and <db:code>qrc</db:code>.</db:para>
<db:para>However, there is also the special value <db:code>&quot;null&quot;</db:code> representing a unique origin. It is, for example, the origin of a sandboxed iframe. The purpose of this special origin is to be always different from all other origins in the same-origin check. In other words, content with a unique origin should never have privileged access to any other content.</db:para>
<db:para>Finally, if the request was not initiated by web content, the function will return an empty <db:link xlink:href="qurl.xml">QUrl</db:link>. This happens, for example, when you call <db:link xlink:href="qwebenginepage.xml#url-prop">QWebEnginePage::setUrl</db:link>().</db:para>
<db:para>This value can be used for implementing secure cross-origin checks.</db:para>
</db:section>
<db:section xml:id="redirect">
<db:title>void QWebEngineUrlRequestJob::redirect(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>redirect</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void redirect(const QUrl &amp;url)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Redirects the request to <db:code role="parameter">url</db:code>.</db:para>
</db:section>
<db:section xml:id="reply">
<db:title>void QWebEngineUrlRequestJob::reply(const QByteArray &amp;<db:emphasis>contentType</db:emphasis>, QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>reply</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>contentType</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void reply(const QByteArray &amp;contentType, QIODevice *device)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Replies to the request with <db:code role="parameter">device</db:code> and the content type <db:code role="parameter">contentType</db:code>. Content type is similar to the HTTP Content-Type header, and can either be a MIME type, or a MIME type and charset encoding combined like this: &quot;text/html; charset=utf-8&quot;.</db:para>
<db:para>The user has to be aware that <db:code role="parameter">device</db:code> will be used on another thread until the job is deleted. In case simultaneous access from the main thread is desired, the user is reponsible for making access to <db:code role="parameter">device</db:code> thread-safe for example by using <db:link xlink:href="qmutex.xml">QMutex</db:link>. Note that the <db:code role="parameter">device</db:code> object is not owned by the web engine. Therefore, the signal <db:link xlink:href="qobject.xml#destroyed">QObject::destroyed</db:link>() of <db:link xlink:href="qwebengineurlrequestjob.xml">QWebEngineUrlRequestJob</db:link> must be monitored.</db:para>
<db:para>The device should remain available at least as long as the job exists. When calling this method with a newly constructed device, one solution is to make the device as a child of the job or delete itself when job is deleted, like this:</db:para>
<db:programlisting language="cpp">connect(job, &amp;amp;QObject::destroyed, device, &amp;amp;QObject::deleteLater);
</db:programlisting>
</db:section>
<db:section xml:id="requestBody">
<db:title>[since 6.7] QIODevice *QWebEngineUrlRequestJob::requestBody() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>requestBody</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * requestBody() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a pointer to a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> that gives access to the request body. The request body can contain data for example when the request is a POST request. If the request body is empty the <db:link xlink:href="qiodevice.xml">QIODevice</db:link> reflects this and does not return any data when performing read operations on it.</db:para>
<db:para>This function was introduced in Qt 6.7.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml">QIODevice</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requestHeaders">
<db:title>QMap&lt;QByteArray, QByteArray&gt; QWebEngineUrlRequestJob::requestHeaders() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QMap&lt;QByteArray, QByteArray&gt;</db:type>
<db:methodname>requestHeaders</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QMap&lt;QByteArray, QByteArray&gt; requestHeaders() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns any HTTP headers added to the request.</db:para>
</db:section>
<db:section xml:id="requestMethod">
<db:title>QByteArray QWebEngineUrlRequestJob::requestMethod() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>requestMethod</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray requestMethod() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the HTTP method of the request (for example, GET or POST).</db:para>
</db:section>
<db:section xml:id="requestUrl">
<db:title>QUrl QWebEngineUrlRequestJob::requestUrl() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QUrl</db:type>
<db:methodname>requestUrl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QUrl requestUrl() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the requested URL.</db:para>
</db:section>
<db:section xml:id="setAdditionalResponseHeaders">
<db:title>[since 6.6] void QWebEngineUrlRequestJob::setAdditionalResponseHeaders(const QMultiMap&lt;QByteArray, QByteArray&gt; &amp;<db:emphasis>additionalResponseHeaders</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:void/>
<db:methodname>setAdditionalResponseHeaders</db:methodname>
<db:methodparam>
<db:type>const QMultiMap&lt;QByteArray, QByteArray&gt; &amp;</db:type>
<db:parameter>additionalResponseHeaders</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAdditionalResponseHeaders(const QMultiMap&lt;QByteArray, QByteArray&gt; &amp;additionalResponseHeaders) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set <db:code role="parameter">additionalResponseHeaders</db:code>. These additional headers of the response are only used when <db:link xlink:href="qwebengineurlrequestjob.xml#reply">QWebEngineUrlRequestJob::reply</db:link>(const <db:link xlink:href="qbytearray.xml">QByteArray</db:link>&amp;, <db:link xlink:href="qiodevice.xml">QIODevice</db:link>*) is called.</db:para>
<db:para>This function was introduced in Qt 6.6.</db:para>
</db:section>
</db:section>
</db:article>
