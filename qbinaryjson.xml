<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBinaryJson Namespace</db:title>
<db:productname>QtCore5Compat</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 5 Core Compatibility APIs Documentation</db:titleabbrev>
<db:abstract>
<db:para>Contains functions for converting QJsonDocument to and from JSON binary format.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBinaryJson</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core5Compat)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core5Compat)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core5compat</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This namespace provides utility functions to keep compatibility with older code, which uses the JSON binary format for serializing JSON. Qt JSON types can be converted to Qt CBOR types, which can in turn be serialized into the CBOR binary format and vice versa.</db:para>
</db:section>
<db:section xml:id="type-documentation">
<db:title>Type Documentation</db:title>
<db:section xml:id="DataValidation-enum">
<db:title>enum QBinaryJson::DataValidation</db:title>
<db:enumsynopsis>
<db:enumname>DataValidation</db:enumname>
<db:enumitem>
<db:enumidentifier>Validate</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BypassValidation</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum is used to tell QJsonDocument whether to validate the binary data when converting to a QJsonDocument using <db:link xlink:href="qbinaryjson.xml#fromBinaryData">fromBinaryData</db:link>() or <db:link xlink:href="qbinaryjson.xml#fromRawData">fromRawData</db:link>().</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbinaryjson.xml">QBinaryJson</db:link></db:emphasis>::Validate</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Validate the data before using it. This is the default.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbinaryjson.xml">QBinaryJson</db:link></db:emphasis>::BypassValidation</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Bypasses data validation. Only use if you received the data from a trusted place and know it's valid, as using of invalid data can crash the application.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="fromBinaryData">
<db:title>QJsonDocument QBinaryJson::fromBinaryData(const QByteArray &amp;<db:emphasis>data</db:emphasis>, QBinaryJson::DataValidation <db:emphasis>validation</db:emphasis> = Validate)</db:title>
<db:methodsynopsis>
<db:type>QJsonDocument</db:type>
<db:methodname>fromBinaryData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBinaryJson::DataValidation</db:type>
<db:parameter>validation</db:parameter>
<db:initializer>Validate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromBinaryData(const QByteArray &amp;data, QBinaryJson::DataValidation validation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a QJsonDocument from <db:code role="parameter">data</db:code>.</db:para>
<db:para><db:code role="parameter">validation</db:code> decides whether the data is checked for validity before being used. By default the data is validated. If the <db:code role="parameter">data</db:code> is not valid, the method returns a null document.</db:para>
<db:note>
<db:para>The binary JSON encoding is only retained for backwards compatibility. It is undocumented and restrictive in the maximum size of JSON documents that can be encoded. Qt JSON types can be converted to Qt CBOR types, which can in turn be serialized into the CBOR binary format and vice versa. The CBOR format is a well-defined and less restrictive binary representation for a superset of JSON.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbinaryjson.xml#toBinaryData">toBinaryData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#fromRawData">fromRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#DataValidation-enum">DataValidation</db:link></db:member>
<db:member>QCborValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromRawData">
<db:title>QJsonDocument QBinaryJson::fromRawData(const char *<db:emphasis>data</db:emphasis>, int <db:emphasis>size</db:emphasis>, QBinaryJson::DataValidation <db:emphasis>validation</db:emphasis> = Validate)</db:title>
<db:methodsynopsis>
<db:type>QJsonDocument</db:type>
<db:methodname>fromRawData</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBinaryJson::DataValidation</db:type>
<db:parameter>validation</db:parameter>
<db:initializer>Validate</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument fromRawData(const char *data, int size, QBinaryJson::DataValidation validation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates a QJsonDocument that uses the first <db:code role="parameter">size</db:code> bytes from <db:code role="parameter">data</db:code>. It assumes <db:code role="parameter">data</db:code> contains a binary encoded JSON document. The created document does not take ownership of <db:code role="parameter">data</db:code>. The data is copied into a different data structure, and the original data can be deleted or modified afterwards.</db:para>
<db:para><db:code role="parameter">data</db:code> has to be aligned to a 4 byte boundary.</db:para>
<db:para><db:code role="parameter">validation</db:code> decides whether the data is checked for validity before being used. By default the data is validated. If the <db:code role="parameter">data</db:code> is not valid, the method returns a null document.</db:para>
<db:para>Returns a QJsonDocument representing the data.</db:para>
<db:note>
<db:para>The binary JSON encoding is only retained for backwards compatibility. It is undocumented and restrictive in the maximum size of JSON documents that can be encoded. Qt JSON types can be converted to Qt CBOR types, which can in turn be serialized into the CBOR binary format and vice versa. The CBOR format is a well-defined and less restrictive binary representation for a superset of JSON.</db:para>
</db:note>
<db:note>
<db:para>Before Qt 5.15, the caller had to guarantee that <db:code role="parameter">data</db:code> would not be deleted or modified as long as any QJsonDocument, QJsonObject or QJsonArray still referenced the data. From Qt 5.15 on, this is not necessary anymore.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbinaryjson.xml#toRawData">toRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#fromBinaryData">fromBinaryData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#DataValidation-enum">DataValidation</db:link></db:member>
<db:member>QCborValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toBinaryData">
<db:title>QByteArray QBinaryJson::toBinaryData(const QJsonDocument &amp;<db:emphasis>document</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>toBinaryData</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray toBinaryData(const QJsonDocument &amp;document)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a binary representation of <db:code role="parameter">document</db:code>.</db:para>
<db:para>The binary representation is also the native format used internally in Qt, and is very efficient and fast to convert to and from.</db:para>
<db:para>The binary format can be stored on disk and interchanged with other applications or computers. <db:link xlink:href="qbinaryjson.xml#fromBinaryData">fromBinaryData</db:link>() can be used to convert it back into a JSON document.</db:para>
<db:note>
<db:para>The binary JSON encoding is only retained for backwards compatibility. It is undocumented and restrictive in the maximum size of JSON documents that can be encoded. Qt JSON types can be converted to Qt CBOR types, which can in turn be serialized into the CBOR binary format and vice versa. The CBOR format is a well-defined and less restrictive binary representation for a superset of JSON.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbinaryjson.xml#fromBinaryData">fromBinaryData</db:link>()</db:member>
<db:member>QCborValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toRawData">
<db:title>const char *QBinaryJson::toRawData(const QJsonDocument &amp;<db:emphasis>document</db:emphasis>, int *<db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>const char *</db:type>
<db:methodname>toRawData</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>document</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int *</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const char * toRawData(const QJsonDocument &amp;document, int *size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the raw binary representation of <db:code role="parameter">document</db:code>. <db:code role="parameter">size</db:code> will contain the size of the returned data.</db:para>
<db:para>This method is useful to e.g. stream the JSON document in its binary form to a file.</db:para>
<db:note>
<db:para>The binary JSON encoding is only retained for backwards compatibility. It is undocumented and restrictive in the maximum size of JSON documents that can be encoded. Qt JSON types can be converted to Qt CBOR types, which can in turn be serialized into the CBOR binary format and vice versa. The CBOR format is a well-defined and less restrictive binary representation for a superset of JSON.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbinaryjson.xml#fromRawData">fromRawData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#fromBinaryData">fromBinaryData</db:link>()</db:member>
<db:member><db:link xlink:href="qbinaryjson.xml#toBinaryData">toBinaryData</db:link>()</db:member>
<db:member>QCborValue</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
