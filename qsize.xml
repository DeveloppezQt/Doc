<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSize Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsize.xml">QSize</db:link> class defines the size of a two-dimensional object using integer point precision.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSize</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSize is part of <db:simplelist><db:member>painting</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A size is specified by a <db:link xlink:href="qsize.xml#width">width</db:link>() and a <db:link xlink:href="qsize.xml#height">height</db:link>(). It can be set in the constructor and changed using the <db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>(), <db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>(), or <db:link xlink:href="qsize.xml#scale">scale</db:link>() functions, or using arithmetic operators. A size can also be manipulated directly by retrieving references to the width and height using the <db:link xlink:href="qsize.xml#rwidth">rwidth</db:link>() and <db:link xlink:href="qsize.xml#rheight">rheight</db:link>() functions. Finally, the width and height can be swapped using the <db:link xlink:href="qsize.xml#transpose">transpose</db:link>() function.</db:para>
<db:para>The <db:link xlink:href="qsize.xml#isValid">isValid</db:link>() function determines if a size is valid (a valid size has both width and height greater than or equal to zero). The <db:link xlink:href="qsize.xml#isEmpty">isEmpty</db:link>() function returns true if either of the width and height is less than, or equal to, zero, while the <db:link xlink:href="qsize.xml#isNull">isNull</db:link>() function returns true only if both the width and the height is zero.</db:para>
<db:para>Use the <db:link xlink:href="qsize.xml#expandedTo">expandedTo</db:link>() function to retrieve a size which holds the maximum height and width of <db:emphasis>this</db:emphasis> size and a given size. Similarly, the <db:link xlink:href="qsize.xml#boundedTo">boundedTo</db:link>() function returns a size which holds the minimum height and width of <db:emphasis>this</db:emphasis> size and a given size.</db:para>
<db:para><db:link xlink:href="qsize.xml">QSize</db:link> objects can be streamed as well as compared.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:member>
<db:member><db:link xlink:href="qpoint.xml">QPoint</db:link></db:member>
<db:member><db:link xlink:href="qrect.xml">QRect</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSize">
<db:title>[noexcept] QSize::QSize()</db:title>
<db:para>Constructs a size with an invalid width and height (i.e., <db:link xlink:href="qsize.xml#isValid">isValid</db:link>() returns false).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QSize-1">
<db:title>[noexcept] QSize::QSize(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Constructs a size with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="boundedTo">
<db:title>[noexcept] QSize QSize::boundedTo(const QSize &amp;<db:emphasis>otherSize</db:emphasis>) const</db:title>
<db:para>Returns a size holding the minimum width and height of this size and the given <db:code role="parameter">otherSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#expandedTo">expandedTo</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#scale">scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expandedTo">
<db:title>[noexcept] QSize QSize::expandedTo(const QSize &amp;<db:emphasis>otherSize</db:emphasis>) const</db:title>
<db:para>Returns a size holding the maximum width and height of this size and the given <db:code role="parameter">otherSize</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#boundedTo">boundedTo</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#scale">scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="height">
<db:title>[noexcept] int QSize::height() const</db:title>
<db:para>Returns the height.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isEmpty">
<db:title>[noexcept] bool QSize::isEmpty() const</db:title>
<db:para>Returns true if either of the width and height is less than or equal to 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>[noexcept] bool QSize::isNull() const</db:title>
<db:para>Returns true if both the width and height is 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#isValid">isValid</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>[noexcept] bool QSize::isValid() const</db:title>
<db:para>Returns true if both the width and height is equal to or greater than 0; otherwise returns false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#isNull">isNull</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#isEmpty">isEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rheight">
<db:title>[noexcept] int &amp;QSize::rheight()</db:title>
<db:para>Returns a reference to the height.</db:para>
<db:para>Using a reference makes it possible to manipulate the height directly. For example:</db:para>
<db:programlisting language="cpp">QSize size(100, 10);
size.rheight() += 5;

// size becomes (100,15)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#rwidth">rwidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rwidth">
<db:title>[noexcept] int &amp;QSize::rwidth()</db:title>
<db:para>Returns a reference to the width.</db:para>
<db:para>Using a reference makes it possible to manipulate the width directly. For example:</db:para>
<db:programlisting language="cpp">QSize size(100, 10);
size.rwidth() += 20;

// size becomes (120,10)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#rheight">rheight</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale">
<db:title>[noexcept] void QSize::scale(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::AspectRatioMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Scales the size to a rectangle with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, according to the specified <db:code role="parameter">mode</db:code>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::IgnoreAspectRatio</db:link>, the size is set to (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>).</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatio</db:link>, the current size is scaled to a rectangle as large as possible inside (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), preserving the aspect ratio.</db:para>
</db:listitem>
<db:listitem>
<db:para>If <db:code role="parameter">mode</db:code> is <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatioByExpanding</db:link>, the current size is scaled to a rectangle as small as possible outside (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>), preserving the aspect ratio.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSize t1(10, 12);
t1.scale(60, 60, Qt::IgnoreAspectRatio);
// t1 is (60, 60)

QSize t2(10, 12);
t2.scale(60, 60, Qt::KeepAspectRatio);
// t2 is (50, 60)

QSize t3(10, 12);
t3.scale(60, 60, Qt::KeepAspectRatioByExpanding);
// t3 is (60, 72)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#scaled">scaled</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scale-1">
<db:title>[noexcept] void QSize::scale(const QSize &amp;<db:emphasis>size</db:emphasis>, Qt::AspectRatioMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Scales the size to a rectangle with the given <db:code role="parameter">size</db:code>, according to the specified <db:code role="parameter">mode</db:code>.</db:para>
</db:section>
<db:section xml:id="scaled">
<db:title>[noexcept, since 5.0] QSize QSize::scaled(int <db:emphasis>width</db:emphasis>, int <db:emphasis>height</db:emphasis>, Qt::AspectRatioMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:para>Return a size scaled to a rectangle with the given <db:code role="parameter">width</db:code> and <db:code role="parameter">height</db:code>, according to the specified <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#scale">scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scaled-1">
<db:title>[noexcept, since 5.0] QSize QSize::scaled(const QSize &amp;<db:emphasis>s</db:emphasis>, Qt::AspectRatioMode <db:emphasis>mode</db:emphasis>) const</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Return a size scaled to a rectangle with the given size <db:code role="parameter">s</db:code>, according to the specified <db:code role="parameter">mode</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
</db:section>
<db:section xml:id="setHeight">
<db:title>[noexcept] void QSize::setHeight(int <db:emphasis>height</db:emphasis>)</db:title>
<db:para>Sets the height to the given <db:code role="parameter">height</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#rheight">rheight</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWidth">
<db:title>[noexcept] void QSize::setWidth(int <db:emphasis>width</db:emphasis>)</db:title>
<db:para>Sets the width to the given <db:code role="parameter">width</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#rwidth">rwidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#width">width</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transpose">
<db:title>[noexcept] void QSize::transpose()</db:title>
<db:para>Swaps the width and height values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setHeight">setHeight</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#transposed">transposed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transposed">
<db:title>[noexcept, since 5.0] QSize QSize::transposed() const</db:title>
<db:para>Returns a <db:link xlink:href="qsize.xml">QSize</db:link> with width and height swapped.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#transpose">transpose</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="width">
<db:title>[noexcept] int QSize::width() const</db:title>
<db:para>Returns the width.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#height">height</db:link>()</db:member>
<db:member><db:link xlink:href="qsize.xml#setWidth">setWidth</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-eq">
<db:title>[noexcept] QSize &amp;QSize::operator*=(qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies both the width and height by the given <db:code role="parameter">factor</db:code>, and returns a reference to the size.</db:para>
<db:para>Note that the result is rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#scale">scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2b-eq">
<db:title>[noexcept] QSize &amp;QSize::operator+=(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Adds the given <db:code role="parameter">size</db:code> to <db:emphasis>this</db:emphasis> size, and returns a reference to this size. For example:</db:para>
<db:programlisting language="cpp">QSize s( 3, 7);
QSize r(-1, 4);
s += r;

// s becomes (2,11)
</db:programlisting>
</db:section>
<db:section xml:id="operator--eq">
<db:title>[noexcept] QSize &amp;QSize::operator-=(const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Subtracts the given <db:code role="parameter">size</db:code> from <db:emphasis>this</db:emphasis> size, and returns a reference to this size. For example:</db:para>
<db:programlisting language="cpp">QSize s( 3, 7);
QSize r(-1, 4);
s -= r;

// s becomes (4,3)
</db:programlisting>
</db:section>
<db:section xml:id="operator-2f-eq">
<db:title>QSize &amp;QSize::operator/=(qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Divides both the width and height by the given <db:code role="parameter">divisor</db:code>, and returns a reference to the size.</db:para>
<db:para>Note that the result is rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#scale">QSize::scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq-1">
<db:title>[noexcept] bool operator!=(const QSize &amp;<db:emphasis>s1</db:emphasis>, const QSize &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code> are different; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-2a-2">
<db:title>[noexcept] const QSize operator*(const QSize &amp;<db:emphasis>size</db:emphasis>, qreal <db:emphasis>factor</db:emphasis>)</db:title>
<db:para>Multiplies the given <db:code role="parameter">size</db:code> by the given <db:code role="parameter">factor</db:code>, and returns the result rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#scale">QSize::scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-2a-3">
<db:title>[noexcept] const QSize operator*(qreal <db:emphasis>factor</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Multiplies the given <db:code role="parameter">size</db:code> by the given <db:code role="parameter">factor</db:code>, and returns the result rounded to the nearest integer.</db:para>
</db:section>
<db:section xml:id="operator-2b-1">
<db:title>[noexcept] const QSize operator+(const QSize &amp;<db:emphasis>s1</db:emphasis>, const QSize &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns the sum of <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code>; each component is added separately.</db:para>
</db:section>
<db:section xml:id="operator--1">
<db:title>[noexcept] const QSize operator-(const QSize &amp;<db:emphasis>s1</db:emphasis>, const QSize &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns <db:code role="parameter">s2</db:code> subtracted from <db:code role="parameter">s1</db:code>; each component is subtracted separately.</db:para>
</db:section>
<db:section xml:id="operator-2f-1">
<db:title>const QSize operator/(const QSize &amp;<db:emphasis>size</db:emphasis>, qreal <db:emphasis>divisor</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Divides the given <db:code role="parameter">size</db:code> by the given <db:code role="parameter">divisor</db:code>, and returns the result rounded to the nearest integer.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsize.xml#scale">QSize::scale</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-lt-16">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">size</db:code> to the given <db:code role="parameter">stream</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq-1">
<db:title>[noexcept] bool operator==(const QSize &amp;<db:emphasis>s1</db:emphasis>, const QSize &amp;<db:emphasis>s2</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">s1</db:code> and <db:code role="parameter">s2</db:code> are equal; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-16">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, QSize &amp;<db:emphasis>size</db:emphasis>)</db:title>
<db:para>Reads a size from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">size</db:code>, and returns a reference to the stream.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
