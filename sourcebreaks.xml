<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>C++ API changes</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Lists the source incompatible API changes in Qt 5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 5 introduces some source incompatible changes. Here we list some important ones, but you can find more complete lists in &lt;Qt 5 Install Dir&gt;/qtbase/dist/changes-5.x.x.</db:para>
<db:para>The following sections list the API changes in each module and provide recommendations for handling those changes.</db:para>
<db:section xml:id="changes-to-qt-core">
<db:title>Changes to Qt Core</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qlibrary.xml#resolve">QLibrary::resolve</db:link>() now returns a function pointer instead of void pointer.</db:para>
</db:listitem>
<db:listitem>
<db:para>QLibraryInfo::buildKey() and the corresponding QT_BUILD_KEY macro are removed. You must remove all references to this function and macro, as build key is not necessary now.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qtranslator.xml#translate">QTranslator::translate</db:link>() function signature is changed to set the default value of n to -1. We recommend you to update the implementation of this virtual function in your sources.</db:para>
</db:listitem>
<db:listitem>
<db:para>QBool is removed. In Qt 4, <db:link xlink:href="qstring.xml#contains">QString::contains</db:link>(), <db:link xlink:href="qbytearray.xml#contains">QByteArray::contains</db:link>(), and <db:link xlink:href="">QList::contains()</db:link> returned an internal QBool type so that the Qt3 code if (a.contains() == 2) would not compile anymore. If your code uses QBool, replace it with bool.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QUuid::operator QString() implicit conversion operator is removed. Use the <db:link xlink:href="quuid.xml#toString">QUuid::toString</db:link>() function instead.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprocess.xml#ProcessChannelMode-enum">QProcess::ForwardedChannels</db:link> no longer forwards the output to the GUI applications on the Windows platform, unless those applications create a console.</db:para>
</db:listitem>
<db:listitem>
<db:para>QSystemLocale is not public anymore. Use <db:link xlink:href="qlocale.xml">QLocale</db:link> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>Default value of the <db:link xlink:href="qsortfilterproxymodel.xml#dynamicSortFilter-prop">QSortFilterProxyModel::dynamicSortFilter</db:link> property is changed to true.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTextCodecPlugin is removed as all the text codecs are part of Qt Core now.</db:para>
</db:listitem>
<db:listitem>
<db:para>QFSFileEngine, QAbstractFileEngine, QAbstractFileEngineIterator, and QAbstractFileEngineHandler are no longer public. We recommend you to avoid using these classes as there is no compatibility promise.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtglobal.xml#qDebug">qDebug</db:link>(), <db:link xlink:href="qtglobal.xml#qWarning">qWarning</db:link>(), <db:link xlink:href="qtglobal.xml#qCritical">qCritical</db:link>(), and <db:link xlink:href="qtglobal.xml#qFatal">qFatal</db:link>() are changed to macros now to track the origin of the message in source code. The information to be printed can be configured (for the default message handler) by setting the new QT_MESSAGE_PATTERN environment variable. <db:link xlink:href="">qInstallMsgHandler()</db:link> is deprecated, so we recommend using <db:link xlink:href="qtglobal.xml#qInstallMessageHandler">qInstallMessageHandler</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpointer.xml">QPointer</db:link> is changed to use <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link>. The old guard mechanism has been removed, which causes a slight change in behavior when using <db:link xlink:href="qpointer.xml">QPointer</db:link>. In earlier Qt versions, if a <db:link xlink:href="qpointer.xml">QPointer</db:link> is used on a <db:link xlink:href="qwidget.xml">QWidget</db:link> (or a subclass of <db:link xlink:href="qwidget.xml">QWidget</db:link>), the <db:link xlink:href="qpointer.xml">QPointer</db:link> was cleared by the <db:link xlink:href="qwidget.xml">QWidget</db:link> destructor. In Qt 5, the <db:link xlink:href="qpointer.xml">QPointer</db:link> is cleared by the <db:link xlink:href="qobject.xml">QObject</db:link> destructor along with the <db:link xlink:href="qweakpointer.xml">QWeakPointer</db:link>s. Any <db:link xlink:href="qpointer.xml">QPointer</db:link> tracking a widget is not cleared before the <db:link xlink:href="qwidget.xml">QWidget</db:link> destructor destroys the children for the widget being tracked.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">Qt::WFlags</db:link> is deprecated, use <db:link xlink:href="qt.xml#WindowType-enum">Qt::WindowFlags</db:link> instead. This typedef dates from the Qt 1 days, and such abbreviations are not current Qt style.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qt.xml#HANDLE-typedef">Qt::HANDLE</db:link> typedef is now defined as void * on all platforms.</db:para>
</db:listitem>
<db:listitem>
<db:para>The non-atomic convenience methods of <db:link xlink:href="qatomicint.xml">QAtomicInt</db:link> and <db:link xlink:href="qatomicpointer.xml">QAtomicPointer</db:link> (that is, operator=, operator int, operator T*, operator!, operator==, operator!=, and operator-&gt;) have been removed as they performed implicit loads and stores of unspecified memory ordering. Code dealing with loading and storing is expected to use load(), loadAquire(), store(), and storeRelease(), instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The return type of QFlags&lt;Enum&gt;::operator int() matches the enum's underlying type (signed or unsigned) instead of always being int. This allows <db:link xlink:href="qflags.xml">QFlags</db:link> over enums of the unsigned type (for example, <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButton</db:link>).</db:para>
</db:listitem>
<db:listitem>
<db:para>Because of major changes in the behavior of <db:link xlink:href="qtextboundaryfinder.xml#boundaryReasons">QTextBoundaryFinder::boundaryReasons</db:link>(), the StartWord and EndWord enum values were replaced with the StartOfItem and EndOfItem values to enforce revision of the affected code.</db:para>
</db:listitem>
<db:listitem>
<db:para>A number of functions in &lt;QtAlgorithms&gt; are deprecated. Use the implementations available in the STL, as described in <db:link xlink:href="qtalgorithms.xml#porting-guidelines">Porting Guidelines</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>setSharable() and isSharable() in Qt containers are deprecated and will be removed in Qt 6. You should not use them in new applications. If you used them in existing applications, even though they are not documented, you should port away from them.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="changes-to-qaction">
<db:title>Changes to QAction</db:title>
<db:para>The Softkeys API is removed, so the following functions and enums are removed:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QAction::setSoftKeyRole()</db:para>
</db:listitem>
<db:listitem>
<db:para>QAction::softKeyRole()</db:para>
</db:listitem>
<db:listitem>
<db:para>QAction::SoftKeyRole</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::WA_MergeSoftkeys</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::WA_MergeSoftkeysRecursively</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::WindowSoftkeysVisibleHint</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::WindowSoftkeysRespondHint</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qchar">
<db:title>Changes to QChar</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QChar::NoCategory is removed. The <db:link xlink:href="qchar.xml#Category-enum">QChar::Other_NotAssigned</db:link> enum value is returned for unassigned codepoints now.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qchar.xml#Joining-enum" role="deprecated">QChar::Joining</db:link> and <db:link xlink:href="qchar.xml#joining" role="deprecated">QChar::joining</db:link>() are deprecated. Use the <db:link xlink:href="qchar.xml#JoiningType-enum">QChar::JoiningType</db:link> enum and <db:link xlink:href="qchar.xml#joiningType">QChar::joiningType</db:link>() function instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qcoreapplication">
<db:title>Changes to QCoreApplication</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcoreapplication.xml#translate">QCoreApplication::translate</db:link>() no longer returns the source text if the translation is empty. Use the Qt Linguist Release tool (lrelease -removeidentical) instead for optimization.</db:para>
</db:listitem>
<db:listitem>
<db:para>QCoreApplication::setEventFilter() and QApplication::x11EventFilter/macEventFilter/qwsEventFilter/winEventFilter are replaced with <db:link xlink:href="qcoreapplication.xml#installNativeEventFilter">QCoreApplication::installNativeEventFilter</db:link>() and <db:link xlink:href="qcoreapplication.xml#removeNativeEventFilter">QCoreApplication::removeNativeEventFilter</db:link>() for an API much closer to <db:link xlink:href="qevent.xml">QEvent</db:link> filtering.</db:para>
<db:note>
<db:para>The native events that can be filtered this way depend on the <db:link xlink:href="qpa.xml">QPA</db:link> backend chosen at runtime. On X11, XEvents are replaced with xcb_generic_event_t due to the switch to XCB, which requires porting the application code to XCB as well.</db:para>
</db:note>
</db:listitem>
<db:listitem>
<db:para>QCoreApplication::Type and QApplication::type() are removed. These Qt 3 legacy application types did not match the application types available in Qt 5. Use qobject_cast instead to dynamically find out the exact application type.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcoreapplication.xml#hasPendingEvents" role="deprecated">QCoreApplication::hasPendingEvents</db:link> and <db:link xlink:href="qabstracteventdispatcher.xml#hasPendingEvents" role="deprecated">QAbstractEventDispatcher::hasPendingEvents</db:link> are deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qevent">
<db:title>Changes to QEvent</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QEvent::AccessibilityPrepare, QEvent::AccessibilityHelp, and QEvent::AccessibilityDescription are removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchCancel</db:link> is introduced to use it on systems where it makes sense to differentiate between a regular <db:link xlink:href="qevent.xml#Type-enum">QEvent::TouchEnd</db:link> and abrupt touch sequence cancellations caused by the compositor. For example, when a swype gesture is recognized.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qfile">
<db:title>Changes to QFile</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">QFile::setEncodingFunction()</db:link> and <db:link xlink:href="">QFile::setDecodingFunction()</db:link> are deprecated.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfile.xml#encodeName">QFile::encodeName</db:link>() and <db:link xlink:href="qfile.xml#decodeName">QFile::decodeName</db:link>() are now hard-coded to operate on <db:link xlink:href="qstring.xml#fromLocal8Bit">QString::fromLocal8Bit</db:link>() and <db:link xlink:href="">QString::toLocal8Bit()</db:link> only. The old behavior is still possible using <db:link xlink:href="qtextcodec.xml#setCodecForLocale">QTextCodec::setCodecForLocale</db:link>(), but the new code should not make assumptions about the file system encoding and older code should remove such assumptions.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qfont">
<db:title>Changes to QFont</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QFont::handle() is removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qfont.xml#rawName" role="deprecated">QFont::rawName</db:link>() and <db:link xlink:href="qfont.xml#setRawName" role="deprecated">QFont::setRawName</db:link>() are deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qmetatype">
<db:title>Changes to QMetaType</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QMetaType::construct() is renamed as <db:link xlink:href="qmetatype.xml#create">QMetaType::create</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>QMetaType::unregisterType() is removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml">QMetaType</db:link> now records whether the type argument inherits <db:link xlink:href="qobject.xml">QObject</db:link>. Such information can be useful for scripting APIs, so that custom <db:link xlink:href="qobject.xml">QObject</db:link> subclasses are treated as <db:link xlink:href="qobject.xml">QObject</db:link> pointers. For example, in <db:link xlink:href="qtscript-index.xml">Qt Script</db:link> this means <db:link xlink:href="qscriptvalue.xml#isQObject">QScriptValue::isQObject</db:link>() can be true, where it was false before.</db:para>
</db:listitem>
<db:listitem>
<db:para>QMetaType::QWidgetStar is removed. Use <db:link xlink:href="">qMetaTypeId&lt;QWidget*&gt;()</db:link> or <db:link xlink:href="qvariant.xml#canConvert">QVariant::canConvert&lt;QWidget*&gt;</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>Q_DECLARE_METATYPE(type) now requires type to be fully defined. This means, Q_DECLARE_METATYPE(QSharedPointer&lt;t&gt;) and Q_DECLARE_METATYPE(QWeakPointer&lt;t&gt;) also need type to be fully defined. In cases where a forward declared type is needed as a meta-type, use Q_DECLARE_OPAQUE_POINTER(type).</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qmetamethod">
<db:title>Changes to QMetaMethod</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QMetaMethod::signature() is renamed as <db:link xlink:href="qmetamethod.xml#methodSignature">QMetaMethod::methodSignature</db:link>(), and the return type is changed to <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. This change is to enable generating the signature string on demand, rather than storing it in the meta-data.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetamethod.xml#typeName">QMetaMethod::typeName</db:link>() no longer returns an empty string if the return type is void, instead it returns &quot;void&quot;. The recommended way of checking whether a method returns void is to compare the return value of <db:link xlink:href="qmetamethod.xml#returnType">QMetaMethod::returnType</db:link>() with <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Void</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qobject">
<db:title>Changes to QObject</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#connectNotify">QObject::connectNotify</db:link>() and <db:link xlink:href="qobject.xml#disconnectNotify">QObject::disconnectNotify</db:link>() now need a <db:link xlink:href="qmetamethod.xml">QMetaMethod</db:link> argument that identifies the signal, rather than a const char pointer.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#trUtf8" role="deprecated">QObject::trUtf8</db:link>() and QCoreApplication::Encoding are deprecated. Qt assumes that the source code is encoded in UTF-8.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qvariant">
<db:title>Changes to QVariant</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qvariant.xml">QVariant</db:link> constructor which takes <db:link xlink:href="qt.xml#GlobalColor-enum">Qt::GlobalColor</db:link> argument is removed. Code constructing such variants must explicitly call <db:link xlink:href="qcolor.xml">QColor</db:link> constructor now. For example, instead of QVariant(Qt::red), use QVariant(QColor(Qt::red)) to create a <db:link xlink:href="qvariant.xml">QVariant</db:link> instance.</db:para>
</db:listitem>
<db:listitem>
<db:para>Implicit creation of <db:link xlink:href="qvariant.xml">QVariant</db:link> objects from the enum values <db:link xlink:href="qt.xml#BrushStyle-enum">Qt::BrushStyle</db:link>, <db:link xlink:href="qt.xml#PenStyle-enum">Qt::PenStyle</db:link>, and <db:link xlink:href="qt.xml#CursorShape-enum">Qt::CursorShape</db:link> has been removed. Create objects explicitly or use static_cast&lt;int&gt;(Qt::SolidLine) to create a <db:link xlink:href="qvariant.xml">QVariant</db:link> of type int with the same value as the enum.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qabstracteventdispatcher">
<db:title>Changes to QAbstractEventDispatcher</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The signature for the pure-virtual registerTimer() function is changed. All subclasses of <db:link xlink:href="qabstracteventdispatcher.xml">QAbstractEventDispatcher</db:link> must re-implement the function with this new signature:</db:para>
<db:programlisting language="cpp">virtual void registerTimer(int timerId, int interval,Qt::TimerType timerType, QObject *object) = 0;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstracteventdispatcher-timerinfo.xml">QAbstractEventDispatcher::TimerInfo</db:link> is no longer a typedef of QPair&lt;int, int&gt;. It is now a struct with 3 members: int timerId, int interval, and Qt::TimerType timerType. Update the <db:link xlink:href="qabstracteventdispatcher.xml#registeredTimers">QAbstractEventDispatcher::registeredTimers</db:link>() function with this change.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qdir">
<db:title>Changes to QDir</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The convertSeparators() function is removed. Use <db:link xlink:href="qdir.xml#toNativeSeparators">QDir::toNativeSeparators</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QDir::NoDotAndDotDot enum value is removed. Use <db:link xlink:href="qdir.xml#Filter-enum">QDir::NoDot</db:link> or <db:link xlink:href="qdir.xml#Filter-enum">QDir::NoDotDot</db:link> instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qlocale">
<db:title>Changes to QLocale</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:link xlink:href="qlocale.xml">QLocale</db:link> data has been updated to CLDR 22.1. The historical language and country names were updated to their modern values and some deprecated names were dropped or mapped to their modern alternatives.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qlocale.xml#toShort">QLocale::toShort</db:link>(), <db:link xlink:href="qlocale.xml#toUShort">QLocale::toUShort</db:link>(), <db:link xlink:href="qlocale.xml#toInt">QLocale::toInt</db:link>(), <db:link xlink:href="qlocale.xml#toUInt">QLocale::toUInt</db:link>(), <db:link xlink:href="qlocale.xml#toLongLong">QLocale::toLongLong</db:link>(), and <db:link xlink:href="qlocale.xml#toULongLong">QLocale::toULongLong</db:link>() functions no longer take the argument for base. They localize base 10 conversions. To convert other bases, use the <db:link xlink:href="qstring.xml">QString</db:link> functions instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qabstractitemmodel">
<db:title>Changes to QAbstractItemModel</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml#beginMoveRows">QAbstractItemModel::beginMoveRows</db:link>() no longer emits the layoutAboutToBeChanged signal, and <db:link xlink:href="qabstractitemmodel.xml#endMoveRows">QAbstractItemModel::endMoveRows</db:link>() no longer emits the layoutChanged signal. All proxy models must connect to (and disconnect from) the <db:link xlink:href="qabstractitemmodel.xml#rowsAboutToBeMoved">QAbstractItemModel::rowsAboutToBeMoved</db:link> and <db:link xlink:href="qabstractitemmodel.xml#rowsMoved">QAbstractItemModel::rowsMoved</db:link> signals.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml#sibling">QAbstractItemModel::sibling</db:link>() is virtual now to allow implementations to optimize based on internal data.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractitemmodel.xml#createIndex">QAbstractItemModel::createIndex</db:link>() method now only provides the void* and quintptr overloads, making calls with a literal 0 (createIndex(row, col, 0)) ambiguous. Either cast quintptr(0) or omit the third argument to get the void* overload.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QAbstractItemModel::setRoleNames()</db:link> is deprecated. Use <db:link xlink:href="qabstractitemmodel.xml#roleNames">QAbstractItemModel::roleNames</db:link>() instead. <db:link xlink:href="qabstractitemmodel.xml#roleNames">QAbstractItemModel::roleNames</db:link>() is virtual now to allow a consistent API with the rest of <db:link xlink:href="qabstractitemmodel.xml">QAbstractItemModel</db:link>. Reimplementing the virtual methods to provide the elements is preferred to setting those directly.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qstring">
<db:title>Changes to QString</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link> constructors now use a negative size to indicate that the string passed is null-terminated (a null-terminated array of <db:link xlink:href="qchar.xml">QChar</db:link>, in the case of <db:link xlink:href="qstring.xml">QString</db:link>). In Qt 4, negative sizes were ignored, which resulted in empty <db:link xlink:href="qstring.xml">QString</db:link> and <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. The size argument now has a default value of -1, replacing the separate constructors that did the same.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#mid">QString::mid</db:link>(), <db:link xlink:href="qstring.xml#midRef">QString::midRef</db:link>(), and <db:link xlink:href="qbytearray.xml#mid">QByteArray::mid</db:link>() now return an empty QString, QStringRef, and QByteArray respectively, if the position passed is equal to the length (that is, right after the last character or byte). In Qt 4, they returned a null QString or a null QStringRef.</db:para>
</db:listitem>
<db:listitem>
<db:para>The following <db:link xlink:href="qstring.xml">QString</db:link> functions use the C locale instead of the default or system locale:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toLongLong">toLongLong</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toULongLong">toULongLong</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toLong">toLong</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toULong">toULong</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toInt">toInt</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toUInt">toUInt</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toShort">toShort</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toUShort">toUShort</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toDouble">toDouble</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qstring.xml#toFloat">toFloat</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>This is to guarantee consistent default conversion of strings. For locale-aware conversions use the equivalent <db:link xlink:href="qlocale.xml">QLocale</db:link> functions.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qdate-qtime-and-qdatetime">
<db:title>Changes to QDate, QTime, and QDateTime</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> only implements the Gregorian calendar, and the switch to the Julian calendar before 1582 has been removed. This means all <db:link xlink:href="qdate.xml">QDate</db:link> functions return different results for dates prior to 15 October 1582, and there is no longer a gap between 4 October 1582 and 15 October 1582.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QDate::setYMD()</db:link> is deprecated, use <db:link xlink:href="qdate.xml#setDate">QDate::setDate</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>Adding days to a null <db:link xlink:href="qdate.xml">QDate</db:link> or seconds to a null <db:link xlink:href="qtime.xml">QTime</db:link> will no longer return a valid <db:link xlink:href="qdate.xml">QDate</db:link>/<db:link xlink:href="qtime.xml">QTime</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qdate.xml#addDays">QDate::addDays</db:link>() and <db:link xlink:href="qdatetime.xml#addDays">QDateTime::addDays</db:link>() functions now take a qint64 argument, and the <db:link xlink:href="qdate.xml#daysTo">QDate::daysTo</db:link>() and <db:link xlink:href="qdatetime.xml#daysTo">QDateTime::daysTo</db:link>() functions now return a qint64 value.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdate.xml">QDate</db:link> and <db:link xlink:href="qtime.xml">QTime</db:link> are the userProperty for the <db:link xlink:href="qtimeedit.xml">QTimeEdit</db:link> and <db:link xlink:href="qdateedit.xml">QDateEdit</db:link> classes, insted of <db:link xlink:href="qdatetime.xml">QDateTime</db:link> as it was for the 4.7 and 4.8 releases. The USER property for these classes was removed before Qt 4.7.0 and added again in Qt 5.0.</db:para>
</db:listitem>
<db:listitem>
<db:para>The serialization behavior for <db:link xlink:href="qdatetime.xml">QDateTime</db:link> is reverted to pre-Qt 5, because <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> is the local time (that is, ymd hms) regardless of the underlying system time, time zone, or changes in the system zone. Therefore, the consistent behavior when serialising is to save and restore as the local time and not its UTC equivalent. This means that the <db:link xlink:href="qdatastream.xml">QDataStream</db:link> version is 14 since Qt 5.1.</db:para>
</db:listitem>
<db:listitem>
<db:para>The supported date range in <db:link xlink:href="qdatetime.xml">QDateTime</db:link> has been reduced to about +/- 292 million years, the range supported by the number of msecs since the Unix epoch of 1 Jan 1970 as stored in a qint64, and as able to be used in <db:link xlink:href="qdatetime.xml#setMSecsSinceEpoch">QDateTime::setMSecsSinceEpoch</db:link>() and <db:link xlink:href="qdatetime.xml#toMSecsSinceEpoch">QDateTime::toMSecsSinceEpoch</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qdate.xml#fromString">QDate::fromString</db:link>() and <db:link xlink:href="qdatetime.xml#fromString">QDateTime::fromString</db:link>() require non-numeric date component separators when parsing <db:link xlink:href="qt.xml#DateFormat-enum">Qt::ISODate</db:link>. A string like <db:emphasis>2000901901</db:emphasis> will no longer be recognized as a valid ISO date, whereas <db:emphasis>2000/01/01</db:emphasis> will, even though it differs from the ISO format <db:emphasis>2000-01-01</db:emphasis>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qtextcodec">
<db:title>Changes to QTextCodec</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QTextCodec::codecForCStrings() and QTextCodec::setCodecForCStrings() are removed as they were creating uncertainty/bugs in using <db:link xlink:href="qstring.xml">QString</db:link> easily and (to a lesser extent) performance issues.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTextCodec::codecForTr() and QTextCodec::setCodecForTr() are removed.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qurl">
<db:title>Changes to QUrl</db:title>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> changed considerably in Qt 5 to comply better with the URL specifications and with brokenness out there. The following list summarizes the most important functional changes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml#setPath">QUrl::setPath</db:link>() no longer handles relative paths. They are by definition invalid. Use the <db:link xlink:href="qurl.xml#UrlFormattingOption-enum">QUrl::NormalizePathSegments</db:link> flag to remove /./ or /../ sequences as much as possible. It will not remove /../ from the beginning of the path.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> has been changed to operate only on percent-encoded forms. Fully-decoded forms where the percent character stands for itself, can no longer be encoded, as the getters and setters with <db:emphasis>encoded</db:emphasis> in the name are deprecated (except <db:link xlink:href="qurl.xml#toEncoded">QUrl::toEncoded</db:link>() and <db:link xlink:href="qurl.xml#fromEncoded">QUrl::fromEncoded</db:link>()).</db:para>
<db:para>The most notable difference with this change is when dealing with <db:link xlink:href="qurl.xml#toString">QUrl::toString</db:link>(). In earlier Qt versions, this function would return percent characters in the URL, but now it returns <db:emphasis>%25</db:emphasis> like <db:link xlink:href="qurl.xml#toEncoded">QUrl::toEncoded</db:link>() does.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> no longer decodes %7B and %7D to &quot;{&quot; and &quot;}&quot; in the output of <db:link xlink:href="qurl.xml#toString">QUrl::toString</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> now defaults to decoded mode in the getters and setters for userName, password, host, topLevelDomain, path and fileName. This means a % in one of those fields is now returned (or set) as % rather than %25. If the former behavior was expected, pass PrettyDecoded to the getter and TolerantMode to the setter.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> no longer has functions that handle individual query items and query delimiters, such as addQueryItem() and queryPairDelimiter(). These have been moved to the new <db:link xlink:href="qurlquery.xml">QUrlQuery</db:link> class.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> no longer considers all delimiter characters equivalent to their percent-encoded forms. <db:link xlink:href="qurl.xml">QUrl</db:link> and <db:link xlink:href="qurlquery.xml">QUrlQuery</db:link> always keep all delimiters exactly as they were in the original URL text.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> no longer supports <db:link xlink:href="qurl.xml#ComponentFormattingOption-enum">QUrl::FullyDecoded</db:link> mode in <db:link xlink:href="qurl.xml#authority">QUrl::authority</db:link>() and <db:link xlink:href="qurl.xml#userInfo">QUrl::userInfo</db:link>(), nor <db:link xlink:href="qurl.xml#ParsingMode-enum">QUrl::DecodedMode</db:link> in <db:link xlink:href="qurl.xml#setAuthority">QUrl::setAuthority</db:link>() and <db:link xlink:href="qurl.xml#setUserInfo">QUrl::setUserInfo</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qurl.xml">QUrl</db:link> no longer decodes %23 found in the fragment to &quot;#&quot; in the output of <db:link xlink:href="qurl.xml#toString">QUrl::toString</db:link> (FullyEncoded) or <db:link xlink:href="qurl.xml#toEncoded">QUrl::toEncoded</db:link>().</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-to-qt-concurrent">
<db:title>Changes to Qt Concurrent</db:title>
<db:para><db:link xlink:href="qtconcurrent-index.xml">Qt Concurrent</db:link> has been moved from <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> to its own module. To link against the Qt Core module, add this line to the project file:</db:para>
<db:programlisting language="cpp">QT += concurrent
</db:programlisting>
<db:note>
<db:para>The QtConcurrent::Exception class is renamed <db:link xlink:href="qexception.xml">QException</db:link> and QtConcurrent::UnhandledException class is renamed <db:link xlink:href="qunhandledexception.xml">QUnhandledException</db:link>. They remain in Qt Core.</db:para>
</db:note>
</db:section>
<db:section xml:id="changes-to-qt-gui">
<db:title>Changes to Qt GUI</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpen.xml">QPen</db:link> now has a default width of 1 instead of 0. Thus, it is no longer <db:link xlink:href="qpen.xml#isCosmetic">cosmetic</db:link> by default.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaccessibleactioninterface.xml">QAccessibleActionInterface</db:link> is now based on providing a list of action names. All functions have been changed to take arguments of type string insted of int.</db:para>
</db:listitem>
<db:listitem>
<db:para>The constructor of <db:link xlink:href="qaccessibleevent.xml">QAccessibleEvent</db:link> does not need the child parameter anymore, and the corresponding QAccessibleEvent::child() function is removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>The constructor of <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link> does not need the hiResGlobalPos argument anymore, as all coordinates are floating point-based now.</db:para>
</db:listitem>
<db:listitem>
<db:para>QIconEngineV2 is now merged into <db:link xlink:href="qiconengine.xml">QIconEngine</db:link>. Update your sources to use QIconEngine instead of QIconEngineV2.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsound.xml">QSound</db:link> is moved to Qt Multimedia from Qt GUI.</db:para>
</db:listitem>
<db:listitem>
<db:para>QDesktopServices::storageLocation() and QDesktopServices::displayName() are replaced by <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>() and <db:link xlink:href="qstandardpaths.xml#displayName">QStandardPaths::displayName</db:link>() respectively. They are now in the <db:link xlink:href="qtcore-index.xml">Qt Core</db:link> module. Make sure to read the <db:link xlink:href="">QDesktopServices::storageLocation()</db:link> documentation when porting from <db:link xlink:href="">QDesktopServices::DataLocation</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>QPixmap::grabWindow() and QPixmap::grabWidget() are removed. Use <db:link xlink:href="qscreen.xml#grabWindow">QScreen::grabWindow</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The session management API has been simplified. The commitData() function is removed and replaced by the signal <db:link xlink:href="qguiapplication.xml#commitDataRequest">QGuiApplication::commitDataRequest</db:link>(). <db:link xlink:href="qapplication.xml">QApplication</db:link> and <db:link xlink:href="qguiapplication.xml">QGuiApplication</db:link> will emit this signal from 5.2 onward on supported platforms (Linux and Windows).</db:para>
</db:listitem>
<db:listitem>
<db:para>QWidget *widget() is replaced with QObject *target() to avoid <db:link xlink:href="qwidget.xml">QWidget</db:link> dependencies.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="changes-to-qaccessibleinterface">
<db:title>Changes to QAccessibleInterface</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The <db:emphasis>child</db:emphasis> integer parameters are removed to bring <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> closer to IAccessible2. This means that the following functions lose the integer parameter:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>text(Text t, int child) is now <db:link xlink:href="qaccessibleinterface.xml#text">text</db:link>(Text t)</db:para>
</db:listitem>
<db:listitem>
<db:para>rect(int child) is now <db:link xlink:href="qaccessibleinterface.xml#rect">rect</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>setText(Text t, int child, const QString &amp;text) is now <db:link xlink:href="qaccessibleinterface.xml#setText">setText</db:link>(Text t, const QString &amp;text)</db:para>
</db:listitem>
<db:listitem>
<db:para>role(int child) is now <db:link xlink:href="qaccessibleinterface.xml#role">role</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>state(int child) is now <db:link xlink:href="qaccessibleinterface.xml#state">state</db:link>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
<db:listitem>
<db:para>navigate() is replaced with <db:link xlink:href="qaccessibleinterface.xml#parent">parent</db:link>() and <db:link xlink:href="qaccessibleinterface.xml#child">child</db:link>() to navigate the hierarchy.</db:para>
</db:listitem>
<db:listitem>
<db:para>relationTo() is replaced with <db:link xlink:href="qaccessibleinterface.xml#relations">relations</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>QAccessibleInterface::userActionCount(), QAccessibleInterface::actionText(), and QAccessibleInterface::doAction() are removed. We recommend using the <db:link xlink:href="qaccessibleinterface.xml">QAccessibleInterface</db:link> subclasses to implement the <db:link xlink:href="qaccessibleactioninterface.xml">QAccessibleActionInterface</db:link> instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qimage">
<db:title>Changes to QImage</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qimage.xml#fill">QImage::fill</db:link>() on an image with format Format_RGB888 now expects image data in RGB layout as opposed to BGR layout. This is to ensure consistency with RGB32 and other 32-bit formats.</db:para>
</db:listitem>
<db:listitem>
<db:para>The behavior of <db:link xlink:href="qimage.xml#load">QImage::load</db:link>(), <db:link xlink:href="qimage.xml#loadFromData">QImage::loadFromData</db:link>(), <db:link xlink:href="qpixmap.xml#load">QPixmap::load</db:link>(), and <db:link xlink:href="qpixmap.xml#loadFromData">QPixmap::loadFromData</db:link>() on a non-null image changed so that if the functions fail to load the image (return false), the the existent image data is invalidated, so that isNull() is guaranteed to return true in this case.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qpainter">
<db:title>Changes to QPainter</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> does not support uniting clipped regions anymore. Use <db:link xlink:href="qregion.xml#united">QRegion::united</db:link>() instead to unite clips and pass the result to <db:link xlink:href="qpainter.xml">QPainter</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qpainter.xml">QPainter</db:link> fill rules when not using antialiased painting have changed so that the aliased and antialiased coordinate systems match. There used to be an offset of slightly less than half a pixel when doing sub-pixel rendering, in order to be consistent with the old X11 paint engine. The new behavior should be more predictable and give the same consistent rounding for images and pixmaps as for paths and rectangle filling. To get the old behavior, set the <db:link xlink:href="qpainter.xml#RenderHint-enum">QPainter::Qt4CompatiblePainting</db:link> render hint.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qtouchevent">
<db:title>Changes to QTouchEvent</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="">QTouchEvent::DeviceType</db:link> and <db:link xlink:href="">QTouchEvent::deviceType()</db:link> are deprecated as <db:link xlink:href="qtouchdevice.xml">QTouchDevice</db:link> provides a better way to identify and access the device from which the events originate.</db:para>
</db:listitem>
<db:listitem>
<db:para>The constructor now takes a <db:link xlink:href="qtouchdevice.xml">QTouchDevice</db:link> pointer instead of DeviceType value.</db:para>
</db:listitem>
<db:listitem>
<db:para>TouchPointStateMask and TouchPointPrimary are removed from the <db:link xlink:href="qt.xml#TouchPointState-enum">Qt::TouchPointStates</db:link> enum.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTouchEvent::TouchPoint::isPrimary() is removed.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-to-qt-widgets">
<db:title>Changes to Qt Widgets</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qitemeditorfactory.xml#createEditor">QItemEditorFactory::createEditor</db:link>() and <db:link xlink:href="qitemeditorfactory.xml#valuePropertyName">QItemEditorFactory::valuePropertyName</db:link>() signatures are changed to take arguments of type int instead of <db:link xlink:href="qvariant.xml#Type-enum" role="deprecated">QVariant::Type</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>QInputContext is removed as related getter and setter functions in <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qapplication.xml">QApplication</db:link> are removed. Input contexts are now platform-specific.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QInputDialog::getInteger()</db:link> is deprecated. Use <db:link xlink:href="qinputdialog.xml#getInt">QInputDialog::getInt</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QStyleOption*V{2,3,4} classes are removed, and their members are merged with the respective base classes. The removed classes are left as typedefs for binary compatibility.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> and its derived classes can no longer pass a <db:link xlink:href="qgraphicsscene.xml">QGraphicsScene</db:link> to the item's constructor. Construct the item without a scene and call <db:link xlink:href="qgraphicsscene.xml#addItem">QGraphicsScene::addItem</db:link>() to add the item to the scene.</db:para>
</db:listitem>
<db:listitem>
<db:para>QProxyModel is removed. Use <db:link xlink:href="qabstractproxymodel.xml">QAbstractProxyModel</db:link> and the related classes instead. A copy of QProxyModel is available in the <db:link xlink:href="http://wiki.qt.io/Qt_5_UI_Helpers">Ui Helpers</db:link> repository.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="changes-to-qapplication">
<db:title>Changes to QApplication</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QApplication::setGraphicsSystem() is removed, because the introduction of <db:link xlink:href="qpa.xml">QPA</db:link> made it redundant.</db:para>
</db:listitem>
<db:listitem>
<db:para>QApplication::commitData and QApplication::saveState virtual methods that were used for session management are removed. Connect to the <db:link xlink:href="qguiapplication.xml#commitDataRequest">QApplication::commitDataRequest</db:link> and <db:link xlink:href="qguiapplication.xml#saveStateRequest">QApplication::saveStateRequest</db:link> signals instead. Use <db:link xlink:href="qguiapplication.xml#isSavingSession">QApplication::isSavingSession</db:link>() if the <db:link xlink:href="qwidget.xml#closeEvent">QWidget::closeEvent</db:link> if your window needs to know whether it is being called during shutdown.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qstyle">
<db:title>Changes to QStyle</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>QStyle::standardIconImplementation() and QStyle::layoutSpacingImplementation() are removed, and the <db:link xlink:href="qstyle.xml#standardIcon">QStyle::standardIcon</db:link>() and <db:link xlink:href="qstyle.xml#layoutSpacing">QStyle::layoutSpacing</db:link>() functions are made pure virtual now. The removed functions were introduced in Qt 4 for binary compatibility reasons.</db:para>
</db:listitem>
<db:listitem>
<db:para>QMotifStyle, QPlastiqueStyle, QCleanlooksStyle, and QCDEStyle are replaced with a new <db:emphasis>fusion</db:emphasis> style. If your application depends on any of these removed styles, you can either use the <db:link xlink:href="http://code.qt.io/cgit/qt/qtstyleplugins.git/">qtstyleplugins</db:link> project to get these styles or update your application to use the new fusion style. For more details about this change, see <db:link xlink:href="https://blog.qt.io/blog/2012/10/30/cleaning-up-styles-in-qt5-and-adding-fusion/">https://blog.qt.io/blog/2012/10/30/cleaning-up-styles-in-qt5-and-adding-fusion/</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The following <db:link xlink:href="qstyle.xml">QStyle</db:link> implementations have been made internal:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>QFusionStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QGtkStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QMacStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QWindowsCEStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QWindowsMobileStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QWindowsStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QWindowsVistaStyle</db:para>
</db:listitem>
<db:listitem>
<db:para>QWindowsXPStyle</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Instead of creating instances or inheriting these classes directly, use:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qstylefactory.xml">QStyleFactory</db:link> for creating instances of specific styles.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qproxystyle.xml">QProxyStyle</db:link> for customizing existing style implementations.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcommonstyle.xml">QCommonStyle</db:link> as a base for implementing full custom styles.</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qheaderview">
<db:title>Changes to QHeaderView</db:title>
<db:para>The following functions are deprecated:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>void setMovable(bool movable) - Use <db:link xlink:href="qheaderview.xml#setSectionsMovable">QHeaderView::setSectionsMovable</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>bool isMovable() const - Use <db:link xlink:href="qheaderview.xml#sectionsMovable">QHeaderView::sectionsMovable</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>void setClickable(bool clickable) - Use <db:link xlink:href="qheaderview.xml#setSectionsClickable">QHeaderView::setSectionsClickable</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>bool isClickable() const - Use <db:link xlink:href="qheaderview.xml#sectionsClickable">QHeaderView::sectionsClickable</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>void setResizeMode(int logicalindex, ResizeMode mode) - Use <db:link xlink:href="qheaderview.xml#setSectionResizeMode">QHeaderView::setSectionResizeMode</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>ResizeMode resizeMode(int logicalindex) const - Use <db:link xlink:href="qheaderview.xml#sectionResizeMode">QHeaderView::sectionResizeMode</db:link>() instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qabstractitemview">
<db:title>Changes to QAbstractItemView</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The derived classes now emit the clicked() signal on the left mouse click only, instead of all mouse clicks.</db:para>
</db:listitem>
<db:listitem>
<db:para>The virtual <db:link xlink:href="qabstractitemview.xml#dataChanged">QAbstractItemView::dataChanged</db:link>() function signature now includes the roles that have changed. The signature is consistent with the dataChanged() signal in the model.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qcolordialog">
<db:title>Changes to QColorDialog</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qcolordialog.xml#customColor">QColorDialog::customColor</db:link>() now returns a <db:link xlink:href="qcolor.xml">QColor</db:link> value instead of QRgb.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qcolordialog.xml#setCustomColor">QColorDialog::setCustomColor</db:link>() and <db:link xlink:href="qcolordialog.xml#setStandardColor">QColorDialog::setStandardColor</db:link>() now need a <db:link xlink:href="qcolor.xml">QColor</db:link> value as their second parameter instead of QRgb.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-to-qt-webkit">
<db:title>Changes to Qt WebKit</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The WebKit module in Qt is now split in two modules, webkit and webkitwidgets, in order to allow the dependency of the widgets module to be optional. The benefits will only be available once the QQuickWebView API is made public through C++ in a future version. The webkitwidgets module adds the webkit module automatically to the project, so in your application's project file, QT += webkit should now be modified to:</db:para>
<db:programlisting language="cpp">QT += webkitwidgets
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>The same applies to the module include, #include &lt;QtWebKit/QtWebKit&gt; should be modified to:</db:para>
<db:programlisting language="cpp">#include &lt;QtWebKitWidgets/QtWebKitWidgets&gt;
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>A consequence of the module split is that classes of the <db:link xlink:href="http://doc.qt.io/archives/qt-5.3/qtwebkit-index.html">Qt WebKit</db:link> API aren't all in the new module, so for a better compatibility of your application with both Qt4 and Qt5, #include &lt;QtWebKit/QWebPage&gt;, for example, should be included directly as:</db:para>
<db:programlisting language="cpp">#include &lt;QWebPage&gt;
</db:programlisting>
<db:para>The include path will take care of selecting the right module.</db:para>
</db:listitem>
<db:listitem>
<db:para>The qwebkitversion.h header has been renamed to q<db:emphasis role="bold">t</db:emphasis>webkitversion.h to match other Qt modules, and part of its contents has been moved to qwebkitglobal.h. #include &lt;qwebkitversion.h&gt; should be replaced with two includes:</db:para>
<db:programlisting language="cpp">#include &lt;qtwebkitversion.h&gt;
#include &lt;qwebkitglobal.h&gt;
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qt-print-support">
<db:title>Changes to Qt Print Support</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The QPageSetupDialog::PageSetupDialogOption enum and the corresponding set and get functions, QPageSetupDialog::options() and QPageSetupDialog::setOptions() are removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for printing PostScript files has been removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QAbstractPageSetupDialog class is removed. Use <db:link xlink:href="qprintdialog.xml">QPrintDialog</db:link> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qprintengine.xml#PrintEnginePropertyKey-enum">QPrintEngine::PrintEnginePropertyKey</db:link> enum value PPK_SuppressSystemPrintStatus is removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qprinter.xml">QPrinter</db:link> no longer allows you to set an invalid printer name.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qt-network">
<db:title>Changes to Qt Network</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The QSsl::TlsV1 enum value is renamed as <db:link xlink:href="qssl.xml#SslProtocol-enum">QSsl::TlsV1_0</db:link>.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QHttp, QHttpHeader, QHttpResponseHeader, and QHttpRequestHeader classes are removed. Use <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QFtp and QUrlInfo classes are no longer exported. Use <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instead. Programs that require raw FTP or HTTP streams can use the <db:link xlink:href="https://codereview.qt-project.org/#/admin/projects/qt/qtftp">Qt FTP</db:link> and <db:link xlink:href="https://codereview.qt-project.org/#/admin/projects/qt/qthttp">Qt HTTP</db:link> compatibility add-on modules that provide the QFtp and QHttp classes as they existed in Qt 4.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qabstractsocket.xml#connectToHost">QAbstractSocket::connectToHost</db:link>() and <db:link xlink:href="qabstractsocket.xml#disconnectFromHost">QAbstractSocket::disconnectFromHost</db:link>() are virtual now, and QAbstractSocket::connectToHostImplementation() and QAbstractSocket::disconnectFromHostImplementation() are removed.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtcpserver.xml#incomingConnection">QTcpServer::incomingConnection</db:link>() now takes arguments of type qintptr instead of an int.</db:para>
</db:listitem>
<db:listitem>
<db:para>QNetworkConfiguration::bearerName() is removed. Use the <db:link xlink:href="qnetworkconfiguration.xml#bearerTypeName">bearerTypeName</db:link>() instead.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="changes-to-qsslcertificate">
<db:title>Changes to QSslCertificate</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsslcertificate.xml#subjectInfo">QSslCertificate::subjectInfo</db:link>() and <db:link xlink:href="qsslcertificate.xml#issuerInfo">QSslCertificate::issuerInfo</db:link>() now return <db:link xlink:href="qstringlist.xml">QStringList</db:link> instead of a <db:link xlink:href="qstring.xml">QString</db:link>. This change makes searching the required information a lot easier than scanning a long string.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QSslCertificate::isValid()</db:link> is deprecated. Use <db:link xlink:href="qsslcertificate.xml#isBlacklisted">QSslCertificate::isBlacklisted</db:link>() instead to avoid binary breaks in the future.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="">QSslCertificate::alternateSubjectNames()</db:link> is deprecated. Use <db:link xlink:href="qsslcertificate.xml#subjectAlternativeNames">QSslCertificate::subjectAlternativeNames</db:link>() instead.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="changes-to-qt-sql">
<db:title>Changes to Qt SQL</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qsqlquerymodel.xml#indexInQuery">QSqlQueryModel::indexInQuery</db:link>() is virtual now.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsqlquerymodel.xml#setQuery">QSqlQueryModel::setQuery</db:link>() emits fewer signals. The modelAboutToBeReset() and modelReset() signals are sufficient to inform views that they must re-interrogate the model.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsqldriver.xml#subscribeToNotification">QSqlDriver::subscribeToNotification</db:link>(), <db:link xlink:href="qsqldriver.xml#unsubscribeFromNotification">QSqlDriver::unsubscribeFromNotification</db:link>(), <db:link xlink:href="qsqldriver.xml#subscribedToNotifications">QSqlDriver::subscribedToNotifications</db:link>(), <db:link xlink:href="qsqldriver.xml#isIdentifierEscaped">QSqlDriver::isIdentifierEscaped</db:link>(), and <db:link xlink:href="qsqldriver.xml#stripDelimiters">QSqlDriver::stripDelimiters</db:link>() are virtual now. The corresponding xxxImplementation functions are also removed as the subclasses of <db:link xlink:href="qsqldriver.xml">QSqlDriver</db:link> can re-implement those directly.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qsqlerror.xml">QSqlError</db:link> now handles alphanumeric error codes that are used by QPSQL. The numeric codes are deprecated.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qt-test">
<db:title>Changes to Qt Test</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The plain-text, XML and lightxml test output formats are updated to include test result for every row of test data in data-driven tests. In Qt4, only fails and skips were included for individual data rows without the passes information. This limitation prevented accurate test run and pass rates calculation.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QTRY_VERIFY and QTRY_COMPARE macros are now part of QTestLib. These macros were part of tests/shared/util.h earlier, but now they are part of the &lt;<db:link xlink:href="qttest-qmlmodule.xml">QtTest</db:link>/<db:link xlink:href="qttest-qmlmodule.xml">QtTest</db:link>&gt; header. In addition, QTRY_VERIFY_WITH_TIMEOUT and QTRY_COMPARE_WITH_TIMEOUT are provided to specify custom timeout values.</db:para>
</db:listitem>
<db:listitem>
<db:para>The QTEST_NOOP_MAIN macro is removed. If a test appears to be inapplicable for a particular build at compile-time, it should be omitted either using the .pro file logic or call QSKIP in the initTestCase() method to skip the entire test. If you're using the later approach, report a meaningful explanation in the test log.</db:para>
</db:listitem>
<db:listitem>
<db:para>The DEPENDS_ON macro is removed as it misled some users to believe that they could make test functions depend on each other or impose an execution order on test functions.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTest::qt_snprintf() is removed. This was an internal test library function that was exposed in the public API due to its use in a public macro. Any calls to this function must be replaced with <db:link xlink:href="qbytearray.xml#bytearray-qsnprintf">QByteArray::qsnprintf</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>c{QTest::pixmapsAreEqual()} is removed. Comparison of <db:link xlink:href="qpixmap.xml">QPixmap</db:link> objects must be done using the QCOMPARE macro, which provides more informative output in the event of a failure.</db:para>
</db:listitem>
<db:listitem>
<db:para>The &quot;mode&quot; parameter in QSKIP macro is removed. This parameter caused problems in test metrics calculation because of the SkipAll mode, which hid information about the skipped test data. Calling QSKIP in a test function now behaves like SkipSingle, which is skipping a non-data-driven test function or skipping only the current data row of a data-driven test function. Every skipped data row is now reported in the test log.</db:para>
</db:listitem>
<db:listitem>
<db:para>qCompare() has been replaced by overloading. Code such as qCompare&lt;QString&gt;(l, r) no longer uses the <db:link xlink:href="qstring.xml">QString</db:link>-specific implementation and may fail to compile. We recommend that you replace specialization with overloading. Also, rather than pass explicit template arguments to qCompare, let the overload resolution pick the correct one, and cast arguments in case of ambiguous overloads (for example, qCompare(QString(l), r)). The resulting code will continue to work against older QtTestlib versions.</db:para>
</db:listitem>
<db:listitem>
<db:para>QTest::qWaitForWindowShown() is replaced with <db:link xlink:href="">QTest::qWaitForWindowExposed()</db:link>.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qt-opengl">
<db:title>Changes to Qt OpenGL</db:title>
<db:para>Apart from the <db:link xlink:href="qglwidget.xml" role="deprecated">QGLWidget</db:link> class, the <db:link xlink:href="qtopengl-index.xml">Qt OpenGL</db:link> module should not be used for new code. Instead, use the corresponding <db:emphasis>OpenGL</db:emphasis> classes in <db:link xlink:href="qtgui-index.xml">Qt GUI</db:link>.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qglpixelbuffer.xml" role="deprecated">QGLPixelBuffer</db:link> is deprecated and implemented by using a hidden <db:link xlink:href="qglwidget.xml" role="deprecated">QGLWidget</db:link> and a <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link>. For offscreen rendering to a texture, switch to using <db:link xlink:href="qopenglframebufferobject.xml">QOpenGLFramebufferObject</db:link> directly to improve performance.</db:para>
</db:listitem>
<db:listitem>
<db:para>The default major version of <db:link xlink:href="qglformat.xml" role="deprecated">QGLFormat</db:link> is changed to 2 to align it with <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>. Applications that want to use a different version, should explicitly request it using <db:link xlink:href="qglformat.xml#setVersion">QGLFormat::setVersion</db:link>().</db:para>
</db:listitem>
<db:listitem>
<db:para>QGLContext::generateFontDisplayLists() and QGLWidget::fontDisplayListBase() are removed.</db:para>
</db:listitem>
<db:listitem>
<db:para>The listBase parameter is removed from <db:link xlink:href="qglwidget.xml#renderText">QGLWidget::renderText</db:link>() functions.</db:para>
</db:listitem>
<db:listitem>
<db:para>To ensure support on more platforms, stricter requirements have been introduced for doing threaded OpenGL. First, you must call <db:link xlink:href="qglwidget.xml#makeCurrent">QGLWidget::makeCurrent</db:link>() at least once per each <db:link xlink:href="qglwidget.xml#swapBuffers">QGLWidget::swapBuffers</db:link>() call, so that the platform has a chance to synchronize resizing the OpenGL surface. Second, before calling <db:link xlink:href="qglwidget.xml#makeCurrent">QGLWidget::makeCurrent</db:link>() or <db:link xlink:href="qglwidget.xml#swapBuffers">QGLWidget::swapBuffers</db:link>() in a separate thread, you must call <db:link xlink:href="qglcontext.xml#moveToThread">QGLContext::moveToThread</db:link>() to explicitly let Qt know in which thread a <db:link xlink:href="qglcontext.xml" role="deprecated">QGLContext</db:link> is currently being used. You also need to make sure that the context is not current in the current thread before moving it to a different thread.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-qt-global">
<db:title>Changes to Qt Global</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>qMacVersion() is removed. Use <db:link xlink:href="qsysinfo.xml#macVersion">QSysInfo::macVersion</db:link>() or <db:link xlink:href="qsysinfo.xml#MacintoshVersion-var">QSysInfo::MacintoshVersion</db:link> instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>Qt::escape() is deprecated. Use <db:link xlink:href="qstring.xml#toHtmlEscaped">QString::toHtmlEscaped</db:link>() instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>qIsDetached&lt;&gt; is removed, becauses it is irrelevant for multi-threaded applications. There is no replacement for this function.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="changes-to-tools">
<db:title>Changes to Tools</db:title>
<db:itemizedlist>
<db:listitem>
<db:para>The qttest_p4.prf file is removed. Use CONFIG+=testcase and other flags instead.</db:para>
</db:listitem>
<db:listitem>
<db:para>The -dwarf2 configure argument is removed. DWARF2 is always used on macOS now.</db:para>
</db:listitem>
<db:listitem>
<db:para>Configure no longer calls qmake -recursive by default, because the subsequent build invokes qmake as needed. Use -fully-process to restore the old behavior.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="linguist-manager.xml#using-lupdate">lupdate</db:link> CODECFORTR variable is deprecated, because source code written with Qt 5 is expected to use UTF-8 encoding.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="related-topics">
<db:title>Related Topics</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="newclasses55.xml">New Classes and Functions in Qt 5.5</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="newclasses54.xml">New Classes and Functions in Qt 5.4</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="newclasses53.xml">New Classes and Functions in Qt 5.3</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="newclasses52.xml">New Classes and Functions in Qt 5.2</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="newclasses51.xml">New Classes and Functions in Qt 5.1</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:article>
