<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>ColorDialog QML Type</db:title>
<db:productname>QtQuickDialogs</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Dialogs Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Dialog component for choosing a color.</db:para>
<db:para>This type was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Dialogs 1.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>ColorDialog is part of <db:simplelist><db:member>qtquickdialogs</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link> allows the user to select a color. The dialog is initially invisible. You need to set the properties as desired first, then set <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#visible-prop">visible</db:link> to true or call <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#open-method">open</db:link>().</db:para>
<db:para>Here is a minimal example to open a color dialog and exit after the user chooses a color:</db:para>
<db:programlisting language="qml">import QtQuick 2.2
import QtQuick.Dialogs 1.0

ColorDialog {
    id: colorDialog
    title: &quot;Please choose a color&quot;
    onAccepted: {
        console.log(&quot;You chose: &quot; + colorDialog.color)
        Qt.quit()
    }
    onRejected: {
        console.log(&quot;Canceled&quot;)
        Qt.quit()
    }
    Component.onCompleted: visible = true
}
</db:programlisting>
<db:para>A <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link> window is automatically transient for its parent window. So whether you declare the dialog inside an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> or inside a <db:link xlink:href="qml-qtquick-window-window.xml">Window</db:link>, the dialog will appear centered over the window containing the item, or over the Window that you declared.</db:para>
<db:para>The implementation of <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml">ColorDialog</db:link> will be a platform color dialog if possible. If that isn't possible, then it will try to instantiate a <db:link xlink:href="qcolordialog.xml">QColorDialog</db:link>. If that also isn't possible, then it will fall back to a QML implementation, DefaultColorDialog.qml. In that case you can customize the appearance by editing this file. DefaultColorDialog.qml contains a Rectangle to hold the dialog's contents, because certain embedded systems do not support multiple top-level windows. When the dialog becomes visible, it will automatically be wrapped in a Window if possible, or simply reparented on top of the main window if there can only be one window.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="color-prop">
<db:title>color : color</db:title>
<db:para>The color which the user selected.</db:para>
<db:note>
<db:para>This color is not always the same as the color held by the <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#currentColor-prop">currentColor</db:link> property since the user can choose different colors before finally selecting the one to use.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#currentColor-prop">currentColor</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="currentColor-prop">
<db:title>currentColor : color</db:title>
<db:para>The color which the user has currently selected.</db:para>
<db:para>For the color that is set when the dialog is accepted, use the <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#color-prop">color</db:link> property.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#color-prop">color</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="modality-prop">
<db:title>modality : Qt::WindowModality</db:title>
<db:para>Whether the dialog should be shown modal with respect to the window containing the dialog's parent Item, modal with respect to the whole application, or non-modal.</db:para>
<db:para>By default it is <db:code>Qt.NonModal</db:code>.</db:para>
<db:para>Modality does not mean that there are any blocking calls to wait for the dialog to be accepted or rejected; it's only that the user will be prevented from interacting with the parent window and/or the application windows at the same time.</db:para>
<db:para>You probably need to write an onAccepted handler if you wish to change a color after the user has pressed the OK button, or an onCurrentColorChanged handler if you wish to react to every change the user makes while the dialog is open.</db:para>
<db:para>On MacOS the color dialog is only allowed to be non-modal.</db:para>
</db:section>
<db:section xml:id="showAlphaChannel-prop">
<db:title>showAlphaChannel : bool</db:title>
<db:para>Whether the dialog will provide a means of changing the opacity.</db:para>
<db:para>By default, this property is true. This property must be set to the desired value before opening the dialog. Usually the alpha channel is represented by an additional slider control.</db:para>
</db:section>
<db:section xml:id="title-prop">
<db:title>title : string</db:title>
<db:para>The title of the dialog window.</db:para>
</db:section>
<db:section xml:id="visible-prop">
<db:title>visible : bool</db:title>
<db:para>This property holds whether the dialog is visible. By default this is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#modality-prop">modality</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="close-method">
<db:title>void close()</db:title>
<db:para>Closes the dialog.</db:para>
</db:section>
<db:section xml:id="open-method">
<db:title>void open()</db:title>
<db:para>Shows the dialog to the user. It is equivalent to setting <db:link xlink:href="qml-qtquick-dialogs-colordialog.xml#visible-prop">visible</db:link> to true.</db:para>
</db:section>
</db:section>
</db:article>
