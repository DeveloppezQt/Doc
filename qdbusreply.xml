<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusReply Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QDBusReply</db:subtitle>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt D-Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> class stores the reply for a method call to a remote object.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS DBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::DBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> object is a subset of the <db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link> object that represents a method call's reply. It contains only the first output argument or the error code and is used by <db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link>-derived classes to allow returning the error code as the function's return argument.</db:para>
<db:para>It can be used in the following manner:</db:para>
<db:programlisting language="cpp">QDBusReply&amp;lt;QString&amp;gt; reply = interface-&amp;gt;call(&quot;RemoteMethod&quot;);
if (reply.isValid())
    // use the returned value
    useValue(reply.value());
else
    // call failed. Show an error condition.
    showError(reply.error());
</db:programlisting>
<db:para>If the remote method call cannot fail, you can skip the error checking:</db:para>
<db:programlisting language="cpp">reply = interface-&amp;gt;call(&quot;RemoteMethod&quot;);
</db:programlisting>
<db:para>However, if it does fail under those conditions, the value returned by <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link>&lt;T&gt;::value() is a default-constructed value. It may be indistinguishable from a valid return value.</db:para>
<db:para><db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> objects are used for remote calls that have no output arguments or return values (i.e., they have a &quot;void&quot; return type). Use the <db:link xlink:href="qdbusreply.xml#isValid">isValid</db:link>() function to test if the reply succeeded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusmessage.xml">QDBusMessage</db:link></db:member>
<db:member><db:link xlink:href="qdbusinterface.xml">QDBusInterface</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusReply">
<db:title>QDBusReply::QDBusReply(const QDBusMessage &amp;<db:emphasis>reply</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusReply</db:methodname>
<db:methodparam>
<db:type>const QDBusMessage &amp;</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply(const QDBusMessage &amp;reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Automatically construct a <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> object from the reply message <db:code role="parameter">reply</db:code>, extracting the first return value from it if it is a success reply.</db:para>
</db:section>
<db:section xml:id="QDBusReply-1">
<db:title>QDBusReply::QDBusReply(const QDBusReply&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusReply</db:methodname>
<db:methodparam>
<db:type>const QDBusReply&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply(const QDBusReply&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QDBusReply-2">
<db:title>QDBusReply::QDBusReply(const QDBusPendingCall &amp;<db:emphasis>pcall</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusReply</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>pcall</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply(const QDBusPendingCall &amp;pcall)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Automatically construct a <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> object from the asynchronous pending call <db:code role="parameter">pcall</db:code>. If the call isn't finished yet, <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> will call QDBusPendingCall::waitForFinished(), which is a blocking operation.</db:para>
<db:para>If the return types patch, <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> will extract the first return argument from the reply.</db:para>
</db:section>
<db:section xml:id="QDBusReply-3">
<db:title>QDBusReply::QDBusReply(const QDBusPendingReply&lt;T&gt; &amp;<db:emphasis>reply</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusReply</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingReply&lt;T&gt; &amp;</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply(const QDBusPendingReply&lt;T&gt; &amp;reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qdbusreply.xml">QDBusReply</db:link> object from the pending reply message, <db:code role="parameter">reply</db:code>.</db:para>
</db:section>
<db:section xml:id="QDBusReply-4">
<db:title>QDBusReply::QDBusReply(const QDBusError &amp;<db:emphasis>error</db:emphasis> = QDBusError())</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusReply</db:methodname>
<db:methodparam>
<db:type>const QDBusError &amp;</db:type>
<db:parameter>error</db:parameter>
<db:initializer>QDBusError()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply(const QDBusError &amp;error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an error reply from the D-Bus error code given by <db:code role="parameter">error</db:code>.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>const QDBusError &amp;QDBusReply::error() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QDBusError &amp;</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusError &amp; error() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error code that was returned from the remote function call. If the remote call did not return an error (i.e., if it succeeded), then the <db:link xlink:href="qdbuserror.xml">QDBusError</db:link> object that is returned will not be a valid error code (<db:link xlink:href="qdbuserror.xml#isValid">QDBusError::isValid</db:link>() will return false).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusreply.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>const QDBusError &amp;QDBusReply::error()</db:title>
<db:methodsynopsis>
<db:type>const QDBusError &amp;</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QDBusError &amp; error()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QDBusReply::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if no error occurred; otherwise, returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="value">
<db:title>QDBusReply::Type QDBusReply::value() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusReply::Type</db:type>
<db:methodname>value</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply::Type value() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the remote function's calls return value. If the remote call returned with an error, the return value of this function is undefined and may be undistinguishable from a valid return value.</db:para>
<db:para>This function is not available if the remote call returns <db:code>void</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-QDBusReply-3a-3aType">
<db:title>QDBusReply::Type QDBusReply::operator QDBusReply::Type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusReply::Type</db:type>
<db:methodname>operator QDBusReply::Type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply::Type operator QDBusReply::Type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the same as <db:link xlink:href="qdbusreply.xml#value">value</db:link>().</db:para>
<db:para>This function is not available if the remote call returns <db:code>void</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QDBusReply&lt;T&gt; &amp;QDBusReply::operator=(const QDBusMessage &amp;<db:emphasis>reply</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusReply&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusMessage &amp;</db:type>
<db:parameter>reply</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply&lt;T&gt; &amp; operator=(const QDBusMessage &amp;reply)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object contain the <db:code role="parameter">reply</db:code> message. If <db:code role="parameter">reply</db:code> is an error message, this function will copy the error code and message into this object</db:para>
<db:para>If <db:code role="parameter">reply</db:code> is a standard reply message and contains at least one parameter, it will be copied into this object, as long as it is of the correct type. If it's not of the same type as this <db:link xlink:href="qdbuserror.xml">QDBusError</db:link> object, this function will instead set an error code indicating a type mismatch.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QDBusReply&lt;T&gt; &amp;QDBusReply::operator=(const QDBusPendingCall &amp;<db:emphasis>pcall</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusReply&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusPendingCall &amp;</db:type>
<db:parameter>pcall</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply&lt;T&gt; &amp; operator=(const QDBusPendingCall &amp;pcall)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object contain the reply specified by the pending asynchronous call <db:code role="parameter">pcall</db:code>. If the call is not finished yet, this function will call QDBusPendingCall::waitForFinished() to block until the reply arrives.</db:para>
<db:para>If <db:code role="parameter">pcall</db:code> finishes with an error message, this function will copy the error code and message into this object</db:para>
<db:para>If <db:code role="parameter">pcall</db:code> finished with a standard reply message and contains at least one parameter, it will be copied into this object, as long as it is of the correct type. If it's not of the same type as this <db:link xlink:href="qdbuserror.xml">QDBusError</db:link> object, this function will instead set an error code indicating a type mismatch.</db:para>
</db:section>
<db:section xml:id="operator-eq-2">
<db:title>QDBusReply&lt;T&gt; &amp;QDBusReply::operator=(const QDBusError &amp;<db:emphasis>dbusError</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusReply&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusError &amp;</db:type>
<db:parameter>dbusError</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply&lt;T&gt; &amp; operator=(const QDBusError &amp;dbusError)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets this object to contain the error code given by <db:code role="parameter">dbusError</db:code>. You can later access it with <db:link xlink:href="qdbusreply.xml#error">error</db:link>().</db:para>
</db:section>
<db:section xml:id="operator-eq-3">
<db:title>QDBusReply&lt;T&gt; &amp;QDBusReply::operator=(const QDBusReply&lt;T&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDBusReply&lt;T&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QDBusReply&lt;T&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusReply&lt;T&gt; &amp; operator=(const QDBusReply&lt;T&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Makes this object be a copy of the object <db:code role="parameter">other</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
