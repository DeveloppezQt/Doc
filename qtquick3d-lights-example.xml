<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Lights Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of different light types.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lights-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates using three different light types in an application.</db:para>
<db:section xml:id="setting-the-scene-lights">
<db:title>Setting the Scene Lights</db:title>
<db:section xml:id="directional-light">
<db:title>Directional Light</db:title>
<db:para>The directional light emits light in one direction from an unidentifiable source located infinitely far away. This is similar to the way sunlight works in real life. A directional light has infinite range and does not diminish.</db:para>
<db:para>We setup directional light to emit red color and animate its rotation around x-axis.</db:para>
<db:programlisting language="qml">DirectionalLight {
    id: light1
    color: Qt.rgba(1.0, 0.1, 0.1, 1.0)
    ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
    position: Qt.vector3d(0, 200, 0)
    rotation: Quaternion.fromEulerAngles(-135, -90, 0)
    shadowMapQuality: Light.ShadowMapQualityHigh
    visible: directionalLightCheckBox.checked
    castsShadow: checkBoxShadows.checked
    brightness: directionalLightSlider.value
    SequentialAnimation on rotation {
        loops: Animation.Infinite
        QuaternionAnimation {
            to: Quaternion.fromEulerAngles(-45, -90, 0)
            duration: 2000
            easing.type: Easing.InOutQuad
        }
        QuaternionAnimation {
            to: Quaternion.fromEulerAngles(-135, -90, 0)
            duration: 2000
            easing.type: Easing.InOutQuad
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="point-light">
<db:title>Point Light</db:title>
<db:para>The point light can be described as a sphere, emitting light with equal strength in all directions from the center of the light. This is similar to the way a light bulb emits light.</db:para>
<db:para>We setup point light to emit green color and animate its position in x-coordinate.</db:para>
<db:programlisting language="qml">PointLight {
    id: light2
    color: Qt.rgba(0.1, 1.0, 0.1, 1.0)
    ambientColor: Qt.rgba(0.1, 0.1, 0.1, 1.0)
    position: Qt.vector3d(0, 300, 0)
    shadowMapFar: 2000
    shadowMapQuality: Light.ShadowMapQualityHigh
    visible: pointLightCheckBox.checked
    castsShadow: checkBoxShadows.checked
    brightness: pointLightSlider.value
    SequentialAnimation on x {
        loops: Animation.Infinite
        NumberAnimation {
            to: 400
            duration: 2000
            easing.type: Easing.InOutQuad
        }
        NumberAnimation {
            to: 0
            duration: 2000
            easing.type: Easing.InOutQuad
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="spot-light">
<db:title>Spot Light</db:title>
<db:para>The spot light is similar to the point light, except that it emits light in a cone shape towards one direction instead of all directions. Aside from the cone angle, a spot light has the same characteristics and properties as the point light.</db:para>
<db:para>We setup spot light to emit a warm color and animate its rotation in y-coordinate.</db:para>
<db:programlisting language="qml">SpotLight {
    id: light4
    color: Qt.rgba(1.0, 0.9, 0.7, 1.0)
    ambientColor: Qt.rgba(0.0, 0.0, 0.0, 0.0)
    position: Qt.vector3d(0, 250, 0)
    eulerRotation.x: -45
    shadowMapFar: 2000
    shadowMapQuality: Light.ShadowMapQualityHigh
    visible: spotLightCheckBox.checked
    castsShadow: checkBoxShadows.checked
    brightness: spotLightSlider.value
    coneAngle: 50
    innerConeAngle: 30
    PropertyAnimation on eulerRotation.y {
        loops: Animation.Infinite
        from: 0
        to: -360
        duration: 10000
    }
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="setting-the-scene-models">
<db:title>Setting the Scene Models</db:title>
<db:para>First we add two rectangle models to act as the floor and the back wall for our scene. These are useful for seeing light shadows.</db:para>
<db:programlisting language="qml">Model {
    source: &quot;#Rectangle&quot;
    y: -200
    scale: Qt.vector3d(15, 15, 15)
    eulerRotation.x: -90
    materials: [
        DefaultMaterial {
            diffuseColor: Qt.rgba(0.8, 0.6, 0.4, 1.0)
        }
    ]
}
Model {
    source: &quot;#Rectangle&quot;
    z: -400
    scale: Qt.vector3d(15, 15, 15)
    materials: [
        DefaultMaterial {
            diffuseColor: Qt.rgba(0.8, 0.8, 0.9, 1.0)
        }
    ]
}
</db:programlisting>
<db:para>Then we add our main teapot model which is rotated around y-axis.</db:para>
<db:programlisting language="qml">Model {
    id: teapotDefault
    source: &quot;teapot.mesh&quot;
    y: -100
    scale: Qt.vector3d(75, 75, 75)

    property variant material
    materials: [ material ]

    property bool animate: true
    NumberAnimation on eulerRotation.y {
        running: teapotDefault.animate
        loops: Animation.Infinite
        duration: 5000
        from: 0
        to: -360
    }
}
</db:programlisting>
<db:para>We also add small cube models to demonstrate position &amp; rotation of each light type. These cubes scale bigger when user is accessing related sliders.</db:para>
<db:programlisting language="qml">Model {
    // Directional Light Marker
    property real size: directionalLightSlider.highlight ? 0.2 : 0.1
    source: &quot;#Cube&quot;
    position: light1.position
    rotation: light1.rotation
    scale: Qt.vector3d(size, size, size * 2)
    materials: [
        PrincipledMaterial {
            baseColor: light1.color
            lighting: PrincipledMaterial.NoLighting
        }
    ]
    castsShadows: false
    visible: directionalLightCheckBox.checked
}
Model {
    // Point Light Marker
    source: &quot;#Sphere&quot;
    position: light2.position
    rotation: light2.rotation
    property real size: pointLightSlider.highlight ? 0.2 : 0.1
    scale: Qt.vector3d(size, size, size)
    materials: [
        PrincipledMaterial {
            baseColor: light2.color
            lighting: PrincipledMaterial.NoLighting
        }
    ]
    castsShadows: false
    visible: pointLightCheckBox.checked
}
Node {
    // Spot Light Marker
    position: light4.position
    rotation: light4.rotation
    property real size: spotLightSlider.highlight ? 0.2 : 0.1
    scale: Qt.vector3d(size, size, size)
    Model {
        source: &quot;#Cone&quot;
        castsShadows: false
        eulerRotation.x: 90
        materials: PrincipledMaterial {
            baseColor: light4.color
            lighting: PrincipledMaterial.NoLighting
        }
    }
    visible: spotLightCheckBox.checked
}
</db:programlisting>
<db:para>From the settings panel user can then enable shadows and control visibility and brightness of each light separately.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="lights/CMakeLists.txt">lights/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/RotatingTeaPot.qml">lights/RotatingTeaPot.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/SettingsDrawer.qml">lights/SettingsDrawer.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/custom.vert">lights/custom.vert</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/lights.pro">lights/lights.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/main.cpp">lights/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/main.qml">lights/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/qml.qrc">lights/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="lights/icon_settings.png">lights/icon_settings.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/icon_settings@2x.png">lights/icon_settings@2x.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/icon_settings@3x.png">lights/icon_settings@3x.png</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="lights/icon_settings@4x.png">lights/icon_settings@4x.png</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
