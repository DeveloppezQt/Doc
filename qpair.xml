<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpair.xml">QPair</db:link> class is a template class that stores a pair of items.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPair</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPair is part of <db:simplelist><db:member>tools</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpair.xml">QPair</db:link>&lt;T1, T2&gt; can be used in your application if the STL <db:code>pair</db:code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <db:link xlink:href="containers.xml">generic container</db:link>.</db:para>
<db:para>Here's an example of a <db:link xlink:href="qpair.xml">QPair</db:link> that stores one <db:link xlink:href="qstring.xml">QString</db:link> and one <db:code>double</db:code> value:</db:para>
<db:programlisting language="cpp">QPair&amp;lt;QString, double&amp;gt; pair;
</db:programlisting>
<db:para>The components are accessible as public data members called <db:link xlink:href="qpair.xml#first-var">first</db:link> and <db:link xlink:href="qpair.xml#second-var">second</db:link>. For example:</db:para>
<db:programlisting language="cpp">pair.first = &quot;pi&quot;;
pair.second = M_PI;
</db:programlisting>
<db:para>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <db:code>first</db:code> and <db:code>second</db:code>:</db:para>
<db:programlisting language="cpp">struct Variable {
    QString name;
    double value;
};
Variable v;
v.name = &quot;pi&quot;;
v.value = M_PI;
</db:programlisting>
<db:para>The advent of C++11 automatic variable type deduction (<db:code>auto</db:code>) shifts the emphasis from the type name to the name of functions and members. Thus, <db:link xlink:href="qpair.xml">QPair</db:link>, like <db:code>std::pair</db:code> and <db:code>std::tuple</db:code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</db:para>
<db:para><db:link xlink:href="qpair.xml">QPair</db:link>'s template data types (T1 and T2) must be <db:link xlink:href="containers.xml#assignable-data-types">assignable data types</db:link>. You cannot, for example, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> as a value; instead, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="containers.xml">Container Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="first_type-typedef">
<db:title>QPair::first_type</db:title>
<db:typedefsynopsis>
<db:typedefname>first_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The type of the first element in the pair (T1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#first-var">first</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="second_type-typedef">
<db:title>QPair::second_type</db:title>
<db:typedefsynopsis>
<db:typedefname>second_type</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>The type of the second element in the pair (T2).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#second-var">second</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPair">
<db:title>QPair::QPair()</db:title>
<db:constructorsynopsis>
<db:methodname>QPair</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an empty pair. The <db:code>first</db:code> and <db:code>second</db:code> elements are initialized with <db:link xlink:href="containers.xml#default-constructed-value">default-constructed value</db:link>s.</db:para>
</db:section>
<db:section xml:id="QPair-1">
<db:title>QPair::QPair(const T1 &amp;<db:emphasis>value1</db:emphasis>, const T2 &amp;<db:emphasis>value2</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPair</db:methodname>
<db:methodparam>
<db:type>const T1 &amp;</db:type>
<db:parameter>value1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T2 &amp;</db:type>
<db:parameter>value2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair(const T1 &amp;value1, const T2 &amp;value2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pair and initializes the <db:code>first</db:code> element with <db:code role="parameter">value1</db:code> and the <db:code>second</db:code> element with <db:code role="parameter">value2</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#qMakePair">qMakePair</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPair-2">
<db:title>[since 5.2] QPair::QPair(const QPair&lt;TT1, TT2&gt; &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPair</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;TT1, TT2&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair(const QPair&lt;TT1, TT2&gt; &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a pair from the other pair <db:code role="parameter">p</db:code>, of types TT1 and TT2. This constructor will fail if <db:code>first</db:code> cannot be initialized from <db:code>p.first</db:code> or if <db:code>second</db:code> cannot be initialized from <db:code>p.second</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#qMakePair">qMakePair</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QPair-3">
<db:title>[since 5.2] QPair::QPair(QPair&lt;TT1, TT2&gt; &amp;&amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QPair</db:methodname>
<db:methodparam>
<db:type>QPair&lt;TT1, TT2&gt; &amp;&amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair(QPair&lt;TT1, TT2&gt; &amp;&amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qpair.xml">QPair</db:link> instance, making it point to the same object that <db:code role="parameter">p</db:code> was pointing to.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.5] void QPair::swap(QPair&lt;T1, T2&gt; &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QPair&lt;T1, T2&gt; &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps this pair with <db:code role="parameter">other</db:code>.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">qSwap(this-&amp;gt;first, other.first);
qSwap(this-&amp;gt;second, other.second);
</db:programlisting>
<db:para>Swap overloads are found in namespace <db:code>std</db:code> as well as via argument-dependent lookup (ADL) in the namespace of <db:code>T</db:code> .</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[since 5.2] QPair&lt;T1, T2&gt; &amp;QPair::operator=(const QPair&lt;TT1, TT2&gt; &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;TT1, TT2&gt; &amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;T1, T2&gt; &amp; operator=(const QPair&lt;TT1, TT2&gt; &amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Copies pair <db:code role="parameter">p</db:code> into this pair.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#qMakePair">qMakePair</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.2] QPair&lt;T1, T2&gt; &amp;QPair::operator=(QPair&lt;TT1, TT2&gt; &amp;&amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QPair&lt;TT1, TT2&gt; &amp;&amp;</db:type>
<db:parameter>p</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;T1, T2&gt; &amp; operator=(QPair&lt;TT1, TT2&gt; &amp;&amp;p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns pair <db:code role="parameter">p</db:code> into this pair instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="first-var">
<db:title>T1 QPair::first</db:title>
<db:fieldsynopsis>
<db:type>T1</db:type>
<db:varname>first</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The first element in the pair.</db:para>
</db:section>
<db:section xml:id="second-var">
<db:title>T2 QPair::second</db:title>
<db:fieldsynopsis>
<db:type>T2</db:type>
<db:varname>second</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>The second element in the pair.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qMakePair">
<db:title>QPair&lt;T1, T2&gt; qMakePair(const T1 &amp;<db:emphasis>value1</db:emphasis>, const T2 &amp;<db:emphasis>value2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QPair&lt;T1, T2&gt;</db:type>
<db:methodname>qMakePair</db:methodname>
<db:methodparam>
<db:type>const T1 &amp;</db:type>
<db:parameter>value1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const T2 &amp;</db:type>
<db:parameter>value2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;T1, T2&gt; qMakePair(const T1 &amp;value1, const T2 &amp;value2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qpair.xml">QPair</db:link>&lt;T1, T2&gt; that contains <db:code role="parameter">value1</db:code> and <db:code role="parameter">value2</db:code>. Example:</db:para>
<db:programlisting language="cpp">QList&amp;lt;QPair&amp;lt;int, double&amp;gt; &amp;gt; list;
list.append(qMakePair(66, M_PI));
</db:programlisting>
<db:para>This is equivalent to <db:link xlink:href="qpair.xml">QPair</db:link>&lt;T1, T2&gt;(<db:code role="parameter">value1</db:code>, <db:code role="parameter">value2</db:code>), but usually requires less typing.</db:para>
</db:section>
<db:section xml:id="swap-1">
<db:title>[since 5.5] void swap(QPair&lt;T1, T2&gt; &amp;<db:emphasis>lhs</db:emphasis>, QPair&lt;T1, T2&gt; &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QPair&lt;T1, T2&gt; &amp;lhs, QPair&lt;T1, T2&gt; &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Swaps <db:code role="parameter">lhs</db:code> with <db:code role="parameter">rhs</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool operator!=(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is not equal to <db:code role="parameter">p2</db:code>; otherwise returns false. Two pairs compare as not equal if their <db:code>first</db:code> data members are not equal or if their <db:code>second</db:code> data members are not equal.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator==()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>bool operator&lt;(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is less than <db:code role="parameter">p2</db:code>; otherwise returns false. The comparison is done on the <db:code>first</db:code> members of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; if they compare equal, the <db:code>second</db:code> members are compared to break the tie.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator&lt;()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>pair</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;out, const QPair&lt;T1, T2&gt; &amp;pair)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes the pair <db:code role="parameter">pair</db:code> to stream <db:code role="parameter">out</db:code>.</db:para>
<db:para>This function requires the T1 and T2 types to implement <db:code>operator&lt;&lt;()</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>bool operator&lt;=(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is less than or equal to <db:code role="parameter">p2</db:code>; otherwise returns <db:code>false</db:code>. The comparison is done on the <db:code>first</db:code> members of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; if they compare equal, the <db:code>second</db:code> members are compared to break the tie.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator&lt;()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool operator==(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is equal to <db:code role="parameter">p2</db:code>; otherwise returns <db:code>false</db:code>. Two pairs compare equal if their <db:code>first</db:code> data members compare equal and if their <db:code>second</db:code> data members compare equal.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator==()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>bool operator&gt;(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is greater than <db:code role="parameter">p2</db:code>; otherwise returns false. The comparison is done on the <db:code>first</db:code> members of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; if they compare equal, the <db:code>second</db:code> members are compared to break the tie.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator&lt;()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>bool operator&gt;=(const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p1</db:emphasis>, const QPair&lt;T1, T2&gt; &amp;<db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QPair&lt;T1, T2&gt; &amp;p1, const QPair&lt;T1, T2&gt; &amp;p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">p1</db:code> is greater than or equal to <db:code role="parameter">p2</db:code>; otherwise returns <db:code>false</db:code>. The comparison is done on the <db:code>first</db:code> members of <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code>; if they compare equal, the <db:code>second</db:code> members are compared to break the tie.</db:para>
<db:para>This function requires the T1 and T2 types to have an implementation of <db:code>operator&lt;()</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QPair&lt;T1, T2&gt; &amp;<db:emphasis>pair</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QPair&lt;T1, T2&gt; &amp;</db:type>
<db:parameter>pair</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;in, QPair&lt;T1, T2&gt; &amp;pair)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a pair from stream <db:code role="parameter">in</db:code> into <db:code role="parameter">pair</db:code>.</db:para>
<db:para>This function requires the T1 and T2 types to implement <db:code>operator&gt;&gt;()</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
