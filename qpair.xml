<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpair.xml">QPair</db:link> class is a template class that stores a pair of items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPair</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPair is part of <db:simplelist><db:member>tools</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qpair.xml">QPair</db:link>&lt;T1, T2&gt; can be used in your application if the STL <db:code>pair</db:code> type is not available. It stores one value of type T1 and one value of type T2. It can be used as a return value for a function that needs to return two values, or as the value type of a <db:link xlink:href="containers.xml">generic container</db:link>.</db:para>
<db:para>Here's an example of a <db:link xlink:href="qpair.xml">QPair</db:link> that stores one <db:link xlink:href="qstring.xml">QString</db:link> and one <db:code>double</db:code> value:</db:para>
<db:programlisting language="cpp">QPair&lt;QString, double&gt; pair;
</db:programlisting>
<db:para>The components are accessible as public data members called <db:link xlink:href="qpair.xml#first-var">first</db:link> and <db:link xlink:href="qpair.xml#second-var">second</db:link>. For example:</db:para>
<db:programlisting language="cpp">pair.first = &quot;pi&quot;;
pair.second = 3.14159265358979323846;
</db:programlisting>
<db:para>Note, however, that it is almost always preferable to define a small struct to hold the result of a function with multiple return values. A struct trivially generalizes to more than two values, and allows more descriptive member names than <db:code>first</db:code> and <db:code>second</db:code>:</db:para>
<db:programlisting language="cpp">struct Variable {
    QString name;
    double value;
};
Variable v;
v.name = &quot;pi&quot;;
v.value = 3.14159265358979323846;
</db:programlisting>
<db:para>The advent of C++11 automatic variable type deduction (<db:code>auto</db:code>) shifts the emphasis from the type name to the name of functions and members. Thus, <db:link xlink:href="qpair.xml">QPair</db:link>, like <db:code>std::pair</db:code> and <db:code>std::tuple</db:code>, is mostly useful in generic (template) code, where defining a dedicated type is not possible.</db:para>
<db:para><db:link xlink:href="qpair.xml">QPair</db:link>'s template data types (T1 and T2) must be <db:link xlink:href="containers.xml#assignable-data-types">assignable data types</db:link>. You cannot, for example, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> as a value; instead, store a <db:link xlink:href="qwidget.xml">QWidget</db:link> *. A few functions have additional requirements; these requirements are documented on a per-function basis.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="containers.xml">Container Classes</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="first_type-typedef">
<db:title>QPair::first_type</db:title>
<db:para>The type of the first element in the pair (T1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#first-var">first</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="second_type-typedef">
<db:title>QPair::second_type</db:title>
<db:para>The type of the second element in the pair (T2).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpair.xml#second-var">second</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="first-var">
<db:title>T1 QPair::first</db:title>
<db:para>The first element in the pair.</db:para>
</db:section>
<db:section xml:id="second-var">
<db:title>T2 QPair::second</db:title>
<db:para>The second element in the pair.</db:para>
</db:section>
</db:section>
</db:article>
