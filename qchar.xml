<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QChar Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qchar.xml">QChar</db:link> class provides a 16-bit Unicode character.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
<db:para>This class is <db:emphasis>strongly comparable</db:emphasis>.</db:para>
<db:para>This class is <db:emphasis role="bold">strongly comparable</db:emphasis> with char16_t, <db:link xlink:href="qstring.xml">QString</db:link>, <db:link xlink:href="qstringview.xml">QStringView</db:link>, <db:link xlink:href="qlatin1stringview.xml">QLatin1StringView</db:link>, and <db:link xlink:href="qutf8stringview.xml">QUtf8StringView</db:link>.</db:para>
<db:para>This class is <db:emphasis role="bold">strongly comparable</db:emphasis> with const char *, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, and <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
<db:para>The contents of the byte array is interpreted as UTF-8.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QChar</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QChar is part of <db:simplelist><db:member>string-processing</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>In Qt, Unicode characters are 16-bit entities without any markup or structure. This class represents such an entity. It is lightweight, so it can be used everywhere. Most compilers treat it like an <db:code>unsigned short</db:code>.</db:para>
<db:para><db:link xlink:href="qchar.xml">QChar</db:link> provides a full complement of testing/classification functions, converting to and from other formats, converting from composed to decomposed Unicode, and trying to compare and case-convert if you ask it to.</db:para>
<db:para>The classification functions include functions like those in the standard C++ header &lt;cctype&gt; (formerly &lt;ctype.h&gt;), but operating on the full range of Unicode characters, not just for the ASCII range. They all return true if the character is a certain type of character; otherwise they return false. These classification functions are <db:link xlink:href="qchar.xml#isNull">isNull</db:link>() (returns <db:code>true</db:code> if the character is '\0'), <db:link xlink:href="qchar.xml#isPrint">isPrint</db:link>() (true if the character is any sort of printable character, including whitespace), <db:link xlink:href="qchar.xml#isPunct">isPunct</db:link>() (any sort of punctation), <db:link xlink:href="qchar.xml#isMark">isMark</db:link>() (Unicode Mark), <db:link xlink:href="qchar.xml#isLetter">isLetter</db:link>() (a letter), <db:link xlink:href="qchar.xml#isNumber">isNumber</db:link>() (any sort of numeric character, not just 0-9), <db:link xlink:href="qchar.xml#isLetterOrNumber">isLetterOrNumber</db:link>(), and <db:link xlink:href="qchar.xml#isDigit">isDigit</db:link>() (decimal digits). All of these are wrappers around <db:link xlink:href="qchar.xml#category">category</db:link>() which return the Unicode-defined category of each character. Some of these also calculate the derived properties (for example <db:link xlink:href="qchar.xml#isSpace">isSpace</db:link>() returns <db:code>true</db:code> if the character is of category Separator_* or an exceptional code point from <db:link xlink:href="qchar.xml#Category-enum">Other_Control</db:link> category).</db:para>
<db:para><db:link xlink:href="qchar.xml">QChar</db:link> also provides <db:link xlink:href="qchar.xml#direction">direction</db:link>(), which indicates the &quot;natural&quot; writing direction of this character. The <db:link xlink:href="qchar.xml#joiningType">joiningType</db:link>() function indicates how the character joins with it's neighbors (needed mostly for Arabic or Syriac) and finally <db:link xlink:href="qchar.xml#hasMirrored">hasMirrored</db:link>(), which indicates whether the character needs to be mirrored when it is printed in it's &quot;unnatural&quot; writing direction.</db:para>
<db:para>Composed Unicode characters (like <db:code role="parameter">ring</db:code>) can be converted to decomposed Unicode (&quot;a&quot; followed by &quot;ring above&quot;) by using <db:link xlink:href="qchar.xml#decomposition">decomposition</db:link>().</db:para>
<db:para>In Unicode, comparison is not necessarily possible and case conversion is very difficult at best. Unicode, covering the &quot;entire&quot; world, also includes most of the world's case and sorting problems. operator==() and friends will do comparison based purely on the numeric Unicode value (code point) of the characters, and <db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>() and <db:link xlink:href="qchar.xml#toLower">toLower</db:link>() will do case changes when the character has a well-defined uppercase/lowercase equivalent. For locale-dependent comparisons, use <db:link xlink:href="qstring.xml#localeAwareCompare">QString::localeAwareCompare</db:link>().</db:para>
<db:para>The conversion functions include <db:link xlink:href="qchar.xml#unicode">unicode</db:link>() (to a scalar), <db:link xlink:href="qchar.xml#toLatin1">toLatin1</db:link>() (to scalar, but converts all non-Latin-1 characters to 0), <db:link xlink:href="qchar.xml#row">row</db:link>() (gives the Unicode row), <db:link xlink:href="qchar.xml#cell">cell</db:link>() (gives the Unicode cell), <db:link xlink:href="qchar.xml#digitValue">digitValue</db:link>() (gives the integer value of any of the numerous digit characters), and a host of constructors.</db:para>
<db:para><db:link xlink:href="qchar.xml">QChar</db:link> provides constructors and cast operators that make it easy to convert to and from traditional 8-bit <db:code>char</db:code>s. If you defined <db:code>QT_NO_CAST_FROM_ASCII</db:code> and <db:code>QT_NO_CAST_TO_ASCII</db:code>, as explained in the <db:link xlink:href="qstring.xml">QString</db:link> documentation, you will need to explicitly call <db:link xlink:href="qchar.xml#fromLatin1">fromLatin1</db:link>(), or use <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>, to construct a <db:link xlink:href="qchar.xml">QChar</db:link> from an 8-bit <db:code>char</db:code>, and you will need to call <db:link xlink:href="qchar.xml#toLatin1">toLatin1</db:link>() to get the 8-bit value back.</db:para>
<db:para>Starting with Qt 6.0, most <db:link xlink:href="qchar.xml">QChar</db:link> constructors are <db:code>explicit</db:code>. This is done to avoid dangerous mistakes when accidentally mixing integral types and strings.</db:para>
<db:para>For more information see <db:link xlink:href="https://www.unicode.org/ucd/">&quot;About the Unicode Character Database&quot;</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member>Unicode</db:member>
<db:member><db:link xlink:href="qstring.xml">QString</db:link></db:member>
<db:member><db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Category-enum">
<db:title>enum QChar::Category</db:title>
<db:para>This enum maps the Unicode character categories.</db:para>
<db:para>The following characters are normative in Unicode:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Mark_NonSpacing</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Unicode class name Mn</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Mark_SpacingCombining</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Unicode class name Mc</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Mark_Enclosing</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Unicode class name Me</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Number_DecimalDigit</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Unicode class name Nd</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Number_Letter</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Unicode class name Nl</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Number_Other</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Unicode class name No</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Separator_Space</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Unicode class name Zs</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Separator_Line</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Unicode class name Zl</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Separator_Paragraph</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Unicode class name Zp</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Other_Control</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Unicode class name Cc</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Other_Format</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Unicode class name Cf</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Other_Surrogate</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Unicode class name Cs</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Other_PrivateUse</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Unicode class name Co</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Other_NotAssigned</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Unicode class name Cn</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The following categories are informative in Unicode:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Letter_Uppercase</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Unicode class name Lu</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Letter_Lowercase</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Unicode class name Ll</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Letter_Titlecase</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Unicode class name Lt</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Letter_Modifier</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Unicode class name Lm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Letter_Other</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Unicode class name Lo</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_Connector</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Unicode class name Pc</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_Dash</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Unicode class name Pd</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_Open</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Unicode class name Ps</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_Close</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Unicode class name Pe</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_InitialQuote</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Unicode class name Pi</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_FinalQuote</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Unicode class name Pf</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Punctuation_Other</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Unicode class name Po</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Symbol_Math</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Unicode class name Sm</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Symbol_Currency</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Unicode class name Sc</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Symbol_Modifier</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td>
<db:para>Unicode class name Sk</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Symbol_Other</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td>
<db:para>Unicode class name So</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#category">category</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Decomposition-enum">
<db:title>enum QChar::Decomposition</db:title>
<db:para>This enum type defines the Unicode decomposition attributes. See the <db:link xlink:href="https://www.unicode.org/">Unicode standard</db:link> for a description of the values.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::NoDecomposition</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Canonical</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Circle</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Compat</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Final</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Font</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Fraction</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Initial</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Isolated</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Medial</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Narrow</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::NoBreak</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Small</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Square</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Sub</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Super</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Vertical</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Wide</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#decomposition">decomposition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Direction-enum">
<db:title>enum QChar::Direction</db:title>
<db:para>This enum type defines the Unicode direction attributes. See the <db:link xlink:href="https://www.unicode.org/reports/tr9/tr9-35.html#Table_Bidirectional_Character_Types">Unicode Standard</db:link> for a description of the values.</db:para>
<db:para>In order to conform to C/C++ naming conventions &quot;Dir&quot; is prepended to the codes used in the Unicode Standard.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirAL</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirAN</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirB</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirBN</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirCS</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirEN</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirES</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirET</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirFSI (since Qt 5.3)</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirL</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirLRE</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirLRI (since Qt 5.3)</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirLRO</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirNSM</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirON</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirPDF</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirPDI (since Qt 5.3)</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirR</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirRLE</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirRLI (since Qt 5.3)</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirRLO</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirS</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::DirWS</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#direction">direction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="JoiningType-enum">
<db:title>enum QChar::JoiningType</db:title>
<db:para>since 5.3</db:para>
<db:para>This enum type defines the Unicode joining type attributes. See the <db:link xlink:href="https://www.unicode.org/">Unicode standard</db:link> for a description of the values.</db:para>
<db:para>In order to conform to C/C++ naming conventions &quot;Joining_&quot; is prepended to the codes used in the Unicode Standard.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_None</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_Causing</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_Dual</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_Right</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_Left</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Joining_Transparent</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#joiningType">joiningType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Script-enum">
<db:title>enum QChar::Script</db:title>
<db:para>This enum type defines the Unicode script property values.</db:para>
<db:para>For details about the Unicode script property values see <db:link xlink:href="https://www.unicode.org/reports/tr24/">Unicode Standard Annex #24</db:link>.</db:para>
<db:para>In order to conform to C/C++ naming conventions &quot;Script_&quot; is prepended to the codes used in the Unicode Standard.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Unknown</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>For unassigned, private-use, noncharacter, and surrogate code points.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Inherited</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>For characters that may be used with multiple scripts and that inherit their script from the preceding characters. These include nonspacing marks, enclosing marks, and zero width joiner/non-joiner characters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Common</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>For characters that may be used with multiple scripts and that do not inherit their script from the preceding characters.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Adlam (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>132</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Ahom (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>126</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_AnatolianHieroglyphs (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>127</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Arabic</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Armenian</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Avestan</db:code></db:para>
</db:td>
<db:td><db:code>80</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Balinese</db:code></db:para>
</db:td>
<db:td><db:code>62</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Bamum</db:code></db:para>
</db:td>
<db:td><db:code>84</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_BassaVah (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>104</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Batak</db:code></db:para>
</db:td>
<db:td><db:code>93</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Bengali</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Bhaiksuki (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>133</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Bopomofo</db:code></db:para>
</db:td>
<db:td><db:code>36</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Brahmi</db:code></db:para>
</db:td>
<db:td><db:code>94</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Braille</db:code></db:para>
</db:td>
<db:td><db:code>54</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Buginese</db:code></db:para>
</db:td>
<db:td><db:code>55</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Buhid</db:code></db:para>
</db:td>
<db:td><db:code>44</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_CanadianAboriginal</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Carian</db:code></db:para>
</db:td>
<db:td><db:code>75</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_CaucasianAlbanian (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>103</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Chakma</db:code></db:para>
</db:td>
<db:td><db:code>96</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Cham</db:code></db:para>
</db:td>
<db:td><db:code>77</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Cherokee</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Chorasmian (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>153</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Coptic</db:code></db:para>
</db:td>
<db:td><db:code>46</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Cuneiform</db:code></db:para>
</db:td>
<db:td><db:code>63</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Cypriot</db:code></db:para>
</db:td>
<db:td><db:code>53</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_CyproMinoan (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>157</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Cyrillic</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Deseret</db:code></db:para>
</db:td>
<db:td><db:code>41</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Devanagari</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_DivesAkuru (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>154</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Dogra (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>142</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Duployan (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>105</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_EgyptianHieroglyphs</db:code></db:para>
</db:td>
<db:td><db:code>81</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Elbasan (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>106</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Elymaic (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>149</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Ethiopic</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Garay (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>164</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Georgian</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Glagolitic</db:code></db:para>
</db:td>
<db:td><db:code>57</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Gothic</db:code></db:para>
</db:td>
<db:td><db:code>40</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Grantha (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>107</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Greek</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Gujarati</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_GunjalaGondi (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>143</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Gurmukhi</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_GurungKhema (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>165</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Han</db:code></db:para>
</db:td>
<db:td><db:code>37</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Hangul</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_HanifiRohingya (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>144</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Hanunoo</db:code></db:para>
</db:td>
<db:td><db:code>43</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Hatran (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>128</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Hebrew</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Hiragana</db:code></db:para>
</db:td>
<db:td><db:code>34</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_ImperialAramaic</db:code></db:para>
</db:td>
<db:td><db:code>87</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_InscriptionalPahlavi</db:code></db:para>
</db:td>
<db:td><db:code>90</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_InscriptionalParthian</db:code></db:para>
</db:td>
<db:td><db:code>89</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Javanese</db:code></db:para>
</db:td>
<db:td><db:code>85</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Kaithi</db:code></db:para>
</db:td>
<db:td><db:code>92</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Kannada</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Katakana</db:code></db:para>
</db:td>
<db:td><db:code>35</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Kawi (since Qt 6.5)</db:code></db:para>
</db:td>
<db:td><db:code>162</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_KayahLi</db:code></db:para>
</db:td>
<db:td><db:code>72</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Kharoshthi</db:code></db:para>
</db:td>
<db:td><db:code>61</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_KhitanSmallScript (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>155</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Khmer</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Khojki (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>109</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Khudawadi (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>123</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_KiratRai (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>166</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Lao</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Latin</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Lepcha</db:code></db:para>
</db:td>
<db:td><db:code>68</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Limbu</db:code></db:para>
</db:td>
<db:td><db:code>47</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_LinearA (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>110</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_LinearB</db:code></db:para>
</db:td>
<db:td><db:code>49</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Lisu</db:code></db:para>
</db:td>
<db:td><db:code>83</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Lycian</db:code></db:para>
</db:td>
<db:td><db:code>74</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Lydian</db:code></db:para>
</db:td>
<db:td><db:code>76</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Mahajani (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>111</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Makasar (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>145</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Malayalam</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Mandaic</db:code></db:para>
</db:td>
<db:td><db:code>95</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Manichaean (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>112</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Marchen (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>134</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_MasaramGondi (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>138</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Medefaidrin (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>146</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_MeeteiMayek</db:code></db:para>
</db:td>
<db:td><db:code>86</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_MendeKikakui (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>113</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_MeroiticCursive</db:code></db:para>
</db:td>
<db:td><db:code>97</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_MeroiticHieroglyphs</db:code></db:para>
</db:td>
<db:td><db:code>98</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Miao</db:code></db:para>
</db:td>
<db:td><db:code>99</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Modi (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>114</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Mongolian</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Mro (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>115</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Multani (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>129</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Myanmar</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Nabataean (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>117</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_NagMundari (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>163</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Nandinagari (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>150</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Newa (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>135</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_NewTaiLue</db:code></db:para>
</db:td>
<db:td><db:code>56</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Nko</db:code></db:para>
</db:td>
<db:td><db:code>66</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Nushu (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>139</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_NyiakengPuachueHmong (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>151</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Ogham</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OlChiki</db:code></db:para>
</db:td>
<db:td><db:code>69</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OlOnal (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>167</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldHungarian (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>130</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldItalic</db:code></db:para>
</db:td>
<db:td><db:code>39</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldNorthArabian (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>116</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldPermic (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>120</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldPersian</db:code></db:para>
</db:td>
<db:td><db:code>60</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldSogdian (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>147</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldSouthArabian</db:code></db:para>
</db:td>
<db:td><db:code>88</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldTurkic</db:code></db:para>
</db:td>
<db:td><db:code>91</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_OldUyghur (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>158</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Oriya</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Osage (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>136</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Osmanya</db:code></db:para>
</db:td>
<db:td><db:code>52</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_PahawhHmong (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>108</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Palmyrene (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>118</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_PauCinHau (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>119</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_PhagsPa</db:code></db:para>
</db:td>
<db:td><db:code>65</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Phoenician</db:code></db:para>
</db:td>
<db:td><db:code>64</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_PsalterPahlavi (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>121</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Rejang</db:code></db:para>
</db:td>
<db:td><db:code>73</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Runic</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Samaritan</db:code></db:para>
</db:td>
<db:td><db:code>82</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Saurashtra</db:code></db:para>
</db:td>
<db:td><db:code>71</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Sharada</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Shavian</db:code></db:para>
</db:td>
<db:td><db:code>51</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Siddham (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>122</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_SignWriting (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>131</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Sinhala</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Sogdian (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>148</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_SoraSompeng</db:code></db:para>
</db:td>
<db:td><db:code>101</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Soyombo (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>140</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Sundanese</db:code></db:para>
</db:td>
<db:td><db:code>67</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Sunuwar (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>168</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_SylotiNagri</db:code></db:para>
</db:td>
<db:td><db:code>59</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Syriac</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tagalog</db:code></db:para>
</db:td>
<db:td><db:code>42</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tagbanwa</db:code></db:para>
</db:td>
<db:td><db:code>45</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_TaiLe</db:code></db:para>
</db:td>
<db:td><db:code>48</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_TaiTham</db:code></db:para>
</db:td>
<db:td><db:code>78</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_TaiViet</db:code></db:para>
</db:td>
<db:td><db:code>79</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Takri</db:code></db:para>
</db:td>
<db:td><db:code>102</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tamil</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tangut (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>137</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tangsa (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>159</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Telugu</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Thaana</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Thai</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tibetan</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tifinagh</db:code></db:para>
</db:td>
<db:td><db:code>58</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Tirhuta (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>124</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Todhri (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>169</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Toto (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>160</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_TuluTigalari (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>170</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Ugaritic</db:code></db:para>
</db:td>
<db:td><db:code>50</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Vai</db:code></db:para>
</db:td>
<db:td><db:code>70</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Vithkuqi (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>161</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Wancho (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>152</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_WarangCiti (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>125</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Yezidi (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>156</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_Yi</db:code></db:para>
</db:td>
<db:td><db:code>38</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Script_ZanabazarSquare (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>141</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#script">script</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="SpecialCharacter-enum">
<db:title>enum QChar::SpecialCharacter</db:title>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0x0000</db:code></db:td>
<db:td>
<db:para>A <db:link xlink:href="qchar.xml">QChar</db:link> with this value <db:link xlink:href="qchar.xml#isNull">isNull</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Tabulation</db:code></db:para>
</db:td>
<db:td><db:code>0x0009</db:code></db:td>
<db:td>
<db:para>Character tabulation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::LineFeed</db:code></db:para>
</db:td>
<db:td><db:code>0x000a</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::FormFeed</db:code></db:para>
</db:td>
<db:td><db:code>0x000c</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::CarriageReturn</db:code></db:para>
</db:td>
<db:td><db:code>0x000d</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Space</db:code></db:para>
</db:td>
<db:td><db:code>0x0020</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Nbsp</db:code></db:para>
</db:td>
<db:td><db:code>0x00a0</db:code></db:td>
<db:td>
<db:para>Non-breaking space.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::SoftHyphen</db:code></db:para>
</db:td>
<db:td><db:code>0x00ad</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::ReplacementCharacter</db:code></db:para>
</db:td>
<db:td><db:code>0xfffd</db:code></db:td>
<db:td>
<db:para>The character shown when a font has no glyph for a certain codepoint. A special question mark character is often used. Codecs use this codepoint when input data cannot be represented in Unicode.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::ObjectReplacementCharacter</db:code></db:para>
</db:td>
<db:td><db:code>0xfffc</db:code></db:td>
<db:td>
<db:para>Used to represent an object such as an image when such objects cannot be presented.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::ByteOrderMark</db:code></db:para>
</db:td>
<db:td><db:code>0xfeff</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::ByteOrderSwapped</db:code></db:para>
</db:td>
<db:td><db:code>0xfffe</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::ParagraphSeparator</db:code></db:para>
</db:td>
<db:td><db:code>0x2029</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::LineSeparator</db:code></db:para>
</db:td>
<db:td><db:code>0x2028</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::VisualTabCharacter (since Qt 6.2)</db:code></db:para>
</db:td>
<db:td><db:code>0x2192</db:code></db:td>
<db:td>
<db:para>Used to represent a tabulation as a horizontal arrow.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::LastValidCodePoint</db:code></db:para>
</db:td>
<db:td><db:code>0x10ffff</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="UnicodeVersion-enum">
<db:title>enum QChar::UnicodeVersion</db:title>
<db:para>Specifies which version of the <db:link xlink:href="https://www.unicode.org/">Unicode standard</db:link> introduced a certain character.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_1_1</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Version 1.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_2_0</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Version 2.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_2_1_2</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Version 2.1.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_3_0</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Version 3.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_3_1</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>Version 3.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_3_2</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>Version 3.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_4_0</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>Version 4.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_4_1</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>Version 4.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_5_0</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>Version 5.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_5_1</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td>
<db:para>Version 5.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_5_2</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td>
<db:para>Version 5.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_6_0</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td>
<db:para>Version 6.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_6_1</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td>
<db:para>Version 6.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_6_2</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td>
<db:para>Version 6.2</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_6_3 (since Qt 5.3)</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td>
<db:para>Version 6.3</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_7_0 (since Qt 5.5)</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td>
<db:para>Version 7.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_8_0 (since Qt 5.6)</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td>
<db:para>Version 8.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_9_0 (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td>
<db:para>Version 9.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_10_0 (since Qt 5.11)</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td>
<db:para>Version 10.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_11_0 (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td>
<db:para>Version 11.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_12_0 (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td>
<db:para>Version 12.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_12_1 (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td>
<db:para>Version 12.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_13_0 (since Qt 5.15)</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td>
<db:para>Version 13.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_14_0 (since Qt 6.3)</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td>
<db:para>Version 14.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_15_0 (since Qt 6.5)</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td>
<db:para>Version 15.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_15_1 (since Qt 6.8)</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td>
<db:para>Version 15.1</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_16_0 (since Qt 6.9)</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td>
<db:para>Version 16.0</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qchar.xml">QChar</db:link></db:emphasis>::Unicode_Unassigned</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The value is not assigned to any character in version 8.0 of Unicode.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#unicodeVersion">unicodeVersion</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#currentUnicodeVersion">currentUnicodeVersion</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QChar">
<db:title>[constexpr noexcept] QChar::QChar()</db:title>
<db:para>Constructs a null <db:link xlink:href="qchar.xml">QChar</db:link> ('\0').</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QChar-1">
<db:title>[constexpr noexcept] QChar::QChar(QChar::SpecialCharacter <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for the predefined character value <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-2">
<db:title>[constexpr noexcept] QChar::QChar(QLatin1Char <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> corresponding to ASCII/Latin-1 character <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-3">
<db:title>[constexpr noexcept] QChar::QChar(char <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> corresponding to ASCII/Latin-1 character <db:code role="parameter">ch</db:code>.</db:para>
<db:note>
<db:para>This constructor is not available when <db:code>QT_NO_CAST_FROM_ASCII</db:code> is defined.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QChar-4">
<db:title>[constexpr noexcept] QChar::QChar(char16_t <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> corresponding to the UTF-16 character <db:code role="parameter">ch</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-5">
<db:title>[explicit constexpr noexcept] QChar::QChar(int <db:emphasis>code</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for the character with Unicode code point <db:code role="parameter">code</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-6">
<db:title>[constexpr noexcept] QChar::QChar(short <db:emphasis>code</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for the character with Unicode code point <db:code role="parameter">code</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-7">
<db:title>[explicit constexpr noexcept] QChar::QChar(uchar <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> corresponding to ASCII/Latin-1 character <db:code role="parameter">ch</db:code>.</db:para>
<db:note>
<db:para>This constructor is not available when <db:code>QT_NO_CAST_FROM_ASCII</db:code> or <db:code>QT_RESTRICTED_CAST_FROM_ASCII</db:code> is defined.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#QT_NO_CAST_FROM_ASCII">QT_NO_CAST_FROM_ASCII</db:link></db:member>
<db:member><db:link xlink:href="qstring.xml#QT_RESTRICTED_CAST_FROM_ASCII">QT_RESTRICTED_CAST_FROM_ASCII</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QChar-8">
<db:title>[explicit constexpr noexcept] QChar::QChar(uint <db:emphasis>code</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for the character with Unicode code point <db:code role="parameter">code</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-9">
<db:title>[constexpr noexcept] QChar::QChar(ushort <db:emphasis>code</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for the character with Unicode code point <db:code role="parameter">code</db:code>.</db:para>
</db:section>
<db:section xml:id="QChar-10">
<db:title>[constexpr noexcept] QChar::QChar(wchar_t <db:emphasis>ch</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> corresponding to the wide character <db:code role="parameter">ch</db:code>.</db:para>
<db:note>
<db:para>This constructor is only available on Windows.</db:para>
</db:note>
</db:section>
<db:section xml:id="QChar-11">
<db:title>[explicit constexpr noexcept] QChar::QChar(uchar <db:emphasis>cell</db:emphasis>, uchar <db:emphasis>row</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> for Unicode cell <db:code role="parameter">cell</db:code> in row <db:code role="parameter">row</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#cell">cell</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="category">
<db:title>[noexcept] QChar::Category QChar::category() const</db:title>
<db:para>Returns the character's category.</db:para>
</db:section>
<db:section xml:id="category-1">
<db:title>[static noexcept] QChar::Category QChar::category(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the category of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="cell">
<db:title>[constexpr noexcept] uchar QChar::cell() const</db:title>
<db:para>Returns the cell (least significant byte) of the Unicode character.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#row">row</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="combiningClass">
<db:title>[noexcept] unsigned char QChar::combiningClass() const</db:title>
<db:para>Returns the combining class for the character as defined in the Unicode standard. This is mainly useful as a positioning hint for marks attached to a base character.</db:para>
<db:para>The Qt text rendering engine uses this information to correctly position non-spacing marks around a base character.</db:para>
</db:section>
<db:section xml:id="combiningClass-1">
<db:title>[static noexcept] unsigned char QChar::combiningClass(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the combining class for the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code>, as defined in the Unicode standard.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="currentUnicodeVersion">
<db:title>[static noexcept] QChar::UnicodeVersion QChar::currentUnicodeVersion()</db:title>
<db:para>Returns the most recent supported Unicode version.</db:para>
</db:section>
<db:section xml:id="decomposition">
<db:title>QString QChar::decomposition() const</db:title>
<db:para>Decomposes a character into it's constituent parts. Returns an empty string if no decomposition exists.</db:para>
</db:section>
<db:section xml:id="decomposition-1">
<db:title>[static] QString QChar::decomposition(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Decomposes the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> into it's constituent parts. Returns an empty string if no decomposition exists.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="decompositionTag">
<db:title>[noexcept] QChar::Decomposition QChar::decompositionTag() const</db:title>
<db:para>Returns the tag defining the composition of the character. Returns <db:link xlink:href="qchar.xml#Decomposition-enum">QChar::NoDecomposition</db:link> if no decomposition exists.</db:para>
</db:section>
<db:section xml:id="decompositionTag-1">
<db:title>[static noexcept] QChar::Decomposition QChar::decompositionTag(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the tag defining the composition of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code>. Returns <db:link xlink:href="qchar.xml#Decomposition-enum">QChar::NoDecomposition</db:link> if no decomposition exists.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="digitValue">
<db:title>[noexcept] int QChar::digitValue() const</db:title>
<db:para>Returns the numeric value of the digit, or -1 if the character is not a digit.</db:para>
</db:section>
<db:section xml:id="digitValue-1">
<db:title>[static noexcept] int QChar::digitValue(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the numeric value of the digit specified by the UCS-4-encoded character, <db:code role="parameter">ucs4</db:code>, or -1 if the character is not a digit.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="direction">
<db:title>[noexcept] QChar::Direction QChar::direction() const</db:title>
<db:para>Returns the character's direction.</db:para>
</db:section>
<db:section xml:id="direction-1">
<db:title>[static noexcept] QChar::Direction QChar::direction(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the direction of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="fromLatin1">
<db:title>[static constexpr noexcept] QChar QChar::fromLatin1(char <db:emphasis>c</db:emphasis>)</db:title>
<db:para>Converts the Latin-1 character <db:code role="parameter">c</db:code> to its equivalent <db:link xlink:href="qchar.xml">QChar</db:link>. This is mainly useful for non-internationalized software.</db:para>
<db:para>An alternative is to use <db:link xlink:href="qlatin1char.xml">QLatin1Char</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#toLatin1">toLatin1</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#unicode">unicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromUcs2">
<db:title>[static constexpr noexcept, since 6.0] QChar QChar::fromUcs2(char16_t <db:emphasis>c</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qchar.xml">QChar</db:link> from UTF-16 character <db:code role="parameter">c</db:code>.</db:para>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#fromUcs4">fromUcs4</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromUcs4">
<db:title>[static constexpr noexcept, since 6.0] auto QChar::fromUcs4(char32_t <db:emphasis>c</db:emphasis>)</db:title>
<db:para>Returns an anonymous struct that</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>contains a <db:code>char16_t chars[2]</db:code> array,</db:para>
</db:listitem>
<db:listitem>
<db:para>can be implicitly converted to a <db:link xlink:href="qstringview.xml">QStringView</db:link>, and</db:para>
</db:listitem>
<db:listitem>
<db:para>iterated over with a C++11 ranged for loop.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>If <db:code role="parameter">c</db:code> requires surrogates, <db:code>chars[0]</db:code> contains the high surrogate and <db:code>chars[1]</db:code> the low surrogate, and the <db:link xlink:href="qstringview.xml">QStringView</db:link> has size 2. Otherwise, <db:code>chars[0]</db:code> contains <db:code role="parameter">c</db:code> and <db:code>chars[1]</db:code> is <db:link xlink:href="qchar.xml#isNull">null</db:link>, and the <db:link xlink:href="qstringview.xml">QStringView</db:link> has size 1.</db:para>
<db:para>This allows easy use of the result:</db:para>
<db:programlisting language="cpp">QString s;
s += QChar::fromUcs4(ch);
</db:programlisting>
<db:programlisting language="cpp">for (char16_t c16 : QChar::fromUcs4(ch))
    use(c16);
</db:programlisting>
<db:para>This function was introduced in Qt 6.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#fromUcs2">fromUcs2</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#requiresSurrogates">requiresSurrogates</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasMirrored">
<db:title>[noexcept] bool QChar::hasMirrored() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character should be reversed if the text direction is reversed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>A bit faster equivalent of (ch.<db:link xlink:href="qchar.xml#mirroredChar">mirroredChar</db:link>() != ch).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#mirroredChar">mirroredChar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasMirrored-1">
<db:title>[static noexcept] bool QChar::hasMirrored(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> should be reversed if the text direction is reversed; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>A bit faster equivalent of (<db:link xlink:href="qchar.xml#mirroredChar">QChar::mirroredChar</db:link>(ucs4) != ucs4).</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#mirroredChar">mirroredChar</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="highSurrogate">
<db:title>[static constexpr noexcept] char16_t QChar::highSurrogate(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>Returns the high surrogate part of a UCS-4-encoded code point. The returned result is undefined if <db:code role="parameter">ucs4</db:code> is smaller than 0x10000.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>ushort</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="isDigit">
<db:title>[constexpr noexcept] bool QChar::isDigit() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a decimal digit (<db:link xlink:href="qchar.xml#Category-enum">Number_DecimalDigit</db:link>); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isNumber">isNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDigit-1">
<db:title>[static constexpr noexcept] bool QChar::isDigit(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a decimal digit (<db:link xlink:href="qchar.xml#Category-enum">Number_DecimalDigit</db:link>); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isNumber">isNumber</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isHighSurrogate">
<db:title>[constexpr noexcept] bool QChar::isHighSurrogate() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qchar.xml">QChar</db:link> is the high part of a UTF16 surrogate (for example if its code point is in range [0xd800..0xdbff]); false otherwise.</db:para>
</db:section>
<db:section xml:id="isHighSurrogate-1">
<db:title>[static constexpr noexcept] bool QChar::isHighSurrogate(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is the high part of a UTF16 surrogate (for example if its code point is in range [0xd800..0xdbff]); false otherwise.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isLetter">
<db:title>[constexpr noexcept] bool QChar::isLetter() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a letter (Letter_* categories); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isLetter-1">
<db:title>[static constexpr noexcept] bool QChar::isLetter(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a letter (Letter_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isLetterOrNumber">
<db:title>[constexpr noexcept] bool QChar::isLetterOrNumber() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a letter or number (Letter_* or Number_* categories); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isLetterOrNumber-1">
<db:title>[static constexpr noexcept] bool QChar::isLetterOrNumber(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a letter or number (Letter_* or Number_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isLowSurrogate">
<db:title>[constexpr noexcept] bool QChar::isLowSurrogate() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qchar.xml">QChar</db:link> is the low part of a UTF16 surrogate (for example if its code point is in range [0xdc00..0xdfff]); false otherwise.</db:para>
</db:section>
<db:section xml:id="isLowSurrogate-1">
<db:title>[static constexpr noexcept] bool QChar::isLowSurrogate(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is the low part of a UTF16 surrogate (for example if its code point is in range [0xdc00..0xdfff]); false otherwise.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isLower">
<db:title>[constexpr noexcept] bool QChar::isLower() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a lowercase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Lowercase</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isUpper">isUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLower-1">
<db:title>[static constexpr noexcept] bool QChar::isLower(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a lowercase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Lowercase</db:link>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isUpper">isUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isMark">
<db:title>[noexcept] bool QChar::isMark() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a mark (Mark_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:para>See <db:link xlink:href="qchar.xml#Category-enum">QChar::Category</db:link> for more information regarding marks.</db:para>
</db:section>
<db:section xml:id="isMark-1">
<db:title>[static noexcept] bool QChar::isMark(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a mark (Mark_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isNonCharacter">
<db:title>[constexpr noexcept] bool QChar::isNonCharacter() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qchar.xml">QChar</db:link> is a non-character; false otherwise.</db:para>
<db:para>Unicode has a certain number of code points that are classified as &quot;non-characters:&quot; that is, they can be used for internal purposes in applications but cannot be used for text interchange. Those are the last two entries each Unicode Plane ([0xfffe..0xffff], [0x1fffe..0x1ffff], etc.) as well as the entries in range [0xfdd0..0xfdef].</db:para>
</db:section>
<db:section xml:id="isNonCharacter-1">
<db:title>[static constexpr noexcept] bool QChar::isNonCharacter(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a non-character; false otherwise.</db:para>
<db:para>Unicode has a certain number of code points that are classified as &quot;non-characters:&quot; that is, they can be used for internal purposes in applications but cannot be used for text interchange. Those are the last two entries each Unicode Plane ([0xfffe..0xffff], [0x1fffe..0x1ffff], etc.) as well as the entries in range [0xfdd0..0xfdef].</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isNull">
<db:title>[constexpr noexcept] bool QChar::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is the Unicode character 0x0000 ('\0'); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isNumber">
<db:title>[constexpr noexcept] bool QChar::isNumber() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a number (Number_* categories, not just 0-9); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isDigit">isDigit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNumber-1">
<db:title>[static constexpr noexcept] bool QChar::isNumber(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a number (Number_* categories, not just 0-9); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isDigit">isDigit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isPrint">
<db:title>[noexcept] bool QChar::isPrint() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a printable character; otherwise returns <db:code>false</db:code>. This is any character not of category <db:link xlink:href="qjniobject.xml#other">Other_</db:link>*.</db:para>
<db:para>Note that this gives no indication of whether the character is available in a particular font.</db:para>
</db:section>
<db:section xml:id="isPrint-1">
<db:title>[static noexcept] bool QChar::isPrint(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a printable character; otherwise returns <db:code>false</db:code>. This is any character not of category <db:link xlink:href="qjniobject.xml#other">Other_</db:link>*.</db:para>
<db:para>Note that this gives no indication of whether the character is available in a particular font.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isPunct">
<db:title>[noexcept] bool QChar::isPunct() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a punctuation mark (Punctuation_* categories); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isPunct-1">
<db:title>[static noexcept] bool QChar::isPunct(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a punctuation mark (Punctuation_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isSpace">
<db:title>[constexpr noexcept] bool QChar::isSpace() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a separator character (Separator_* categories or certain code points from <db:link xlink:href="qchar.xml#Category-enum">Other_Control</db:link> category); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isSpace-1">
<db:title>[static constexpr noexcept] bool QChar::isSpace(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a separator character (Separator_* categories or certain code points from <db:link xlink:href="qchar.xml#Category-enum">Other_Control</db:link> category); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isSurrogate">
<db:title>[constexpr noexcept] bool QChar::isSurrogate() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qchar.xml">QChar</db:link> contains a code point that is in either the high or the low part of the UTF-16 surrogate range (for example if its code point is in range [0xd800..0xdfff]); false otherwise.</db:para>
</db:section>
<db:section xml:id="isSurrogate-1">
<db:title>[static constexpr noexcept] bool QChar::isSurrogate(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> contains a code point that is in either the high or the low part of the UTF-16 surrogate range (for example if its code point is in range [0xd800..0xdfff]); false otherwise.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isSymbol">
<db:title>[noexcept] bool QChar::isSymbol() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a symbol (Symbol_* categories); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isSymbol-1">
<db:title>[static noexcept] bool QChar::isSymbol(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a symbol (Symbol_* categories); otherwise returns <db:code>false</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="isTitleCase">
<db:title>[constexpr noexcept] bool QChar::isTitleCase() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is a titlecase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Titlecase</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isLower">isLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toTitleCase">toTitleCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTitleCase-1">
<db:title>[static constexpr noexcept] bool QChar::isTitleCase(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a titlecase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Titlecase</db:link>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isLower">isLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toTitleCase">toTitleCase</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUpper">
<db:title>[constexpr noexcept] bool QChar::isUpper() const</db:title>
<db:para>Returns <db:code>true</db:code> if the character is an uppercase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Uppercase</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isLower">isLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUpper-1">
<db:title>[static constexpr noexcept] bool QChar::isUpper(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is an uppercase letter, for example <db:link xlink:href="qchar.xml#category">category</db:link>() is <db:link xlink:href="qchar.xml#Category-enum">Letter_Uppercase</db:link>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#isLower">isLower</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toUpper">toUpper</db:link>()</db:member>
<db:member><db:link xlink:href="qchar.xml#toLower">toLower</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="joiningType">
<db:title>[noexcept] QChar::JoiningType QChar::joiningType() const</db:title>
<db:para>Returns information about the joining type attributes of the character (needed for certain languages such as Arabic or Syriac).</db:para>
</db:section>
<db:section xml:id="joiningType-1">
<db:title>[static noexcept] QChar::JoiningType QChar::joiningType(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns information about the joining type attributes of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> (needed for certain languages such as Arabic or Syriac).</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="lowSurrogate">
<db:title>[static constexpr noexcept] char16_t QChar::lowSurrogate(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>Returns the low surrogate part of a UCS-4-encoded code point. The returned result is undefined if <db:code role="parameter">ucs4</db:code> is smaller than 0x10000.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>ushort</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="mirroredChar">
<db:title>[noexcept] QChar QChar::mirroredChar() const</db:title>
<db:para>Returns the mirrored character if this character is a mirrored character; otherwise returns the character itself.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#hasMirrored">hasMirrored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mirroredChar-1">
<db:title>[static noexcept] char32_t QChar::mirroredChar(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the mirrored character if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> is a mirrored character; otherwise returns the character itself.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>uint</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#hasMirrored">hasMirrored</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="requiresSurrogates">
<db:title>[static constexpr noexcept] bool QChar::requiresSurrogates(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> can be split into the high and low parts of a UTF16 surrogate (for example if its code point is greater than or equals to 0x10000); false otherwise.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="row">
<db:title>[constexpr noexcept] uchar QChar::row() const</db:title>
<db:para>Returns the row (most significant byte) of the Unicode character.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#cell">cell</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="script">
<db:title>[noexcept] QChar::Script QChar::script() const</db:title>
<db:para>Returns the Unicode script property value for this character.</db:para>
</db:section>
<db:section xml:id="script-1">
<db:title>[static noexcept] QChar::Script QChar::script(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the Unicode script property value for the character specified in its UCS-4-encoded form as <db:code role="parameter">ucs4</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
<db:section xml:id="surrogateToUcs4">
<db:title>[static constexpr noexcept] char32_t QChar::surrogateToUcs4(char16_t <db:emphasis>high</db:emphasis>, char16_t <db:emphasis>low</db:emphasis>)</db:title>
<db:para>Converts a UTF16 surrogate pair with the given <db:code role="parameter">high</db:code> and <db:code role="parameter">low</db:code> values to it's UCS-4-encoded code point.</db:para>
<db:note>
<db:para>Before Qt 6, this function took <db:code>ushort</db:code> arguments and returned <db:code>uint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="surrogateToUcs4-1">
<db:title>[static constexpr noexcept] char32_t QChar::surrogateToUcs4(QChar <db:emphasis>high</db:emphasis>, QChar <db:emphasis>low</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts a UTF16 surrogate pair (<db:code role="parameter">high</db:code>, <db:code role="parameter">low</db:code>) to it's UCS-4-encoded code point.</db:para>
<db:note>
<db:para>Before Qt 6, this function returned <db:code>uint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="toCaseFolded">
<db:title>[noexcept] QChar QChar::toCaseFolded() const</db:title>
<db:para>Returns the case folded equivalent of the character. For most Unicode characters this is the same as <db:link xlink:href="qchar.xml#toLower">toLower</db:link>().</db:para>
</db:section>
<db:section xml:id="toCaseFolded-1">
<db:title>[static noexcept] char32_t QChar::toCaseFolded(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the case folded equivalent of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code>. For most Unicode characters this is the same as <db:link xlink:href="qchar.xml#toLower">toLower</db:link>().</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>uint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="toLatin1">
<db:title>[constexpr noexcept] char QChar::toLatin1() const</db:title>
<db:para>Returns the Latin-1 character equivalent to the <db:link xlink:href="qchar.xml">QChar</db:link>, or 0. This is mainly useful for non-internationalized software.</db:para>
<db:note>
<db:para>It is not possible to distinguish a non-Latin-1 character from a Latin-1 0 (NUL) character. Prefer to use <db:link xlink:href="qchar.xml#unicode">unicode</db:link>(), which does not have this ambiguity.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qchar.xml#unicode">unicode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toLower">
<db:title>[noexcept] QChar QChar::toLower() const</db:title>
<db:para>Returns the lowercase equivalent if the character is uppercase or titlecase; otherwise returns the character itself.</db:para>
</db:section>
<db:section xml:id="toLower-1">
<db:title>[static noexcept] char32_t QChar::toLower(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the lowercase equivalent of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> if the character is uppercase or titlecase; otherwise returns the character itself.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>uint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="toTitleCase">
<db:title>[noexcept] QChar QChar::toTitleCase() const</db:title>
<db:para>Returns the title case equivalent if the character is lowercase or uppercase; otherwise returns the character itself.</db:para>
</db:section>
<db:section xml:id="toTitleCase-1">
<db:title>[static noexcept] char32_t QChar::toTitleCase(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the title case equivalent of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> if the character is lowercase or uppercase; otherwise returns the character itself.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>uint</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="toUpper">
<db:title>[noexcept] QChar QChar::toUpper() const</db:title>
<db:para>Returns the uppercase equivalent if the character is lowercase or titlecase; otherwise returns the character itself.</db:para>
<db:note>
<db:para>This function also returns the original character in the rare case of the uppercase form of the character requiring two or more characters.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUpper">QString::toUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toUpper-1">
<db:title>[static noexcept] char32_t QChar::toUpper(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the uppercase equivalent of the UCS-4-encoded character specified by <db:code role="parameter">ucs4</db:code> if the character is lowercase or titlecase; otherwise returns the character itself.</db:para>
<db:note>
<db:para>This function also returns the original character in the rare case of the uppercase form of the character requiring two or more characters.</db:para>
</db:note>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument and returned <db:code>uint</db:code>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#toUpper">QString::toUpper</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="unicode">
<db:title>[constexpr noexcept] char16_t &amp;QChar::unicode()</db:title>
<db:para>Returns a reference to the numeric Unicode value of the <db:link xlink:href="qchar.xml">QChar</db:link>.</db:para>
</db:section>
<db:section xml:id="unicode-1">
<db:title>[constexpr noexcept] char16_t QChar::unicode() const</db:title>
<db:para>Returns the numeric Unicode value of the <db:link xlink:href="qchar.xml">QChar</db:link>.</db:para>
</db:section>
<db:section xml:id="unicodeVersion">
<db:title>[noexcept] QChar::UnicodeVersion QChar::unicodeVersion() const</db:title>
<db:para>Returns the Unicode version that introduced this character.</db:para>
</db:section>
<db:section xml:id="unicodeVersion-1">
<db:title>[static noexcept] QChar::UnicodeVersion QChar::unicodeVersion(char32_t <db:emphasis>ucs4</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Returns the Unicode version that introduced the character specified in its UCS-4-encoded form as <db:code role="parameter">ucs4</db:code>.</db:para>
<db:note>
<db:para>Before Qt 6, this function took a <db:code>uint</db:code> argument.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr noexcept] bool operator!=(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">c1</db:code> and <db:code role="parameter">c2</db:code> are not the same Unicode character; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[constexpr noexcept] bool operator&lt;(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the numeric Unicode value of <db:code role="parameter">c1</db:code> is less than that of <db:code role="parameter">c2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>out</db:emphasis>, QChar <db:emphasis>chr</db:emphasis>)</db:title>
<db:para>Writes the char <db:code role="parameter">chr</db:code> to the stream <db:code role="parameter">out</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[constexpr noexcept] bool operator&lt;=(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the numeric Unicode value of <db:code role="parameter">c1</db:code> is less than or equal to that of <db:code role="parameter">c2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr noexcept] bool operator==(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if <db:code role="parameter">c1</db:code> and <db:code role="parameter">c2</db:code> are the same Unicode character; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[constexpr noexcept] bool operator&gt;(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the numeric Unicode value of <db:code role="parameter">c1</db:code> is greater than that of <db:code role="parameter">c2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[constexpr noexcept] bool operator&gt;=(const QChar &amp;<db:emphasis>c1</db:emphasis>, const QChar &amp;<db:emphasis>c2</db:emphasis>)</db:title>
<db:para>Returns <db:code>true</db:code> if the numeric Unicode value of <db:code role="parameter">c1</db:code> is greater than or equal to that of <db:code role="parameter">c2</db:code>; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-2">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>in</db:emphasis>, QChar &amp;<db:emphasis>chr</db:emphasis>)</db:title>
<db:para>Reads a char from the stream <db:code role="parameter">in</db:code> into char <db:code role="parameter">chr</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="datastreamformat.xml">Serializing Qt Data Types</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
