<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDesignerCustomWidgetCollectionInterface Class</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 5.11.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link> class allows you to include several custom widgets in one single library.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDesignerCustomWidgetCollectionInterface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += designer</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When implementing a custom widget plugin, you build it as a separate library. If you want to include several custom widget plugins in the same library, you must in addition subclass <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link>.</db:para>
<db:para><db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml">QDesignerCustomWidgetCollectionInterface</db:link> contains one single function returning a list of the collection's <db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link> objects. For example, if you have several custom widgets <db:code>CustomWidgetOne</db:code>, <db:code>CustomWidgetTwo</db:code> and <db:code>CustomWidgetThree</db:code>, the class definition may look like this:</db:para>
<db:programlisting language="cpp">#include customwidgetoneinterface.h
#include customwidgettwointerface.h
#include customwidgetthreeinterface.h

#include &amp;lt;QtDesigner/QtDesigner&amp;gt;
#include &amp;lt;QtCore/qplugin.h&amp;gt;

class MyCustomWidgets: public QObject, public QDesignerCustomWidgetCollectionInterface
{
    Q_OBJECT
    Q_PLUGIN_METADATA(IID &quot;org.qt-project.Qt.QDesignerCustomWidgetCollectionInterface&quot;)
    Q_INTERFACES(QDesignerCustomWidgetCollectionInterface)

public:
    MyCustomWidgets(QObject *parent = 0);

    QList&amp;lt;QDesignerCustomWidgetInterface*&amp;gt; customWidgets() const override;

private:
    QList&amp;lt;QDesignerCustomWidgetInterface*&amp;gt; widgets;
};
</db:programlisting>
<db:para>In the class constructor you add the interfaces to your custom widgets to the list which you return in the <db:link xlink:href="qdesignercustomwidgetcollectioninterface.xml#customWidgets">customWidgets</db:link>() function:</db:para>
<db:programlisting language="cpp">MyCustomWidgets::MyCustomWidgets(QObject *parent)
        : QObject(parent)
{
    widgets.append(new CustomWidgetOneInterface(this));
    widgets.append(new CustomWidgetTwoInterface(this));
    widgets.append(new CustomWidgetThreeInterface(this));
}

QList&amp;lt;QDesignerCustomWidgetInterface*&amp;gt; MyCustomWidgets::customWidgets() const
{
    return widgets;
}
</db:programlisting>
<db:para>Note that instead of exporting each custom widget plugin using the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro, you export the entire collection. The <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro ensures that <db:emphasis>Qt Designer</db:emphasis> can access and construct the custom widgets. Without this macro, there is no way for <db:emphasis>Qt Designer</db:emphasis> to use them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdesignercustomwidgetinterface.xml">QDesignerCustomWidgetInterface</db:link></db:member>
<db:member><db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QDesignerCustomWidgetCollectionInterface">
<db:title>[virtual] QDesignerCustomWidgetCollectionInterface::~QDesignerCustomWidgetCollectionInterface()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDesignerCustomWidgetCollectionInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDesignerCustomWidgetCollectionInterface()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the custom widget collection interface.</db:para>
</db:section>
<db:section xml:id="customWidgets">
<db:title>[pure virtual] QList&lt;QDesignerCustomWidgetInterface *&gt; QDesignerCustomWidgetCollectionInterface::customWidgets() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QDesignerCustomWidgetInterface *&gt;</db:type>
<db:methodname>customWidgets</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QDesignerCustomWidgetInterface *&gt; customWidgets() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of interfaces to the collection's custom widgets.</db:para>
</db:section>
</db:section>
</db:article>
