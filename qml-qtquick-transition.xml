<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Transition QML Type</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Defines animated transitions that occur on state changes.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick 2.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Transition is part of <db:simplelist><db:member>qtquick-transitions-animations</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A Transition defines the animations to be applied when a <db:link xlink:href="qml-qtquick-state.xml">State</db:link> change occurs.</db:para>
<db:para>For example, the following <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> has two states: the default state, and an added &quot;moved&quot; state. In the &quot;moved state, the rectangle's position changes to (50, 50). The added Transition specifies that when the rectangle changes between the default and the &quot;moved&quot; state, any changes to the x and y properties should be animated, using an Easing.InOutQuad.</db:para>
<db:programlisting language="qml">import QtQuick 2.0

Rectangle {
    id: rect
    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea {
        id: mouseArea
        anchors.fill: parent
    }

    states: State {
        name: &quot;moved&quot;; when: mouseArea.pressed
        PropertyChanges { target: rect; x: 50; y: 50 }
    }

    transitions: Transition {
        NumberAnimation { properties: &quot;x,y&quot;; easing.type: Easing.InOutQuad }
    }
}
</db:programlisting>
<db:para>Notice the example does not require <db:link xlink:href="qml-qtquick-propertyanimation.xml#to-prop">to</db:link> and <db:link xlink:href="qml-qtquick-propertyanimation.xml#from-prop">from</db:link> values for the <db:link xlink:href="qml-qtquick-numberanimation.xml">NumberAnimation</db:link>. As a convenience, these properties are automatically set to the values of x and y before and after the state change; the from values are provided by the current values of x and y, and the to values are provided by the <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> object. If you wish, you can provide <db:link xlink:href="qml-qtquick-propertyanimation.xml#to-prop">to</db:link> and <db:link xlink:href="qml-qtquick-propertyanimation.xml#from-prop">from</db:link> values anyway to override the default values.</db:para>
<db:para>By default, a Transition's animations are applied for any state change in the parent item. The Transition <db:link xlink:href="qml-qtquick-transition.xml#from-prop">from</db:link> and <db:link xlink:href="qml-qtquick-transition.xml#to-prop">to</db:link> values can be set to restrict the animations to only be applied when changing from one particular state to another.</db:para>
<db:para>To define multiple transitions, specify <db:link xlink:href="qml-qtquick-item.xml#transitions-prop">Item::transitions</db:link> as a list:</db:para>
<db:programlisting language="qml">transitions: [
  Transition {
      from: &quot;stop&quot;; to: &quot;go&quot;
      PropertyAnimation { target: stopLight
                          properties: &quot;color&quot;; duration: 1000 }
  },
  Transition {
      from: &quot;go&quot;; to: &quot;stop&quot;
      PropertyAnimation { target: goLight
                          properties: &quot;color&quot;; duration: 1000 }
  } ]
</db:programlisting>
<db:para>If multiple Transitions are specified, only a single (best-matching) Transition will be applied for any particular state change. In the example above, when changing to state1, the first transition will be used, rather than the more generic second transition.</db:para>
<db:para>If a state change has a Transition that matches the same property as a <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link>, the Transition animation overrides the <db:link xlink:href="qml-qtquick-behavior.xml">Behavior</db:link> for that state change.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions in Qt Quick</db:link></db:member>
<db:member><db:link xlink:href="qtquick-animation-example.xml#states">States example</db:link></db:member>
<db:member><db:link xlink:href="qtquick-statesanimations-states.xml">Qt Quick States</db:link></db:member>
<db:member><db:link xlink:href="qtqml-index.xml">Qt QML</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="from-prop">
<db:title>from : string</db:title>
<db:bridgehead renderas="sect2">to : string</db:bridgehead><db:para>These properties indicate the state changes that trigger the transition.</db:para>
<db:para>The default values for these properties is &quot;*&quot; (that is, any state).</db:para>
<db:para>For example, the following transition has not set the to and from properties, so the animation is always applied when changing between the two states (i.e. when the mouse is pressed and released).</db:para>
<db:programlisting language="qml">Rectangle {
    id: rect
    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea { id: mouseArea; anchors.fill: parent }

    states: State {
        name: &quot;brighter&quot;; when: mouseArea.pressed
        PropertyChanges { target: rect; color: &quot;yellow&quot; }
    }

    transitions: Transition {
        ColorAnimation { duration: 1000 }
    }
}
</db:programlisting>
<db:para>If the transition was changed to this:</db:para>
<db:programlisting language="qml">transitions: Transition {
    to: &quot;brighter&quot;
    ColorAnimation { duration: 1000 }
}
</db:programlisting>
<db:para>The animation would only be applied when changing from the default state to the &quot;brighter&quot; state (i.e. when the mouse is pressed, but not on release).</db:para>
<db:para>Multiple to and from values can be set by using a comma-separated string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-transition.xml#reversible-prop">reversible</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="animations-prop">
<db:title>[read-only] animations : list&lt;Animation&gt;</db:title>
<db:para>This property holds a list of the animations to be run for this transition.</db:para>
<db:programlisting language="qml">transitions: Transition {
    PropertyAnimation { duration: 3000 }
    ColorAnimation { duration: 3000 }
}
</db:programlisting>
<db:para>The top-level animations are run in parallel. To run them sequentially, define them within a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link>:</db:para>
<db:programlisting language="qml">transitions: Transition {
    SequentialAnimation {
        PropertyAnimation { property: &quot;x&quot;; duration: 1000 }
        ColorAnimation { duration: 1000 }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>This property holds whether the Transition will be run when moving from the from state to the to state.</db:para>
<db:para>By default a Transition is enabled.</db:para>
<db:para>Note that in some circumstances disabling a Transition may cause an alternative Transition to be used in its place. In the following example, although the first Transition has been set to animate changes from &quot;state1&quot; to &quot;state2&quot;, this transition has been disabled by setting enabled to false, so any such state change will actually be animated by the second Transition instead.</db:para>
<db:programlisting language="qml">Item {
    states: [
        State { name: &quot;state1&quot; },
        State { name: &quot;state2&quot; }
    ]
    transitions: [
        Transition { from: &quot;state1&quot;; to: &quot;state2&quot;; enabled: false },
        Transition {
            // ...
        }
    ]
}
</db:programlisting>
</db:section>
<db:section xml:id="reversible-prop">
<db:title>reversible : bool</db:title>
<db:para>This property holds whether the transition should be automatically reversed when the conditions that triggered this transition are reversed.</db:para>
<db:para>The default value is false.</db:para>
<db:para>By default, transitions run in parallel and are applied to all state changes if the <db:link xlink:href="qml-qtquick-transition.xml#from-prop">from</db:link> and <db:link xlink:href="qml-qtquick-transition.xml#to-prop">to</db:link> states have not been set. In this situation, the transition is automatically applied when a state change is reversed, and it is not necessary to set this property to reverse the transition.</db:para>
<db:para>However, if a <db:link xlink:href="qml-qtquick-sequentialanimation.xml">SequentialAnimation</db:link> is used, or if the <db:link xlink:href="qml-qtquick-transition.xml#from-prop">from</db:link> or <db:link xlink:href="qml-qtquick-transition.xml#to-prop">to</db:link> properties have been set, this property will need to be set to reverse a transition when a state change is reverted. For example, the following transition applies a sequential animation when the mouse is pressed, and reverses the sequence of the animation when the mouse is released:</db:para>
<db:programlisting language="qml">Rectangle {
    id: rect
    width: 100; height: 100
    color: &quot;red&quot;

    MouseArea { id: mouseArea; anchors.fill: parent }

    states: State {
        name: &quot;brighter&quot;
        when: mouseArea.pressed
        PropertyChanges { target: rect; color: &quot;yellow&quot;; x: 50 }
    }

    transitions: Transition {
        SequentialAnimation {
            PropertyAnimation { property: &quot;x&quot;; duration: 1000 }
            ColorAnimation { duration: 1000 }
        }
    }
}
</db:programlisting>
<db:para>If the transition did not set the to and reversible values, then on the mouse release, the transition would play the <db:link xlink:href="qml-qtquick-propertyanimation.xml">PropertyAnimation</db:link> before the <db:link xlink:href="qml-qtquick-coloranimation.xml">ColorAnimation</db:link> instead of reversing the sequence.</db:para>
</db:section>
<db:section xml:id="running-prop">
<db:title>[read-only] running : bool</db:title>
<db:para>This property holds whether the transition is currently running.</db:para>
<db:para>This property is read only.</db:para>
</db:section>
</db:section>
</db:article>
