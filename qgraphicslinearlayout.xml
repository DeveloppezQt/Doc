<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsLinearLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> class provides a horizontal or vertical layout for managing widgets in Graphics View.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsLinearLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicslayout.xml" xlink:role="class">QGraphicsLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsLinearLayout is part of <db:simplelist><db:member>graphicsview-api</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The default orientation for a linear layout is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link>. You can choose a vertical orientation either by calling <db:link xlink:href="qgraphicslinearlayout.xml#setOrientation">setOrientation</db:link>(), or by passing <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> to <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link>'s constructor.</db:para>
<db:para>The most common way to use <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> is to construct an object on the heap with no parent, add widgets and layouts by calling <db:link xlink:href="qgraphicslinearlayout.xml#addItem">addItem</db:link>(), and finally assign the layout to a widget by calling <db:link xlink:href="qgraphicswidget.xml#setLayout">QGraphicsWidget::setLayout</db:link>().</db:para>
<db:programlisting language="cpp">QGraphicsScene scene;
QGraphicsWidget *textEdit = scene.addWidget(new QTextEdit);
QGraphicsWidget *pushButton = scene.addWidget(new QPushButton);

QGraphicsLinearLayout *layout = new QGraphicsLinearLayout;
layout-&gt;addItem(textEdit);
layout-&gt;addItem(pushButton);

QGraphicsWidget *form = new QGraphicsWidget;
form-&gt;setLayout(layout);
scene.addItem(form);
</db:programlisting>
<db:para>You can add widgets, layouts, stretches (<db:link xlink:href="qgraphicslinearlayout.xml#addStretch">addStretch</db:link>(), <db:link xlink:href="qgraphicslinearlayout.xml#insertStretch">insertStretch</db:link>() or <db:link xlink:href="qgraphicslinearlayout.xml#setStretchFactor">setStretchFactor</db:link>()), and spacings (<db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>()) to a linear layout. The layout takes ownership of the items. In some cases when the layout item also inherits from <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link> (such as <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link>) there will be a ambiguity in ownership because the layout item belongs to two ownership hierarchies. See the documentation of <db:link xlink:href="qgraphicslayoutitem.xml#setOwnedByLayout">QGraphicsLayoutItem::setOwnedByLayout</db:link>() how to handle this. You can access each item in the layout by calling <db:link xlink:href="qgraphicslinearlayout.xml#count">count</db:link>() and <db:link xlink:href="qgraphicslinearlayout.xml#itemAt">itemAt</db:link>(). Calling <db:link xlink:href="qgraphicslinearlayout.xml#removeAt">removeAt</db:link>() or <db:link xlink:href="qgraphicslinearlayout.xml#removeItem">removeItem</db:link>() will remove an item from the layout, without destroying it.</db:para>
<db:section xml:id="size-hints-and-size-policies-in-qgraphicslinearlayout">
<db:title>Size Hints and Size Policies in QGraphicsLinearLayout</db:title>
<db:para><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> respects each item's size hints and size policies, and when the layout contains more space than the items can fill, each item is arranged according to the layout's alignment for that item. You can set an alignment for each item by calling <db:link xlink:href="qgraphicslinearlayout.xml#setAlignment">setAlignment</db:link>(), and check the alignment for any item by calling <db:link xlink:href="qgraphicslinearlayout.xml#alignment">alignment</db:link>(). By default, items are aligned to the top left.</db:para>
</db:section>
<db:section xml:id="spacing-within-qgraphicslinearlayout">
<db:title>Spacing within QGraphicsLinearLayout</db:title>
<db:para>Between the items, the layout distributes some space. The actual amount of space depends on the managed widget's current style, but the common spacing is 4. You can also set your own spacing by calling <db:link xlink:href="qgraphicslinearlayout.xml#setSpacing">setSpacing</db:link>(), and get the current spacing value by calling <db:link xlink:href="qgraphicslinearlayout.xml#spacing">spacing</db:link>(). If you want to configure individual spacing for your items, you can call <db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>().</db:para>
</db:section>
<db:section xml:id="stretch-factor-in-qgraphicslinearlayout">
<db:title>Stretch Factor in QGraphicsLinearLayout</db:title>
<db:para>You can assign a stretch factor to each item to control how much space it will get compared to the other items. By default, two identical widgets arranged in a linear layout will have the same size, but if the first widget has a stretch factor of 1 and the second widget has a stretch factor of 2, the first widget will get 1/3 of the available space, and the second will get 2/3.</db:para>
<db:para><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> calculates the distribution of sizes by adding up the stretch factors of all items, and then dividing the available space accordingly. The default stretch factor is 0 for all items; a factor of 0 means the item does not have any defined stretch factor; effectively this is the same as setting the stretch factor to 1. The stretch factor only applies to the available space in the lengthwise direction of the layout (following its orientation). If you want to control both the item's horizontal and vertical stretch, you can use <db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link> instead.</db:para>
</db:section>
<db:section xml:id="qgraphicslinearlayout-compared-to-other-layouts">
<db:title>QGraphicsLinearLayout Compared to Other Layouts</db:title>
<db:para><db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> is very similar to <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> and <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link>, but in contrast to these classes, it is used to manage <db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link> and <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link> instead of <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qlayout.xml">QLayout</db:link>.</db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicsgridlayout.xml">QGraphicsGridLayout</db:link></db:member>
<db:member><db:link xlink:href="qgraphicswidget.xml">QGraphicsWidget</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsLinearLayout">
<db:title>QGraphicsLinearLayout::QGraphicsLinearLayout(QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> instance using <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> orientation. <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="QGraphicsLinearLayout-1">
<db:title>QGraphicsLinearLayout::QGraphicsLinearLayout(Qt::Orientation <db:emphasis>orientation</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> instance. You can pass the <db:code role="parameter">orientation</db:code> for the layout, either horizontal or vertical, and <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicslayout.xml">QGraphicsLayout</db:link>'s constructor.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsLinearLayout">
<db:title>[virtual noexcept] QGraphicsLinearLayout::~QGraphicsLinearLayout()</db:title>
<db:para>Destroys the <db:link xlink:href="qgraphicslinearlayout.xml">QGraphicsLinearLayout</db:link> object.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>void QGraphicsLinearLayout::addItem(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicslinearlayout.xml#insertItem">insertItem</db:link>(-1, <db:code role="parameter">item</db:code>).</db:para>
</db:section>
<db:section xml:id="addStretch">
<db:title>void QGraphicsLinearLayout::addStretch(int <db:emphasis>stretch</db:emphasis> = 1)</db:title>
<db:para>This convenience function is equivalent to calling <db:link xlink:href="qgraphicslinearlayout.xml#insertStretch">insertStretch</db:link>(-1, <db:code role="parameter">stretch</db:code>).</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>Qt::Alignment QGraphicsLinearLayout::alignment(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the alignment for <db:code role="parameter">item</db:code>. The default alignment is <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignTop</db:link> | <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignLeft</db:link>.</db:para>
<db:para>The alignment decides how the item is positioned within its assigned space in the case where there's more space available in the layout than the widgets can occupy.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QGraphicsLinearLayout::count() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#count" role="function">QGraphicsLayout::count() const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertItem">
<db:title>void QGraphicsLinearLayout::insertItem(int <db:emphasis>index</db:emphasis>, QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Inserts <db:code role="parameter">item</db:code> into the layout at <db:code role="parameter">index</db:code>, or before any item that is currently at <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#itemAt">itemAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#insertStretch">insertStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertStretch">
<db:title>void QGraphicsLinearLayout::insertStretch(int <db:emphasis>index</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 1)</db:title>
<db:para>Inserts a stretch of <db:code role="parameter">stretch</db:code> at <db:code role="parameter">index</db:code>, or before any item that is currently at <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#addStretch">addStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setStretchFactor">setStretchFactor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QGraphicsLinearLayout::invalidate()</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#invalidate" role="function">QGraphicsLayout::invalidate()</db:link>.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QGraphicsLayoutItem *QGraphicsLinearLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#itemAt" role="function">QGraphicsLayout::itemAt(int i) const</db:link>.</db:para>
<db:para>When iterating from 0 and up, it will return the items in the visual arranged order.</db:para>
</db:section>
<db:section xml:id="itemSpacing">
<db:title>qreal QGraphicsLinearLayout::itemSpacing(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:para>Returns the spacing after item at <db:code role="parameter">index</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientation">
<db:title>Qt::Orientation QGraphicsLinearLayout::orientation() const</db:title>
<db:para>Returns the layout orientation.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setOrientation">setOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAt">
<db:title>[override virtual] void QGraphicsLinearLayout::removeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayout.xml#removeAt" role="function">QGraphicsLayout::removeAt(int index)</db:link>.</db:para>
<db:para>Removes the item at <db:code role="parameter">index</db:code> without destroying it. Ownership of the item is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#removeItem">removeItem</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeItem">
<db:title>void QGraphicsLinearLayout::removeItem(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:para>Removes <db:code role="parameter">item</db:code> from the layout without destroying it. Ownership of <db:code role="parameter">item</db:code> is transferred to the caller.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#removeAt">removeAt</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QGraphicsLinearLayout::setAlignment(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>, Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:para>Sets the alignment of <db:code role="parameter">item</db:code> to <db:code role="parameter">alignment</db:code>. If <db:code role="parameter">item</db:code>'s alignment changes, the layout is automatically invalidated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#alignment">alignment</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#invalidate">invalidate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QGraphicsLinearLayout::setGeometry(const QRectF &amp;<db:emphasis>rect</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#setGeometry" role="function">QGraphicsLayoutItem::setGeometry(const QRectF &amp;rect)</db:link>.</db:para>
</db:section>
<db:section xml:id="setItemSpacing">
<db:title>void QGraphicsLinearLayout::setItemSpacing(int <db:emphasis>index</db:emphasis>, qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the spacing after item at <db:code role="parameter">index</db:code> to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#itemSpacing">itemSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOrientation">
<db:title>void QGraphicsLinearLayout::setOrientation(Qt::Orientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>Change the layout orientation to <db:code role="parameter">orientation</db:code>. Changing the layout orientation will automatically invalidate the layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#orientation">orientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSpacing">
<db:title>void QGraphicsLinearLayout::setSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:para>Sets the layout's spacing to <db:code role="parameter">spacing</db:code>. Spacing refers to the vertical and horizontal distances between items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#spacing">spacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setItemSpacing">setItemSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setStretchFactor">setStretchFactor</db:link>()</db:member>
<db:member><db:link xlink:href="qgraphicsgridlayout.xml#setSpacing">QGraphicsGridLayout::setSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretchFactor">
<db:title>void QGraphicsLinearLayout::setStretchFactor(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:para>Sets the stretch factor for <db:code role="parameter">item</db:code> to <db:code role="parameter">stretch</db:code>. If an item's stretch factor changes, this function will invalidate the layout.</db:para>
<db:para>Setting <db:code role="parameter">stretch</db:code> to 0 removes the stretch factor from the item, and is effectively equivalent to setting <db:code role="parameter">stretch</db:code> to 1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#stretchFactor">stretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSizeF QGraphicsLinearLayout::sizeHint(Qt::SizeHint <db:emphasis>which</db:emphasis>, const QSizeF &amp;<db:emphasis>constraint</db:emphasis> = QSizeF()) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qgraphicslayoutitem.xml#sizeHint" role="function">QGraphicsLayoutItem::sizeHint(Qt::SizeHint which, const QSizeF &amp;constraint) const</db:link>.</db:para>
</db:section>
<db:section xml:id="spacing">
<db:title>qreal QGraphicsLinearLayout::spacing() const</db:title>
<db:para>Returns the layout's spacing. Spacing refers to the vertical and horizontal distances between items.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stretchFactor">
<db:title>int QGraphicsLinearLayout::stretchFactor(QGraphicsLayoutItem *<db:emphasis>item</db:emphasis>) const</db:title>
<db:para>Returns the stretch factor for <db:code role="parameter">item</db:code>. The default stretch factor is 0, meaning that the item has no assigned stretch factor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgraphicslinearlayout.xml#setStretchFactor">setStretchFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
