<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Robot Arm Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to add a C++ backend to a 3D project from Qt Design Studio.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

#include &quot;animatedparam.h&quot;

#include &amp;lt;QVariantAnimation&amp;gt;

AnimatedParam::AnimatedParam(QObject *parent) : QVariantAnimation(parent)
{
    setDuration(1500);
    setEasingCurve(QEasingCurve::InOutCubic);

    connect(this, &amp;amp;QVariantAnimation::valueChanged, this, &amp;amp;AnimatedParam::valueChanged);
    connect(this, &amp;amp;QAbstractAnimation::stateChanged, this, [this](QAbstractAnimation::State newState, QAbstractAnimation::State oldState) {
        m_isRunning = (newState == QAbstractAnimation::Running);
    });
}

int AnimatedParam::value() const
{
    return currentValue().toInt();
}

void AnimatedParam::setValue(int newValue)
{
    stop();
    setStartValue(value());
    setEndValue(newValue);
    start();
}

bool AnimatedParam::isRunning() const
{
    return m_isRunning;
}

</db:programlisting>
</db:article>
