<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 2 Legend Example</db:title>
<db:productname>QtDataVisualization</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Data Visualization Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Showing graph legend in a QML application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick 2 legend example shows how to make an interactive legend for a graph.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmllegend-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The interesting thing about this example is displaying the legend. We'll concentrate on that and skip explaining the basic functionality - for more detailed QML example documentation, see <db:link xlink:href="qtdatavisualization-qmlscatter-example.xml">Qt Quick 2 Scatter Example</db:link>.</db:para>
<db:section xml:id="legend">
<db:title>Legend</db:title>
<db:para>The legend is simply a column of custom <db:code>LegendItem</db:code> items inside a transparent rectangle. Each item is supplied with a series and the graph theme:</db:para>
<db:programlisting language="qml">ColumnLayout {
    anchors.fill: parent
    anchors.margins: parent.border.width
    spacing: 0
    clip: true
    LegendItem {
        Layout.fillWidth: true
        Layout.fillHeight: true
        series: station1
        theme: barGraph.theme
    }
    LegendItem {
        Layout.fillWidth: true
        Layout.fillHeight: true
        series: station2
        theme: barGraph.theme
    }
    LegendItem {
        Layout.fillWidth: true
        Layout.fillHeight: true
        series: station3
        theme: barGraph.theme
    }
}
</db:programlisting>
<db:para>The legend items consist of a marker rectangle, which indicates the color of the series, and a text field, which shows the name of the series. The colors we get from the series and the theme supplied at legend item initialization:</db:para>
<db:programlisting language="qml">property Theme3D theme
property Bar3DSeries series
    ...
RowLayout {
    anchors.fill: parent
    spacing: 0
    clip: true
    Item {
        id: markerSpace
        Layout.minimumWidth: 20
        Layout.minimumHeight: 20
        Layout.fillWidth: true
        Layout.fillHeight: true
        Layout.alignment: Qt.AlignVCenter
        Rectangle {
            x: parent.x + parent.width / 4
            y: parent.y + parent.height / 4
            width: parent.width / 2
            height: width
            border.color: &quot;black&quot;
            color: series.baseColor
        }
    }
    Item {
        height: markerSpace.height
        Layout.fillWidth: true
        Layout.fillHeight: true
        Layout.alignment: Qt.AlignVCenter
        Layout.minimumWidth: 100
        Text {
            anchors.fill: parent
            text: series.name
            verticalAlignment: Text.AlignVCenter
            clip: true
            color: theme.labelTextColor
            font: theme.font
        }
    }
}
</db:programlisting>
<db:para>We want the legend to be interactive, so we add additional logic to enable selection of a series by clicking on a legend item, as well as highlighting the legend item corresponding to the selected series.</db:para>
<db:para>The highlight depends on the selection state of the series, so we define two states, which follow the <db:link xlink:href="qml-qtdatavisualization-bar3dseries.xml#selectedBar-prop">Bar3DSeries::selectedBar</db:link> property and adjust the <db:code>legendItem</db:code> color appropriately:</db:para>
<db:programlisting language="qml">states: [
    State  {
        name: &quot;selected&quot;
        when: series.selectedBar != series.invalidSelectionPosition
        PropertyChanges {
            target: legendItem
            color: series.singleHighlightColor
        }
    },
    State  {
        name: &quot;unselected&quot;
        when: series.selectedBar == series.invalidSelectionPosition
        PropertyChanges {
            target: legendItem
            color: theme.labelBackgroundColor
        }
    }
]
</db:programlisting>
<db:para>To make the legend item interactive, we define a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to detect clicks on it and adjust the series selection accordingly:</db:para>
<db:programlisting language="qml">MouseArea {
    id: mouseArea
    anchors.fill: legendItem
    onClicked: {
        if (legendItem.state === &quot;selected&quot;) {
            series.selectedBar = series.invalidSelectionPosition
        } else {
            series.selectedBar = previousSelection
        }
    }
}
</db:programlisting>
<db:para>The <db:code>previousSelection</db:code> used above is another custom property of <db:code>LegendItem</db:code>, which we update whenever selection changes on the series. This way we remember the last selected bar of each series:</db:para>
<db:programlisting language="qml">Connections {
    target: series
    onSelectedBarChanged: {
        if (position != series.invalidSelectionPosition) {
            previousSelection = position
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/main.cpp">qmllegend/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qml/qmllegend/Data.qml">qmllegend/qml/qmllegend/Data.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qml/qmllegend/LegendItem.qml">qmllegend/qml/qmllegend/LegendItem.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qml/qmllegend/NewButton.qml">qmllegend/qml/qmllegend/NewButton.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qml/qmllegend/main.qml">qmllegend/qml/qmllegend/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qmllegend.pro">qmllegend/qmllegend.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmllegend/qmllegend.qrc">qmllegend/qmllegend.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
