<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Time Client Application</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A client who holds a replica of a time object from a server and displays the time in a clock.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Time Client Application opens a blue window with a message. When you click once, it displays a clock. When you click again, two clocks, then it repeats. The clock is defined in Clock.qml and uses the <db:code>Time</db:code> QML-type, implemented in C++, to set the time of the clock using the time on the server.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/clientapp-example.webp"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="before-running-the-time-client-application">
<db:title>Before Running the Time Client Application</db:title>
<db:para>To run this example, <db:link xlink:href="qtremoteobjects-remoteobjects-server-example.xml">Time Server Application</db:link> must already be running on the same host as this application. It sets up a registry server and hosts an instance of a subclass of the <db:code>MinuteTimerSimpleSource</db:code> class. If it is not running, there will be an error message in the window.</db:para>
</db:section>
<db:section xml:id="defining-remote-objects-using-a-rep-file">
<db:title>Defining Remote Objects using a REP-file</db:title>
<db:para>The REP-file &quot;timemodel.rep&quot; in the parent directory of this application is used to generate the header-files used by both applications. For this application, the generated &quot;rep_timemodel_replica.h&quot; file defines <db:code>MinuteTimerReplica</db:code>, the replica of <db:code>MinuteTimer</db:code>, and other related classes.</db:para>
</db:section>
<db:section xml:id="the-timemodel-class">
<db:title>The TimeModel Class</db:title>
<db:para>The <db:code>TimeModel</db:code> class in plugin.h and plugin.cpp implements the QML-type <db:code>Time</db:code>. It contacts the registry server on localhost using the URL &quot;local:registry&quot;, acquires a replica, <db:code>MinuteTimerReplica</db:code>, and connects to its signals. The properties are automatically updated.</db:para>
</db:section>
<db:section xml:id="the-qml-types">
<db:title>The QML Types</db:title>
<db:para>The QML defined in &quot;Clock.qml&quot; draws a watch using the properties hours and minutes.</db:para>
<db:para>The application opens a window with the contents &quot;plugins.qml&quot;. It changes between displaying different content using a Loader, cycling for each click between &quot;plugins0.qml&quot;, &quot;plugins1.qml&quot;, and &quot;plugins2.qml&quot;.</db:para>
<db:para>While &quot;plugins0.qml&quot; displays a blue screen with a message, the custom QML-type <db:code>Clock</db:code> is used in &quot;plugins1.qml&quot;, with the properties hours and minutes set to the hour and minute properties of <db:code>Time</db:code>. The &quot;plugins2.qml&quot; file is similar but displays two clocks.</db:para>
<db:programlisting language="qml">import QtQuick
import TimeExample // import types from the plugin

Rectangle {
    width: 200
    height: 400
    color: &quot;blue&quot;
    Clock {
        id: clock1
        anchors.top: parent.top
        Time { // this class is defined in C++ (plugin.cpp)
            id: time
        }

        hours: time.hour
        minutes: time.minute
        valid: time.isValid

    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtremoteobjects.git/tree/examples/remoteobjects/clientapp?h=6.5">Example project @ code.qt.io</db:link></db:para>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtremoteobjects-remoteobjects-server-example.xml">Time Server Application</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
