<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Pie Chart Customization Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This example shows how the look and feel of a pie chart can be customized.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Charts module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 or (at your option) any later version
** approved by the KDE Free Qt Foundation. The licenses are as published by
** the Free Software Foundation and appearing in the file LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
#include &quot;brushtool.h&quot;
#include &amp;lt;QtWidgets/QPushButton&amp;gt;
#include &amp;lt;QtWidgets/QFormLayout&amp;gt;
#include &amp;lt;QtWidgets/QComboBox&amp;gt;
#include &amp;lt;QtWidgets/QColorDialog&amp;gt;

BrushTool::BrushTool(QString title, QWidget *parent)
    : QWidget(parent)
{
    setWindowTitle(title);
    setWindowFlags(Qt::Tool);

    m_colorButton = new QPushButton();
    m_styleCombo = new QComboBox();
    m_styleCombo-&amp;gt;addItem(&quot;Nobrush&quot;, (int) Qt::NoBrush);
    m_styleCombo-&amp;gt;addItem(&quot;Solidpattern&quot;, (int) Qt::SolidPattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense1pattern&quot;, (int) Qt::Dense1Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense2attern&quot;, (int) Qt::Dense2Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense3Pattern&quot;, (int) Qt::Dense3Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense4Pattern&quot;, (int) Qt::Dense4Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense5Pattern&quot;, (int) Qt::Dense5Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense6Pattern&quot;, (int) Qt::Dense6Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;Dense7Pattern&quot;, (int) Qt::Dense7Pattern);
    m_styleCombo-&amp;gt;addItem(&quot;HorPattern&quot;, (int) Qt::HorPattern);
    m_styleCombo-&amp;gt;addItem(&quot;VerPattern&quot;, (int) Qt::VerPattern);
    m_styleCombo-&amp;gt;addItem(&quot;CrossPattern&quot;, (int) Qt::CrossPattern);
    m_styleCombo-&amp;gt;addItem(&quot;BDiagPattern&quot;, (int) Qt::BDiagPattern);
    m_styleCombo-&amp;gt;addItem(&quot;FDiagPattern&quot;, (int) Qt::FDiagPattern);
    m_styleCombo-&amp;gt;addItem(&quot;DiagCrossPattern&quot;, (int) Qt::DiagCrossPattern);

    QFormLayout *layout = new QFormLayout();
    layout-&amp;gt;addRow(&quot;Color&quot;, m_colorButton);
    layout-&amp;gt;addRow(&quot;Style&quot;, m_styleCombo);
    setLayout(layout);

    connect(m_colorButton, &amp;amp;QPushButton::clicked, this, &amp;amp;BrushTool::showColorDialog);
    connect(m_styleCombo, static_cast&amp;lt;void (QComboBox::*)(int)&amp;gt;(&amp;amp;QComboBox::currentIndexChanged),
            this, &amp;amp;BrushTool::updateStyle);
}

void BrushTool::setBrush(QBrush brush)
{
    m_brush = brush;
    m_colorButton-&amp;gt;setText(m_brush.color().name());
    m_styleCombo-&amp;gt;setCurrentIndex(m_brush.style()); // index matches the enum
}

QBrush BrushTool::brush() const
{
    return m_brush;
}

QString BrushTool::name()
{
    return name(m_brush);
}

QString BrushTool::name(const QBrush &amp;amp;brush)
{
    return brush.color().name();
}

void BrushTool::showColorDialog()
{
    QColorDialog dialog(m_brush.color());
    dialog.show();
    dialog.exec();
    m_brush.setColor(dialog.selectedColor());
    m_colorButton-&amp;gt;setText(m_brush.color().name());
    emit changed();
}

void BrushTool::updateStyle()
{
    Qt::BrushStyle style = (Qt::BrushStyle) m_styleCombo-&amp;gt;itemData(m_styleCombo-&amp;gt;currentIndex()).toInt();
    if (m_brush.style() != style) {
        m_brush.setStyle(style);
        emit changed();
    }
}

#include &quot;moc_brushtool.cpp&quot;

</db:programlisting>
</db:article>
