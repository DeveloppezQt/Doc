<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>RESTful API Server</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to create a RESTful API server using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/restful-color-palette-server-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example shows how to create and host simple RESTful web APIs in a small application using the <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> class. This server accepts calls in REST style and can be used with its counterpart example <db:link xlink:href="qtdoc-demos-colorpaletteclient-example.xml">RESTful Color Palette API client</db:link> on the client side.</db:para>
<db:para>An application that obeys the REST constraints may be informally described as RESTful. The RESTful API Server allows create, read, update and delete operations of colors (unknown resource to be compatible with Reqres API) and users. The RESTful API Server also provides login/logout functionality. The example is based on <db:link xlink:href="https://reqres.in/">Reqres API</db:link>.</db:para>
<db:para>To run the server application, execute server binary:</db:para>
<db:programlisting language="cpp">./colorpaletteserver
</db:programlisting>
<db:para>or</db:para>
<db:programlisting language="cpp">./colorpaletteserver --port 1234
</db:programlisting>
<db:para>An optional <db:code>port</db:code> parameter may be provided to specify the port on which the server shall run.</db:para>
<db:programlisting language="cpp">httpServer.route(
        QString(&quot;%1&quot;).arg(apiPath), QHttpServerRequest::Method::Get,
        [&amp;amp;api](const QHttpServerRequest &amp;amp;request) { return api.getPaginatedList(request); });
</db:programlisting>
<db:para>In the example above, the route is specified for the GET method, which returns the JSON array with paginated list of items stored. To achieve that, the <db:link xlink:href="qhttpserver.xml#route">QHttpServer::route</db:link>() method is used with the <db:link xlink:href="qhttpserverrequest.xml#Method-enum">QHttpServerRequest::Method::Get</db:link> enumeration.</db:para>
<db:programlisting language="cpp">httpServer.route(QString(&quot;%1/&amp;lt;arg&amp;gt;&quot;).arg(apiPath), QHttpServerRequest::Method::Get,
                 [&amp;amp;api](qint64 itemId) { return api.getItem(itemId); });
</db:programlisting>
<db:para>To get a single item from the list of entities, the item ID is passed in the request query.</db:para>
<db:programlisting language="cpp">httpServer.route(QString(&quot;%1&quot;).arg(apiPath), QHttpServerRequest::Method::Post,
                 [&amp;amp;api, &amp;amp;sessionApi](const QHttpServerRequest &amp;amp;request) {
                     if (!sessionApi.authorize(request)) {
                         return QHttpServerResponse(
                                 QHttpServerResponder::StatusCode::Unauthorized);
                     }
                     return api.postItem(request);
                 });
</db:programlisting>
<db:para>In this example, the route accepts POST method, which adds a new entry to the item list and returns a JSON object that represents the added entry. This request must be authorized. To authorize the request the value of the header <db:code>TOKEN</db:code> must be equal to previously returned token from the <db:code>api/login</db:code> or the <db:code>api/register</db:code> methods.</db:para>
<db:programlisting language="cpp">QHttpServerResponse postItem(const QHttpServerRequest &amp;amp;request)
{
    const std::optional&amp;lt;QJsonObject&amp;gt; json = byteArrayToJsonObject(request.body());
    if (!json)
        return QHttpServerResponse(QHttpServerResponder::StatusCode::BadRequest);

    const std::optional&amp;lt;T&amp;gt; item = factory-&amp;gt;fromJson(*json);
    if (!item)
        return QHttpServerResponse(QHttpServerResponder::StatusCode::BadRequest);
    if (data.contains(item-&amp;gt;id))
        return QHttpServerResponse(QHttpServerResponder::StatusCode::AlreadyReported);

    const auto entry = data.insert(item-&amp;gt;id, *item);
    return QHttpServerResponse(entry-&amp;gt;toJson(), QHttpServerResponder::StatusCode::Created);
}
</db:programlisting>
<db:para>Besides new entry as JSON object POST methods returns also different HTTP status code: <db:code>Created</db:code> for new entries, or <db:code>AlreadyReported</db:code> for pre-existing entries. This example makes use of an overload of <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse::QHttpServerResponse</db:link> to send a JSON object and corresponding HTTP status code.</db:para>
<db:para>To create an entry, the request body must be a JSON object with <db:code>email</db:code> <db:code>first_name</db:code> <db:code>last_name</db:code> and <db:code>avatar</db:code> fields - to create new users. For example:</db:para>
<db:programlisting language="cpp">{
    &quot;email&quot;: &quot;jane.doe@qt.io&quot;,
    &quot;first_name&quot;: &quot;Jane&quot;,
    &quot;last_name&quot;: &quot;Doe&quot;,
    &quot;avatar&quot;: &quot;/img/faces/1-image.jpg&quot;
}
</db:programlisting>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/CMakeLists.txt">colorpalette/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/apibehavior.h">colorpalette/apibehavior.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/colorpalette.pro">colorpalette/colorpalette.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/main.cpp">colorpalette/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/types.h">colorpalette/types.h</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/utils.h">colorpalette/utils.h</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/1-image.jpg">colorpalette/assets/img/1-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/10-image.jpg">colorpalette/assets/img/10-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/11-image.jpg">colorpalette/assets/img/11-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/12-image.jpg">colorpalette/assets/img/12-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/2-image.jpg">colorpalette/assets/img/2-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/3-image.jpg">colorpalette/assets/img/3-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/4-image.jpg">colorpalette/assets/img/4-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/5-image.jpg">colorpalette/assets/img/5-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/6-image.jpg">colorpalette/assets/img/6-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/7-image.jpg">colorpalette/assets/img/7-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/8-image.jpg">colorpalette/assets/img/8-image.jpg</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="colorpalette/assets/img/9-image.jpg">colorpalette/assets/img/9-image.jpg</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
