<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Examples - Animation</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.0.4 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of QML Animation examples.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-animations-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Animation</db:emphasis> is a collection of small QML examples relating to animation. Each example is a small QML file emphasizing a particular type or feature.</db:para>
<db:para>For more information about animations, visit <db:link xlink:href="qtquick-statesanimations-topic.xml">Important Concepts in Qt Quick - States, Transitions and Animations</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="http://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:emphasis role="bold">Welcome</db:emphasis> mode and select the example from <db:emphasis role="bold">Examples</db:emphasis>. For more information, visit <db:link xlink:href="http://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="coloranimation">
<db:title>ColorAnimation</db:title>
<db:para><db:emphasis>ColorAnimation</db:emphasis> uses color animations to fade a sky from day to night.</db:para>
<db:programlisting language="qml">gradient: Gradient {
    GradientStop {
        position: 0.0
        SequentialAnimation on color {
            loops: Animation.Infinite
            ColorAnimation { from: &quot;#14148c&quot;; to: &quot;#0E1533&quot;; duration: 5000 }
            ColorAnimation { from: &quot;#0E1533&quot;; to: &quot;#14148c&quot;; duration: 5000 }
        }
    }
    GradientStop {
        position: 1.0
        SequentialAnimation on color {
            loops: Animation.Infinite
            ColorAnimation { from: &quot;#14aaff&quot;; to: &quot;#437284&quot;; duration: 5000 }
            ColorAnimation { from: &quot;#437284&quot;; to: &quot;#14aaff&quot;; duration: 5000 }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="propertyanimation">
<db:title>PropertyAnimation</db:title>
<db:para><db:emphasis>PropertyAnimation</db:emphasis> uses number animations to bounce a circle up and down.</db:para>
<db:programlisting language="qml">// Animate the y property. Setting loops to Animation.Infinite makes the
// animation repeat indefinitely, otherwise it would only run once.
SequentialAnimation on y {
    loops: Animation.Infinite

    // Move from minHeight to maxHeight in 300ms, using the OutExpo easing function
    NumberAnimation {
        from: smiley.minHeight; to: smiley.maxHeight
        easing.type: Easing.OutExpo; duration: 300
    }

    // Then move back to minHeight in 1 second, using the OutBounce easing function
    NumberAnimation {
        from: smiley.maxHeight; to: smiley.minHeight
        easing.type: Easing.OutBounce; duration: 1000
    }

    // Then pause for 500ms
    PauseAnimation { duration: 500 }
}
</db:programlisting>
</db:section>
<db:section xml:id="animators">
<db:title>Animators</db:title>
<db:para><db:emphasis>Animators</db:emphasis> uses animators to bounce an icon up and down.</db:para>
<db:programlisting language="qml">SequentialAnimation {
    SequentialAnimation {
        ParallelAnimation {
            YAnimator {
                target: smiley;
                from: smiley.minHeight;
                to: smiley.maxHeight
                easing.type: Easing.OutExpo;
                duration: 300
            }
            ScaleAnimator {
                target: shadow
                from: 1
                to: 0.5
                easing.type: Easing.OutExpo;
                duration: 300
            }
        }
        ParallelAnimation {
            YAnimator {
                target: smiley;
                from: smiley.maxHeight;
                to: smiley.minHeight
                easing.type: Easing.OutBounce;
                duration: 1000
            }
            ScaleAnimator {
                target: shadow
                from: 0.5
                to: 1
                easing.type: Easing.OutBounce;
                duration: 1000
            }
        }
    }
    PauseAnimation { duration: 500 }
    running: true
    loops: Animation.Infinite
}
</db:programlisting>
</db:section>
<db:section xml:id="behaviors">
<db:title>Behaviors</db:title>
<db:para><db:emphasis>Behaviors</db:emphasis> uses behaviors to move a rectangle to where you click.</db:para>
<db:programlisting language="qml">// Set an 'elastic' behavior on the focusRect's y property.
Behavior on y {
    NumberAnimation {
        easing.type: Easing.OutElastic
        easing.amplitude: 3.0
        easing.period: 2.0
        duration: 300
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="wiggly-text">
<db:title>Wiggly Text</db:title>
<db:para><db:emphasis>Wiggly Text</db:emphasis> demonstrates using more complex behaviors to animate and wiggle some text around as you drag it. It does this by assigning a complex binding to each letter:</db:para>
<db:programlisting language="qml">            x: follow ? follow.x + follow.width : container.width / 6
            y: follow ? follow.y : container.height / 2
</db:programlisting>
<db:para>Then, it uses behaviors to animate the movement of each letter:</db:para>
<db:programlisting language="qml">            Behavior on x { enabled: container.animated; SpringAnimation { spring: 3; damping: 0.3; mass: 1.0 } }
            Behavior on y { enabled: container.animated; SpringAnimation { spring: 3; damping: 0.3; mass: 1.0 } }
</db:programlisting>
</db:section>
<db:section xml:id="tv-tennis">
<db:title>Tv Tennis</db:title>
<db:para><db:emphasis>Tv Tennis</db:emphasis> uses complex behaviors to make the paddles follow a ball to simulate an infinite tennis game. Again, a binding which depends on other values is applied to the position and a behavior provided the animation.</db:para>
<db:programlisting language="qml">y: ball.direction == 'left' ? ball.y - 45 : page.height/2 -45;
Behavior on y { SpringAnimation{ velocity: 300 } }
</db:programlisting>
</db:section>
<db:section xml:id="easing-curves">
<db:title>Easing Curves</db:title>
<db:para><db:emphasis>Easing Curves</db:emphasis> shows off all the easing curves available in Qt Quick animations.</db:para>
</db:section>
<db:section xml:id="states">
<db:title>States</db:title>
<db:para><db:emphasis>States</db:emphasis> demonstrates how the properties of an item can vary between <db:link xlink:href="qtquick-statesanimations-states.xml">states</db:link>.</db:para>
<db:para>It defines several states:</db:para>
<db:programlisting language="qml">// In state 'middleRight', move the image to middleRightRect
State {
    name: &quot;middleRight&quot;
    PropertyChanges { target: userIcon; x: middleRightRect.x; y: middleRightRect.y }
},

// In state 'bottomLeft', move the image to bottomLeftRect
State {
    name: &quot;bottomLeft&quot;
    PropertyChanges { target: userIcon; x: bottomLeftRect.x; y: bottomLeftRect.y  }
}
</db:programlisting>
</db:section>
<db:section xml:id="transitions">
<db:title>Transitions</db:title>
<db:para><db:emphasis>Transitions</db:emphasis> takes the States example and animates the property changes by setting transitions:</db:para>
<db:programlisting language="qml">// Transitions define how the properties change when the item moves between each state
transitions: [

    // When transitioning to 'middleRight' move x,y over a duration of 1 second,
    // with OutBounce easing function.
    Transition {
        from: &quot;*&quot;; to: &quot;middleRight&quot;
        NumberAnimation { properties: &quot;x,y&quot;; easing.type: Easing.OutBounce; duration: 1000 }
    },

    // When transitioning to 'bottomLeft' move x,y over a duration of 2 seconds,
    // with InOutQuad easing function.
    Transition {
        from: &quot;*&quot;; to: &quot;bottomLeft&quot;
        NumberAnimation { properties: &quot;x,y&quot;; easing.type: Easing.InOutQuad; duration: 2000 }
    },

    // For any other state changes move x,y linearly over duration of 200ms.
    Transition {
        NumberAnimation { properties: &quot;x,y&quot;; duration: 200 }
    }
</db:programlisting>
</db:section>
<db:section xml:id="pathanimation">
<db:title>PathAnimation</db:title>
<db:para><db:emphasis>PathAnimation</db:emphasis> animates an image along a bezier curve using a <db:link xlink:href="qml-qtquick-pathanimation.xml">PathAnimation</db:link>.</db:para>
<db:programlisting language="qml">PathAnimation {
    id: pathAnim

    duration: 2000
    easing.type: Easing.InQuad

    target: box
    orientation: PathAnimation.RightFirst
    anchorPoint: Qt.point(box.width/2, box.height/2)
    path: Path {
        startX: 50; startY: 50

        PathCubic {
            x: window.width - 50
            y: window.height - 50

            control1X: x; control1Y: 50
            control2X: 50; control2Y: y
        }

        onChanged: canvas.requestPaint()
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="pathinterpolator">
<db:title>PathInterpolator</db:title>
<db:para><db:emphasis>PathInterpolator</db:emphasis> animates an image along the same bezier curve, using a <db:link xlink:href="qml-qtquick-pathinterpolator.xml">PathInterpolator</db:link> instead.</db:para>
<db:programlisting language="qml">PathInterpolator {
    id: motionPath

    path: Path {
        startX: 50; startY: 50

        PathCubic {
            x: window.width - 50
            y: window.height - 50

            control1X: x; control1Y: 50
            control2X: 50; control2Y: y
        }

        onChanged: canvas.requestPaint()
    }

    SequentialAnimation on progress {
        running: true
        loops: -1
        PauseAnimation { duration: 1000 }
        NumberAnimation {
            id: progressAnim
            running: false
            from: 0; to: 1
            duration: 2000
            easing.type: Easing.InQuad
        }
    }
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/animation?h=6.0">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
