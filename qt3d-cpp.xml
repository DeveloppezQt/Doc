<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D C++ Classes</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt 3D module contains functionality to support near-realtime simulation systems.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt 3D module provides the foundations and core types used for near-realtime simulations built on the Qt 3D framework.</db:para>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:variablelist role="qt3d-namespaces">
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation.xml" xlink:role="namespace">Qt3DAnimation</db:link></db:term>
<db:listitem>
<db:para>Contains classes from the Qt3DAnimation module.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore.xml" xlink:role="namespace">Qt3DCore</db:link></db:term>
<db:listitem>
<db:para>Contains classes that are the foundation for Qt 3D simulation framework, as well as classes that provide the ability to render using the Qt 3D framework.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-quick.xml" xlink:role="namespace">Qt3DCore::Quick</db:link></db:term>
<db:listitem>
<db:para>Contains classes used for implementing QML functionality into Qt3D applications.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras.xml" xlink:role="namespace">Qt3DExtras</db:link></db:term>
<db:listitem>
<db:para>Contains classes from the Qt3DExtras module.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput.xml" xlink:role="namespace">Qt3DInput</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable user input.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic.xml" xlink:role="namespace">Qt3DLogic</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable frame synchronization.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender.xml" xlink:role="namespace">Qt3DRender</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable 2D and 3D rendering.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:section xml:id="qt-3d-core-module">
<db:title>Qt 3D Core Module</db:title>
<db:variablelist role="classesbymodule Qt3DCore">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qabstractaspect.xml" xlink:role="class">Qt3DCore::QAbstractAspect</db:link></db:term>
<db:listitem>
<db:para>QAbstractAspect is the base class for aspects that provide a vertical slice of behavior.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qabstractfunctor.xml" xlink:role="class">Qt3DCore::QAbstractFunctor</db:link></db:term>
<db:listitem>
<db:para>QAbstractFunctor is an abstract base class for all functors.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qabstractskeleton.xml" xlink:role="class">Qt3DCore::QAbstractSkeleton</db:link></db:term>
<db:listitem>
<db:para>A skeleton contains the joints for a skinned mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qarmature.xml" xlink:role="class">Qt3DCore::QArmature</db:link></db:term>
<db:listitem>
<db:para>Used to calculate skinning transform matrices and set them on shaders.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qaspectengine.xml" xlink:role="class">Qt3DCore::QAspectEngine</db:link></db:term>
<db:listitem>
<db:para>Responsible for handling all the QAbstractAspect subclasses that have been registered with the scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qaspectjob.xml" xlink:role="class">Qt3DCore::QAspectJob</db:link></db:term>
<db:listitem>
<db:para>The base class for jobs executed in an aspect.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qattribute.xml" xlink:role="class">Qt3DCore::QAttribute</db:link></db:term>
<db:listitem>
<db:para>Defines an attribute and how data should be read from a QBuffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qbackendnode.xml" xlink:role="class">Qt3DCore::QBackendNode</db:link></db:term>
<db:listitem>
<db:para>The base class for all Qt3D backend nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qbackendnodemapper.xml" xlink:role="class">Qt3DCore::QBackendNodeMapper</db:link></db:term>
<db:listitem>
<db:para>Creates and maps backend nodes to their respective frontend nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qboundingvolume.xml" xlink:role="class">Qt3DCore::QBoundingVolume</db:link></db:term>
<db:listitem>
<db:para>can be used to override the bounding volume of an entity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qbuffer.xml" xlink:role="class">Qt3DCore::QBuffer</db:link></db:term>
<db:listitem>
<db:para>Provides a data store for raw data to later be used as vertices or uniforms.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">Qt3DCore::QComponent</db:link></db:term>
<db:listitem>
<db:para>The base class of scene nodes that can be aggregated by Qt3DCore::QEntity instances as a component.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qcoresettings.xml" xlink:role="class">Qt3DCore::QCoreSettings</db:link></db:term>
<db:listitem>
<db:para>The QCoreSettings class holds settings related to core data handling process.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qentity.xml" xlink:role="class">Qt3DCore::QEntity</db:link></db:term>
<db:listitem>
<db:para>Qt3DCore::QEntity is a Qt3DCore::QNode subclass that can aggregate several Qt3DCore::QComponent instances that will specify its behavior.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qgeometry.xml" xlink:role="class">Qt3DCore::QGeometry</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qgeometryview.xml" xlink:role="class">Qt3DCore::QGeometryView</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qjoint.xml" xlink:role="class">Qt3DCore::QJoint</db:link></db:term>
<db:listitem>
<db:para>Used to transforms parts of skinned meshes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:term>
<db:listitem>
<db:para>QNode is the base class of all Qt3D node classes used to build a Qt3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnodeid.xml" xlink:role="class">Qt3DCore::QNodeId</db:link></db:term>
<db:listitem>
<db:para>Uniquely identifies a QNode.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qskeleton.xml" xlink:role="class">Qt3DCore::QSkeleton</db:link></db:term>
<db:listitem>
<db:para>Holds the data for a skeleton to be used with skinned meshes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qskeletonloader.xml" xlink:role="class">Qt3DCore::QSkeletonLoader</db:link></db:term>
<db:listitem>
<db:para>Used to load a skeleton of joints from file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qtransform.xml" xlink:role="class">Qt3DCore::QTransform</db:link></db:term>
<db:listitem>
<db:para>Used to perform transforms on meshes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-quick-qqmlaspectengine.xml" xlink:role="class">Qt3DCore::Quick::QQmlAspectEngine</db:link></db:term>
<db:listitem>
<db:para>The QQmlAspectEngine provides an environment for the QAspectEngine and a method for instantiating QML components.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-input-module">
<db:title>Qt 3D Input Module</db:title>
<db:variablelist role="classesbymodule Qt3DInput">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractactioninput.xml" xlink:role="class">Qt3DInput::QAbstractActionInput</db:link></db:term>
<db:listitem>
<db:para>QAbstractActionInput is the base class for the Action Input and all Aggregate Action Inputs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractaxisinput.xml" xlink:role="class">Qt3DInput::QAbstractAxisInput</db:link></db:term>
<db:listitem>
<db:para>QAbstractActionInput is the base class for all Axis Input.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractphysicaldevice.xml" xlink:role="class">Qt3DInput::QAbstractPhysicalDevice</db:link></db:term>
<db:listitem>
<db:para>QAbstractPhysicalDevice is the base class used by Qt3d to interact with arbitrary input devices.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractphysicaldeviceproxy.xml" xlink:role="class">Qt3DInput::QAbstractPhysicalDeviceProxy</db:link></db:term>
<db:listitem>
<db:para>Qt3DInput::QAbstractPhysicalDeviceProxy acts as a proxy for an actual Qt3DInput::QQAbstractPhysicalDevice device.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaction.xml" xlink:role="class">Qt3DInput::QAction</db:link></db:term>
<db:listitem>
<db:para>Links a set of QAbstractActionInput that trigger the same event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qactioninput.xml" xlink:role="class">Qt3DInput::QActionInput</db:link></db:term>
<db:listitem>
<db:para>QActionInput stores Device and Buttons used to trigger an input event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qanalogaxisinput.xml" xlink:role="class">Qt3DInput::QAnalogAxisInput</db:link></db:term>
<db:listitem>
<db:para>An axis input controlled by an analog input The axis value is controlled like a traditional analog input such as a joystick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxis.xml" xlink:role="class">Qt3DInput::QAxis</db:link></db:term>
<db:listitem>
<db:para>QAxis stores QAbstractAxisInputs used to trigger an input event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxisaccumulator.xml" xlink:role="class">Qt3DInput::QAxisAccumulator</db:link></db:term>
<db:listitem>
<db:para>QAxisAccumulator processes velocity or acceleration data from a QAxis.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxissetting.xml" xlink:role="class">Qt3DInput::QAxisSetting</db:link></db:term>
<db:listitem>
<db:para>QAxisSetting stores settings for the specified list of Axis.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qbuttonaxisinput.xml" xlink:role="class">Qt3DInput::QButtonAxisInput</db:link></db:term>
<db:listitem>
<db:para>An axis input controlled by buttons The axis value is controlled by buttons rather than a traditional analog input such as a joystick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputaspect.xml" xlink:role="class">Qt3DInput::QInputAspect</db:link></db:term>
<db:listitem>
<db:para>Responsible for creating physical devices and handling associated jobs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputchord.xml" xlink:role="class">Qt3DInput::QInputChord</db:link></db:term>
<db:listitem>
<db:para>QInputChord represents a set of QAbstractActionInput's that must be triggerd at once.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputdeviceintegration.xml" xlink:role="class">Qt3DInput::QInputDeviceIntegration</db:link></db:term>
<db:listitem>
<db:para>Abstract base class used to define new input methods such as game controllers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputsequence.xml" xlink:role="class">Qt3DInput::QInputSequence</db:link></db:term>
<db:listitem>
<db:para>QInputSequence represents a set of QAbstractActionInput's that must be triggerd one after the other.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputsettings.xml" xlink:role="class">Qt3DInput::QInputSettings</db:link></db:term>
<db:listitem>
<db:para>QInputSettings class holds the pointer to an input event source object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyevent.xml" xlink:role="class">Qt3DInput::QKeyEvent</db:link></db:term>
<db:listitem>
<db:para>QKeyEvent event type send by KeyBoardHandler.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyboarddevice.xml" xlink:role="class">Qt3DInput::QKeyboardDevice</db:link></db:term>
<db:listitem>
<db:para>QKeyboardDevice is in charge of dispatching keyboard events to attached QQKeyboardHandler objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyboardhandler.xml" xlink:role="class">Qt3DInput::QKeyboardHandler</db:link></db:term>
<db:listitem>
<db:para>Provides keyboard event notification.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qlogicaldevice.xml" xlink:role="class">Qt3DInput::QLogicalDevice</db:link></db:term>
<db:listitem>
<db:para>QLogicalDevice allows the user to define a set of actions that they wish to use within an application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmousedevice.xml" xlink:role="class">Qt3DInput::QMouseDevice</db:link></db:term>
<db:listitem>
<db:para>Delegates mouse events to the attached MouseHandler objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmouseevent.xml" xlink:role="class">Qt3DInput::QMouseEvent</db:link></db:term>
<db:listitem>
<db:para>The Qt3DCore::QMouseEvent contains parameters that describe a mouse event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmousehandler.xml" xlink:role="class">Qt3DInput::QMouseHandler</db:link></db:term>
<db:listitem>
<db:para>Provides a means of being notified about mouse events when attached to a QMouseDevice instance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qwheelevent.xml" xlink:role="class">Qt3DInput::QWheelEvent</db:link></db:term>
<db:listitem>
<db:para>The QWheelEvent class contains parameters that describe a mouse wheel event.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-logic-module">
<db:title>Qt 3D Logic Module</db:title>
<db:variablelist role="classesbymodule Qt3DLogic">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic-qframeaction.xml" xlink:role="class">Qt3DLogic::QFrameAction</db:link></db:term>
<db:listitem>
<db:para>Provides a way to have a synchronous function executed each frame.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic-qlogicaspect.xml" xlink:role="class">Qt3DLogic::QLogicAspect</db:link></db:term>
<db:listitem>
<db:para>Responsible for handling frame synchronization jobs.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-render-module">
<db:title>Qt 3D Render Module</db:title>
<db:variablelist role="classesbymodule Qt3DRender">
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractlight.xml" xlink:role="class">Qt3DRender::QAbstractLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractraycaster.xml" xlink:role="class">Qt3DRender::QAbstractRayCaster</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for ray casting in 3d scenes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttexture.xml" xlink:role="class">Qt3DRender::QAbstractTexture</db:link></db:term>
<db:listitem>
<db:para>A base class to be used to provide textures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttextureimage.xml" xlink:role="class">Qt3DRender::QAbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphacoverage.xml" xlink:role="class">Qt3DRender::QAlphaCoverage</db:link></db:term>
<db:listitem>
<db:para>Enable alpha-to-coverage multisampling mode.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphatest.xml" xlink:role="class">Qt3DRender::QAlphaTest</db:link></db:term>
<db:listitem>
<db:para>The QAlphaTest class specify alpha reference test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequation.xml" xlink:role="class">Qt3DRender::QBlendEquation</db:link></db:term>
<db:listitem>
<db:para>The QBlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequationarguments.xml" xlink:role="class">Qt3DRender::QBlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblitframebuffer.xml" xlink:role="class">Qt3DRender::QBlitFramebuffer</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to transfer a rectangle of pixel values from one region of a render target to another.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qbuffercapture.xml" xlink:role="class">Qt3DRender::QBufferCapture</db:link></db:term>
<db:listitem>
<db:para>Exchanges buffer data between GPU and CPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcamera.xml" xlink:role="class">Qt3DRender::QCamera</db:link></db:term>
<db:listitem>
<db:para>The QCamera class defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameralens.xml" xlink:role="class">Qt3DRender::QCameraLens</db:link></db:term>
<db:listitem>
<db:para>Qt3DRender::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameraselector.xml" xlink:role="class">Qt3DRender::QCameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclearbuffers.xml" xlink:role="class">Qt3DRender::QClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclipplane.xml" xlink:role="class">Qt3DRender::QClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcolormask.xml" xlink:role="class">Qt3DRender::QColorMask</db:link></db:term>
<db:listitem>
<db:para>Allows specifying which color components should be written to the currently bound frame buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcomputecommand.xml" xlink:role="class">Qt3DRender::QComputeCommand</db:link></db:term>
<db:listitem>
<db:para>QComponent to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcullface.xml" xlink:role="class">Qt3DRender::QCullFace</db:link></db:term>
<db:listitem>
<db:para>The QCullFace class specifies whether front or back face culling is enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdebugoverlay.xml" xlink:role="class">Qt3DRender::QDebugOverlay</db:link></db:term>
<db:listitem>
<db:para>Enables a visual overlay with scene details.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdepthrange.xml" xlink:role="class">Qt3DRender::QDepthRange</db:link></db:term>
<db:listitem>
<db:para>Enables remapping depth values written into the depth buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdepthtest.xml" xlink:role="class">Qt3DRender::QDepthTest</db:link></db:term>
<db:listitem>
<db:para>The QDepthTest class tests the fragment shader's depth value against the depth of a sample being written to.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdirectionallight.xml" xlink:role="class">Qt3DRender::QDirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdispatchcompute.xml" xlink:role="class">Qt3DRender::QDispatchCompute</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to issue work for the compute shader on GPU.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdithering.xml" xlink:role="class">Qt3DRender::QDithering</db:link></db:term>
<db:listitem>
<db:para>Enable dithering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qeffect.xml" xlink:role="class">Qt3DRender::QEffect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qenvironmentlight.xml" xlink:role="class">Qt3DRender::QEnvironmentLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate an environment light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfilterkey.xml" xlink:role="class">Qt3DRender::QFilterKey</db:link></db:term>
<db:listitem>
<db:para>The QFilterKey class provides storage for filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrontface.xml" xlink:role="class">Qt3DRender::QFrontFace</db:link></db:term>
<db:listitem>
<db:para>The QFrontFace class defines front and back facing polygons.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrustumculling.xml" xlink:role="class">Qt3DRender::QFrustumCulling</db:link></db:term>
<db:listitem>
<db:para>Enable frustum culling for the FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgeometryrenderer.xml" xlink:role="class">Qt3DRender::QGeometryRenderer</db:link></db:term>
<db:listitem>
<db:para>Encapsulates geometry rendering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgraphicsapifilter.xml" xlink:role="class">Qt3DRender::QGraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>The QGraphicsApiFilter class identifies the API required for the attached QTechnique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayer.xml" xlink:role="class">Qt3DRender::QLayer</db:link></db:term>
<db:listitem>
<db:para>The QLayer class provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayerfilter.xml" xlink:role="class">Qt3DRender::QLayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetail.xml" xlink:role="class">Qt3DRender::QLevelOfDetail</db:link></db:term>
<db:listitem>
<db:para>The QLevelOfDetail class provides a way of controlling the complexity of rendered entities based on their size on the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetailboundingsphere.xml" xlink:role="class">Qt3DRender::QLevelOfDetailBoundingSphere</db:link></db:term>
<db:listitem>
<db:para>The QLevelOfDetailBoundingSphere class provides a simple spherical volume, defined by its center and radius.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlevelofdetailswitch.xml" xlink:role="class">Qt3DRender::QLevelOfDetailSwitch</db:link></db:term>
<db:listitem>
<db:para>Provides a way of enabling child entities based on distance or screen size.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlinewidth.xml" xlink:role="class">Qt3DRender::QLineWidth</db:link></db:term>
<db:listitem>
<db:para>Specifies the width of rasterized lines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmaterial.xml" xlink:role="class">Qt3DRender::QMaterial</db:link></db:term>
<db:listitem>
<db:para>Provides an abstract class that should be the base of all material component classes in a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmemorybarrier.xml" xlink:role="class">Qt3DRender::QMemoryBarrier</db:link></db:term>
<db:listitem>
<db:para>Class to emplace a memory barrier.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmesh.xml" xlink:role="class">Qt3DRender::QMesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh loader.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmultisampleantialiasing.xml" xlink:role="class">Qt3DRender::QMultiSampleAntiAliasing</db:link></db:term>
<db:listitem>
<db:para>Enable multisample antialiasing.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodepthmask.xml" xlink:role="class">Qt3DRender::QNoDepthMask</db:link></db:term>
<db:listitem>
<db:para>Disable depth write.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodraw.xml" xlink:role="class">Qt3DRender::QNoDraw</db:link></db:term>
<db:listitem>
<db:para>When a Qt3DRender::QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnopicking.xml" xlink:role="class">Qt3DRender::QNoPicking</db:link></db:term>
<db:listitem>
<db:para>When a Qt3DRender::QNoPicking node is present in a FrameGraph branch, this prevents the render aspect from performing picking selection for the given branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qobjectpicker.xml" xlink:role="class">Qt3DRender::QObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The QObjectPicker class instantiates a component that can be used to interact with a QEntity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpaintedtextureimage.xml" xlink:role="class">Qt3DRender::QPaintedTextureImage</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTextureImage that can be written through a QPainter.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qparameter.xml" xlink:role="class">Qt3DRender::QParameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair. This maps to a shader uniform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickevent.xml" xlink:role="class">Qt3DRender::QPickEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickEvent class holds information when an object is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpicklineevent.xml" xlink:role="class">Qt3DRender::QPickLineEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickLineEvent class holds information when a segment of a line is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickpointevent.xml" xlink:role="class">Qt3DRender::QPickPointEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickPointEvent class holds information when a segment of a point cloud is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpicktriangleevent.xml" xlink:role="class">Qt3DRender::QPickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickTriangleEvent class holds information when a triangle is picked.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickingproxy.xml" xlink:role="class">Qt3DRender::QPickingProxy</db:link></db:term>
<db:listitem>
<db:para>Can be used to provide an alternate QGeometryView used only for picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickingsettings.xml" xlink:role="class">Qt3DRender::QPickingSettings</db:link></db:term>
<db:listitem>
<db:para>The QPickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointlight.xml" xlink:role="class">Qt3DRender::QPointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointsize.xml" xlink:role="class">Qt3DRender::QPointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpolygonoffset.xml" xlink:role="class">Qt3DRender::QPolygonOffset</db:link></db:term>
<db:listitem>
<db:para>The QPolygonOffset class sets the scale and steps to calculate depth values for polygon offsets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qproximityfilter.xml" xlink:role="class">Qt3DRender::QProximityFilter</db:link></db:term>
<db:listitem>
<db:para>Select entities which are within a distance threshold of a target entity.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrastermode.xml" xlink:role="class">Qt3DRender::QRasterMode</db:link></db:term>
<db:listitem>
<db:para>The QRasterMode render state allows to control the type of rasterization to be performed.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qraycaster.xml" xlink:role="class">Qt3DRender::QRayCaster</db:link></db:term>
<db:listitem>
<db:para>Qt3DRender::QRayCaster is used to perform ray casting tests in 3d world coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qraycasterhit.xml" xlink:role="class">Qt3DRender::QRayCasterHit</db:link></db:term>
<db:listitem>
<db:para>Details of a hit when casting a ray through a model.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderaspect.xml" xlink:role="class">Qt3DRender::QRenderAspect</db:link></db:term>
<db:listitem>
<db:para>The QRenderAspect class.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapabilities.xml" xlink:role="class">Qt3DRender::QRenderCapabilities</db:link></db:term>
<db:listitem>
<db:para>The QRenderCapabilities class holds settings related to available rendering engines.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapture.xml" xlink:role="class">Qt3DRender::QRenderCapture</db:link></db:term>
<db:listitem>
<db:para>Frame graph node for render capture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapturereply.xml" xlink:role="class">Qt3DRender::QRenderCaptureReply</db:link></db:term>
<db:listitem>
<db:para>Receives the result of render capture request.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpass.xml" xlink:role="class">Qt3DRender::QRenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpassfilter.xml" xlink:role="class">Qt3DRender::QRenderPassFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersettings.xml" xlink:role="class">Qt3DRender::QRenderSettings</db:link></db:term>
<db:listitem>
<db:para>The QRenderSettings class holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstate.xml" xlink:role="class">Qt3DRender::QRenderState</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for all render states.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstateset.xml" xlink:role="class">Qt3DRender::QRenderStateSet</db:link></db:term>
<db:listitem>
<db:para>The QRenderStateSet FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersurfaceselector.xml" xlink:role="class">Qt3DRender::QRenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertarget.xml" xlink:role="class">Qt3DRender::QRenderTarget</db:link></db:term>
<db:listitem>
<db:para>The QRenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetoutput.xml" xlink:role="class">Qt3DRender::QRenderTargetOutput</db:link></db:term>
<db:listitem>
<db:para>The QRenderTargetOutput class allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetselector.xml" xlink:role="class">Qt3DRender::QRenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying a render target.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsceneloader.xml" xlink:role="class">Qt3DRender::QSceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qscissortest.xml" xlink:role="class">Qt3DRender::QScissorTest</db:link></db:term>
<db:listitem>
<db:para>The QScissorTest class discards fragments that fall outside of a certain rectangular portion of the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qscreenraycaster.xml" xlink:role="class">Qt3DRender::QScreenRayCaster</db:link></db:term>
<db:listitem>
<db:para>Performe ray casting test based on screen coordinates.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qseamlesscubemap.xml" xlink:role="class">Qt3DRender::QSeamlessCubemap</db:link></db:term>
<db:listitem>
<db:para>Enables seamless cubemap texture filtering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsetfence.xml" xlink:role="class">Qt3DRender::QSetFence</db:link></db:term>
<db:listitem>
<db:para>FrameGraphNode used to insert a fence in the graphics command stream.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderdata.xml" xlink:role="class">Qt3DRender::QShaderData</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying values of a Uniform Block or a shader structure.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderimage.xml" xlink:role="class">Qt3DRender::QShaderImage</db:link></db:term>
<db:listitem>
<db:para>Provides Image access to shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderprogram.xml" xlink:role="class">Qt3DRender::QShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderprogrambuilder.xml" xlink:role="class">Qt3DRender::QShaderProgramBuilder</db:link></db:term>
<db:listitem>
<db:para>Generates a Shader Program content from loaded graphs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsharedgltexture.xml" xlink:role="class">Qt3DRender::QSharedGLTexture</db:link></db:term>
<db:listitem>
<db:para>Allows to use a textureId from a separate OpenGL context in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsortpolicy.xml" xlink:role="class">Qt3DRender::QSortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qspotlight.xml" xlink:role="class">Qt3DRender::QSpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstencilmask.xml" xlink:role="class">Qt3DRender::QStencilMask</db:link></db:term>
<db:listitem>
<db:para>The QStencilMask class controls the front and back writing of individual bits in the stencil planes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperation.xml" xlink:role="class">Qt3DRender::QStencilOperation</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperation class specifies stencil operation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperationarguments.xml" xlink:role="class">Qt3DRender::QStencilOperationArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperationArguments class sets the actions to be taken when stencil and depth tests fail.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltest.xml" xlink:role="class">Qt3DRender::QStencilTest</db:link></db:term>
<db:listitem>
<db:para>The QStencilTest class specifies arguments for the stecil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltestarguments.xml" xlink:role="class">Qt3DRender::QStencilTestArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilTestArguments class specifies arguments for stencil test.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsubtreeenabler.xml" xlink:role="class">Qt3DRender::QSubtreeEnabler</db:link></db:term>
<db:listitem>
<db:para>Enables or disables entire subtrees of framegraph nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechnique.xml" xlink:role="class">Qt3DRender::QTechnique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechniquefilter.xml" xlink:role="class">Qt3DRender::QTechniqueFilter</db:link></db:term>
<db:listitem>
<db:para>A QFrameGraphNode used to select QTechniques to use.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1d.xml" xlink:role="class">Qt3DRender::QTexture1D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1darray.xml" xlink:role="class">Qt3DRender::QTexture1DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2d.xml" xlink:role="class">Qt3DRender::QTexture2D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2darray.xml" xlink:role="class">Qt3DRender::QTexture2DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisample.xml" xlink:role="class">Qt3DRender::QTexture2DMultisample</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisample target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml" xlink:role="class">Qt3DRender::QTexture2DMultisampleArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisampleArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture3d.xml" xlink:role="class">Qt3DRender::QTexture3D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target3D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturebuffer.xml" xlink:role="class">Qt3DRender::QTextureBuffer</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetBuffer target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemap.xml" xlink:role="class">Qt3DRender::QTextureCubeMap</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMap target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemaparray.xml" xlink:role="class">Qt3DRender::QTextureCubeMapArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMapArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturedata.xml" xlink:role="class">Qt3DRender::QTextureData</db:link></db:term>
<db:listitem>
<db:para>The QTextureData class stores texture information such as the target, height, width, depth, layers, wrap, and if mipmaps are enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturedataupdate.xml" xlink:role="class">Qt3DRender::QTextureDataUpdate</db:link></db:term>
<db:listitem>
<db:para>QTextureDataUpdate holds content and information required to perform partial updates of a texture content.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturegenerator.xml" xlink:role="class">Qt3DRender::QTextureGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides the image data for a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimage.xml" xlink:role="class">Qt3DRender::QTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedata.xml" xlink:role="class">Qt3DRender::QTextureImageData</db:link></db:term>
<db:listitem>
<db:para>QTextureImageData stores data representing a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedatagenerator.xml" xlink:role="class">Qt3DRender::QTextureImageDataGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides texture image data for QAbstractTextureImage.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureloader.xml" xlink:role="class">Qt3DRender::QTextureLoader</db:link></db:term>
<db:listitem>
<db:para>Handles the texture loading and setting the texture's properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturerectangle.xml" xlink:role="class">Qt3DRender::QTextureRectangle</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetRectangle target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturewrapmode.xml" xlink:role="class">Qt3DRender::QTextureWrapMode</db:link></db:term>
<db:listitem>
<db:para>Defines the wrap mode a Qt3DRender::QAbstractTexture should apply to a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qviewport.xml" xlink:role="class">Qt3DRender::QViewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qwaitfence.xml" xlink:role="class">Qt3DRender::QWaitFence</db:link></db:term>
<db:listitem>
<db:para>FrameGraphNode used to wait for a fence in the graphics command stream to become signaled.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-extras-module">
<db:title>Qt 3D Extras Module</db:title>
<db:variablelist role="classesbymodule Qt3DExtras">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qabstractcameracontroller.xml" xlink:role="class">Qt3DExtras::QAbstractCameraController</db:link></db:term>
<db:listitem>
<db:para>The QAbstractCameraController class provides basic functionality for camera controllers.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qconegeometry.xml" xlink:role="class">Qt3DExtras::QConeGeometry</db:link></db:term>
<db:listitem>
<db:para>The QConeGeometry class allows creation of a cone in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qconegeometryview.xml" xlink:role="class">Qt3DExtras::QConeGeometryView</db:link></db:term>
<db:listitem>
<db:para>A conical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qconemesh.xml" xlink:role="class">Qt3DExtras::QConeMesh</db:link></db:term>
<db:listitem>
<db:para>A conical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcuboidgeometry.xml" xlink:role="class">Qt3DExtras::QCuboidGeometry</db:link></db:term>
<db:listitem>
<db:para>The QCuboidGeometry class allows creation of a cuboid in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcuboidgeometryview.xml" xlink:role="class">Qt3DExtras::QCuboidGeometryView</db:link></db:term>
<db:listitem>
<db:para>A cuboid mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcuboidmesh.xml" xlink:role="class">Qt3DExtras::QCuboidMesh</db:link></db:term>
<db:listitem>
<db:para>A cuboid mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcylindergeometry.xml" xlink:role="class">Qt3DExtras::QCylinderGeometry</db:link></db:term>
<db:listitem>
<db:para>The QCylinderGeometry class allows creation of a cylinder in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcylindergeometryview.xml" xlink:role="class">Qt3DExtras::QCylinderGeometryView</db:link></db:term>
<db:listitem>
<db:para>A cylindrical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcylindermesh.xml" xlink:role="class">Qt3DExtras::QCylinderMesh</db:link></db:term>
<db:listitem>
<db:para>A cylindrical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qdiffusespecularmaterial.xml" xlink:role="class">Qt3DExtras::QDiffuseSpecularMaterial</db:link></db:term>
<db:listitem>
<db:para>The QDiffuseSpecularMaterial class provides a default implementation of the phong lighting effect.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qextrudedtextgeometry.xml" xlink:role="class">Qt3DExtras::QExtrudedTextGeometry</db:link></db:term>
<db:listitem>
<db:para>The QExtrudedTextGeometry class allows creation of a 3D extruded text in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qextrudedtextmesh.xml" xlink:role="class">Qt3DExtras::QExtrudedTextMesh</db:link></db:term>
<db:listitem>
<db:para>A 3D extruded Text mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qfirstpersoncameracontroller.xml" xlink:role="class">Qt3DExtras::QFirstPersonCameraController</db:link></db:term>
<db:listitem>
<db:para>The QFirstPersonCameraController class allows controlling the scene camera from the first person perspective.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qforwardrenderer.xml" xlink:role="class">Qt3DExtras::QForwardRenderer</db:link></db:term>
<db:listitem>
<db:para>The QForwardRenderer provides a default FrameGraph implementation of a forward renderer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qgoochmaterial.xml" xlink:role="class">Qt3DExtras::QGoochMaterial</db:link></db:term>
<db:listitem>
<db:para>The QGoochMaterial provides a material that implements the Gooch shading model, popular in CAD and CAM applications.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qmetalroughmaterial.xml" xlink:role="class">Qt3DExtras::QMetalRoughMaterial</db:link></db:term>
<db:listitem>
<db:para>The QMetalRoughMaterial provides a default implementation of PBR lighting.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qmorphphongmaterial.xml" xlink:role="class">Qt3DExtras::QMorphPhongMaterial</db:link></db:term>
<db:listitem>
<db:para>The QMorphPhongMaterial class provides a default implementation of the phong lighting effect.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qorbitcameracontroller.xml" xlink:role="class">Qt3DExtras::QOrbitCameraController</db:link></db:term>
<db:listitem>
<db:para>The QOrbitCameraController class allows controlling the scene camera along orbital path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qpervertexcolormaterial.xml" xlink:role="class">Qt3DExtras::QPerVertexColorMaterial</db:link></db:term>
<db:listitem>
<db:para>The QPerVertexColorMaterial class provides a default implementation for rendering the color properties set for each vertex.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qplanegeometry.xml" xlink:role="class">Qt3DExtras::QPlaneGeometry</db:link></db:term>
<db:listitem>
<db:para>The QPlaneGeometry class allows creation of a plane in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qplanegeometryview.xml" xlink:role="class">Qt3DExtras::QPlaneGeometryView</db:link></db:term>
<db:listitem>
<db:para>A square planar mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qplanemesh.xml" xlink:role="class">Qt3DExtras::QPlaneMesh</db:link></db:term>
<db:listitem>
<db:para>A square planar mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qskyboxentity.xml" xlink:role="class">Qt3DExtras::QSkyboxEntity</db:link></db:term>
<db:listitem>
<db:para>Qt3DExtras::QSkyboxEntity is a convenience Qt3DCore::QEntity subclass that can be used to insert a skybox in a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qspheregeometry.xml" xlink:role="class">Qt3DExtras::QSphereGeometry</db:link></db:term>
<db:listitem>
<db:para>The QSphereGeometry class allows creation of a sphere in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qspheregeometryview.xml" xlink:role="class">Qt3DExtras::QSphereGeometryView</db:link></db:term>
<db:listitem>
<db:para>A spherical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qspheremesh.xml" xlink:role="class">Qt3DExtras::QSphereMesh</db:link></db:term>
<db:listitem>
<db:para>A spherical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtext2dentity.xml" xlink:role="class">Qt3DExtras::QText2DEntity</db:link></db:term>
<db:listitem>
<db:para>QText2DEntity allows creation of a 2D text in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtexturematerial.xml" xlink:role="class">Qt3DExtras::QTextureMaterial</db:link></db:term>
<db:listitem>
<db:para>The QTextureMaterial provides a default implementation of a simple unlit texture material.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtorusgeometry.xml" xlink:role="class">Qt3DExtras::QTorusGeometry</db:link></db:term>
<db:listitem>
<db:para>The QTorusGeometry class allows creation of a torus in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtorusgeometryview.xml" xlink:role="class">Qt3DExtras::QTorusGeometryView</db:link></db:term>
<db:listitem>
<db:para>A toroidal mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtorusmesh.xml" xlink:role="class">Qt3DExtras::QTorusMesh</db:link></db:term>
<db:listitem>
<db:para>A toroidal mesh.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-animation-module">
<db:title>Qt 3D Animation Module</db:title>
<db:variablelist role="classesbymodule Qt3DAnimation">
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractanimation.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimation</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for Qt3D animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractanimationclip.xml" xlink:role="class">Qt3DAnimation::QAbstractAnimationClip</db:link></db:term>
<db:listitem>
<db:para>QAbstractAnimationClip is the base class for types providing key frame animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractclipanimator.xml" xlink:role="class">Qt3DAnimation::QAbstractClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QAbstractClipAnimator is the base class for types providing animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qabstractclipblendnode.xml" xlink:role="class">Qt3DAnimation::QAbstractClipBlendNode</db:link></db:term>
<db:listitem>
<db:para>QAbstractClipBlendNode is the base class for types used to construct animation blend trees.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qadditiveclipblend.xml" xlink:role="class">Qt3DAnimation::QAdditiveClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs an additive blend of two animation clips based on an additive factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationaspect.xml" xlink:role="class">Qt3DAnimation::QAnimationAspect</db:link></db:term>
<db:listitem>
<db:para>Provides key-frame animation capabilities to Qt 3D.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcallback.xml" xlink:role="class">Qt3DAnimation::QAnimationCallback</db:link></db:term>
<db:listitem>
<db:para>Represents an animation callback object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationclip.xml" xlink:role="class">Qt3DAnimation::QAnimationClip</db:link></db:term>
<db:listitem>
<db:para>Specifies key frame animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationclipdata.xml" xlink:role="class">Qt3DAnimation::QAnimationClipData</db:link></db:term>
<db:listitem>
<db:para>Class containing the animation data.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcliploader.xml" xlink:role="class">Qt3DAnimation::QAnimationClipLoader</db:link></db:term>
<db:listitem>
<db:para>Enables loading key frame animation data from a file.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationcontroller.xml" xlink:role="class">Qt3DAnimation::QAnimationController</db:link></db:term>
<db:listitem>
<db:para>A controller class for animations.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qanimationgroup.xml" xlink:role="class">Qt3DAnimation::QAnimationGroup</db:link></db:term>
<db:listitem>
<db:para>A class grouping animations together.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qblendedclipanimator.xml" xlink:role="class">Qt3DAnimation::QBlendedClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QBlendedClipAnimator is a component providing animation playback capabilities of a tree of blend nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qcallbackmapping.xml" xlink:role="class">Qt3DAnimation::QCallbackMapping</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto an invocation of a callback object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannel.xml" xlink:role="class">Qt3DAnimation::QChannel</db:link></db:term>
<db:listitem>
<db:para>Defines a channel for a QAnimationClipData. The animation system interpolates each channel component independently except in the case the QChannel is called &quot;Rotation&quot; (case sensitive), it has four QChannelComponents and the same number of keyframes for each QChannelComponent. In that case the interpolation will be performed using SLERP.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannelmapper.xml" xlink:role="class">Qt3DAnimation::QChannelMapper</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto properties of objects in the application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qchannelmapping.xml" xlink:role="class">Qt3DAnimation::QChannelMapping</db:link></db:term>
<db:listitem>
<db:para>Allows to map the channels within the clip onto properties of objects in the application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qclipanimator.xml" xlink:role="class">Qt3DAnimation::QClipAnimator</db:link></db:term>
<db:listitem>
<db:para>QClipAnimator is a component providing simple animation playback capabilities.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qclipblendvalue.xml" xlink:role="class">Qt3DAnimation::QClipBlendValue</db:link></db:term>
<db:listitem>
<db:para>Class used for including a clip in a blend tree.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qkeyframe.xml" xlink:role="class">Qt3DAnimation::QKeyFrame</db:link></db:term>
<db:listitem>
<db:para>A base class for handling keyframes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qkeyframeanimation.xml" xlink:role="class">Qt3DAnimation::QKeyframeAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing simple keyframe animation to a QTransform.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qlerpclipblend.xml" xlink:role="class">Qt3DAnimation::QLerpClipBlend</db:link></db:term>
<db:listitem>
<db:para>Performs a linear interpolation of two animation clips based on a normalized factor.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qmorphtarget.xml" xlink:role="class">Qt3DAnimation::QMorphTarget</db:link></db:term>
<db:listitem>
<db:para>A class providing morph targets to blend-shape animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qmorphinganimation.xml" xlink:role="class">Qt3DAnimation::QMorphingAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing blend-shape morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3danimation-qvertexblendanimation.xml" xlink:role="class">Qt3DAnimation::QVertexBlendAnimation</db:link></db:term>
<db:listitem>
<db:para>A class implementing vertex-blend morphing animation.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-scene2d-module">
<db:title>Qt 3D Scene2D Module</db:title>
<db:variablelist role="classesbymodule Qt3DScene2D">
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-quick-qscene2d.xml" xlink:role="class">Qt3DRender::Quick::QScene2D</db:link></db:term>
<db:listitem>
<db:para>This class enables rendering qml into a texture, which then can be used as a part of 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
