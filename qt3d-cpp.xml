<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D C++ Classes</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Qt 3D module contains functionality to support near-realtime simulation systems.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt 3D module provides the foundations and core types used for near-realtime simulations built on the Qt 3D framework.</db:para>
<db:section xml:id="namespaces">
<db:title>Namespaces</db:title>
<db:variablelist role="qt3d-namespaces">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore.xml" xlink:role="namespace">Qt3DCore</db:link></db:term>
<db:listitem>
<db:para>Contains classes that are the foundation for Qt 3D simulation framework, as well as classes that provide the ability to render using the Qt 3D framework.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras.xml" xlink:role="namespace">Qt3DExtras</db:link></db:term>
<db:listitem>
<db:para>Contains classes from the Qt3DExtras module.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput.xml" xlink:role="namespace">Qt3DInput</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable user input.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic.xml" xlink:role="namespace">Qt3DLogic</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable frame synchronization.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender.xml" xlink:role="namespace">Qt3DRender</db:link></db:term>
<db:listitem>
<db:para>Contains classes that enable 2D and 3D rendering.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="classes">
<db:title>Classes</db:title>
<db:section xml:id="qt-3d-core-module">
<db:title>Qt 3D Core Module</db:title>
<db:variablelist role="classesbymodule Qt3DCore">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qabstractaspect.xml" xlink:role="class">Qt3DCore::QAbstractAspect</db:link></db:term>
<db:listitem>
<db:para>QAbstractAspect is the base class for aspects that provide a vertical slice of behavior.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qaspectengine.xml" xlink:role="class">Qt3DCore::QAspectEngine</db:link></db:term>
<db:listitem>
<db:para>Responsible for handling all the QAbstractAspect subclasses that have been registered with the scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qaspectjob.xml" xlink:role="class">Qt3DCore::QAspectJob</db:link></db:term>
<db:listitem>
<db:para>The base class for jobs executed in an aspect</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qbackendnode.xml" xlink:role="class">Qt3DCore::QBackendNode</db:link></db:term>
<db:listitem>
<db:para>The base class for all Qt3D backend nodes</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qbackendnodemapper.xml" xlink:role="class">Qt3DCore::QBackendNodeMapper</db:link></db:term>
<db:listitem>
<db:para>Creates and maps backend nodes to their respective frontend nodes</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qcomponent.xml" xlink:role="class">Qt3DCore::QComponent</db:link></db:term>
<db:listitem>
<db:para>The base class of scene nodes that can be aggregated by Qt3DCore::QEntity instances as a component.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qcomponentaddedchange.xml" xlink:role="class">Qt3DCore::QComponentAddedChange</db:link></db:term>
<db:listitem>
<db:para>The QComponentAddedChange class is used to notify when a component is added to an entity</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qcomponentremovedchange.xml" xlink:role="class">Qt3DCore::QComponentRemovedChange</db:link></db:term>
<db:listitem>
<db:para>The QComponentRemovedChange class is used to notify when a component is removed from an entity</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qdynamicpropertyupdatedchange.xml" xlink:role="class">Qt3DCore::QDynamicPropertyUpdatedChange</db:link></db:term>
<db:listitem>
<db:para>The QDynamicPropertyUpdatedChange class is used to notify when a dynamic property value is updated</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qentity.xml" xlink:role="class">Qt3DCore::QEntity</db:link></db:term>
<db:listitem>
<db:para>Qt3DCore::QEntity is a Qt3DCore::QNode subclass that can aggregate several Qt3DCore::QComponent instances that will specify its behavior.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnode.xml" xlink:role="class">Qt3DCore::QNode</db:link></db:term>
<db:listitem>
<db:para>QNode is the base class of all Qt3D node classes used to build a Qt3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnodecreatedchange.xml" xlink:role="class">Qt3DCore::QNodeCreatedChange</db:link></db:term>
<db:listitem>
<db:para>Used to notify when a node is created.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnodecreatedchangebase.xml" xlink:role="class">Qt3DCore::QNodeCreatedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QNodeCreatedChangeBase class is the base class for all NodeCreated QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnodedestroyedchange.xml" xlink:role="class">Qt3DCore::QNodeDestroyedChange</db:link></db:term>
<db:listitem>
<db:para>Used to notify when a node is destroyed.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qnodeid.xml" xlink:role="class">Qt3DCore::QNodeId</db:link></db:term>
<db:listitem>
<db:para>Uniquely identifies a QNode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertynodeaddedchange.xml" xlink:role="class">Qt3DCore::QPropertyNodeAddedChange</db:link></db:term>
<db:listitem>
<db:para>Used to notify when a node is added to a property</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertynoderemovedchange.xml" xlink:role="class">Qt3DCore::QPropertyNodeRemovedChange</db:link></db:term>
<db:listitem>
<db:para>The QPropertyNodeRemovedChange class is used to notify when a node is removed from a property</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyupdatedchange.xml" xlink:role="class">Qt3DCore::QPropertyUpdatedChange</db:link></db:term>
<db:listitem>
<db:para>The QPropertyUpdatedChange class is used to notify when a property value is updated</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyupdatedchangebase.xml" xlink:role="class">Qt3DCore::QPropertyUpdatedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QPropertyUpdatedChangeBase class is the base class for all PropertyUpdated QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyvalueaddedchange.xml" xlink:role="class">Qt3DCore::QPropertyValueAddedChange</db:link></db:term>
<db:listitem>
<db:para>Used to notify when a value is added to a property</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyvalueaddedchangebase.xml" xlink:role="class">Qt3DCore::QPropertyValueAddedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QPropertyValueAddedChangeBase class is the base class for all PropertyValueAdded QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyvalueremovedchange.xml" xlink:role="class">Qt3DCore::QPropertyValueRemovedChange</db:link></db:term>
<db:listitem>
<db:para>Used to notify when a value is added to a property</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qpropertyvalueremovedchangebase.xml" xlink:role="class">Qt3DCore::QPropertyValueRemovedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QPropertyValueRemovedChangeBase class is the base class for all PropertyValueRemoved QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qscenechange.xml" xlink:role="class">Qt3DCore::QSceneChange</db:link></db:term>
<db:listitem>
<db:para>The base class for changes that can be sent and received by Qt3D's change notification system</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qstaticpropertyupdatedchangebase.xml" xlink:role="class">Qt3DCore::QStaticPropertyUpdatedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QStaticPropertyUpdatedChangeBase class is the base class for all static PropertyUpdated QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qstaticpropertyvalueaddedchangebase.xml" xlink:role="class">Qt3DCore::QStaticPropertyValueAddedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QStaticPropertyValueAddedChangeBase class is the base class for all static PropertyValueAdded QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qstaticpropertyvalueremovedchangebase.xml" xlink:role="class">Qt3DCore::QStaticPropertyValueRemovedChangeBase</db:link></db:term>
<db:listitem>
<db:para>The QStaticPropertyValueRemovedChangeBase class is the base class for all static PropertyValueRemoved QSceneChange events</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-qtransform.xml" xlink:role="class">Qt3DCore::QTransform</db:link></db:term>
<db:listitem>
<db:para>Used to perform transforms on meshes</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dcore-quick-qqmlaspectengine.xml" xlink:role="class">Qt3DCore::Quick::QQmlAspectEngine</db:link></db:term>
<db:listitem>
<db:para>The QQmlAspectEngine provides an environment for the QAspectEngine and a method for instantiating QML components.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-input-module">
<db:title>Qt 3D Input Module</db:title>
<db:variablelist role="classesbymodule Qt3DInput">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractactioninput.xml" xlink:role="class">Qt3DInput::QAbstractActionInput</db:link></db:term>
<db:listitem>
<db:para>QAbstractActionInput is the base class for the Action Input and all Aggregate Action Inputs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractaxisinput.xml" xlink:role="class">Qt3DInput::QAbstractAxisInput</db:link></db:term>
<db:listitem>
<db:para>QAbstractActionInput is the base class for all Axis Input.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qabstractphysicaldevice.xml" xlink:role="class">Qt3DInput::QAbstractPhysicalDevice</db:link></db:term>
<db:listitem>
<db:para>QAbstractPhysicalDevice is the base class used by Qt3d to interact with arbitrary input devices.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaction.xml" xlink:role="class">Qt3DInput::QAction</db:link></db:term>
<db:listitem>
<db:para>Links a set of QAbstractActionInput that trigger the same event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qactioninput.xml" xlink:role="class">Qt3DInput::QActionInput</db:link></db:term>
<db:listitem>
<db:para>QActionInput stores Device and Buttons used to trigger an input event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qanalogaxisinput.xml" xlink:role="class">Qt3DInput::QAnalogAxisInput</db:link></db:term>
<db:listitem>
<db:para>An axis input controlled by an analog input The axis value is controlled like a traditional analog input such as a joystick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxis.xml" xlink:role="class">Qt3DInput::QAxis</db:link></db:term>
<db:listitem>
<db:para>QAxis stores QAbstractAxisInputs used to trigger an input event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxisaccumulator.xml" xlink:role="class">Qt3DInput::QAxisAccumulator</db:link></db:term>
<db:listitem>
<db:para>QAxisAccumulator processes velocity or acceleration data from a QAxis.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qaxissetting.xml" xlink:role="class">Qt3DInput::QAxisSetting</db:link></db:term>
<db:listitem>
<db:para>QAxisSetting stores settings for the specified list of Axis.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qbuttonaxisinput.xml" xlink:role="class">Qt3DInput::QButtonAxisInput</db:link></db:term>
<db:listitem>
<db:para>An axis input controlled by buttons The axis value is controlled by buttons rather than a traditional analog input such as a joystick.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputaspect.xml" xlink:role="class">Qt3DInput::QInputAspect</db:link></db:term>
<db:listitem>
<db:para>Responsible for creating physical devices and handling associated jobs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputchord.xml" xlink:role="class">Qt3DInput::QInputChord</db:link></db:term>
<db:listitem>
<db:para>QInputChord represents a set of QAbstractActionInput's that must be triggerd at once.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputsequence.xml" xlink:role="class">Qt3DInput::QInputSequence</db:link></db:term>
<db:listitem>
<db:para>QInputSequence represents a set of QAbstractActionInput's that must be triggerd one after the other.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qinputsettings.xml" xlink:role="class">Qt3DInput::QInputSettings</db:link></db:term>
<db:listitem>
<db:para>QInputSettings class holds the pointer to an input event source object.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyevent.xml" xlink:role="class">Qt3DInput::QKeyEvent</db:link></db:term>
<db:listitem>
<db:para>QKeyEvent event type send by KeyBoardHandler.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyboarddevice.xml" xlink:role="class">Qt3DInput::QKeyboardDevice</db:link></db:term>
<db:listitem>
<db:para>QKeyboardDevice is in charge of dispatching keyboard events to attached QQKeyboardHandler objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qkeyboardhandler.xml" xlink:role="class">Qt3DInput::QKeyboardHandler</db:link></db:term>
<db:listitem>
<db:para>Provides keyboard event notification</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qlogicaldevice.xml" xlink:role="class">Qt3DInput::QLogicalDevice</db:link></db:term>
<db:listitem>
<db:para>QLogicalDevice allows the user to define a set of actions that they wish to use within an application.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmousedevice.xml" xlink:role="class">Qt3DInput::QMouseDevice</db:link></db:term>
<db:listitem>
<db:para>Delegates mouse events to the attached MouseHandler objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmouseevent.xml" xlink:role="class">Qt3DInput::QMouseEvent</db:link></db:term>
<db:listitem>
<db:para>The Qt3DCore::QMouseEvent contains parameters that describe a mouse event.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qmousehandler.xml" xlink:role="class">Qt3DInput::QMouseHandler</db:link></db:term>
<db:listitem>
<db:para>Provides a means of being notified about mouse events when attached to a QMouseDevice instance.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dinput-qwheelevent.xml" xlink:role="class">Qt3DInput::QWheelEvent</db:link></db:term>
<db:listitem>
<db:para>The QWheelEvent class contains parameters that describe a mouse wheel event.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-logic-module">
<db:title>Qt 3D Logic Module</db:title>
<db:variablelist role="classesbymodule Qt3DLogic">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic-qframeaction.xml" xlink:role="class">Qt3DLogic::QFrameAction</db:link></db:term>
<db:listitem>
<db:para>Provides a way to have a synchronous function executed each frame.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dlogic-qlogicaspect.xml" xlink:role="class">Qt3DLogic::QLogicAspect</db:link></db:term>
<db:listitem>
<db:para>Responsible for handling frame synchronization jobs.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-render-module">
<db:title>Qt 3D Render Module</db:title>
<db:variablelist role="classesbymodule Qt3DRender">
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-assimpio.xml" xlink:role="class">Qt3DRender::AssimpIO</db:link></db:term>
<db:listitem>
<db:para>Provides a generic way of loading various 3D assets format into a Qt3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractfunctor.xml" xlink:role="class">Qt3DRender::QAbstractFunctor</db:link></db:term>
<db:listitem>
<db:para>QAbstractFunctor is an abstract base class for all functors.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstractlight.xml" xlink:role="class">Qt3DRender::QAbstractLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a QAbstractLight object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttexture.xml" xlink:role="class">Qt3DRender::QAbstractTexture</db:link></db:term>
<db:listitem>
<db:para>A base class to be used to provide textures.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qabstracttextureimage.xml" xlink:role="class">Qt3DRender::QAbstractTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphacoverage.xml" xlink:role="class">Qt3DRender::QAlphaCoverage</db:link></db:term>
<db:listitem>
<db:para>Enable alpha-to-coverage multisampling mode</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qalphatest.xml" xlink:role="class">Qt3DRender::QAlphaTest</db:link></db:term>
<db:listitem>
<db:para>The QAlphaTest class specify alpha reference test</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qattribute.xml" xlink:role="class">Qt3DRender::QAttribute</db:link></db:term>
<db:listitem>
<db:para>Defines an attribute and how data should be read from a QBuffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequation.xml" xlink:role="class">Qt3DRender::QBlendEquation</db:link></db:term>
<db:listitem>
<db:para>The QBlendEquation class specifies the equation used for both the RGB blend equation and the Alpha blend equation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qblendequationarguments.xml" xlink:role="class">Qt3DRender::QBlendEquationArguments</db:link></db:term>
<db:listitem>
<db:para>Encapsulates blending information: specifies how the incoming values (what's going to be drawn) are going to affect the existing values (what is already drawn).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qbuffer.xml" xlink:role="class">Qt3DRender::QBuffer</db:link></db:term>
<db:listitem>
<db:para>Provides a data store for raw data to later be used as vertices or uniforms.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qbufferdatagenerator.xml" xlink:role="class">Qt3DRender::QBufferDataGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides a mechanism to generate buffer data from a job.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcamera.xml" xlink:role="class">Qt3DRender::QCamera</db:link></db:term>
<db:listitem>
<db:para>The QCamera class defines a view point through which the scene will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameralens.xml" xlink:role="class">Qt3DRender::QCameraLens</db:link></db:term>
<db:listitem>
<db:para>Qt3DRender::QCameraLens specifies the projection matrix that will be used to define a Camera for a 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcameraselector.xml" xlink:role="class">Qt3DRender::QCameraSelector</db:link></db:term>
<db:listitem>
<db:para>Class to allow for selection of camera to be used</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclearbuffers.xml" xlink:role="class">Qt3DRender::QClearBuffers</db:link></db:term>
<db:listitem>
<db:para>Class to clear buffers</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qclipplane.xml" xlink:role="class">Qt3DRender::QClipPlane</db:link></db:term>
<db:listitem>
<db:para>Enables an additional OpenGL clipping plane that can be in shaders using gl_ClipDistance</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcolormask.xml" xlink:role="class">Qt3DRender::QColorMask</db:link></db:term>
<db:listitem>
<db:para>Allows specifying which color components should be written to the currently bound frame buffer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcomputecommand.xml" xlink:role="class">Qt3DRender::QComputeCommand</db:link></db:term>
<db:listitem>
<db:para>QComponent to issue work for the compute shader on GPU</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qcullface.xml" xlink:role="class">Qt3DRender::QCullFace</db:link></db:term>
<db:listitem>
<db:para>The QCullFace class specifies whether front or back face culling are enabled</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdepthtest.xml" xlink:role="class">Qt3DRender::QDepthTest</db:link></db:term>
<db:listitem>
<db:para>The QDepthTest class tests the fragment shader's depth value against the depth of a sample being written to.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdirectionallight.xml" xlink:role="class">Qt3DRender::QDirectionalLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Directional Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdispatchcompute.xml" xlink:role="class">Qt3DRender::QDispatchCompute</db:link></db:term>
<db:listitem>
<db:para>FrameGraph node to issue work for the compute shader on GPU</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qdithering.xml" xlink:role="class">Qt3DRender::QDithering</db:link></db:term>
<db:listitem>
<db:para>Enable dithering</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qeffect.xml" xlink:role="class">Qt3DRender::QEffect</db:link></db:term>
<db:listitem>
<db:para>The base class for effects in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfilterkey.xml" xlink:role="class">Qt3DRender::QFilterKey</db:link></db:term>
<db:listitem>
<db:para>The QFilterKey class provides storage for filter keys and their values.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qframegraphnode.xml" xlink:role="class">Qt3DRender::QFrameGraphNode</db:link></db:term>
<db:listitem>
<db:para>Base class of all FrameGraph configuration nodes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrontface.xml" xlink:role="class">Qt3DRender::QFrontFace</db:link></db:term>
<db:listitem>
<db:para>The QFrontFace class defines front and back facing polygons.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qfrustumculling.xml" xlink:role="class">Qt3DRender::QFrustumCulling</db:link></db:term>
<db:listitem>
<db:para>Enable frustum culling for the FrameGraph</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgeometry.xml" xlink:role="class">Qt3DRender::QGeometry</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgeometryrenderer.xml" xlink:role="class">Qt3DRender::QGeometryRenderer</db:link></db:term>
<db:listitem>
<db:para></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qgraphicsapifilter.xml" xlink:role="class">Qt3DRender::QGraphicsApiFilter</db:link></db:term>
<db:listitem>
<db:para>The QGraphicsApiFilter class identifies the API required for the attached QTechnique</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayer.xml" xlink:role="class">Qt3DRender::QLayer</db:link></db:term>
<db:listitem>
<db:para>The QLayer class provides a way of filtering which entities will be rendered.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qlayerfilter.xml" xlink:role="class">Qt3DRender::QLayerFilter</db:link></db:term>
<db:listitem>
<db:para>Controls layers Drawn in a frame graph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmaterial.xml" xlink:role="class">Qt3DRender::QMaterial</db:link></db:term>
<db:listitem>
<db:para>Provides an abstract class that should be the base of all material component classes in a scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmesh.xml" xlink:role="class">Qt3DRender::QMesh</db:link></db:term>
<db:listitem>
<db:para>A custom mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qmultisampleantialiasing.xml" xlink:role="class">Qt3DRender::QMultiSampleAntiAliasing</db:link></db:term>
<db:listitem>
<db:para>Enable multisample antialiasing</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodepthmask.xml" xlink:role="class">Qt3DRender::QNoDepthMask</db:link></db:term>
<db:listitem>
<db:para>Disable depth write</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qnodraw.xml" xlink:role="class">Qt3DRender::QNoDraw</db:link></db:term>
<db:listitem>
<db:para>When a Qt3DRender::QNoDraw node is present in a FrameGraph branch, this prevents the renderer from rendering any primitive.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qobjectpicker.xml" xlink:role="class">Qt3DRender::QObjectPicker</db:link></db:term>
<db:listitem>
<db:para>The QObjectPicker class instantiates a component that can be used to interact with a QEntity by a process known as picking.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qparameter.xml" xlink:role="class">Qt3DRender::QParameter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for a name and value pair.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickevent.xml" xlink:role="class">Qt3DRender::QPickEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickEvent class holds information when an object is picked</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpicktriangleevent.xml" xlink:role="class">Qt3DRender::QPickTriangleEvent</db:link></db:term>
<db:listitem>
<db:para>The QPickTriangleEvent class holds information when a triangle is picked</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpickingsettings.xml" xlink:role="class">Qt3DRender::QPickingSettings</db:link></db:term>
<db:listitem>
<db:para>The QPickingSettings class specifies how entity picking is handled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointlight.xml" xlink:role="class">Qt3DRender::QPointLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Point Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpointsize.xml" xlink:role="class">Qt3DRender::QPointSize</db:link></db:term>
<db:listitem>
<db:para>Specifies the size of rasterized points. May either be set statically or by shader programs.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qpolygonoffset.xml" xlink:role="class">Qt3DRender::QPolygonOffset</db:link></db:term>
<db:listitem>
<db:para>The QPolygonOffset class sets the scale and steps to calculate depth values for polygon offsets.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderaspect.xml" xlink:role="class">Qt3DRender::QRenderAspect</db:link></db:term>
<db:listitem>
<db:para>The QRenderAspect class</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapture.xml" xlink:role="class">Qt3DRender::QRenderCapture</db:link></db:term>
<db:listitem>
<db:para>Frame graph node for render capture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendercapturereply.xml" xlink:role="class">Qt3DRender::QRenderCaptureReply</db:link></db:term>
<db:listitem>
<db:para>Receives the result of render capture request.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpass.xml" xlink:role="class">Qt3DRender::QRenderPass</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Render Pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderpassfilter.xml" xlink:role="class">Qt3DRender::QRenderPassFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersettings.xml" xlink:role="class">Qt3DRender::QRenderSettings</db:link></db:term>
<db:listitem>
<db:para>The QRenderSettings class holds settings related to rendering process and host the active FrameGraph.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstate.xml" xlink:role="class">Qt3DRender::QRenderState</db:link></db:term>
<db:listitem>
<db:para>An abstract base class for all render states</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstatecreatedchange.xml" xlink:role="class">Qt3DRender::QRenderStateCreatedChange</db:link></db:term>
<db:listitem>
<db:para>The QRenderStateCreatedChange class</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrenderstateset.xml" xlink:role="class">Qt3DRender::QRenderStateSet</db:link></db:term>
<db:listitem>
<db:para>The QRenderStateSet FrameGraph node offers a way of specifying a set of QRenderState objects to be applied during the execution of a framegraph branch.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendersurfaceselector.xml" xlink:role="class">Qt3DRender::QRenderSurfaceSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying the render surface</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertarget.xml" xlink:role="class">Qt3DRender::QRenderTarget</db:link></db:term>
<db:listitem>
<db:para>The QRenderTarget class encapsulates a target (usually a frame buffer object) which the renderer can render into.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetoutput.xml" xlink:role="class">Qt3DRender::QRenderTargetOutput</db:link></db:term>
<db:listitem>
<db:para>The QRenderTargetOutput class allows the specification of an attachment of a render target (whether it is a color texture, a depth texture, etc... ).</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qrendertargetselector.xml" xlink:role="class">Qt3DRender::QRenderTargetSelector</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying a render target</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsceneloader.xml" xlink:role="class">Qt3DRender::QSceneLoader</db:link></db:term>
<db:listitem>
<db:para>Provides the facility to load an existing Scene</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qscissortest.xml" xlink:role="class">Qt3DRender::QScissorTest</db:link></db:term>
<db:listitem>
<db:para>The QScissorTest class discards fragments that fall outside of a certain rectangular portion of the screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qseamlesscubemap.xml" xlink:role="class">Qt3DRender::QSeamlessCubemap</db:link></db:term>
<db:listitem>
<db:para>Enables seamless cubemap texture filtering.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderdata.xml" xlink:role="class">Qt3DRender::QShaderData</db:link></db:term>
<db:listitem>
<db:para>Provides a way of specifying values of a Uniform Block or a shader structure.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qshaderprogram.xml" xlink:role="class">Qt3DRender::QShaderProgram</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Shader Program.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qsortpolicy.xml" xlink:role="class">Qt3DRender::QSortPolicy</db:link></db:term>
<db:listitem>
<db:para>Provides storage for the sort types to be used</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qspotlight.xml" xlink:role="class">Qt3DRender::QSpotLight</db:link></db:term>
<db:listitem>
<db:para>Encapsulate a Spot Light object in a Qt 3D scene.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstencilmask.xml" xlink:role="class">Qt3DRender::QStencilMask</db:link></db:term>
<db:listitem>
<db:para>The QStencilMask class controls the front and back writing of individual bits in the stencil planes.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperation.xml" xlink:role="class">Qt3DRender::QStencilOperation</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperation class specifies stencil operation</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciloperationarguments.xml" xlink:role="class">Qt3DRender::QStencilOperationArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilOperationArguments class sets the actions to be taken when stencil and depth tests fail.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltest.xml" xlink:role="class">Qt3DRender::QStencilTest</db:link></db:term>
<db:listitem>
<db:para>The QStencilTest class specifies arguments for the stecil test</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qstenciltestarguments.xml" xlink:role="class">Qt3DRender::QStencilTestArguments</db:link></db:term>
<db:listitem>
<db:para>The QStencilTestArguments class specifies arguments for stencil test</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechnique.xml" xlink:role="class">Qt3DRender::QTechnique</db:link></db:term>
<db:listitem>
<db:para>Encapsulates a Technique.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtechniquefilter.xml" xlink:role="class">Qt3DRender::QTechniqueFilter</db:link></db:term>
<db:listitem>
<db:para>Provides storage for vectors of Filter Keys and Parameters</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1d.xml" xlink:role="class">Qt3DRender::QTexture1D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture1darray.xml" xlink:role="class">Qt3DRender::QTexture1DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target1DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2d.xml" xlink:role="class">Qt3DRender::QTexture2D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2darray.xml" xlink:role="class">Qt3DRender::QTexture2DArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisample.xml" xlink:role="class">Qt3DRender::QTexture2DMultisample</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisample target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture2dmultisamplearray.xml" xlink:role="class">Qt3DRender::QTexture2DMultisampleArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target2DMultisampleArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexture3d.xml" xlink:role="class">Qt3DRender::QTexture3D</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a Target3D target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturebuffer.xml" xlink:role="class">Qt3DRender::QTextureBuffer</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetBuffer target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemap.xml" xlink:role="class">Qt3DRender::QTextureCubeMap</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMap target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturecubemaparray.xml" xlink:role="class">Qt3DRender::QTextureCubeMapArray</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetCubeMapArray target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturedata.xml" xlink:role="class">Qt3DRender::QTextureData</db:link></db:term>
<db:listitem>
<db:para>The QTextureData class stores texture information such as the target, height, width, depth, layers, wrap, and if mipmaps are enabled.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimage.xml" xlink:role="class">Qt3DRender::QTextureImage</db:link></db:term>
<db:listitem>
<db:para>Encapsulates the necessary information to create an OpenGL texture image from an image source.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedata.xml" xlink:role="class">Qt3DRender::QTextureImageData</db:link></db:term>
<db:listitem>
<db:para>QTextureImageData stores data representing a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtextureimagedatagenerator.xml" xlink:role="class">Qt3DRender::QTextureImageDataGenerator</db:link></db:term>
<db:listitem>
<db:para>Provides texture image data for QAbstractTextureImage</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturerectangle.xml" xlink:role="class">Qt3DRender::QTextureRectangle</db:link></db:term>
<db:listitem>
<db:para>A QAbstractTexture with a TargetRectangle target format.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qtexturewrapmode.xml" xlink:role="class">Qt3DRender::QTextureWrapMode</db:link></db:term>
<db:listitem>
<db:para>Defines the wrap mode a Qt3DRender::QAbstractTexture should apply to a texture.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3drender-qviewport.xml" xlink:role="class">Qt3DRender::QViewport</db:link></db:term>
<db:listitem>
<db:para>A viewport on the Qt3D Scene</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
<db:section xml:id="qt-3d-extras-module">
<db:title>Qt 3D Extras Module</db:title>
<db:variablelist role="classesbymodule Qt3DExtras">
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qconegeometry.xml" xlink:role="class">Qt3DExtras::QConeGeometry</db:link></db:term>
<db:listitem>
<db:para>The QConeGeometry class allows creation of a cone in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qconemesh.xml" xlink:role="class">Qt3DExtras::QConeMesh</db:link></db:term>
<db:listitem>
<db:para>A conical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcuboidgeometry.xml" xlink:role="class">Qt3DExtras::QCuboidGeometry</db:link></db:term>
<db:listitem>
<db:para>The QCuboidGeometry class allows creation of a cuboid in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcuboidmesh.xml" xlink:role="class">Qt3DExtras::QCuboidMesh</db:link></db:term>
<db:listitem>
<db:para>A cuboid mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcylindergeometry.xml" xlink:role="class">Qt3DExtras::QCylinderGeometry</db:link></db:term>
<db:listitem>
<db:para>The QCylinderGeometry class allows creation of a cylinder in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qcylindermesh.xml" xlink:role="class">Qt3DExtras::QCylinderMesh</db:link></db:term>
<db:listitem>
<db:para>A cylindrical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qdiffusemapmaterial.xml" xlink:role="class">Qt3DExtras::QDiffuseMapMaterial</db:link></db:term>
<db:listitem>
<db:para>The QDiffuseMapMaterial provides a default implementation of the phong lighting effect where the diffuse light component is read from a texture map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qdiffusespecularmapmaterial.xml" xlink:role="class">Qt3DExtras::QDiffuseSpecularMapMaterial</db:link></db:term>
<db:listitem>
<db:para>The QDiffuseSpecularMapMaterial provides a default implementation of the phong lighting effect where the diffuse and specular light components are read from texture maps.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qfirstpersoncameracontroller.xml" xlink:role="class">Qt3DExtras::QFirstPersonCameraController</db:link></db:term>
<db:listitem>
<db:para>The QFirstPersonCameraController class allows controlling the scene camera from the first person perspective.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qforwardrenderer.xml" xlink:role="class">Qt3DExtras::QForwardRenderer</db:link></db:term>
<db:listitem>
<db:para>The QForwardRenderer provides a default FrameGraph implementation of a forward renderer.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qgoochmaterial.xml" xlink:role="class">Qt3DExtras::QGoochMaterial</db:link></db:term>
<db:listitem>
<db:para>The QGoochMaterial provides a material that implements the Gooch shading model, popular in CAD and CAM applications.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qnormaldiffusemapalphamaterial.xml" xlink:role="class">Qt3DExtras::QNormalDiffuseMapAlphaMaterial</db:link></db:term>
<db:listitem>
<db:para>The QNormalDiffuseMapAlphaMaterial provides a specialization of QNormalDiffuseMapMaterial with alpha coverage and a depth test performed in the rendering pass.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qnormaldiffusemapmaterial.xml" xlink:role="class">Qt3DExtras::QNormalDiffuseMapMaterial</db:link></db:term>
<db:listitem>
<db:para>The QNormalDiffuseMapMaterial provides a default implementation of the phong lighting and bump effect where the diffuse light component is read from a texture map and the normals of the mesh being rendered from a normal texture map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qnormaldiffusespecularmapmaterial.xml" xlink:role="class">Qt3DExtras::QNormalDiffuseSpecularMapMaterial</db:link></db:term>
<db:listitem>
<db:para>The QNormalDiffuseSpecularMapMaterial provides a default implementation of the phong lighting and bump effect where the diffuse and specular light components are read from texture maps and the normals of the mesh being rendered from a normal texture map.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qorbitcameracontroller.xml" xlink:role="class">Qt3DExtras::QOrbitCameraController</db:link></db:term>
<db:listitem>
<db:para>The QOrbitCameraController class allows controlling the scene camera along orbital path.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qpervertexcolormaterial.xml" xlink:role="class">Qt3DExtras::QPerVertexColorMaterial</db:link></db:term>
<db:listitem>
<db:para>The QPerVertexColorMaterial class provides a default implementation for rendering the color properties set for each vertex.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qphongalphamaterial.xml" xlink:role="class">Qt3DExtras::QPhongAlphaMaterial</db:link></db:term>
<db:listitem>
<db:para>The QPhongAlphaMaterial class provides a default implementation of the phong lighting effect with alpha.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qphongmaterial.xml" xlink:role="class">Qt3DExtras::QPhongMaterial</db:link></db:term>
<db:listitem>
<db:para>The QPhongMaterial class provides a default implementation of the phong lighting effect.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qplanegeometry.xml" xlink:role="class">Qt3DExtras::QPlaneGeometry</db:link></db:term>
<db:listitem>
<db:para>The QPlaneGeometry class allows creation of a plane in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qplanemesh.xml" xlink:role="class">Qt3DExtras::QPlaneMesh</db:link></db:term>
<db:listitem>
<db:para>A square planar mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qspheregeometry.xml" xlink:role="class">Qt3DExtras::QSphereGeometry</db:link></db:term>
<db:listitem>
<db:para>The QSphereGeometry class allows creation of a sphere in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qspheremesh.xml" xlink:role="class">Qt3DExtras::QSphereMesh</db:link></db:term>
<db:listitem>
<db:para>A spherical mesh.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtorusgeometry.xml" xlink:role="class">Qt3DExtras::QTorusGeometry</db:link></db:term>
<db:listitem>
<db:para>The QTorusGeometry class allows creation of a torus in 3D space.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qt3dextras-qtorusmesh.xml" xlink:role="class">Qt3DExtras::QTorusMesh</db:link></db:term>
<db:listitem>
<db:para>A toroidal mesh.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:section>
</db:section>
</db:article>
