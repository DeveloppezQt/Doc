<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothLocalDevice Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> class enables access to the local Bluetooth device.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothLocalDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> provides functions for getting and setting the state of local Bluetooth devices.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothLocalDevice::Error</db:title>
<db:para>This enum describes errors that maybe returned</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No known error</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::PairingError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Error in pairing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>Unknown error</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="HostMode-enum">
<db:title>enum QBluetoothLocalDevice::HostMode</db:title>
<db:para>This enum describes the most of the local Bluetooth device.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostPoweredOff</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Power off the device</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostConnectable</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can connect to the local Bluetooth device if they have previously been paired with it or otherwise know its address. This powers up the device if it was powered off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostDiscoverable</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can discover the presence of the local Bluetooth device. The device will also be connectable, and powered on. On Android, this mode can only be active for a maximum of 5 minutes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostDiscoverableLimitedInquiry</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can discover the presence of the local Bluetooth device when performing a limited inquiry. This should be used for locating services that are only made discoverable for a limited period of time. This can speed up discovery between gaming devices, as service discovery can be skipped on devices not in LimitedInquiry mode. In this mode, the device will be connectable and powered on, if required. This mode is is not supported on Android. On macOS, it is not possible to set the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>() to HostConnectable or HostPoweredOff.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="Pairing-enum">
<db:title>enum QBluetoothLocalDevice::Pairing</db:title>
<db:para>This enum describes the pairing state between the two Bluetooth devices.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::Unpaired</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are not paired.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::Paired</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are paired. The system will prompt the user for authorization when the remote device initiates a connection to the local device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::AuthorizedPaired</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are paired. The system will not prompt the user for authorization when the remote device initiates a connection to the local device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothLocalDevice">
<db:title>[explicit] QBluetoothLocalDevice::QBluetoothLocalDevice(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QBluetoothLocalDevice-1">
<db:title>[explicit] QBluetoothLocalDevice::QBluetoothLocalDevice(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Construct new <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> for <db:code role="parameter">address</db:code>. If <db:code role="parameter">address</db:code> is default constructed the resulting local device selects the local default device.</db:para>
</db:section>
<db:section xml:id="dtor.QBluetoothLocalDevice">
<db:title>[virtual noexcept] QBluetoothLocalDevice::~QBluetoothLocalDevice()</db:title>
<db:para>Destroys the <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link>.</db:para>
</db:section>
<db:section xml:id="address">
<db:title>QBluetoothAddress QBluetoothLocalDevice::address() const</db:title>
<db:para>Returns the MAC address of this Bluetooth device.</db:para>
<db:note>
<db:para>On Android, this function always returns the constant value <db:code>02:00:00:00:00:00</db:code> as local address starting with Android 6.0. The programmatic access to the device's local MAC address was removed.</db:para>
</db:note>
</db:section>
<db:section xml:id="allDevices">
<db:title>[static] QList&lt;QBluetoothHostInfo&gt; QBluetoothLocalDevice::allDevices()</db:title>
<db:para>Returns a list of all available local Bluetooth devices. On macOS, there is only the &quot;default&quot; local device.</db:para>
</db:section>
<db:section xml:id="connectedDevices">
<db:title>[since 5.3] QList&lt;QBluetoothAddress&gt; QBluetoothLocalDevice::connectedDevices() const</db:title>
<db:para>Returns the list of connected devices. This list is different from the list of currently paired devices.</db:para>
<db:para>On Android and macOS, it is not possible to retrieve a list of connected devices. It is only possible to listen to (dis)connect changes. For convenience, this class monitors all connect and disconnect events since its instanciation and returns the current list when calling this function. Therefore it is possible that this function returns an empty list shortly after creating an instance.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceConnected">deviceConnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceDisconnected">deviceDisconnected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceConnected">
<db:title>[since 5.3] void QBluetoothLocalDevice::deviceConnected(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>This signal is emitted when the local device establishes a connection to a remote device with <db:code role="parameter">address</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceDisconnected">deviceDisconnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#connectedDevices">connectedDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceDisconnected">
<db:title>[since 5.3] void QBluetoothLocalDevice::deviceDisconnected(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:para>This signal is emitted when the local device disconnects from a remote Bluetooth device with <db:code role="parameter">address</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceConnected">deviceConnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#connectedDevices">connectedDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>void QBluetoothLocalDevice::error(QBluetoothLocalDevice::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>Signal emitted if there's an exceptional <db:code role="parameter">error</db:code> while pairing.</db:para>
</db:section>
<db:section xml:id="hostMode">
<db:title>QBluetoothLocalDevice::HostMode QBluetoothLocalDevice::hostMode() const</db:title>
<db:para>Returns the current host mode of this local Bluetooth device. On macOS, it is either <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostPoweredOff</db:link> or <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostConnectable</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#setHostMode">setHostMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hostModeStateChanged">
<db:title>void QBluetoothLocalDevice::hostModeStateChanged(QBluetoothLocalDevice::HostMode <db:emphasis>state</db:emphasis>)</db:title>
<db:para>The <db:code role="parameter">state</db:code> of the host has transitioned to a different <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostMode</db:link>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QBluetoothLocalDevice::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> represents an available local Bluetooth device; otherwise return false.</db:para>
<db:para>If the local Bluetooth adapter represented by an instance of this class is removed from the system (e.g. removal of the underlying Bluetooth dongle) then this instance will become invalid. An already invalid <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> instance remains invalid even if the same Bluetooth adapter is returned to the system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#allDevices">allDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QBluetoothLocalDevice::name() const</db:title>
<db:para>Returns the name assgined by the user to this Bluetooth device.</db:para>
</db:section>
<db:section xml:id="pairingConfirmation">
<db:title>void QBluetoothLocalDevice::pairingConfirmation(bool <db:emphasis>accept</db:emphasis>)</db:title>
<db:para>To be called after getting a <db:link xlink:href="qbluetoothlocaldevice.xml#pairingDisplayConfirmation">pairingDisplayConfirmation</db:link>(). The <db:code role="parameter">accept</db:code> parameter either accepts the pairing or rejects it.</db:para>
<db:para>Accepting a pairing always refers to the last pairing request issued via <db:link xlink:href="qbluetoothlocaldevice.xml#requestPairing">requestPairing</db:link>().</db:para>
</db:section>
<db:section xml:id="pairingDisplayConfirmation">
<db:title>void QBluetoothLocalDevice::pairingDisplayConfirmation(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QString <db:emphasis>pin</db:emphasis>)</db:title>
<db:para>Signal by some platforms to display a pairing confirmation dialog for <db:code role="parameter">address</db:code>. The user is asked to confirm the <db:code role="parameter">pin</db:code> is the same on both devices. The <db:link xlink:href="qbluetoothlocaldevice.xml#pairingConfirmation">pairingConfirmation</db:link>() function must be called to indicate if the user accepts or rejects the displayed pin.</db:para>
<db:para>This signal is only emitted for pairing requests issues by calling <db:link xlink:href="qbluetoothlocaldevice.xml#requestPairing">requestPairing</db:link>(). On macOS, this method never gets called - there is a callback with a PIN (IOBluetooth), but it expects immediate reply yes/no - and there is no time to show any dialog or compare PINs.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#pairingConfirmation">pairingConfirmation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pairingDisplayPinCode">
<db:title>void QBluetoothLocalDevice::pairingDisplayPinCode(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QString <db:emphasis>pin</db:emphasis>)</db:title>
<db:para>Signal by some platforms to display the <db:code role="parameter">pin</db:code> to the user for <db:code role="parameter">address</db:code>. The pin is automatically generated, and does not need to be confirmed.</db:para>
<db:para>This signal is only emitted for pairing requests issues by calling <db:link xlink:href="qbluetoothlocaldevice.xml#requestPairing">requestPairing</db:link>().</db:para>
</db:section>
<db:section xml:id="pairingFinished">
<db:title>void QBluetoothLocalDevice::pairingFinished(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QBluetoothLocalDevice::Pairing <db:emphasis>pairing</db:emphasis>)</db:title>
<db:para>Pairing or unpairing has completed with <db:code role="parameter">address</db:code>. Current pairing status is in <db:code role="parameter">pairing</db:code>. If the pairing request was not successful, this signal will not be emitted. The <db:link xlink:href="qbluetoothlocaldevice.xml#error">error</db:link>() signal is emitted if the pairing request failed. The signal is only ever emitted for pairing requests which have previously requested by calling <db:link xlink:href="qbluetoothlocaldevice.xml#requestPairing">requestPairing</db:link>() of the current object instance.</db:para>
</db:section>
<db:section xml:id="pairingStatus">
<db:title>QBluetoothLocalDevice::Pairing QBluetoothLocalDevice::pairingStatus(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>) const</db:title>
<db:para>Returns the current bluetooth pairing status of <db:code role="parameter">address</db:code>, if it's unpaired, paired, or paired and authorized.</db:para>
</db:section>
<db:section xml:id="powerOn">
<db:title>void QBluetoothLocalDevice::powerOn()</db:title>
<db:para>Powers on the device after returning it to the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>() state, if it was powered off.</db:para>
<db:note>
<db:para>Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off. On macOS it is not possible to power on/off Bluetooth. Please refer to the platform specific Bluetooth documentation for details.</db:para>
</db:note>
</db:section>
<db:section xml:id="requestPairing">
<db:title>void QBluetoothLocalDevice::requestPairing(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QBluetoothLocalDevice::Pairing <db:emphasis>pairing</db:emphasis>)</db:title>
<db:para>Set the <db:code role="parameter">pairing</db:code> status with <db:code role="parameter">address</db:code>. The results are returned by the signal, <db:link xlink:href="qbluetoothlocaldevice.xml#pairingFinished">pairingFinished</db:link>(). On Android and macOS, <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">AuthorizedPaired</db:link> is not possible and will have the same behavior as Paired.</db:para>
<db:para>On macOS, it is not possible to unpair a device. If Unpaired is requested, <db:link xlink:href="qbluetoothlocaldevice.xml#pairingFinished">pairingFinished</db:link>() is immediately emitted although the device remains paired. It is possible to request the pairing for a previously unpaired device. In addition <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">AuthorizedPaired</db:link> has the same behavior as <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">Paired</db:link>.</db:para>
<db:para>Caution: creating a pairing may take minutes, and may require the user to acknowledge.</db:para>
</db:section>
<db:section xml:id="setHostMode">
<db:title>void QBluetoothLocalDevice::setHostMode(QBluetoothLocalDevice::HostMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Sets the host mode of this local Bluetooth device to <db:code role="parameter">mode</db:code>.</db:para>
<db:note>
<db:para>Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off and not all host modes may be supported. On macOS, it is not possbile to programmatically change the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>(). A user can only switch Bluetooth on/off in the System Preferences. Please refer to the platform specific Bluetooth documentation for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
