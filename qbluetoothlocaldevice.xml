<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBluetoothLocalDevice Class</db:title>
<db:productname>QtBluetooth</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Bluetooth Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> class enables access to the local Bluetooth device.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBluetoothLocalDevice</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += bluetooth</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> provides functions for getting and setting the state of local Bluetooth devices.</db:para>
<db:para>On iOS, this class cannot be used because the platform does not expose any data or API which may provide information on the local Bluetooth device.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QBluetoothLocalDevice::Error</db:title>
<db:enumsynopsis>
<db:enumname>Error</db:enumname>
<db:enumitem>
<db:enumidentifier>NoError</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>PairingError</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>MissingPermissionsError</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>UnknownError</db:enumidentifier>
<db:enumvalue>100</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes errors that maybe returned</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No known error</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::PairingError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Error in pairing</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::MissingPermissionsError (since Qt 6.4)</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The operating system requests permissions which were not granted by the user.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>100</db:code></db:td>
<db:td>
<db:para>Unknown error</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="HostMode-enum">
<db:title>enum QBluetoothLocalDevice::HostMode</db:title>
<db:enumsynopsis>
<db:enumname>HostMode</db:enumname>
<db:enumitem>
<db:enumidentifier>HostPoweredOff</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HostConnectable</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HostDiscoverable</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>HostDiscoverableLimitedInquiry</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the most of the local Bluetooth device.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostPoweredOff</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Power off the device</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostConnectable</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can connect to the local Bluetooth device if they have previously been paired with it or otherwise know its address. This powers up the device if it was powered off.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostDiscoverable</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can discover the presence of the local Bluetooth device. The device will also be connectable, and powered on. On Android, this mode can only be active for a maximum of 5 minutes.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::HostDiscoverableLimitedInquiry</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Remote Bluetooth devices can discover the presence of the local Bluetooth device when performing a limited inquiry. This should be used for locating services that are only made discoverable for a limited period of time. This can speed up discovery between gaming devices, as service discovery can be skipped on devices not in LimitedInquiry mode. In this mode, the device will be connectable and powered on, if required. This mode is is not supported on Android.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>On macOS, it is not possible to set the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>() to HostConnectable or HostPoweredOff.</db:para>
</db:note>
<db:note>
<db:para>On Windows, it is not possible to set the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>() to HostDiscoverable or HostDiscoverableLimitedInquiry. Using these modes is equivalent to HostConnectable.</db:para>
</db:note>
<db:note>
<db:para>Starting from Android 13 (API level 33) the HostPoweredOff state relies on non-public Android API as the public one has been deprecated, see (<db:link xlink:href="https://developer.android.com/reference/android/bluetooth/BluetoothAdapter#disable()">disable()</db:link>). This may change in a future version of Android.</db:para>
</db:note>
<db:note>
<db:para>At least on Android 12 the device's Bluetooth visibility setting may dictate the result of setting either HostDiscoverable or HostConnectable. For example if the visibility is set <db:emphasis>off</db:emphasis>, it may not be possible to enter the HostDiscoverable mode, but HostConnectable will be used instead. This may change in future version of Android.</db:para>
</db:note>
</db:section>
<db:section xml:id="Pairing-enum">
<db:title>enum QBluetoothLocalDevice::Pairing</db:title>
<db:enumsynopsis>
<db:enumname>Pairing</db:enumname>
<db:enumitem>
<db:enumidentifier>Unpaired</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Paired</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>AuthorizedPaired</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the pairing state between the two Bluetooth devices.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::Unpaired</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are not paired.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::Paired</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are paired. The system will prompt the user for authorization when the remote device initiates a connection to the local device.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link></db:emphasis>::AuthorizedPaired</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The Bluetooth devices are paired. The system will not prompt the user for authorization when the remote device initiates a connection to the local device.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBluetoothLocalDevice">
<db:title>[explicit] QBluetoothLocalDevice::QBluetoothLocalDevice(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBluetoothLocalDevice</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothLocalDevice(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> with <db:code role="parameter">parent</db:code>.</db:para>
<db:note>
<db:para>Starting from Android 12 (API level 31), the construction of this class requires <db:link xlink:href="https://developer.android.com/guide/topics/connectivity/bluetooth/permissions">bluetooth runtime permissions</db:link> (<db:emphasis>BLUETOOTH_SCAN</db:emphasis> and <db:emphasis>BLUETOOTH_CONNECT</db:emphasis>). If the permissions are not granted, the device will not be valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QBluetoothLocalDevice-1">
<db:title>[explicit] QBluetoothLocalDevice::QBluetoothLocalDevice(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:constructorsynopsis>
<db:methodname>QBluetoothLocalDevice</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothLocalDevice(const QBluetoothAddress &amp;address, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Construct new <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> for <db:code role="parameter">address</db:code>. If <db:code role="parameter">address</db:code> is default constructed the resulting local device selects the local default device.</db:para>
<db:note>
<db:para>Starting from Android 12 (API level 31), the construction of this class requires <db:link xlink:href="https://developer.android.com/guide/topics/connectivity/bluetooth/permissions">bluetooth runtime permissions</db:link> (<db:emphasis>BLUETOOTH_SCAN</db:emphasis> and <db:emphasis>BLUETOOTH_CONNECT</db:emphasis>). If the permissions are not granted, the device will not be valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBluetoothLocalDevice">
<db:title>[virtual] QBluetoothLocalDevice::~QBluetoothLocalDevice()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBluetoothLocalDevice</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBluetoothLocalDevice()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link>.</db:para>
</db:section>
<db:section xml:id="address">
<db:title>QBluetoothAddress QBluetoothLocalDevice::address() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothAddress</db:type>
<db:methodname>address</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothAddress address() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the MAC address of this Bluetooth device.</db:para>
<db:note>
<db:para>On Android, this function always returns the constant value <db:code>02:00:00:00:00:00</db:code> as local address starting with Android 6.0. The programmatic access to the device's local MAC address was removed.</db:para>
</db:note>
</db:section>
<db:section xml:id="allDevices">
<db:title>[static] QList&lt;QBluetoothHostInfo&gt; QBluetoothLocalDevice::allDevices()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;QBluetoothHostInfo&gt;</db:type>
<db:methodname>allDevices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBluetoothHostInfo&gt; allDevices()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of all available local Bluetooth devices. On macOS, there is only the &quot;default&quot; local device.</db:para>
</db:section>
<db:section xml:id="connectedDevices">
<db:title>[since 5.3] QList&lt;QBluetoothAddress&gt; QBluetoothLocalDevice::connectedDevices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QBluetoothAddress&gt;</db:type>
<db:methodname>connectedDevices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QBluetoothAddress&gt; connectedDevices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of connected devices. This list is different from the list of currently paired devices.</db:para>
<db:para>On Android and macOS, it is not possible to retrieve a list of connected devices. It is only possible to listen to (dis)connect changes. For convenience, this class monitors all connect and disconnect events since its instanciation and returns the current list when calling this function. Therefore it is possible that this function returns an empty list shortly after creating an instance.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceConnected">deviceConnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceDisconnected">deviceDisconnected</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceConnected">
<db:title>[since 5.3] void QBluetoothLocalDevice::deviceConnected(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deviceConnected</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deviceConnected(const QBluetoothAddress &amp;address)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the local device establishes a connection to a remote device with <db:code role="parameter">address</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceDisconnected">deviceDisconnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#connectedDevices">connectedDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="deviceDisconnected">
<db:title>[since 5.3] void QBluetoothLocalDevice::deviceDisconnected(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>deviceDisconnected</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void deviceDisconnected(const QBluetoothAddress &amp;address)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the local device disconnects from a remote Bluetooth device with <db:code role="parameter">address</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#deviceConnected">deviceConnected</db:link>()</db:member>
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#connectedDevices">connectedDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorOccurred">
<db:title>[since 6.2] void QBluetoothLocalDevice::errorOccurred(QBluetoothLocalDevice::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>errorOccurred</db:methodname>
<db:methodparam>
<db:type>QBluetoothLocalDevice::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void errorOccurred(QBluetoothLocalDevice::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signal emitted if there's an exceptional <db:code role="parameter">error</db:code> while pairing.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="hostMode">
<db:title>QBluetoothLocalDevice::HostMode QBluetoothLocalDevice::hostMode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothLocalDevice::HostMode</db:type>
<db:methodname>hostMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothLocalDevice::HostMode hostMode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current host mode of this local Bluetooth device. On macOS, it is either <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostPoweredOff</db:link> or <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostConnectable</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#setHostMode">setHostMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hostModeStateChanged">
<db:title>void QBluetoothLocalDevice::hostModeStateChanged(QBluetoothLocalDevice::HostMode <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>hostModeStateChanged</db:methodname>
<db:methodparam>
<db:type>QBluetoothLocalDevice::HostMode</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void hostModeStateChanged(QBluetoothLocalDevice::HostMode state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>The <db:code role="parameter">state</db:code> of the host has transitioned to a different <db:link xlink:href="qbluetoothlocaldevice.xml#HostMode-enum">HostMode</db:link>.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QBluetoothLocalDevice::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> represents an available local Bluetooth device; otherwise return false.</db:para>
<db:para>If the local Bluetooth adapter represented by an instance of this class is removed from the system (e.g. removal of the underlying Bluetooth dongle) then this instance will become invalid. An already invalid <db:link xlink:href="qbluetoothlocaldevice.xml">QBluetoothLocalDevice</db:link> instance remains invalid even if the same Bluetooth adapter is returned to the system.</db:para>
<db:note>
<db:para>Starting from Android 12 (API level 31), the construction of this class requires <db:link xlink:href="https://developer.android.com/guide/topics/connectivity/bluetooth/permissions">bluetooth runtime permissions</db:link> (<db:emphasis>BLUETOOTH_SCAN</db:emphasis> and <db:emphasis>BLUETOOTH_CONNECT</db:emphasis>). If the permissions are not granted, the device will not be valid.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#allDevices">allDevices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QBluetoothLocalDevice::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name assgined by the user to this Bluetooth device.</db:para>
</db:section>
<db:section xml:id="pairingFinished">
<db:title>void QBluetoothLocalDevice::pairingFinished(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QBluetoothLocalDevice::Pairing <db:emphasis>pairing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>pairingFinished</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBluetoothLocalDevice::Pairing</db:type>
<db:parameter>pairing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void pairingFinished(const QBluetoothAddress &amp;address, QBluetoothLocalDevice::Pairing pairing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Pairing or unpairing has completed with <db:code role="parameter">address</db:code>. Current pairing status is in <db:code role="parameter">pairing</db:code>. If the pairing request was not successful, this signal will not be emitted. The <db:link xlink:href="qbluetoothlocaldevice.xml#errorOccurred">errorOccurred</db:link>() signal is emitted if the pairing request failed. The signal is only ever emitted for pairing requests which have previously requested by calling <db:link xlink:href="qbluetoothlocaldevice.xml#requestPairing">requestPairing</db:link>() of the current object instance.</db:para>
</db:section>
<db:section xml:id="pairingStatus">
<db:title>QBluetoothLocalDevice::Pairing QBluetoothLocalDevice::pairingStatus(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBluetoothLocalDevice::Pairing</db:type>
<db:methodname>pairingStatus</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBluetoothLocalDevice::Pairing pairingStatus(const QBluetoothAddress &amp;address) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current bluetooth pairing status of <db:code role="parameter">address</db:code>, if it's unpaired, paired, or paired and authorized.</db:para>
</db:section>
<db:section xml:id="powerOn">
<db:title>void QBluetoothLocalDevice::powerOn()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>powerOn</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void powerOn()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Powers on the device after returning it to the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>() state, if it was powered off.</db:para>
<db:note>
<db:para>Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off. On macOS it is not possible to power on/off Bluetooth. Please refer to the platform specific Bluetooth documentation for details.</db:para>
</db:note>
</db:section>
<db:section xml:id="requestPairing">
<db:title>void QBluetoothLocalDevice::requestPairing(const QBluetoothAddress &amp;<db:emphasis>address</db:emphasis>, QBluetoothLocalDevice::Pairing <db:emphasis>pairing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>requestPairing</db:methodname>
<db:methodparam>
<db:type>const QBluetoothAddress &amp;</db:type>
<db:parameter>address</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QBluetoothLocalDevice::Pairing</db:type>
<db:parameter>pairing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void requestPairing(const QBluetoothAddress &amp;address, QBluetoothLocalDevice::Pairing pairing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Set the <db:code role="parameter">pairing</db:code> status with <db:code role="parameter">address</db:code>. The results are returned by the signal, <db:link xlink:href="qbluetoothlocaldevice.xml#pairingFinished">pairingFinished</db:link>().</db:para>
<db:para>On Android and macOS, <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">AuthorizedPaired</db:link> is not possible and will have the same behavior as Paired. On Windows the exact pairing mode decision is up to the operating system.</db:para>
<db:para>On macOS, it is not possible to unpair a device. If Unpaired is requested, <db:link xlink:href="qbluetoothlocaldevice.xml#pairingFinished">pairingFinished</db:link>() is immediately emitted although the device remains paired. It is possible to request the pairing for a previously unpaired device. In addition <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">AuthorizedPaired</db:link> has the same behavior as <db:link xlink:href="qbluetoothlocaldevice.xml#Pairing-enum">Paired</db:link>.</db:para>
<db:para>Caution: creating a pairing may take minutes, and may require the user to acknowledge.</db:para>
</db:section>
<db:section xml:id="setHostMode">
<db:title>void QBluetoothLocalDevice::setHostMode(QBluetoothLocalDevice::HostMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHostMode</db:methodname>
<db:methodparam>
<db:type>QBluetoothLocalDevice::HostMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHostMode(QBluetoothLocalDevice::HostMode mode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the host mode of this local Bluetooth device to <db:code role="parameter">mode</db:code>.</db:para>
<db:para>Some transitions such as turning the device on or off may take some time. Therefore subsequent calls should only be made once the <db:link xlink:href="qbluetoothlocaldevice.xml#hostModeStateChanged">hostModeStateChanged</db:link>() signal has concluded the previous request. If this is ignored the result of such a series of calls is not well defined.</db:para>
<db:note>
<db:para>Due to varying security policies on the supported platforms, this method may have differing behaviors on the various platforms. For example the system may ask the user for confirmation before turning Bluetooth on or off and not all host modes may be supported. On macOS, it is not possbile to programmatically change the <db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>(). A user can only switch Bluetooth on/off in the System Preferences. On Windows this method <db:emphasis>must</db:emphasis> be called from the UI thread because it might require user confirmation. Please refer to the platform specific Bluetooth documentation for details.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qbluetoothlocaldevice.xml#hostMode">hostMode</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
