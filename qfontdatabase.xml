<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QFontDatabase Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link> class provides information about the fonts available in the underlying window system.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFontDatabase</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QFontDatabase is part of <db:simplelist><db:member>appearance</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The most common uses of this class are to query the database for the list of font <db:link xlink:href="qfontdatabase.xml#families">families</db:link>() and for the <db:link xlink:href="qfontdatabase.xml#pointSizes">pointSizes</db:link>() and <db:link xlink:href="qfontdatabase.xml#styles">styles</db:link>() that are available for each family. An alternative to <db:link xlink:href="qfontdatabase.xml#pointSizes">pointSizes</db:link>() is <db:link xlink:href="qfontdatabase.xml#smoothSizes">smoothSizes</db:link>() which returns the sizes at which a given family and style will look attractive.</db:para>
<db:para>If the font family is available from two or more foundries the foundry name is included in the family name; for example: &quot;Helvetica [Adobe]&quot; and &quot;Helvetica [Cronyx]&quot;. When you specify a family, you can either use the old hyphenated &quot;foundry-family&quot; format or the bracketed &quot;family [foundry]&quot; format; for example: &quot;Cronyx-Helvetica&quot; or &quot;Helvetica [Cronyx]&quot;. If the family has a foundry it is always returned using the bracketed format, as is the case with the value returned by <db:link xlink:href="qfontdatabase.xml#families">families</db:link>().</db:para>
<db:para>The <db:link xlink:href="qfontdatabase.xml#font">font</db:link>() function returns a <db:link xlink:href="qfont.xml">QFont</db:link> given a family, style and point size.</db:para>
<db:para>A family and style combination can be checked to see if it is <db:link xlink:href="qfontdatabase.xml#italic">italic</db:link>() or <db:link xlink:href="qfontdatabase.xml#bold">bold</db:link>(), and to retrieve its <db:link xlink:href="qfontdatabase.xml#weight">weight</db:link>(). Similarly we can call <db:link xlink:href="qfontdatabase.xml#isBitmapScalable">isBitmapScalable</db:link>(), <db:link xlink:href="qfontdatabase.xml#isSmoothlyScalable">isSmoothlyScalable</db:link>(), <db:link xlink:href="qfontdatabase.xml#isScalable">isScalable</db:link>() and <db:link xlink:href="qfontdatabase.xml#isFixedPitch">isFixedPitch</db:link>().</db:para>
<db:para>Use the <db:link xlink:href="qfontdatabase.xml#styleString">styleString</db:link>() to obtain a text version of a style.</db:para>
<db:para>The <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link> class also supports some static functions, for example, <db:link xlink:href="qfontdatabase.xml#standardSizes">standardSizes</db:link>(). You can retrieve the description of a writing system using <db:link xlink:href="qfontdatabase.xml#writingSystemName">writingSystemName</db:link>(), and a sample of characters in a writing system with <db:link xlink:href="qfontdatabase.xml#writingSystemSample">writingSystemSample</db:link>().</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    QFontDatabase database;
    QTreeWidget fontTree;
    fontTree.setColumnCount(2);
    fontTree.setHeaderLabels(QStringList() &amp;lt;&amp;lt; &quot;Font&quot; &amp;lt;&amp;lt; &quot;Smooth Sizes&quot;);

    const QStringList fontFamilies = database.families();
    for (const QString &amp;amp;family : fontFamilies) {
        QTreeWidgetItem *familyItem = new QTreeWidgetItem(&amp;amp;fontTree);
        familyItem-&amp;gt;setText(0, family);

        const QStringList fontStyles = database.styles(family);
        for (const QString &amp;amp;style : fontStyles) {
            QTreeWidgetItem *styleItem = new QTreeWidgetItem(familyItem);
            styleItem-&amp;gt;setText(0, style);

            QString sizes;
            const QList&amp;lt;int&amp;gt; smoothSizes = database.smoothSizes(family, style)
            for (int points : smoothSizes)
                sizes += QString::number(points) + ' ';

            styleItem-&amp;gt;setText(1, sizes.trimmed());
        }
    }
</db:programlisting>
<db:para>This example gets the list of font families, the list of styles for each family, and the point sizes that are available for each combination of family and style, displaying this information in a tree view.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfont.xml">QFont</db:link></db:member>
<db:member><db:link xlink:href="qfontinfo.xml">QFontInfo</db:link></db:member>
<db:member><db:link xlink:href="qfontmetrics.xml">QFontMetrics</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-widgets-charactermap-example.xml">Character Map Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="SystemFont-enum">
<db:title>[since 5.2] enum QFontDatabase::SystemFont</db:title>
<db:enumsynopsis>
<db:enumname>SystemFont</db:enumname>
<db:enumitem>
<db:enumidentifier>GeneralFont</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>FixedFont</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TitleFont</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SmallestReadableFont</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::GeneralFont</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default system font.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::FixedFont</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The fixed font that the system recommends.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::TitleFont</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The system standard font for titles.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::SmallestReadableFont</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The smallest readable system font.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced or modified in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="WritingSystem-enum">
<db:title>enum QFontDatabase::WritingSystem</db:title>
<db:enumsynopsis>
<db:enumname>WritingSystem</db:enumname>
<db:enumitem>
<db:enumidentifier>Any</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Latin</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Greek</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Cyrillic</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Armenian</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Hebrew</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Arabic</db:enumidentifier>
<db:enumvalue>6</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Syriac</db:enumidentifier>
<db:enumvalue>7</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Thaana</db:enumidentifier>
<db:enumvalue>8</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Devanagari</db:enumidentifier>
<db:enumvalue>9</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Bengali</db:enumidentifier>
<db:enumvalue>10</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Gurmukhi</db:enumidentifier>
<db:enumvalue>11</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Gujarati</db:enumidentifier>
<db:enumvalue>12</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Oriya</db:enumidentifier>
<db:enumvalue>13</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Tamil</db:enumidentifier>
<db:enumvalue>14</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Telugu</db:enumidentifier>
<db:enumvalue>15</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Kannada</db:enumidentifier>
<db:enumvalue>16</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Malayalam</db:enumidentifier>
<db:enumvalue>17</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Sinhala</db:enumidentifier>
<db:enumvalue>18</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Thai</db:enumidentifier>
<db:enumvalue>19</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Lao</db:enumidentifier>
<db:enumvalue>20</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Tibetan</db:enumidentifier>
<db:enumvalue>21</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Myanmar</db:enumidentifier>
<db:enumvalue>22</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Georgian</db:enumidentifier>
<db:enumvalue>23</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Khmer</db:enumidentifier>
<db:enumvalue>24</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>SimplifiedChinese</db:enumidentifier>
<db:enumvalue>25</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TraditionalChinese</db:enumidentifier>
<db:enumvalue>26</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Japanese</db:enumidentifier>
<db:enumvalue>27</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Korean</db:enumidentifier>
<db:enumvalue>28</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Vietnamese</db:enumidentifier>
<db:enumvalue>29</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Symbol</db:enumidentifier>
<db:enumvalue>30</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Other</db:enumidentifier>
<db:enumvalue>Symbol</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Ogham</db:enumidentifier>
<db:enumvalue>31</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Runic</db:enumidentifier>
<db:enumvalue>32</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Nko</db:enumidentifier>
<db:enumvalue>33</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WritingSystemsCount</db:enumidentifier>
<db:enumvalue>34</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Any</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Latin</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Greek</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Cyrillic</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Armenian</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Hebrew</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Arabic</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Syriac</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Thaana</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Devanagari</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Bengali</db:code></db:para>
</db:td>
<db:td><db:code>10</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Gurmukhi</db:code></db:para>
</db:td>
<db:td><db:code>11</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Gujarati</db:code></db:para>
</db:td>
<db:td><db:code>12</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Oriya</db:code></db:para>
</db:td>
<db:td><db:code>13</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Tamil</db:code></db:para>
</db:td>
<db:td><db:code>14</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Telugu</db:code></db:para>
</db:td>
<db:td><db:code>15</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Kannada</db:code></db:para>
</db:td>
<db:td><db:code>16</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Malayalam</db:code></db:para>
</db:td>
<db:td><db:code>17</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Sinhala</db:code></db:para>
</db:td>
<db:td><db:code>18</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Thai</db:code></db:para>
</db:td>
<db:td><db:code>19</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Lao</db:code></db:para>
</db:td>
<db:td><db:code>20</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Tibetan</db:code></db:para>
</db:td>
<db:td><db:code>21</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Myanmar</db:code></db:para>
</db:td>
<db:td><db:code>22</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Georgian</db:code></db:para>
</db:td>
<db:td><db:code>23</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Khmer</db:code></db:para>
</db:td>
<db:td><db:code>24</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::SimplifiedChinese</db:code></db:para>
</db:td>
<db:td><db:code>25</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::TraditionalChinese</db:code></db:para>
</db:td>
<db:td><db:code>26</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Japanese</db:code></db:para>
</db:td>
<db:td><db:code>27</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Korean</db:code></db:para>
</db:td>
<db:td><db:code>28</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Vietnamese</db:code></db:para>
</db:td>
<db:td><db:code>29</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Symbol</db:code></db:para>
</db:td>
<db:td><db:code>30</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Other</db:code></db:para>
</db:td>
<db:td><db:code>Symbol</db:code></db:td>
<db:td>
<db:para>(the same as Symbol)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Ogham</db:code></db:para>
</db:td>
<db:td><db:code>31</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Runic</db:code></db:para>
</db:td>
<db:td><db:code>32</db:code></db:td>
<db:td/>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link></db:emphasis>::Nko</db:code></db:para>
</db:td>
<db:td><db:code>33</db:code></db:td>
<db:td/>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QFontDatabase">
<db:title>QFontDatabase::QFontDatabase()</db:title>
<db:constructorsynopsis>
<db:methodname>QFontDatabase</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QFontDatabase()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a font database object.</db:para>
</db:section>
<db:section xml:id="addApplicationFont">
<db:title>[static, since 4.2] int QFontDatabase::addApplicationFont(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>addApplicationFont</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addApplicationFont(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the font from the file specified by <db:code role="parameter">fileName</db:code> and makes it available to the application. An ID is returned that can be used to remove the font again with <db:link xlink:href="qfontdatabase.xml#removeApplicationFont">removeApplicationFont</db:link>() or to retrieve the list of family names contained in the font.</db:para>
<db:para>The function returns -1 if the font could not be loaded.</db:para>
<db:para>Currently only TrueType fonts, TrueType font collections, and OpenType fonts are supported.</db:para>
<db:note>
<db:para>Adding application fonts on Unix/X11 platforms without fontconfig is currently not supported.</db:para>
</db:note>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">addApplicationFontFromData</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#applicationFontFamilies">applicationFontFamilies</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#removeApplicationFont">removeApplicationFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addApplicationFontFromData">
<db:title>[static, since 4.2] int QFontDatabase::addApplicationFontFromData(const QByteArray &amp;<db:emphasis>fontData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>int</db:type>
<db:methodname>addApplicationFontFromData</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>fontData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int addApplicationFontFromData(const QByteArray &amp;fontData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Loads the font from binary data specified by <db:code role="parameter">fontData</db:code> and makes it available to the application. An ID is returned that can be used to remove the font again with <db:link xlink:href="qfontdatabase.xml#removeApplicationFont">removeApplicationFont</db:link>() or to retrieve the list of family names contained in the font.</db:para>
<db:para>The function returns -1 if the font could not be loaded.</db:para>
<db:para>Currently only TrueType fonts and TrueType font collections are supported.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> Adding application fonts on Unix/X11 platforms without fontconfig is currently not supported.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFont">addApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#applicationFontFamilies">applicationFontFamilies</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#removeApplicationFont">removeApplicationFont</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="applicationFontFamilies">
<db:title>[static, since 4.2] QStringList QFontDatabase::applicationFontFamilies(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>applicationFontFamilies</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList applicationFontFamilies(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of font families for the given application font identified by <db:code role="parameter">id</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFont">addApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">addApplicationFontFromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bold">
<db:title>bool QFontDatabase::bold(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>bold</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool bold(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is bold; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#italic">italic</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#weight">weight</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="families">
<db:title>QStringList QFontDatabase::families(QFontDatabase::WritingSystem <db:emphasis>writingSystem</db:emphasis> = Any) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>families</db:methodname>
<db:methodparam>
<db:type>QFontDatabase::WritingSystem</db:type>
<db:parameter>writingSystem</db:parameter>
<db:initializer>Any</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList families(QFontDatabase::WritingSystem writingSystem) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a sorted list of the available font families which support the <db:code role="parameter">writingSystem</db:code>.</db:para>
<db:para>If a family exists in several foundries, the returned name for that font is in the form &quot;family [foundry]&quot;. Examples: &quot;Times [Adobe]&quot;, &quot;Times [Cronyx]&quot;, &quot;Palatino&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#writingSystems">writingSystems</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="font">
<db:title>QFont QFontDatabase::font(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis>, int <db:emphasis>pointSize</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QFont</db:type>
<db:methodname>font</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>pointSize</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont font(const QString &amp;family, const QString &amp;style, int pointSize) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qfont.xml">QFont</db:link> object that has family <db:code role="parameter">family</db:code>, style <db:code role="parameter">style</db:code> and point size <db:code role="parameter">pointSize</db:code>. If no matching font could be created, a <db:link xlink:href="qfont.xml">QFont</db:link> object that uses the application's default font is returned.</db:para>
</db:section>
<db:section xml:id="isBitmapScalable">
<db:title>bool QFontDatabase::isBitmapScalable(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBitmapScalable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBitmapScalable(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is a scalable bitmap font; otherwise returns <db:code>false</db:code>. Scaling a bitmap font usually produces an unattractive hardly readable result, because the pixels of the font are scaled. If you need to scale a bitmap font it is better to scale it to one of the fixed sizes returned by <db:link xlink:href="qfontdatabase.xml#smoothSizes">smoothSizes</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#isScalable">isScalable</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#isSmoothlyScalable">isSmoothlyScalable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFixedPitch">
<db:title>bool QFontDatabase::isFixedPitch(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isFixedPitch</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isFixedPitch(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is fixed pitch; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="isPrivateFamily">
<db:title>[since 5.5] bool QFontDatabase::isPrivateFamily(const QString &amp;<db:emphasis>family</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPrivateFamily</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPrivateFamily(const QString &amp;family) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if and only if the <db:code role="parameter">family</db:code> font family is private.</db:para>
<db:para>This happens, for instance, on macOS and iOS, where the system UI fonts are not accessible to the user. For completeness, <db:link xlink:href="qfontdatabase.xml#families">QFontDatabase::families</db:link>() returns all font families, including the private ones. You should use this function if you are developing a font selection control in order to keep private fonts hidden.</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#families">families</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isScalable">
<db:title>bool QFontDatabase::isScalable(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isScalable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isScalable(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is scalable; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#isBitmapScalable">isBitmapScalable</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#isSmoothlyScalable">isSmoothlyScalable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isSmoothlyScalable">
<db:title>bool QFontDatabase::isSmoothlyScalable(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis> = QString()) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSmoothlyScalable</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSmoothlyScalable(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is smoothly scalable; otherwise returns <db:code>false</db:code>. If this function returns <db:code>true</db:code>, it's safe to scale this font to any size, and the result will always look attractive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#isScalable">isScalable</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#isBitmapScalable">isBitmapScalable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="italic">
<db:title>bool QFontDatabase::italic(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>italic</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool italic(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code> is italic; otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#weight">weight</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#bold">bold</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pointSizes">
<db:title>QList&lt;int&gt; QFontDatabase::pointSizes(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>styleName</db:emphasis> = QString())</db:title>
<db:methodsynopsis>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>pointSizes</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>styleName</db:parameter>
<db:initializer>QString()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; pointSizes(const QString &amp;family, const QString &amp;styleName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the point sizes available for the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">styleName</db:code>. The list may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#smoothSizes">smoothSizes</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#standardSizes">standardSizes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeAllApplicationFonts">
<db:title>[static, since 4.2] bool QFontDatabase::removeAllApplicationFonts()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeAllApplicationFonts</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeAllApplicationFonts()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all application-local fonts previously added using <db:link xlink:href="qfontdatabase.xml#addApplicationFont">addApplicationFont</db:link>() and <db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">addApplicationFontFromData</db:link>().</db:para>
<db:para>Returns <db:code>true</db:code> if unloading of the fonts succeeded; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#removeApplicationFont">removeApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFont">addApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">addApplicationFontFromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeApplicationFont">
<db:title>[static, since 4.2] bool QFontDatabase::removeApplicationFont(int <db:emphasis>id</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>removeApplicationFont</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>id</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeApplicationFont(int id)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the previously loaded application font identified by <db:code role="parameter">id</db:code>. Returns <db:code>true</db:code> if unloading of the font succeeded; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#removeAllApplicationFonts">removeAllApplicationFonts</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFont">addApplicationFont</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#addApplicationFontFromData">addApplicationFontFromData</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="smoothSizes">
<db:title>QList&lt;int&gt; QFontDatabase::smoothSizes(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>styleName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>smoothSizes</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>styleName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; smoothSizes(const QString &amp;family, const QString &amp;styleName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the point sizes of a font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">styleName</db:code> that will look attractive. The list may be empty. For non-scalable fonts and bitmap scalable fonts, this function is equivalent to <db:link xlink:href="qfontdatabase.xml#pointSizes">pointSizes</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#pointSizes">pointSizes</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#standardSizes">standardSizes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardSizes">
<db:title>[static] QList&lt;int&gt; QFontDatabase::standardSizes()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QList&lt;int&gt;</db:type>
<db:methodname>standardSizes</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;int&gt; standardSizes()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of standard font sizes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#smoothSizes">smoothSizes</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#pointSizes">pointSizes</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="styleString">
<db:title>QString QFontDatabase::styleString(const QFont &amp;<db:emphasis>font</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>styleString</db:methodname>
<db:methodparam>
<db:type>const QFont &amp;</db:type>
<db:parameter>font</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString styleString(const QFont &amp;font)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that describes the style of the <db:code role="parameter">font</db:code>. For example, &quot;Bold Italic&quot;, &quot;Bold&quot;, &quot;Italic&quot; or &quot;Normal&quot;. An empty string may be returned.</db:para>
</db:section>
<db:section xml:id="styleString-1">
<db:title>QString QFontDatabase::styleString(const QFontInfo &amp;<db:emphasis>fontInfo</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>styleString</db:methodname>
<db:methodparam>
<db:type>const QFontInfo &amp;</db:type>
<db:parameter>fontInfo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString styleString(const QFontInfo &amp;fontInfo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string that describes the style of the <db:code role="parameter">fontInfo</db:code>. For example, &quot;Bold Italic&quot;, &quot;Bold&quot;, &quot;Italic&quot; or &quot;Normal&quot;. An empty string may be returned.</db:para>
</db:section>
<db:section xml:id="styles">
<db:title>QStringList QFontDatabase::styles(const QString &amp;<db:emphasis>family</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>styles</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList styles(const QString &amp;family) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of the styles available for the font family <db:code role="parameter">family</db:code>. Some example styles: &quot;Light&quot;, &quot;Light Italic&quot;, &quot;Bold&quot;, &quot;Oblique&quot;, &quot;Demi&quot;. The list may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#families">families</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="systemFont">
<db:title>[static, since 5.2] QFont QFontDatabase::systemFont(QFontDatabase::SystemFont <db:emphasis>type</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QFont</db:type>
<db:methodname>systemFont</db:methodname>
<db:methodparam>
<db:type>QFontDatabase::SystemFont</db:type>
<db:parameter>type</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QFont systemFont(QFontDatabase::SystemFont type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the most adequate font for a given <db:code role="parameter">type</db:code> case for proper integration with the system's look and feel.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qguiapplication.xml#font">QGuiApplication::font</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="weight">
<db:title>int QFontDatabase::weight(const QString &amp;<db:emphasis>family</db:emphasis>, const QString &amp;<db:emphasis>style</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>weight</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>style</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int weight(const QString &amp;family, const QString &amp;style) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the weight of the font that has family <db:code role="parameter">family</db:code> and style <db:code role="parameter">style</db:code>. If there is no such family and style combination, returns -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#italic">italic</db:link>()</db:member>
<db:member><db:link xlink:href="qfontdatabase.xml#bold">bold</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writingSystemName">
<db:title>[static] QString QFontDatabase::writingSystemName(QFontDatabase::WritingSystem <db:emphasis>writingSystem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>writingSystemName</db:methodname>
<db:methodparam>
<db:type>QFontDatabase::WritingSystem</db:type>
<db:parameter>writingSystem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString writingSystemName(QFontDatabase::WritingSystem writingSystem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the names the <db:code role="parameter">writingSystem</db:code> (e.g. for displaying to the user in a dialog).</db:para>
</db:section>
<db:section xml:id="writingSystemSample">
<db:title>[static] QString QFontDatabase::writingSystemSample(QFontDatabase::WritingSystem <db:emphasis>writingSystem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QString</db:type>
<db:methodname>writingSystemSample</db:methodname>
<db:methodparam>
<db:type>QFontDatabase::WritingSystem</db:type>
<db:parameter>writingSystem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString writingSystemSample(QFontDatabase::WritingSystem writingSystem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string with sample characters from <db:code role="parameter">writingSystem</db:code>.</db:para>
</db:section>
<db:section xml:id="writingSystems">
<db:title>QList&lt;QFontDatabase::WritingSystem&gt; QFontDatabase::writingSystems() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QFontDatabase::WritingSystem&gt;</db:type>
<db:methodname>writingSystems</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QFontDatabase::WritingSystem&gt; writingSystems() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a sorted list of the available writing systems. This is list generated from information about all installed fonts on the system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#families">families</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writingSystems-1">
<db:title>QList&lt;QFontDatabase::WritingSystem&gt; QFontDatabase::writingSystems(const QString &amp;<db:emphasis>family</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QFontDatabase::WritingSystem&gt;</db:type>
<db:methodname>writingSystems</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>family</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QFontDatabase::WritingSystem&gt; writingSystems(const QString &amp;family) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a sorted list of the writing systems supported by a given font <db:code role="parameter">family</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfontdatabase.xml#families">families</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QFontDatabase</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qfontdatabase.xml">QFontDatabase</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="supportsThreadedFontRendering">
<db:title>[static, since 4.4] bool QFontDatabase::supportsThreadedFontRendering()</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>bool</db:type>
<db:methodname>supportsThreadedFontRendering</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool supportsThreadedFontRendering()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns <db:code>true</db:code> if font rendering is supported outside the GUI thread, false otherwise. In other words, a return value of false means that all <db:link xlink:href="qpainter.xml#drawText">QPainter::drawText</db:link>() calls outside the GUI thread will not produce readable output.</db:para>
<db:para>As of 5.0, always returns <db:code>true</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="threads-modules.xml#painting-in-threads">Painting In Threads</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
