<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Dock Widgets Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Dock Widgets example shows how to add dock windows to an application. It also shows how to use Qt's rich text engine.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
** Contact: http://www.qt-project.org/legal
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;
#ifndef QT_NO_PRINTDIALOG
#include &lt;QtPrintSupport&gt;
#endif

#include &quot;mainwindow.h&quot;

MainWindow::MainWindow()
{
    textEdit = new QTextEdit;
    setCentralWidget(textEdit);

    createActions();
    createMenus();
    createToolBars();
    createStatusBar();
    createDockWindows();

    setWindowTitle(tr(&quot;Dock Widgets&quot;));

    newLetter();
    setUnifiedTitleAndToolBarOnMac(true);
}

void MainWindow::newLetter()
{
    textEdit-&gt;clear();

    QTextCursor cursor(textEdit-&gt;textCursor());
    cursor.movePosition(QTextCursor::Start);
    QTextFrame *topFrame = cursor.currentFrame();
    QTextFrameFormat topFrameFormat = topFrame-&gt;frameFormat();
    topFrameFormat.setPadding(16);
    topFrame-&gt;setFrameFormat(topFrameFormat);

    QTextCharFormat textFormat;
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);
    QTextCharFormat italicFormat;
    italicFormat.setFontItalic(true);

    QTextTableFormat tableFormat;
    tableFormat.setBorder(1);
    tableFormat.setCellPadding(16);
    tableFormat.setAlignment(Qt::AlignRight);
    cursor.insertTable(1, 1, tableFormat);
    cursor.insertText(&quot;The Firm&quot;, boldFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;321 City Street&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;Industry Park&quot;);
    cursor.insertBlock();
    cursor.insertText(&quot;Some Country&quot;);
    cursor.setPosition(topFrame-&gt;lastPosition());
    cursor.insertText(QDate::currentDate().toString(&quot;d MMMM yyyy&quot;), textFormat);
    cursor.insertBlock();
    cursor.insertBlock();
    cursor.insertText(&quot;Dear &quot;, textFormat);
    cursor.insertText(&quot;NAME&quot;, italicFormat);
    cursor.insertText(&quot;,&quot;, textFormat);
    for (int i = 0; i &lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(tr(&quot;Yours sincerely,&quot;), textFormat);
    for (int i = 0; i &lt; 3; ++i)
        cursor.insertBlock();
    cursor.insertText(&quot;The Boss&quot;, textFormat);
    cursor.insertBlock();
    cursor.insertText(&quot;ADDRESS&quot;, italicFormat);
}

void MainWindow::print()
{
#ifndef QT_NO_PRINTDIALOG
    QTextDocument *document = textEdit-&gt;document();
    QPrinter printer;

    QPrintDialog dlg(&amp;printer, this);
    if (dlg.exec() != QDialog::Accepted) {
        return;
    }

    document-&gt;print(&amp;printer);
    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;), 2000);
#endif
}

void MainWindow::save()
{
    QString fileName = QFileDialog::getSaveFileName(this,
                        tr(&quot;Choose a file name&quot;), &quot;.&quot;,
                        tr(&quot;HTML (*.html *.htm)&quot;));
    if (fileName.isEmpty())
        return;
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, tr(&quot;Dock Widgets&quot;),
                             tr(&quot;Cannot write file %1:\n%2.&quot;)
                             .arg(fileName)
                             .arg(file.errorString()));
        return;
    }

    QTextStream out(&amp;file);
    QApplication::setOverrideCursor(Qt::WaitCursor);
    out &lt;&lt; textEdit-&gt;toHtml();
    QApplication::restoreOverrideCursor();

    statusBar()-&gt;showMessage(tr(&quot;Saved '%1'&quot;).arg(fileName), 2000);
}

void MainWindow::undo()
{
    QTextDocument *document = textEdit-&gt;document();
    document-&gt;undo();
}

void MainWindow::insertCustomer(const QString &amp;customer)
{
    if (customer.isEmpty())
        return;
    QStringList customerList = customer.split(&quot;, &quot;);
    QTextDocument *document = textEdit-&gt;document();
    QTextCursor cursor = document-&gt;find(&quot;NAME&quot;);
    if (!cursor.isNull()) {
        cursor.beginEditBlock();
        cursor.insertText(customerList.at(0));
        QTextCursor oldcursor = cursor;
        cursor = document-&gt;find(&quot;ADDRESS&quot;);
        if (!cursor.isNull()) {
            for (int i = 1; i &lt; customerList.size(); ++i) {
                cursor.insertBlock();
                cursor.insertText(customerList.at(i));
            }
            cursor.endEditBlock();
        }
        else
            oldcursor.endEditBlock();
    }
}

void MainWindow::addParagraph(const QString &amp;paragraph)
{
    if (paragraph.isEmpty())
        return;
    QTextDocument *document = textEdit-&gt;document();
    QTextCursor cursor = document-&gt;find(tr(&quot;Yours sincerely,&quot;));
    if (cursor.isNull())
        return;
    cursor.beginEditBlock();
    cursor.movePosition(QTextCursor::PreviousBlock, QTextCursor::MoveAnchor, 2);
    cursor.insertBlock();
    cursor.insertText(paragraph);
    cursor.insertBlock();
    cursor.endEditBlock();

}

void MainWindow::about()
{
   QMessageBox::about(this, tr(&quot;About Dock Widgets&quot;),
            tr(&quot;The &lt;b&gt;Dock Widgets&lt;/b&gt; example demonstrates how to &quot;
               &quot;use Qt's dock widgets. You can enter your own text, &quot;
               &quot;click a customer to add a customer name and &quot;
               &quot;address, and click standard paragraphs to add them.&quot;));
}

void MainWindow::createActions()
{
    newLetterAct = new QAction(QIcon(&quot;:/images/new.png&quot;), tr(&quot;&amp;New Letter&quot;),
                               this);
    newLetterAct-&gt;setShortcuts(QKeySequence::New);
    newLetterAct-&gt;setStatusTip(tr(&quot;Create a new form letter&quot;));
    connect(newLetterAct, SIGNAL(triggered()), this, SLOT(newLetter()));

    saveAct = new QAction(QIcon(&quot;:/images/save.png&quot;), tr(&quot;&amp;Save...&quot;), this);
    saveAct-&gt;setShortcuts(QKeySequence::Save);
    saveAct-&gt;setStatusTip(tr(&quot;Save the current form letter&quot;));
    connect(saveAct, SIGNAL(triggered()), this, SLOT(save()));

    printAct = new QAction(QIcon(&quot;:/images/print.png&quot;), tr(&quot;&amp;Print...&quot;), this);
    printAct-&gt;setShortcuts(QKeySequence::Print);
    printAct-&gt;setStatusTip(tr(&quot;Print the current form letter&quot;));
    connect(printAct, SIGNAL(triggered()), this, SLOT(print()));

    undoAct = new QAction(QIcon(&quot;:/images/undo.png&quot;), tr(&quot;&amp;Undo&quot;), this);
    undoAct-&gt;setShortcuts(QKeySequence::Undo);
    undoAct-&gt;setStatusTip(tr(&quot;Undo the last editing action&quot;));
    connect(undoAct, SIGNAL(triggered()), this, SLOT(undo()));

    quitAct = new QAction(tr(&quot;&amp;Quit&quot;), this);
    quitAct-&gt;setShortcuts(QKeySequence::Quit);
    quitAct-&gt;setStatusTip(tr(&quot;Quit the application&quot;));
    connect(quitAct, SIGNAL(triggered()), this, SLOT(close()));

    aboutAct = new QAction(tr(&quot;&amp;About&quot;), this);
    aboutAct-&gt;setStatusTip(tr(&quot;Show the application's About box&quot;));
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));

    aboutQtAct = new QAction(tr(&quot;About &amp;Qt&quot;), this);
    aboutQtAct-&gt;setStatusTip(tr(&quot;Show the Qt library's About box&quot;));
    connect(aboutQtAct, SIGNAL(triggered()), qApp, SLOT(aboutQt()));
}

void MainWindow::createMenus()
{
    fileMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;File&quot;));
    fileMenu-&gt;addAction(newLetterAct);
    fileMenu-&gt;addAction(saveAct);
    fileMenu-&gt;addAction(printAct);
    fileMenu-&gt;addSeparator();
    fileMenu-&gt;addAction(quitAct);

    editMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Edit&quot;));
    editMenu-&gt;addAction(undoAct);

    viewMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;View&quot;));

    menuBar()-&gt;addSeparator();

    helpMenu = menuBar()-&gt;addMenu(tr(&quot;&amp;Help&quot;));
    helpMenu-&gt;addAction(aboutAct);
    helpMenu-&gt;addAction(aboutQtAct);
}

void MainWindow::createToolBars()
{
    fileToolBar = addToolBar(tr(&quot;File&quot;));
    fileToolBar-&gt;addAction(newLetterAct);
    fileToolBar-&gt;addAction(saveAct);
    fileToolBar-&gt;addAction(printAct);

    editToolBar = addToolBar(tr(&quot;Edit&quot;));
    editToolBar-&gt;addAction(undoAct);
}

void MainWindow::createStatusBar()
{
    statusBar()-&gt;showMessage(tr(&quot;Ready&quot;));
}

void MainWindow::createDockWindows()
{
    QDockWidget *dock = new QDockWidget(tr(&quot;Customers&quot;), this);
    dock-&gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);
    customerList = new QListWidget(dock);
    customerList-&gt;addItems(QStringList()
            &lt;&lt; &quot;John Doe, Harmony Enterprises, 12 Lakeside, Ambleton&quot;
            &lt;&lt; &quot;Jane Doe, Memorabilia, 23 Watersedge, Beaton&quot;
            &lt;&lt; &quot;Tammy Shea, Tiblanka, 38 Sea Views, Carlton&quot;
            &lt;&lt; &quot;Tim Sheen, Caraba Gifts, 48 Ocean Way, Deal&quot;
            &lt;&lt; &quot;Sol Harvey, Chicos Coffee, 53 New Springs, Eccleston&quot;
            &lt;&lt; &quot;Sally Hobart, Tiroli Tea, 67 Long River, Fedula&quot;);
    dock-&gt;setWidget(customerList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&gt;addAction(dock-&gt;toggleViewAction());

    dock = new QDockWidget(tr(&quot;Paragraphs&quot;), this);
    paragraphsList = new QListWidget(dock);
    paragraphsList-&gt;addItems(QStringList()
            &lt;&lt; &quot;Thank you for your payment which we have received today.&quot;
            &lt;&lt; &quot;Your order has been dispatched and should be with you &quot;
               &quot;within 28 days.&quot;
            &lt;&lt; &quot;We have dispatched those items that were in stock. The &quot;
               &quot;rest of your order will be dispatched once all the &quot;
               &quot;remaining items have arrived at our warehouse. No &quot;
               &quot;additional shipping charges will be made.&quot;
            &lt;&lt; &quot;You made a small overpayment (less than $5) which we &quot;
               &quot;will keep on account for you, or return at your request.&quot;
            &lt;&lt; &quot;You made a small underpayment (less than $1), but we have &quot;
               &quot;sent your order anyway. We'll add this underpayment to &quot;
               &quot;your next bill.&quot;
            &lt;&lt; &quot;Unfortunately you did not send enough money. Please remit &quot;
               &quot;an additional $. Your order will be dispatched as soon as &quot;
               &quot;the complete amount has been received.&quot;
            &lt;&lt; &quot;You made an overpayment (more than $5). Do you wish to &quot;
               &quot;buy more items, or should we return the excess to you?&quot;);
    dock-&gt;setWidget(paragraphsList);
    addDockWidget(Qt::RightDockWidgetArea, dock);
    viewMenu-&gt;addAction(dock-&gt;toggleViewAction());

    connect(customerList, SIGNAL(currentTextChanged(QString)),
            this, SLOT(insertCustomer(QString)));
    connect(paragraphsList, SIGNAL(currentTextChanged(QString)),
            this, SLOT(addParagraph(QString)));
}

</db:programlisting>
</db:article>
