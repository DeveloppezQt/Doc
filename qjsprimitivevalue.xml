<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJSPrimitiveValue Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> class operates on primitive types in JavaScript semantics.</db:para>
<db:para>This class was introduced in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJSPrimitiveValue</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Qml)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Qml)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJSPrimitiveValue is part of <db:simplelist><db:member>qtjavascript</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> supports most of the primitive types defined in the <db:link xlink:href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ECMA-262</db:link> standard, in particular Undefined, Boolean, Number, and String. Additionally, you can store a JavaScript null in a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> and as a special case of Number, you can store an integer value.</db:para>
<db:para>All those values are stored immediately, without interacting with the JavaScript heap. Therefore, you can pass QJSPrimitiveValues between different JavaScript engines. In contrast to <db:link xlink:href="qjsmanagedvalue.xml">QJSManagedValue</db:link>, there is also no danger in destroying a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> from a different thread than it was created in. On the flip side, <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> does not hold a reference to any JavaScript engine.</db:para>
<db:para><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> implements the JavaScript arithmetic and comparison operators on the supported types in JavaScript semantics. Types are coerced like the JavaScript engine would coerce them if the operators were written in a JavaScript expression.</db:para>
<db:para>The JavaScript Symbol type is not supported as it is of very limited utility regarding arithmetic and comparison operators, the main purpose of <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link>. In particular, it causes an exception whenever you try to coerce it to a number or a string, and we cannot throw exceptions without a JavaScript Engine.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QJSPrimitiveValue::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>Undefined</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Boolean</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Integer</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Double</db:enumidentifier>
<db:enumvalue>4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>String</db:enumidentifier>
<db:enumvalue>5</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum speicifies the types a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> might contain.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::Undefined</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The JavaScript Undefined value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The JavaScript null value. This is in fact not a separate JavaScript type but a special value of the Object type. As it is very common and storable without JavaScript engine, it is still supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::Boolean</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A JavaScript Boolean value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::Integer</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>An integer. This is a special case of the JavaScript Number type. JavaScript does not have an actual integer type, but the <db:link xlink:href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/">ECMA-262</db:link> standard contains rules on how to transform a Number in order to prepare it for certain operators that only make sense on integers, in particular the bit shift operators. <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link>'s Integer type represents the result of such a transformation.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::Double</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A JavaScript Number value.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link></db:emphasis>::String</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>A JavaScript String value.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJSPrimitiveValue">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue()</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of type Undefined.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-1">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue(QJSPrimitiveUndefined <db:emphasis>undefined</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>QJSPrimitiveUndefined</db:type>
<db:parameter>undefined</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(QJSPrimitiveUndefined undefined)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">undefined</db:code> and type Undefined.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-2">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue(QJSPrimitiveNull <db:emphasis>null</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>QJSPrimitiveNull</db:type>
<db:parameter>null</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(QJSPrimitiveNull null)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">null</db:code> and type Null.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-3">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue(bool <db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(bool value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">value</db:code> and type Boolean.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-4">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue(int <db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(int value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">value</db:code> and type Integer.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-5">
<db:title>[constexpr] QJSPrimitiveValue::QJSPrimitiveValue(double <db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(double value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">value</db:code> and type Double.</db:para>
</db:section>
<db:section xml:id="QJSPrimitiveValue-6">
<db:title>QJSPrimitiveValue::QJSPrimitiveValue(QString <db:emphasis>value</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJSPrimitiveValue</db:methodname>
<db:methodparam>
<db:type>QString</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue(QString value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> of value <db:code role="parameter">value</db:code> and type String.</db:para>
</db:section>
<db:section xml:id="equals">
<db:title>[constexpr] bool QJSPrimitiveValue::equals(const QJSPrimitiveValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>equals</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool equals(const QJSPrimitiveValue &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '==' operation on this <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> and <db:code role="parameter">other</db:code>, and returns the result.</db:para>
</db:section>
<db:section xml:id="strictlyEquals">
<db:title>[constexpr] bool QJSPrimitiveValue::strictlyEquals(const QJSPrimitiveValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>strictlyEquals</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool strictlyEquals(const QJSPrimitiveValue &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '===' operation on this <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link> and <db:code role="parameter">other</db:code>, and returns the result.</db:para>
</db:section>
<db:section xml:id="toBoolean">
<db:title>[constexpr] bool QJSPrimitiveValue::toBoolean() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>toBoolean</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool toBoolean() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value coerced a boolean by JavaScript rules.</db:para>
</db:section>
<db:section xml:id="toDouble">
<db:title>[constexpr] double QJSPrimitiveValue::toDouble() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>toDouble</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double toDouble() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value coerced to a JavaScript Number by JavaScript rules.</db:para>
</db:section>
<db:section xml:id="toInteger">
<db:title>[constexpr] int QJSPrimitiveValue::toInteger() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toInteger</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toInteger() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value coerced to an integral 32bit number by the rules JavaScript would apply when preparing it for a bit shift operation.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QJSPrimitiveValue::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value coerced to a JavaScript String by JavaScript rules.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[constexpr] QJSPrimitiveValue::Type QJSPrimitiveValue::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJSPrimitiveValue::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the <db:link xlink:href="qjsprimitivevalue.xml">QJSPrimitiveValue</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[constexpr, since 6.1] bool operator!=(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '!==' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-2a">
<db:title>[since 6.1] QJSPrimitiveValue operator*(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJSPrimitiveValue</db:type>
<db:methodname>operator*</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue operator*(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '*' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-2b">
<db:title>[since 6.1] QJSPrimitiveValue operator+(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJSPrimitiveValue</db:type>
<db:methodname>operator+</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue operator+(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Perfoms the JavaScript '+' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-">
<db:title>[since 6.1] QJSPrimitiveValue operator-(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJSPrimitiveValue</db:type>
<db:methodname>operator-</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue operator-(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '-' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-2f">
<db:title>[since 6.1] QJSPrimitiveValue operator/(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJSPrimitiveValue</db:type>
<db:methodname>operator/</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJSPrimitiveValue operator/(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '/' operation between <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-lt">
<db:title>[constexpr, since 6.1] bool operator&lt;(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '&lt;' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-lt-eq">
<db:title>[constexpr, since 6.1] bool operator&lt;=(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&lt;=</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&lt;=(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '&lt;=' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[constexpr, since 6.1] bool operator==(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '===' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-gt">
<db:title>[constexpr, since 6.1] bool operator&gt;(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '&gt;' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="operator-gt-eq">
<db:title>[constexpr, since 6.1] bool operator&gt;=(const QJSPrimitiveValue &amp;<db:emphasis>lhs</db:emphasis>, const QJSPrimitiveValue &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>operator&gt;=</db:methodname>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>lhs</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QJSPrimitiveValue &amp;</db:type>
<db:parameter>rhs</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator&gt;=(const QJSPrimitiveValue &amp;lhs, const QJSPrimitiveValue &amp;rhs)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Performs the JavaScript '&gt;=' operation on <db:code role="parameter">lhs</db:code> and <db:code role="parameter">rhs</db:code>, and returns the result.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
</db:section>
</db:article>
