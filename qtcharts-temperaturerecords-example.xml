<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Temperature Records Example</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The example shows how to create a bar chart with negative bars.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>For our example we use temperature data.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_temperaturerecords.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="crating-negative-bars">
<db:title>Crating Negative Bars</db:title>
<db:para>First we create two barsets and append the data to them. One set represents the minimum temperatures and another the maximum temperatures.</db:para>
<db:programlisting language="cpp">    QBarSet *low = new QBarSet(&quot;Min&quot;);
    QBarSet *high = new QBarSet(&quot;Max&quot;);

    *low &amp;lt;&amp;lt; -52 &amp;lt;&amp;lt; -50 &amp;lt;&amp;lt; -45.3 &amp;lt;&amp;lt; -37.0 &amp;lt;&amp;lt; -25.6 &amp;lt;&amp;lt; -8.0
         &amp;lt;&amp;lt; -6.0 &amp;lt;&amp;lt; -11.8 &amp;lt;&amp;lt; -19.7 &amp;lt;&amp;lt; -32.8 &amp;lt;&amp;lt; -43.0 &amp;lt;&amp;lt; -48.0;
    *high &amp;lt;&amp;lt; 11.9 &amp;lt;&amp;lt; 12.8 &amp;lt;&amp;lt; 18.5 &amp;lt;&amp;lt; 26.5 &amp;lt;&amp;lt; 32.0 &amp;lt;&amp;lt; 34.8
          &amp;lt;&amp;lt; 38.2 &amp;lt;&amp;lt; 34.8 &amp;lt;&amp;lt; 29.8 &amp;lt;&amp;lt; 20.4 &amp;lt;&amp;lt; 15.1 &amp;lt;&amp;lt; 11.8;
</db:programlisting>
<db:para>We create the series and append the barsets to it. The series takes ownership of the barsets.</db:para>
<db:programlisting language="cpp">    QStackedBarSeries *series = new QStackedBarSeries();
    series-&amp;gt;append(low);
    series-&amp;gt;append(high);
</db:programlisting>
<db:para>Here we create the chart object and add the series to it. We set the title for the chart with setTitle, and then turn on animations of the series by calling setAnimationOptions(<db:link xlink:href="qchart.xml#AnimationOption-enum">QChart::SeriesAnimations</db:link>)</db:para>
<db:programlisting language="cpp">    QChart *chart = new QChart();
    chart-&amp;gt;addSeries(series);
    chart-&amp;gt;setTitle(&quot;Temperature records in celcius&quot;);
    chart-&amp;gt;setAnimationOptions(QChart::SeriesAnimations);
</db:programlisting>
<db:para>To have the categories displayed on an axis, we need to create a <db:link xlink:href="qbarcategoryaxis.xml">QBarCategoryAxis</db:link>. Here we create a category axis with a list of categories and add it to the chart aligned to bottom, acting as the x-axis. The chart takes ownership of the axis. For y-axis we use a value axis, aligned to the left-hand side. We change the range for the y-axis, as this gives nicer results than with autoscaling.</db:para>
<db:programlisting language="cpp">    QStringList categories = {
        &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;
    };

    QBarCategoryAxis *axisX = new QBarCategoryAxis();
    axisX-&amp;gt;append(categories);
    axisX-&amp;gt;setTitleText(&quot;Month&quot;);
    chart-&amp;gt;addAxis(axisX, Qt::AlignBottom);
    QValueAxis *axisY = new QValueAxis();
    axisY-&amp;gt;setRange(-52, 52);
    axisY-&amp;gt;setTitleText(&quot;Temperature [&amp;amp;deg;C]&quot;);
    chart-&amp;gt;addAxis(axisY, Qt::AlignLeft);
    series-&amp;gt;attachAxis(axisX);
    series-&amp;gt;attachAxis(axisY);
</db:programlisting>
<db:para>We also want to show the legend. To do so, we get the legend pointer from the chart and set it to visible. We also place the legend to the bottom of the chart by setting its alignment to <db:link xlink:href="qt.xml#AlignmentFlag-enum">Qt::AlignBottom</db:link>.</db:para>
<db:programlisting language="cpp">    chart-&amp;gt;legend()-&amp;gt;setVisible(true);
    chart-&amp;gt;legend()-&amp;gt;setAlignment(Qt::AlignBottom);
</db:programlisting>
<db:para>Finally we add the chart onto a view. We also turn on the antialiasing for the chartView.</db:para>
<db:programlisting language="cpp">    QChartView *chartView = new QChartView(chart);
    chartView-&amp;gt;setRenderHint(QPainter::Antialiasing);
</db:programlisting>
<db:para>Chart is ready to be shown. We set the chart to be the central widget of the window. We also set the size for the chart window and show it.</db:para>
<db:programlisting language="cpp">    QMainWindow window;
    window.setCentralWidget(chartView);
    window.resize(600, 300);
    window.show();
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtcharts.git/tree/examples/charts/temperaturerecords?h=6.3">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
