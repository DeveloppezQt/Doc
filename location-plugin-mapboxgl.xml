<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Location Mapbox GL Plugin</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Uses Mapbox GL for location services.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>This geo services plugin allows applications to access <db:link xlink:href="http://mapbox.com">Mapbox</db:link> mapping services using the Qt Location API. The use of these services is governed by the <db:link xlink:href="https://www.mapbox.com/tos">Mapbox terms of service</db:link>.</db:para>
<db:para>This plugin differs from the <db:link xlink:href="http://doc.qt.io/qt-5/location-plugin-mapbox.html">Mapbox</db:link> plugin because it uses the <db:link xlink:href="https://github.com/mapbox/mapbox-gl-native/">Mapbox GL map engine</db:link> for rendering both raster tiles and <db:link xlink:href="https://www.mapbox.com/vector-tiles">vector tiles</db:link> in real-time. The benefits are: text staying upright, font antialiasing, labels flowing between zoom levels, smooth pan, tilt, rotation and continuous zoom.</db:para>
<db:para>The appearance and behavior of vector maps can be customized by creating custom map styles. This can be done with tools like <db:link xlink:href="https://www.mapbox.com/studio">Mapbox Studio</db:link>.</db:para>
<db:para>The Mapbox GL geo services plugin can be loaded by using the plugin key &quot;mapboxgl&quot;.</db:para>
<db:para>Both Mapbox geo services plugins require an access token to access map styles and tiles hosted by Mapbox. To create a Mapbox account visit <db:link xlink:href="https://www.mapbox.com/pricing">https://www.mapbox.com/pricing</db:link>.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> the API for this plugin is introduced in Qt 5.9 as <db:emphasis>technology preview</db:emphasis>.</db:para>
</db:section>
<db:section xml:id="platform-support">
<db:title>Platform Support</db:title>
<db:para>Qt Location Mapbox GL Plugin has the following support for platforms:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Microsoft Windows (win32) - Supported, requires MinGW 5.0+</db:para>
</db:listitem>
<db:listitem>
<db:para>Linux X11 - Supported, requires GCC 4.9+</db:para>
</db:listitem>
<db:listitem>
<db:para>macOS - Supported</db:para>
</db:listitem>
<db:listitem>
<db:para>Android - Supported</db:para>
</db:listitem>
<db:listitem>
<db:para>Embedded Linux - Supported, requires GCC 4.9+</db:para>
</db:listitem>
<db:listitem>
<db:para>iOS - Supported</db:para>
</db:listitem>
<db:listitem>
<db:para>WinRT - Not supported</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="parameters">
<db:title>Parameters</db:title>
<db:section xml:id="optional-plugin-parameters">
<db:title>Optional plugin parameters</db:title>
<db:para>The following table lists optional parameters that can be passed to the Mapbox plugin.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.access_token</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="https://www.mapbox.com/help/define-access-token">Access token</db:link> provided by Mapbox. The token can also be specified using the environment variable MAPBOX_ACCESS_TOKEN, but if also set using a plugin parameter, then this last one will have the precedence over the environment variable. When not set, a development token will be used by default. The development token is subject to the Mapbox <db:link xlink:href="https://www.mapbox.com/tos">Terms of Services</db:link> and must not be used in production. This property has no effect on styles hosted outside the Mapbox servers.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.china</db:para>
</db:td>
<db:td>
<db:para>Use Mapbox China API base URLs and styles. Please notice that Mapbox China requires a specific access token. Contact <db:link xlink:href="https://www.mapbox.com/contact/sales/">Mapbox sales</db:link> for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.additional_style_urls</db:para>
</db:td>
<db:td>
<db:para>Additional, comma separated, Mapbox <db:link xlink:href="https://www.mapbox.com/help/define-style-url">style URLs</db:link> to be added to the available style URLs. Additional styles will be prepended to the <db:link xlink:href="qml-qtlocation-map.xml#supportedMapTypes-prop">supportedMapTypes</db:link> property of the <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.cache.directory</db:para>
</db:td>
<db:td>
<db:para>Absolute path to map tile cache directory used as network disk cache.</db:para>
<db:para>The default place for the cache is the QtLocation/mapboxgl subdirectory in the location returned by <db:link xlink:href="qstandardpaths.xml#writableLocation">QStandardPaths::writableLocation</db:link>(), called with <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::GenericCacheLocation</db:link> as a parameter. On systems that have no concept of a shared cache, the application-specific <db:link xlink:href="qstandardpaths.xml#StandardLocation-enum">QStandardPaths::CacheLocation</db:link> is used instead.</db:para>
<db:para>This is an <db:link xlink:href="https://www.mapbox.com/help/mobile-offline/#ambient-caching">ambient cache</db:link>, meaning it will get populated on the fly until it reaches the size limit, and when that happens, it will evict the least used tiles.</db:para>
<db:para>This cache can also be used for storing <db:link xlink:href="https://www.mapbox.com/help/mobile-offline">offline tiles</db:link>, but the offline database must be populated using the <db:link xlink:href="https://github.com/mapbox/mapbox-gl-native/blob/master/bin/offline.cpp">offline tool</db:link>. The offline database will work alongside with the ambient cache in the same file. Make sure to comply with Mapbox Terms of Service before creating an offline database.</db:para>
<db:para><db:emphasis role="bold">Note:</db:emphasis> The map tile cache file name must be &quot;mapboxgl.db&quot;. When using the offline tool, the default output is &quot;offline.db&quot;. For using the generated output from the offline tool, you must move that to the proper directory, and rename it as &quot;mapboxgl.db&quot;. The offline tool also provides the &quot;â€“output&quot; parameter for specifying the name of the generated output.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.cache.memory</db:para>
</db:td>
<db:td>
<db:para>Whether or not the cache should be in-memory only. Valid values are <db:emphasis role="bold">true</db:emphasis> and <db:emphasis role="bold">false</db:emphasis>. The default value is <db:emphasis role="bold">false</db:emphasis>. When set to <db:emphasis role="bold">true</db:emphasis>, the disk cache is never created. The ambient cache will work in-memory, but the offline database cannot be used with this option enabled.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.cache.size</db:para>
</db:td>
<db:td>
<db:para>Cache size for map resources in bytes. The default size of this cache is 50 MiB. Make sure to comply with Mapbox Terms of Service before increasing this value.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.use_fbo</db:para>
</db:td>
<db:td>
<db:para>Sets whether to use a framebuffer object to render Mapbox GL Native. Valid values are <db:emphasis role="bold">true</db:emphasis> and <db:emphasis role="bold">false</db:emphasis>. The default value is <db:emphasis role="bold">true</db:emphasis>. When set to <db:emphasis role="bold">false</db:emphasis>, the map is rendered issuing OpenGL commands directly, through a <db:link xlink:href="qsgrendernode.xml">QSGRenderNode</db:link>, to improve the rendering performance. This mode is experimental, and it does not support <db:link xlink:href="qquickitem.xml">QQuickItem</db:link> transformations nor stencil clipping. It might be also produce rendering artifacts e.g. when adding it inside a <db:link xlink:href="qml-qtquick-flipable.xml">Flipable</db:link> item.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>mapboxgl.mapping.items.insert_before</db:para>
</db:td>
<db:td>
<db:para>Some map items such as <db:link xlink:href="qml-qtlocation-mappolyline.xml">MapPolyline</db:link>, <db:link xlink:href="qml-qtlocation-mappolygon.xml">MapPolygon</db:link> and <db:link xlink:href="qml-qtlocation-maprectangle.xml">MapRectangle</db:link> will be rendered after the topmost <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layers">layer</db:link> of the style. With this parameter set, the map items will be rendered <db:emphasis role="bold">before</db:emphasis> the layer ID specified, unless the layer is not present on the current style, which will fallback to the default behavior. This parameter can be used to display route lines under labels.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="optional-map-parameters">
<db:title>Optional map parameters</db:title>
<db:para>The <db:link xlink:href="qml-qtlocation-map.xml">Map</db:link> item using this plugin, can also be customized using <db:link xlink:href="qml-qtlocation-mapparameter.xml" role="deprecated">MapParameters</db:link>, allowing runtime changes to the map style and data.</db:para>
<db:para>Examples of what can be currently controlled using <db:link xlink:href="qml-qtlocation-mapparameter.xml" role="deprecated">MapParameter</db:link> are:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Hide and show parts of the map, like roads and buildings.</db:para>
</db:listitem>
<db:listitem>
<db:para>Change paint properties like color and opacity of various parts of the map.</db:para>
</db:listitem>
<db:listitem>
<db:para>Change layout properties like thickness and line joints.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add data to the map.</db:para>
</db:listitem>
<db:listitem>
<db:para>Add sprites to the map.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>With the exception of extrusion and data driven style properties, every property described at the <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/">Mapbox Style Specification</db:link> can be changed at runtime.</db:para>
<db:para>The <db:link xlink:href="qml-qtlocation-mapparameter.xml" role="deprecated">MapParameters</db:link>, used to control the style of the map at runtime, always have a <db:emphasis role="bold">type</db:emphasis> property, followed by user defined properties that try to match the <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/">Mapbox Style Specification</db:link> naming as much as possible, replacing the dash with camel case for technical reasons (i.e. <db:emphasis role="bold">line-cap</db:emphasis> will be translated to <db:emphasis role="bold">lineCap</db:emphasis>).</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Parameter type</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>source</db:para>
</db:td>
<db:td>
<db:para>A style data <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#sources">source</db:link>. When using a source of <db:emphasis role="bold">sourceType</db:emphasis> <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#sources-geojson">geojson</db:link>, the <db:emphasis role="bold">data</db:emphasis> property can be both inlined or sourced from qrc.</db:para>
</db:td>
<db:td>
<db:para>Supported source types are: <db:emphasis role="bold">vector</db:emphasis>, <db:emphasis role="bold">raster</db:emphasis>, <db:emphasis role="bold">raster-dem</db:emphasis> and <db:emphasis role="bold">geojson</db:emphasis>. 'geojson'.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>layer</db:para>
</db:td>
<db:td>
<db:para>Adds a new <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layers">style layer</db:link> to the map. On a Mapbox GL map, layers are used in styles for adding styling rules to specific subsets of data. A layer will contain a reference to the data for which they are defining a style. Use the <db:emphasis role="bold">before</db:emphasis> attribute to insert a layer before an existing layer.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>paint</db:para>
</db:td>
<db:td>
<db:para>Defines how a layer will be painted. <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layer-paint">Paint</db:link> properties can be used for changing the color and opacity of roads in the map or the land color, among other things.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>layout</db:para>
</db:td>
<db:td>
<db:para>Defines how a layer will be layouted. <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#layer-layout">Layout</db:link> properties can be used for setting a layer's visibility, and for defining the spacing between dashes in a dashed line, among other things.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>image</db:para>
</db:td>
<db:td>
<db:para>Adds a <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#root-sprite">sprite</db:link> to the map to be used by a style layer. This property is required if any style layer uses the properties such as <db:emphasis role="bold">backgroundPattern</db:emphasis>, <db:emphasis role="bold">fillPattern</db:emphasis>, <db:emphasis role="bold">linePattern</db:emphasis>, or <db:emphasis role="bold">iconImage</db:emphasis>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>filter</db:para>
</db:td>
<db:td>
<db:para>A <db:link xlink:href="https://www.mapbox.com/mapbox-gl-js/style-spec/#types-filter">filter</db:link> selects specific features from a layer. This can be used for adding a layer from a GeoJSON source based on specific parts of the data source, like by using only the points in the GeoJSON.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="example-usage">
<db:title>Example usage</db:title>
<db:para>This example adds inline GeoJSON data to the map. Simply adding a <db:emphasis role="bold">source</db:emphasis> is not enough to get the data visible. It is also necessary to create a <db:emphasis role="bold">layer</db:emphasis> based on this source. After the layer is added, we also need to style its <db:emphasis role="bold">paint</db:emphasis> and <db:emphasis role="bold">layout</db:emphasis> properties. In this case we are changing the line color to blue, and the line width to 8 pixels, as well as also setting round line joints and caps.</db:para>
<db:programlisting language="cpp">Map {
    plugin: Plugin { name: &quot;mapboxgl&quot; }

    center: QtPositioning.coordinate(60.170448, 24.942046) // Helsinki
    zoomLevel: 12

    MapParameter {
        type: &quot;source&quot;

        property var name: &quot;routeSource&quot;
        property var sourceType: &quot;geojson&quot;
        property var data: '{ &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;features&quot;: \
            [{ &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: {}, &quot;geometry&quot;: { \
            &quot;type&quot;: &quot;LineString&quot;, &quot;coordinates&quot;: [[ 24.934938848018646, \
            60.16830257086771 ], [ 24.943315386772156, 60.16227776476442 ]]}}]}'
    }

    MapParameter {
        type: &quot;layer&quot;

        property var name: &quot;route&quot;
        property var layerType: &quot;line&quot;
        property var source: &quot;routeSource&quot;

        // Draw under the first road label layer
        // of the mapbox-streets style.
        property var before: &quot;road-label-small&quot;
    }

    MapParameter {
        type: &quot;paint&quot;

        property var layer: &quot;route&quot;
        property var lineColor: &quot;blue&quot;
        property var lineWidth: 8.0
    }

    MapParameter {
        type: &quot;layout&quot;

        property var layer: &quot;route&quot;
        property var lineJoin: &quot;round&quot;
        property var lineCap: &quot;round&quot;
    }
}
</db:programlisting>
<db:para>Note that the order we add the parameters is important, because there is dependency between the parameters. Adding a layer before adding a source will create an invalid layer, same goes for adding a paint property for a layer that doesn't exist.</db:para>
<db:para>Paint and layout properties can also be used for styling existing layers of the current style, and not only layers created at runtime. <db:link xlink:href="https://www.mapbox.com/studio/">Mapbox Studio</db:link> can be used for inspecting layers of a given style.</db:para>
</db:section>
</db:article>
