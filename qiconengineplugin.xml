<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QIconEnginePlugin Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qiconengineplugin.xml">QIconEnginePlugin</db:link> class provides an abstract base for custom <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> plugins.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QIconEnginePlugin</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QIconEnginePlugin is part of <db:simplelist><db:member>plugins</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The icon engine plugin is a simple plugin interface that makes it easy to create custom icon engines that can be loaded dynamically into applications through <db:link xlink:href="qicon.xml">QIcon</db:link>. <db:link xlink:href="qicon.xml">QIcon</db:link> uses the file or resource name's suffix to determine what icon engine to use.</db:para>
<db:para>Writing a icon engine plugin is achieved by subclassing this base class, reimplementing the pure virtual function <db:link xlink:href="qiconengineplugin.xml#create">create</db:link>(), and exporting the class with the <db:link xlink:href="qtplugin.xml#Q_PLUGIN_METADATA">Q_PLUGIN_METADATA</db:link>() macro.</db:para>
<db:para>The json metadata should contain a list of icon engine keys that this plugin supports. The keys correspond to the suffix of the file or resource name used when the plugin was created. Keys are case insensitive.</db:para>
<db:programlisting language="cpp">{ &quot;Keys&quot;: [ &quot;myiconengine&quot; ] }
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="plugins-howto.xml">How to Create Qt Plugins</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QIconEnginePlugin">
<db:title>QIconEnginePlugin::QIconEnginePlugin(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Constructs a icon engine plugin with the given <db:code role="parameter">parent</db:code>. This is invoked automatically by the plugin loader.</db:para>
</db:section>
<db:section xml:id="dtor.QIconEnginePlugin">
<db:title>[virtual noexcept] QIconEnginePlugin::~QIconEnginePlugin()</db:title>
<db:para>Destroys the icon engine plugin.</db:para>
<db:para>You never have to call this explicitly. Qt destroys a plugin automatically when it is no longer used.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>[pure virtual] QIconEngine *QIconEnginePlugin::create(const QString &amp;<db:emphasis>filename</db:emphasis> = QString())</db:title>
<db:para>Creates and returns a <db:link xlink:href="qiconengine.xml">QIconEngine</db:link> object for the icon with the given <db:code role="parameter">filename</db:code>.</db:para>
</db:section>
</db:section>
</db:article>
