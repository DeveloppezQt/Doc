<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJniEnvironment Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link> class provides access to the JNI Environment (JNIEnv).</db:para>
<db:para>This class was introduced in Qt 6.1.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJniEnvironment</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When using JNI, the <db:link xlink:href="https://developer.android.com/training/articles/perf-jni#javavm-and-jnienv">JNIEnv</db:link> class is a pointer to a function table and a member function for each JNI function that indirects through the table. JNIEnv provides most of the JNI functions. Every C++ native function receives a JNIEnv as the first argument. The JNI environment cannot be shared between threads.</db:para>
<db:para>Since JNIEnv doesn't do much error checking, such as exception checking and clearing, <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link> allows you to do that easily.</db:para>
<db:para>For more information about JNIEnv, see <db:link xlink:href="https://docs.oracle.com/en/java/javase/13/docs/specs/jni/functions.html#interface-function-table">Java: Interface Function Table</db:link>.</db:para>
<db:note>
<db:para>This API has been designed and tested for use with Android. It has not been tested for other platforms.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="OutputMode-enum">
<db:title>enum QJniEnvironment::OutputMode</db:title>
<db:enumsynopsis>
<db:enumname>OutputMode</db:enumname>
<db:enumitem>
<db:enumidentifier>Silent</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Verbose</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link></db:emphasis>::<db:emphasis role="bold">OutputMode</db:emphasis>::Silent</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The exceptions are cleaned silently</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link></db:emphasis>::<db:emphasis role="bold">OutputMode</db:emphasis>::Verbose</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Prints the exceptions and their stack backtrace as an error to stderr stream.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="findClass">
<db:title>jclass QJniEnvironment::findClass(const char *<db:emphasis>className</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>jclass</db:type>
<db:methodname>findClass</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jclass findClass(const char *className)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for <db:code role="parameter">className</db:code> using all available class loaders. Qt on Android uses a custom class loader to load all the .jar files and it must be used to find any classes that are created by that class loader because these classes are not visible when using the default class loader.</db:para>
<db:para>Returns the class pointer or null if <db:code role="parameter">className</db:code> is not found.</db:para>
<db:para>A use case for this function is searching for a class to call a JNI method that takes a jclass. This can be useful when doing multiple JNI calls on the same class object which can a bit faster than using a class name in each call. Additionally, this call looks for internally cached classes first before doing a JNI call, and returns such a class if found. The following code snippet creates an instance of the class CustomClass and then calls the printFromJava() method:</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass javaClass = env.findClass(&quot;org/qtproject/example/android/CustomClass&quot;);
QJniObject javaMessage = QJniObject::fromString(&quot;findClass example&quot;);
QJniObject::callStaticMethod&amp;lt;void&amp;gt;(javaClass, &quot;printFromJava&quot;,
                                   &quot;(Ljava/lang/String;)V&quot;, javaMessage.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
<db:note>
<db:para>This call returns a global reference to the class object from the internally cached classes.</db:para>
</db:note>
</db:section>
<db:section xml:id="findField">
<db:title>[since 6.2] jfieldID QJniEnvironment::findField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>jfieldID</db:type>
<db:methodname>findField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jfieldID findField(jclass clazz, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for a member field of a class <db:code role="parameter">clazz</db:code>. The field is specified by its <db:code role="parameter">fieldName</db:code> and <db:code role="parameter">signature</db:code>.</db:para>
<db:para>Returns the field ID or nullptr if the field is not found.</db:para>
<db:para>A usecase for this method is searching for class fields and caching their IDs, so that they could later be used for getting/setting the fields.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="findMethod">
<db:title>[since 6.2] jmethodID QJniEnvironment::findMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>jmethodID</db:type>
<db:methodname>findMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jmethodID findMethod(jclass clazz, const char *methodName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for an instance method of a class <db:code role="parameter">clazz</db:code>. The method is specified by its <db:code role="parameter">methodName</db:code> and <db:code role="parameter">signature</db:code>.</db:para>
<db:para>Returns the method ID or nullptr if the method is not found.</db:para>
<db:para>A usecase for this method is searching for class methods and caching their IDs, so that they could later be used for calling the methods.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="findStaticField">
<db:title>[since 6.2] jfieldID QJniEnvironment::findStaticField(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>fieldName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>jfieldID</db:type>
<db:methodname>findStaticField</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>fieldName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jfieldID findStaticField(jclass clazz, const char *fieldName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for a static field of a class <db:code role="parameter">clazz</db:code>. The field is specified by its <db:code role="parameter">fieldName</db:code> and <db:code role="parameter">signature</db:code>.</db:para>
<db:para>Returns the field ID or nullptr if the field is not found.</db:para>
<db:para>A usecase for this method is searching for class fields and caching their IDs, so that they could later be used for getting/setting the fields.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="findStaticMethod">
<db:title>[since 6.2] jmethodID QJniEnvironment::findStaticMethod(jclass <db:emphasis>clazz</db:emphasis>, const char *<db:emphasis>methodName</db:emphasis>, const char *<db:emphasis>signature</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>jmethodID</db:type>
<db:methodname>findStaticMethod</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>methodName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>signature</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">jmethodID findStaticMethod(jclass clazz, const char *methodName, const char *signature)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Searches for a static method of a class <db:code role="parameter">clazz</db:code>. The method is specified by its <db:code role="parameter">methodName</db:code> and <db:code role="parameter">signature</db:code>.</db:para>
<db:para>Returns the method ID or nullptr if the method is not found.</db:para>
<db:para>A usecase for this method is searching for class methods and caching their IDs, so that they could later be used for calling the methods.</db:para>
<db:programlisting language="cpp">QJniEnvironment env;
jclass javaClass = env.findClass(&quot;org/qtproject/example/android/CustomClass&quot;);
jmethodID methodId = env.findStaticMethod(javaClass,
                                          &quot;staticJavaMethod&quot;,
                                          &quot;(Ljava/lang/String;)V&quot;);
QJniObject javaMessage = QJniObject::fromString(&quot;findStaticMethod example&quot;);
QJniObject::callStaticMethod&amp;lt;void&amp;gt;(javaClass,
                                   methodId,
                                   javaMessage.object&amp;lt;jstring&amp;gt;());
</db:programlisting>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>[since 6.2] bool QJniEnvironment::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this instance holds a valid JNIEnv object.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="registerNativeMethods">
<db:title>bool QJniEnvironment::registerNativeMethods(const char *<db:emphasis>className</db:emphasis>, const JNINativeMethod[] <db:emphasis>methods</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>registerNativeMethods</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const JNINativeMethod[]</db:type>
<db:parameter>methods</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerNativeMethods(const char *className, const JNINativeMethod[] methods, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Registers the Java methods in the array <db:code role="parameter">methods</db:code> of size <db:code role="parameter">size</db:code>, each of which can call native C++ functions from class <db:code role="parameter">className</db:code>. These methods must be registered before any attempt to call them.</db:para>
<db:para>Returns true if the registration is successful, otherwise false.</db:para>
<db:para>Each element in the methods array consists of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Java method name</db:para>
</db:listitem>
<db:listitem>
<db:para>Method signature</db:para>
</db:listitem>
<db:listitem>
<db:para>The C++ functions that will be executed</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">const JNINativeMethod methods[] =
                        {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                        {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};
QJniEnvironment env;
env.registerNativeMethods(&quot;org/qtproject/android/TestJavaClass&quot;, methods, 2);
</db:programlisting>
</db:section>
<db:section xml:id="registerNativeMethods-1">
<db:title>bool QJniEnvironment::registerNativeMethods(jclass <db:emphasis>clazz</db:emphasis>, const JNINativeMethod[] <db:emphasis>methods</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>registerNativeMethods</db:methodname>
<db:methodparam>
<db:type>jclass</db:type>
<db:parameter>clazz</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const JNINativeMethod[]</db:type>
<db:parameter>methods</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerNativeMethods(jclass clazz, const JNINativeMethod[] methods, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This overload uses a previously cached jclass instance <db:code role="parameter">clazz</db:code>.</db:para>
<db:programlisting language="cpp">JNINativeMethod methods[] {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                           {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};
QJniEnvironment env;
jclass clazz = env.findClass(&quot;org/qtproject/android/TestJavaClass&quot;);
env.registerNativeMethods(clazz, methods, 2);
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QJniEnvironment</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qjnienvironment.xml">QJniEnvironment</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="registerNativeMethods-4">
<db:title>bool QJniEnvironment::registerNativeMethods(const char *<db:emphasis>className</db:emphasis>, JNINativeMethod[] <db:emphasis>methods</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>registerNativeMethods</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>className</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>JNINativeMethod[]</db:type>
<db:parameter>methods</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">bool registerNativeMethods(const char *className, JNINativeMethod[] methods, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">deprecated</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is deprecated since 6.2. We strongly advise against using it in new code.</db:para>
<db:para>This is an overloaded function.</db:para>
<db:para>Use the overload with a const JNINativeMethod[] instead.</db:para>
<db:para>Registers the Java methods in the array <db:code role="parameter">methods</db:code> of size <db:code role="parameter">size</db:code>, each of which can call native C++ functions from class <db:code role="parameter">className</db:code>. These methods must be registered before any attempt to call them.</db:para>
<db:para>Returns true if the registration is successful, otherwise false.</db:para>
<db:para>Each element in the methods array consists of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The Java method name</db:para>
</db:listitem>
<db:listitem>
<db:para>Method signature</db:para>
</db:listitem>
<db:listitem>
<db:para>The C++ functions that will be executed</db:para>
</db:listitem>
</db:itemizedlist>
<db:programlisting language="cpp">JNINativeMethod methods[] = {{&quot;callNativeOne&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaOne)},
                             {&quot;callNativeTwo&quot;, &quot;(I)V&quot;, reinterpret_cast&amp;lt;void *&amp;gt;(fromJavaTwo)}};
QJniEnvironment env;
env.registerNativeMethods(&quot;org/qtproject/android/TestJavaClass&quot;, methods, 2);
</db:programlisting>
</db:section>
</db:section>
</db:section>
</db:article>
