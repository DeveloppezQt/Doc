<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QT_DEPLOY_SUPPORT</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Name of the file to include for setting up deployment support.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="cmake-variable-qt-deploy-support"/>
<db:para>Name of the file to include for setting up deployment support.</db:para>
<db:para>This variable was introduced in Qt 6.3.</db:para>
<db:note>
<db:para>This variable is in technology preview and may change in future releases.</db:para>
</db:note>
<db:note>
<db:para>The value of this variable should never be modified by project code.</db:para>
</db:note>
<db:para>This configure-phase variable is set by the Core package. It is intended to be used as the first line of any deployment script to ensure access to the deployment APIs provided by Qt. Such deployment scripts do not run during CMake's configure phase, they are executed during installation or as part of a post-build rule.</db:para>
<db:para>The following example shows one way the variable would be used when installing an application, along with its runtime dependencies:</db:para>
<db:programlisting language="cpp" role="bad">cmake_minimum_required(VERSION 3.16...3.22)
project(MyThings)

find_package(Qt6 REQUIRED COMPONENTS Core)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)

set_target_properties(MyApp PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
)

# App bundles on macOS have an .app suffix
if(APPLE)
    set(executable_path &quot;$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;.app&quot;)
else()
    set(executable_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:MyApp&amp;gt;&quot;)
endif()

# Helper app, not necessarily built as part of this project.
qt_add_executable(HelperApp helper.cpp)
set(helper_app_path &quot;\${QT_DEPLOY_BIN_DIR}/$&amp;lt;TARGET_FILE_NAME:HelperApp&amp;gt;&quot;)

# The following script must only be executed at install time
set(deploy_script &quot;${CMAKE_CURRENT_BINARY_DIR}/deploy_MyApp.cmake&quot;)

file(GENERATE OUTPUT ${deploy_script} CONTENT &quot;
# Including the file pointed to by QT_DEPLOY_SUPPORT ensures the generated
# deployment script has access to qt_deploy_runtime_dependencies()
include(\&quot;${QT_DEPLOY_SUPPORT}\&quot;)
qt_deploy_runtime_dependencies(
    EXECUTABLE \&quot;${executable_path}\&quot;
    ADDITIONAL_EXECUTABLES \&quot;${helper_app_path}\&quot;
    GENERATE_QT_CONF
    VERBOSE
)&quot;)

# Omitting RUNTIME DESTINATION will install a non-bundle target to CMAKE_INSTALL_BINDIR,
# which coincides with the default value of QT_DEPLOY_BIN_DIR used above, './bin'.
# Installing macOS bundles always requires an explicit BUNDLE DESTINATION option.
install(TARGETS MyApp HelperApp    # Install to CMAKE_INSTALL_PREFIX/bin/MyApp.exe
                                   #                           and ./binHelperApp.exe
        BUNDLE  DESTINATION .      # Install to CMAKE_INSTALL_PREFIX/MyApp.app/Contents/MacOS/MyApp
)
install(SCRIPT ${deploy_script})    # Add its runtime dependencies
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt-deploy-runtime-dependencies.xml#qt-deploy-runtime-dependencies">qt_deploy_runtime_dependencies()</db:link></db:member>
<db:member><db:link xlink:href="">qt_deploy_qml_imports()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
