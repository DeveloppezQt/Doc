<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QMaskGenerator Class</db:title>
<db:productname>QtWebSockets</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebSockets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qmaskgenerator.xml">QMaskGenerator</db:link> class provides an abstract base for custom 32-bit mask generators.</db:para>
<db:para>This class was introduced in Qt 5.3.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QMaskGenerator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.3</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += websockets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The WebSockets specification as outlined in <db:link xlink:href="http://tools.ietf.org/html/rfc6455">RFC 6455</db:link> requires that all communication from client to server be masked. This is to prevent malicious scripts from attacking badly behaving proxies. For more information about the importance of good masking, see <db:link xlink:href="http://w2spconf.com/2011/papers/websocket.pdf">&quot;Talking to Yourself for Fun and Profit&quot; by Lin-Shung Huang et al</db:link>. By default <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> uses the cryptographically insecure <db:link xlink:href="qtglobal.xml#qrand">qrand</db:link>() function. The best measure against attacks mentioned in the document above, is to use <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> over a secure connection (<db:emphasis>wss://</db:emphasis>). In general, always be careful to not have 3rd party script access to a <db:link xlink:href="qwebsocket.xml">QWebSocket</db:link> in your application.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QMaskGenerator">
<db:title>[explicit] QMaskGenerator::QMaskGenerator(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Creates a new <db:link xlink:href="qmaskgenerator.xml">QMaskGenerator</db:link> object with the given optional <db:link xlink:href="qobject.xml">QObject</db:link> <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QMaskGenerator">
<db:title>[virtual noexcept] QMaskGenerator::~QMaskGenerator()</db:title>
<db:para>Destroys the <db:link xlink:href="qmaskgenerator.xml">QMaskGenerator</db:link> object.</db:para>
</db:section>
<db:section xml:id="nextMask">
<db:title>[pure virtual] quint32 QMaskGenerator::nextMask()</db:title>
<db:para>Returns a new random 32-bit mask. The randomness depends on the RNG used to created the mask.</db:para>
</db:section>
<db:section xml:id="seed">
<db:title>[pure virtual] bool QMaskGenerator::seed()</db:title>
<db:para>Initializes the <db:link xlink:href="qmaskgenerator.xml">QMaskGenerator</db:link> by seeding the randomizer. When seed() is not called, it depends on the specific implementation of a subclass if a default seed is used or no seed is used at all. Returns <db:emphasis>true</db:emphasis> if seeding succeeds, otherwise false.</db:para>
</db:section>
</db:section>
</db:article>
