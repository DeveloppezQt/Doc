<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Principled Material Example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates the use of Principled Material.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause

import QtQuick
import QtQuick3D
import QtQuick3D.Effects
import QtQuick3D.Helpers
import QtQuick.Controls
import QtQuick.Layouts

Window {
    id: window
    width: 1280
    height: 720
    visible: true
    title: &quot;Principled Materials Example&quot;
    //color: &quot;black&quot;
    color: &quot;#848895&quot;

    Image {
        anchors.fill: parent
        source: &quot;maps/grid.png&quot;
        fillMode: Image.Tile
        horizontalAlignment: Image.AlignLeft
        verticalAlignment: Image.AlignTop
    }

    SplitView {
        id: splitView
        anchors.fill: parent
        Page {
            id: toolPage
            SplitView.fillHeight: true
            SplitView.preferredWidth: 420
            SplitView.minimumWidth: 300
            header: TabBar {
               id: tabBar
               TabButton {
                   text: &quot;Basics&quot;
               }
               TabButton {
                   text: &quot;Alpha&quot;
               }
               TabButton {
                   text: &quot;Details&quot;
               }
               TabButton {
                   text: &quot;Clearcoat&quot;
               }
               TabButton {
                   text: &quot;Refraction&quot;
               }
               TabButton {
                   text: &quot;Special&quot;
               }
            }

            StackLayout {
                id: toolPageSwipeView
                anchors.fill: parent
                anchors.margins: 10
                currentIndex: tabBar.currentIndex

                BasicsPane {
                    id: basicsPane
                    principledMaterial: basicMaterial
                    specularGlossyMaterial: specularGlossyMaterial
                }

                AlphaPane {
                    targetMaterial: viewport.specularGlossyMode ? specularGlossyMaterial : basicMaterial
                    specularGlossyMode: viewport.specularGlossyMode
                }

                DetailsPane {
                    targetMaterial: viewport.specularGlossyMode ? specularGlossyMaterial : basicMaterial
                    view3D: viewport
                }

                ClearcoatPane {
                    targetMaterial: viewport.specularGlossyMode ? specularGlossyMaterial : basicMaterial
                }

                RefractionPane {
                    targetMaterial: viewport.specularGlossyMode ? specularGlossyMaterial : basicMaterial
                    specularGlossyMode: viewport.specularGlossyMode
                }

                SpecialPane {
                    targetMaterial: viewport.specularGlossyMode ? specularGlossyMaterial : basicMaterial
                    linesModel: linesLogo
                    pointsModel: pointsLogo
                    specularGlossyMode: viewport.specularGlossyMode
                }
            }
        }

        View3D {
            id: viewport
            SplitView.fillHeight: true
            SplitView.fillWidth: true
            SplitView.minimumWidth: splitView.width * 0.5
            environment: SceneEnvironment {
                property bool enableEffects: false
                antialiasingMode: SceneEnvironment.MSAA
                antialiasingQuality: SceneEnvironment.High
                lightProbe: Texture {
                    source: &quot;maps/OpenfootageNET_garage-1024.hdr&quot;
                }
                effects: enableEffects ? [bloom, scurveTonemap] : []
                backgroundMode: SceneEnvironment.SkyBox

                SCurveTonemap {
                    id: scurveTonemap
                }
                HDRBloomTonemap {
                    id: bloom
                }
            }
            Node {
                id: originNode
                PerspectiveCamera {
                    id: cameraNode
                    z: 600
                    clipNear: 1
                    clipFar: 10000
                }
            }

            property bool specularGlossyMode: basicsPane.specularGlossyMode

            PrincipledMaterial {
                id: basicMaterial
                baseColor: &quot;red&quot;
            }

            SpecularGlossyMaterial {
                id: specularGlossyMaterial
                property alias baseColor: specularGlossyMaterial.albedoColor
                property real specularAmount: 1.0
                property real specularTint: 1.0

                specularColor: Qt.rgba(0.22, 0.22, 0.22, 1.0)
                albedoColor: &quot;red&quot;
            }

            Model {
                id: cube
                source: &quot;#Cube&quot;
                materials: viewport.specularGlossyMode ? [ specularGlossyMaterial ] : [ basicMaterial ]
                pickable: true
            }

            Model {
                id: sphereModel
                x: -200
                scale: Qt.vector3d(1.5, 1.5, 1.5)
                source: &quot;#Sphere&quot;
                materials: viewport.specularGlossyMode ? [ specularGlossyMaterial ] : [ basicMaterial ]
                pickable: true
            }

            Model {
                id: monkeyMesh
                x: 250
                source: &quot;meshes/suzanne.mesh&quot;
                materials: viewport.specularGlossyMode ? [ specularGlossyMaterial ] : [ basicMaterial ]
                pickable: true
            }

            Model {
                id: linesLogo
                y: 200
                x: -100
                source: &quot;meshes/logo_lines.mesh&quot;
                materials: viewport.specularGlossyMode ? [ specularGlossyMaterial ] : [ basicMaterial ]
                pickable: true
                visible: false
            }

            Model {
                id: pointsLogo
                y: 200
                x: 100
                source: &quot;meshes/logo_points.mesh&quot;
                materials: viewport.specularGlossyMode ? [ specularGlossyMaterial ] : [ basicMaterial ]
                pickable: true
                visible: false
            }
            ResourceLoader {
                meshSources: [
                    &quot;meshes/logo_lines.mesh&quot;,
                    &quot;meshes/logo_points.mesh&quot;
                ]
            }

            BackgroundCurtain {
                visible: curtainToggleButton.checked
                y: -150
            }

            OrbitCameraController {
                origin: originNode
                camera: cameraNode
            }

            MouseArea {
                id: pickController
                anchors.fill: parent
                onClicked: function(mouse) {
                    let pickResult = viewport.pick(mouse.x, mouse.y);
                    if (pickResult.objectHit) {
                        let pickedObject = pickResult.objectHit;
                        // Move the camera orbit origin to be the clicked object
                        originNode.position = pickedObject.position
                    }
                }
            }

            Button {
                id: curtainToggleButton
                text: checked ? &quot;Hide Curtain&quot; : &quot;Show Curtain&quot;
                checkable: true
                checked: true
                anchors.top: parent.top
                anchors.right: parent.right
            }

            RowLayout {
                anchors.bottom: parent.bottom
                Label {
                    text: &quot;Drag Background to Orbit Camera, Touch/Click a Model to Center Camera&quot;
                    color: &quot;#dddddd&quot;
                }
            }
        }
    }
}

</db:programlisting>
</db:article>
