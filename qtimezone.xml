<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTimeZone Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> class converts between UTC and local time in a specific time zone.</db:para>
<db:para>This class was introduced in Qt 5.2.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTimeZone</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.2</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This class provides a stateless calculator for time zone conversions between UTC and the local time in a specific time zone. By default it uses the host system time zone data to perform these conversions.</db:para>
<db:para>This class is primarily designed for use in <db:link xlink:href="qdatetime.xml">QDateTime</db:link>; most applications will not need to access this class directly and should instead use <db:link xlink:href="qdatetime.xml">QDateTime</db:link> with a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>.</db:para>
<db:note>
<db:para>For consistency with <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> does not account for leap seconds.</db:para>
</db:note>
<db:section xml:id="iana-time-zone-ids">
<db:title></db:title><db:section xml:id="iana-time-zone-ids-iana-time-zone-ids-1">
<db:title>IANA Time Zone IDs</db:title>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> uses the IANA time zone IDs as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). This is to ensure a standard ID across all supported platforms. Most platforms support the IANA IDs and the IANA Database natively, but for Windows a mapping is required to the native IDs. See below for more details.</db:para>
<db:para>The IANA IDs can and do change on a regular basis, and can vary depending on how recently the host system data was updated. As such you cannot rely on any given ID existing on any host system. You must use <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>() to determine what IANA IDs are available.</db:para>
<db:para>The IANA IDs and database are also know as the Olson IDs and database, named after their creator.</db:para>
</db:section>
<db:section xml:id="utc-offset-time-zones">
<db:title>UTC Offset Time Zones</db:title>
<db:para>A default UTC time zone backend is provided which is always guaranteed to be available. This provides a set of generic Offset From UTC time zones in the range UTC-14:00 to UTC+14:00. These time zones can be created using either the standard ISO format names &quot;UTC+00:00&quot; as listed by <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>(), or using the number of offset seconds.</db:para>
</db:section>
<db:section xml:id="windows-time-zones">
<db:title>Windows Time Zones</db:title>
<db:para>Windows native time zone support is severely limited compared to the standard IANA TZ Database. Windows time zones cover larger geographic areas and are thus less accurate in their conversions. They also do not support as much historic conversion data and so may only be accurate for the current year.</db:para>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> uses a conversion table derived form the Unicode CLDR data to map between IANA IDs and Windows IDs. Depending on your version of Windows and Qt, this table may not be able to provide a valid conversion, in which &quot;UTC&quot; will be returned.</db:para>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> provides a public API to use this conversion table. The Windows ID used is the Windows Registry Key for the time zone which is also the MS Exchange EWS ID as well, but is different to the Time Zone Name (TZID) and COD code used by MS Exchange in versions before 2007.</db:para>
</db:section>
<db:section xml:id="system-time-zone">
<db:title>System Time Zone</db:title>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> does not support any concept of a system or default time zone. If you require a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that uses the current system time zone at any given moment then you should use a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link>.</db:para>
<db:para>The method <db:link xlink:href="qtimezone.xml#systemTimeZoneId">systemTimeZoneId</db:link>() returns the current system IANA time zone ID which on Unix-like systems will always be correct. On Windows this ID is translated from the Windows system ID using an internal translation table and the user's selected country. As a consequence there is a small chance any Windows install may have IDs not known by Qt, in which case &quot;UTC&quot; will be returned.</db:para>
<db:para>Creating a new <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instance using the system time zone ID will only produce a fixed named copy of the time zone, it will not change if the system time zone changes.</db:para>
</db:section>
<db:section xml:id="time-zone-offsets">
<db:title>Time Zone Offsets</db:title>
<db:para>The difference between UTC and the local time in a time zone is expressed as an offset in seconds from UTC, i.e. the number of seconds to add to UTC to obtain the local time. The total offset is comprised of two component parts, the standard time offset and the daylight-saving time offset. The standard time offset is the number of seconds to add to UTC to obtain standard time in the time zone. The daylight-saving time offset is the number of seconds to add to the standard time offset to obtain daylight-saving time (abbreviated DST and sometimes called &quot;daylight time&quot; or &quot;summer time&quot;) in the time zone.</db:para>
<db:para>Note that the standard and DST offsets for a time zone may change over time as countries have changed DST laws or even their standard time offset.</db:para>
</db:section>
<db:section xml:id="license">
<db:title>License</db:title>
<db:para>This class includes data obtained from the CLDR data files under the terms of the Unicode license.</db:para>
<db:para>COPYRIGHT AND PERMISSION NOTICE</db:para>
<db:para>Copyright Â© 1991-2012 Unicode, Inc. All rights reserved. Distributed under the Terms of Use in http://www.unicode.org/copyright.html.</db:para>
<db:para>Permission is hereby granted, free of charge, to any person obtaining a copy of the Unicode data files and any associated documentation (the &quot;Data Files&quot;) or Unicode software and any associated documentation (the &quot;Software&quot;) to deal in the Data Files or Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the Data Files or Software, and to permit persons to whom the Data Files or Software are furnished to do so, provided that (a) the above copyright notice(s) and this permission notice appear with all copies of the Data Files or Software, (b) both the above copyright notice(s) and this permission notice appear in associated documentation, and (c) there is clear notice in each modified Data File or in the Software as well as in the documentation associated with the Data File(s) or Software that the data or software has been modified.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="NameType-enum">
<db:title>enum QTimeZone::NameType</db:title>
<db:para>The type of time zone name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::DefaultName</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default form of the time zone name, e.g. LongName, ShortName or OffsetName</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::LongName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The long form of the time zone name, e.g. &quot;Central European Time&quot;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::ShortName</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The short form of the time zone name, usually an abbreviation, e.g. &quot;CET&quot;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::OffsetName</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The standard ISO offset form of the time zone name, e.g. &quot;UTC+01:00&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="OffsetDataList-typedef">
<db:title>QTimeZone::OffsetDataList</db:title>
<db:para>Synonym for <db:link xlink:href="qvector.xml">QVector</db:link>&lt;<db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link>&gt;.</db:para>
</db:section>
<db:section xml:id="TimeType-enum">
<db:title>enum QTimeZone::TimeType</db:title>
<db:para>The type of time zone time, for example when requesting the name. In time zones that do not apply DST, all three values may return the same result.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::StandardTime</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The standard time in a time zone, i.e. when Daylight-Saving is not in effect. For example when formatting a display name this will show something like &quot;Pacific Standard Time&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::DaylightTime</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A time when Daylight-Saving is in effect. For example when formatting a display name this will show something like &quot;Pacific daylight-saving time&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::GenericTime</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A time which is not specifically Standard or Daylight-Saving time, either an unknown time or a neutral form. For example when formatting a display name this will show something like &quot;Pacific Time&quot;.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTimeZone">
<db:title>QTimeZone::QTimeZone()</db:title>
<db:para>Create a null/invalid time zone instance.</db:para>
</db:section>
<db:section xml:id="QTimeZone-1">
<db:title>[explicit] QTimeZone::QTimeZone(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Creates an instance of the requested time zone <db:code role="parameter">ianaId</db:code>.</db:para>
<db:para>The ID must be one of the available system IDs otherwise an invalid time zone will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone-3">
<db:title>[explicit] QTimeZone::QTimeZone(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Creates an instance of a time zone with the requested Offset from UTC of <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>The <db:code role="parameter">offsetSeconds</db:code> from UTC must be in the range -14 hours to +14 hours otherwise an invalid time zone will be returned.</db:para>
</db:section>
<db:section xml:id="QTimeZone-4">
<db:title>QTimeZone::QTimeZone(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>abbreviation</db:emphasis>, QLocale::Country <db:emphasis>country</db:emphasis> = QLocale::AnyCountry, const QString &amp;<db:emphasis>comment</db:emphasis> = QString())</db:title>
<db:para>Creates a custom time zone with an ID of <db:code role="parameter">ianaId</db:code> and an offset from UTC of <db:code role="parameter">offsetSeconds</db:code>. The <db:code role="parameter">name</db:code> will be the name used by <db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>() for the <db:link xlink:href="qtimezone.xml#NameType-enum">LongName</db:link>, the <db:code role="parameter">abbreviation</db:code> will be used by <db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>() for the <db:link xlink:href="qtimezone.xml#NameType-enum">ShortName</db:link> and by <db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>(), and the optional <db:code role="parameter">country</db:code> will be used by <db:link xlink:href="qtimezone.xml#country">country</db:link>(). The <db:code role="parameter">comment</db:code> is an optional note that may be displayed in a GUI to assist users in selecting a time zone.</db:para>
<db:para>The <db:code role="parameter">ianaId</db:code> must not be one of the available system IDs returned by <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>(). The <db:code role="parameter">offsetSeconds</db:code> from UTC must be in the range -14 hours to +14 hours.</db:para>
<db:para>If the custom time zone does not have a specific country then set it to the default value of <db:link xlink:href="qlocale.xml#Country-enum">QLocale::AnyCountry</db:link>.</db:para>
</db:section>
<db:section xml:id="QTimeZone-2">
<db:title>QTimeZone::QTimeZone(const QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor, copy <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="dtor.QTimeZone">
<db:title>[noexcept] QTimeZone::~QTimeZone()</db:title>
<db:para>Destroys the time zone.</db:para>
</db:section>
<db:section xml:id="abbreviation">
<db:title>QString QTimeZone::abbreviation(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the time zone abbreviation at the given <db:code role="parameter">atDateTime</db:code>. The abbreviation may change depending on DST or even historical events.</db:para>
<db:para>Note that the abbreviation is not guaranteed to be unique to this time zone and should not be used in place of the ID or display name.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds()</db:title>
<db:para>Returns a list of all available IANA time zone IDs on this system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds-1">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds(QLocale::Country <db:emphasis>country</db:emphasis>)</db:title>
<db:para>Returns a list of all available IANA time zone IDs for a given <db:code role="parameter">country</db:code>.</db:para>
<db:para>As a special case, a <db:code role="parameter">country</db:code> of Qt::AnyCountry returns those time zones that do not have any country related to them, such as UTC. If you require a list of all time zone IDs for all countries then use the standard <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>() method.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds-2">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Returns a list of all available IANA time zone IDs with a given standard time offset of <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>QString QTimeZone::comment() const</db:title>
<db:para>Returns any comment for the time zone.</db:para>
<db:para>A comment may be provided by the host platform to assist users in choosing the correct time zone. Depending on the platform this may not be localized.</db:para>
</db:section>
<db:section xml:id="country">
<db:title>QLocale::Country QTimeZone::country() const</db:title>
<db:para>Returns the country for the time zone.</db:para>
</db:section>
<db:section xml:id="daylightTimeOffset">
<db:title>int QTimeZone::daylightTimeOffset(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the daylight-saving time offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to the standard time offset to obtain the local daylight-saving time.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the DST offset is +3600 seconds. During standard time daylightTimeOffset() will return 0, and when daylight-saving is in effect it will return +3600.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayName">
<db:title>QString QTimeZone::displayName(QTimeZone::TimeType <db:emphasis>timeType</db:emphasis>, QTimeZone::NameType <db:emphasis>nameType</db:emphasis> = QTimeZone::DefaultName, const QLocale &amp;<db:emphasis>locale</db:emphasis> = QLocale()) const</db:title>
<db:para>Returns the localized time zone display name for the given <db:code role="parameter">timeType</db:code> and <db:code role="parameter">nameType</db:code> in the given <db:code role="parameter">locale</db:code>. The <db:code role="parameter">nameType</db:code> and <db:code role="parameter">locale</db:code> requested may not be supported on all platforms, in which case the best available option will be returned.</db:para>
<db:para>If the <db:code role="parameter">locale</db:code> is not provided then the application default locale will be used.</db:para>
<db:para>Where the time zone display names have changed over time then the most recent names will be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayName-1">
<db:title>QString QTimeZone::displayName(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>, QTimeZone::NameType <db:emphasis>nameType</db:emphasis> = QTimeZone::DefaultName, const QLocale &amp;<db:emphasis>locale</db:emphasis> = QLocale()) const</db:title>
<db:para>Returns the localized time zone display name at the given <db:code role="parameter">atDateTime</db:code> for the given <db:code role="parameter">nameType</db:code> in the given <db:code role="parameter">locale</db:code>. The <db:code role="parameter">nameType</db:code> and <db:code role="parameter">locale</db:code> requested may not be supported on all platforms, in which case the best available option will be returned.</db:para>
<db:para>If the <db:code role="parameter">locale</db:code> is not provided then the application default locale will be used.</db:para>
<db:para>The display name may change depending on DST or historical events.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasDaylightTime">
<db:title>bool QTimeZone::hasDaylightTime() const</db:title>
<db:para>Returns true if the time zone has practiced daylight-saving at any time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isDaylightTime">isDaylightTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasTransitions">
<db:title>bool QTimeZone::hasTransitions() const</db:title>
<db:para>Returns true if the system backend supports obtaining transitions.</db:para>
<db:para>Transitions are changes in the time-zone: these happen when DST turns on or off and when authorities alter the offsets for the time-zone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ianaIdToWindowsId">
<db:title>[static] QByteArray QTimeZone::ianaIdToWindowsId(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Returns the Windows ID equivalent to the given <db:code role="parameter">ianaId</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>QByteArray QTimeZone::id() const</db:title>
<db:para>Returns the IANA ID for the time zone.</db:para>
<db:para>IANA IDs are used on all platforms. On Windows these are translated from the Windows ID into the closest IANA ID for the time zone and country.</db:para>
</db:section>
<db:section xml:id="isDaylightTime">
<db:title>bool QTimeZone::isDaylightTime(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns true if daylight-saving was in effect at the given <db:code role="parameter">atDateTime</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasDaylightTime">hasDaylightTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTimeZoneIdAvailable">
<db:title>[static] bool QTimeZone::isTimeZoneIdAvailable(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Returns true if a given time zone <db:code role="parameter">ianaId</db:code> is available on this system.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTimeZone::isValid() const</db:title>
<db:para>Returns true if this time zone is valid.</db:para>
</db:section>
<db:section xml:id="nextTransition">
<db:title>QTimeZone::OffsetData QTimeZone::nextTransition(const QDateTime &amp;<db:emphasis>afterDateTime</db:emphasis>) const</db:title>
<db:para>Returns the first time zone Transition after the given <db:code role="parameter">afterDateTime</db:code>. This is most useful when you have a Transition time and wish to find the Transition after it.</db:para>
<db:para>If there is no transition after the given <db:code role="parameter">afterDateTime</db:code> then an invalid <db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link> will be returned with an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>The given <db:code role="parameter">afterDateTime</db:code> is exclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetData">
<db:title>QTimeZone::OffsetData QTimeZone::offsetData(const QDateTime &amp;<db:emphasis>forDateTime</db:emphasis>) const</db:title>
<db:para>Returns the effective offset details at the given <db:code role="parameter">forDateTime</db:code>. This is the equivalent of calling <db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>(), <db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>(), etc individually but is more efficient.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetFromUtc">
<db:title>int QTimeZone::offsetFromUtc(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the total effective offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to UTC to obtain the local time. This includes any DST offset that may be in effect, i.e. it is the sum of <db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>() and <db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>() for the given datetime.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the standard time offset is +3600 seconds and the DST offset is +3600 seconds. During standard time offsetFromUtc() will return +3600 (UTC+01:00), and during DST it will return +7200 (UTC+02:00).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousTransition">
<db:title>QTimeZone::OffsetData QTimeZone::previousTransition(const QDateTime &amp;<db:emphasis>beforeDateTime</db:emphasis>) const</db:title>
<db:para>Returns the first time zone Transition before the given <db:code role="parameter">beforeDateTime</db:code>. This is most useful when you have a Transition time and wish to find the Transition before it.</db:para>
<db:para>If there is no transition before the given <db:code role="parameter">beforeDateTime</db:code> then an invalid <db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link> will be returned with an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:para>The given <db:code role="parameter">beforeDateTime</db:code> is exclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardTimeOffset">
<db:title>int QTimeZone::standardTimeOffset(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the standard time offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to UTC to obtain the local Standard Time. This excludes any DST offset that may be in effect.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the standard time offset is +3600 seconds. During both standard and DST <db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>() will return +3600 (UTC+01:00).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QTimeZone::swap(QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this time zone instance with <db:code role="parameter">other</db:code>. This function is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="systemTimeZone">
<db:title>[static, since 5.5] QTimeZone QTimeZone::systemTimeZone()</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object that refers to the local system time, as specified by <db:link xlink:href="qtimezone.xml#systemTimeZoneId">systemTimeZoneId</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#utc">utc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="systemTimeZoneId">
<db:title>[static] QByteArray QTimeZone::systemTimeZoneId()</db:title>
<db:para>Returns the current system time zone IANA ID.</db:para>
<db:para>On Windows this ID is translated from the Windows ID using an internal translation table and the user's selected country. As a consequence there is a small chance any Windows install may have IDs not known by Qt, in which case &quot;UTC&quot; will be returned.</db:para>
</db:section>
<db:section xml:id="transitions">
<db:title>QTimeZone::OffsetDataList QTimeZone::transitions(const QDateTime &amp;<db:emphasis>fromDateTime</db:emphasis>, const QDateTime &amp;<db:emphasis>toDateTime</db:emphasis>) const</db:title>
<db:para>Returns a list of all time zone transitions between the given datetimes.</db:para>
<db:para>The given <db:code role="parameter">fromDateTime</db:code> and <db:code role="parameter">toDateTime</db:code> are inclusive.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="utc">
<db:title>[static, since 5.5] QTimeZone QTimeZone::utc()</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object that refers to UTC (Universal Time Coordinated).</db:para>
<db:para>This function was introduced in Qt 5.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToDefaultIanaId">
<db:title>[static] QByteArray QTimeZone::windowsIdToDefaultIanaId(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>)</db:title>
<db:para>Returns the default IANA ID for a given <db:code role="parameter">windowsId</db:code>.</db:para>
<db:para>Because a Windows ID can cover several IANA IDs in several different countries, this function returns the most frequently used IANA ID with no regard for the country and should thus be used with care. It is usually best to request the default for a specific country.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToDefaultIanaId-1">
<db:title>[static] QByteArray QTimeZone::windowsIdToDefaultIanaId(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>, QLocale::Country <db:emphasis>country</db:emphasis>)</db:title>
<db:para>Returns the default IANA ID for a given <db:code role="parameter">windowsId</db:code> and <db:code role="parameter">country</db:code>.</db:para>
<db:para>Because a Windows ID can cover several IANA IDs within a given country, the most frequently used IANA ID in that country is returned.</db:para>
<db:para>As a special case, <db:link xlink:href="qlocale.xml#Country-enum">QLocale::AnyCountry</db:link> returns the default of those IANA IDs that do not have any specific country.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToIanaIds">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::windowsIdToIanaIds(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>)</db:title>
<db:para>Returns all the IANA IDs for a given <db:code role="parameter">windowsId</db:code>.</db:para>
<db:para>The returned list is sorted alphabetically.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToIanaIds-1">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::windowsIdToIanaIds(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>, QLocale::Country <db:emphasis>country</db:emphasis>)</db:title>
<db:para>Returns all the IANA IDs for a given <db:code role="parameter">windowsId</db:code> and <db:code role="parameter">country</db:code>.</db:para>
<db:para>As a special case <db:link xlink:href="qlocale.xml#Country-enum">QLocale::AnyCountry</db:link> returns those IANA IDs that do not have any specific country.</db:para>
<db:para>The returned list is in order of frequency of usage, i.e. larger zones within a country are listed first.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QTimeZone::operator!=(const QTimeZone &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this time zone is not equal to the <db:code role="parameter">other</db:code> time zone.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QTimeZone &amp;QTimeZone::operator=(QTimeZone &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instance, transferring the ownership of the managed pointer to this instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QTimeZone &amp;QTimeZone::operator=(const QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assignment operator, assign <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QTimeZone::operator==(const QTimeZone &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns true if this time zone is equal to the <db:code role="parameter">other</db:code> time zone.</db:para>
</db:section>
</db:section>
</db:article>
