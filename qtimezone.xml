<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTimeZone Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> identifies how a time representation relates to UTC.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="">thread-safe</db:link>.</db:para>
</db:note>
<db:para>This class is <db:emphasis>equality-comparable</db:emphasis>.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTimeZone</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>When dates and times are combined, the meaning of the result depends on how time is being represented. There are various international standards for representing time; one of these, UTC, corresponds to the traditional standard of solar mean time at Greenwich (a.k.a. GMT). All other time systems supported by Qt are ultimately specified in relation to UTC. An instance of this class provides a stateless calculator for conversions between UTC and other time representations.</db:para>
<db:para>Some time representations are simply defined at a fixed offset to UTC. Others are defined by governments for use within their jurisdictions. The latter are properly known as time zones, but <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> (since Qt 6.5) is unifies their representation with that of general time systems. One time zone generally supported on most operating systems is designated local time; this is presumed to correspond to the time zone within which the user is living.</db:para>
<db:para>For time zones other than local time, UTC and those at fixed offsets from UTC, Qt can only provide support when the operating system provides some way to access that information. When Qt is built, the timezone feature controls whether such information is available. When it is not, some constructors and methods of <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> are excluded from its API; these are documented as depending on feature timezone. Note that, even when Qt is built with this feature enabled, it may be unavailable to users whose systems are misconfigured, or where some standard packages (for example, the tzdata package on Linux) are not installed. This feature is enabled by default when time zone information is available.</db:para>
<db:para>This class is primarily designed for use in <db:link xlink:href="qdatetime.xml">QDateTime</db:link>; most applications will not need to access this class directly and should instead use an instance of it when constructing a <db:link xlink:href="qdatetime.xml">QDateTime</db:link>.</db:para>
<db:note>
<db:para>For consistency with <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> does not account for leap seconds.</db:para>
</db:note>
<db:section xml:id="remarks">
<db:title>Remarks</db:title>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link>, like <db:link xlink:href="qdatetime.xml">QDateTime</db:link>, measures offsets from UTC in seconds. This contrasts with their measurement of time generally, which they do in milliseconds. Real-world time zones generally have UTC offsets that are whole-number multiples of five minutes (300 seconds), at least since well before 1970. A positive offset from UTC gives a time representation puts noon on any given day before UTC noon on that day; a negative offset puts noon after UTC noon on the same day.</db:para>
<db:section xml:id="lightweight-time-representations">
<db:title>Lightweight Time Representations</db:title>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> can represent UTC, local time and fixed offsets from UTC even when feature timezone is disabled. The form in which it does so is also available when the feature is enabled; it is a more lightweight form and processing using it will typically be more efficient, unless methods only available when feature timezone is enabled are being exercised. See <db:link xlink:href="qtimezone.xml#Initialization-enum">Initialization</db:link> and <db:link xlink:href="qtimezone.xml#fromSecondsAheadOfUtc">QTimeZone::fromSecondsAheadOfUtc</db:link>(int) for how to construct these representations.</db:para>
<db:para>This documentation distinguishes between &quot;time zone&quot;, used to describe a time representation described by system-supplied or standard information, and time representations more generally, which include these lightweight forms. The methods available only when feature timezone is enabled are apt to be cheaper for time zones than for lightweight time representations, for which these methods may construct a suitable transient time zone object to which to forward the query.</db:para>
</db:section>
<db:section xml:id="iana-time-zone-ids">
<db:title>IANA Time Zone IDs</db:title>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> uses the IANA time zone IDs as defined in the IANA Time Zone Database (http://www.iana.org/time-zones). This is to ensure a standard ID across all supported platforms. Most platforms support the IANA IDs and the IANA Database natively, but for Windows a mapping is required to the native IDs. See below for more details.</db:para>
<db:para>The IANA IDs can and do change on a regular basis, and can vary depending on how recently the host system data was updated. As such you cannot rely on any given ID existing on any host system. You must use <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>() to determine what IANA IDs are available.</db:para>
<db:para>The IANA IDs and database are also know as the Olson IDs and database, named after the original compiler of the database.</db:para>
</db:section>
<db:section xml:id="utc-offset-time-zones">
<db:title>UTC Offset Time Zones</db:title>
<db:para>A default UTC time zone backend is provided which is always available when feature timezone is enabled. This provides a set of generic Offset From UTC time zones in the range UTC-16:00 to UTC+16:00. These time zones can be created using either the standard ISO format names, such as &quot;UTC+00:00&quot;, as listed by <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>(), or using a name of similar form in combination with the number of offset seconds.</db:para>
</db:section>
<db:section xml:id="windows-time-zones">
<db:title>Windows Time Zones</db:title>
<db:para>Windows native time zone support is severely limited compared to the standard IANA TZ Database. Windows time zones cover larger geographic areas and are thus less accurate in their conversions. They also do not support as much historical data and so may only be accurate for the current year. In particular, when MS's zone data claims that DST was observed prior to 1900 (this is historically known to be untrue), the claim is ignored and the standard time (allegedly) in force in 1900 is taken to have always been in effect.</db:para>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> uses a conversion table derived from the Unicode CLDR data to map between IANA IDs and Windows IDs. Depending on your version of Windows and Qt, this table may not be able to provide a valid conversion, in which &quot;UTC&quot; will be returned.</db:para>
<db:para><db:link xlink:href="qtimezone.xml">QTimeZone</db:link> provides a public API to use this conversion table. The Windows ID used is the Windows Registry Key for the time zone which is also the MS Exchange EWS ID as well, but is different to the Time Zone Name (TZID) and COD code used by MS Exchange in versions before 2007.</db:para>
<db:note>
<db:para>When Qt is built with the ICU library, it is used in preference to the Windows system APIs, bypassing all problems with those APIs using different names.</db:para>
</db:note>
</db:section>
<db:section xml:id="system-time-zone">
<db:title>System Time Zone</db:title>
<db:para>The method <db:link xlink:href="qtimezone.xml#systemTimeZoneId">systemTimeZoneId</db:link>() returns the current system IANA time zone ID which on Unix-like systems will always be correct. On Windows this ID is translated from the Windows system ID using an internal translation table and the user's selected country. As a consequence there is a small chance any Windows install may have IDs not known by Qt, in which case &quot;UTC&quot; will be returned.</db:para>
<db:para>Creating a new <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instance using the system time zone ID will only produce a fixed named copy of the time zone, it will not change if the system time zone changes. <db:link xlink:href="qtimezone.xml#systemTimeZone">QTimeZone::systemTimeZone</db:link>() will return an instance representing the zone named by this system ID. Note that constructing a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> using this system zone may behave differently than constructing a <db:link xlink:href="qdatetime.xml">QDateTime</db:link> that uses <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> as its <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link>, as the latter directly uses system APIs for accessing local time information, which may behave differently (and, in particular, might adapt if the user adjusts the system zone setting).</db:para>
</db:section>
<db:section xml:id="time-zone-offsets">
<db:title>Time Zone Offsets</db:title>
<db:para>The difference between UTC and the local time in a time zone is expressed as an offset in seconds from UTC, i.e. the number of seconds to add to UTC to obtain the local time. The total offset is comprised of two component parts, the standard time offset and the daylight-saving time offset. The standard time offset is the number of seconds to add to UTC to obtain standard time in the time zone. The daylight-saving time offset is the number of seconds to add to the standard time offset to obtain daylight-saving time (abbreviated DST and sometimes called &quot;daylight time&quot; or &quot;summer time&quot;) in the time zone. The usual case for DST (using standard time in winter, DST in summer) has a positive daylight-saving time offset. However, some zones have negative DST offsets, used in winter, with summer using standard time.</db:para>
<db:para>Note that the standard and DST offsets for a time zone may change over time as countries have changed DST laws or even their standard time offset.</db:para>
</db:section>
<db:section xml:id="license">
<db:title>License</db:title>
<db:para>This class includes data obtained from the CLDR data files under the terms of the Unicode Data Files and Software License. See <db:link xlink:href="qtcore-attribution-unicode-cldr.xml#unicode-cldr">Unicode Common Locale Data Repository (CLDR)</db:link> for details.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdatetime.xml">QDateTime</db:link></db:member>
<db:member><db:link xlink:href="qcalendar.xml">QCalendar</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Initialization-enum">
<db:title>[since 6.5] enum QTimeZone::Initialization</db:title>
<db:para>The type of the simplest lightweight time representations.</db:para>
<db:para>This enumeration identifies a type of lightweight time representation to pass to a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> constructor, where no further data are required. They correspond to the like-named members of <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link>.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::LocalTime</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>This time representation corresponds to the one implicitly used by system functions using time_t and struct tm value to map between local time and UTC time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::UTC</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>This time representation, Coordinated Universal Time, is the base representation to which civil time is referred in all supported time representations. It is defined by the International Telecommunication Union.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This enum was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="NameType-enum">
<db:title>enum QTimeZone::NameType</db:title>
<db:para>The type of time zone name.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::DefaultName</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The default form of the time zone name, one of LongName, ShortName or OffsetName</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::LongName</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The long form of the time zone name, e.g. &quot;Central European Time&quot;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::ShortName</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The short form of the time zone name, usually an abbreviation, e.g. &quot;CET&quot;, in locales that have one for the zone, otherwise a compact GMT-offset form, e.g. &quot;GMT+1&quot;</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::OffsetName</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>The standard ISO offset form of the time zone name, e.g. &quot;UTC+01:00&quot;</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This type is only available when feature timezone is enabled.</db:para>
</db:section>
<db:section xml:id="OffsetDataList-typedef">
<db:title>QTimeZone::OffsetDataList</db:title>
<db:para>Synonym for <db:link xlink:href="qlist.xml">QList</db:link>&lt;<db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link>&gt;.</db:para>
<db:para>This type is only available when feature timezone is enabled.</db:para>
</db:section>
<db:section xml:id="TimeType-enum">
<db:title>enum QTimeZone::TimeType</db:title>
<db:para>The type of time zone time, for example when requesting the name. In time zones that do not apply DST, all three values may return the same result.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::StandardTime</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The standard time in a time zone, i.e. when Daylight-Saving is not in effect. For example when formatting a display name this will show something like &quot;Pacific Standard Time&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::DaylightTime</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A time when Daylight-Saving is in effect. For example when formatting a display name this will show something like &quot;Pacific daylight-saving time&quot;.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qtimezone.xml">QTimeZone</db:link></db:emphasis>::GenericTime</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>A time which is not specifically Standard or Daylight-Saving time, either an unknown time or a neutral form. For example when formatting a display name this will show something like &quot;Pacific Time&quot;.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>This type is only available when feature timezone is enabled.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="fromDurationAheadOfUtc">
<db:title>[static, since 6.5] QTimeZone QTimeZone::fromDurationAheadOfUtc(std::chrono::seconds <db:emphasis>offset</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="fromSecondsAheadOfUtc">[static, since 6.5] QTimeZone QTimeZone::fromSecondsAheadOfUtc(int <db:emphasis>offset</db:emphasis>)</db:bridgehead>
<db:para>Returns a time representation at a fixed <db:code role="parameter">offset</db:code>, in seconds, ahead of UTC.</db:para>
<db:para>The <db:code role="parameter">offset</db:code> from UTC must be in the range -16 hours to +16 hours otherwise an invalid time zone will be returned. The returned <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> is a lightweight time representation, not a time zone (backed by system-supplied or standard data).</db:para>
<db:para>If the offset is 0, the <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() of the returned instance will be <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>. Otherwise, if <db:code role="parameter">offset</db:code> is valid, <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>. An invalid time zone, when returned, has <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link> as its <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>().</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#QTimeZone-5">QTimeZone</db:link>(int)</db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#fixedSecondsAheadOfUtc">fixedSecondsAheadOfUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#MinUtcOffsetSecs-var">MinUtcOffsetSecs</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#MaxUtcOffsetSecs-var">MaxUtcOffsetSecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone">
<db:title>[noexcept] QTimeZone::QTimeZone()</db:title>
<db:para>Create a null/invalid time zone instance.</db:para>
</db:section>
<db:section xml:id="QTimeZone-2">
<db:title>[noexcept, since 6.5] QTimeZone::QTimeZone(QTimeZone::Initialization <db:emphasis>spec</db:emphasis>)</db:title>
<db:para>Creates a lightweight instance describing UTC or local time.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#fromSecondsAheadOfUtc">fromSecondsAheadOfUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#utc">utc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone-3">
<db:title>[explicit] QTimeZone::QTimeZone(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Creates a time zone instance with the requested IANA ID <db:code role="parameter">ianaId</db:code>.</db:para>
<db:para>The ID must be one of the available system IDs or a valid UTC-with-offset ID, otherwise an invalid time zone will be returned. For UTC-with-offset IDs, when they are not in fact IANA IDs, the id() of the resulting instance may differ from the ID passed to the constructor.</db:para>
<db:para>This constructor is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#id">id</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone-5">
<db:title>[explicit] QTimeZone::QTimeZone(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Creates a time zone instance with the given offset, <db:code role="parameter">offsetSeconds</db:code>, from UTC.</db:para>
<db:para>The <db:code role="parameter">offsetSeconds</db:code> from UTC must be in the range -16 hours to +16 hours otherwise an invalid time zone will be returned.</db:para>
<db:para>This constructor is only available when feature timezone is enabled. The returned instance is equivalent to the lightweight time representation QTimeZone::fromSecondsAheadOfUtc(offsetSeconds), albeit implemented as a time zone.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#MinUtcOffsetSecs-var">MinUtcOffsetSecs</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#MaxUtcOffsetSecs-var">MaxUtcOffsetSecs</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#id">id</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone-6">
<db:title>QTimeZone::QTimeZone(const QByteArray &amp;<db:emphasis>zoneId</db:emphasis>, int <db:emphasis>offsetSeconds</db:emphasis>, const QString &amp;<db:emphasis>name</db:emphasis>, const QString &amp;<db:emphasis>abbreviation</db:emphasis>, QLocale::Territory <db:emphasis>territory</db:emphasis> = QLocale::AnyTerritory, const QString &amp;<db:emphasis>comment</db:emphasis> = QString())</db:title>
<db:para>Creates a custom time zone instance at fixed offset from UTC.</db:para>
<db:para>The returned time zone has an ID of <db:code role="parameter">zoneId</db:code> and an offset from UTC of <db:code role="parameter">offsetSeconds</db:code>. The <db:code role="parameter">name</db:code> will be the name used by <db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>() for the <db:link xlink:href="qtimezone.xml#NameType-enum">LongName</db:link>, the <db:code role="parameter">abbreviation</db:code> will be used by <db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>() for the <db:link xlink:href="qtimezone.xml#NameType-enum">ShortName</db:link> and by <db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>(), and the optional <db:code role="parameter">territory</db:code> will be used by <db:link xlink:href="qtimezone.xml#territory">territory</db:link>(). The <db:code role="parameter">comment</db:code> is an optional note that may be displayed in a GUI to assist users in selecting a time zone.</db:para>
<db:para>The <db:code role="parameter">offsetSeconds</db:code> from UTC must be in the range -16 hours to +16 hours. The <db:code role="parameter">zoneId</db:code> <db:emphasis>must not</db:emphasis> be an ID for which <db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>() is true, unless it is a UTC-offset name that doesn't appear in <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>().</db:para>
<db:para>If the custom time zone does not have a specific territory then set it to the default value of <db:link xlink:href="qlocale.xml#Country-enum">QLocale::AnyTerritory</db:link>.</db:para>
<db:para>This constructor is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#id">id</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#territory">territory</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#comment">comment</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#MinUtcOffsetSecs-var">MinUtcOffsetSecs</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#MaxUtcOffsetSecs-var">MaxUtcOffsetSecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTimeZone-4">
<db:title>[noexcept] QTimeZone::QTimeZone(const QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Copy constructor: copy <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
<db:section xml:id="QTimeZone-1">
<db:title>[noexcept] QTimeZone::QTimeZone(QTimeZone &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move constructor of this from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QTimeZone">
<db:title>[noexcept] QTimeZone::~QTimeZone()</db:title>
<db:para>Destroys the time zone.</db:para>
</db:section>
<db:section xml:id="abbreviation">
<db:title>QString QTimeZone::abbreviation(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the time zone abbreviation at the given <db:code role="parameter">atDateTime</db:code>.</db:para>
<db:para>The abbreviation may change depending on DST or even historical events.</db:para>
<db:note>
<db:para>The abbreviation is not guaranteed to be unique to this time zone and should not be used in place of the ID or display name. The abbreviation may be localized, depending on the underlying operating system. To get consistent localization, use displayName(atDateTime, QTimeZone::ShortName, locale).</db:para>
</db:note>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#displayName">displayName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="asBackendZone">
<db:title>[since 6.5] QTimeZone QTimeZone::asBackendZone() const</db:title>
<db:para>Converts this <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> to one whose <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>.</db:para>
<db:para>In all cases, the result's <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>. When this <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>'s <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, this <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> itself is returned. If <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> then <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>() is returned.</db:para>
<db:para>If <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link>, <db:link xlink:href="qtimezone.xml#utc">QTimeZone::utc</db:link>() is returned. If it is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link> then <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>(int) is passed its offset and the result is returned.</db:para>
<db:para>When using a lightweight time representation - local time, UTC time or time at a fixed offset from UTC - using methods only supported when feature timezone is enabled may be more expensive than using a corresponding time zone. This method maps a lightweight time representation to a corresponding time zone - that is, an instance based on system-supplied or standard data.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#QTimeZone-2">QTimeZone</db:link>(QTimeZone::Initialization)</db:member>
<db:member><db:link xlink:href="qtimezone.xml#fromSecondsAheadOfUtc">fromSecondsAheadOfUtc</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds()</db:title>
<db:para>Returns a list of all available IANA time zone IDs on this system.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:note>
<db:para>the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> constructor will also accept some UTC-offset IDs that are not in the list returned - it would be impractical to list all possible UTC-offset IDs.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds-1">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds(QLocale::Territory <db:emphasis>territory</db:emphasis>)</db:title>
<db:para>Returns a list of all available IANA time zone IDs for a given <db:code role="parameter">territory</db:code>.</db:para>
<db:para>As a special case, a <db:code role="parameter">territory</db:code> of <db:link xlink:href="qlocale.xml#Country-enum">AnyTerritory</db:link> selects those time zones that have a non-territorial association, such as UTC, while <db:link xlink:href="qlocale.xml#Country-enum">World</db:link> selects those time-zones for which there is a global default IANA ID. If you require a list of all time zone IDs for all territories then use the standard <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>() method.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#territory">territory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableTimeZoneIds-2">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::availableTimeZoneIds(int <db:emphasis>offsetSeconds</db:emphasis>)</db:title>
<db:para>Returns a list of all available IANA time zone IDs with a given standard time offset of <db:code role="parameter">offsetSeconds</db:code>.</db:para>
<db:para>Where the given offset is supported, QTimeZone(offsetSeconds).id() is included in the list, even if it is not an IANA ID. This only arises when there is no IANA UTC-offset ID with the given offset.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isTimeZoneIdAvailable">isTimeZoneIdAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#QTimeZone-5">QTimeZone</db:link>(int)</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>QString QTimeZone::comment() const</db:title>
<db:para>Returns any comment for the time zone.</db:para>
<db:para>A comment may be provided by the host platform to assist users in choosing the correct time zone. Depending on the platform this may not be localized.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
</db:section>
<db:section xml:id="daylightTimeOffset">
<db:title>int QTimeZone::daylightTimeOffset(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the daylight-saving time offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to the standard time offset to obtain the local daylight-saving time.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the DST offset is +3600 seconds. During standard time daylightTimeOffset() will return 0, and when daylight-saving is in effect it will return +3600.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayName">
<db:title>QString QTimeZone::displayName(QTimeZone::TimeType <db:emphasis>timeType</db:emphasis>, QTimeZone::NameType <db:emphasis>nameType</db:emphasis> = QTimeZone::DefaultName, const QLocale &amp;<db:emphasis>locale</db:emphasis> = QLocale()) const</db:title>
<db:para>Returns the localized time zone display name.</db:para>
<db:para>The name returned is the one for the given <db:code role="parameter">locale</db:code>, applicable when the given <db:code role="parameter">timeType</db:code> is in effect and of the form indicated by <db:code role="parameter">nameType</db:code>. Where the time zone display names have changed over time, the current names will be used. If no suitably localized name of the given type is available, another name type may be used, or an empty string may be returned.</db:para>
<db:para>If the <db:code role="parameter">locale</db:code> is not provided, then the application default locale will be used. For custom timezones created by client code, the data supplied to the constructor are used, as no localization data will be available for it. If this timezone is invalid, an empty string is returned. This may also arise for the representation of local time if determining the system time zone fails.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="displayName-1">
<db:title>QString QTimeZone::displayName(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>, QTimeZone::NameType <db:emphasis>nameType</db:emphasis> = QTimeZone::DefaultName, const QLocale &amp;<db:emphasis>locale</db:emphasis> = QLocale()) const</db:title>
<db:para>Returns the localized time zone display name.</db:para>
<db:para>The name returned is the one for the given <db:code role="parameter">locale</db:code>, applicable at the given <db:code role="parameter">atDateTime</db:code>, and of the form indicated by <db:code role="parameter">nameType</db:code>. The display name may change depending on DST or historical events. If no suitably localized name of the given type is available, another name type may be used, or an empty string may be returned.</db:para>
<db:para>If the <db:code role="parameter">locale</db:code> is not provided, then the application default locale will be used. For custom timezones created by client code, the data supplied to the constructor are used, as no localization data will be available for it. If this timezone is invalid, an empty string is returned. This may also arise for the representation of local time if determining the system time zone fails.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fixedSecondsAheadOfUtc">
<db:title>[constexpr noexcept, since 6.5] int QTimeZone::fixedSecondsAheadOfUtc() const</db:title>
<db:para>For a lightweight time representation whose <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>, this returns the fixed offset from UTC that it describes. For any other time representation it returns 0, even if that time representation does have a constant offset from UTC.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="fromCFTimeZone">
<db:title>[static] QTimeZone QTimeZone::fromCFTimeZone(CFTimeZoneRef <db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> containing a copy of the CFTimeZone <db:code role="parameter">timeZone</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#toCFTimeZone">toCFTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromNSTimeZone">
<db:title>[static] QTimeZone QTimeZone::fromNSTimeZone(const NSTimeZone *<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Constructs a new <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> containing a copy of the NSTimeZone <db:code role="parameter">timeZone</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#toNSTimeZone">toNSTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fromStdTimeZonePtr">
<db:title>[static, since 6.4] QTimeZone QTimeZone::fromStdTimeZonePtr(const int *<db:emphasis>timeZone</db:emphasis>)</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object representing the same time zone as <db:code role="parameter">timeZone</db:code>. The IANA ID of <db:code role="parameter">timeZone</db:code> must be one of the available system IDs, otherwise an invalid time zone will be returned.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:para>This function was introduced in Qt 6.4.</db:para>
</db:section>
<db:section xml:id="hasAlternativeName">
<db:title>[since 6.8] bool QTimeZone::hasAlternativeName(QByteArrayView <db:emphasis>alias</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">alias</db:code> is an alternative name for this timezone.</db:para>
<db:para>The IANA (formerly Olson) database has renamed some zones during its history. There are also some zones that only differed prior to 1970 but are now treated as synonymous. Some backends may have data reaching to before 1970 and produce distinct zones in the latter case. Others may produce zones indistinguishable except by <db:link xlink:href="qtimezone.xml#id">id</db:link>(). This method determines whether an ID refers (at least since 1970) to the same zone that this timezone object describes.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:para>This function was introduced in Qt 6.8.</db:para>
</db:section>
<db:section xml:id="hasDaylightTime">
<db:title>bool QTimeZone::hasDaylightTime() const</db:title>
<db:para>Returns true if the time zone has practiced daylight-saving at any time.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#isDaylightTime">isDaylightTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasTransitions">
<db:title>bool QTimeZone::hasTransitions() const</db:title>
<db:para>Returns true if the system backend supports obtaining transitions.</db:para>
<db:para>Transitions are changes in the time-zone: these happen when DST turns on or off and when authorities alter the offsets for the time-zone.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ianaIdToWindowsId">
<db:title>[static] QByteArray QTimeZone::ianaIdToWindowsId(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Returns the Windows ID equivalent to the given <db:code role="parameter">ianaId</db:code>.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="id">
<db:title>QByteArray QTimeZone::id() const</db:title>
<db:para>Returns the IANA ID for the time zone.</db:para>
<db:para>IANA IDs are used on all platforms. On Windows these are translated from the Windows ID into the best match IANA ID for the time zone and territory.</db:para>
<db:para>If this timezone instance was not constructed from an IANA ID, its ID is determined by how it was constructed. In most cases, the ID passed when constructing the instance is used. (The constructor for a custom zone uses the ID it is passed, which must not be an IANA ID.) There are two exceptions.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Instances constructed by passing only a UTC offset in seconds have no ID passed when constructing.</db:para>
</db:listitem>
<db:listitem>
<db:para>The constructor taking only an IANA ID will also accept some UTC-offset IDs that are not in fact IANA IDs: its handling of these is equivalent to passing the corresponding offset in seconds, as for the first exception.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In the two exceptional cases, if there is an IANA UTC-offset zone with the specified offset, the instance constructed uses that IANA zone's ID, even though this may differ from the (non-IANA) UTC-offset ID passed to the constructor. Otherwise, the instance uses an ID synthesized from its offset, with the form UTC±hh:mm:ss, omitting any trailing :00 for zero seconds or minutes. Again, this may differ from the UTC-offset ID passed to the constructor.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
</db:section>
<db:section xml:id="isDaylightTime">
<db:title>bool QTimeZone::isDaylightTime(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns true if daylight-saving was in effect at the given <db:code role="parameter">atDateTime</db:code>.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasDaylightTime">hasDaylightTime</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isTimeZoneIdAvailable">
<db:title>[static] bool QTimeZone::isTimeZoneIdAvailable(const QByteArray &amp;<db:emphasis>ianaId</db:emphasis>)</db:title>
<db:para>Returns true if a given time zone <db:code role="parameter">ianaId</db:code> is available on this system.</db:para>
<db:para>This may include some non-IANA IDs, notably UTC-offset IDs, that are not listed in <db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>().</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#availableTimeZoneIds">availableTimeZoneIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUtcOrFixedOffset">
<db:title>[constexpr noexcept, since 6.5] bool QTimeZone::isUtcOrFixedOffset() const</db:title>
<db:para>Returns true if <db:link xlink:href="qtimezone.xml#timeSpec">timeSpec</db:link>() is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>.</db:para>
<db:para>When it is true, the time description does not change over time, such as having seasonal daylight-saving changes, as may happen for local time or a time zone. Knowing this may save the calling code to need for various other checks.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="isUtcOrFixedOffset-1">
<db:title>[static constexpr noexcept, since 6.5] bool QTimeZone::isUtcOrFixedOffset(Qt::TimeSpec <db:emphasis>spec</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">spec</db:code> is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::UTC</db:link> or <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::OffsetFromUTC</db:link>.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTimeZone::isValid() const</db:title>
<db:para>Returns true if this time zone is valid.</db:para>
</db:section>
<db:section xml:id="nextTransition">
<db:title>QTimeZone::OffsetData QTimeZone::nextTransition(const QDateTime &amp;<db:emphasis>afterDateTime</db:emphasis>) const</db:title>
<db:para>Returns the first time zone Transition after the given <db:code role="parameter">afterDateTime</db:code>. This is most useful when you have a Transition time and wish to find the Transition after it.</db:para>
<db:para>If there is no transition after the given <db:code role="parameter">afterDateTime</db:code> then an invalid <db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link> will be returned with an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> as its atUtc.</db:para>
<db:para>The given <db:code role="parameter">afterDateTime</db:code> is exclusive.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetData">
<db:title>QTimeZone::OffsetData QTimeZone::offsetData(const QDateTime &amp;<db:emphasis>forDateTime</db:emphasis>) const</db:title>
<db:para>Returns the effective offset details at the given <db:code role="parameter">forDateTime</db:code>.</db:para>
<db:para>This is the equivalent of calling <db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>() and all three offset functions individually but may be more efficient and may get a different localization for the abbreviation. If this data is not available for the given datetime, an invalid <db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link> will be returned with an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> as its atUtc.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#abbreviation">abbreviation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offsetFromUtc">
<db:title>int QTimeZone::offsetFromUtc(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the total effective offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to UTC to obtain the local time. This includes any DST offset that may be in effect, i.e. it is the sum of <db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>() and <db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>() for the given datetime.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the standard time offset is +3600 seconds and the DST offset is +3600 seconds. During standard time offsetFromUtc() will return +3600 (UTC+01:00), and during DST it will return +7200 (UTC+02:00).</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#standardTimeOffset">standardTimeOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="previousTransition">
<db:title>QTimeZone::OffsetData QTimeZone::previousTransition(const QDateTime &amp;<db:emphasis>beforeDateTime</db:emphasis>) const</db:title>
<db:para>Returns the first time zone Transition before the given <db:code role="parameter">beforeDateTime</db:code>. This is most useful when you have a Transition time and wish to find the Transition before it.</db:para>
<db:para>If there is no transition before the given <db:code role="parameter">beforeDateTime</db:code> then an invalid <db:link xlink:href="qtimezone-offsetdata.xml">OffsetData</db:link> will be returned with an invalid <db:link xlink:href="qdatetime.xml">QDateTime</db:link> as its atUtc.</db:para>
<db:para>The given <db:code role="parameter">beforeDateTime</db:code> is exclusive.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#transitions">transitions</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="standardTimeOffset">
<db:title>int QTimeZone::standardTimeOffset(const QDateTime &amp;<db:emphasis>atDateTime</db:emphasis>) const</db:title>
<db:para>Returns the standard time offset at the given <db:code role="parameter">atDateTime</db:code>, i.e. the number of seconds to add to UTC to obtain the local Standard Time. This excludes any DST offset that may be in effect.</db:para>
<db:para>For example, for the time zone &quot;Europe/Berlin&quot; the standard time offset is +3600 seconds. During both standard and DST <db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>() will return +3600 (UTC+01:00).</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#offsetFromUtc">offsetFromUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#daylightTimeOffset">daylightTimeOffset</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QTimeZone::swap(QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this time zone instance with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="systemTimeZone">
<db:title>[static] QTimeZone QTimeZone::systemTimeZone()</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object that describes local system time.</db:para>
<db:para>This method is only available when feature timezone is enabled. The returned instance is usually equivalent to the lightweight time representation QTimeZone(QTimeZone::LocalTime), albeit implemented as a time zone.</db:para>
<db:para>The returned object will not change to reflect any subsequent change to the system time zone. It represents the local time that was in effect when <db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>() was called. On misconfigured systems, such as those that lack the timezone data relied on by the backend for which Qt was compiled, it may be invalid. In such a case, a warning is output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#utc">utc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#Initialization-enum">Initialization</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#systemTimeZoneId">systemTimeZoneId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="systemTimeZoneId">
<db:title>[static] QByteArray QTimeZone::systemTimeZoneId()</db:title>
<db:para>Returns the current system time zone IANA ID.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>().<db:link xlink:href="qtimezone.xml#id">id</db:link>(), but may bypass some computation to obtain it. Constructing a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> from the returned byte array will produce the same result as <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>().</db:para>
<db:para>If the backend is unable to determine the correct system zone, the result is empty. In this case, <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>().<db:link xlink:href="qtimezone.xml#isValid">isValid</db:link>() is false and a warning is output if either this method of <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>() is called.</db:para>
<db:para>If the backend is able to determine the correct system zone but not its name, an empty byte array is returned. For example, on Windows, the system native ID is converted to an IANA ID - if the system ID isn't known to the internal translation code, the result shall be empty. In this case, <db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>().<db:link xlink:href="qtimezone.xml#isValid">isValid</db:link>() shall be true.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:note>
<db:para>Prior to Qt 6.7, when the result could not be determined, the misleading result &quot;UTC&quot; was returned.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="territory">
<db:title>[since 6.2] QLocale::Territory QTimeZone::territory() const</db:title>
<db:para>Returns the territory for the time zone.</db:para>
<db:para>A return of <db:link xlink:href="qlocale.xml#Country-enum">AnyTerritory</db:link> means the zone has no known territorial association. In some cases this may be because the zone has no associated territory - for example, UTC - or because the zone is used in several territories - for example, CET. In other cases, the <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> backend may not know which territory the zone is associated with - for example, because it is not the primary zone of the territory in which it is used.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:para>This function was introduced in Qt 6.2.</db:para>
</db:section>
<db:section xml:id="timeSpec">
<db:title>[constexpr noexcept, since 6.5] Qt::TimeSpec QTimeZone::timeSpec() const</db:title>
<db:para>Returns a <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> identifying the type of time representation.</db:para>
<db:para>If the result is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeZone</db:link>, this time description is a time zone (backed by system-supplied or standard data); otherwise, it is a lightweight time representation. If the result is <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::LocalTime</db:link> it describes local time: see <db:link xlink:href="qt.xml#TimeSpec-enum">Qt::TimeSpec</db:link> for details.</db:para>
<db:para>This function was introduced in Qt 6.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#fixedSecondsAheadOfUtc">fixedSecondsAheadOfUtc</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toCFTimeZone">
<db:title>CFTimeZoneRef QTimeZone::toCFTimeZone() const</db:title>
<db:para>Creates a CFTimeZone from a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>.</db:para>
<db:para>The caller owns the CFTimeZone object and is responsible for releasing it.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#fromCFTimeZone">fromCFTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toNSTimeZone">
<db:title>NSTimeZone *QTimeZone::toNSTimeZone() const</db:title>
<db:para>Creates an NSTimeZone from a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>.</db:para>
<db:para>The NSTimeZone object is autoreleased.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#fromNSTimeZone">fromNSTimeZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transitions">
<db:title>QTimeZone::OffsetDataList QTimeZone::transitions(const QDateTime &amp;<db:emphasis>fromDateTime</db:emphasis>, const QDateTime &amp;<db:emphasis>toDateTime</db:emphasis>) const</db:title>
<db:para>Returns a list of all time zone transitions between the given datetimes.</db:para>
<db:para>The given <db:code role="parameter">fromDateTime</db:code> and <db:code role="parameter">toDateTime</db:code> are inclusive. The atUtc member of each entry describes the moment of the transition, at which the offsets and abbreviation given by other members take effect.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#hasTransitions">hasTransitions</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#nextTransition">nextTransition</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#previousTransition">previousTransition</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="utc">
<db:title>[static] QTimeZone QTimeZone::utc()</db:title>
<db:para>Returns a <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> object that describes UTC as a time zone.</db:para>
<db:para>This method is only available when feature timezone is enabled. It is equivalent to passing 0 to <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>(int offsetSeconds) and to the lightweight time representation <db:link xlink:href="qtimezone.xml">QTimeZone</db:link>(<db:link xlink:href="qtimezone.xml#Initialization-enum">QTimeZone::UTC</db:link>), albeit implemented as a time zone, unlike the latter.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#systemTimeZone">systemTimeZone</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#Initialization-enum">Initialization</db:link></db:member>
<db:member><db:link xlink:href="qtimezone.xml#asBackendZone">asBackendZone</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToDefaultIanaId">
<db:title>[static] QByteArray QTimeZone::windowsIdToDefaultIanaId(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>)</db:title>
<db:para>Returns the default IANA ID for a given <db:code role="parameter">windowsId</db:code>.</db:para>
<db:para>Because a Windows ID can cover several IANA IDs in several different territories, this function returns the most frequently used IANA ID with no regard for the territory and should thus be used with care. It is usually best to request the default for a specific territory.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToDefaultIanaId-1">
<db:title>[static] QByteArray QTimeZone::windowsIdToDefaultIanaId(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>, QLocale::Territory <db:emphasis>territory</db:emphasis>)</db:title>
<db:para>Returns the default IANA ID for a given <db:code role="parameter">windowsId</db:code> and <db:code role="parameter">territory</db:code>.</db:para>
<db:para>Because a Windows ID can cover several IANA IDs within a given territory, the most frequently used IANA ID in that territory is returned.</db:para>
<db:para>As a special case, <db:link xlink:href="qlocale.xml#Country-enum">AnyTerritory</db:link> returns the default of those IANA IDs that have a non-territorial association, while <db:link xlink:href="qlocale.xml#Country-enum">World</db:link> returns the default for the given <db:code role="parameter">windowsId</db:code> in territories that have no specific association with it.</db:para>
<db:para>If the return is empty, there is no IANA ID specific to the given <db:code role="parameter">territory</db:code> for this <db:code role="parameter">windowsId</db:code>. It is reasonable, in this case, to fall back to windowsIdToDefaultIanaId(windowsId).</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToIanaIds">windowsIdToIanaIds</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#territory">territory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToIanaIds">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::windowsIdToIanaIds(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>)</db:title>
<db:para>Returns all the IANA IDs for a given <db:code role="parameter">windowsId</db:code>.</db:para>
<db:para>The returned list is sorted alphabetically.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="windowsIdToIanaIds-1">
<db:title>[static] QList&lt;QByteArray&gt; QTimeZone::windowsIdToIanaIds(const QByteArray &amp;<db:emphasis>windowsId</db:emphasis>, QLocale::Territory <db:emphasis>territory</db:emphasis>)</db:title>
<db:para>Returns all the IANA IDs for a given <db:code role="parameter">windowsId</db:code> and <db:code role="parameter">territory</db:code>.</db:para>
<db:para>As a special case, <db:link xlink:href="qlocale.xml#Country-enum">AnyTerritory</db:link> selects those IANA IDs that have a non-territorial association, while <db:link xlink:href="qlocale.xml#Country-enum">World</db:link> selects the default for the given <db:code role="parameter">windowsId</db:code> in territories that have no specific association with it.</db:para>
<db:para>The returned list is in order of frequency of usage, i.e. larger zones within a territory are listed first.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#ianaIdToWindowsId">ianaIdToWindowsId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#windowsIdToDefaultIanaId">windowsIdToDefaultIanaId</db:link>()</db:member>
<db:member><db:link xlink:href="qtimezone.xml#territory">territory</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QTimeZone &amp;QTimeZone::operator=(QTimeZone &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> instance, transferring the ownership of its data to this instance.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QTimeZone &amp;QTimeZone::operator=(const QTimeZone &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assignment operator, assign <db:code role="parameter">other</db:code> to this.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="MaxUtcOffsetSecs-var">
<db:title>const int QTimeZone::MaxUtcOffsetSecs</db:title>
<db:para>Timezone offsets from UTC are expected to be no higher than this.</db:para>
<db:para>The highest UTC offset of any early 21st century timezone is +14 hours (Christmas Island, Kiribati, Kiritimati), or 14 hours east of Greenwich.</db:para>
<db:para>Historically, before 1867, when Russia sold Alaska to America, Alaska used the same date as Russia, so had offsets over 15 hours east of Greenwich. As Alaska was using local solar mean time, its offsets varied, but all were less than 16 hours east of Greenwich.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#MinUtcOffsetSecs-var">MinUtcOffsetSecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="MinUtcOffsetSecs-var">
<db:title>const int QTimeZone::MinUtcOffsetSecs</db:title>
<db:para>Timezone offsets from UTC are expected to be no lower than this.</db:para>
<db:para>The lowest UTC offset of any early 21st century timezone is -12 hours (Baker Island, USA), or 12 hours west of Greenwich.</db:para>
<db:para>Historically, until 1844, The Philippines (then controlled by Spain) used the same date as Spain's American holdings, so had offsets close to 16 hours west of Greenwich. As The Philippines was using local solar mean time, it is possible some outlying territory of it may have been operating at more than 16 hours west of Greenwich, but no early 21st century timezone traces its history back to such an extreme.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtimezone.xml#MaxUtcOffsetSecs-var">MaxUtcOffsetSecs</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-not-eq">
<db:title>[noexcept] bool operator!=(const QTimeZone &amp;<db:emphasis>lhs</db:emphasis>, const QTimeZone &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> time zone is not equal to the <db:code role="parameter">rhs</db:code> time zone.</db:para>
<db:para>Two representations are different if they are internally described differently, even if they agree in their representation of all moments of time. In particular, a lightweight time representation may coincide with a time zone but the two will not be equal.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>[noexcept] bool operator==(const QTimeZone &amp;<db:emphasis>lhs</db:emphasis>, const QTimeZone &amp;<db:emphasis>rhs</db:emphasis>)</db:title>
<db:para>Returns true if <db:code role="parameter">lhs</db:code> time zone is equal to the <db:code role="parameter">rhs</db:code> time zone.</db:para>
<db:para>Two representations are different if they are internally described differently, even if they agree in their representation of all moments of time. In particular, a lightweight time representation may coincide with a time zone but the two will not be equal.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTimeZone</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtimezone.xml">QTimeZone</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="country">
<db:title>[deprecated in 6.6] QLocale::Country QTimeZone::country() const</db:title>
<db:para>This function is deprecated since 6.6. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qtimezone.xml#territory">territory</db:link>() instead.</db:para>
<db:para>Returns the territory for the time zone.</db:para>
<db:para>This method is only available when feature timezone is enabled.</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
