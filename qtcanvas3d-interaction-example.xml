<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Interaction Example</db:title>
<db:productname>QtCanvas3D</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Canvas 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Interact with an object in canvas using Qt Quick Controls.</db:para>
<db:para>This documentation was introduced in QtCanvas3D 1.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Interaction Example concentrates on the interaction between <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls</db:link> and the objects displayed in Canvas3D. This also demonstrates drawing the same object in three different ways.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/interaction-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="the-controls">
<db:title>The Controls</db:title>
<db:para>First, we need to import Qt Quick Controls and Layouts:</db:para>
<db:programlisting language="qml">import QtQuick.Controls 1.0
import QtQuick.Layouts 1.0
</db:programlisting>
<db:para>Then, we add a <db:link xlink:href="qml-qtquick-layouts-rowlayout.xml">RowLayout</db:link> to the main component to easily add the controls side-by-side:</db:para>
<db:programlisting language="qml">RowLayout {
    id: controlLayout
    spacing: 5
    x: 12
    y: parent.height - 100
    width: parent.width - (2 * x)
    height: 100
    visible: true
</db:programlisting>
<db:para>And then we add three sliders to the layout. Here's the one for controlling x-axis rotation:</db:para>
<db:programlisting language="qml">Slider {
    id: xSlider
    Layout.alignment: Qt.AlignLeft
    Layout.fillWidth: true
    minimumValue: 0;
    maximumValue: 360;
    onValueChanged: canvas3d.xRotSlider = value;
}
</db:programlisting>
</db:section>
<db:section xml:id="interaction">
<db:title>Interaction</db:title>
<db:para>First we need to define some properties in the Canvas3D for the rotations:</db:para>
<db:programlisting language="qml">property double xRotSlider: 0
property double yRotSlider: 0
property double zRotSlider: 0
</db:programlisting>
<db:para>The <db:code>onValueChanged</db:code> signal handlers of the <db:link xlink:href="qml-qtquick-controls2-slider.xml">Slider</db:link> components are connected to the above properties. Here's the connection in x-rotation slider as an example:</db:para>
<db:programlisting language="qml">onValueChanged: canvas3d.xRotSlider = value;
</db:programlisting>
<db:para>Then, on the JavaScript side, we just use the Canvas3D properties directly when setting the modelview matrix rotations:</db:para>
<db:programlisting language="cpp">mvMatrix = mat4.rotate(mvMatrix, mvMatrix, degToRad(canvas.xRotSlider), [1, 0, 0]);
mvMatrix = mat4.rotate(mvMatrix, mvMatrix, degToRad(canvas.yRotSlider), [0, 1, 0]);
mvMatrix = mat4.rotate(mvMatrix, mvMatrix, degToRad(canvas.zRotSlider), [0, 0, 1]);
</db:programlisting>
</db:section>
<db:section xml:id="three-ways-of-drawing">
<db:title>Three Ways of Drawing</db:title>
<db:para>The actual drawing is no different from any situation where the same object is drawn multiple times. Only in this case we use a different drawing mode for each:</db:para>
<db:programlisting language="cpp">gl.drawElements(gl.TRIANGLES, theModel.count, gl.UNSIGNED_SHORT, 0);
...
gl.drawElements(gl.POINTS, theModel.count, gl.UNSIGNED_SHORT, 0);
...
gl.drawElements(gl.LINES, theModel.count, gl.UNSIGNED_SHORT, 0);
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="interaction/interaction.pro">interaction/interaction.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="interaction/interaction.qrc">interaction/interaction.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="interaction/main.cpp">interaction/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="interaction/qml/interaction/interaction.js">interaction/qml/interaction/interaction.js</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="interaction/qml/interaction/main.qml">interaction/qml/interaction/main.qml</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="interaction/qml/interaction/barrel.jpg">interaction/qml/interaction/barrel.jpg</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
