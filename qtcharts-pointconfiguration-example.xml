<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Selected Point Configuration</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to modify the configuration of individual points.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-chartsgallery-example.xml">Charts with Widgets Gallery</db:link> example.</db:para>
</db:note>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_pointconfiguration.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="features-demonstrated">
<db:title>Features Demonstrated</db:title>
<db:para>Here you will learn how to:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Provide click-selection of points in a series.</db:para>
</db:listitem>
<db:listitem>
<db:para>Override the individual configuration of specific points, configuring:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Color</db:para>
</db:listitem>
<db:listitem>
<db:para>Size</db:para>
</db:listitem>
<db:listitem>
<db:para>Visibility of the label</db:para>
</db:listitem>
<db:listitem>
<db:para>Text format of the label</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Qt Creator: Tutorial: Build and run</db:link>.</db:para>
</db:section>
<db:section xml:id="subclass-qmainwindow">
<db:title>Subclass QMainWindow</db:title>
<db:para>We start by creating a subclass of <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link> that will contain the chart and controls. And we provide the boilerplate for the constructor implementation:</db:para>
<db:programlisting language="cpp">PointConfigurationWidget::PointConfigurationWidget(QWidget *parent)
    : ContentWidget(parent)
{
</db:programlisting>
</db:section>
<db:section xml:id="create-a-line-series">
<db:title>Create a Line Series</db:title>
<db:para>Then we create a <db:link xlink:href="qlineseries-qtcharts.xml">QLineSeries</db:link>, giving it a name, making the points visible, and giving it some points to plot.</db:para>
<db:programlisting language="cpp">m_series = new QLineSeries;
m_series-&gt;setPointsVisible(true);
m_series-&gt;append({QPointF(0, 7),  QPointF(2, 4),
                  QPointF(3, 5),  QPointF(7, 4),
                  QPointF(10, 5), QPointF(11, 1),
                  QPointF(13, 3), QPointF(17, 6),
                  QPointF(18, 3), QPointF(20, 2)});
</db:programlisting>
</db:section>
<db:section xml:id="create-the-point-configuration-controls">
<db:title>Create the Point Configuration Controls</db:title>
<db:para>Now we create some controls to configure the color, size, label visibility, and the label itself. We create an associated label for each control so the user knows what the control does.</db:para>
<db:para>For the color and size, we use a <db:link xlink:href="qcombobox.xml">QComboBox</db:link>, populating it with a variety of color and size choices.</db:para>
<db:para>Next we create the final two controls. A Checkbox controls the visibility of the selected point. The other control is a <db:link xlink:href="qlineedit.xml">QLineEdit</db:link> allowing the user to provide a custom label for the point.</db:para>
<db:para>Note that we do not set initial values for any of the controls, as a point will always be selected showing its current settings.</db:para>
<db:programlisting language="cpp">auto selectedPointIndexLabel = new QLabel(tr(&quot;Selected Point: &quot;), this);
m_selectedPointIndexLineEdit = new QLineEdit(this);
m_selectedPointIndexLineEdit-&gt;setReadOnly(true);

auto colorLabel = new QLabel(tr(&quot;Color: &quot;), this);
m_colorCombobox = new QComboBox(this);
QStringList colorStrings = {&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;,
                            &quot;indigo&quot;, &quot;violet&quot;, &quot;black&quot;};
QStringList trColorStrings = {tr(&quot;red&quot;), tr(&quot;orange&quot;), tr(&quot;yellow&quot;),
                              tr(&quot;green&quot;), tr(&quot;blue&quot;), tr(&quot;indigo&quot;),
                              tr(&quot;violet&quot;), tr(&quot;black&quot;)};
for (int i = 0; i &lt; colorStrings.size(); i++)
    m_colorCombobox-&gt;addItem(QIcon(), trColorStrings[i], QColor(colorStrings[i]));

auto sizeLabel = new QLabel(tr(&quot;Size: &quot;), this);
m_sizeCombobox = new QComboBox(this);
for (auto size : { 2, 3, 4, 6, 8, 10, 12, 15 })
    m_sizeCombobox-&gt;addItem(QIcon(), QString::number(size), size);

auto labelVisibilityLabel = new QLabel(tr(&quot;Label Visibility: &quot;), this);
m_labelVisibilityCheckbox = new QCheckBox(this);

auto customLabelLabel = new QLabel(tr(&quot;Custom Label: &quot;), this);
m_customLabelLineEdit = new QLineEdit(this);
</db:programlisting>
</db:section>
<db:section xml:id="populate-the-controls-upon-selecting-a-point">
<db:title>Populate the Controls upon Selecting a Point</db:title>
<db:para>Now that we have the controls, we need to provide the logic that sets the current control values for the selected point. Note that the whole series value is used if there is no customization for a selected point. In this case, if the series is set to show blue points, a blue color value will be shown in the color combobox.</db:para>
<db:para>Upon clicking on the lineseries, we look up the point clicked on, remove the prior point selection, and then select the point that was clicked on. This visually indicates the selected point on the chart - making the point larger to indicate its selection. The index of the current selected point and its <db:code>PointConfigurations</db:code> are saved to a member variable for later use.</db:para>
<db:para>The <db:code>PointConfigurations</db:code> are queried and matching values in the comboboxes are looked up. Then the current indices of the comboboxes are set accordingly. Similarly for the checkbox and line edit, the values are looked up from the <db:code>PointConfigurations</db:code>, and the controls are set to match them.</db:para>
<db:programlisting language="cpp">QObject::connect(m_series, &amp;QXYSeries::clicked, m_series, [&amp;](const QPointF &amp;point) {
    int index = m_series-&gt;points().indexOf(point.toPoint());
    if (index != -1) {
        m_series-&gt;deselectAllPoints();
        m_series-&gt;selectPoint(index);
        m_selectedPointIndex = index;
        m_selectedPointConfig = m_series-&gt;pointConfiguration(index);
        const QPointF selectedPoint(m_series-&gt;at(index));
        m_selectedPointIndexLineEdit-&gt;setText(&quot;(&quot; + QString::number(selectedPoint.x()) + &quot;, &quot; +
                                              QString::number(selectedPoint.y()) + &quot;)&quot;);
        PointConfigurations config = m_series-&gt;pointConfiguration(index);

        QVariant colorVar = config[QXYSeries::PointConfiguration::Color];
        QColor color = colorVar.isValid() ? colorVar.value&lt;QColor&gt;() : m_series-&gt;color();
        if (m_colorCombobox-&gt;findData(color) &lt; 0)
            m_colorCombobox-&gt;addItem(color.name(), color);
        m_colorCombobox-&gt;setCurrentIndex(m_colorCombobox-&gt;findData(color));

        QVariant sizeVar = config[QXYSeries::PointConfiguration::Size];
        qreal size = sizeVar.isValid() ? sizeVar.toReal() : m_series-&gt;markerSize();
        if (m_sizeCombobox-&gt;findData(size) &lt; 0)
            m_sizeCombobox-&gt;addItem(QString::number(size), size);
        m_sizeCombobox-&gt;setCurrentIndex(m_sizeCombobox-&gt;findData(size));

        QVariant labelVisibilityVar = config[QXYSeries::PointConfiguration::LabelVisibility];
        bool labelVisibility = labelVisibilityVar.isValid() ? labelVisibilityVar.toBool() :
                                                              m_series-&gt;pointLabelsVisible();
        m_labelVisibilityCheckbox-&gt;setChecked(labelVisibility);

        QVariant customLabelVar = config[QXYSeries::PointConfiguration::LabelFormat];
        QString customLabel = customLabelVar.isValid() ? customLabelVar.toString() : &quot;&quot;;
        m_customLabelLineEdit-&gt;setText(customLabel);
    }
});
</db:programlisting>
</db:section>
<db:section xml:id="provide-the-logic-to-configure-the-selected-point">
<db:title>Provide the Logic to Configure the Selected Point</db:title>
<db:para>Now that the controls are populated with the current configuration, we need to make them do something. We connect up their signals to logic that will do the work of configuring the selected point with the setting chosen. It is a simple matter of setting the <db:link xlink:href="qxyseries-qtcharts.xml#PointConfiguration-enum">QXYSeries::PointConfiguration</db:link> value associated with the control to the <db:code>m_selectedPointConfig</db:code> <db:code>PointConfigurations</db:code> member variable, and calling <db:link xlink:href="qxyseries-qtcharts.xml#setPointConfiguration">QXYSeries::setPointConfiguration</db:link>.</db:para>
<db:programlisting language="cpp">QObject::connect(m_colorCombobox, &amp;QComboBox::activated, m_series, [&amp;](const int) {
    m_selectedPointConfig[QXYSeries::PointConfiguration::Color] = m_colorCombobox-&gt;currentData();
    m_series-&gt;setPointConfiguration(m_selectedPointIndex, m_selectedPointConfig);
});
QObject::connect(m_sizeCombobox, &amp;QComboBox::activated, m_series, [&amp;](const int) {
    m_selectedPointConfig[QXYSeries::PointConfiguration::Size] = m_sizeCombobox-&gt;currentData();
    m_series-&gt;setPointConfiguration(m_selectedPointIndex, m_selectedPointConfig);
});
QObject::connect(m_labelVisibilityCheckbox, &amp;QAbstractButton::clicked, m_series, [&amp;](const bool checked) {
    m_selectedPointConfig[QXYSeries::PointConfiguration::LabelVisibility] = checked;
    m_series-&gt;setPointConfiguration(m_selectedPointIndex, m_selectedPointConfig);
});
QObject::connect(m_customLabelLineEdit, &amp;QLineEdit::editingFinished, m_series, [&amp;]() {
    m_selectedPointConfig[QXYSeries::PointConfiguration::LabelFormat] = m_customLabelLineEdit-&gt;text();
    m_series-&gt;setPointConfiguration(m_selectedPointIndex, m_selectedPointConfig);
});
</db:programlisting>
</db:section>
<db:section xml:id="create-the-chart-and-lay-out-the-controls">
<db:title>Create the Chart and Lay out the Controls</db:title>
<db:para>Finally we create the chart and its view, add the series to the chart, and create the layout of the window. As part of this, we connect to the <db:code>geometryChanged</db:code> signal to catch a signal when the chart is first painted. This is so that we can get correct values for the initially selected point. If we do this earlier, the point values are incorrect. This connection is disconnected after the first time that it is fired.</db:para>
<db:programlisting language="cpp">auto chart = new QChart;
chart-&gt;addSeries(m_series);
chart-&gt;createDefaultAxes();
chart-&gt;setTitle(&quot;Select points with mouse click&quot;);
chart-&gt;layout()-&gt;setContentsMargins(0, 0, 0, 0);
chart-&gt;legend()-&gt;setVisible(false);

m_selectInitialPointConnection = QObject::connect(chart, &amp;QChart::geometryChanged, chart, [&amp;]() {
    m_series-&gt;selectPoint(4);
    m_series-&gt;clicked(m_series-&gt;at(m_series-&gt;selectedPoints()[0]));
    disconnect(m_selectInitialPointConnection);
});

auto chartView = new QChartView(chart, this);
chartView-&gt;setRenderHint(QPainter::Antialiasing);

auto controlWidget = new QWidget(this);
auto controlLayout = new QGridLayout(controlWidget);
controlLayout-&gt;setColumnStretch(1, 1);

controlLayout-&gt;addWidget(selectedPointIndexLabel, 0, 0);
controlLayout-&gt;addWidget(m_selectedPointIndexLineEdit, 0, 1);

controlLayout-&gt;addWidget(colorLabel, 1, 0);
controlLayout-&gt;addWidget(m_colorCombobox, 1, 1);

controlLayout-&gt;addWidget(sizeLabel, 2, 0);
controlLayout-&gt;addWidget(m_sizeCombobox, 2, 1);

controlLayout-&gt;addWidget(labelVisibilityLabel, 3, 0);
controlLayout-&gt;addWidget(m_labelVisibilityCheckbox, 3, 1, 1, 2);

controlLayout-&gt;addWidget(customLabelLabel, 4, 0);
controlLayout-&gt;addWidget(m_customLabelLineEdit, 4, 1);

auto mainLayout = new QHBoxLayout(this);
mainLayout-&gt;addWidget(chartView);
mainLayout-&gt;setStretch(0, 1);
mainLayout-&gt;addWidget(controlWidget);
</db:programlisting>
<db:para>Now we have a fully functioning application that demonstrates how to customize individual chart points.</db:para>
</db:section>
</db:article>
