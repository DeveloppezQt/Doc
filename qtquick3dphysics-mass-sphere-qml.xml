<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Mass Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates different ways of setting mass and inertia of a body.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="qml">// Copyright (C) 2022 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR BSD-3-Clause
import QtQuick
import QtQuick3D
import QtQuick3D.Physics

DynamicRigidBody {
    property bool inArea: false
    property real sphereDiameter: 2
    massMode: DynamicRigidBody.CustomDensity
    density: 2

    Model {
        source: &quot;#Sphere&quot;
        scale: Qt.vector3d(1, 1, 1).times(sphereDiameter * 0.01)
        materials: PrincipledMaterial {
            baseColor: &quot;yellow&quot;
        }
    }

    physicsMaterial: PhysicsMaterial {
        restitution: 0.6
        dynamicFriction: 0.5
        staticFriction: 0.5
    }

    collisionShapes: SphereShape {
        diameter: sphereDiameter
    }
}

</db:programlisting>
</db:article>
