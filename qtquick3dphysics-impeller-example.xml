<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D Physics - Impeller Example</db:title>
<db:productname>QtQuick3DPhysics</db:productname>
<db:edition>Qt Quick 3D Physics | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Physics Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates using trigger bodies and collision info.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/impeller-example.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para>This example demonstrates how to use trigger bodies and collision info. The scene consists of a green static plane, a red dynamic sphere, a pink box trigger and a blue static sphere. When the red sphere overlaps the trigger body it will turn yellow and when it collides with the blue sphere it will be repelled away.</db:para>
<db:section xml:id="setup">
<db:title>Setup</db:title>
<db:para>As usual we need to add our <db:link xlink:href="qml-qtquick3d-physics-physicsworld.xml">PhysicsWorld</db:link>:</db:para>
<db:programlisting language="qml">PhysicsWorld {
    gravity: Qt.vector3d(0, -490, 0)
    scene: viewport.scene
}
</db:programlisting>
<db:para>We also add a <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link> where we put our scene objects. In this we have some settings for the visual environment:</db:para>
<db:programlisting language="qml">environment: SceneEnvironment {
    clearColor: &quot;#d6dbdf&quot;
    backgroundMode: SceneEnvironment.Color
}

PerspectiveCamera {
    position: Qt.vector3d(0, 200, 1000)
    clipFar: 2000
    clipNear: 1
}

DirectionalLight {
    eulerRotation.x: -45
    eulerRotation.y: 45
    castsShadow: true
    brightness: 1
    shadowFactor: 100
}
</db:programlisting>
</db:section>
<db:section xml:id="physical-objects">
<db:title>Physical objects</db:title>
<db:para>We have our regular static plane:</db:para>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(0, -100, 0)
    eulerRotation: Qt.vector3d(-90, 0, 0)
    collisionShapes: PlaneShape {}
    Model {
        source: &quot;#Rectangle&quot;
        scale: Qt.vector3d(500, 500, 1)
        materials: PrincipledMaterial {
            baseColor: &quot;green&quot;
        }
        castsShadows: false
        receivesShadows: true
    }
}
</db:programlisting>
<db:para>This is how our dynamic sphere is defined:</db:para>
<db:programlisting language="qml">DynamicRigidBody {
    id: sphere
    massMode: DynamicRigidBody.CustomDensity
    density: 0.00001
    position: Qt.vector3d(0, 600, 0)
    property bool inArea: false
    sendContactReports: true
    receiveTriggerReports: true

    onEnteredTriggerBody: {
        inArea = true
    }
    onExitedTriggerBody: {
        inArea = false
    }

    collisionShapes: SphereShape {}
    Model {
        source: &quot;#Sphere&quot;
        materials: PrincipledMaterial {
            baseColor: sphere.inArea ? &quot;yellow&quot; : &quot;red&quot;
        }
    }
}
</db:programlisting>
<db:para>The property <db:code>inArea</db:code> is a custom property we use to keep track of when the sphere is overlapping the box trigger body. This is then used for the <db:code>baseColor</db:code> property to make the sphere yellow when it is overlapping the box and red otherwise. Since we want the sphere to partake in contact reporting the property <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#sendContactReports-prop">sendContactReports</db:link> needs to be set to <db:code>true</db:code>. Since we also want the sphere to get callbacks when entering and leaving a <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link>, the property <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#receiveContactReports-prop">receiveContactReports</db:link> is also set to <db:code>true</db:code>. We implement the <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#enteredTriggerBody-signal">enteredTriggerBody</db:link> and <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#exitedTriggerBody-signal">exitedTriggerBody</db:link> signal methods on the sphere where we set the <db:code>inArea</db:code> property to <db:code>true</db:code> or <db:code>false</db:code> when entering or leaving the trigger body.</db:para>
<db:para>Now let's look at the trigger body:</db:para>
<db:programlisting language="qml">TriggerBody {
    position: Qt.vector3d(0, 350, 0)
    scale: Qt.vector3d(1, 2, 1)

    collisionShapes: BoxShape {
        id: boxShape
    }
    Model {
        source: &quot;#Cube&quot;
        materials: PrincipledMaterial {
            baseColor: Qt.rgba(1, 0, 1, 0.2)
            alphaMode: PrincipledMaterial.Blend
        }
    }
}
</db:programlisting>
<db:para>The qml type is a <db:link xlink:href="qml-qtquick3d-physics-triggerbody.xml">TriggerBody</db:link> which acts like a static body except its collisions are inactive. Instead it will trigger <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#enteredTriggerBody-signal">enteredTriggerBody</db:link> and <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#exitedTriggerBody-signal">exitedTriggerBody</db:link> method calls on the sphere.</db:para>
<db:para>Finally, lets look at the impeller:</db:para>
<db:programlisting language="qml">StaticRigidBody {
    position: Qt.vector3d(0, 0, 0)
    scale: Qt.vector3d(2, 2, 2)
    receiveContactReports: true

    collisionShapes: SphereShape {}

    Model {
        source: &quot;#Sphere&quot;
        materials: PrincipledMaterial {
            baseColor: &quot;blue&quot;
        }
    }

    onBodyContact: (body, positions, impulses, normals) =&amp;gt; {
        for (var normal of normals) {
            let velocity = normal.times(-700)
            body.setLinearVelocity(velocity)
        }
    }
}
</db:programlisting>
<db:para>This is a static body and we set <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#receiveContactReports-prop">receiveContactReports</db:link> to <db:code>true</db:code> to enable the collision callbacks. The callback <db:link xlink:href="qml-qtquick3d-physics-physicsnode.xml#bodyContact-signal">bodyContact</db:link> gets called whenever a collision is reported. In the method we call <db:link xlink:href="qml-qtquick3d-physics-dynamicrigidbody.xml#setLinearVelocity-method">setLinearVelocity</db:link> to set the linear velocity in the opposite direction of the collision normal vector to simulate an impeller.</db:para>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="impeller/CMakeLists.txt">impeller/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="impeller/impeller.pro">impeller/impeller.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="impeller/main.cpp">impeller/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="impeller/main.qml">impeller/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="impeller/qml.qrc">impeller/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:article>
