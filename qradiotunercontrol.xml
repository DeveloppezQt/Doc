<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRadioTunerControl Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qradiotunercontrol.xml">QRadioTunerControl</db:link> class provides access to the radio tuning functionality of a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRadioTunerControl</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediacontrol.xml" xlink:role="class">QMediaControl</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRadioTunerControl is part of <db:simplelist><db:member>multimedia_control</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>If a <db:link xlink:href="qmediaservice.xml">QMediaService</db:link> can tune an analog radio device it will implement <db:link xlink:href="qradiotunercontrol.xml">QRadioTunerControl</db:link>. This control provides a means to tune a radio device to a specific <db:link xlink:href="qradiotunercontrol.xml#setFrequency">frequency</db:link> as well as search <db:link xlink:href="qradiotunercontrol.xml#searchForward">forwards</db:link> and <db:link xlink:href="qradiotunercontrol.xml#searchBackward">backwards</db:link> for a signal.</db:para>
<db:para>The functionality provided by this control is exposed to application code through the <db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link> class.</db:para>
<db:para>The interface name of <db:link xlink:href="qradiotunercontrol.xml">QRadioTunerControl</db:link> is <db:code>org.qt-project.qt.radiotunercontrol/5.0</db:code> as defined in <db:link xlink:href="qradiotunercontrol.xml#QRadioTunerControl_iid">QRadioTunerControl_iid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaservice.xml#requestControl-1">QMediaService::requestControl</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml">QRadioTuner</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRadioTunerControl">
<db:title>[explicit protected] QRadioTunerControl::QRadioTunerControl(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QRadioTunerControl</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTunerControl(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a radio tuner control with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QRadioTunerControl">
<db:title>[virtual] QRadioTunerControl::~QRadioTunerControl()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QRadioTunerControl</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QRadioTunerControl()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a radio tuner control.</db:para>
</db:section>
<db:section xml:id="antennaConnectedChanged">
<db:title>void QRadioTunerControl::antennaConnectedChanged(bool <db:emphasis>connectionStatus</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>antennaConnectedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>connectionStatus</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void antennaConnectedChanged(bool connectionStatus)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the antenna has either been connected or disconnected as reflected with the <db:code role="parameter">connectionStatus</db:code>.</db:para>
</db:section>
<db:section xml:id="band">
<db:title>[pure virtual] QRadioTuner::Band QRadioTunerControl::band() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRadioTuner::Band</db:type>
<db:methodname>band</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTuner::Band band() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the frequency band a radio tuner is tuned to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#setBand">setBand</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bandChanged">
<db:title>void QRadioTunerControl::bandChanged(QRadioTuner::Band <db:emphasis>band</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>bandChanged</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Band</db:type>
<db:parameter>band</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void bandChanged(QRadioTuner::Band band)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the frequency <db:code role="parameter">band</db:code> a radio tuner is tuned to has changed.</db:para>
</db:section>
<db:section xml:id="cancelSearch">
<db:title>[pure virtual] void QRadioTunerControl::cancelSearch()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>cancelSearch</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void cancelSearch() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Stops scanning for a signal.</db:para>
</db:section>
<db:section xml:id="error">
<db:title>[pure virtual] QRadioTuner::Error QRadioTunerControl::error() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRadioTuner::Error</db:type>
<db:methodname>error</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTuner::Error error() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the error state of a radio tuner.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QRadioTunerControl::error(QRadioTuner::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>error</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Error</db:type>
<db:parameter>error</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void error(QRadioTuner::Error error)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that an <db:code role="parameter">error</db:code> has occurred.</db:para>
</db:section>
<db:section xml:id="errorString">
<db:title>[pure virtual] QString QRadioTunerControl::errorString() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>errorString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString errorString() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a string describing a radio tuner's error state.</db:para>
</db:section>
<db:section xml:id="frequency">
<db:title>[pure virtual] int QRadioTunerControl::frequency() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>frequency</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int frequency() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the frequency a radio tuner is tuned to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#setFrequency">setFrequency</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="frequencyChanged">
<db:title>void QRadioTunerControl::frequencyChanged(int <db:emphasis>frequency</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>frequencyChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>frequency</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void frequencyChanged(int frequency)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">frequency</db:code> a radio tuner is tuned to has changed.</db:para>
</db:section>
<db:section xml:id="frequencyRange">
<db:title>[pure virtual] QPair&lt;int, int&gt; QRadioTunerControl::frequencyRange(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QPair&lt;int, int&gt;</db:type>
<db:methodname>frequencyRange</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Band</db:type>
<db:parameter>band</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPair&lt;int, int&gt; frequencyRange(QRadioTuner::Band band) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a frequency <db:code role="parameter">band</db:code>'s minimum and maximum frequency.</db:para>
</db:section>
<db:section xml:id="frequencyStep">
<db:title>[pure virtual] int QRadioTunerControl::frequencyStep(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>frequencyStep</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Band</db:type>
<db:parameter>band</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int frequencyStep(QRadioTuner::Band band) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of Hertz to increment the frequency by when stepping through frequencies within a given <db:code role="parameter">band</db:code>.</db:para>
</db:section>
<db:section xml:id="isAntennaConnected">
<db:title>[virtual] bool QRadioTunerControl::isAntennaConnected() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isAntennaConnected</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isAntennaConnected() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if there is an antenna connected to the device.</db:para>
<db:para>Returns true if there is a connected antenna, and false otherwise.</db:para>
</db:section>
<db:section xml:id="isBandSupported">
<db:title>[pure virtual] bool QRadioTunerControl::isBandSupported(QRadioTuner::Band <db:emphasis>band</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBandSupported</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Band</db:type>
<db:parameter>band</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBandSupported(QRadioTuner::Band band) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a frequency <db:code role="parameter">band</db:code> is supported.</db:para>
<db:para>Returns true if the band is supported, and false if it is not.</db:para>
</db:section>
<db:section xml:id="isMuted">
<db:title>[pure virtual] bool QRadioTunerControl::isMuted() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isMuted</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isMuted() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a radio tuner's audio output is muted.</db:para>
<db:para>Returns true if the audio is muted, and false if it is not.</db:para>
</db:section>
<db:section xml:id="isSearching">
<db:title>[pure virtual] bool QRadioTunerControl::isSearching() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isSearching</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isSearching() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a radio tuner is currently scanning for signal.</db:para>
<db:para>Returns true if the tuner is scanning, and false if it is not.</db:para>
</db:section>
<db:section xml:id="isStereo">
<db:title>[pure virtual] bool QRadioTunerControl::isStereo() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isStereo</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isStereo() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Identifies if a radio tuner is receiving a stereo signal.</db:para>
<db:para>Returns true if the tuner is receiving a stereo signal, and false if it is not.</db:para>
</db:section>
<db:section xml:id="mutedChanged">
<db:title>void QRadioTunerControl::mutedChanged(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>mutedChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void mutedChanged(bool muted)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">muted</db:code> state of a radio tuner's audio output has changed.</db:para>
</db:section>
<db:section xml:id="searchAllStations">
<db:title>[pure virtual] void QRadioTunerControl::searchAllStations(QRadioTuner::SearchMode <db:emphasis>searchMode</db:emphasis> = QRadioTuner::SearchFast)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>searchAllStations</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::SearchMode</db:type>
<db:parameter>searchMode</db:parameter>
<db:initializer>QRadioTuner::SearchFast</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchAllStations(QRadioTuner::SearchMode searchMode) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a scan through the whole frequency band searching all stations with a specific <db:code role="parameter">searchMode</db:code>.</db:para>
</db:section>
<db:section xml:id="searchBackward">
<db:title>[pure virtual] void QRadioTunerControl::searchBackward()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>searchBackward</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchBackward() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a backwards scan for a signal, starting from the current <db:link xlink:href="qradiotunercontrol.xml#frequency">frequency</db:link>().</db:para>
</db:section>
<db:section xml:id="searchForward">
<db:title>[pure virtual] void QRadioTunerControl::searchForward()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>searchForward</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchForward() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Starts a forward scan for a signal, starting from the current <db:link xlink:href="qradiotunercontrol.xml#frequency">frequency</db:link>().</db:para>
</db:section>
<db:section xml:id="searchingChanged">
<db:title>void QRadioTunerControl::searchingChanged(bool <db:emphasis>searching</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>searchingChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>searching</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void searchingChanged(bool searching)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">searching</db:code> state of a radio tuner has changed.</db:para>
</db:section>
<db:section xml:id="setBand">
<db:title>[pure virtual] void QRadioTunerControl::setBand(QRadioTuner::Band <db:emphasis>band</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setBand</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::Band</db:type>
<db:parameter>band</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBand(QRadioTuner::Band band) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the frequecy <db:code role="parameter">band</db:code> a radio tuner is tuned to.</db:para>
<db:para>Changing the frequency band will reset the frequency to the minimum frequency of the new band.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#band">band</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFrequency">
<db:title>[pure virtual] void QRadioTunerControl::setFrequency(int <db:emphasis>frequency</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setFrequency</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>frequency</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFrequency(int frequency) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">frequency</db:code> a radio tuner is tuned to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#frequency">frequency</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMuted">
<db:title>[pure virtual] void QRadioTunerControl::setMuted(bool <db:emphasis>muted</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setMuted</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>muted</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMuted(bool muted) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">muted</db:code> state of a radio tuner's audio output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#isMuted">isMuted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStereoMode">
<db:title>[pure virtual] void QRadioTunerControl::setStereoMode(QRadioTuner::StereoMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setStereoMode</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::StereoMode</db:type>
<db:parameter>mode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStereoMode(QRadioTuner::StereoMode mode) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets a radio tuner's stereo <db:code role="parameter">mode</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#stereoMode">stereoMode</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#StereoMode-enum">QRadioTuner::StereoMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setVolume">
<db:title>[pure virtual] void QRadioTunerControl::setVolume(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setVolume</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setVolume(int volume) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the percentage <db:code role="parameter">volume</db:code> of a radio tuner's audio output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#volume">volume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="signalStrength">
<db:title>[pure virtual] int QRadioTunerControl::signalStrength() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>signalStrength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int signalStrength() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Return a radio tuner's current signal strength as a percentage.</db:para>
</db:section>
<db:section xml:id="signalStrengthChanged">
<db:title>void QRadioTunerControl::signalStrengthChanged(int <db:emphasis>strength</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>signalStrengthChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>strength</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void signalStrengthChanged(int strength)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the percentage <db:code role="parameter">strength</db:code> of the signal received by a radio tuner has changed.</db:para>
</db:section>
<db:section xml:id="start">
<db:title>[pure virtual] void QRadioTunerControl::start()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>start</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void start() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Activate the radio device.</db:para>
</db:section>
<db:section xml:id="state">
<db:title>[pure virtual] QRadioTuner::State QRadioTunerControl::state() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRadioTuner::State</db:type>
<db:methodname>state</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTuner::State state() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current radio tuner state.</db:para>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QRadioTunerControl::stateChanged(QRadioTuner::State <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stateChanged</db:methodname>
<db:methodparam>
<db:type>QRadioTuner::State</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stateChanged(QRadioTuner::State state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">state</db:code> of a radio tuner has changed.</db:para>
</db:section>
<db:section xml:id="stationFound">
<db:title>void QRadioTunerControl::stationFound(int <db:emphasis>frequency</db:emphasis>, QString <db:emphasis>stationId</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stationFound</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>frequency</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QString</db:type>
<db:parameter>stationId</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stationFound(int frequency, QString stationId)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that new station with <db:code role="parameter">frequency</db:code> and <db:code role="parameter">stationId</db:code> was found when scanning</db:para>
</db:section>
<db:section xml:id="stereoMode">
<db:title>[pure virtual] QRadioTuner::StereoMode QRadioTunerControl::stereoMode() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRadioTuner::StereoMode</db:type>
<db:methodname>stereoMode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTuner::StereoMode stereoMode() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a radio tuner's stereo mode.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#setStereoMode">setStereoMode</db:link>()</db:member>
<db:member><db:link xlink:href="qradiotuner.xml#StereoMode-enum">QRadioTuner::StereoMode</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stereoStatusChanged">
<db:title>void QRadioTunerControl::stereoStatusChanged(bool <db:emphasis>stereo</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>stereoStatusChanged</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>stereo</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stereoStatusChanged(bool stereo)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the <db:code role="parameter">stereo</db:code> state of a radio tuner has changed.</db:para>
</db:section>
<db:section xml:id="stop">
<db:title>[pure virtual] void QRadioTunerControl::stop()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>stop</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void stop() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Deactivate the radio device.</db:para>
</db:section>
<db:section xml:id="volume">
<db:title>[pure virtual] int QRadioTunerControl::volume() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>volume</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int volume() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the volume of a radio tuner's audio output as a percentage.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qradiotunercontrol.xml#setVolume">setVolume</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="volumeChanged">
<db:title>void QRadioTunerControl::volumeChanged(int <db:emphasis>volume</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>volumeChanged</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>volume</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void volumeChanged(int volume)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Signals that the percentage <db:code role="parameter">volume</db:code> of radio tuner's audio output has changed.</db:para>
</db:section>
</db:section>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="QRadioTunerControl_iid">
<db:title>QRadioTunerControl_iid</db:title>
<db:methodsynopsis>
<db:methodname>QRadioTunerControl_iid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">macrowithoutparams</db:synopsisinfo>
<db:synopsisinfo role="signature">QRadioTunerControl_iid</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para><db:code>org.qt-project.qt.radiotunercontrol/5.0</db:code></db:para>
<db:para>Defines the interface name of the <db:link xlink:href="qradiotunercontrol.xml">QRadioTunerControl</db:link> class.</db:para>
</db:section>
</db:section>
</db:article>
