<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt State Machine QML Types</db:title>
<db:productname>QtStateMachine</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt State Machine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Enables the use of State Machine with QML.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="details"/>
<db:para>To import the QML types into your application, use the following import statement in your .qml file:</db:para>
<db:programlisting language="qml">import QtQml.StateMachine
</db:programlisting>
<db:para>For more information, see <db:link xlink:href="qmlstatemachine-qml-guide.xml">Qt State Machine QML Guide</db:link>.</db:para>
<db:variablelist role="members">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-finalstate.xml" xlink:role="">FinalState</db:link></db:term>
<db:listitem>
<db:para>Provides a final state.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-historystate.xml" xlink:role="">HistoryState</db:link></db:term>
<db:listitem>
<db:para>The HistoryState type provides a means of returning to a previously active substate.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-qabstractstate.xml" xlink:role="">QAbstractState</db:link></db:term>
<db:listitem>
<db:para>The QAbstractState type is the base type of States of a StateMachine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-qabstracttransition.xml" xlink:role="">QAbstractTransition</db:link></db:term>
<db:listitem>
<db:para>The QAbstractTransition type is the base type of transitions between QAbstractState objects.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-qsignaltransition.xml" xlink:role="">QSignalTransition</db:link></db:term>
<db:listitem>
<db:para>The QSignalTransition type provides a transition based on a Qt signal.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-signaltransition.xml" xlink:role="">SignalTransition</db:link></db:term>
<db:listitem>
<db:para>The SignalTransition type provides a transition based on a Qt signal.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-state.xml" xlink:role="">State</db:link></db:term>
<db:listitem>
<db:para>Provides a general-purpose state for StateMachine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-statemachine.xml" xlink:role="">StateMachine</db:link></db:term>
<db:listitem>
<db:para>Provides a hierarchical finite state machine.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtqml-statemachine-timeouttransition.xml" xlink:role="">TimeoutTransition</db:link></db:term>
<db:listitem>
<db:para>The TimeoutTransition type provides a transition based on a timer.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
</db:article>
