<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Action QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Action provides an abstract user interface action that can be bound to items.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls 1.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Action is part of <db:simplelist><db:member><db:link xlink:href="applicationwindow.xml">Application Window</db:link></db:member><db:member><db:link xlink:href="controls.xml">Buttons and Controls</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/menubar-action.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>In applications many common commands can be invoked via menus, toolbar buttons, and keyboard shortcuts. Since the user expects each command to be performed in the same way, regardless of the user interface used, it is useful to represent each command as an <db:emphasis>action</db:emphasis>.</db:para>
<db:para>An action can be bound to a menu item and a toolbar button, and it will automatically keep them in sync. For example, in a word processor, if the user presses a Bold toolbar button, the Bold menu item will automatically be checked.</db:para>
<db:para><db:link xlink:href="qtquick-module.xml">QtQuick</db:link> Controls supports actions in <db:link xlink:href="qml-qtquick-controls-button.xml">Button</db:link>, <db:link xlink:href="qml-qtquick-controls-toolbutton.xml">ToolButton</db:link>, and <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link>.</db:para>
<db:programlisting language="cpp">    ...
    Action {
        id: copyAction
        text: &quot;&amp;Copy&quot;
        shortcut: StandardKey.Copy
        iconName: &quot;edit-copy&quot;
        enabled: (!!activeFocusItem &amp;&amp; !!activeFocusItem[&quot;copy&quot;])
        onTriggered: activeFocusItem.copy()
    }

    Action {
        id: cutAction
        text: &quot;Cu&amp;t&quot;
        shortcut: StandardKey.Cut
        iconName: &quot;edit-cut&quot;
        enabled: (!!activeFocusItem &amp;&amp; !!activeFocusItem[&quot;cut&quot;])
        onTriggered: activeFocusItem.cut()
    }

    Action {
        id: pasteAction
        text: &quot;&amp;Paste&quot;
        shortcut: StandardKey.Paste
        iconName: &quot;edit-paste&quot;
        enabled: (!!activeFocusItem &amp;&amp; !!activeFocusItem[&quot;paste&quot;])
        onTriggered: activeFocusItem.paste()
    }

    toolBar: ToolBar {
        RowLayout {
            anchors.fill: parent
            anchors.margins: spacing
            Label {
                text: UI.label
            }
            Item { Layout.fillWidth: true }
            CheckBox {
                id: enabler
                text: &quot;Enabled&quot;
                checked: true
            }
        }
    }

    menuBar: MenuBar {
        Menu {
            title: &quot;&amp;File&quot;
            MenuItem {
                text: &quot;E&amp;xit&quot;
                shortcut: StandardKey.Quit
                onTriggered: Qt.quit()
            }
        }
        Menu {
            title: &quot;&amp;Edit&quot;
            visible: tabView.currentIndex == 2
            MenuItem { action: cutAction }
            MenuItem { action: copyAction }
            MenuItem { action: pasteAction }
        }
        Menu {
            title: &quot;&amp;Help&quot;
            MenuItem {
                text: &quot;About...&quot;
                onTriggered: aboutDialog.open()
            }
        }
    }
    ...
</db:programlisting>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:para>Whether the menu item can be checked, or toggled. Defaults to <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#checked-prop">checked</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#exclusiveGroup-prop">exclusiveGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:para>If the action is <db:link xlink:href="qml-qtquick-controls-action.xml#checkable-prop">checkable</db:link>, this property reflects its checked state. Defaults to <db:code>false</db:code>. Its value is also false while <db:link xlink:href="qml-qtquick-controls-action.xml#checkable-prop">checkable</db:link> is false.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#toggled-signal">toggled</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#exclusiveGroup-prop">exclusiveGroup</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>Whether the action is enabled, and can be triggered. Defaults to <db:code>true</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#trigger-method">trigger</db:link>()</db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#triggered-signal">triggered</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="exclusiveGroup-prop">
<db:title>exclusiveGroup : ExclusiveGroup</db:title>
<db:para>If an action is checkable, an <db:link xlink:href="qml-qtquick-controls-exclusivegroup.xml">ExclusiveGroup</db:link> can be attached to it. All the actions sharing the same exclusive group become mutually exclusive selectable, meaning that only the last checked action will actually be checked.</db:para>
<db:para>Defaults to <db:code>null</db:code>, meaning no exclusive behavior is to be expected.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#checkable-prop">checkable</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="iconName-prop">
<db:title>iconName : string</db:title>
<db:para>Sets the icon name for the action. This will pick the icon with the given name from the current theme.</db:para>
<db:para>Defaults to the empty string.</db:para>
</db:section>
<db:section xml:id="iconSource-prop">
<db:title>iconSource : url</db:title>
<db:para>Sets the icon file or resource url for the action. Defaults to the empty URL.</db:para>
</db:section>
<db:section xml:id="shortcut-prop">
<db:title>shortcut : keysequence</db:title>
<db:para>Shortcut bound to the action. The keysequence can be a string or a <db:link xlink:href="qkeysequence.xml#StandardKey-enum">standard key</db:link>.</db:para>
<db:para>Defaults to an empty string.</db:para>
<db:programlisting language="qml">Action {
    id: copyAction
    text: qsTr(&quot;&amp;Copy&quot;)
    shortcut: StandardKey.Copy
}
</db:programlisting>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>Text for the action. This text will show as the button text, or as title in a menu item.</db:para>
<db:para>Mnemonics are supported by prefixing the shortcut letter with &amp;. For instance, <db:code>&quot;\&amp;Open&quot;</db:code> will bind the <db:code>Alt-O</db:code> shortcut to the <db:code>&quot;Open&quot;</db:code> menu item. Note that not all platforms support mnemonics.</db:para>
<db:para>Defaults to the empty string.</db:para>
</db:section>
<db:section xml:id="tooltip-prop">
<db:title>tooltip : string</db:title>
<db:para>Tooltip to be shown when hovering the control bound to this action. Not all controls support tooltips on all platforms, especially <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link>.</db:para>
<db:para>Defaults to the empty string.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="toggled-signal">
<db:title>toggled(<db:emphasis>checked</db:emphasis>)</db:title>
<db:para>Emitted whenever a action's <db:link xlink:href="qml-qtquick-controls-action.xml#checked-prop">checked</db:link> property changes. This usually happens at the same time as <db:link xlink:href="qml-qtquick-controls-action.xml#triggered-signal">triggered</db:link>.</db:para>
<db:para>The corresponding handler is <db:code>onToggled</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onToggled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="triggered-signal">
<db:title>triggered(QObject *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Emitted when either the menu item or its bound action have been activated. Includes the object that triggered the event if relevant (e.g. a Button or <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link>). You shouldn't need to emit this signal, use <db:link xlink:href="qml-qtquick-controls-action.xml#trigger-method">trigger</db:link>() instead.</db:para>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="trigger-method">
<db:title>void trigger(QObject *<db:emphasis>source</db:emphasis>)</db:title>
<db:para>Will emit the <db:link xlink:href="qml-qtquick-controls-action.xml#triggered-signal">triggered</db:link> signal if the action is enabled. You may provide a source object if the Action would benefit from knowing the origin of the triggering (e.g. for analytics). Will also emit the <db:link xlink:href="qml-qtquick-controls-action.xml#toggled-signal">toggled</db:link> signal if it is checkable.</db:para>
</db:section>
</db:section>
</db:article>
