<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Action QML Type</db:title>
<db:productname>QtQuickControls</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Abstract user interface action.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtQuick.Controls</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qtqml-qtobject.xml">QtObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>Action is part of <db:simplelist><db:member>utilities</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Action represents an abstract user interface action that can have shortcuts and can be assigned to menu items and toolbar buttons.</db:para>
<db:para>Actions may contain <db:link xlink:href="qml-qtquick-controls-action.xml#text-prop">text</db:link>, an <db:link xlink:href="qml-qtquick-controls-action.xml#icon-prop">icon</db:link>, and a <db:link xlink:href="qml-qtquick-controls-action.xml#shortcut-prop">shortcut</db:link>. Actions are normally <db:link xlink:href="qml-qtquick-controls-action.xml#triggered-signal">triggered</db:link> by the user via menu items, toolbar buttons, or keyboard shortcuts. A <db:link xlink:href="qml-qtquick-controls-action.xml#checkable-prop">checkable</db:link> Action toggles its <db:link xlink:href="qml-qtquick-controls-action.xml#checked-prop">checked</db:link> state when triggered.</db:para>
<db:programlisting language="qml">Action {
    id: copyAction
    text: qsTr(&quot;&amp;Copy&quot;)
    icon.name: &quot;edit-copy&quot;
    shortcut: StandardKey.Copy
    onTriggered: window.activeFocusItem.copy()
}
</db:programlisting>
<db:para>Action is commonly used to implement application commands that can be invoked via menu items, toolbar buttons, and keyboard shortcuts. Since the user expects the commands to be performed in the same way, regardless of the user interface used, it is useful to represent the commands as shareable actions.</db:para>
<db:para>Action can be also used to separate the logic and the visual presentation. For example, when declaring buttons and menu items in <db:code>.ui.qml</db:code> files, actions can be declared elsewhere and assigned from the outside.</db:para>
<db:programlisting language="qml">ToolButton {
    id: toolButton
    action: copyAction
}
</db:programlisting>
<db:para>When an action is paired with buttons and menu items, the <db:code>enabled</db:code>, <db:code>checkable</db:code>, and <db:code>checked</db:code> states are synced automatically. For example, in a word processor, if the user clicks a &quot;Bold&quot; toolbar button, the &quot;Bold&quot; menu item will automatically be checked. Buttons and menu items get their <db:code>text</db:code> and <db:code>icon</db:code> from the action by default. An action-specific <db:code>text</db:code> or <db:code>icon</db:code> can be overridden for a specific control by specifying <db:code>text</db:code> or <db:code>icon</db:code> directly on the control.</db:para>
<db:programlisting language="qml">MenuItem {
    id: menuItem
    action: copyAction
    text: qsTr(&quot;&amp;Copy selected Text&quot;)
}
</db:programlisting>
<db:para>Since Action presents a user interface action, it is intended to be assigned to a <db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link>, <db:link xlink:href="qml-qtquick-controls-toolbutton.xml">ToolButton</db:link>, or any other control that inherits <db:link xlink:href="qml-qtquick-controls-abstractbutton.xml">AbstractButton</db:link>. For keyboard shortcuts, the simpler <db:link xlink:href="qml-qtquick-shortcut.xml">Shortcut</db:link> type is more appropriate.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-menuitem.xml">MenuItem</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-controls-toolbutton.xml">ToolButton</db:link></db:member>
<db:member><db:link xlink:href="qml-qtquick-shortcut.xml">Shortcut</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="checkable-prop">
<db:title>checkable : bool</db:title>
<db:para>This property holds whether the action is checkable. The default value is <db:code>false</db:code>.</db:para>
<db:para>A checkable action toggles between checked (on) and unchecked (off) when triggered.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#checked-prop">checked</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="checked-prop">
<db:title>checked : bool</db:title>
<db:para>This property holds whether the action is checked.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qml-qtquick-controls-action.xml#checkable-prop">checkable</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="enabled-prop">
<db:title>enabled : bool</db:title>
<db:para>This property holds whether the action is enabled. The default value is <db:code>true</db:code>.</db:para>
</db:section>
<db:section xml:id="icon-prop">
<db:title>icon group</db:title>
<db:bridgehead renderas="sect2" xml:id="icon.cache-prop">icon.cache : bool</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="icon.color-prop">icon.color : color</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="icon.height-prop">icon.height : int</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="icon.name-prop">icon.name : string</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="icon.source-prop">icon.source : url</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="icon.width-prop">icon.width : int</db:bridgehead>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Name</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>name</db:para>
</db:td>
<db:td>
<db:para>This property holds the name of the icon to use.</db:para>
<db:para>The icon will be loaded from the platform theme. If the icon is found in the theme, it will always be used; even if <db:link xlink:href="qml-qtquick-controls-action.xml#icon.source-prop">icon.source</db:link> is also set. If the icon is not found, <db:link xlink:href="qml-qtquick-controls-action.xml#icon.source-prop">icon.source</db:link> will be used instead.</db:para>
<db:para>For more information on theme icons, see <db:link xlink:href="qicon.xml#fromTheme">QIcon::fromTheme</db:link>().</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>source</db:para>
</db:td>
<db:td>
<db:para>This property holds the name of the icon to use.</db:para>
<db:para>The icon will be loaded as a regular image.</db:para>
<db:para>If <db:link xlink:href="qml-qtquick-controls-action.xml#icon.name-prop">icon.name</db:link> is set and refers to a valid theme icon, it will always be used instead of this property.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>width</db:para>
</db:td>
<db:td>
<db:para>This property holds the width of the icon.</db:para>
<db:para>The icon's width will never exceed this value, though it will shrink when necessary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>height</db:para>
</db:td>
<db:td>
<db:para>This property holds the height of the icon.</db:para>
<db:para>The icon's height will never exceed this value, though it will shrink when necessary.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>color</db:para>
</db:td>
<db:td>
<db:para>This property holds the color of the icon.</db:para>
<db:para>The icon is tinted with the specified color, unless the color is set to <db:code>&quot;transparent&quot;</db:code>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>cache</db:para>
</db:td>
<db:td>
<db:para>This property specifies whether the icon should be cached.</db:para>
<db:para>The default value is true.</db:para>
<db:para>For more information, see <db:link xlink:href="qml-qtquick-image.xml#cache-prop">cache</db:link>.</db:para>
<db:para>This property was introduced in <db:link xlink:href="qtquick-module.xml">QtQuick</db:link>.Controls 2.13.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="shortcut-prop">
<db:title>shortcut : keysequence</db:title>
<db:para>This property holds the action's shortcut. The key sequence can be set to one of the <db:link xlink:href="qkeysequence.xml#StandardKey-enum">standard keyboard shortcuts</db:link>, or it can be described with a string containing a sequence of up to four key presses that are needed to trigger the shortcut.</db:para>
<db:programlisting language="cpp">Action {
    shortcut: &quot;Ctrl+E,Ctrl+W&quot;
    onTriggered: edit.wrapMode = TextEdit.Wrap
}
</db:programlisting>
</db:section>
<db:section xml:id="text-prop">
<db:title>text : string</db:title>
<db:para>This property holds a textual description of the action.</db:para>
</db:section>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="toggled-signal">
<db:title>toggled(QtObject <db:emphasis>source</db:emphasis>)</db:title>
<db:para>This signal is emitted when the action is toggled. The <db:code role="parameter">source</db:code> argument identifies the object that toggled the action.</db:para>
<db:para>For example, if the action is assigned to a menu item and a toolbar button, the action is toggled when the control is toggled, the shortcut is activated, or when <db:link xlink:href="qml-qtquick-controls-action.xml#toggle-method">toggle</db:link>() is called directly.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onToggled</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="triggered-signal">
<db:title>triggered(QtObject <db:emphasis>source</db:emphasis>)</db:title>
<db:para>This signal is emitted when the action is triggered. The <db:code role="parameter">source</db:code> argument identifies the object that triggered the action.</db:para>
<db:para>For example, if the action is assigned to a menu item and a toolbar button, the action is triggered when the control is clicked, the shortcut is activated, or when <db:link xlink:href="qml-qtquick-controls-action.xml#trigger-method">trigger</db:link>() is called directly.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onTriggered</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="method-documentation">
<db:title>Method Documentation</db:title>
<db:section xml:id="toggle-method">
<db:title>void toggle(QtObject <db:emphasis>source</db:emphasis>)</db:title>
<db:para>Toggles the action and emits <db:link xlink:href="qml-qtquick-controls-action.xml#toggled-signal">toggled</db:link>() if enabled, with an optional <db:code role="parameter">source</db:code> object defined.</db:para>
</db:section>
<db:section xml:id="trigger-method">
<db:title>void trigger(QtObject <db:emphasis>source</db:emphasis>)</db:title>
<db:para>Triggers the action and emits <db:link xlink:href="qml-qtquick-controls-action.xml#triggered-signal">triggered</db:link>() if enabled, with an optional <db:code role="parameter">source</db:code> object defined.</db:para>
</db:section>
</db:section>
</db:article>
