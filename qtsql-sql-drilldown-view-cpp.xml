<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drill Down Example</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Drill Down example shows how to read data from a database as well as submit changes, using the <db:link xlink:href="qsqlrelationaltablemodel.xml">QSqlRelationalTableModel</db:link> and <db:link xlink:href="qdatawidgetmapper.xml">QDataWidgetMapper</db:link> classes.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;informationwindow.h&quot;
#include &quot;imageitem.h&quot;
#include &quot;view.h&quot;

View::View(const QString &amp;amp;items, const QString &amp;amp;images, QWidget *parent)
    : QGraphicsView(parent)
{
    itemTable = new QSqlRelationalTableModel(this);
    itemTable-&amp;gt;setTable(items);
    itemTable-&amp;gt;setRelation(1, QSqlRelation(images, &quot;itemid&quot;, &quot;file&quot;));
    itemTable-&amp;gt;select();

    scene = new QGraphicsScene(this);
    scene-&amp;gt;setSceneRect(0, 0, 465, 365);
    setScene(scene);

    addItems();

    setMinimumSize(470, 370);
    setMaximumSize(470, 370);

    QLinearGradient gradient(QPointF(0, 0), QPointF(0, 370));
    gradient.setColorAt(0, QColor(&quot;#868482&quot;));
    gradient.setColorAt(1, QColor(&quot;#5d5b59&quot;));
    setBackgroundBrush(gradient);
}

void View::addItems()
{
    int itemCount = itemTable-&amp;gt;rowCount();

    int imageOffset = 150;
    int leftMargin = 70;
    int topMargin = 40;

    for (int i = 0; i &amp;lt; itemCount; i++) {
        QSqlRecord record = itemTable-&amp;gt;record(i);

        int id = record.value(&quot;id&quot;).toInt();
        QString file = record.value(&quot;file&quot;).toString();
        QString item = record.value(&quot;itemtype&quot;).toString();

        int columnOffset = ((i % 2) * 37);
        int x = ((i % 2) * imageOffset) + leftMargin + columnOffset;
        int y = ((i / 2) * imageOffset) + topMargin;

        ImageItem *image = new ImageItem(id, QPixmap(&quot;:/&quot; + file));
        image-&amp;gt;setData(0, i);
        image-&amp;gt;setPos(x, y);
        scene-&amp;gt;addItem(image);

        QGraphicsTextItem *label = scene-&amp;gt;addText(item);
        label-&amp;gt;setDefaultTextColor(QColor(&quot;#d7d6d5&quot;));
        QPointF labelOffset((120 - label-&amp;gt;boundingRect().width()) / 2, 120.0);
        label-&amp;gt;setPos(QPointF(x, y) + labelOffset);
    }
}

void View::mouseReleaseEvent(QMouseEvent *event)
{
    if (QGraphicsItem *item = itemAt(event-&amp;gt;pos())) {
        if (ImageItem *image = qgraphicsitem_cast&amp;lt;ImageItem *&amp;gt;(item))
            showInformation(image);
    }
    QGraphicsView::mouseReleaseEvent(event);
}

void View::showInformation(ImageItem *image)
{
    int id = image-&amp;gt;id();
    if (id &amp;lt; 0 || id &amp;gt;= itemTable-&amp;gt;rowCount())
        return;

    InformationWindow *window = findWindow(id);
    if (!window) {
        window = new InformationWindow(id, itemTable, this);

        connect(window, QOverload&amp;lt;int,const QString &amp;amp;&amp;gt;::of(&amp;amp;InformationWindow::imageChanged),
                this, QOverload&amp;lt;int,const QString &amp;amp;&amp;gt;::of(&amp;amp;View::updateImage));

        window-&amp;gt;move(pos() + QPoint(20, 40));
        window-&amp;gt;show();
        informationWindows.append(window);
    }

    if (window-&amp;gt;isVisible()) {
        window-&amp;gt;raise();
        window-&amp;gt;activateWindow();
    } else
        window-&amp;gt;show();
}

void View::updateImage(int id, const QString &amp;amp;fileName)
{
    QList&amp;lt;QGraphicsItem *&amp;gt; items = scene-&amp;gt;items();

    while(!items.empty()) {
        QGraphicsItem *item = items.takeFirst();

        if (ImageItem *image = qgraphicsitem_cast&amp;lt;ImageItem *&amp;gt;(item)) {
            if (image-&amp;gt;id() == id){
                image-&amp;gt;setPixmap(QPixmap(&quot;:/&quot; +fileName));
                image-&amp;gt;adjust();
                break;
            }
        }
    }
}

InformationWindow *View::findWindow(int id) const
{
    for (auto window : informationWindows) {
        if (window &amp;amp;&amp;amp; (window-&amp;gt;id() == id))
            return window;
    }
    return nullptr;
}

</db:programlisting>
</db:article>
