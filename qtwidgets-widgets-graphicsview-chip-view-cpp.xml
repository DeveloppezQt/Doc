<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>40000 Chips</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Visualizes a huge graphic view scene with 40000 chip items.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the demonstration applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;view.h&quot;

#if defined(QT_PRINTSUPPORT_LIB)
#include &amp;lt;QtPrintSupport/qtprintsupportglobal.h&amp;gt;
#if QT_CONFIG(printdialog)
#include &amp;lt;QPrinter&amp;gt;
#include &amp;lt;QPrintDialog&amp;gt;
#endif
#endif
#ifndef QT_NO_OPENGL
#include &amp;lt;QtOpenGL&amp;gt;
#else
#include &amp;lt;QtWidgets&amp;gt;
#endif
#include &amp;lt;qmath.h&amp;gt;

#if QT_CONFIG(wheelevent)
void GraphicsView::wheelEvent(QWheelEvent *e)
{
    if (e-&amp;gt;modifiers() &amp;amp; Qt::ControlModifier) {
        if (e-&amp;gt;delta() &amp;gt; 0)
            view-&amp;gt;zoomIn(6);
        else
            view-&amp;gt;zoomOut(6);
        e-&amp;gt;accept();
    } else {
        QGraphicsView::wheelEvent(e);
    }
}
#endif

View::View(const QString &amp;amp;name, QWidget *parent)
    : QFrame(parent)
{
    setFrameStyle(Sunken | StyledPanel);
    graphicsView = new GraphicsView(this);
    graphicsView-&amp;gt;setRenderHint(QPainter::Antialiasing, false);
    graphicsView-&amp;gt;setDragMode(QGraphicsView::RubberBandDrag);
    graphicsView-&amp;gt;setOptimizationFlags(QGraphicsView::DontSavePainterState);
    graphicsView-&amp;gt;setViewportUpdateMode(QGraphicsView::SmartViewportUpdate);
    graphicsView-&amp;gt;setTransformationAnchor(QGraphicsView::AnchorUnderMouse);

    int size = style()-&amp;gt;pixelMetric(QStyle::PM_ToolBarIconSize);
    QSize iconSize(size, size);

    QToolButton *zoomInIcon = new QToolButton;
    zoomInIcon-&amp;gt;setAutoRepeat(true);
    zoomInIcon-&amp;gt;setAutoRepeatInterval(33);
    zoomInIcon-&amp;gt;setAutoRepeatDelay(0);
    zoomInIcon-&amp;gt;setIcon(QPixmap(&quot;:/zoomin.png&quot;));
    zoomInIcon-&amp;gt;setIconSize(iconSize);
    QToolButton *zoomOutIcon = new QToolButton;
    zoomOutIcon-&amp;gt;setAutoRepeat(true);
    zoomOutIcon-&amp;gt;setAutoRepeatInterval(33);
    zoomOutIcon-&amp;gt;setAutoRepeatDelay(0);
    zoomOutIcon-&amp;gt;setIcon(QPixmap(&quot;:/zoomout.png&quot;));
    zoomOutIcon-&amp;gt;setIconSize(iconSize);
    zoomSlider = new QSlider;
    zoomSlider-&amp;gt;setMinimum(0);
    zoomSlider-&amp;gt;setMaximum(500);
    zoomSlider-&amp;gt;setValue(250);
    zoomSlider-&amp;gt;setTickPosition(QSlider::TicksRight);

    // Zoom slider layout
    QVBoxLayout *zoomSliderLayout = new QVBoxLayout;
    zoomSliderLayout-&amp;gt;addWidget(zoomInIcon);
    zoomSliderLayout-&amp;gt;addWidget(zoomSlider);
    zoomSliderLayout-&amp;gt;addWidget(zoomOutIcon);

    QToolButton *rotateLeftIcon = new QToolButton;
    rotateLeftIcon-&amp;gt;setIcon(QPixmap(&quot;:/rotateleft.png&quot;));
    rotateLeftIcon-&amp;gt;setIconSize(iconSize);
    QToolButton *rotateRightIcon = new QToolButton;
    rotateRightIcon-&amp;gt;setIcon(QPixmap(&quot;:/rotateright.png&quot;));
    rotateRightIcon-&amp;gt;setIconSize(iconSize);
    rotateSlider = new QSlider;
    rotateSlider-&amp;gt;setOrientation(Qt::Horizontal);
    rotateSlider-&amp;gt;setMinimum(-360);
    rotateSlider-&amp;gt;setMaximum(360);
    rotateSlider-&amp;gt;setValue(0);
    rotateSlider-&amp;gt;setTickPosition(QSlider::TicksBelow);

    // Rotate slider layout
    QHBoxLayout *rotateSliderLayout = new QHBoxLayout;
    rotateSliderLayout-&amp;gt;addWidget(rotateLeftIcon);
    rotateSliderLayout-&amp;gt;addWidget(rotateSlider);
    rotateSliderLayout-&amp;gt;addWidget(rotateRightIcon);

    resetButton = new QToolButton;
    resetButton-&amp;gt;setText(tr(&quot;0&quot;));
    resetButton-&amp;gt;setEnabled(false);

    // Label layout
    QHBoxLayout *labelLayout = new QHBoxLayout;
    label = new QLabel(name);
    label2 = new QLabel(tr(&quot;Pointer Mode&quot;));
    selectModeButton = new QToolButton;
    selectModeButton-&amp;gt;setText(tr(&quot;Select&quot;));
    selectModeButton-&amp;gt;setCheckable(true);
    selectModeButton-&amp;gt;setChecked(true);
    dragModeButton = new QToolButton;
    dragModeButton-&amp;gt;setText(tr(&quot;Drag&quot;));
    dragModeButton-&amp;gt;setCheckable(true);
    dragModeButton-&amp;gt;setChecked(false);
    antialiasButton = new QToolButton;
    antialiasButton-&amp;gt;setText(tr(&quot;Antialiasing&quot;));
    antialiasButton-&amp;gt;setCheckable(true);
    antialiasButton-&amp;gt;setChecked(false);
    openGlButton = new QToolButton;
    openGlButton-&amp;gt;setText(tr(&quot;OpenGL&quot;));
    openGlButton-&amp;gt;setCheckable(true);
#ifndef QT_NO_OPENGL
    openGlButton-&amp;gt;setEnabled(QGLFormat::hasOpenGL());
#else
    openGlButton-&amp;gt;setEnabled(false);
#endif
    printButton = new QToolButton;
    printButton-&amp;gt;setIcon(QIcon(QPixmap(&quot;:/fileprint.png&quot;)));

    QButtonGroup *pointerModeGroup = new QButtonGroup(this);
    pointerModeGroup-&amp;gt;setExclusive(true);
    pointerModeGroup-&amp;gt;addButton(selectModeButton);
    pointerModeGroup-&amp;gt;addButton(dragModeButton);

    labelLayout-&amp;gt;addWidget(label);
    labelLayout-&amp;gt;addStretch();
    labelLayout-&amp;gt;addWidget(label2);
    labelLayout-&amp;gt;addWidget(selectModeButton);
    labelLayout-&amp;gt;addWidget(dragModeButton);
    labelLayout-&amp;gt;addStretch();
    labelLayout-&amp;gt;addWidget(antialiasButton);
    labelLayout-&amp;gt;addWidget(openGlButton);
    labelLayout-&amp;gt;addWidget(printButton);

    QGridLayout *topLayout = new QGridLayout;
    topLayout-&amp;gt;addLayout(labelLayout, 0, 0);
    topLayout-&amp;gt;addWidget(graphicsView, 1, 0);
    topLayout-&amp;gt;addLayout(zoomSliderLayout, 1, 1);
    topLayout-&amp;gt;addLayout(rotateSliderLayout, 2, 0);
    topLayout-&amp;gt;addWidget(resetButton, 2, 1);
    setLayout(topLayout);

    connect(resetButton, SIGNAL(clicked()), this, SLOT(resetView()));
    connect(zoomSlider, SIGNAL(valueChanged(int)), this, SLOT(setupMatrix()));
    connect(rotateSlider, SIGNAL(valueChanged(int)), this, SLOT(setupMatrix()));
    connect(graphicsView-&amp;gt;verticalScrollBar(), SIGNAL(valueChanged(int)),
            this, SLOT(setResetButtonEnabled()));
    connect(graphicsView-&amp;gt;horizontalScrollBar(), SIGNAL(valueChanged(int)),
            this, SLOT(setResetButtonEnabled()));
    connect(selectModeButton, SIGNAL(toggled(bool)), this, SLOT(togglePointerMode()));
    connect(dragModeButton, SIGNAL(toggled(bool)), this, SLOT(togglePointerMode()));
    connect(antialiasButton, SIGNAL(toggled(bool)), this, SLOT(toggleAntialiasing()));
    connect(openGlButton, SIGNAL(toggled(bool)), this, SLOT(toggleOpenGL()));
    connect(rotateLeftIcon, SIGNAL(clicked()), this, SLOT(rotateLeft()));
    connect(rotateRightIcon, SIGNAL(clicked()), this, SLOT(rotateRight()));
    connect(zoomInIcon, SIGNAL(clicked()), this, SLOT(zoomIn()));
    connect(zoomOutIcon, SIGNAL(clicked()), this, SLOT(zoomOut()));
    connect(printButton, SIGNAL(clicked()), this, SLOT(print()));

    setupMatrix();
}

QGraphicsView *View::view() const
{
    return static_cast&amp;lt;QGraphicsView *&amp;gt;(graphicsView);
}

void View::resetView()
{
    zoomSlider-&amp;gt;setValue(250);
    rotateSlider-&amp;gt;setValue(0);
    setupMatrix();
    graphicsView-&amp;gt;ensureVisible(QRectF(0, 0, 0, 0));

    resetButton-&amp;gt;setEnabled(false);
}

void View::setResetButtonEnabled()
{
    resetButton-&amp;gt;setEnabled(true);
}

void View::setupMatrix()
{
    qreal scale = qPow(qreal(2), (zoomSlider-&amp;gt;value() - 250) / qreal(50));

    QMatrix matrix;
    matrix.scale(scale, scale);
    matrix.rotate(rotateSlider-&amp;gt;value());

    graphicsView-&amp;gt;setMatrix(matrix);
    setResetButtonEnabled();
}

void View::togglePointerMode()
{
    graphicsView-&amp;gt;setDragMode(selectModeButton-&amp;gt;isChecked()
                              ? QGraphicsView::RubberBandDrag
                              : QGraphicsView::ScrollHandDrag);
    graphicsView-&amp;gt;setInteractive(selectModeButton-&amp;gt;isChecked());
}

void View::toggleOpenGL()
{
#ifndef QT_NO_OPENGL
    graphicsView-&amp;gt;setViewport(openGlButton-&amp;gt;isChecked() ? new QGLWidget(QGLFormat(QGL::SampleBuffers)) : new QWidget);
#endif
}

void View::toggleAntialiasing()
{
    graphicsView-&amp;gt;setRenderHint(QPainter::Antialiasing, antialiasButton-&amp;gt;isChecked());
}

void View::print()
{
#if QT_CONFIG(printdialog)
    QPrinter printer;
    QPrintDialog dialog(&amp;amp;printer, this);
    if (dialog.exec() == QDialog::Accepted) {
        QPainter painter(&amp;amp;printer);
        graphicsView-&amp;gt;render(&amp;amp;painter);
    }
#endif
}

void View::zoomIn(int level)
{
    zoomSlider-&amp;gt;setValue(zoomSlider-&amp;gt;value() + level);
}

void View::zoomOut(int level)
{
    zoomSlider-&amp;gt;setValue(zoomSlider-&amp;gt;value() - level);
}

void View::rotateLeft()
{
    rotateSlider-&amp;gt;setValue(rotateSlider-&amp;gt;value() - 10);
}

void View::rotateRight()
{
    rotateSlider-&amp;gt;setValue(rotateSlider-&amp;gt;value() + 10);
}

</db:programlisting>
</db:article>
