<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Satellite Info</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Satellite Info example shows the available satellites using Sky View, Table View, or RSSI View and the user's current position. It is implemented with <db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link> and <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example demonstrates the usage of <db:link xlink:href="qtpositioning-qmlmodule.xml">Qt Positioning QML API</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qml-qtpositioning-satellitesource.xml">SatelliteSource</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The example also shows how to use a custom <db:code>C++</db:code> model together with a custom proxy model from <db:code>QML</db:code>.</db:para>
<db:section xml:id="ui-overview">
<db:title>UI Overview</db:title>
<db:para>The example shows satellite information in three different tabs. The data is taken from the <db:link xlink:href="qml-qtpositioning-satellitesource.xml#satellitesInView-prop">SatelliteSource::satellitesInView</db:link> and <db:link xlink:href="qml-qtpositioning-satellitesource.xml#satellitesInUse-prop">SatelliteSource::satellitesInUse</db:link> properties.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/skyview_tableview.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>Sky View</db:emphasis> tab shows the relative satellite positions using the <db:code>Azimuth</db:code> and <db:code>Elevation</db:code> <db:link xlink:href="qml-geosatelliteinfo.xml#attribute-method">attributes</db:link>. Clicking on an individual satellite object opens a popup with the <db:link xlink:href="qml-geosatelliteinfo.xml#satelliteIdentifier-prop">satellite identifier</db:link>, its azimuth and elevation.</db:para>
<db:para>The <db:emphasis>Table View</db:emphasis> tab shows the list of all detected satellites, and allows to apply sorting and filtering to the list.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/rssiview_settings.webp"/>
</db:imageobject>
</db:mediaobject>
<db:para>The <db:emphasis>RSSI View</db:emphasis> tab shows the signal strength of satellites in view using the <db:link xlink:href="qml-geosatelliteinfo.xml#signalStrength-prop">signalStrength</db:link> property. The numbers below the bars represent the individual <db:link xlink:href="qml-geosatelliteinfo.xml#satelliteIdentifier-prop">satellite identifiers</db:link>.</db:para>
<db:para>The <db:emphasis>Sky View</db:emphasis> and <db:emphasis>RSSI View</db:emphasis> tabs also show the current latitude and longitude. They use <db:link xlink:href="qml-qtpositioning-positionsource.xml#position-prop">PositionSource::position</db:link> property to extract this information.</db:para>
<db:para>The <db:emphasis>Status</db:emphasis> block on top of the tabs shows the current mode or the last error.</db:para>
<db:para>The <db:emphasis>Settings</db:emphasis> menu allows to switch the application color mode and show the help information.</db:para>
<db:para>The application operates in three different modes:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Application mode</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Running</db:para>
</db:td>
<db:td>
<db:para>The application continuously queries the system for satellite and position updates. When new data is available it will be displayed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Stopped</db:para>
</db:td>
<db:td>
<db:para>The application stops updating the satellite and position information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Single</db:para>
</db:td>
<db:td>
<db:para>The application makes a single satellite and position update request.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The application automatically switches into a simulation mode if the platform does not provide satellite or position information. The simulation mode uses an <db:link xlink:href="position-plugin-nmea.xml">NMEA plugin</db:link> with pre-recorded NMEA data.</db:para>
<db:note>
<db:para>Apple does not provide any APIs to retrieve satellite information, so on <db:code>macOS</db:code> and <db:code>iOS</db:code> the satellite information will always be taken from pre-recorded data. These API limitations do not affect positioning information, so current position can be displayed correctly.</db:para>
</db:note>
</db:section>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="retrieving-current-position">
<db:title>Retrieving Current Position</db:title>
<db:para>The current position is retrieved from the <db:link xlink:href="qml-qtpositioning-positionsource.xml">PositionSource</db:link> QML object. The <db:code>onPositionChanged</db:code> handler is used to receive position updates. The string representations of latitude and longitude are extracted from the <db:link xlink:href="qml-qtpositioning-position.xml#coordinate-prop">coordinate</db:link> property.</db:para>
<db:programlisting language="qml">PositionSource {
    id: positionSource
    name: root.simulation ? &quot;nmea&quot; : &quot;&quot;
    onPositionChanged: {
        let posData = position.coordinate.toString().split(&quot;, &quot;)
        positionBox.latitudeString = posData[0]
        positionBox.longitudeString = posData[1]
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="retrieving-satellite-information">
<db:title>Retrieving Satellite Information</db:title>
<db:para>Similarly to the position, the current satellite information is retrieved from the <db:link xlink:href="qml-qtpositioning-satellitesource.xml">SatelliteSource</db:link> QML object. The <db:code>onSatellitesInViewChanged</db:code> and <db:code>onSatellitesInUseChanged</db:code> handlers are used to get the updated satellites in view and satellites in use respectively. In this example, the data is then forwarded to the <db:code>C++</db:code> model, which is later used in all views.</db:para>
<db:programlisting language="qml">SatelliteSource {
    id: satelliteSource
    name: root.simulation ? &quot;nmea&quot; : &quot;&quot;
    onSatellitesInViewChanged: root.satellitesModel.updateSatellitesInView(satellitesInView)
    onSatellitesInUseChanged: root.satellitesModel.updateSatellitesInUse(satellitesInUse)
}
</db:programlisting>
<db:note>
<db:para>The example shows both the QML Positioning API, and the integration of C++ model to QML. That is the reason why the satellite information is first retrieved in <db:code>QML</db:code>, then forwarded to <db:code>C++</db:code>, and then back to <db:code>QML</db:code> to be used in the model. In practice, if the application is supposed to use complex <db:code>C++</db:code> models, consider directly using the <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> class from <db:code>C++</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="using-custom-c-models">
<db:title>Using Custom C++ Models</db:title>
<db:para>The example makes use of two custom models - <db:code>SatelliteModel</db:code> and <db:code>SortFilterModel</db:code>.</db:para>
<db:section xml:id="satellite-model">
<db:title>Satellite Model</db:title>
<db:para>The <db:code>SatelliteModel</db:code> class is derived from <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> and reimplements the <db:link xlink:href="qabstractitemmodel.xml#rowCount">rowCount</db:link>(), <db:link xlink:href="qabstractitemmodel.xml#data">data</db:link>(), and <db:link xlink:href="qabstractitemmodel.xml#roleNames">roleNames</db:link>() methods to represent the satellite information. Using <db:link xlink:href="qabstractlistmodel.xml">QAbstractListModel</db:link> as a base class allows to easily use the model with the <db:code>QML</db:code> <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link> and <db:link xlink:href="qml-qtquick-repeater.xml">Repeater</db:link> types. A custom <db:code>size</db:code> property is used only in the <db:emphasis>RSSI View</db:emphasis> tab to dynamically calculate the width of the tab bars.</db:para>
<db:programlisting language="cpp">class SatelliteModel : public QAbstractListModel
{
    Q_OBJECT
    Q_PROPERTY(int size READ rowCount NOTIFY sizeChanged)
    QML_ELEMENT
public:
    explicit SatelliteModel(QObject *parent = nullptr);

    int rowCount(const QModelIndex &amp;amp;parent = QModelIndex()) const override;
    QVariant data(const QModelIndex &amp;amp;index, int role = Qt::DisplayRole) const override;
    QHash&amp;lt;int, QByteArray&amp;gt; roleNames() const override;

public slots:
    void updateSatellitesInView(const QList&amp;lt;QGeoSatelliteInfo&amp;gt; &amp;amp;inView);
    void updateSatellitesInUse(const QList&amp;lt;QGeoSatelliteInfo&amp;gt; &amp;amp;inUse);

signals:
    void sizeChanged();
};
</db:programlisting>
<db:para>The <db:code>roleNames()</db:code> method is used to map the model's roles to the property names which can be used to access the model data from <db:code>QML</db:code>. For example, the <db:code>id</db:code> name is used to extract the satellite identifier, and the <db:code>rssi</db:code> name is used to get the signal strength.</db:para>
<db:programlisting language="cpp">QHash&amp;lt;int, QByteArray&amp;gt; SatelliteModel::roleNames() const
{
    return {
        {Roles::IdRole, &quot;id&quot;},
        {Roles::RssiRole, &quot;rssi&quot;},
        {Roles::AzimuthRole, &quot;azimuth&quot;},
        {Roles::ElevationRole, &quot;elevation&quot;},
        {Roles::SystemRole, &quot;system&quot;},
        {Roles::SystemIdRole, &quot;systemId&quot;},
        {Roles::InUseRole, &quot;inUse&quot;},
        {Roles::VisibleNameRole, &quot;name&quot;}
    };
}
</db:programlisting>
<db:para>On the <db:code>QML</db:code> side, we can use these names to get the actual values. For example, the implementation of <db:emphasis>RSSI View</db:emphasis> uses the <db:code>rssi</db:code>, <db:code>inUse</db:code>, and <db:code>id</db:code> role names to draw the bars that represent individual satellites:</db:para>
<db:programlisting language="qml">Repeater {
    id: repeater
    model: root.satellitesModel
    delegate: Rectangle {
        required property var modelData
        height: rect.height
        width: view.singleWidth
        color: &quot;transparent&quot;
        SemiRoundedRectangle {
            anchors.bottom: satId.top
            width: parent.width
            height: (parent.height - satId.height)
                    * Math.min(parent.modelData.rssi, rect.maxVisibleLevel)
                    / rect.maxVisibleLevel
            color: parent.modelData.inUse ? root.inUseColor : root.inViewColor
        }
        Text {
            id: satId
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.bottom: parent.bottom
            text: parent.modelData.id
            color: Theme.textSecondaryColor
            font.pixelSize: Theme.smallFontSize
            font.weight: Theme.fontLightWeight
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="proxy-model">
<db:title>Proxy Model</db:title>
<db:para>The <db:code>SortFilterModel</db:code> class is used to provide custom sorting and filtering of the satellite objects shown in the <db:emphasis>Table View</db:emphasis> tab.</db:para>
<db:para>The model is derived from <db:link xlink:href="qsortfilterproxymodel.xml">QSortFilterProxyModel</db:link> and reimplements the <db:link xlink:href="qsortfilterproxymodel.xml#filterAcceptsRow">filterAcceptsRow</db:link>() and <db:link xlink:href="qsortfilterproxymodel.xml#lessThan">lessThan</db:link>() methods to provide filtering and sorting. The model also exposes several <db:code>slots</db:code> to tune the filtering and sorting behavior.</db:para>
<db:programlisting language="cpp">class SortFilterModel : public QSortFilterProxyModel
{
    Q_OBJECT
    QML_ELEMENT
public:
    explicit SortFilterModel(QObject *parent = nullptr);

public slots:
    void updateFilterString(const QString &amp;amp;str);
    void updateShowInView(bool show);
    void updateShowInUse(bool show);
    void updateSelectedSystems(int id, bool show);
    void updateSortRoles(int role, bool use);

protected:
    bool filterAcceptsRow(int row, const QModelIndex &amp;amp;parent) const override;
    bool lessThan(const QModelIndex &amp;amp;left, const QModelIndex &amp;amp;right) const override;
};
</db:programlisting>
<db:para>These slots can be called from both <db:code>C++</db:code> and <db:code>QML</db:code>. For example, the <db:emphasis>Satellite Identifier</db:emphasis> delegate uses the <db:code>updateSelectedSystems()</db:code> slot to show or hide the information about satellites belonging to certain satellite systems. Likewise, the <db:emphasis>Satellite Status</db:emphasis> delegates use the <db:code>updateShowInView()</db:code> and <db:code>updateShowInUse()</db:code> slots to filter the satellites with a specific status.</db:para>
<db:programlisting language="qml">Repeater {
    model: root.satelliteSystemModel
    delegate: CheckElement {
        required property var modelData
        text: modelData.name
        Layout.alignment: Qt.AlignRight
        onCheckedChanged: {
            root.sortFilterModel.updateSelectedSystems(modelData.id, checked)
        }
    }
}
    ...
CheckElement {
    text: qsTr(&quot;In View&quot;)
    Layout.alignment: Qt.AlignRight
    onCheckedChanged: root.sortFilterModel.updateShowInView(checked)
}
CheckElement {
    text: qsTr(&quot;In Use&quot;)
    Layout.alignment: Qt.AlignRight
    onCheckedChanged: root.sortFilterModel.updateShowInUse(checked)
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="qml-module-registration">
<db:title>QML Module Registration</db:title>
<db:section xml:id="cmake-build">
<db:title>CMake Build</db:title>
<db:para>For a CMake-based build, we need to add the following to the <db:code>CMakeLists.txt</db:code>:</db:para>
<db:programlisting language="cpp">qt_add_qml_module(satelliteinfo
    URI SatelliteInformation
    VERSION 1.0
    SOURCES
        roles.h
        satellitemodel.cpp satellitemodel.h
        sortfiltermodel.cpp sortfiltermodel.h
    QML_FILES
        ApplicationScreen.qml
        Button.qml
        Header.qml
        HelpPopup.qml
        LegendBox.qml
        Main.qml
        RssiView.qml
        PageButton.qml
        PermissionsScreen.qml
        PositionBox.qml
        SatelliteView.qml
        SettingsView.qml
        SkyView.qml
        Theme.qml
        ViewSwitch.qml
    RESOURCES
        icons/checkbox.svg
        icons/checkbox_blank.svg
        icons/darkmode.svg
        icons/filter.svg
        icons/help.svg
        icons/lightmode.svg
        icons/place.svg
        icons/qtlogo_green.png
        icons/qtlogo_white.png
        icons/rssiview.svg
        icons/satellite_small.png
        icons/satellite1.png
        icons/satellite2.png
        icons/search.svg
        icons/settings.svg
        icons/skyview.svg
        icons/sort.svg
        icons/tableview.svg
)
</db:programlisting>
</db:section>
<db:section xml:id="qmake-build">
<db:title>qmake Build</db:title>
<db:para>For a qmake build, we need to modify the <db:code>satelliteinfo.pro</db:code> file in the following way:</db:para>
<db:programlisting language="cpp">CONFIG += qmltypes
QML_IMPORT_NAME = SatelliteInformation
QML_IMPORT_MAJOR_VERSION = 1

qml_resources.files = \
    qmldir \
    ApplicationScreen.qml \
    Button.qml \
    Header.qml \
    HelpPopup.qml \
    LegendBox.qml \
    Main.qml \
    RssiView.qml \
    PageButton.qml \
    PermissionsScreen.qml \
    PositionBox.qml \
    SatelliteView.qml \
    SettingsView.qml \
    SkyView.qml \
    Theme.qml \
    ViewSwitch.qml

qml_resources.prefix = /qt/qml/SatelliteInformation

RESOURCES += qml_resources

icon_resources.files = \
    icons/checkbox.svg \
    icons/checkbox_blank.svg \
    icons/darkmode.svg \
    icons/filter.svg \
    icons/help.svg \
    icons/lightmode.svg \
    icons/place.svg \
    icons/qtlogo_green.png \
    icons/qtlogo_white.png \
    icons/rssiview.svg \
    icons/satellite_small.png \
    icons/satellite1.png \
    icons/satellite2.png \
    icons/search.svg \
    icons/settings.svg \
    icons/skyview.svg \
    icons/sort.svg \
    icons/tableview.svg

icon_resources.prefix = /qt/qml/SatelliteInformation

RESOURCES += icon_resources
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtpositioning.git/tree/examples/positioning/satelliteinfo?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
