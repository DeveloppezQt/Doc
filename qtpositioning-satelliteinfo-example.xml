<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>SatelliteInfo (C++/QML)</db:title>
<db:productname>QtPositioning</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Positioning Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The SatelliteInfo example shows the available satellites at the user's current position and marks the satellites currently contributing to the GPS fix as pink.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Key <db:link xlink:href="qtpositioning-index.xml">Qt Positioning</db:link> classes used in this example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qgeosatelliteinfo.xml">QGeoSatelliteInfo</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/example-satelliteinfo.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example displays the signal strength of all satellites in view. Any satellite that is currently used to calculate the GPS fix is marked pink. The number at the bottom of each signal bar is the individual satellite identifier.</db:para>
<db:para>The application operates in three different modes:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Application mode</db:para>
</db:th>
<db:th>
<db:para>Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>running</db:para>
</db:td>
<db:td>
<db:para>The application continuously queries the system for satellite updates. When new data is available it will be displayed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>stopped</db:para>
</db:td>
<db:td>
<db:para>The application stops updating the satellite information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>single</db:para>
</db:td>
<db:td>
<db:para>The application makes a single update request with a timeout of 10s. The display remains empty until the request was answered by the system.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>If the platform does not provide satellite information, the application automatically switches into a demo mode, whereby it continuously switches between predefined sets of satellite data.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="satellite-info-model">
<db:title>Satellite Info Model</db:title>
<db:para>The key part of this example is the <db:code>SatelliteModel</db:code> data model. It represents the information about the satellites. It uses the <db:link xlink:href="qobject.xml#Q_PROPERTY">Q_PROPERTY</db:link> and <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> macros, so that it can be available from QML.</db:para>
<db:programlisting language="cpp">class SatelliteModel : public QAbstractListModel, public QQmlParserStatus
{
    Q_OBJECT
    Q_PROPERTY(bool running READ running WRITE setRunning NOTIFY runningChanged)
    Q_PROPERTY(bool satelliteInfoAvailable READ canProvideSatelliteInfo NOTIFY canProvideSatelliteInfoChanged)
    Q_PROPERTY(int entryCount READ entryCount NOTIFY entryCountChanged)
    Q_PROPERTY(bool singleRequestMode READ isSingleRequest WRITE setSingleRequest NOTIFY singleRequestChanged)
    Q_INTERFACES(QQmlParserStatus)
    QML_ELEMENT
public:
    explicit SatelliteModel(QObject *parent = 0);

    enum {
        IdentifierRole = Qt::UserRole + 1,
        InUseRole,
        SignalStrengthRole,
        ElevationRole,
        AzimuthRole
    };

    //From QAbstractListModel
    int rowCount(const QModelIndex &amp;amp;parent) const override;
    QVariant data(const QModelIndex &amp;amp;index, int role) const override;
    QHash&amp;lt;int, QByteArray&amp;gt; roleNames() const override;

    //From QQmlParserStatus
    void classBegin() override {}
    void componentComplete() override;
signals:
    void runningChanged();
    void entryCountChanged();
    void errorFound(int code);
    void canProvideSatelliteInfoChanged();
    void singleRequestChanged();

public slots:
    void clearModel();
    void updateDemoData();
};
</db:programlisting>
<db:para>The <db:code>SatelliteModel</db:code> object creates an instance of <db:link xlink:href="qgeosatelliteinfosource.xml">QGeoSatelliteInfoSource</db:link> using the <db:link xlink:href="qgeosatelliteinfosource.xml#createDefaultSource">createDefaultSource</db:link>() method. Once the source is created, the <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInViewUpdated">satellitesInViewUpdated</db:link>() and <db:link xlink:href="qgeosatelliteinfosource.xml#satellitesInUseUpdated">satellitesInUseUpdated</db:link>() signals are used to notify about the changes in satellite information.</db:para>
<db:programlisting language="cpp">SatelliteModel::SatelliteModel(QObject *parent) :
    QAbstractListModel(parent), source(0), m_componentCompleted(false), m_running(false),
    m_runningRequested(false), demo(false), isSingle(false), singleRequestServed(false)
{
    source = QGeoSatelliteInfoSource::createDefaultSource(this);
    if (!demo &amp;amp;&amp;amp; !source) {
        qWarning() &amp;lt;&amp;lt; &quot;No satellite data source found. Changing to demo mode.&quot;;
        demo = true;
    }
    if (!demo) {
        source-&amp;gt;setUpdateInterval(3000);
        connect(source, SIGNAL(satellitesInViewUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;)),
                this, SLOT(satellitesInViewUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;)));
        connect(source, SIGNAL(satellitesInUseUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;)),
                this, SLOT(satellitesInUseUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;)));
        connect(source, SIGNAL(errorOccurred(QGeoSatelliteInfoSource::Error)),
                this, SLOT(error(QGeoSatelliteInfoSource::Error)));
    }

    if (demo) {
        timer = new QTimer(this);
        connect(timer, SIGNAL(timeout()), this, SLOT(updateDemoData()));
        timer-&amp;gt;start(3000);
    }
}
</db:programlisting>
<db:para>The aforementioned signals provide the lists of <db:link xlink:href="qgeosatelliteinfo.xml">QGeoSatelliteInfo</db:link> objects that represent satellites in view and satellites in use, respectively. This data is used to update the model.</db:para>
<db:programlisting language="cpp">void SatelliteModel::satellitesInViewUpdated(const QList&amp;lt;QGeoSatelliteInfo&amp;gt; &amp;amp;infos)
{
    if (!running())
        return;

    int oldEntryCount = knownSatellites.count();

    QSet&amp;lt;int&amp;gt; satelliteIdsInUpdate;
    foreach (const QGeoSatelliteInfo &amp;amp;info, infos)
        satelliteIdsInUpdate.insert(info.satelliteIdentifier());

    QSet&amp;lt;int&amp;gt; toBeRemoved = knownSatelliteIds - satelliteIdsInUpdate;

    //We reset the model as in reality just about all entry values change
    //and there are generally a lot of inserts and removals each time
    //Hence we don't bother with complex model update logic beyond resetModel()
    beginResetModel();

    knownSatellites = infos;

    //sort them for presentation purposes
    std::sort(knownSatellites.begin(), knownSatellites.end());

    //remove old &quot;InUse&quot; data
    //new satellites are by default not in &quot;InUse&quot;
    //existing satellites keep their &quot;inUse&quot; state
    satellitesInUse -= toBeRemoved;

    knownSatelliteIds = satelliteIdsInUpdate;
    endResetModel();

    if (oldEntryCount != knownSatellites.count())
        emit entryCountChanged();
}

void SatelliteModel::satellitesInUseUpdated(const QList&amp;lt;QGeoSatelliteInfo&amp;gt; &amp;amp;infos)
{
    if (!running())
        return;

    beginResetModel();

    satellitesInUse.clear();
    foreach (const QGeoSatelliteInfo &amp;amp;info, infos)
        satellitesInUse.insert(info.satelliteIdentifier());

    endResetModel();
}
</db:programlisting>
<db:para>If the satellite info source is not available, demo data is used to simulate satellite information updates.</db:para>
<db:programlisting language="cpp">void SatelliteModel::updateDemoData()
{
    static bool flag = true;
    QList&amp;lt;QGeoSatelliteInfo&amp;gt; satellites;
    if (flag) {
        for (int i = 0; i&amp;lt;5; i++) {
            QGeoSatelliteInfo info;
            info.setSatelliteIdentifier(i);
            info.setSignalStrength(20 + 20*i);
            satellites.append(info);
        }
    } else {
        for (int i = 0; i&amp;lt;9; i++) {
            QGeoSatelliteInfo info;
            info.setSatelliteIdentifier(i*2);
            info.setSignalStrength(20 + 10*i);
            satellites.append(info);
        }
    }

    satellitesInViewUpdated(satellites);
    flag ? satellitesInUseUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;() &amp;lt;&amp;lt; satellites.at(2))
         : satellitesInUseUpdated(QList&amp;lt;QGeoSatelliteInfo&amp;gt;() &amp;lt;&amp;lt; satellites.at(3));
    flag = !flag;

    emit errorFound(flag);

    if (isSingleRequest() &amp;amp;&amp;amp; !singleRequestServed) {
        singleRequestServed = true;
        setRunning(false);
    }
}
</db:programlisting>
<db:para>The model is later used in QML to visualize the data.</db:para>
</db:section>
<db:section xml:id="exposing-the-model-to-qml">
<db:title>Exposing the Model to QML</db:title>
<db:para>To expose <db:code>SatelliteModel</db:code> to QML, we use the <db:link xlink:href="qqmlengine.xml#QML_ELEMENT">QML_ELEMENT</db:link> macro. See the <db:link xlink:href="qqmlengine.xml">QQmlEngine</db:link> class documentation for more details on it.</db:para>
<db:para>To make the type available in QML, we need to update our build accordingly.</db:para>
<db:section xml:id="cmake-build">
<db:title>CMake Build</db:title>
<db:para>For a CMake-based build, we need to add the following to the <db:code>CMakeLists.txt</db:code>:</db:para>
<db:programlisting language="cpp">qt_add_qml_module(satelliteinfo
    URI Local
    VERSION 1.0
    QML_FILES satelliteinfo.qml
    NO_RESOURCE_TARGET_PATH
)
</db:programlisting>
</db:section>
<db:section xml:id="qmake-build">
<db:title>qmake Build</db:title>
<db:para>For a qmake build, we need to modify the <db:code>satelliteinfo.pro</db:code> file in the following way:</db:para>
<db:programlisting language="cpp">CONFIG += qmltypes
QML_IMPORT_NAME = Local
QML_IMPORT_MAJOR_VERSION = 1
</db:programlisting>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtlocation.git/tree/examples/positioning/satelliteinfo?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
