<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>IviApplication QML Type</db:title>
<db:productname>QtWaylandCompositor</db:productname>
<db:edition>Qt Wayland Compositor | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Wayland Compositor Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a shell extension for embedded-style user interfaces.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Import Statement</db:term>
<db:listitem>
<db:para>import QtWayland.Compositor.IviApplication</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link> extension provides a way to associate an <db:link xlink:href="qml-qtwayland-compositor-iviapplication-ivisurface.xml">IviSurface</db:link> with a regular Wayland surface. Using the <db:link xlink:href="qml-qtwayland-compositor-iviapplication-ivisurface.xml">IviSurface</db:link> interface, the client can identify itself by giving an ivi id, and the compositor can ask the client to resize.</db:para>
<db:para><db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link> corresponds to the Wayland <db:code>ivi_application</db:code> interface.</db:para>
<db:para>To provide the functionality of the shell extension in a compositor, create an instance of the <db:link xlink:href="qml-qtwayland-compositor-iviapplication-iviapplication.xml">IviApplication</db:link> component and add it to the list of extensions supported by the compositor:</db:para>
<db:programlisting language="qml">import QtWayland.Compositor.IviApplication

WaylandCompositor {
    IviApplication {
        onIviSurfaceCreated: {
            if (iviSurface.iviId === navigationIviId) {
                // ...
            }
        }
    }
}
</db:programlisting>
</db:section>
<db:section xml:id="signal-documentation">
<db:title>Signal Documentation</db:title>
<db:section xml:id="iviSurfaceCreated-signal">
<db:title>void iviSurfaceCreated(IviSurface *<db:emphasis>iviSurface</db:emphasis>)</db:title>
<db:para>This signal is emitted when an <db:link xlink:href="qml-qtwayland-compositor-iviapplication-ivisurface.xml">IviSurface</db:link> has been created. The supplied <db:code role="parameter">iviSurface</db:code> is most commonly used to instantiate a <db:link xlink:href="qml-qtwayland-compositor-shellsurfaceitem.xml">ShellSurfaceItem</db:link>.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onIviSurfaceCreated</db:code>.</db:para>
</db:note>
</db:section>
<db:section xml:id="iviSurfaceRequested-signal">
<db:title>void iviSurfaceRequested(WaylandSurface <db:emphasis>surface</db:emphasis>, int <db:emphasis>iviId</db:emphasis>, WaylandResource <db:emphasis>resource</db:emphasis>)</db:title>
<db:para>This signal is emitted when the client has requested an <db:code>ivi_surface</db:code> to be associated with <db:code role="parameter">surface</db:code>, which is identified by <db:code role="parameter">iviId</db:code>. The handler for this signal is expected to create the ivi surface for <db:code role="parameter">resource</db:code> and initialize it within the scope of the signal emission. If no ivi surface is created, a default one will be created instead.</db:para>
<db:note>
<db:para>The corresponding handler is <db:code>onIviSurfaceRequested</db:code>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
