<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAudioDecoder Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> class allows decoding audio.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAudioDecoder</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimedia</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qmediaobject.xml" xlink:role="class">QMediaObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QAudioDecoder is part of <db:simplelist><db:member>multimedia</db:member><db:member>multimedia_audio</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Preliminary</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> class is a high level class for decoding local audio media files. It is similar to the <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> class except that audio is provided back through this API rather than routed directly to audio hardware, and playlists and network and streaming based media is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiobuffer.xml">QAudioBuffer</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Error-enum">
<db:title>enum QAudioDecoder::Error</db:title>
<db:para>Defines a media player error condition.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error has occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::ResourceError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>A media resource couldn't be resolved.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::FormatError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>The format of a media resource isn't supported.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::AccessDeniedError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>There are not the appropriate permissions to play a media resource.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::ServiceMissingError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>A valid playback service was not found, playback cannot proceed.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="State-enum">
<db:title>enum QAudioDecoder::State</db:title>
<db:para>Defines the current state of a media player.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::StoppedState</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>The decoder is not decoding. Decoding will start at the start of the media.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link></db:emphasis>::DecodingState</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>The audio player is currently decoding media.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="bufferAvailable-prop">
<db:title>[read-only] bufferAvailable : const bool</db:title>
<db:para>This property holds whether there is a decoded audio buffer available</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#bufferAvailable">bufferAvailable</db:link></db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#bufferAvailableChanged">bufferAvailableChanged</db:link></db:emphasis>(<db:type>bool</db:type> <db:emphasis>available</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="error-prop">
<db:title>[read-only] error : const QString</db:title>
<db:para>This property holds a string describing the last error condition.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">errorString</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceFilename-prop">
<db:title>sourceFilename : QString</db:title>
<db:para>This property holds the active filename being decoded by the decoder object.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#sourceFilename">sourceFilename</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#setSourceFilename">setSourceFilename</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> &amp;<db:emphasis>fileName</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#sourceChanged">sourceChanged</db:link></db:emphasis>()</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="state-prop">
<db:title>[read-only] state : const State</db:title>
<db:para>This property holds the audio decoder's playback state.</db:para>
<db:para>By default this property is QAudioDecoder::Stopped</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qaudiodecoder.xml#State-enum">QAudioDecoder::State</db:link></db:type> <db:emphasis role="bold">state</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qaudiodecoder.xml#stateChanged">stateChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qaudiodecoder.xml#State-enum">QAudioDecoder::State</db:link></db:type> <db:emphasis>state</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#stop">stop</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAudioDecoder">
<db:title>[explicit] QAudioDecoder::QAudioDecoder(QObject *<db:emphasis>parent</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Construct an <db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> instance parented to <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAudioDecoder">
<db:title>[virtual noexcept] QAudioDecoder::~QAudioDecoder()</db:title>
<db:para>Destroys the audio decoder object.</db:para>
</db:section>
<db:section xml:id="audioFormat">
<db:title>QAudioFormat QAudioDecoder::audioFormat() const</db:title>
<db:para>Returns the current audio format of the decoded stream.</db:para>
<db:para>Any buffers returned should have this format.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#setAudioFormat">setAudioFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#formatChanged">formatChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferAvailable">
<db:title>bool QAudioDecoder::bufferAvailable() const</db:title>
<db:para>Returns true if a buffer is available to be read, and false otherwise. If there is no buffer available, calling the <db:link xlink:href="qaudiodecoder.xml#read">read</db:link>() function will return an invalid buffer.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qaudiodecoder.xml#bufferAvailable-prop">bufferAvailable</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="bufferAvailableChanged">
<db:title>void QAudioDecoder::bufferAvailableChanged(bool <db:emphasis>available</db:emphasis>)</db:title>
<db:para>Signals the availability (if <db:code role="parameter">available</db:code> is true) of a new buffer.</db:para>
<db:para>If <db:code role="parameter">available</db:code> is false, there are no buffers available.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qaudiodecoder.xml#bufferAvailable-prop">bufferAvailable</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#bufferAvailable">bufferAvailable</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#bufferReady">bufferReady</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bufferReady">
<db:title>void QAudioDecoder::bufferReady()</db:title>
<db:para>Signals that a new decoded audio buffer is available to be read.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#read">read</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#bufferAvailable">bufferAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="duration">
<db:title>qint64 QAudioDecoder::duration() const</db:title>
<db:para>Returns total duration (in milliseconds) of the audio stream or -1 if not available.</db:para>
</db:section>
<db:section xml:id="durationChanged">
<db:title>void QAudioDecoder::durationChanged(qint64 <db:emphasis>duration</db:emphasis>)</db:title>
<db:para>Signals that the estimated <db:code role="parameter">duration</db:code> of the decoded data has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#positionChanged">positionChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QAudioDecoder::Error QAudioDecoder::error() const</db:title>
<db:para>Returns the current error state.</db:para>
</db:section>
<db:section xml:id="error-1">
<db:title>void QAudioDecoder::error(QAudioDecoder::Error <db:emphasis>error</db:emphasis>)</db:title>
<db:para>Signals that an <db:code role="parameter">error</db:code> condition has occurred.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#error-prop">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QAudioDecoder::finished()</db:title>
<db:para>Signals that the decoding has finished successfully. If decoding fails, error signal is emitted instead.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#start">start</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#stop">stop</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="formatChanged">
<db:title>void QAudioDecoder::formatChanged(const QAudioFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Signals that the current audio format of the decoder has changed to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#audioFormat">audioFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#setAudioFormat">setAudioFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasSupport">
<db:title>[static] QMultimedia::SupportEstimate QAudioDecoder::hasSupport(const QString &amp;<db:emphasis>mimeType</db:emphasis>, const QStringList &amp;<db:emphasis>codecs</db:emphasis> = QStringList())</db:title>
<db:para>Returns the level of support an audio decoder has for a <db:code role="parameter">mimeType</db:code> and a set of <db:code role="parameter">codecs</db:code>.</db:para>
</db:section>
<db:section xml:id="position">
<db:title>qint64 QAudioDecoder::position() const</db:title>
<db:para>Returns position (in milliseconds) of the last buffer read from the decoder or -1 if no buffers have been read.</db:para>
</db:section>
<db:section xml:id="positionChanged">
<db:title>void QAudioDecoder::positionChanged(qint64 <db:emphasis>position</db:emphasis>)</db:title>
<db:para>Signals that the current <db:code role="parameter">position</db:code> of the decoder has changed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#durationChanged">durationChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="read">
<db:title>QAudioBuffer QAudioDecoder::read() const</db:title>
<db:para>Read a buffer from the decoder, if one is available. Returns an invalid buffer if there are no decoded buffers currently available, or on failure. In both cases this function will not block.</db:para>
<db:para>You should either respond to the <db:link xlink:href="qaudiodecoder.xml#bufferReady">bufferReady</db:link>() signal or check the <db:link xlink:href="qaudiodecoder.xml#bufferAvailable">bufferAvailable</db:link>() function before calling read() to make sure you get useful data.</db:para>
</db:section>
<db:section xml:id="setAudioFormat">
<db:title>void QAudioDecoder::setAudioFormat(const QAudioFormat &amp;<db:emphasis>format</db:emphasis>)</db:title>
<db:para>Set the desired audio format for decoded samples to <db:code role="parameter">format</db:code>.</db:para>
<db:para>This property can only be set while the decoder is stopped. Setting this property at other times will be ignored.</db:para>
<db:para>If the decoder does not support this format, <db:link xlink:href="qaudiodecoder.xml#error">error</db:link>() will be set to <db:code>FormatError</db:code>.</db:para>
<db:para>If you do not specify a format, the format of the decoded audio itself will be used. Otherwise, some format conversion will be applied.</db:para>
<db:para>If you wish to reset the decoded format to that of the original audio file, you can specify an invalid <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#audioFormat">audioFormat</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceDevice">
<db:title>void QAudioDecoder::setSourceDevice(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:para>Sets the current audio <db:link xlink:href="qiodevice.xml">QIODevice</db:link> to <db:code role="parameter">device</db:code>.</db:para>
<db:para>When this property is set any current decoding is stopped, and any audio buffers are discarded.</db:para>
<db:para>You can only specify either a source filename or a source <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. Setting one will unset the other.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#sourceDevice">sourceDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSourceFilename">
<db:title>void QAudioDecoder::setSourceFilename(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>Sets the current audio file name to <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>When this property is set any current decoding is stopped, and any audio buffers are discarded.</db:para>
<db:para>You can only specify either a source filename or a source <db:link xlink:href="qiodevice.xml">QIODevice</db:link>. Setting one will unset the other.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qaudiodecoder.xml#sourceFilename-prop">sourceFilename</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#sourceFilename">sourceFilename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceChanged">
<db:title>void QAudioDecoder::sourceChanged()</db:title>
<db:para>Signals that the current source of the decoder has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qaudiodecoder.xml#sourceFilename-prop">sourceFilename</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#sourceFilename">sourceFilename</db:link>()</db:member>
<db:member><db:link xlink:href="qaudiodecoder.xml#sourceDevice">sourceDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceDevice">
<db:title>QIODevice *QAudioDecoder::sourceDevice() const</db:title>
<db:para>Returns the current source <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, if one was set. If <db:link xlink:href="qaudiodecoder.xml#setSourceFilename">setSourceFilename</db:link>() was called, this will be 0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#setSourceDevice">setSourceDevice</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sourceFilename">
<db:title>QString QAudioDecoder::sourceFilename() const</db:title>
<db:para>Returns the current file name to decode. If <db:link xlink:href="qaudiodecoder.xml#setSourceDevice">setSourceDevice</db:link> was called, this will be empty.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qaudiodecoder.xml#sourceFilename-prop">sourceFilename</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#setSourceFilename">setSourceFilename</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="start">
<db:title>void QAudioDecoder::start()</db:title>
<db:para>Starts decoding the audio resource.</db:para>
<db:para>As data gets decoded, the <db:link xlink:href="qaudiodecoder.xml#bufferReady">bufferReady</db:link>() signal will be emitted when enough data has been decoded. Calling <db:link xlink:href="qaudiodecoder.xml#read">read</db:link>() will then return an audio buffer without blocking.</db:para>
<db:para>If you call <db:link xlink:href="qaudiodecoder.xml#read">read</db:link>() before a buffer is ready, an invalid buffer will be returned, again without blocking.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qaudiodecoder.xml#read">read</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stateChanged">
<db:title>void QAudioDecoder::stateChanged(QAudioDecoder::State <db:emphasis>state</db:emphasis>)</db:title>
<db:para>Signal the <db:code role="parameter">state</db:code> of the decoder object has changed.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qaudiodecoder.xml#state-prop">state</db:link>. </db:para>
</db:note>
</db:section>
<db:section xml:id="stop">
<db:title>void QAudioDecoder::stop()</db:title>
<db:para>Stop decoding audio. Calling <db:link xlink:href="qaudiodecoder.xml#start">start</db:link>() again will resume decoding from the beginning.</db:para>
</db:section>
</db:section>
</db:article>
