<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt 3D: Simple C++ Example</db:title>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A C++ application that demonstrates how to render a scene in Qt 3D.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/simple-cpp.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>Simple</db:emphasis> demonstrates how to render a scene in Qt 3D.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="setting-up-the-scene">
<db:title>Setting Up the Scene</db:title>
<db:para>We set up the scene in the <db:emphasis>main.cpp</db:emphasis> file.</db:para>
<db:para>To be able to use the classes and functions in the Q3D Core, Q3D Render, Qt 3D Input, and Qt 3D Extras modules, we must include the classes:</db:para>
<db:programlisting language="cpp">#include &amp;lt;Qt3DCore/QEntity&amp;gt;
#include &amp;lt;Qt3DRender/QCamera&amp;gt;
#include &amp;lt;Qt3DRender/QCameraLens&amp;gt;
#include &amp;lt;Qt3DCore/QTransform&amp;gt;
#include &amp;lt;Qt3DCore/QAspectEngine&amp;gt;

#include &amp;lt;Qt3DInput/QInputAspect&amp;gt;

#include &amp;lt;Qt3DRender/QRenderAspect&amp;gt;
#include &amp;lt;Qt3DRender/QGeometryRenderer&amp;gt;
#include &amp;lt;Qt3DExtras/QForwardRenderer&amp;gt;
#include &amp;lt;Qt3DExtras/QPhongMaterial&amp;gt;
#include &amp;lt;Qt3DExtras/QSphereMesh&amp;gt;
#include &amp;lt;Qt3DExtras/QTorusMesh&amp;gt;
</db:programlisting>
<db:para>First, we set up the scene and specify its root entity:</db:para>
<db:programlisting language="cpp">Qt3DCore::QEntity *createScene()
{
    Qt3DCore::QEntity *rootEntity = new Qt3DCore::QEntity;
</db:programlisting>
<db:para>We specify the material to use for Phong rendering:</db:para>
<db:programlisting language="cpp">    Qt3DRender::QMaterial *material = new Qt3DExtras::QPhongMaterial(rootEntity);
</db:programlisting>
<db:para>The root entity is just an empty shell and its behavior is defined by the components that it references. We specify the torus entity and its mesh, transform, and material components:</db:para>
<db:programlisting language="cpp">    Qt3DCore::QEntity *torusEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DExtras::QTorusMesh *torusMesh = new Qt3DExtras::QTorusMesh;
    torusMesh-&amp;gt;setRadius(5);
    torusMesh-&amp;gt;setMinorRadius(1);
    torusMesh-&amp;gt;setRings(100);
    torusMesh-&amp;gt;setSlices(20);

    Qt3DCore::QTransform *torusTransform = new Qt3DCore::QTransform;
    torusTransform-&amp;gt;setScale3D(QVector3D(1.5, 1, 0.5));
    torusTransform-&amp;gt;setRotation(QQuaternion::fromAxisAndAngle(QVector3D(1, 0, 0), 45.0f));

    torusEntity-&amp;gt;addComponent(torusMesh);
    torusEntity-&amp;gt;addComponent(torusTransform);
    torusEntity-&amp;gt;addComponent(material);
</db:programlisting>
<db:para>We also specify a sphere entity and its components:</db:para>
<db:programlisting language="cpp">    Qt3DCore::QEntity *sphereEntity = new Qt3DCore::QEntity(rootEntity);
    Qt3DExtras::QSphereMesh *sphereMesh = new Qt3DExtras::QSphereMesh;
    sphereMesh-&amp;gt;setRadius(3);
    sphereMesh-&amp;gt;setGenerateTangents(true);

    Qt3DCore::QTransform *sphereTransform = new Qt3DCore::QTransform;
    OrbitTransformController *controller = new OrbitTransformController(sphereTransform);
    controller-&amp;gt;setTarget(sphereTransform);
    controller-&amp;gt;setRadius(20.0f);

    QPropertyAnimation *sphereRotateTransformAnimation = new QPropertyAnimation(sphereTransform);
    sphereRotateTransformAnimation-&amp;gt;setTargetObject(controller);
    sphereRotateTransformAnimation-&amp;gt;setPropertyName(&quot;angle&quot;);
    sphereRotateTransformAnimation-&amp;gt;setStartValue(QVariant::fromValue(0));
    sphereRotateTransformAnimation-&amp;gt;setEndValue(QVariant::fromValue(360));
    sphereRotateTransformAnimation-&amp;gt;setDuration(10000);
    sphereRotateTransformAnimation-&amp;gt;setLoopCount(-1);
    sphereRotateTransformAnimation-&amp;gt;start();

    sphereEntity-&amp;gt;addComponent(sphereMesh);
    sphereEntity-&amp;gt;addComponent(sphereTransform);
    sphereEntity-&amp;gt;addComponent(material);
</db:programlisting>
<db:para>We use a property animation to animate the sphere transform.</db:para>
<db:para>Finally, we initialize a Qt GUI application that uses a Qt 3D window:</db:para>
<db:programlisting language="cpp">int main(int argc, char* argv[])
{
    QGuiApplication app(argc, argv);
    Qt3DExtras::Qt3DWindow view;

    Qt3DCore::QEntity *scene = createScene();

    // Camera
    Qt3DRender::QCamera *camera = view.camera();
    camera-&amp;gt;lens()-&amp;gt;setPerspectiveProjection(45.0f, 16.0f/9.0f, 0.1f, 1000.0f);
    camera-&amp;gt;setPosition(QVector3D(0, 0, 40.0f));
    camera-&amp;gt;setViewCenter(QVector3D(0, 0, 0));

    // For camera controls
    Qt3DExtras::QOrbitCameraController *camController = new Qt3DExtras::QOrbitCameraController(scene);
    camController-&amp;gt;setLinearSpeed( 50.0f );
    camController-&amp;gt;setLookSpeed( 180.0f );
    camController-&amp;gt;setCamera(camera);

    view.setRootEntity(scene);
    view.show();

    return app.exec();
}
</db:programlisting>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qt3d.git/tree/examples/qt3d/simple-cpp?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
