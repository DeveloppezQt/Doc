<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGeoJson Namespace</db:title>
<db:productname>QtLocation</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Location Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgeojson.xml">QGeoJson</db:link> namespace contains functions to import and export geolocated information from and to GeoJson files.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGeoJson</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += location</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The methods in the <db:link xlink:href="qgeojson.xml">QGeoJson</db:link> namespace can be used to convert between a GeoJSON document (see the <db:link xlink:href="https://en.wikipedia.org/wiki/GeoJSON">Wikipedia page</db:link>, <db:link xlink:href="https://tools.ietf.org/html/rfc7946">RFC</db:link>) and a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> of <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> elements ready to be used as Model in a <db:link xlink:href="qml-qtlocation-mapitemview.xml">MapItemView</db:link>.</db:para>
<db:note>
<db:para>This private class is part of Qt labs, thus not stable API, it is part of the experimental components of <db:link xlink:href="qtlocation-module.xml">QtLocation</db:link>. Until it is promoted to public API, it may be subject to source and binary-breaking changes.</db:para>
</db:note>
<db:section xml:id="importing-geojson">
<db:title>Importing GeoJSON</db:title>
<db:para>The <db:link xlink:href="qgeojson.xml#importGeoJson">importGeoJson</db:link>() method accepts a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> from which it extracts a single <db:link xlink:href="https://tools.ietf.org/html/rfc7159">JSON</db:link> object. The GeoJSON RFC expects that a valid GeoJSON Document has in its root a single JSON object. This method doesn't perform any validation on the input. The importer returns a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> containing a single <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. This map has always at least 2 (key, value) pairs. The first one has type as key, and the corresponding value is a string identifying the GeoJSON type. This value can be one of the GeoJSON object types: Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, FeatureCollection. The second pair has data as key, and the corresponding value can be either a <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link> or a list, depending on the GeoJSON type. The next section provides details about the conversation form GeoJson objects to objects known in Qt Location. The Feature type is converted into the type of the geometry contained within, with an additional (key, value) pair, where the key is properties and the value is a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. Thus, a feature Map is distinguishable from the corresponding geometry, by looking for a properties member.</db:para>
<db:section xml:id="structure-of-the-data-node">
<db:title>Structure of the data node</db:title>
<db:para>For the single type geometry objects (Point, LineString, and Polygon), the value corresponding to the data key is a <db:link xlink:href="qgeoshape.xml">QGeoShape</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When the type is Point, the data is a <db:link xlink:href="qgeocircle.xml">QGeoCircle</db:link> with the point coordinates stored in the center property.</db:para>
<db:para>For example, the following GeoJSON document contains a Point geometry:</db:para>
<db:programlisting language="cpp">{
  &quot;type&quot; : &quot;Point&quot;,
  &quot;data&quot; : [60.0, 11.0]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;Point&quot;
  data : QGeoCircle({60.000, 11.000}, -1)
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>When the type is LineString the data is a <db:link xlink:href="qgeopath.xml">QGeoPath</db:link>.</db:para>
<db:para>For example, the following GeoJSON document contains a LineString geometry:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;LineString&quot;,
    &quot;coordinates&quot; : [[13.5, 43],[10.73, 59.92]]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;LineString&quot;,
  data : QGeoPath([{43.000, 13.500}, {59.920, 10.730}])
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>When the type is Polygon, the data is a <db:link xlink:href="qgeopolygon.xml">QGeoPolygon</db:link> (holes are supported).</db:para>
<db:para>For example, the following GeoJSON document contains a Polygon geometry:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;Polygon&quot;,
    &quot;coordinates&quot; : [
      [[17.13, 51.11],
       [30.54, 50.42],
       [26.70, 58.36],
       [17.13, 51.11]]
    ],
    &quot;bbox&quot; : [60, 60, -60, -60]

}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;Polygon&quot;
  data : QGeoPolygon([{51.110, 17.130}, {50.420,30.540}, {58.360, 26.700}, {51.110, 17.130}])
}
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>For the homogeneously typed multipart geometry objects (MultiPoint, MultiLineString, MultiPolygon) the value corresponding to the data key is a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link>. Each element of the list is a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> of one of the above listed types. The elements in this list will be all of the same GeoJSON type:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>When the type is MultiPoint, the data is a List of Points.</db:para>
<db:para>For example, the following GeoJSON document contains a MultiPoint geometry:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;MultiPoint&quot;,
    &quot;coordinates&quot; : [
      [11,60],
      [5.5,60.3],
      [5.7,58.90]
    ]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;MultiPoint&quot;
  data : [
    {
      type : &quot;Point&quot;
      data : QGeoCircle({60.000, 11.000}, -1)
    },
    {
      type : &quot;Point&quot;
      data : QGeoCircle({60.300, 5.500}, -1)
    },
    {
      type : &quot;Point&quot;
      data : QGeoCircle({58.900, 5.700}, -1)
    }
  ]
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>When the type is MultiLineString, the data is a List of LineStrings.</db:para>
<db:para>For example, the following GeoJSON document contains a MultiLineString geometry:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;MultiLineString&quot;,
    &quot;coordinates&quot; : [
      [[13.5, 43], [10.73, 59.92]],
      [[9.15, 45], [-3.15, 58.90]]
    ]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;MultiLineString&quot;
  data : [
    {
      type : &quot;LineString&quot;
      data : QGeoPath([{45.000, 9.150}, {58.900, -3.150}])
    },
    {
      type : &quot;LineString&quot;
      data : QGeoPath([{43.000, 13.500}, {59.920, 10.730}])
    }
  ]
}
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>When the type is MultiPolygon, the data is a List of Polygons.</db:para>
<db:para>For example, the following GeoJSON document contains a MultiPolygon geometry:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;MultiPolygon&quot;,
    &quot;coordinates&quot; : [
       [
         [
           [17.13, 51.11],
           [30.54, 50.42],
           [26.74, 58.36],
           [17.13, 51.11]
         ]
        ],
       [
         [
           [19.84, 41.33],
           [30.45, 49.26],
           [17.07, 50.10],
           [19.84, 41.33]
         ]
       ]
    ]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;MultiPolygon&quot;
  data : [
    {
      type : &quot;Polygon&quot;
      data : QGeoPolygon([{51.110, 17.130}, {50.420,30.540}, {58.360, 26.700}, {51.110, 17.130}])
    },
    {
      type : &quot;Polygon&quot;
      data : QGeoPolygon([{41.330, 19.840}, {49.260,30.450}, {50.100, 17.070}, {41.330, 19.840}])
    }
  ]
}
</db:programlisting>
</db:listitem>
</db:itemizedlist>
<db:para>The GeometryCollection is a heterogeneous composition of other geometry types. In the resulting <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>, the value of the data member is a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> populated by QVariantMaps of various geometries, including the GeometryCollection itself.</db:para>
<db:para>For example, the following GeometryCollection:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;GeometryCollection&quot;,
    &quot;geometries&quot; : [
        {
            &quot;type&quot; : &quot;MultiPoint&quot;,
            &quot;coordinates&quot; : [
              [11,60], [5.5,60.3], [5.7,58.90]
            ]
        },
        {
            &quot;type&quot; : &quot;MultiLineString&quot;,
            &quot;coordinates&quot; : [
              [[13.5, 43], [10.73, 59.92]],
              [[9.15, 45], [-3.15, 58.90]]
            ]
        },
        {
            &quot;type&quot; : &quot;MultiPolygon&quot;,
            &quot;coordinates&quot; : [
                [
                  [[17.13, 51.11],
                   [30.54, 50.42],
                   [26.74, 58.36],
                   [17.13, 51.11]]
                ],
                [
                  [[19.84, 41.33],
                   [30.45, 49.26],
                   [17.07, 50.10],
                   [19.84, 41.33]]
                ]
            ]
        }
    ]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;GeometryCollection&quot;
  data : [
    {
      type : &quot;MultiPolygon&quot;
      data : [
        {
          type : &quot;Polygon&quot;
          data : QGeoPolygon([{41.330, 19.840}, {49.260, 30.450}, {50.100, 17.070}, {41.330, 19.840}])
        }
        {
          type : &quot;Polygon&quot;
          data : QGeoPolygon([{51.110, 17.130}, {50.420, 30.540}, {58.360, 26.740}, {51.110, 17.130}])
        }
      ]
    }
    {
      type : &quot;MultiLineString&quot;
      data : [
        {
          type : &quot;LineString&quot;
          data : QGeoPath([{45.000, 9.150}, {58.900, -3.150}])
        }
        {
          type : &quot;LineString&quot;
          data : QGeoPath([{43.000, 13.500}, {59.920, 10.730}])
        }
      ]
    }
    {
      type : &quot;MultiPoint&quot;
      data : [
        {
          type : Point
          data : QGeoCircle({58.900, 5.700}, -1)
        },
        {
          type : Point
          data : QGeoCircle({60.300, 5.500}, -1)
        },
        {
          type : Point
          data : QGeoCircle({60.000, 11.000}, -1)
        }
      ]
    }
  ]
}
</db:programlisting>
<db:para>The Feature object, which consists of one of the previous geometries together with related attributes, is structured like one of the 7 above mentioned geometry types, plus a properties member. The value of this member is a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>. The only way to distinguish a Feature from the included geometry is to check if a properties node is present in the <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link>.</db:para>
<db:para>For example, the following Feature:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;Feature&quot;,
    &quot;id&quot; : &quot;Poly&quot;,
    &quot;properties&quot; : {
        &quot;text&quot; : &quot;This is a Feature with a Polygon&quot;
    },
    &quot;geometry&quot; : {
        &quot;type&quot; : &quot;Polygon&quot;,
        &quot;coordinates&quot; : [
            [[17.13, 51.11],
             [30.54, 50.42],
             [26.70, 58.36],
             [17.13, 51.11]],
            [[23.46, 54.36],
             [20.52, 51.91],
             [28.25, 51.50],
             [26.80, 54.36],
             [23.46, 54.36]]
        ]
    }
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;Polygon&quot;
  data : QGeoPolygon([{51.110, 17.130}, {50.420,30.540}, {58.360, 26.700}, {51.110, 17.130}])
  properties : {text : &quot;This is a Feature with a Polygon&quot;}
}
</db:programlisting>
<db:para>The FeatureCollection is a composition of Feature objects. The value of the data member in a FeatureCollection is a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> populated by Feature type QVariantMaps.</db:para>
<db:para>For example, the following FeatureCollection:</db:para>
<db:programlisting language="cpp">{
    &quot;type&quot; : &quot;FeatureCollection&quot;,
    &quot;features&quot; : [
        {
            &quot;type&quot; : &quot;Feature&quot;,
            &quot;id&quot; : &quot;Poly&quot;,
            &quot;properties&quot; : {
                &quot;text&quot; : &quot;This is a Feature with a Polygon&quot;
            },
            &quot;geometry&quot; : {
               &quot;type&quot; : &quot;Polygon&quot;,
               &quot;coordinates&quot; : [
                  [[17.13, 51.11],
                   [30.54, 50.42],
                   [26.70, 58.36],
                   [17.13, 51.11]],
                  [[23.46, 54.36],
                   [20.52, 51.91],
                   [28.25, 51.50],
                   [26.80, 54.36],
                   [23.46, 54.36]]
               ]
           }
       },
       {
           &quot;type&quot; : &quot;Feature&quot;,
           &quot;id&quot; : &quot;MultiLine&quot;,
           &quot;properties&quot; : {
               &quot;text&quot; : &quot;This is a Feature with a MultiLineString&quot;
           },
           &quot;geometry&quot; : {
              &quot;type&quot; : &quot;MultiLineString&quot;,
              &quot;coordinates&quot; : [
                [[13.5, 43], [10.73, 59.92]],
                [[9.15, 45], [-3.15, 58.90]]
              ]
           }
       }
    ]
}
</db:programlisting>
<db:para>it is converted to a <db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link> with the following structure:</db:para>
<db:programlisting language="cpp">{
  type : &quot;FeatureCollection&quot;
  data : [
    {
      type : &quot;MultiLineString&quot;
      data : [
        {
          type : &quot;LineString&quot;
          data : QGeoPath([{45.000, 9.150}, {58.900, -3.150}])
        }
        {
          type : &quot;LineString&quot;
          data : QGeoPath([{43.000, 13.500}, {59.920, 10.730}])
        }
      ]
      properties : {text : &quot;This is a Feature with a MultiLineString&quot;}
    },
    {
      type : &quot;Polygon&quot;
      data : QGeoPolygon({51.110, 17.130}, {50.420, 30.540}, {58.360, 26.700}, {51.110, 17.130})
      properties : {text : &quot;This is a Feature with a Polygon&quot;}
    }
  ]
}
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="exporting-geojson">
<db:title>Exporting GeoJSON</db:title>
<db:para>The exporter accepts the <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> returned by the <db:link xlink:href="qgeojson.xml#importing-geojson">importer</db:link>, and returns a JSON document. The exporter is complementary to the importer because it executes the inverse action.</db:para>
</db:section>
<db:section xml:id="the-tostring-function">
<db:title>The toString function</db:title>
<db:para>The <db:link xlink:href="qgeojson.xml#toString">toString</db:link> outputs, for debugging purposes, the content of a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> structured like <db:link xlink:href="qgeojson.xml#importGeoJson">importGeoJson</db:link> does, to a <db:link xlink:href="qstring.xml">QString</db:link> using a prettyfied format.</db:para>
</db:section>
</db:section>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="exportGeoJson">
<db:title>QJsonDocument QGeoJson::exportGeoJson(const QVariantList &amp;<db:emphasis>geoData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJsonDocument</db:type>
<db:methodname>exportGeoJson</db:methodname>
<db:methodparam>
<db:type>const QVariantList &amp;</db:type>
<db:parameter>geoData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonDocument exportGeoJson(const QVariantList &amp;geoData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method exports the <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> <db:code role="parameter">geoData</db:code>, expected to be structured like described in the section <db:link xlink:href="qgeojson.xml#importing-geojson">Importing GeoJSON</db:link>, to a <db:link xlink:href="qjsondocument.xml">QJsonDocument</db:link> containing the data converted to GeoJSON.</db:para>
<db:note>
<db:para>This method performs no validation on the input.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeojson.xml#importGeoJson">importGeoJson</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="importGeoJson">
<db:title>QVariantList QGeoJson::importGeoJson(const QJsonDocument &amp;<db:emphasis>geoJson</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QVariantList</db:type>
<db:methodname>importGeoJson</db:methodname>
<db:methodparam>
<db:type>const QJsonDocument &amp;</db:type>
<db:parameter>geoJson</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariantList importGeoJson(const QJsonDocument &amp;geoJson)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method imports the <db:code role="parameter">geoJson</db:code> document, expected to contain valid GeoJSON data, into a <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> structured like described in the section <db:link xlink:href="qgeojson.xml#importing-geojson">Importing GeoJSON</db:link>.</db:para>
<db:note>
<db:para>This method performs no validation on the input.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgeojson.xml#exportGeoJson">exportGeoJson</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString">
<db:title>QString QGeoJson::toString(const QVariantList &amp;<db:emphasis>geoData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>const QVariantList &amp;</db:type>
<db:parameter>geoData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(const QVariantList &amp;geoData)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This method accepts the <db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link> <db:code role="parameter">geoData</db:code>, structured as described in <db:link xlink:href="qgeojson.xml#importing-geojson">Importing GeoJSON</db:link>, and returns a string containing the same data in a readable form.</db:para>
</db:section>
</db:section>
</db:article>
