<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QBoxLayout Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> class lines up child widgets horizontally or vertically.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QBoxLayout</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml" xlink:role="class">QLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qhboxlayout.xml" xlink:role="class">QHBoxLayout</db:link> and <db:link xlink:href="qvboxlayout.xml" xlink:role="class">QVBoxLayout</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QBoxLayout is part of <db:simplelist><db:member>geomanagement</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> takes the space it gets (from its parent layout or from the <db:link xlink:href="qlayout.xml#parentWidget">parentWidget</db:link>()), divides it up into a row of boxes, and makes each managed widget fill one box.</db:para>
<db:mediaobject>
<db:alt>Horizontal box layout with five child widgets</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qhboxlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>'s orientation is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> the boxes are placed in a row, with suitable sizes. Each widget (or other box) will get at least its minimum size and at most its maximum size. Any excess space is shared according to the stretch factors (more about that below).</db:para>
<db:mediaobject>
<db:alt>Vertical box layout with five child widgets</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qvboxlayout-with-5-children.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>'s orientation is <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link>, the boxes are placed in a column, again with suitable sizes.</db:para>
<db:para>The easiest way to create a <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> is to use one of the convenience classes, e.g. <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> (for <db:link xlink:href="qt.xml#Orientation-enum">Qt::Horizontal</db:link> boxes) or <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> (for <db:link xlink:href="qt.xml#Orientation-enum">Qt::Vertical</db:link> boxes). You can also use the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> constructor directly, specifying its direction as <db:link xlink:href="qboxlayout.xml#Direction-enum">LeftToRight</db:link>, <db:link xlink:href="qboxlayout.xml#Direction-enum">RightToLeft</db:link>, <db:link xlink:href="qboxlayout.xml#Direction-enum">TopToBottom</db:link>, or <db:link xlink:href="qboxlayout.xml#Direction-enum">BottomToTop</db:link>.</db:para>
<db:para>If the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> is not the top-level layout (i.e. it is not managing all of the widget's area and children), you must add it to its parent layout before you can do anything with it. The normal way to add a layout is by calling parentLayout-&gt;<db:link xlink:href="qboxlayout.xml#addLayout">addLayout</db:link>().</db:para>
<db:para>Once you have done this, you can add boxes to the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> using one of four functions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>() to add a widget to the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> and set the widget's stretch factor. (The stretch factor is along the row of boxes.)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>() to create an empty box; this is one of the functions you use to create nice and spacious dialogs. See below for ways to set margins.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml#addStretch">addStretch</db:link>() to create an empty, stretchable box.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml#addLayout">addLayout</db:link>() to add a box containing another <db:link xlink:href="qlayout.xml">QLayout</db:link> to the row and set that layout's stretch factor.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Use <db:link xlink:href="qboxlayout.xml#insertWidget">insertWidget</db:link>(), <db:link xlink:href="qboxlayout.xml#insertSpacing">insertSpacing</db:link>(), <db:link xlink:href="qboxlayout.xml#insertStretch">insertStretch</db:link>() or <db:link xlink:href="qboxlayout.xml#insertLayout">insertLayout</db:link>() to insert a box at a specified position in the layout.</db:para>
<db:para><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> also includes two margin widths:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qlayout.xml#setContentsMargins">setContentsMargins</db:link>() sets the width of the outer border on each side of the widget. This is the width of the reserved space along each of the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>'s four sides.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qboxlayout.xml#setSpacing">setSpacing</db:link>() sets the width between neighboring boxes. (You can use <db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>() to get more space at a particular spot.)</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The margin default is provided by the style. The default margin most Qt styles specify is 9 for child widgets and 11 for windows. The spacing defaults to the same as the margin width for a top-level layout, or to the same as the parent layout.</db:para>
<db:para>To remove a widget from a layout, call <db:link xlink:href="qlayout.xml#removeWidget">removeWidget</db:link>(). Calling <db:link xlink:href="qwidget.xml#hide">QWidget::hide</db:link>() on a widget also effectively removes the widget from the layout until <db:link xlink:href="qwidget.xml#show">QWidget::show</db:link>() is called.</db:para>
<db:para>You will almost always want to use <db:link xlink:href="qvboxlayout.xml">QVBoxLayout</db:link> and <db:link xlink:href="qhboxlayout.xml">QHBoxLayout</db:link> rather than <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> because of their convenient constructors.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qgridlayout.xml">QGridLayout</db:link></db:member>
<db:member><db:link xlink:href="qstackedlayout.xml">QStackedLayout</db:link></db:member>
<db:member><db:link xlink:href="layout.xml">Layout Management</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Direction-enum">
<db:title>enum QBoxLayout::Direction</db:title>
<db:enumsynopsis>
<db:enumname>Direction</db:enumname>
<db:enumitem>
<db:enumidentifier>LeftToRight</db:enumidentifier>
<db:enumvalue>0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>RightToLeft</db:enumidentifier>
<db:enumvalue>1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>TopToBottom</db:enumidentifier>
<db:enumvalue>2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>BottomToTop</db:enumidentifier>
<db:enumvalue>3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Down</db:enumidentifier>
<db:enumvalue>TopToBottom</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Up</db:enumidentifier>
<db:enumvalue>BottomToTop</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This type is used to determine the direction of a box layout.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:emphasis>::LeftToRight</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>Horizontal from left to right.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:emphasis>::RightToLeft</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Horizontal from right to left.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:emphasis>::TopToBottom</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>Vertical from top to bottom.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link></db:emphasis>::BottomToTop</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Vertical from bottom to top.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QBoxLayout">
<db:title>[explicit] QBoxLayout::QBoxLayout(QBoxLayout::Direction <db:emphasis>dir</db:emphasis>, QWidget *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QBoxLayout</db:methodname>
<db:methodparam>
<db:type>QBoxLayout::Direction</db:type>
<db:parameter>dir</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QBoxLayout(QBoxLayout::Direction dir, QWidget *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> with direction <db:code role="parameter">dir</db:code> and parent widget <db:code role="parameter">parent</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#direction">direction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QBoxLayout">
<db:title>[virtual] QBoxLayout::~QBoxLayout()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QBoxLayout</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QBoxLayout()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this box layout.</db:para>
<db:para>The layout's widgets aren't destroyed.</db:para>
</db:section>
<db:section xml:id="addItem">
<db:title>[override virtual] void QBoxLayout::addItem(QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>addItem</db:methodname>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addItem(QLayoutItem *item) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#addItem" role="function">QLayout::addItem(QLayoutItem *item)</db:link>.</db:para>
</db:section>
<db:section xml:id="addLayout">
<db:title>void QBoxLayout::addLayout(QLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addLayout</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addLayout(QLayout *layout, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">layout</db:code> to the end of the box, with serial stretch factor <db:code role="parameter">stretch</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#insertLayout">insertLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSpacerItem">
<db:title>[since 4.4] void QBoxLayout::addSpacerItem(QSpacerItem *<db:emphasis>spacerItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSpacerItem</db:methodname>
<db:methodparam>
<db:type>QSpacerItem *</db:type>
<db:parameter>spacerItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSpacerItem(QSpacerItem *spacerItem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">spacerItem</db:code> to the end of this box layout.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addStretch">addStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addSpacing">
<db:title>void QBoxLayout::addSpacing(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addSpacing(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a non-stretchable space (a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>) with size <db:code role="parameter">size</db:code> to the end of this box layout. <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> provides default margin and spacing. This function adds additional space.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#insertSpacing">insertSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addStretch">
<db:title>void QBoxLayout::addStretch(int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addStretch(int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a stretchable space (a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>) with zero minimum size and stretch factor <db:code role="parameter">stretch</db:code> to the end of this box layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#insertStretch">insertStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addStrut">
<db:title>void QBoxLayout::addStrut(int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addStrut</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addStrut(int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Limits the perpendicular dimension of the box (e.g. height if the box is <db:link xlink:href="qboxlayout.xml#Direction-enum">LeftToRight</db:link>) to a minimum of <db:code role="parameter">size</db:code>. Other constraints may increase the limit.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addWidget">
<db:title>void QBoxLayout::addWidget(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWidget(QWidget *widget, int stretch, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">widget</db:code> to the end of this box layout, with a stretch factor of <db:code role="parameter">stretch</db:code> and alignment <db:code role="parameter">alignment</db:code>.</db:para>
<db:para>The stretch factor applies only in the <db:link xlink:href="qboxlayout.xml#direction">direction</db:link> of the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>, and is relative to the other boxes and widgets in this <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>. Widgets and boxes with higher stretch factors grow more.</db:para>
<db:para>If the stretch factor is 0 and nothing else in the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> has a stretch factor greater than zero, the space is distributed according to the <db:link xlink:href="qwidget.xml">QWidget</db:link>:sizePolicy() of each widget that's involved.</db:para>
<db:para>The alignment is specified by <db:code role="parameter">alignment</db:code>. The default alignment is 0, which means that the widget fills the entire cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addLayout">addLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addStretch">addStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addStrut">addStrut</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="count">
<db:title>[override virtual] int QBoxLayout::count() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>count</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int count() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#count" role="function">QLayout::count() const</db:link>.</db:para>
</db:section>
<db:section xml:id="direction">
<db:title>QBoxLayout::Direction QBoxLayout::direction() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QBoxLayout::Direction</db:type>
<db:methodname>direction</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QBoxLayout::Direction direction() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the direction of the box. <db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>() and <db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>() work in this direction; the stretch stretches in this direction.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#setDirection">setDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#Direction-enum">QBoxLayout::Direction</db:link></db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="expandingDirections">
<db:title>[override virtual] Qt::Orientations QBoxLayout::expandingDirections() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>Qt::Orientations</db:type>
<db:methodname>expandingDirections</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Orientations expandingDirections() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#expandingDirections" role="function">QLayout::expandingDirections() const</db:link>.</db:para>
</db:section>
<db:section xml:id="hasHeightForWidth">
<db:title>[override virtual] bool QBoxLayout::hasHeightForWidth() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeightForWidth</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeightForWidth() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#hasHeightForWidth" role="function">QLayoutItem::hasHeightForWidth() const</db:link>.</db:para>
</db:section>
<db:section xml:id="heightForWidth">
<db:title>[override virtual] int QBoxLayout::heightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>heightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int heightForWidth(int w) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#heightForWidth" role="function">QLayoutItem::heightForWidth(int) const</db:link>.</db:para>
</db:section>
<db:section xml:id="insertItem">
<db:title>void QBoxLayout::insertItem(int <db:emphasis>index</db:emphasis>, QLayoutItem *<db:emphasis>item</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLayoutItem *</db:type>
<db:parameter>item</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertItem(int index, QLayoutItem *item)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">item</db:code> into this box layout at position <db:code role="parameter">index</db:code>. If <db:code role="parameter">index</db:code> is negative, the item is added at the end.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addItem">addItem</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertWidget">insertWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertLayout">insertLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertStretch">insertStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertSpacing">insertSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertLayout">
<db:title>void QBoxLayout::insertLayout(int <db:emphasis>index</db:emphasis>, QLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertLayout</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertLayout(int index, QLayout *layout, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">layout</db:code> at position <db:code role="parameter">index</db:code>, with stretch factor <db:code role="parameter">stretch</db:code>. If <db:code role="parameter">index</db:code> is negative, the layout is added at the end.</db:para>
<db:para><db:code role="parameter">layout</db:code> becomes a child of the box layout.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addLayout">addLayout</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSpacerItem">
<db:title>[since 4.4] void QBoxLayout::insertSpacerItem(int <db:emphasis>index</db:emphasis>, QSpacerItem *<db:emphasis>spacerItem</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertSpacerItem</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QSpacerItem *</db:type>
<db:parameter>spacerItem</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertSpacerItem(int index, QSpacerItem *spacerItem)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">spacerItem</db:code> at position <db:code role="parameter">index</db:code>, with zero minimum size and stretch factor. If <db:code role="parameter">index</db:code> is negative the space is added at the end.</db:para>
<db:para>This function was introduced in Qt 4.4.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addSpacerItem">addSpacerItem</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertStretch">insertStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertSpacing">insertSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertSpacing">
<db:title>void QBoxLayout::insertSpacing(int <db:emphasis>index</db:emphasis>, int <db:emphasis>size</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>size</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertSpacing(int index, int size)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a non-stretchable space (a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>) at position <db:code role="parameter">index</db:code>, with size <db:code role="parameter">size</db:code>. If <db:code role="parameter">index</db:code> is negative the space is added at the end.</db:para>
<db:para>The box layout has default margin and spacing. This function adds additional space.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addSpacing">addSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertItem">insertItem</db:link>()</db:member>
<db:member><db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertStretch">
<db:title>void QBoxLayout::insertStretch(int <db:emphasis>index</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertStretch(int index, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts a stretchable space (a <db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link>) at position <db:code role="parameter">index</db:code>, with zero minimum size and stretch factor <db:code role="parameter">stretch</db:code>. If <db:code role="parameter">index</db:code> is negative the space is added at the end.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addStretch">addStretch</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertItem">insertItem</db:link>()</db:member>
<db:member><db:link xlink:href="qspaceritem.xml">QSpacerItem</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insertWidget">
<db:title>void QBoxLayout::insertWidget(int <db:emphasis>index</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis> = 0, Qt::Alignment <db:emphasis>alignment</db:emphasis> = Qt::Alignment())</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>insertWidget</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
<db:initializer>Qt::Alignment()</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insertWidget(int index, QWidget *widget, int stretch, Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts <db:code role="parameter">widget</db:code> at position <db:code role="parameter">index</db:code>, with stretch factor <db:code role="parameter">stretch</db:code> and alignment <db:code role="parameter">alignment</db:code>. If <db:code role="parameter">index</db:code> is negative, the widget is added at the end.</db:para>
<db:para>The stretch factor applies only in the <db:link xlink:href="qboxlayout.xml#direction">direction</db:link> of the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>, and is relative to the other boxes and widgets in this <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link>. Widgets and boxes with higher stretch factors grow more.</db:para>
<db:para>If the stretch factor is 0 and nothing else in the <db:link xlink:href="qboxlayout.xml">QBoxLayout</db:link> has a stretch factor greater than zero, the space is distributed according to the <db:link xlink:href="qwidget.xml">QWidget</db:link>:sizePolicy() of each widget that's involved.</db:para>
<db:para>The alignment is specified by <db:code role="parameter">alignment</db:code>. The default alignment is 0, which means that the widget fills the entire cell.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#addWidget">addWidget</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#insertItem">insertItem</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="invalidate">
<db:title>[override virtual] void QBoxLayout::invalidate()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>invalidate</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void invalidate() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#invalidate" role="function">QLayout::invalidate()</db:link>.</db:para>
<db:para>Resets cached information.</db:para>
</db:section>
<db:section xml:id="itemAt">
<db:title>[override virtual] QLayoutItem *QBoxLayout::itemAt(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>itemAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * itemAt(int index) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#itemAt" role="function">QLayout::itemAt(int index) const</db:link>.</db:para>
</db:section>
<db:section xml:id="maximumSize">
<db:title>[override virtual] QSize QBoxLayout::maximumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>maximumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize maximumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#maximumSize" role="function">QLayout::maximumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumHeightForWidth">
<db:title>[override virtual] int QBoxLayout::minimumHeightForWidth(int <db:emphasis>w</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>minimumHeightForWidth</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>w</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int minimumHeightForWidth(int w) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#minimumHeightForWidth" role="function">QLayoutItem::minimumHeightForWidth(int w) const</db:link>.</db:para>
</db:section>
<db:section xml:id="minimumSize">
<db:title>[override virtual] QSize QBoxLayout::minimumSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>minimumSize</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize minimumSize() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#minimumSize" role="function">QLayout::minimumSize() const</db:link>.</db:para>
</db:section>
<db:section xml:id="setDirection">
<db:title>void QBoxLayout::setDirection(QBoxLayout::Direction <db:emphasis>direction</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDirection</db:methodname>
<db:methodparam>
<db:type>QBoxLayout::Direction</db:type>
<db:parameter>direction</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDirection(QBoxLayout::Direction direction)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the direction of this layout to <db:code role="parameter">direction</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#direction">direction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setGeometry">
<db:title>[override virtual] void QBoxLayout::setGeometry(const QRect &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>setGeometry</db:methodname>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>r</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setGeometry(const QRect &amp;r) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#setGeometry" role="function">QLayout::setGeometry(const QRect &amp;r)</db:link>.</db:para>
</db:section>
<db:section xml:id="setSpacing">
<db:title>void QBoxLayout::setSpacing(int <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setSpacing</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setSpacing(int spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements <db:link xlink:href="qlayout.xml#spacing-prop">QLayout::setSpacing</db:link>(). Sets the spacing property to <db:code role="parameter">spacing</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#spacing-prop">QLayout::setSpacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#spacing">spacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretch">
<db:title>[since 4.5] void QBoxLayout::setStretch(int <db:emphasis>index</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStretch(int index, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor at position <db:code role="parameter">index</db:code>. to <db:code role="parameter">stretch</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#stretch">stretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretchFactor">
<db:title>bool QBoxLayout::setStretchFactor(QWidget *<db:emphasis>widget</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setStretchFactor</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setStretchFactor(QWidget *widget, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the stretch factor for <db:code role="parameter">widget</db:code> to <db:code role="parameter">stretch</db:code> and returns true if <db:code role="parameter">widget</db:code> is found in this layout (not including child layouts); otherwise returns <db:code>false</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStretchFactor-1">
<db:title>bool QBoxLayout::setStretchFactor(QLayout *<db:emphasis>layout</db:emphasis>, int <db:emphasis>stretch</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>setStretchFactor</db:methodname>
<db:methodparam>
<db:type>QLayout *</db:type>
<db:parameter>layout</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>stretch</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool setStretchFactor(QLayout *layout, int stretch)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Sets the stretch factor for the layout <db:code role="parameter">layout</db:code> to <db:code role="parameter">stretch</db:code> and returns <db:code>true</db:code> if <db:code role="parameter">layout</db:code> is found in this layout (not including child layouts); otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QBoxLayout::sizeHint() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>sizeHint</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize sizeHint() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayoutitem.xml#sizeHint" role="function">QLayoutItem::sizeHint() const</db:link>.</db:para>
</db:section>
<db:section xml:id="spacing">
<db:title>int QBoxLayout::spacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>spacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int spacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements <db:link xlink:href="qlayout.xml#spacing-prop">QLayout::spacing</db:link>(). If the spacing property is valid, that value is returned. Otherwise, a value for the spacing property is computed and returned. Since layout spacing in a widget is style dependent, if the parent is a widget, it queries the style for the (horizontal or vertical) spacing of the layout. Otherwise, the parent is a layout, and it queries the parent layout for the spacing().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qlayout.xml#spacing-prop">QLayout::spacing</db:link>()</db:member>
<db:member><db:link xlink:href="qboxlayout.xml#setSpacing">setSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="stretch">
<db:title>[since 4.5] int QBoxLayout::stretch(int <db:emphasis>index</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>stretch</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int stretch(int index) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the stretch factor at position <db:code role="parameter">index</db:code>.</db:para>
<db:para>This function was introduced in Qt 4.5.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qboxlayout.xml#setStretch">setStretch</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="takeAt">
<db:title>[override virtual] QLayoutItem *QBoxLayout::takeAt(int <db:emphasis>index</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QLayoutItem *</db:type>
<db:methodname>takeAt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>index</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QLayoutItem * takeAt(int index) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qlayout.xml#takeAt" role="function">QLayout::takeAt(int index)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
