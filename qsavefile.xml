<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QSaveFile Class</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsavefile.xml">QSaveFile</db:link> class provides an interface for safely writing to files.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSaveFile</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qfiledevice.xml" xlink:role="class">QFileDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSaveFile is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qsavefile.xml">QSaveFile</db:link> is an I/O device for writing text and binary files, without losing existing data if the writing operation fails.</db:para>
<db:para>While writing, the contents will be written to a temporary file, and if no error happened, <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() will move it to the final file. This ensures that no data at the final file is lost in case an error happens while writing, and no partially-written file is ever present at the final location. Always use <db:link xlink:href="qsavefile.xml">QSaveFile</db:link> when saving entire documents to disk.</db:para>
<db:para><db:link xlink:href="qsavefile.xml">QSaveFile</db:link> automatically detects errors while writing, such as the full partition situation, where <db:link xlink:href="qiodevice.xml#write">write</db:link>() cannot write all the bytes. It will remember that an error happened, and will discard the temporary file in <db:link xlink:href="qsavefile.xml#commit">commit</db:link>().</db:para>
<db:para>Much like with <db:link xlink:href="qfile.xml">QFile</db:link>, the file is opened with <db:link xlink:href="qsavefile.xml#open">open</db:link>(). Data is usually read and written using <db:link xlink:href="qdatastream.xml">QDataStream</db:link> or <db:link xlink:href="qtextstream.xml">QTextStream</db:link>, but you can also call the <db:link xlink:href="qiodevice.xml">QIODevice</db:link>-inherited functions <db:link xlink:href="qiodevice.xml#read">read</db:link>(), <db:link xlink:href="qiodevice.xml#readLine">readLine</db:link>(), <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), <db:link xlink:href="qiodevice.xml#write">write</db:link>().</db:para>
<db:para>Unlike <db:link xlink:href="qfile.xml">QFile</db:link>, calling <db:link xlink:href="qfiledevice.xml#close">close</db:link>() is not allowed. <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() replaces it. If <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() was not called and the <db:link xlink:href="qsavefile.xml">QSaveFile</db:link> instance is destroyed, the temporary file is discarded.</db:para>
<db:para>To abort saving due to an application error, call <db:link xlink:href="qsavefile.xml#cancelWriting">cancelWriting</db:link>(), so that even a call to <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() later on will not save.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtextstream.xml">QTextStream</db:link></db:member>
<db:member><db:link xlink:href="qdatastream.xml">QDataStream</db:link></db:member>
<db:member><db:link xlink:href="qfileinfo.xml">QFileInfo</db:link></db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qfile.xml">QFile</db:link></db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSaveFile">
<db:title>[explicit] QSaveFile::QSaveFile(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="QSaveFile-1">
<db:title>[explicit] QSaveFile::QSaveFile(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Constructs a new file object to represent the file with the given <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="QSaveFile-2">
<db:title>[explicit] QSaveFile::QSaveFile(const QString &amp;<db:emphasis>name</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a new file object with the given <db:code role="parameter">parent</db:code> to represent the file with the specified <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSaveFile">
<db:title>[virtual noexcept] QSaveFile::~QSaveFile()</db:title>
<db:para>Destroys the file object, discarding the saved contents unless <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() was called.</db:para>
</db:section>
<db:section xml:id="cancelWriting">
<db:title>void QSaveFile::cancelWriting()</db:title>
<db:para>Cancels writing the new file.</db:para>
<db:para>If the application changes its mind while saving, it can call cancelWriting(), which sets an error code so that <db:link xlink:href="qsavefile.xml#commit">commit</db:link>() will discard the temporary file.</db:para>
<db:para>Alternatively, it can simply make sure not to call <db:link xlink:href="qsavefile.xml#commit">commit</db:link>().</db:para>
<db:para>Further write operations are possible after calling this method, but none of it will have any effect, the written file will be discarded.</db:para>
<db:para>This method has no effect when direct write fallback is used. This is the case when saving over an existing file in a readonly directory: no temporary file can be created, so the existing file is overwritten no matter what, and cancelWriting() cannot do anything about that, the contents of the existing file will be lost.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml#commit">commit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="commit">
<db:title>bool QSaveFile::commit()</db:title>
<db:para>Commits the changes to disk, if all previous writes were successful.</db:para>
<db:para>It is mandatory to call this at the end of the saving operation, otherwise the file will be discarded.</db:para>
<db:para>If an error happened during writing, deletes the temporary file and returns false. Otherwise, renames it to the final <db:link xlink:href="qsavefile.xml#fileName">fileName</db:link> and returns true on success. Finally, closes the device.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml#cancelWriting">cancelWriting</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="directWriteFallback">
<db:title>bool QSaveFile::directWriteFallback() const</db:title>
<db:para>Returns true if the fallback solution for saving files in read-only directories is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml#setDirectWriteFallback">setDirectWriteFallback</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="fileName">
<db:title>[override virtual] QString QSaveFile::fileName() const</db:title>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#fileName" role="function">QFileDevice::fileName() const</db:link>.</db:para>
<db:para>Returns the name set by <db:link xlink:href="qsavefile.xml#setFileName">setFileName</db:link>() or to the <db:link xlink:href="qsavefile.xml">QSaveFile</db:link> constructor.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="open">
<db:title>[override virtual] bool QSaveFile::open(QIODevice::OpenMode <db:emphasis>mode</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#open" role="function">QIODevice::open(QIODevice::OpenMode mode)</db:link>.</db:para>
<db:para>Opens the file using OpenMode <db:code role="parameter">mode</db:code>, returning true if successful; otherwise false.</db:para>
<db:para>Important: the <db:code role="parameter">mode</db:code> must include <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::WriteOnly</db:link>. It may also have additional flags, such as <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Text</db:link> and <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Unbuffered</db:link>.</db:para>
<db:para><db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::ReadWrite</db:link> and <db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::Append</db:link> are not supported at the moment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qiodevice.xml#OpenModeFlag-enum">QIODevice::OpenMode</db:link></db:member>
<db:member><db:link xlink:href="qsavefile.xml#setFileName">setFileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirectWriteFallback">
<db:title>void QSaveFile::setDirectWriteFallback(bool <db:emphasis>enabled</db:emphasis>)</db:title>
<db:para>Allows writing over the existing file if necessary.</db:para>
<db:para><db:link xlink:href="qsavefile.xml">QSaveFile</db:link> creates a temporary file in the same directory as the final file and atomically renames it. However this is not possible if the directory permissions do not allow creating new files. In order to preserve atomicity guarantees, <db:link xlink:href="qsavefile.xml#open">open</db:link>() fails when it cannot create the temporary file.</db:para>
<db:para>In order to allow users to edit files with write permissions in a directory with restricted permissions, call setDirectWriteFallback() with <db:code role="parameter">enabled</db:code> set to true, and the following calls to <db:link xlink:href="qsavefile.xml#open">open</db:link>() will fallback to opening the existing file directly and writing into it, without the use of a temporary file. This does not have atomicity guarantees, i.e. an application crash or for instance a power failure could lead to a partially-written file on disk. It also means <db:link xlink:href="qsavefile.xml#cancelWriting">cancelWriting</db:link>() has no effect, in such a case.</db:para>
<db:para>Typically, to save documents edited by the user, call setDirectWriteFallback(true), and to save application internal files (configuration files, data files, ...), keep the default setting which ensures atomicity.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsavefile.xml#directWriteFallback">directWriteFallback</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFileName">
<db:title>void QSaveFile::setFileName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:para>Sets the <db:code role="parameter">name</db:code> of the file. The name can have no path, a relative path, or an absolute path.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfile.xml#setFileName">QFile::setFileName</db:link>()</db:member>
<db:member><db:link xlink:href="qsavefile.xml#fileName">fileName</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="writeData">
<db:title>[override virtual protected] qint64 QSaveFile::writeData(const char *<db:emphasis>data</db:emphasis>, qint64 <db:emphasis>len</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qfiledevice.xml#writeData" role="function">QFileDevice::writeData(const char *data, qint64 len)</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
