<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>&lt;QtEnvironmentVariables&gt;</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="function-documentation">
<db:title>Function Documentation</db:title>
<db:section xml:id="qEnvironmentVariable-1">
<db:title>QString qEnvironmentVariable(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:bridgehead renderas="sect2" xml:id="qEnvironmentVariable">QString qEnvironmentVariable(const char *<db:emphasis>varName</db:emphasis>, const QString &amp;<db:emphasis>defaultValue</db:emphasis>)</db:bridgehead>
<db:para>These functions return the value of the environment variable, <db:code role="parameter">varName</db:code>, as a <db:link xlink:href="qstring.xml">QString</db:link>. If no variable <db:code role="parameter">varName</db:code> is found in the environment and <db:code role="parameter">defaultValue</db:code> is provided, <db:code role="parameter">defaultValue</db:code> is returned. Otherwise QString() is returned.</db:para>
<db:para>The Qt environment manipulation functions are thread-safe, but this requires that the C library equivalent functions like getenv and putenv are not directly called.</db:para>
<db:para>The following table describes how to choose between <db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>() and <db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>():</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Condition</db:para>
</db:th>
<db:th>
<db:para>Recommendation</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Variable contains file paths or user text</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Windows-specific code</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Unix-specific code, destination variable is not <db:link xlink:href="qstring.xml">QString</db:link> and/or is used to interface with non-Qt APIs</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Destination variable is a <db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Destination variable is a <db:link xlink:href="qbytearray.xml">QByteArray</db:link> or std::string</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>on Unix systems, this function may produce data loss if the original string contains arbitrary binary data that cannot be decoded by the locale codec. Use <db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>() instead for that case. On Windows, this function is lossless.</db:para>
</db:note>
<db:note>
<db:para>the variable name <db:code role="parameter">varName</db:code> must contain only US-ASCII characters.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qputenv">qputenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsEmpty">qEnvironmentVariableIsEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qEnvironmentVariable">
<db:title>QString qEnvironmentVariable(const char *<db:emphasis>varName</db:emphasis>, const QString &amp;<db:emphasis>defaultValue</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>qEnvironmentVariable</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString qEnvironmentVariable(const char *varName, const QString &amp;defaultValue)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="qEnvironmentVariable-1">
<db:title>QString qEnvironmentVariable(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QString</db:type>
<db:methodname>qEnvironmentVariable</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString qEnvironmentVariable(const char *varName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
</db:section>
<db:section xml:id="qEnvironmentVariableIntValue">
<db:title>int qEnvironmentVariableIntValue(const char *<db:emphasis>varName</db:emphasis>, bool *<db:emphasis>ok</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qEnvironmentVariableIntValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>bool *</db:type>
<db:parameter>ok</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qEnvironmentVariableIntValue(const char *varName, bool *ok)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the numerical value of the environment variable <db:code role="parameter">varName</db:code>. If <db:code role="parameter">ok</db:code> is not null, sets *ok to true or false depending on the success of the conversion.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">    qgetenv(varName).toInt(ok, 0)
</db:programlisting>
<db:para>except that it's much faster, and can't throw exceptions.</db:para>
<db:note>
<db:para>there's a limit on the length of the value, which is sufficient for all valid values of int, not counting leading zeroes or spaces. Values that are too long will either be truncated or this function will set <db:code role="parameter">ok</db:code> to false.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qEnvironmentVariableIsEmpty">
<db:title>bool qEnvironmentVariableIsEmpty(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qEnvironmentVariableIsEmpty</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qEnvironmentVariableIsEmpty(const char *varName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the environment variable <db:code role="parameter">varName</db:code> is empty.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">    qgetenv(varName).isEmpty()
</db:programlisting>
<db:para>except that it's potentially much faster, and can't throw exceptions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qEnvironmentVariableIsSet">
<db:title>bool qEnvironmentVariableIsSet(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qEnvironmentVariableIsSet</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qEnvironmentVariableIsSet(const char *varName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns whether the environment variable <db:code role="parameter">varName</db:code> is set.</db:para>
<db:para>Equivalent to</db:para>
<db:programlisting language="cpp">    !qgetenv(varName).isNull()
</db:programlisting>
<db:para>except that it's potentially much faster, and can't throw exceptions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsEmpty">qEnvironmentVariableIsEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qgetenv">
<db:title>QByteArray qgetenv(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QByteArray</db:type>
<db:methodname>qgetenv</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray qgetenv(const char *varName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">thread safe</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the environment variable with name <db:code role="parameter">varName</db:code> as a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>. If no variable by that name is found in the environment, this function returns a default-constructed <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>The Qt environment manipulation functions are thread-safe, but this requires that the C library equivalent functions like getenv and putenv are not directly called.</db:para>
<db:para>To convert the data to a <db:link xlink:href="qstring.xml">QString</db:link> use <db:link xlink:href="qstring.xml#fromLocal8Bit">QString::fromLocal8Bit</db:link>().</db:para>
<db:note>
<db:para>on desktop Windows, qgetenv() may produce data loss if the original string contains Unicode characters not representable in the ANSI encoding. Use <db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>() instead. On Unix systems, this function is lossless.</db:para>
</db:note>
<db:note>
<db:para>This function is <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qputenv">qputenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsSet">qEnvironmentVariableIsSet</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariableIsEmpty">qEnvironmentVariableIsEmpty</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qputenv">
<db:title>bool qputenv(const char *<db:emphasis>varName</db:emphasis>, QByteArrayView <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qputenv</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArrayView</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qputenv(const char *varName, QByteArrayView value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function sets the <db:code role="parameter">value</db:code> of the environment variable named <db:code role="parameter">varName</db:code>. It will create the variable if it does not exist. It returns 0 if the variable could not be set.</db:para>
<db:para>Calling qputenv with an empty value removes the environment variable on Windows, and makes it set (but empty) on Unix. Prefer using <db:link xlink:href="qtenvironmentvariables-proxy.xml#qunsetenv">qunsetenv</db:link>() for fully portable behavior.</db:para>
<db:note>
<db:para>qputenv() was introduced because putenv() from the standard C library was deprecated in VC2005 (and later versions). qputenv() uses the replacement function in VC, and calls the standard C library's implementation on all other platforms.</db:para>
</db:note>
<db:note>
<db:para>In Qt versions prior to 6.5, the <db:code role="parameter">value</db:code> argument was <db:link xlink:href="qbytearray.xml">QByteArray</db:link>, not <db:link xlink:href="qbytearrayview.xml">QByteArrayView</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="qunsetenv">
<db:title>bool qunsetenv(const char *<db:emphasis>varName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qunsetenv</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>varName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qunsetenv(const char *varName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function deletes the variable <db:code role="parameter">varName</db:code> from the environment.</db:para>
<db:para>Returns true on success.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qputenv">qputenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qgetenv">qgetenv</db:link>()</db:member>
<db:member><db:link xlink:href="qtenvironmentvariables-proxy.xml#qEnvironmentVariable">qEnvironmentVariable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
