<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Model-View Server</db:title>
<db:productname>QtRemoteObjects</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Remote Objects Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Remote Objects Reference Documentation.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This is the server-side application that accompanies the <db:link xlink:href="qtremoteobjects-modelviewclient-example.xml">Model-View Client</db:link>.</db:para>
<db:para>This example showcases how to make a simple server program that displays and makes changes to a <db:link xlink:href="qtreeview.xml">QTreeView</db:link> which is made available on a Remote Objects network.</db:para>
<db:programlisting language="cpp">    QRemoteObjectRegistryHost node(QUrl(QStringLiteral(&quot;local:registry&quot;)));
</db:programlisting>
<db:para>We start by creating a <db:link xlink:href="qremoteobjectregistryhost.xml">QRemoteObjectRegistryHost</db:link> with which other Remote Objects will connect, be registered and then be advertised by. The model we create can then be easily acquired from the client side by just connecting to the registry.</db:para>
<db:programlisting language="cpp">    std::unique_ptr&amp;lt;QStandardItemModel&amp;gt; sourceModel = createModel();

    QList&amp;lt;int&amp;gt; roles;
    roles &amp;lt;&amp;lt; Qt::DisplayRole &amp;lt;&amp;lt; Qt::BackgroundRole;
</db:programlisting>
<db:para>Now we have to create the model we need. The exact implementation is available in the source code, to which you can navigate by pressing the link further down on this page. We also define which <db:emphasis>roles</db:emphasis> we want to expose to the <db:link xlink:href="qtremoteobjects-replica.xml#replica">Replica</db:link> on the client side.</db:para>
<db:programlisting language="cpp">    QRemoteObjectHost node2(QUrl(QStringLiteral(&quot;local:replica&quot;)), QUrl(QStringLiteral(&quot;local:registry&quot;)));
    node2.enableRemoting(sourceModel.get(), QStringLiteral(&quot;RemoteModel&quot;), roles);
</db:programlisting>
<db:para>Here, we create the <db:link xlink:href="qremoteobjecthost.xml">QRemoteObjectHost</db:link> that connects to, and shares all its Remote Objects with, the Registry we created earlier. We then start remoting the model we just created with the name <db:code>RemoteModel</db:code>. We also pass the <db:emphasis>roles</db:emphasis> argument here.</db:para>
<db:programlisting language="cpp">    QTreeView view;
    view.setWindowTitle(QStringLiteral(&quot;SourceView&quot;));
    view.setModel(sourceModel.get());
    view.show();
</db:programlisting>
<db:para>We then display the model with a <db:link xlink:href="qtreeview.xml">QTreeView</db:link> widget.</db:para>
<db:programlisting language="cpp">    TimerHandler handler;
    handler.model = sourceModel.get();
    QTimer::singleShot(5000, &amp;amp;handler, &amp;amp;TimerHandler::changeData);
    QTimer::singleShot(10000, &amp;amp;handler, &amp;amp;TimerHandler::insertData);
    QTimer::singleShot(11000, &amp;amp;handler, &amp;amp;TimerHandler::changeFlags);
    QTimer::singleShot(12000, &amp;amp;handler, &amp;amp;TimerHandler::removeData);
    QTimer::singleShot(13000, &amp;amp;handler, &amp;amp;TimerHandler::moveData);
</db:programlisting>
<db:para>For the sake of keeping the example light-weight it performs some automated actions to affect the model shortly after the server application launches. These changes can then be seen on both the server and client side. You can also change the text in the fields on the server side and see it update on the client side.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtremoteobjects.git/tree/examples/remoteobjects/modelviewserver?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
