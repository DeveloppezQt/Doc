<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Compiler</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Overview of Qt Quick Compiler components.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt Quick Compiler lets you process QML and JavaScript code at compile time, rather than at run time. This allows for:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Faster application startup</db:para>
</db:listitem>
<db:listitem>
<db:para>Faster evaluation of bindings and functions</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The Qt Quick Compiler consist of two components:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-type-compiler.xml">QML type compiler</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-script-compiler.xml">QML script compiler</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para><db:emphasis>qmltc</db:emphasis>, <db:emphasis>qmlsc</db:emphasis> and <db:link xlink:href="qtqml-tool-qmlcachegen.xml">qmlcachegen</db:link> are internal build tools. If you need to care about their invocation, you are either writing a build system, or you are doing something wrong.</db:para>
</db:note>
<db:section xml:id="the-qml-type-compiler">
<db:title>The QML type compiler</db:title>
<db:para>The <db:link xlink:href="qtqml-qml-type-compiler.xml">QML type compiler</db:link>, <db:emphasis>(qmltc)</db:emphasis> compiles QML types to C++ classes. These C++ classes are then added to your application and can be instantiated from other C++ code. This way you can avoid much of the overhead of using <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> to create instances of your QML types. In order to benefit from <db:link xlink:href="qtqml-qml-type-compiler.xml">qmltc</db:link>, you need to adapt your C++ code and make use of the new classes.</db:para>
<db:para><db:link xlink:href="qtqml-qml-type-compiler.xml">qmltc</db:link> can only compile a QML document if it completely understands its structure. It will fail if an unsupported language feature is encountered. It does not have to understand the JavaScript code in bindings and functions, though.</db:para>
</db:section>
<db:section xml:id="the-qml-script-compiler">
<db:title>The QML script compiler</db:title>
<db:para>The <db:link xlink:href="qtqml-qml-script-compiler.xml">QML script compiler</db:link>, (<db:emphasis>qmlsc</db:emphasis> and <db:emphasis>qmlcachegen</db:emphasis>) compiles bindings and functions to both, an efficient byte code and C++ functions. This process automatically happens behind the scenes if you are using <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> to specify your QML modules. For more information about available options to control different aspects of QML compilation, see <db:link xlink:href="qt-add-qml-module.xml#caching-compiled-qml-sources">Caching compiled QML sources</db:link>.</db:para>
<db:para>At compile time, for each QML or JavaScript document a corresponding C++ file is created and built into the application. The C++ file then contains a <db:emphasis>QML compilation unit</db:emphasis>, which consists of:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>An efficient representation of the document structure</db:para>
</db:listitem>
<db:listitem>
<db:para>Byte code for all functions and bindings in the document</db:para>
</db:listitem>
<db:listitem>
<db:para>C++ code for functions and bindings the compiler fully understands</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The QML engine then refrains from compiling the QML or JavaScript source code at run time and instead uses the pre-built compilation unit to load the QML component and its functions and bindings more quickly. The functions and bindings that were compiled to C++ can also be executed faster. Other bindings and functions are either interpreted directly from the byte code, or compiled to machine code via a JIT compilation step at run time. At compile time, more involved type analysis can be performed. Therefore, the generated C++ code is generally more efficient than the result of the JIT compilation.</db:para>
<db:para>There are limitations on what JavaScript constructs can be compiled to C++. For more information, see <db:link xlink:href="qtqml-qml-script-compiler.xml#limitations-when-compiling-javascript-to-c">Limitations when compiling JavaScript to C++</db:link>.</db:para>
<db:para><db:emphasis>qmlsc</db:emphasis> will be used instead of <db:emphasis>qmlcachegen</db:emphasis> if the Qt Quick Compiler Extensions are installed. It has the following additional features over <db:emphasis>qmlcachegen</db:emphasis>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>It can compile documents in Direct Mode. In that case, the C++ headers of the types underpinning other QML components are directly included and the methods of those types are directly called. Conversely, in Indirect Mode, <db:emphasis>qmlcachegen</db:emphasis> or <db:emphasis>qmlsc</db:emphasis> call methods through the lookup mechanism which is also used in the interpreter and JIT.</db:para>
</db:listitem>
<db:listitem>
<db:para>It can compile documents in Static Mode. In that case, <db:emphasis>qmlsc</db:emphasis> assumes that no properties of any types exposed to C++ can be shadowed by derived types. This allows for more bindings and functions to be compiled, but generates invalid code if any properties are shadowed.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Instead of producing C++ as output, <db:link xlink:href="qtqml-qml-script-compiler.xml">qmlsc</db:link> and <db:link xlink:href="qtqml-tool-qmlcachegen.xml">qmlcachegen</db:link> can also generate .qmlc, .jsc and .mjsc &quot;cache files&quot;. These still contain a QML compilation unit each, and can be loaded by the QML engine to avoid re-compilation. They can only contain document structure and byte code, though. Compilation of bindings and functions to C++ is omitted if cache files are produced. Neither the CMake nor the qmake build system offered by Qt expose this functionality.</db:para>
</db:section>
<db:section xml:id="summary">
<db:title>Summary</db:title>
<db:para>The following table summarizes the differences between <db:link xlink:href="qtqml-qml-type-compiler.xml">qmltc</db:link>, <db:link xlink:href="qtqml-tool-qmlcachegen.xml">qmlcachegen</db:link> and <db:link xlink:href="qtqml-qml-script-compiler.xml">qmlsc</db:link>:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para><db:emphasis>qmltc</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis>qmlcachegen</db:emphasis></db:para>
</db:th>
<db:th>
<db:para><db:emphasis>qmlsc</db:emphasis></db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Compiles QML types to C++ classes</db:para>
</db:td>
<db:td>
<db:para>Compiles QML documents to QML compilation units</db:para>
</db:td>
<db:td>
<db:para>Compiles QML documents to QML compilation units</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Generated output acts as faster alternative to <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link>-based object creation.</db:para>
</db:td>
<db:td>
<db:para>Generated output is used internally by the QML engine to avoid re-compilation, and to speed up execution.</db:para>
</db:td>
<db:td>
<db:para>Generated output is used internally by the QML engine to avoid re-compilation, and to speed up execution. Direct Mode and Static Mode can further accelerate your application.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Available for all versions of Qt</db:para>
</db:td>
<db:td>
<db:para>Available for all versions of Qt</db:para>
</db:td>
<db:td>
<db:para>Available for commercial customers</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
