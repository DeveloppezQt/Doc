<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>Custom Completer Example</db:title>
<db:productname>QtCore</db:productname>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Custom Completer example shows how to provide string-completion facilities for an input widget based on data provided by a model. The completer pops up suggestions for possible words based on the first three characters input by the user and the user's choice of word is inserted into the TextEdit using QTextCursor.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customcompleter-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="setting-up-the-resource-file">
<db:title>Setting Up The Resource File</db:title>
<db:para>The Custom Completer example requires a resource file, <db:emphasis>wordlist.txt</db:emphasis>, that has a list of words to help QCompleter complete words. This file contains the following:</db:para>
<db:programlisting language="cpp">
</db:programlisting>
</db:section>
<db:section xml:id="textedit-class-definition">
<db:title>TextEdit Class Definition</db:title>
<db:para>The TextEdit class is a subclass of QTextEdit with a custom insertCompletion() slot and it reimplements the <db:link xlink:href="">keyPressEvent()</db:link> and the <db:link xlink:href="">focusInEvent()</db:link> functions. TextEdit also contains a private function textUnderCursor() and a private instance of QCompleter, c.</db:para>
<db:programlisting language="cpp"></db:programlisting>
</db:section>
<db:section xml:id="textedit-class-implementation">
<db:title>TextEdit Class Implementation</db:title>
<db:para>The constructor for TextEdit constructs a TextEdit with a parent and initializes c. The instructions to use the completer is displayed on the TextEdit object, using the <db:link xlink:href="">setPlainText()</db:link> function.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>In addition, TextEdit also includes a default destructor:</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The setCompleter() function accepts a <db:code role="parameter">completer</db:code> and sets it up. We use if (c) to check if c has been initialized. If it has been initialized, the <db:link xlink:href="qobject.xml#disconnect">QObject::disconnect</db:link>() function is invoked to disconnect the signal from the slot. This is to ensure that no previous completer object is still connected to the slot.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>We then instantiate c with <db:code role="parameter">completer</db:code> and set it as TextEdit's widget. The completion mode and case sensitivity are also set and then we connect the <db:link xlink:href="">activated()</db:link> signal to the insertCompletion() slot.</db:para>
<db:para>The completer() function is a getter function that returns c.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The completer pops up the options available, based on the contents of <db:emphasis>wordlist.txt</db:emphasis>, but the text cursor is responsible for filling in the missing characters, according to the user's choice of word.</db:para>
<db:para>Suppose the user inputs &quot;ACT&quot; and accepts the completer's suggestion of &quot;ACTUAL&quot;. The completion string is then sent to insertCompletion() by the completer's <db:link xlink:href="">activated()</db:link> signal.</db:para>
<db:para>The insertCompletion() function is responsible for completing the word using a QTextCursor object, tc. It validates to ensure that the completer's widget is TextEdit before using tc to insert the extra characters to complete the word.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The figure below illustrates this process:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/customcompleter-insertcompletion.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>completion.length() = 6</db:para>
<db:para>c-&gt;completionPrefix().length()=3</db:para>
<db:para>The difference between these two values is extra, which is 3. This means that the last three characters from the right, &quot;U&quot;, &quot;A&quot;, and &quot;L&quot;, will be inserted by tc.</db:para>
<db:para>The textUnderCursor() function uses a QTextCursor, tc, to select a word under the cursor and return it.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The TextEdit class reimplements <db:link xlink:href="">focusInEvent()</db:link> function, which is an event handler used to receive keyboard focus events for the widget.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The <db:link xlink:href="">keyPressEvent()</db:link> is reimplemented to ignore key events like <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Enter</db:link>, <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Return</db:link>, <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Escape</db:link>, <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Tab</db:link>, and <db:link xlink:href="qt.xml#Key-enum">Qt::Key_Backtab</db:link> so the completer can handle them.</db:para>
<db:para>If there is an active completer, we cannot process the shortcut, Ctrl+E.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>We also handle other modifiers and shortcuts for which we do not want the completer to respond to.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>Finally, we pop up the completer.</db:para>
</db:section>
<db:section xml:id="mainwindow-class-definition">
<db:title>MainWindow Class Definition</db:title>
<db:para>The MainWindow class is a subclass of QMainWindow and implements a private slot, about(). This class also has two private functions, createMenu() and modelFromFile() as well as private instances of QCompleter and TextEdit.</db:para>
<db:programlisting language="cpp"></db:programlisting>
</db:section>
<db:section xml:id="mainwindow-class-implementation">
<db:title>MainWindow Class Implementation</db:title>
<db:para>The constructor constructs a MainWindow with a parent and initializes the completer. It also instantiates a TextEdit and sets its completer. A <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link>, obtained from modelFromFile(), is used to populate the completer. The MainWindow's central widget is set to TextEdit and its size is set to 500 x 300.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The createMenu() function creates the necessary QAction objects needed for the &quot;File&quot; and &quot;Help&quot; menu and their <db:link xlink:href="">triggered()</db:link> signals are connected to the quit(), about(), and aboutQt() slots respectively.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The modelFromFile() function accepts a <db:code role="parameter">fileName</db:code> and attempts to extract the contents of this file into a <db:link xlink:href="qstringlistmodel.xml">QStringListModel</db:link>. We display the <db:link xlink:href="qt.xml#CursorShape-enum">Qt::WaitCursor</db:link> when we are populating the <db:link xlink:href="qstringlist.xml">QStringList</db:link>, words, and restore the mouse cursor when we are done.</db:para>
<db:programlisting language="cpp"></db:programlisting>
<db:para>The about() function provides a brief description about the Custom Completer example.</db:para>
<db:programlisting language="cpp"></db:programlisting>
</db:section>
<db:section xml:id="main-function">
<db:title>main() Function</db:title>
<db:para>The main() function instantiates MainWindow and invokes the <db:link xlink:href="">show()</db:link> function.</db:para>
<db:programlisting language="cpp"></db:programlisting>
</db:section>
</db:article>
