<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Media Player Example</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Playing audio and video.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2017 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;playercontrols.h&quot;

#include &amp;lt;QBoxLayout&amp;gt;
#include &amp;lt;QSlider&amp;gt;
#include &amp;lt;QStyle&amp;gt;
#include &amp;lt;QToolButton&amp;gt;
#include &amp;lt;QComboBox&amp;gt;
#include &amp;lt;QAudio&amp;gt;

PlayerControls::PlayerControls(QWidget *parent)
    : QWidget(parent)
{
    m_playButton = new QToolButton(this);
    m_playButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaPlay));

    connect(m_playButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;PlayerControls::playClicked);

    m_stopButton = new QToolButton(this);
    m_stopButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaStop));
    m_stopButton-&amp;gt;setEnabled(false);

    connect(m_stopButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;PlayerControls::stop);

    m_nextButton = new QToolButton(this);
    m_nextButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaSkipForward));

    connect(m_nextButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;PlayerControls::next);

    m_previousButton = new QToolButton(this);
    m_previousButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaSkipBackward));

    connect(m_previousButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;PlayerControls::previous);

    m_muteButton = new QToolButton(this);
    m_muteButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaVolume));

    connect(m_muteButton, &amp;amp;QAbstractButton::clicked, this, &amp;amp;PlayerControls::muteClicked);

    m_volumeSlider = new QSlider(Qt::Horizontal, this);
    m_volumeSlider-&amp;gt;setRange(0, 100);

    connect(m_volumeSlider, &amp;amp;QSlider::valueChanged, this, &amp;amp;PlayerControls::onVolumeSliderValueChanged);

    m_rateBox = new QComboBox(this);
    m_rateBox-&amp;gt;addItem(&quot;0.5x&quot;, QVariant(0.5));
    m_rateBox-&amp;gt;addItem(&quot;1.0x&quot;, QVariant(1.0));
    m_rateBox-&amp;gt;addItem(&quot;2.0x&quot;, QVariant(2.0));
    m_rateBox-&amp;gt;setCurrentIndex(1);

    connect(m_rateBox, QOverload&amp;lt;int&amp;gt;::of(&amp;amp;QComboBox::activated), this, &amp;amp;PlayerControls::updateRate);

    QBoxLayout *layout = new QHBoxLayout;
    layout-&amp;gt;setMargin(0);
    layout-&amp;gt;addWidget(m_stopButton);
    layout-&amp;gt;addWidget(m_previousButton);
    layout-&amp;gt;addWidget(m_playButton);
    layout-&amp;gt;addWidget(m_nextButton);
    layout-&amp;gt;addWidget(m_muteButton);
    layout-&amp;gt;addWidget(m_volumeSlider);
    layout-&amp;gt;addWidget(m_rateBox);
    setLayout(layout);
}

QMediaPlayer::State PlayerControls::state() const
{
    return m_playerState;
}

void PlayerControls::setState(QMediaPlayer::State state)
{
    if (state != m_playerState) {
        m_playerState = state;

        switch (state) {
        case QMediaPlayer::StoppedState:
            m_stopButton-&amp;gt;setEnabled(false);
            m_playButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaPlay));
            break;
        case QMediaPlayer::PlayingState:
            m_stopButton-&amp;gt;setEnabled(true);
            m_playButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaPause));
            break;
        case QMediaPlayer::PausedState:
            m_stopButton-&amp;gt;setEnabled(true);
            m_playButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(QStyle::SP_MediaPlay));
            break;
        }
    }
}

int PlayerControls::volume() const
{
    qreal linearVolume =  QAudio::convertVolume(m_volumeSlider-&amp;gt;value() / qreal(100),
                                                QAudio::LogarithmicVolumeScale,
                                                QAudio::LinearVolumeScale);

    return qRound(linearVolume * 100);
}

void PlayerControls::setVolume(int volume)
{
    qreal logarithmicVolume = QAudio::convertVolume(volume / qreal(100),
                                                    QAudio::LinearVolumeScale,
                                                    QAudio::LogarithmicVolumeScale);

    m_volumeSlider-&amp;gt;setValue(qRound(logarithmicVolume * 100));
}

bool PlayerControls::isMuted() const
{
    return m_playerMuted;
}

void PlayerControls::setMuted(bool muted)
{
    if (muted != m_playerMuted) {
        m_playerMuted = muted;

        m_muteButton-&amp;gt;setIcon(style()-&amp;gt;standardIcon(muted
                ? QStyle::SP_MediaVolumeMuted
                : QStyle::SP_MediaVolume));
    }
}

void PlayerControls::playClicked()
{
    switch (m_playerState) {
    case QMediaPlayer::StoppedState:
    case QMediaPlayer::PausedState:
        emit play();
        break;
    case QMediaPlayer::PlayingState:
        emit pause();
        break;
    }
}

void PlayerControls::muteClicked()
{
    emit changeMuting(!m_playerMuted);
}

qreal PlayerControls::playbackRate() const
{
    return m_rateBox-&amp;gt;itemData(m_rateBox-&amp;gt;currentIndex()).toDouble();
}

void PlayerControls::setPlaybackRate(float rate)
{
    for (int i = 0; i &amp;lt; m_rateBox-&amp;gt;count(); ++i) {
        if (qFuzzyCompare(rate, float(m_rateBox-&amp;gt;itemData(i).toDouble()))) {
            m_rateBox-&amp;gt;setCurrentIndex(i);
            return;
        }
    }

    m_rateBox-&amp;gt;addItem(QString(&quot;%1x&quot;).arg(rate), QVariant(rate));
    m_rateBox-&amp;gt;setCurrentIndex(m_rateBox-&amp;gt;count() - 1);
}

void PlayerControls::updateRate()
{
    emit changeRate(playbackRate());
}

void PlayerControls::onVolumeSliderValueChanged()
{
    emit changeVolume(volume());
}

</db:programlisting>
</db:article>
