<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Changes to Qt Multimedia</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Migrate Qt Multimedia to Qt 6.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>Qt 6 is a result of the conscious effort to make the framework more efficient and easy to use.</db:para>
<db:para>We try to maintain binary and source compatibility for all the public APIs in each release. But some changes were inevitable in an effort to make Qt a better framework.</db:para>
<db:para>The module has been refactored significantly and has changed classification, from essential to add-on. The Qt Multimedia module in Qt 6 replaces the Qt Multimedia module from Qt 5.x. Existing code that uses Qt Multimedia from Qt 5 can be ported with limited effort.</db:para>
<db:section xml:id="new-features-in-qt-6">
<db:title>New features in Qt 6</db:title>
<db:para>There are a number of new features in Qt Multimedia:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> class is the central object for media capture.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link> class is now a class limited to recording audio and video. It handles encoding of data produced in a capture session.</db:para>
</db:listitem>
<db:listitem>
<db:para>Using <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> and <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>, setting up the desired encoding when recording has changed significantly.</db:para>
</db:listitem>
<db:listitem>
<db:para>You can now also monitor the audio recorded by a capture session.</db:para>
</db:listitem>
<db:listitem>
<db:para>Support for selection of audio, video and subtitle tracks when playing back media files has been added.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qaudiodecoder.xml">QAudioDecoder</db:link> is now supported on all platforms.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="removed-features">
<db:title>Removed features</db:title>
<db:informaltable style="generic" width="70%">
<db:thead>
<db:tr>
<db:th>
<db:para>Removed feature</db:para>
</db:th>
<db:th>
<db:para>Notes or suggested alternative</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Playlist in <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> does not do any playlist handling anymore in Qt 6.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMediaPlayList</db:para>
</db:td>
<db:td>
<db:para>This class has been removed from the API. It does however still exist as part of the <db:link xlink:href="qtmultimedia-player-example.xml">Media Player Example</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QAudioProbe and QVideoProbe</db:para>
</db:td>
<db:td>
<db:para>The audio and video probing API has been removed.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QAudioRecorder</db:para>
</db:td>
<db:td>
<db:para>Use the <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> or <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link> QML type.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="https://doc.qt.io/qt-5/qml-qtmultimedia-audio.html">Audio QML type</db:link></db:para>
</db:td>
<db:td>
<db:para>Use <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> QML type.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMediaObject and QMediaBindableInterface</db:para>
</db:td>
<db:td>
<db:para>These classes have been removed in favor of a more direct API for setting up connections between objects using, for example, setVideoOutput and <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QCameraViewFinderSettings</db:para>
</db:td>
<db:td>
<db:para>This class has been removed. Use <db:link xlink:href="qcameraformat.xml">QCameraFormat</db:link> to define the resolution and frame rate the camera should be using.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QMediaContent</db:para>
</db:td>
<db:td>
<db:para>The class has been removed. Use <db:link xlink:href="qurl.xml">QUrl</db:link> for individual media files instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QSound</db:para>
</db:td>
<db:td>
<db:para>Use <db:link xlink:href="qsoundeffect.xml">QSoundEffect</db:link> instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QVideoFilterRunnable</db:para>
</db:td>
<db:td>
<db:para>Use <db:link xlink:href="topics-graphics.xml#shader-effects">shader effects</db:link> in QML instead or access the <db:link xlink:href="qvideoframe.xml">QVideoFrame</db:link>'s content in C++.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Public back-end API</db:para>
</db:td>
<db:td>
<db:para>The back-end API of Qt Multimedia is private in Qt 6. This improves response time for supporting new multimedia use cases. Any classes that contain the words &quot;Control&quot; or &quot;Abstract&quot; in the class name in Qt 5 are now private in Qt 6.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Back-end plugins</db:para>
</db:td>
<db:td>
<db:para>Qt Multimedia in Qt 6 does not use a plugin infrastructure for its back ends anymore. This means that users no longer need to ship those back ends with their application. Instead, the back end being used is determined at compile time based on the underlying operating system. Qt uses <db:link xlink:href="https://gstreamer.freedesktop.org">gstreamer</db:link> on Linux, WMF on Windows, AVFoundation on macOS and iOS and the Android multimedia APIs on Android.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
<db:section xml:id="changed-features">
<db:title>Changed features</db:title>
<db:para>A number of classes previously offered in Qt Multimedia have changed in ways that may affect previously written code. The following table highlights these changes.</db:para>
<db:informaltable style="generic" width="70%">
<db:thead>
<db:tr>
<db:th>
<db:para>Changed feature</db:para>
</db:th>
<db:th>
<db:para>Notes</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>Handling of Camera resolutions and frame rates</db:para>
</db:td>
<db:td>
<db:para>Handling of these has been simplified and a new <db:link xlink:href="qcameraformat.xml">QCameraFormat</db:link> class helps with selecting the correct resolution and frame rate for the camera.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Video output handling on the C++ side has changed significantly.</db:para>
</db:td>
<db:td>
<db:para>QAbstractVideoSurface has been replaced by the <db:link xlink:href="qvideosink.xml">QVideoSink</db:link> class, and generic rendering support has been enhanced to cover all <db:link xlink:href="https://en.wikipedia.org/wiki/Pixel_Format">pixel format</db:link>s supported by Qt Multimedia.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Metadata types</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediametadata.xml">QMediaMetaData</db:link> has changed significantly: mainly moving from string based to enum based keys, and reducing the set of supported keys to the ones that can be supported on most platforms.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para><db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link></db:para>
</db:td>
<db:td>
<db:para>Handling of formats for encoded media and the settings for the media recorder have changed significantly. Qt 5 provides a string-based API, a separated file format, and audio and video codecs into three classes. However, Qt 6 unifies the formats in the <db:link xlink:href="qmediaformat.xml">QMediaFormat</db:link> class. Additional settings are directly specified in <db:link xlink:href="qmediarecorder.xml">QMediaRecorder</db:link>. Setting up file formats and codecs is now implemented with enums and no longer uses strings. This puts some limitations on the set of codecs that can be used, but helps provide a consistent cross-platform API.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>QCameraImageCapture renamed <db:link xlink:href="qimagecapture.xml">QImageCapture</db:link></db:para>
</db:td>
<db:td>
<db:para>None</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Audio inputs and outputs</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> and <db:link xlink:href="qmediacapturesession.xml">QMediaCaptureSession</db:link> (and the corresponding QML types <db:link xlink:href="qml-qtmultimedia-mediaplayer.xml">MediaPlayer</db:link> and <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link>) are not connected to any audio devices by default. Explicitly connect them to a <db:link xlink:href="qaudioinput.xml">QAudioInput</db:link>/<db:link xlink:href="qml-qtmultimedia-audioinput.xml">AudioInput</db:link> or <db:link xlink:href="qaudiooutput.xml">QAudioOutput</db:link>/<db:link xlink:href="qml-qtmultimedia-audiooutput.xml">AudioOutput</db:link> to capture or play back audio.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>Capturing video</db:para>
</db:td>
<db:td>
<db:para>A capture session is by default not connected to a Camera. Connect it to a <db:link xlink:href="qcamera.xml">QCamera</db:link> object (Camera item) to be able to capture video or still images.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:article>
