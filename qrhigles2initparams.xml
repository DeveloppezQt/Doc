<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title></db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>OpenGL specific initialization parameters.</db:para>
<db:para>This struct was introduced in Qt 6.6.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>rhi/qrhi.h</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.6</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::GuiPrivate)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui-private</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:note>
<db:para>This is a RHI API with limited compatibility guarantees, see <db:link xlink:href="qrhi.xml">QRhi</db:link> for details.</db:para>
</db:note>
<db:para>An OpenGL-based <db:link xlink:href="qrhi.xml">QRhi</db:link> needs an already created <db:link xlink:href="qsurface.xml">QSurface</db:link> that can be used in combination with <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. Most commonly, this is a <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> in practice. Additionally, while optional, it is recommended that the <db:link xlink:href="qwindow.xml">QWindow</db:link> the first <db:link xlink:href="qrhiswapchain.xml">QRhiSwapChain</db:link> will target is passed in as well.</db:para>
<db:programlisting language="cpp" role="bad">QOffscreenSurface *fallbackSurface = QRhiGles2InitParams::newFallbackSurface();
QRhiGles2InitParams params;
params.fallbackSurface = fallbackSurface;
params.window = window;
rhi = QRhi::create(QRhi::OpenGLES2, &amp;params);
</db:programlisting>
<db:para>By default <db:link xlink:href="qrhi.xml">QRhi</db:link> creates a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> on its own. This approach works well in most cases, included threaded scenarios, where there is a dedicated <db:link xlink:href="qrhi.xml">QRhi</db:link> for each rendering thread. As there will be a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> for each <db:link xlink:href="qrhi.xml">QRhi</db:link>, the OpenGL context requirements (a context can only be current on one thread) are satisfied. The implicitly created context is destroyed automatically together with the <db:link xlink:href="qrhi.xml">QRhi</db:link>.</db:para>
<db:para>The <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> for the context is specified in <db:code>format</db:code>. The constructor sets this to <db:link xlink:href="qsurfaceformat.xml#defaultFormat">QSurfaceFormat::defaultFormat</db:link>() so applications that call <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>() with the appropriate settings before the constructor runs will not need to change value of <db:code>format</db:code>.</db:para>
<db:note>
<db:para>Remember to set the depth and stencil buffer sizes to 24 and 8 when the renderer relies on depth or stencil testing, either in the global default <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, or, alternatively, separately in all the involved <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link> instances: in <db:code>format</db:code>, the format argument passed to <db:link xlink:href="qrhigles2initparams.xml#newFallbackSurface">newFallbackSurface</db:link>(), and on any <db:link xlink:href="qwindow.xml">QWindow</db:link> that is used with the <db:link xlink:href="qrhi.xml">QRhi</db:link>.</db:para>
</db:note>
<db:para>A <db:link xlink:href="qsurface.xml">QSurface</db:link> has to be specified in <db:code>fallbackSurface</db:code>. In order to prevent mistakes in threaded situations, this is never created automatically by the <db:link xlink:href="qrhi.xml">QRhi</db:link> because, like <db:link xlink:href="qwindow.xml">QWindow</db:link>, instances of <db:link xlink:href="qsurface.xml">QSurface</db:link> subclasses can often be created on the gui/main thread only.</db:para>
<db:para>As a convenience, applications can use <db:link xlink:href="qrhigles2initparams.xml#newFallbackSurface">newFallbackSurface</db:link>() which creates and returns a <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> that is compatible with the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that is going to be created by the <db:link xlink:href="qrhi.xml">QRhi</db:link> afterwards. Note that the ownership of the returned <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> is transferred to the caller and the <db:link xlink:href="qrhi.xml">QRhi</db:link> will not destroy it.</db:para>
<db:note>
<db:para>With the OpenGL backend, <db:link xlink:href="qrhiswapchain.xml">QRhiSwapChain</db:link> can only target <db:link xlink:href="qwindow.xml">QWindow</db:link> instances that have their surface type set to <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::OpenGLSurface</db:link> or <db:link xlink:href="qsurface.xml#SurfaceType-enum">QSurface::RasterGLSurface</db:link>.</db:para>
</db:note>
<db:note>
<db:para><db:code>window</db:code> is optional. It is recommended to specify it whenever possible, in order to avoid problems on multi-adapter and multi-screen systems. When <db:code>window</db:code> is not set, the very first <db:link xlink:href="qopenglcontext.xml#makeCurrent">QOpenGLContext::makeCurrent</db:link>() happens with <db:code>fallbackSurface</db:code> which may be an invisible window on some platforms (for example, Windows) and that may trigger unexpected problems in some cases.</db:para>
</db:note>
<db:para>In case resource sharing with an existing <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> is desired, <db:code>shareContext</db:code> can be set to an existing <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link>. Alternatively, <db:link xlink:href="qt.xml#ApplicationAttribute-enum">Qt::AA_ShareOpenGLContexts</db:link> is honored as well, when enabled.</db:para>
<db:section xml:id="working-with-existing-opengl-contexts">
<db:title>Working with existing OpenGL contexts</db:title>
<db:para>When interoperating with another graphics engine, it may be necessary to get a <db:link xlink:href="qrhi.xml">QRhi</db:link> instance that uses the same OpenGL context. This can be achieved by passing a pointer to a <db:link xlink:href="qrhigles2nativehandles.xml">QRhiGles2NativeHandles</db:link> to <db:link xlink:href="qrhi.xml#create">QRhi::create</db:link>(). The <db:code>QRhiGles2NativeHandles::context</db:code> must be set to a non-null value then.</db:para>
<db:para>An alternative approach is to create a <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> that <db:link xlink:href="qopenglcontext.xml#setShareContext">shares resources</db:link> with the other engine's context and passing in that context via <db:link xlink:href="qrhigles2nativehandles.xml">QRhiGles2NativeHandles</db:link>.</db:para>
<db:para>The <db:link xlink:href="qrhi.xml">QRhi</db:link> does not take ownership of the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> passed in via <db:link xlink:href="qrhigles2nativehandles.xml">QRhiGles2NativeHandles</db:link>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRhiGles2InitParams">
<db:title>QRhiGles2InitParams::QRhiGles2InitParams()</db:title>
<db:para>Constructs a new <db:link xlink:href="qrhigles2initparams.xml">QRhiGles2InitParams</db:link>.</db:para>
<db:para><db:link xlink:href="qrhigles2initparams.xml#format-var">format</db:link> is set to <db:link xlink:href="qsurfaceformat.xml#defaultFormat">QSurfaceFormat::defaultFormat</db:link>().</db:para>
</db:section>
<db:section xml:id="newFallbackSurface">
<db:title>[static] QOffscreenSurface *QRhiGles2InitParams::newFallbackSurface(const QSurfaceFormat &amp;<db:emphasis>format</db:emphasis> = QSurfaceFormat::defaultFormat())</db:title>
<db:para>Returns a new <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> that can be used with a <db:link xlink:href="qrhi.xml">QRhi</db:link> by passing it via a <db:link xlink:href="qrhigles2initparams.xml">QRhiGles2InitParams</db:link>.</db:para>
<db:para>When <db:code role="parameter">format</db:code> is not specified, its default value is the global default format settable via <db:link xlink:href="qsurfaceformat.xml#setDefaultFormat">QSurfaceFormat::setDefaultFormat</db:link>().</db:para>
<db:para><db:code role="parameter">format</db:code> is adjusted as appropriate in order to avoid having problems afterwards due to an incompatible context and surface.</db:para>
<db:note>
<db:para>This function must only be called on the gui/main thread.</db:para>
</db:note>
<db:note>
<db:para>It is the application's responsibility to destroy the returned <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link> on the gui/main thread once the associated <db:link xlink:href="qrhi.xml">QRhi</db:link> has been destroyed. The <db:link xlink:href="qrhi.xml">QRhi</db:link> will not destroy the <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
<db:section xml:id="member-variable-documentation">
<db:title>Member Variable Documentation</db:title>
<db:section xml:id="fallbackSurface-var">
<db:title>QSurface * QRhiGles2InitParams::fallbackSurface</db:title>
<db:para>A <db:link xlink:href="qsurface.xml">QSurface</db:link> compatible with <db:link xlink:href="qrhigles2initparams.xml#format-var">format</db:link>. Typically a <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link>. Providing this is mandatory. Be aware of the threading implications: a <db:link xlink:href="qoffscreensurface.xml">QOffscreenSurface</db:link>, like <db:link xlink:href="qwindow.xml">QWindow</db:link>, must only ever be created and destroyed on the main (gui) thread, even if the <db:link xlink:href="qrhi.xml">QRhi</db:link> is created and operates on another thread.</db:para>
</db:section>
<db:section xml:id="format-var">
<db:title>QSurfaceFormat QRhiGles2InitParams::format</db:title>
<db:para>The <db:link xlink:href="qsurfaceformat.xml">QSurfaceFormat</db:link>, initialized to <db:link xlink:href="qsurfaceformat.xml#defaultFormat">QSurfaceFormat::defaultFormat</db:link>() by default.</db:para>
</db:section>
<db:section xml:id="shareContext-var">
<db:title>QOpenGLContext * QRhiGles2InitParams::shareContext</db:title>
<db:para>Optional, the <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> to share resource with. <db:link xlink:href="qrhi.xml">QRhi</db:link> creates its own context, and setting this member to a valid <db:link xlink:href="qopenglcontext.xml">QOpenGLContext</db:link> leads to calling <db:link xlink:href="qopenglcontext.xml#setShareContext">setShareContext</db:link>() with it.</db:para>
</db:section>
<db:section xml:id="window-var">
<db:title>QWindow * QRhiGles2InitParams::window</db:title>
<db:para>Optional, but setting it is recommended when targeting a <db:link xlink:href="qwindow.xml">QWindow</db:link> with the <db:link xlink:href="qrhi.xml">QRhi</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
