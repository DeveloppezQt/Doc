<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QHttpServerResponse Class</db:title>
<db:productname>QtHttpServer</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Lightweight HTTP Server Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Encapsulates an HTTP response.</db:para>
<db:para>This class was introduced in Qt 6.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QHttpServerResponse</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS HttpServer)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::HttpServer)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += httpserver</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>API for creating, reading and modifying a response from an HTTP server, and for writing its contents to a <db:link xlink:href="qhttpserverresponder.xml">QHttpServerResponder</db:link>. It has numerous constructors, and <db:code>static</db:code> function <db:code>fromFile</db:code> for constructing it from the contents of a file. There are functions for setting, getting, and removing headers, and for getting the data, status code and mime type.</db:para>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="StatusCode-typedef">
<db:title>[alias] QHttpServerResponse::StatusCode</db:title>
<db:typedefsynopsis>
<db:typedefname>StatusCode</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
<db:para>Type alias for <db:link xlink:href="qhttpserverresponder.xml#StatusCode-enum">QHttpServerResponder::StatusCode</db:link></db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QHttpServerResponse-12">
<db:title>QHttpServerResponse::QHttpServerResponse(QByteArray &amp;&amp;<db:emphasis>mimeType</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:bridgehead renderas="sect2" xml:id="QHttpServerResponse-10">QHttpServerResponse::QHttpServerResponse(QByteArray &amp;&amp;<db:emphasis>mimeType</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QHttpServerResponse-11">QHttpServerResponse::QHttpServerResponse(const QByteArray &amp;<db:emphasis>mimeType</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:bridgehead>
<db:bridgehead renderas="sect2" xml:id="QHttpServerResponse-9">QHttpServerResponse::QHttpServerResponse(const QByteArray &amp;<db:emphasis>mimeType</db:emphasis>, const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:bridgehead>
<db:para>Creates a <db:link xlink:href="qhttpserver.xml">QHttpServer</db:link> response.</db:para>
<db:para>The response will use the given <db:code role="parameter">status</db:code> code and deliver the <db:code role="parameter">data</db:code> as its body, with a <db:code>ContentType</db:code> header describing it as being of MIME type <db:code role="parameter">mimeType</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-2">
<db:title>QHttpServerResponse::QHttpServerResponse(const QHttpServerResponse::StatusCode <db:emphasis>statusCode</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>statusCode</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const QHttpServerResponse::StatusCode statusCode)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object with the status code <db:code role="parameter">statusCode</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-3">
<db:title>QHttpServerResponse::QHttpServerResponse(const char *<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const char *data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-4">
<db:title>QHttpServerResponse::QHttpServerResponse(const QString &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const QString &amp;data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-5">
<db:title>[explicit] QHttpServerResponse::QHttpServerResponse(const QByteArray &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const QByteArray &amp;data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-6">
<db:title>[explicit] QHttpServerResponse::QHttpServerResponse(QByteArray &amp;&amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(QByteArray &amp;&amp;data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> whose body will contain the given <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-7">
<db:title>QHttpServerResponse::QHttpServerResponse(const QJsonObject &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const QJsonObject &amp;data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-8">
<db:title>QHttpServerResponse::QHttpServerResponse(const QJsonArray &amp;<db:emphasis>data</db:emphasis>, const QHttpServerResponse::StatusCode <db:emphasis>status</db:emphasis> = StatusCode::Ok)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>data</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QHttpServerResponse::StatusCode</db:type>
<db:parameter>status</db:parameter>
<db:initializer>StatusCode::Ok</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(const QJsonArray &amp;data, const QHttpServerResponse::StatusCode status)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">data</db:code> with the status code <db:code role="parameter">status</db:code>.</db:para>
</db:section>
<db:section xml:id="QHttpServerResponse-1">
<db:title>QHttpServerResponse::QHttpServerResponse(QHttpServerResponse &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QHttpServerResponse</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponse &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse(QHttpServerResponse &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs an instance of a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QHttpServerResponse">
<db:title>QHttpServerResponse::~QHttpServerResponse()</db:title>
<db:destructorsynopsis>
<db:methodname>~QHttpServerResponse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QHttpServerResponse()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> object.</db:para>
</db:section>
<db:section xml:id="addHeader">
<db:title>void QHttpServerResponse::addHeader(QByteArray &amp;&amp;<db:emphasis>name</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeader</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeader(QByteArray &amp;&amp;name, QByteArray &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, does not override any previously set headers.</db:para>
</db:section>
<db:section xml:id="addHeader-1">
<db:title>void QHttpServerResponse::addHeader(QByteArray &amp;&amp;<db:emphasis>name</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeader</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeader(QByteArray &amp;&amp;name, const QByteArray &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, does not override any previously set headers.</db:para>
</db:section>
<db:section xml:id="addHeader-2">
<db:title>void QHttpServerResponse::addHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeader(const QByteArray &amp;name, QByteArray &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, does not override any previously set headers.</db:para>
</db:section>
<db:section xml:id="addHeader-3">
<db:title>void QHttpServerResponse::addHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeader(const QByteArray &amp;name, const QByteArray &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, does not override any previously set headers.</db:para>
</db:section>
<db:section xml:id="addHeaders">
<db:title>void QHttpServerResponse::addHeaders(QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeaders</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeaders(QHttpServerResponder::HeaderList headers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP headers in <db:code role="parameter">headers</db:code>, does not override any previously set headers.</db:para>
</db:section>
<db:section xml:id="addHeaders-1">
<db:title>void QHttpServerResponse::addHeaders(const Container &amp;<db:emphasis>headerList</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addHeaders</db:methodname>
<db:methodparam>
<db:type>const Container &amp;</db:type>
<db:parameter>headerList</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addHeaders(const Container &amp;headerList)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds the HTTP headers in <db:code role="parameter">headerList</db:code>, does not override any previously set headers.</db:para>
<db:para><db:code>Container</db:code> must be a container that represents the header name and content as key-value pairs.</db:para>
</db:section>
<db:section xml:id="clearHeader">
<db:title>void QHttpServerResponse::clearHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearHeader(const QByteArray &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the HTTP header with name <db:code role="parameter">name</db:code>.</db:para>
</db:section>
<db:section xml:id="clearHeaders">
<db:title>void QHttpServerResponse::clearHeaders()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearHeaders</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearHeaders()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all HTTP headers.</db:para>
</db:section>
<db:section xml:id="data">
<db:title>QByteArray QHttpServerResponse::data() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>data</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray data() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the response body.</db:para>
</db:section>
<db:section xml:id="fromFile">
<db:title>[static] QHttpServerResponse QHttpServerResponse::fromFile(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QHttpServerResponse</db:type>
<db:methodname>fromFile</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>fileName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse fromFile(const QString &amp;fileName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qhttpserverresponse.xml">QHttpServerResponse</db:link> from the content of the file <db:code role="parameter">fileName</db:code>.</db:para>
<db:para>It is the caller's responsibility to sanity-check the filename, and to have a well-defined policy for which files the server will request.</db:para>
</db:section>
<db:section xml:id="hasHeader">
<db:title>bool QHttpServerResponse::hasHeader(const QByteArray &amp;<db:emphasis>header</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>header</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeader(const QByteArray &amp;header) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the response contains an HTTP header with name <db:code role="parameter">header</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="hasHeader-1">
<db:title>bool QHttpServerResponse::hasHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>hasHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool hasHeader(const QByteArray &amp;name, const QByteArray &amp;value) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the response contains an HTTP header with name <db:code role="parameter">name</db:code> and with value <db:code role="parameter">value</db:code>, otherwise returns false.</db:para>
</db:section>
<db:section xml:id="headers">
<db:title>QList&lt;QByteArray&gt; QHttpServerResponse::headers(const QByteArray &amp;<db:emphasis>name</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QByteArray&gt;</db:type>
<db:methodname>headers</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QByteArray&gt; headers(const QByteArray &amp;name) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns values of the HTTP header with name <db:code role="parameter">name</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverresponse.xml#setHeaders">setHeaders</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="mimeType">
<db:title>QByteArray QHttpServerResponse::mimeType() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>mimeType</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray mimeType() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the value of the HTTP &quot;Content-Type&quot; header.</db:para>
<db:note>
<db:para>Default value is &quot;text/html&quot;</db:para>
</db:note>
</db:section>
<db:section xml:id="setHeader">
<db:title>void QHttpServerResponse::setHeader(QByteArray &amp;&amp;<db:emphasis>name</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(QByteArray &amp;&amp;name, QByteArray &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, overriding any previously set headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverresponse.xml#hasHeader">hasHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeader-1">
<db:title>void QHttpServerResponse::setHeader(QByteArray &amp;&amp;<db:emphasis>name</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(QByteArray &amp;&amp;name, const QByteArray &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, overriding any previously set headers.</db:para>
</db:section>
<db:section xml:id="setHeader-2">
<db:title>void QHttpServerResponse::setHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>, QByteArray &amp;&amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QByteArray &amp;&amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(const QByteArray &amp;name, QByteArray &amp;&amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, overriding any previously set headers.</db:para>
</db:section>
<db:section xml:id="setHeader-3">
<db:title>void QHttpServerResponse::setHeader(const QByteArray &amp;<db:emphasis>name</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeader</db:methodname>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QByteArray &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeader(const QByteArray &amp;name, const QByteArray &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the HTTP header with name <db:code role="parameter">name</db:code> and value <db:code role="parameter">value</db:code>, overriding any previously set headers.</db:para>
</db:section>
<db:section xml:id="setHeaders">
<db:title>void QHttpServerResponse::setHeaders(QHttpServerResponder::HeaderList <db:emphasis>headers</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeaders</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponder::HeaderList</db:type>
<db:parameter>headers</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeaders(QHttpServerResponder::HeaderList headers)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the headers <db:code role="parameter">headers</db:code>, overriding any previously set headers.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qhttpserverresponse.xml#headers">headers</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="statusCode">
<db:title>QHttpServerResponse::StatusCode QHttpServerResponse::statusCode() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QHttpServerResponse::StatusCode</db:type>
<db:methodname>statusCode</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse::StatusCode statusCode() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the status code.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QHttpServerResponse &amp;QHttpServerResponse::operator=(QHttpServerResponse &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QHttpServerResponse &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QHttpServerResponse &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QHttpServerResponse &amp; operator=(QHttpServerResponse &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns the values of <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
</db:section>
</db:article>
