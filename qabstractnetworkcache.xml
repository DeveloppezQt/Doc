<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QAbstractNetworkCache Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qabstractnetworkcache.xml">QAbstractNetworkCache</db:link> class provides the interface for cache implementations.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QAbstractNetworkCache</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Network)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Network)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += network</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para><db:link xlink:href="qnetworkdiskcache.xml" xlink:role="class">QNetworkDiskCache</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qabstractnetworkcache.xml">QAbstractNetworkCache</db:link> is the base class for every standard cache that is used by <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. <db:link xlink:href="qabstractnetworkcache.xml">QAbstractNetworkCache</db:link> is an abstract class and cannot be instantiated.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkdiskcache.xml">QNetworkDiskCache</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QAbstractNetworkCache">
<db:title>[explicit protected] QAbstractNetworkCache::QAbstractNetworkCache(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QAbstractNetworkCache</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QAbstractNetworkCache(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">protected</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an abstract network cache with the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QAbstractNetworkCache">
<db:title>[virtual] QAbstractNetworkCache::~QAbstractNetworkCache()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QAbstractNetworkCache</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QAbstractNetworkCache()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the cache.</db:para>
<db:para>Any operations that have not been inserted are discarded.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cacheSize">
<db:title>[pure virtual] qint64 QAbstractNetworkCache::cacheSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>qint64</db:type>
<db:methodname>cacheSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 cacheSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the current size taken up by the cache. Depending upon the cache implementation this might be disk or memory size.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#clear">clear</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clear">
<db:title>[pure virtual] void QAbstractNetworkCache::clear()</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>clear</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clear() = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all items from the cache. Unless there was failures clearing the cache <db:link xlink:href="qabstractnetworkcache.xml#cacheSize">cacheSize</db:link>() should return 0 after a call to clear.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#cacheSize">cacheSize</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>[pure virtual] QIODevice *QAbstractNetworkCache::data(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>data</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * data(const QUrl &amp;url) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data associated with <db:code role="parameter">url</db:code>.</db:para>
<db:para>It is up to the application that requests the data to delete the <db:link xlink:href="qiodevice.xml">QIODevice</db:link> when done with it.</db:para>
<db:para>If there is no cache for <db:code role="parameter">url</db:code>, the url is invalid, or if there is an internal cache error <db:code>nullptr</db:code> is returned.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#metaData">metaData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#prepare">prepare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="insert">
<db:title>[pure virtual] void QAbstractNetworkCache::insert(QIODevice *<db:emphasis>device</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>insert</db:methodname>
<db:methodparam>
<db:type>QIODevice *</db:type>
<db:parameter>device</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void insert(QIODevice *device) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Inserts the data in <db:code role="parameter">device</db:code> and the prepared meta data into the cache. After this function is called the data and meta data should be retrievable using <db:link xlink:href="qabstractnetworkcache.xml#data">data</db:link>() and <db:link xlink:href="qabstractnetworkcache.xml#metaData">metaData</db:link>().</db:para>
<db:para>To cancel a prepared inserted call <db:link xlink:href="qabstractnetworkcache.xml#remove">remove</db:link>() on the metadata's url.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#prepare">prepare</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="metaData">
<db:title>[pure virtual] QNetworkCacheMetaData QAbstractNetworkCache::metaData(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkCacheMetaData</db:type>
<db:methodname>metaData</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkCacheMetaData metaData(const QUrl &amp;url) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the meta data for the url <db:code role="parameter">url</db:code>.</db:para>
<db:para>If the url is valid and the cache contains the data for url, a valid <db:link xlink:href="qnetworkcachemetadata.xml">QNetworkCacheMetaData</db:link> is returned.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#updateMetaData">updateMetaData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="prepare">
<db:title>[pure virtual] QIODevice *QAbstractNetworkCache::prepare(const QNetworkCacheMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QIODevice *</db:type>
<db:methodname>prepare</db:methodname>
<db:methodparam>
<db:type>const QNetworkCacheMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QIODevice * prepare(const QNetworkCacheMetaData &amp;metaData) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the device that should be populated with the data for the cache item <db:code role="parameter">metaData</db:code>. When all of the data has been written <db:link xlink:href="qabstractnetworkcache.xml#insert">insert</db:link>() should be called. If <db:link xlink:href="qabstractnetworkcache.xml#metaData">metaData</db:link> is invalid or the url in the metadata is invalid <db:code>nullptr</db:code> is returned.</db:para>
<db:para>The cache owns the device and will take care of deleting it when it is inserted or removed.</db:para>
<db:para>To cancel a prepared inserted call <db:link xlink:href="qabstractnetworkcache.xml#remove">remove</db:link>() on the metadata's url.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#remove">remove</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#updateMetaData">updateMetaData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#insert">insert</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="remove">
<db:title>[pure virtual] bool QAbstractNetworkCache::remove(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>bool</db:type>
<db:methodname>remove</db:methodname>
<db:methodparam>
<db:type>const QUrl &amp;</db:type>
<db:parameter>url</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool remove(const QUrl &amp;url) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the cache entry for <db:code role="parameter">url</db:code>, returning true if success otherwise false.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#clear">clear</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#prepare">prepare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="updateMetaData">
<db:title>[pure virtual] void QAbstractNetworkCache::updateMetaData(const QNetworkCacheMetaData &amp;<db:emphasis>metaData</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>updateMetaData</db:methodname>
<db:methodparam>
<db:type>const QNetworkCacheMetaData &amp;</db:type>
<db:parameter>metaData</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void updateMetaData(const QNetworkCacheMetaData &amp;metaData) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Updates the cache meta date for the <db:link xlink:href="qabstractnetworkcache.xml#metaData">metaData</db:link>'s url to <db:code role="parameter">metaData</db:code></db:para>
<db:para>If the cache does not contains a cache item for the url then no action is taken.</db:para>
<db:para>In the base class this is a pure virtual function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qabstractnetworkcache.xml#metaData">metaData</db:link>()</db:member>
<db:member><db:link xlink:href="qabstractnetworkcache.xml#prepare">prepare</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
