<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRenderCapabilities Class</db:title>
<db:subtitle>Qt3DRender::QRenderCapabilities</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt3drender-qrendercapabilities.xml">QRenderCapabilities</db:link> class holds settings related to available rendering engines.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRenderCapabilities</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS 3drender)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::3drender)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3drender</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>In QML</db:term>
<db:listitem>
<db:para><db:link xlink:href="qml-qt3d-render-rendercapabilities.xml" xlink:role="">RenderCapabilities</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Status</db:term>
<db:listitem>
<db:para>Deprecated</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qt3drender-qrendercapabilities.xml">QRenderCapabilities</db:link> provides details of graphical features that are available at runtime. It can be used to decide which code path to use for some algorithms, for example, depending on whether compute shaders are available or not.</db:para>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="api-prop">
<db:title>[read-only] api : const API</db:title>
<db:para>Returns which API is currently in use.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QRenderCapabilities::API</db:type> <db:emphasis role="bold">api</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="driverVersion-prop">
<db:title>[read-only] driverVersion : const QString</db:title>
<db:para>Returns the driver version string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QString</db:type> <db:emphasis role="bold">driverVersion</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="extensions-prop">
<db:title>[read-only] extensions : const QStringList</db:title>
<db:para>Returns the list of extensions currently available.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QStringList</db:type> <db:emphasis role="bold">extensions</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="glslVersion-prop">
<db:title>[read-only] glslVersion : const QString</db:title>
<db:para>Returns the GLSL version string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QString</db:type> <db:emphasis role="bold">glslVersion</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="majorVersion-prop">
<db:title>[read-only] majorVersion : const int</db:title>
<db:para>Returns the major version number currently in use.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">majorVersion</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxComputeInvocations-prop">
<db:title>[read-only] maxComputeInvocations : const int</db:title>
<db:para>Returns the maximum number of Compute Shaders available.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxComputeInvocations</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxComputeSharedMemorySize-prop">
<db:title>[read-only] maxComputeSharedMemorySize : const int</db:title>
<db:para>Returns the maximum amount of shared memory available for Compute Shaders.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxComputeSharedMemorySize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxImageUnits-prop">
<db:title>[read-only] maxImageUnits : const int</db:title>
<db:para>Returns the maximum number of available image units.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxImageUnits</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxSSBOBindings-prop">
<db:title>[read-only] maxSSBOBindings : const int</db:title>
<db:para>Returns the maximum number of available SSBO binding points, if supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxSSBOBindings</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxSSBOSize-prop">
<db:title>[read-only] maxSSBOSize : const int</db:title>
<db:para>Returns the maximum size of SSBOs, if available.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxSSBOSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxSamples-prop">
<db:title>[read-only] maxSamples : const int</db:title>
<db:para>Returns the maximum number of samples available for MSAA.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxSamples</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxTextureLayers-prop">
<db:title>[read-only] maxTextureLayers : const int</db:title>
<db:para>Returns the number of available texture layers.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxTextureLayers</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxTextureSize-prop">
<db:title>[read-only] maxTextureSize : const int</db:title>
<db:para>Returns the maximum size of textures.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxTextureSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxTextureUnits-prop">
<db:title>[read-only] maxTextureUnits : const int</db:title>
<db:para>Returns the number of available texture units.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxTextureUnits</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxUBOBindings-prop">
<db:title>[read-only] maxUBOBindings : const int</db:title>
<db:para>Returns the maximum number of available UBO binding points, if supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxUBOBindings</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxUBOSize-prop">
<db:title>[read-only] maxUBOSize : const int</db:title>
<db:para>Returns the maximum size of UBOs, if supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxUBOSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupCountX-prop">
<db:title>[read-only] maxWorkGroupCountX : const int</db:title>
<db:para>Returns the maximum number of available Compute Shader workgroups in the X axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupCountX</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupCountY-prop">
<db:title>[read-only] maxWorkGroupCountY : const int</db:title>
<db:para>Returns the maximum number of available Compute Shader workgroups in the Y axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupCountY</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupCountZ-prop">
<db:title>[read-only] maxWorkGroupCountZ : const int</db:title>
<db:para>Returns the maximum number of available Compute Shader workgroups in the Z axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupCountZ</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupSizeX-prop">
<db:title>[read-only] maxWorkGroupSizeX : const int</db:title>
<db:para>Returns the maximum size of Compute Shader local workgroups in the X axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupSizeX</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupSizeY-prop">
<db:title>[read-only] maxWorkGroupSizeY : const int</db:title>
<db:para>Returns the maximum size of Compute Shader local workgroups in the Y axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupSizeY</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="maxWorkGroupSizeZ-prop">
<db:title>[read-only] maxWorkGroupSizeZ : const int</db:title>
<db:para>Returns the maximum size of Compute Shader local workgroups in the Z axis.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">maxWorkGroupSizeZ</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="minorVersion-prop">
<db:title>[read-only] minorVersion : const int</db:title>
<db:para>Returns the minor version number currently in use.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">minorVersion</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="profile-prop">
<db:title>[read-only] profile : const Profile</db:title>
<db:para>Returns which profile (if applicable) is currently in use.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>Qt3DRender::QRenderCapabilities::Profile</db:type> <db:emphasis role="bold">profile</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="renderer-prop">
<db:title>[read-only] renderer : const QString</db:title>
<db:para>Returns the device identification string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QString</db:type> <db:emphasis role="bold">renderer</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportsCompute-prop">
<db:title>[read-only] supportsCompute : const bool</db:title>
<db:para>Returns true if Compute Shaders are supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">supportsCompute</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportsImageStore-prop">
<db:title>[read-only] supportsImageStore : const bool</db:title>
<db:para>Returns true if Image Store operations are supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">supportsImageStore</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportsSSBO-prop">
<db:title>[read-only] supportsSSBO : const bool</db:title>
<db:para>Returns true if SSBOs are supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">supportsSSBO</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="supportsUBO-prop">
<db:title>[read-only] supportsUBO : const bool</db:title>
<db:para>Returns true if UBOs are supported.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">supportsUBO</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="valid-prop">
<db:title>[read-only] valid : const bool</db:title>
<db:para>true if the data is valid, otherwise Qt 3D failed to query the available hardware.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>bool</db:type> <db:emphasis role="bold">isValid</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="vendor-prop">
<db:title>[read-only] vendor : const QString</db:title>
<db:para>Returns the vendor identification string.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>QString</db:type> <db:emphasis role="bold">vendor</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
</db:article>
