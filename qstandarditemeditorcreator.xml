<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QStandardItemEditorCreator Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QStandardItemEditorCreator</db:subtitle>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qstandarditemeditorcreator.xml">QStandardItemEditorCreator</db:link> class provides the possibility to register widgets without having to subclass <db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QStandardItemEditorCreator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qitemeditorcreatorbase.xml" xlink:role="class">QItemEditorCreatorBase</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QStandardItemEditorCreator is part of <db:simplelist><db:member>model-view</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This convenience template class makes it possible to register widgets without having to subclass <db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link>.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QItemEditorFactory *editorFactory = new QItemEditorFactory;
QItemEditorCreatorBase *creator = new QStandardItemEditorCreator&amp;lt;MyFancyDateTimeEdit&amp;gt;();
editorFactory-&amp;gt;registerEditor(QMetaType::QDateTime, creator);
</db:programlisting>
<db:para>Setting the editorFactory created above in an item delegate via <db:link xlink:href="qstyleditemdelegate.xml#setItemEditorFactory">QStyledItemDelegate::setItemEditorFactory</db:link>() makes sure that all values of type <db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QDateTime</db:link> will be edited in MyFancyDateTimeEdit.</db:para>
<db:para>The editor must provide a user property that will contain the editing data. The property is used by <db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link>s to set and retrieve the data (using Qt's <db:link xlink:href="metaobjects.xml">meta-object system</db:link>). You set the user property with the USER keyword:</db:para>
<db:programlisting language="cpp">Q_PROPERTY(QColor color READ color WRITE setColor USER true)
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qitemeditorcreatorbase.xml">QItemEditorCreatorBase</db:link></db:member>
<db:member><db:link xlink:href="qitemeditorcreator.xml">QItemEditorCreator</db:link></db:member>
<db:member><db:link xlink:href="qitemeditorfactory.xml">QItemEditorFactory</db:link></db:member>
<db:member><db:link xlink:href="qstyleditemdelegate.xml">QStyledItemDelegate</db:link></db:member>
<db:member><db:link xlink:href="qtwidgets-itemviews-coloreditorfactory-example.xml">Color Editor Factory Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QStandardItemEditorCreator">
<db:title>QStandardItemEditorCreator::QStandardItemEditorCreator()</db:title>
<db:constructorsynopsis>
<db:methodname>QStandardItemEditorCreator</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QStandardItemEditorCreator()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs an editor creator object.</db:para>
</db:section>
<db:section xml:id="createWidget">
<db:title>[override virtual] QWidget *QStandardItemEditorCreator::createWidget(QWidget *<db:emphasis>parent</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QWidget *</db:type>
<db:methodname>createWidget</db:methodname>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QWidget * createWidget(QWidget *parent) const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qitemeditorcreatorbase.xml#createWidget" role="function">QItemEditorCreatorBase::createWidget(QWidget *parent) const</db:link>.</db:para>
</db:section>
<db:section xml:id="valuePropertyName">
<db:title>[override virtual] QByteArray QStandardItemEditorCreator::valuePropertyName() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QByteArray</db:type>
<db:methodname>valuePropertyName</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QByteArray valuePropertyName() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qitemeditorcreatorbase.xml#valuePropertyName" role="function">QItemEditorCreatorBase::valuePropertyName() const</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
