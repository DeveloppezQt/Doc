<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>WebEngine Lifecycle Example</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Freezes and discards background tabs to reduce CPU and memory usage.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lifecycle.png"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis><db:link xlink:href="qml-qtwebengine-webengine.xml">WebEngine</db:link> Lifecycle Example</db:emphasis> demonstrates how the <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-prop">lifecycleState</db:link> and <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link> properties of the <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> can be used to reduce the CPU and memory usage of background tabs in a tabbed browser.</db:para>
<db:para>For an overview of the lifecycle feature, see <db:link xlink:href="qtwebengine-features.xml#page-lifecycle-api">Page Lifecycle API</db:link>.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="ui-elements-of-the-example">
<db:title>UI Elements of the Example</db:title>
<db:para>The example uses <db:link xlink:href="qtquickcontrols-index.xml">Qt Quick Controls 2</db:link> to implement a traditional tabbed browser in the <db:link xlink:href="qtquickcontrols-material.xml">Material Style</db:link> (dark variant). The main application window (<db:code>WebBrowser.qml</db:code>) is divided into a header bar at the top and a main viewing area filling the rest of the window. The header contains the tab bar (<db:code>WebTabBar.qml</db:code>) with one button per tab (<db:code>WebTabButton.qml</db:code>). The main area consists of a stack of tabs (<db:code>WebTabStack.qml</db:code> and <db:code>WebTab.qml</db:code>). Each tab in turn has a tool bar at the top and a <db:link xlink:href="qml-qtwebengine-webengineview.xml">WebEngineView</db:link> for displaying web pages. Finally, the main window also has a <db:link xlink:href="qml-qtquick-controls-drawer.xml">Drawer</db:link> for changing settings. The drawer can be opened by clicking the &quot;⋮&quot; button on the tool bar.</db:para>
<db:note>
<db:para>Note that <db:code>WebTab.qml</db:code> uses <db:link xlink:href="qurl.xml#fromUserInput">fromUserInput</db:link> to handle incomplete URLs.</db:para>
</db:note>
</db:section>
<db:section xml:id="lifecycle-states-in-the-example">
<db:title>Lifecycle States in the Example</db:title>
<db:para>The example implements two ways of changing the lifecycle state: manual and automatic. The manual way uses the <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-prop">lifecycleState</db:link> property directly to change the web view lifecycle state, while the automatic way is timer-based and also takes into account the <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link>.</db:para>
<db:para>The tab titles in the tab bar are color coded with frozen tabs shown in blue and discarded in red.</db:para>
<db:section xml:id="manual-lifecycle-control">
<db:title>Manual Lifecycle Control</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lifecycle-manual.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Manual control is provided by context menus on the tab bar buttons (<db:code>WebTabButton.qml</db:code>). The menu has three radio buttons, one for each lifecycle state, with the current state checked. Some buttons may be disabled, either because they represent illegal state transitions (for example, a <db:code>Discarded</db:code> view cannot directly transition to the <db:code>Frozen</db:code> state), or because other preconditions are not fulfilled (for example, a visible view can only be in the <db:code>Active</db:code> state).</db:para>
</db:section>
<db:section xml:id="automatic-lifecycle-control">
<db:title>Automatic Lifecycle Control</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/lifecycle-automatic.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Automatic control is implemented with a <db:link xlink:href="qml-qtqml-timer.xml">Timer</db:link> in the <db:code>WebTab</db:code> component (<db:code>WebTab.qml</db:code>). The timer is started whenever the <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-prop">lifecycleState</db:link> of the web view does not match it's <db:link xlink:href="qml-qtwebengine-webengineview.xml#recommendedState-prop">recommendedState</db:link>. Once the timer fires, the view's lifecycle state is set to the recommended state.</db:para>
<db:para>The time delay is used to avoid changing the lifecycle state too quickly when the user is switching between tabs. The freezing and discarding delays can be changed in the settings drawer accessed through the &quot;⋮&quot; button on the tool bar.</db:para>
<db:para>This is a rather simple algorithm for automatic lifecycle control, however more sophisticated algorithms could also be conceived and implemented on the basis of the <db:link xlink:href="qml-qtwebengine-webengineview.xml#lifecycleState-prop">lifecycleState</db:link> property. For example, the Chromium browser experimentally uses a pretrained deep neural network to predict the next tab activation time by the user, essentially ranking tabs based on how interesting they are to the user. Implementing such an algorithm is left as an exercise to the reader for now.</db:para>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtwebengine.git/tree/examples/webenginequick/lifecycle?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
