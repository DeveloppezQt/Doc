<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSizeGrip Class</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> class provides a resize handle for resizing top-level windows.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSizeGrip</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Widgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Widgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += widgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qwidget.xml" xlink:role="class">QWidget</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSizeGrip is part of <db:simplelist><db:member>mainwindow-classes</db:member><db:member>basicwidgets</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>This widget works like the standard Windows resize handle. In the X11 version this resize handle generally works differently from the one provided by the system if the X11 window manager does not support necessary modern post-ICCCM specifications.</db:para>
<db:para>Put this widget anywhere in a widget tree and the user can use it to resize the top-level window or any widget with the <db:link xlink:href="qt.xml#WindowType-enum">Qt::SubWindow</db:link> flag set. Generally, this should be in the lower right-hand corner.</db:para>
<db:para>Note that <db:link xlink:href="qstatusbar.xml">QStatusBar</db:link> already uses this widget, so if you have a status bar (e.g., you are using <db:link xlink:href="qmainwindow.xml">QMainWindow</db:link>), then you don't need to use this widget explicitly. The same goes for <db:link xlink:href="qdialog.xml">QDialog</db:link>, for which you can just call <db:link xlink:href="qdialog.xml#sizeGripEnabled-prop">QDialog::setSizeGripEnabled</db:link>().</db:para>
<db:para>On some platforms the size grip automatically hides itself when the window is shown full screen or maximised.</db:para>
<db:note>
<db:para>On macOS, size grips are no longer part of the human interface guideline, and won't show unless used in a <db:link xlink:href="qmdisubwindow.xml">QMdiSubWindow</db:link>. Set another style on size grips that you want to be visible in main windows.</db:para>
</db:note>
<db:informaltable style="generic" width="50%">
<db:tr valign="top">
<db:td>
<db:para><db:inlinemediaobject>
<db:imageobject>
<db:imagedata fileref="images/fusion-statusbar-sizegrip.png"/>
</db:imageobject>
</db:inlinemediaobject> Screenshot of a Fusion style size grip</db:para>
</db:td>
<db:td>
<db:para>A size grip widget at the bottom-right corner of a main window, shown in the <db:link xlink:href="gallery.xml">Fusion widget style</db:link>.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:link xlink:href="qsizegrip.xml">QSizeGrip</db:link> class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link> and reimplements the <db:link xlink:href="qwidget.xml#mousePressEvent">mousePressEvent</db:link>() and <db:link xlink:href="qwidget.xml#mouseMoveEvent">mouseMoveEvent</db:link>() functions to feature the resize functionality, and the <db:link xlink:href="qwidget.xml#paintEvent">paintEvent</db:link>() function to render the size grip widget.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstatusbar.xml">QStatusBar</db:link></db:member>
<db:member><db:link xlink:href="qwidget.xml#windowState">QWidget::windowState</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSizeGrip">
<db:title>[explicit] QSizeGrip::QSizeGrip(QWidget *<db:emphasis>parent</db:emphasis>)</db:title>
<db:para>Constructs a resize corner as a child widget of the given <db:code role="parameter">parent</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QSizeGrip">
<db:title>[virtual noexcept] QSizeGrip::~QSizeGrip()</db:title>
<db:para>Destroys this size grip.</db:para>
</db:section>
<db:section xml:id="event">
<db:title>[override virtual protected] bool QSizeGrip::event(QEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#event" role="function">QWidget::event(QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="eventFilter">
<db:title>[override virtual protected] bool QSizeGrip::eventFilter(QObject *<db:emphasis>o</db:emphasis>, QEvent *<db:emphasis>e</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qobject.xml#eventFilter" role="function">QObject::eventFilter(QObject *watched, QEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="hideEvent">
<db:title>[override virtual protected] void QSizeGrip::hideEvent(QHideEvent *<db:emphasis>hideEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#hideEvent" role="function">QWidget::hideEvent(QHideEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="mouseMoveEvent">
<db:title>[override virtual protected] void QSizeGrip::mouseMoveEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseMoveEvent" role="function">QWidget::mouseMoveEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>Resizes the top-level widget containing this widget. The mouse move event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mousePressEvent">
<db:title>[override virtual protected] void QSizeGrip::mousePressEvent(QMouseEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mousePressEvent" role="function">QWidget::mousePressEvent(QMouseEvent *event)</db:link>.</db:para>
<db:para>Receives the mouse press events for the widget, and primes the resize operation. The mouse press event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="mouseReleaseEvent">
<db:title>[override virtual protected] void QSizeGrip::mouseReleaseEvent(QMouseEvent *<db:emphasis>mouseEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#mouseReleaseEvent" role="function">QWidget::mouseReleaseEvent(QMouseEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="moveEvent">
<db:title>[override virtual protected] void QSizeGrip::moveEvent(QMoveEvent *<db:emphasis>moveEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#moveEvent" role="function">QWidget::moveEvent(QMoveEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="paintEvent">
<db:title>[override virtual protected] void QSizeGrip::paintEvent(QPaintEvent *<db:emphasis>event</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#paintEvent" role="function">QWidget::paintEvent(QPaintEvent *event)</db:link>.</db:para>
<db:para>Paints the resize grip.</db:para>
<db:para>Resize grips are usually rendered as small diagonal textured lines in the lower-right corner. The paint event is passed in the <db:code role="parameter">event</db:code> parameter.</db:para>
</db:section>
<db:section xml:id="setVisible">
<db:title>[override virtual] void QSizeGrip::setVisible(bool <db:emphasis>visible</db:emphasis>)</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#visible-prop" role="property">QWidget::visible</db:link>.</db:para>
</db:section>
<db:section xml:id="showEvent">
<db:title>[override virtual protected] void QSizeGrip::showEvent(QShowEvent *<db:emphasis>showEvent</db:emphasis>)</db:title>
<db:para>Reimplements: <db:link xlink:href="qwidget.xml#showEvent" role="function">QWidget::showEvent(QShowEvent *event)</db:link>.</db:para>
</db:section>
<db:section xml:id="sizeHint">
<db:title>[override virtual] QSize QSizeGrip::sizeHint() const</db:title>
<db:para>Reimplements an access function for property: <db:link xlink:href="qwidget.xml#sizeHint-prop" role="property">QWidget::sizeHint</db:link>.</db:para>
</db:section>
</db:section>
</db:article>
