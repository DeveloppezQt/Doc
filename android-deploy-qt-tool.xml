<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The androiddeployqt Tool</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the androiddeployqt tool and how to use it.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="androiddeployqt"/>
<db:para>Building an application package is complex, so Qt comes with a tool which handles the work for you. The steps described in <db:link xlink:href="deployment-android.xml">Deploying an Application on Android</db:link> are handled by the androiddeployqt tool.</db:para>
<db:section xml:id="prerequisites-before-running-androiddeployqt">
<db:title>Prerequisites Before Running androiddeployqt</db:title>
<db:para>Before running the tool manually, you need to run qmake or CMake on your project to generate Makefiles and a JSON file (i.e. android-project-deployment-settings.json) containing important settings used by androiddeployqt.</db:para>
<db:note>
<db:para>It is not recommended to modify the androiddeployqt JSON file.</db:para>
</db:note>
<db:para>To prepare the build for androiddeployqt, it is recommended to build your project in a separate directory. Run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">mkdir build-project
cd build-project
</db:programlisting>
<db:para>Followed by:</db:para>
<db:para>For qmake:</db:para>
<db:programlisting language="cpp" role="bad">qmake ../project/project.pro
make -j$(nproc)
make -j$(nproc) apk_install_target
</db:programlisting>
<db:para>For CMake:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build
</db:programlisting>
</db:section>
<db:section xml:id="command-line-arguments">
<db:title>Command Line Arguments</db:title>
<db:para>The only required command line argument when running the tool is --output. Other command line arguments are optional but useful. The list below is available by passing the --help argument to androiddeployqt.</db:para>
<db:programlisting language="cpp">Syntax: androiddeployqt --output &amp;lt;destination&amp;gt; [options]

Creates an Android package in the build directory &amp;lt;destination&amp;gt; and
builds it into an .apk file.

Optional arguments:
    --input &amp;lt;inputfile&amp;gt;: Reads &amp;lt;inputfile&amp;gt; for options generated by
       qmake. A default file name based on the current working
       directory will be used if nothing else is specified.

    --deployment &amp;lt;mechanism&amp;gt;: Supported deployment mechanisms:
       bundled (default): Includes Qt files in stand-alone package.
       unbundled: Assumes native libraries are present on the device
       and does not include them in the APK.

    --aab: Build an Android App Bundle.

    --no-build: Do not build the package, it is useful to just install
       a package previously built.

    --install: Installs apk to device/emulator. By default this step is
       not taken. If the application has previously been installed on
       the device, it will be uninstalled first.

    --reinstall: Installs apk to device/emulator. By default this step
       is not taken. If the application has previously been installed on
       the device, it will be overwritten, but its data will be left
       intact.

    --device [device ID]: Use specified device for deployment. Default
       is the device selected by default by adb.

    --android-platform &amp;lt;platform&amp;gt;: Builds against the given android
       platform. By default, the highest available version will be
       used.

    --release: Builds a package ready for release. By default, the
       package will be signed with a debug key.

    --sign &amp;lt;url/to/keystore&amp;gt; &amp;lt;alias&amp;gt;: Signs the package with the
       specified keystore, alias and store password.
       Optional arguments for use with signing:
         --storepass &amp;lt;password&amp;gt;: Keystore password.
         --storetype &amp;lt;type&amp;gt;: Keystore type.
         --keypass &amp;lt;password&amp;gt;: Password for private key (if different
           from keystore password.)
         --sigfile &amp;lt;file&amp;gt;: Name of .SF/.DSA file.
         --digestalg &amp;lt;name&amp;gt;: Name of digest algorithm. Default is
           &quot;SHA1&quot;.
         --sigalg &amp;lt;name&amp;gt;: Name of signature algorithm. Default is
           &quot;SHA1withRSA&quot;.
         --tsa &amp;lt;url&amp;gt;: Location of the Time Stamping Authority.
         --tsacert &amp;lt;alias&amp;gt;: Public key certificate for TSA.
         --internalsf: Include the .SF file inside the signature block.
         --sectionsonly: Don't compute hash of entire manifest.
         --protected: Keystore has protected authentication path.
         --jarsigner: Deprecated, ignored.

       NOTE: To conceal the keystore information, the environment variables
         QT_ANDROID_KEYSTORE_PATH, and QT_ANDROID_KEYSTORE_ALIAS are used to
         set the values keysotore and alias respectively.
         Also the environment variables QT_ANDROID_KEYSTORE_STORE_PASS,
         and QT_ANDROID_KEYSTORE_KEY_PASS are used to set the store and key
         passwords respectively. This option needs only the --sign parameter.

    --jdk &amp;lt;path/to/jdk&amp;gt;: Used to find the jarsigner tool when used
       in combination with the --release argument. By default,
       an attempt is made to detect the tool using the JAVA_HOME and
       PATH environment variables, in that order.

    --qml-import-paths: Specify additional search paths for QML
       imports.

    --verbose: Prints out information during processing.

    --no-generated-assets-cache: Do not pregenerate the entry list for
       the assets file engine.

    --aux-mode: Operate in auxiliary mode. This will only copy the
       dependencies into the build directory and update the XML templates.
       The project will not be built or installed.

    --apk &amp;lt;path/where/to/copy/the/apk&amp;gt;: Path where to copy the built apk.

    --qml-importscanner-binary &amp;lt;path/to/qmlimportscanner&amp;gt;: Override the
       default qmlimportscanner binary path. By default the
       qmlimportscanner binary is located using the Qt directory
       specified in the input file.

    --depfile &amp;lt;path/to/depfile&amp;gt;: Output a dependency file.

    --builddir &amp;lt;path/to/build/directory&amp;gt;: build directory. Necessary when
       generating a depfile because ninja requires relative paths.

    --no-rcc-bundle-cleanup: skip cleaning rcc bundle directory after
       running androiddeployqt. This option simplifies debugging of
       the resource bundle content, but it should not be used when deploying
       a project, since it litters the 'assets' directory.

    --copy-dependencies-only: resolve application dependencies and stop
       deploying process after all libraries and resources that the
       application depends on have been copied.

    --help: Displays this information.
</db:programlisting>
<db:para>With a project named project, to directly build the application package with androiddeployqt without deploying it the device, run the following:</db:para>
<db:programlisting language="cpp" role="bad">.androiddeployqt --input $BUILD_DIR/android-project-deployment-settings.json --output $ANDROID_BUILD_DIR
 </db:programlisting>
<db:para>To deploy the built package to the device:</db:para>
<db:programlisting language="cpp" role="bad">androiddeployqt --verbose --output $ANDROID_BUILD_DIR --no-build --input $BUILD_DIR/android-project-deployment-settings.json --gradle --reinstall --device &amp;lt;adb_device_id&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="dependencies-detection">
<db:title>Dependencies Detection</db:title>
<db:para>Qt comes with a number of plugins which are loaded at run-time when they are needed. These can handle anything from connecting to SQL databases to loading specific image formats. Detecting plugin dependencies is impossible as the plugins are loaded at run-time, but androiddeployqt tries to guess such dependencies based on the Qt dependencies of your application. If the plugin has any Qt dependencies which are not also dependencies of your application, it will not be included by default. For instance, in order to ensure that the SVG image format plugin is included, you will need to add <db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link> module to your project for it to become a dependency of your application:</db:para>
<db:programlisting language="cpp" role="bad">QT += svg
</db:programlisting>
<db:para>If you are wondering why a particular plugin is not included automatically, you can run androiddeployqt with the --verbose option to get the list of missing dependencies for each excluded plugin. You can achieve the same in Qt Creator by ticking the <db:guilabel>Verbose output</db:guilabel> check box in the <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build Steps</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Advanced Actions</db:guilabel>.</db:para>
<db:para>It's also possible to manually specify the dependencies of your application. For more information, see <db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link> qmake variable.</db:para>
<db:note>
<db:para>androiddeployqt scans the QML files of the project to collect the QML imports. However, if you are loading QML code as a <db:link xlink:href="qstring.xml">QString</db:link> from C++ at runtime, that might not work properly because androiddeployqt won't be aware of it at deploy time. To remedy that, you can add a dummy QML file that imports such QML modules that are referenced at runtime.</db:para>
</db:note>
</db:section>
<db:section xml:id="android-specific-qmake-variables">
<db:title>Android-specific qmake Variables</db:title>
<db:para>Unless the project has special requirements such as third party libraries, it should be possible to run <db:link xlink:href="android-deploy-qt-tool.xml#androiddeployqt">androiddeployqt</db:link> on it with no modifications and get a working Qt for Android application.</db:para>
<db:para>There are two important environment variables used by Qt:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ANDROID_SDK_ROOT: specifies the path to the Android SDK used for building the application. The Android SDK contains the build-tools, Android NDK, and Android toolchains.</db:para>
</db:listitem>
<db:listitem>
<db:para>ANDROID_NDK_ROOT: specifies the path to the Android NDK used to build the application. It is not recommended to hard-code this path, since different Qt for Android versions can depend on different Android NDK versions.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt Creator sets these variables by default.</db:para>
</db:note>
<db:para>There are a set of qmake or CMake variables that can be used to tailor your package. At some point during development, you will most likely want to look into these variables to customize your application.</db:para>
<db:para>Here is a list of some variables that are particularly interesting when making Android applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-code">ANDROID_VERSION_CODE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-name">ANDROID_VERSION_NAME</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-libs">ANDROID_EXTRA_LIBS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-plugins">ANDROID_EXTRA_PLUGINS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-abis">ANDROID_ABIS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-api-version">ANDROID_API_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-min-sdk-version">ANDROID_MIN_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-target-sdk-version">ANDROID_TARGET_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#java-home">JAVA_HOME</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Also, the following qmake variables are primarily useful when writing a Qt module, and not normal applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-bundled-jar-dependencies">ANDROID_BUNDLED_JAR_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-lib-dependencies">ANDROID_LIB_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-permissions">ANDROID_PERMISSIONS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-features">ANDROID_FEATURES</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This list of variables can also be used with CMake.</db:para>
</db:note>
</db:section>
<db:section xml:id="deployment-in-qt-creator">
<db:title>Deployment in Qt Creator</db:title>
<db:para>Qt Creator runs androiddeployqt by default, and provides easy and intuitive user interfaces to specify many of the options. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-deploying-android.html">Qt Creator: Deploying Applications to Android Devices</db:link>.</db:para>
</db:section>
</db:article>
