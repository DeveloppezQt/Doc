<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>The androiddeployqt Tool</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of the androiddeployqt tool and how to use it.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="androiddeployqt"/>
<db:para>Building an application package is complex, so Qt comes with a tool which handles the work for you. The steps described in <db:link xlink:href="deployment-android.xml">Deploying an Application on Android</db:link> are handled by the androiddeployqt tool.</db:para>
<db:section xml:id="prerequisites-before-running-androiddeployqt">
<db:title>Prerequisites Before Running androiddeployqt</db:title>
<db:para>Before running the tool manually, you need to run qmake or CMake on your project to generate Makefiles and a JSON file (i.e. android-project-deployment-settings.json) containing important settings used by androiddeployqt.</db:para>
<db:note>
<db:para>It is not recommended to modify the androiddeployqt JSON file.</db:para>
</db:note>
<db:para>To prepare the build for androiddeployqt, it is recommended to build your project in a separate directory. Run the following commands:</db:para>
<db:programlisting language="cpp" role="bad">mkdir build-project
cd build-project
</db:programlisting>
<db:para>Followed by:</db:para>
<db:para>For qmake:</db:para>
<db:programlisting language="cpp" role="bad">qmake ../project/project.pro
make -j$(nproc)
make -j$(nproc) apk_install_target
</db:programlisting>
<db:para>For CMake:</db:para>
<db:programlisting language="cpp" role="bad">cmake --build
</db:programlisting>
</db:section>
<db:section xml:id="command-line-arguments">
<db:title>Command Line Arguments</db:title>
<db:para>The only required command line argument when running the tool is --output. Other command line arguments are optional but useful. Here's a quick overview. More information is available by passing the --help argument to androiddeployqt.</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Argument</db:para>
</db:th>
<db:th>
<db:para>Brief Description</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:para>--output &lt;destination&gt;</db:para>
</db:td>
<db:td>
<db:para>Specifies the destination of the final package. Set this to $ANDROID_BUILD_DIR, that is the build directory where you installed your application binaries.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--input &lt;file name&gt;</db:para>
</db:td>
<db:td>
<db:para>This allows you to specify the generated JSON settings file. androiddeployqt will try to guess the file name based on the current working directory.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--aab</db:para>
</db:td>
<db:td>
<db:para>Generate an Android Application Bundle, rather than an APK. Note that this invalidates some of the other arguments, such as --install.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--deployment &lt;mechanism&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify this to pick a different deployment mechanism than the default.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Bundled: includes all the app's dependencies inside the APK.</db:para>
</db:listitem>
<db:listitem>
<db:para>Unbundled: excludes native libraries from the APK. The libraries are expected to be present on the target device. The location can be provided either by setting the property <db:link xlink:href="cmake-target-property-qt-android-system-libs-prefix.xml#cmake-target-property-qt-android-system-libs-prefix">QT_ANDROID_SYSTEM_LIBS_PREFIX</db:link> in your CMake project file, or by defining the path as meta-data in <db:link xlink:href="android-manifest-file-configuration.xml">AndroidManifest.xml</db:link>:</db:para>
<db:programlisting language="cpp" role="bad">&amp;lt;application&amp;gt;
    &amp;lt;meta-data
        android:name=&quot;system_libs_prefix&quot;
        android:value=&quot;path/to/libraries/&quot;/&amp;gt;
&amp;lt;/application&amp;gt;
</db:programlisting>
<db:para>If no path is provided, /system/lib/ is used as the default path.</db:para>
<db:note>
<db:para>Unbundled deployment does not support incremental builds.</db:para>
</db:note>
<db:note>
<db:para>Unbundled deployment not supported when deploying as AAB.</db:para>
</db:note>
</db:listitem>
</db:itemizedlist>
<db:para>Default is Bundled deployment.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--install</db:para>
</db:td>
<db:td>
<db:para>Specify this to install the finished package on the target device or emulator. Note that if a previous version of the package is already installed, it will be uninstalled first, removing any data it might have stored locally.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--device &lt;ID&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify the ID of the target device or emulator as reported by the adb tool. If an ID is specified, it will be passed to all calls to adb. If it is unspecified, no particular device or emulator will be requested by adb, causing it to pick a default instead.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--android-platform &lt;platform&gt;</db:para>
</db:td>
<db:td>
<db:para>The SDK platform used for building the Java code of the application. By default, the latest available platform is used.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--release</db:para>
</db:td>
<db:td>
<db:para>Specify this to create a release package instead of a debug package. With no other arguments, release packages are unsigned and cannot be installed to any device before they have been signed by a private key.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--sign &lt;url&gt; &lt;alias&gt;</db:para>
</db:td>
<db:td>
<db:para>Sign the resulting package. Specifying this also implies --release. The URL of the keystore file and the alias of the key have to be specified. Optionally, set the following environment variables to conceal the signing information QT_ANDROID_KEYSTORE_PATH, QT_ANDROID_KEYSTORE_ALIAS, QT_ANDROID_KEYSTORE_STORE_PASS, and QT_ANDROID_KEYSTORE_KEY_PASS. In addition, there are a number of options that can be specified which are passed through to the jarsigner tool. Pass --help to androiddeployqt for more information.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--jdk &lt;path&gt;</db:para>
</db:td>
<db:td>
<db:para>Specify the path to the Java Development Kit. This is only required for signing packages, as it is only used for finding the jarsigner tool. If it is unspecified, then androiddeployqt will attempt to detect jarsigner, either using the JAVA_HOME environment variable, or on the PATH.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--verbose</db:para>
</db:td>
<db:td>
<db:para>Specify this to output more information about what androiddeployqt is doing.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:para>--help</db:para>
</db:td>
<db:td>
<db:para>Prints the help for the tool.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>With a project named project, to directly build the application package with androiddeployqt without deploying it the device, run the following:</db:para>
<db:programlisting language="cpp" role="bad">.androiddeployqt --input $BUILD_DIR/android-project-deployment-settings.json --output $ANDROID_BUILD_DIR
 </db:programlisting>
<db:para>To deploy the built package to the device:</db:para>
<db:programlisting language="cpp" role="bad">androiddeployqt --verbose --output $ANDROID_BUILD_DIR --no-build --input $BUILD_DIR/android-project-deployment-settings.json --gradle --reinstall --device &amp;lt;adb_device_id&amp;gt;
</db:programlisting>
</db:section>
<db:section xml:id="dependencies-detection">
<db:title>Dependencies Detection</db:title>
<db:para>Qt comes with a number of plugins which are loaded at run-time when they are needed. These can handle anything from connecting to SQL databases to loading specific image formats. Detecting plugin dependencies is impossible as the plugins are loaded at run-time, but androiddeployqt tries to guess such dependencies based on the Qt dependencies of your application. If the plugin has any Qt dependencies which are not also dependencies of your application, it will not be included by default. For instance, in order to ensure that the SVG image format plugin is included, you will need to add <db:link xlink:href="qtsvg-index.xml">Qt SVG</db:link> module to your project for it to become a dependency of your application:</db:para>
<db:programlisting language="cpp" role="bad">QT += svg
</db:programlisting>
<db:para>If you are wondering why a particular plugin is not included automatically, you can run androiddeployqt with the --verbose option to get the list of missing dependencies for each excluded plugin. You can achieve the same in Qt Creator by ticking the <db:guilabel>Verbose output</db:guilabel> check box in the <db:guilabel>Projects</db:guilabel> &gt; <db:guilabel>Build Steps</db:guilabel> &gt; <db:guilabel>Build Android APK</db:guilabel> &gt; <db:guilabel>Advanced Actions</db:guilabel>.</db:para>
<db:para>It's also possible to manually specify the dependencies of your application. For more information, see <db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link> qmake variable.</db:para>
<db:note>
<db:para>androiddeployqt scans the QML files of the project to collect the QML imports. However, if you are loading QML code as a <db:link xlink:href="qstring.xml">QString</db:link> from C++ at runtime, that might not work properly because androiddeployqt won't be aware of it at deploy time. To remedy that, you can add a dummy QML file that imports such QML modules that are referenced at runtime.</db:para>
</db:note>
</db:section>
<db:section xml:id="android-specific-qmake-variables">
<db:title>Android-specific qmake Variables</db:title>
<db:para>Unless the project has special requirements such as third party libraries, it should be possible to run <db:link xlink:href="android-deploy-qt-tool.xml#androiddeployqt">androiddeployqt</db:link> on it with no modifications and get a working Qt for Android application.</db:para>
<db:para>There are two important environment variables used by Qt:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>ANDROID_SDK_ROOT: specifies the path to the Android SDK used for building the application. The Android SDK contains the build-tools, Android NDK, and Android toolchains.</db:para>
</db:listitem>
<db:listitem>
<db:para>ANDROID_NDK_ROOT: specifies the path to the Android NDK used to build the application. It is not recommended to hard-code this path, since different Qt for Android versions can depend on different Android NDK versions.</db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>Qt Creator sets these variables by default.</db:para>
</db:note>
<db:para>There are a set of qmake or CMake variables that can be used to tailor your package. At some point during development, you will most likely want to look into these variables to customize your application.</db:para>
<db:para>Here is a list of some variables that are particularly interesting when making Android applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-package-source-dir">ANDROID_PACKAGE_SOURCE_DIR</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-code">ANDROID_VERSION_CODE</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-version-name">ANDROID_VERSION_NAME</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-libs">ANDROID_EXTRA_LIBS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-extra-plugins">ANDROID_EXTRA_PLUGINS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-abis">ANDROID_ABIS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-api-version">ANDROID_API_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-deployment-dependencies">ANDROID_DEPLOYMENT_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-min-sdk-version">ANDROID_MIN_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-target-sdk-version">ANDROID_TARGET_SDK_VERSION</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#java-home">JAVA_HOME</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Also, the following qmake variables are primarily useful when writing a Qt module, and not normal applications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-bundled-jar-dependencies">ANDROID_BUNDLED_JAR_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-lib-dependencies">ANDROID_LIB_DEPENDENCIES</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-permissions">ANDROID_PERMISSIONS</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmake-variable-reference.xml#android-features">ANDROID_FEATURES</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:note>
<db:para>This list of variables can also be used with CMake.</db:para>
</db:note>
</db:section>
<db:section xml:id="deployment-in-qt-creator">
<db:title>Deployment in Qt Creator</db:title>
<db:para>Qt Creator runs androiddeployqt by default, and provides easy and intuitive user interfaces to specify many of the options. For more information, see <db:link xlink:href="https://doc.qt.io/qtcreator/creator-deploying-android.html">Qt Creator: Deploying Applications to Android Devices</db:link>.</db:para>
</db:section>
</db:article>
