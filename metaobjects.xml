<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>The Meta-Object System</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.2.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>An overview of Qt's meta-object system and introspection capabilities.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="meta-object-system"/>
<db:para>Qt's meta-object system provides the signals and slots mechanism for inter-object communication, run-time type information, and the dynamic property system.</db:para>
<db:para>The meta-object system is based on three things:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The <db:link xlink:href="qobject.xml">QObject</db:link> class provides a base class for objects that can take advantage of the meta-object system.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro inside the private section of the class declaration is used to enable meta-object features, such as dynamic properties, signals, and slots.</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="">Meta-Object Compiler</db:link> (moc) supplies each <db:link xlink:href="qobject.xml">QObject</db:link> subclass with the necessary code to implement meta-object features.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>The moc tool reads a C++ source file. If it finds one or more class declarations that contain the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro, it produces another C++ source file which contains the meta-object code for each of those classes. This generated source file is either #include'd into the class's source file or, more usually, compiled and linked with the class's implementation.</db:para>
<db:para>In addition to providing the <db:link xlink:href="signalsandslots.xml">signals and slots</db:link> mechanism for communication between objects (the main reason for introducing the system), the meta-object code provides the following additional features:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#metaObject">QObject::metaObject</db:link>() returns the associated <db:link xlink:href="qmetaobject.xml">meta-object</db:link> for the class.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#className">QMetaObject::className</db:link>() returns the class name as a string at run-time, without requiring native run-time type information (RTTI) support through the C++ compiler.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#inherits">QObject::inherits</db:link>() function returns whether an object is an instance of a class that inherits a specified class within the <db:link xlink:href="qobject.xml">QObject</db:link> inheritance tree.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml#tr">QObject::tr</db:link>() and QObject::trUtf8() translate strings for internationalization.</db:para>
</db:listitem>
<db:listitem>
<db:para>QObject::setProperty() and QObject::property() dynamically set and get properties by name.</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetaobject.xml#newInstance">QMetaObject::newInstance</db:link>() constructs a new instance of the class.</db:para>
</db:listitem>
</db:itemizedlist>
<db:anchor xml:id="qobjectcast"/>
<db:para>It is also possible to perform dynamic casts using qobject_cast() on <db:link xlink:href="qobject.xml">QObject</db:link> classes. The qobject_cast() function behaves similarly to the standard C++ dynamic_cast(), with the advantages that it doesn't require RTTI support and it works across dynamic library boundaries. It attempts to cast its argument to the pointer type specified in angle-brackets, returning a non-zero pointer if the object is of the correct type (determined at run-time), or 0 if the object's type is incompatible.</db:para>
<db:para>For example, let's assume MyWidget inherits from QWidget and is declared with the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro:</db:para>
<db:programlisting language="cpp">    QObject *obj = new MyWidget;
</db:programlisting>
<db:para>The obj variable, of type QObject *, actually refers to a MyWidget object, so we can cast it appropriately:</db:para>
<db:programlisting language="cpp">    QWidget *widget = qobject_cast&lt;QWidget *&gt;(obj);
</db:programlisting>
<db:para>The cast from <db:link xlink:href="qobject.xml">QObject</db:link> to QWidget is successful, because the object is actually a MyWidget, which is a subclass of QWidget. Since we know that obj is a MyWidget, we can also cast it to MyWidget *:</db:para>
<db:programlisting language="cpp">    MyWidget *myWidget = qobject_cast&lt;MyWidget *&gt;(obj);
</db:programlisting>
<db:para>The cast to MyWidget is successful because qobject_cast() makes no distinction between built-in Qt types and custom types.</db:para>
<db:programlisting language="cpp">    QLabel *label = qobject_cast&lt;QLabel *&gt;(obj);
    // label is 0
</db:programlisting>
<db:para>The cast to QLabel, on the other hand, fails. The pointer is then set to 0. This makes it possible to handle objects of different types differently at run-time, based on the type:</db:para>
<db:programlisting language="cpp">    if (QLabel *label = qobject_cast&lt;QLabel *&gt;(obj)) {
        label-&gt;setText(tr(&quot;Ping&quot;));
    } else if (QPushButton *button = qobject_cast&lt;QPushButton *&gt;(obj)) {
        button-&gt;setText(tr(&quot;Pong!&quot;));
    }
</db:programlisting>
<db:para>While it is possible to use <db:link xlink:href="qobject.xml">QObject</db:link> as a base class without the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro and without meta-object code, neither signals and slots nor the other features described here will be available if the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro is not used. From the meta-object system's point of view, a <db:link xlink:href="qobject.xml">QObject</db:link> subclass without meta code is equivalent to its closest ancestor with meta-object code. This means for example, that <db:link xlink:href="qmetaobject.xml#className">QMetaObject::className</db:link>() will not return the actual name of your class, but the class name of this ancestor.</db:para>
<db:para>Therefore, we strongly recommend that all subclasses of <db:link xlink:href="qobject.xml">QObject</db:link> use the <db:link xlink:href="qobject.xml#Q_OBJECT">Q_OBJECT</db:link> macro regardless of whether or not they actually use signals, slots, and properties.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmetaobject.xml">QMetaObject</db:link></db:member>
<db:member><db:link xlink:href="properties.xml#qt-s-property-system">Qt's Property System</db:link></db:member>
<db:member><db:link xlink:href="signalsandslots.xml">Signals and Slots</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:article>
