<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Flow Layout Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Shows how to arrange widgets for different window sizes.</db:para>
</db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Flow Layout</db:emphasis> implements a layout that handles different window sizes. The widget placement changes depending on the width of the application window.</db:para>
<db:mediaobject>
<db:alt>Screenshot of the Flow Layout example</db:alt>
<db:imageobject>
<db:imagedata fileref="images/flowlayout-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The Flowlayout class mainly uses <db:link xlink:href="qlayout.xml">QLayout</db:link> and <db:link xlink:href="qwidgetitem.xml">QWidgetItem</db:link>, while the Window uses <db:link xlink:href="qwidget.xml">QWidget</db:link> and <db:link xlink:href="qlabel.xml">QLabel</db:link>.</db:para>
<db:para>For more information, visit the <db:link xlink:href="layout.xml">Layout Management</db:link> page.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="flowlayout-class-definition">
<db:title>FlowLayout Class Definition</db:title>
<db:para>The FlowLayout class inherits <db:link xlink:href="qlayout.xml">QLayout</db:link>. It is a custom layout class that arranges its child widgets horizontally and vertically.</db:para>
<db:programlisting language="cpp">class FlowLayout : public QLayout
{
public:
    explicit FlowLayout(QWidget *parent, int margin = -1, int hSpacing = -1, int vSpacing = -1);
    explicit FlowLayout(int margin = -1, int hSpacing = -1, int vSpacing = -1);
    ~FlowLayout();

    void addItem(QLayoutItem *item) override;
    int horizontalSpacing() const;
    int verticalSpacing() const;
    Qt::Orientations expandingDirections() const override;
    bool hasHeightForWidth() const override;
    int heightForWidth(int) const override;
    int count() const override;
    QLayoutItem *itemAt(int index) const override;
    QSize minimumSize() const override;
    void setGeometry(const QRect &amp;amp;rect) override;
    QSize sizeHint() const override;
    QLayoutItem *takeAt(int index) override;

private:
    int doLayout(const QRect &amp;amp;rect, bool testOnly) const;
    int smartSpacing(QStyle::PixelMetric pm) const;

    QList&amp;lt;QLayoutItem *&amp;gt; itemList;
    int m_hSpace;
    int m_vSpace;
};
</db:programlisting>
<db:para>We reimplement functions inherited from <db:link xlink:href="qlayout.xml">QLayout</db:link>. These functions add items to the layout and handle their orientation and geometry.</db:para>
<db:para>We also declare two private methods, doLayout() and smartSpacing(). doLayout() lays out the layout items, while the smartSpacing() function calculates the spacing between them.</db:para>
</db:section>
<db:section xml:id="flowlayout-class-implementation">
<db:title>FlowLayout Class Implementation</db:title>
<db:para>We start off by looking at the constructor:</db:para>
<db:programlisting language="cpp">FlowLayout::FlowLayout(QWidget *parent, int margin, int hSpacing, int vSpacing)
    : QLayout(parent), m_hSpace(hSpacing), m_vSpace(vSpacing)
{
    setContentsMargins(margin, margin, margin, margin);
}

FlowLayout::FlowLayout(int margin, int hSpacing, int vSpacing)
    : m_hSpace(hSpacing), m_vSpace(vSpacing)
{
    setContentsMargins(margin, margin, margin, margin);
}
</db:programlisting>
<db:para>In the constructor we call setContentsMargins() to set the left, top, right and bottom margin. By default, <db:link xlink:href="qlayout.xml">QLayout</db:link> uses values provided by the current style (see <db:link xlink:href="qstyle.xml#PixelMetric-enum">QStyle::PixelMetric</db:link>).</db:para>
<db:programlisting language="cpp">FlowLayout::~FlowLayout()
{
    QLayoutItem *item;
    while ((item = takeAt(0)))
        delete item;
}
</db:programlisting>
<db:para>In this example we reimplement addItem(), which is a pure virtual function. When using addItem() the ownership of the layout items is transferred to the layout, and it is therefore the layout's responsibility to delete them.</db:para>
<db:programlisting language="cpp">void FlowLayout::addItem(QLayoutItem *item)
{
    itemList.append(item);
}
</db:programlisting>
<db:para>addItem() is implemented to add items to the layout.</db:para>
<db:programlisting language="cpp">int FlowLayout::horizontalSpacing() const
{
    if (m_hSpace &amp;gt;= 0) {
        return m_hSpace;
    } else {
        return smartSpacing(QStyle::PM_LayoutHorizontalSpacing);
    }
}

int FlowLayout::verticalSpacing() const
{
    if (m_vSpace &amp;gt;= 0) {
        return m_vSpace;
    } else {
        return smartSpacing(QStyle::PM_LayoutVerticalSpacing);
    }
}
</db:programlisting>
<db:para>We implement horizontalSpacing() and verticalSpacing() to get hold of the spacing between the widgets inside the layout. If the value is less than or equal to 0, this value will be used. If not, smartSpacing() will be called to calculate the spacing.</db:para>
<db:programlisting language="cpp">int FlowLayout::count() const
{
    return itemList.size();
}

QLayoutItem *FlowLayout::itemAt(int index) const
{
    return itemList.value(index);
}

QLayoutItem *FlowLayout::takeAt(int index)
{
    if (index &amp;gt;= 0 &amp;amp;&amp;amp; index &amp;lt; itemList.size())
        return itemList.takeAt(index);
    return nullptr;
}
</db:programlisting>
<db:para>We then implement count() to return the number of items in the layout. To navigate the list of items we use itemAt() and takeAt() to remove and return items from the list. If an item is removed, the remaining items will be renumbered. All three functions are pure virtual functions from <db:link xlink:href="qlayout.xml">QLayout</db:link>.</db:para>
<db:programlisting language="cpp">Qt::Orientations FlowLayout::expandingDirections() const
{
    return { };
}
</db:programlisting>
<db:para>expandingDirections() returns the <db:link xlink:href="qt.xml#Orientation-enum">Qt::Orientation</db:link>s in which the layout can make use of more space than its sizeHint().</db:para>
<db:programlisting language="cpp">bool FlowLayout::hasHeightForWidth() const
{
    return true;
}

int FlowLayout::heightForWidth(int width) const
{
    int height = doLayout(QRect(0, 0, width, 0), true);
    return height;
}
</db:programlisting>
<db:para>To adjust to widgets of which height is dependent on width, we implement heightForWidth(). The function hasHeightForWidth() is used to test for this dependency, and heightForWidth() passes the width on to doLayout() which in turn uses the width as an argument for the layout rect, i.e., the bounds in which the items are laid out. This rect does not include the layout margin().</db:para>
<db:programlisting language="cpp">void FlowLayout::setGeometry(const QRect &amp;amp;rect)
{
    QLayout::setGeometry(rect);
    doLayout(rect, false);
}

QSize FlowLayout::sizeHint() const
{
    return minimumSize();
}

QSize FlowLayout::minimumSize() const
{
    QSize size;
    for (const QLayoutItem *item : std::as_const(itemList))
        size = size.expandedTo(item-&amp;gt;minimumSize());

    const QMargins margins = contentsMargins();
    size += QSize(margins.left() + margins.right(), margins.top() + margins.bottom());
    return size;
}
</db:programlisting>
<db:para>setGeometry() is normally used to do the actual layout, i.e., calculate the geometry of the layout's items. In this example, it calls doLayout() and passes the layout rect.</db:para>
<db:para>sizeHint() returns the preferred size of the layout and minimumSize() returns the minimum size of the layout.</db:para>
<db:programlisting language="cpp">int FlowLayout::doLayout(const QRect &amp;amp;rect, bool testOnly) const
{
    int left, top, right, bottom;
    getContentsMargins(&amp;amp;left, &amp;amp;top, &amp;amp;right, &amp;amp;bottom);
    QRect effectiveRect = rect.adjusted(+left, +top, -right, -bottom);
    int x = effectiveRect.x();
    int y = effectiveRect.y();
    int lineHeight = 0;
</db:programlisting>
<db:para>doLayout() handles the layout if horizontalSpacing() or verticalSpacing() don't return the default value. It uses getContentsMargins() to calculate the area available to the layout items.</db:para>
<db:programlisting language="cpp">    for (QLayoutItem *item : std::as_const(itemList)) {
        const QWidget *wid = item-&amp;gt;widget();
        int spaceX = horizontalSpacing();
        if (spaceX == -1)
            spaceX = wid-&amp;gt;style()-&amp;gt;layoutSpacing(
                QSizePolicy::PushButton, QSizePolicy::PushButton, Qt::Horizontal);
        int spaceY = verticalSpacing();
        if (spaceY == -1)
            spaceY = wid-&amp;gt;style()-&amp;gt;layoutSpacing(
                QSizePolicy::PushButton, QSizePolicy::PushButton, Qt::Vertical);
</db:programlisting>
<db:para>It then sets the proper amount of spacing for each widget in the layout, based on the current style.</db:para>
<db:programlisting language="cpp">        int nextX = x + item-&amp;gt;sizeHint().width() + spaceX;
        if (nextX - spaceX &amp;gt; effectiveRect.right() &amp;amp;&amp;amp; lineHeight &amp;gt; 0) {
            x = effectiveRect.x();
            y = y + lineHeight + spaceY;
            nextX = x + item-&amp;gt;sizeHint().width() + spaceX;
            lineHeight = 0;
        }

        if (!testOnly)
            item-&amp;gt;setGeometry(QRect(QPoint(x, y), item-&amp;gt;sizeHint()));

        x = nextX;
        lineHeight = qMax(lineHeight, item-&amp;gt;sizeHint().height());
    }
    return y + lineHeight - rect.y() + bottom;
}
</db:programlisting>
<db:para>The position of each item in the layout is then calculated by adding the items width and the line height to the initial x and y coordinates. This in turn lets us find out whether the next item will fit on the current line or if it must be moved down to the next. We also find the height of the current line based on the widgets height.</db:para>
<db:programlisting language="cpp">int FlowLayout::smartSpacing(QStyle::PixelMetric pm) const
{
    QObject *parent = this-&amp;gt;parent();
    if (!parent) {
        return -1;
    } else if (parent-&amp;gt;isWidgetType()) {
        QWidget *pw = static_cast&amp;lt;QWidget *&amp;gt;(parent);
        return pw-&amp;gt;style()-&amp;gt;pixelMetric(pm, nullptr, pw);
    } else {
        return static_cast&amp;lt;QLayout *&amp;gt;(parent)-&amp;gt;spacing();
    }
}
</db:programlisting>
<db:para>smartSpacing() is designed to get the default spacing for either the top-level layouts or the sublayouts. The default spacing for top-level layouts, when the parent is a <db:link xlink:href="qwidget.xml">QWidget</db:link>, will be determined by querying the style. The default spacing for sublayouts, when the parent is a <db:link xlink:href="qlayout.xml">QLayout</db:link>, will be determined by querying the spacing of the parent layout.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/layouts/flowlayout?h=6.4">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
