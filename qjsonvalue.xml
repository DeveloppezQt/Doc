<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QJsonValue Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> class encapsulates a value in JSON.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QJsonValue</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QJsonValue is part of <db:simplelist><db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member><db:member><db:link xlink:href="shared.xml">Implicitly Shared Classes</db:link></db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A value in JSON can be one of 6 basic types:</db:para>
<db:para>JSON is a format to store structured data. It has 6 basic data types:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>bool <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Bool</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>double <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Double</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>string <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::String</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>array <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Array</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>object <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Object</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>null <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Null</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:para>A value can represent any of the above data types. In addition, <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> has one special flag to represent undefined values. This can be queried with <db:link xlink:href="qjsonvalue.xml#isUndefined">isUndefined</db:link>().</db:para>
<db:para>The type of the value can be queried with <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() or accessors like <db:link xlink:href="qjsonvalue.xml#isBool">isBool</db:link>(), <db:link xlink:href="qjsonvalue.xml#isString">isString</db:link>(), and so on. Likewise, the value can be converted to the type stored in it using the <db:link xlink:href="qjsonvalue.xml#toBool">toBool</db:link>(), <db:link xlink:href="qjsonvalue.xml#toString">toString</db:link>() and so on.</db:para>
<db:para>Values are strictly typed internally and contrary to <db:link xlink:href="qvariant.xml">QVariant</db:link> will not attempt to do any implicit type conversions. This implies that converting to a type that is not stored in the value will return a default constructed return value.</db:para>
<db:section xml:id="qjsonvalueref">
<db:title>QJsonValueRef</db:title>
<db:para><db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link> is a helper class for <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> and <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>. When you get an object of type <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>, you can use it as if it were a reference to a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link>. If you assign to it, the assignment will apply to the element in the <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link> or <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link> from which you got the reference.</db:para>
<db:para>The following methods return <db:link xlink:href="qjsonvalue.xml#qjsonvalueref">QJsonValueRef</db:link>:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>::operator[](int i)</db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>::operator[](const <db:link xlink:href="qstring.xml">QString</db:link> &amp; key) const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="json.xml">JSON Support in Qt</db:link></db:member>
<db:member><db:link xlink:href="qtcore-serialization-savegame-example.xml">JSON Save Game Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="Type-enum">
<db:title>enum QJsonValue::Type</db:title>
<db:enumsynopsis>
<db:enumname>Type</db:enumname>
<db:enumitem>
<db:enumidentifier>Null</db:enumidentifier>
<db:enumvalue>0x0</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Bool</db:enumidentifier>
<db:enumvalue>0x1</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Double</db:enumidentifier>
<db:enumvalue>0x2</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>String</db:enumidentifier>
<db:enumvalue>0x3</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Array</db:enumidentifier>
<db:enumvalue>0x4</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Object</db:enumidentifier>
<db:enumvalue>0x5</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>Undefined</db:enumidentifier>
<db:enumvalue>0x80</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:para>This enum describes the type of the JSON value.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Null</db:code></db:para>
</db:td>
<db:td><db:code>0x0</db:code></db:td>
<db:td>
<db:para>A Null value</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Bool</db:code></db:para>
</db:td>
<db:td><db:code>0x1</db:code></db:td>
<db:td>
<db:para>A boolean value. Use <db:link xlink:href="qjsonvalue.xml#toBool">toBool</db:link>() to convert to a bool.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Double</db:code></db:para>
</db:td>
<db:td><db:code>0x2</db:code></db:td>
<db:td>
<db:para>A double. Use <db:link xlink:href="qjsonvalue.xml#toDouble">toDouble</db:link>() to convert to a double.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::String</db:code></db:para>
</db:td>
<db:td><db:code>0x3</db:code></db:td>
<db:td>
<db:para>A string. Use <db:link xlink:href="qjsonvalue.xml#toString">toString</db:link>() to convert to a <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Array</db:code></db:para>
</db:td>
<db:td><db:code>0x4</db:code></db:td>
<db:td>
<db:para>An array. Use <db:link xlink:href="qjsonvalue.xml#toArray-1">toArray</db:link>() to convert to a <db:link xlink:href="qjsonarray.xml">QJsonArray</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Object</db:code></db:para>
</db:td>
<db:td><db:code>0x5</db:code></db:td>
<db:td>
<db:para>An object. Use <db:link xlink:href="qjsonvalue.xml#toObject-1">toObject</db:link>() to convert to a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:emphasis>::Undefined</db:code></db:para>
</db:td>
<db:td><db:code>0x80</db:code></db:td>
<db:td>
<db:para>The value is undefined. This is usually returned as an error condition, when trying to read an out of bounds value in an array or a non existent key in an object.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QJsonValue">
<db:title>QJsonValue::QJsonValue(QJsonValue::Type <db:emphasis>type</db:emphasis> = Null)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>QJsonValue::Type</db:type>
<db:parameter>type</db:parameter>
<db:initializer>Null</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(QJsonValue::Type type)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> of type <db:code role="parameter">type</db:code>.</db:para>
<db:para>The default is to create a Null value.</db:para>
</db:section>
<db:section xml:id="QJsonValue-1">
<db:title>QJsonValue::QJsonValue(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(bool b)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type Bool, with value <db:code role="parameter">b</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-2">
<db:title>QJsonValue::QJsonValue(double <db:emphasis>n</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(double n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type Double, with value <db:code role="parameter">n</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-3">
<db:title>QJsonValue::QJsonValue(int <db:emphasis>n</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(int n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a value of type Double, with value <db:code role="parameter">n</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-4">
<db:title>QJsonValue::QJsonValue(qint64 <db:emphasis>n</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>qint64</db:type>
<db:parameter>n</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">4</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(qint64 n)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Creates a value of type Double, with value <db:code role="parameter">n</db:code>. NOTE: the integer limits for IEEE 754 double precision data is 2^53 (-9007199254740992 to +9007199254740992). If you pass in values outside this range expect a loss of precision to occur.</db:para>
</db:section>
<db:section xml:id="QJsonValue-5">
<db:title>QJsonValue::QJsonValue(const QString &amp;<db:emphasis>s</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">5</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(const QString &amp;s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type String, with value <db:code role="parameter">s</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-6">
<db:title>QJsonValue::QJsonValue(QLatin1String <db:emphasis>s</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">6</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(QLatin1String s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type String, with value <db:code role="parameter">s</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-7">
<db:title>[since 5.3] QJsonValue::QJsonValue(const char *<db:emphasis>s</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>const char *</db:type>
<db:parameter>s</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">7</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(const char *s)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type String with value <db:code role="parameter">s</db:code>, assuming UTF-8 encoding of the input.</db:para>
<db:para>You can disable this constructor by defining QT_NO_CAST_FROM_ASCII when you compile your applications.</db:para>
<db:para>This function was introduced in Qt 5.3.</db:para>
</db:section>
<db:section xml:id="QJsonValue-8">
<db:title>QJsonValue::QJsonValue(const QJsonArray &amp;<db:emphasis>a</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">8</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(const QJsonArray &amp;a)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type Array, with value <db:code role="parameter">a</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-9">
<db:title>QJsonValue::QJsonValue(const QJsonObject &amp;<db:emphasis>o</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">9</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(const QJsonObject &amp;o)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a value of type Object, with value <db:code role="parameter">o</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-10">
<db:title>QJsonValue::QJsonValue(const QJsonValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>const QJsonValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">10</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(const QJsonValue &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QJsonValue-11">
<db:title>[since 5.10] QJsonValue::QJsonValue(QJsonValue &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QJsonValue</db:methodname>
<db:methodparam>
<db:type>QJsonValue &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">11</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue(QJsonValue &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Move-constructs a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> from <db:code role="parameter">other</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="dtor.QJsonValue">
<db:title>QJsonValue::~QJsonValue()</db:title>
<db:destructorsynopsis>
<db:methodname>~QJsonValue</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QJsonValue()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the value.</db:para>
</db:section>
<db:section xml:id="fromVariant">
<db:title>[static] QJsonValue QJsonValue::fromVariant(const QVariant &amp;<db:emphasis>variant</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QJsonValue</db:type>
<db:methodname>fromVariant</db:methodname>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>variant</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue fromVariant(const QVariant &amp;variant)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">variant</db:code> to a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> and returns it.</db:para>
<db:para>The conversion will convert <db:link xlink:href="qvariant.xml">QVariant</db:link> types as follows:</db:para>
<db:informaltable style="generic">
<db:thead>
<db:tr>
<db:th>
<db:para>Source type</db:para>
</db:th>
<db:th>
<db:para>Destination type</db:para>
</db:th>
</db:tr>
</db:thead>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Nullptr</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Null</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Bool</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Int</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::UInt</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::LongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::ULongLong</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Float</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Double</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Double</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QString</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::String</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QStringList</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QVariantList</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Array</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QVariantMap</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QVariantHash</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Object</db:link></db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QUrl</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::String</db:link>. The conversion will use <db:link xlink:href="qurl.xml#toString">QUrl::toString</db:link>() with flag <db:link xlink:href="qurl.xml#ComponentFormattingOption-enum">QUrl::FullyEncoded</db:link>, so as to ensure maximum compatibility in parsing the URL</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QUuid</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::String</db:link>. Since Qt 5.11, the resulting string will not include braces</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QCborValue</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para>Whichever type <db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>() returns.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QCborArray</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Array</db:link>. See <db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>() for conversion restrictions.</db:para>
</db:td>
</db:tr>
<db:tr valign="top">
<db:td>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::QCborMap</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:td>
<db:td>
<db:para>QJsonValue::Map. See <db:link xlink:href="qcborvalue.xml#toJsonValue">QCborValue::toJsonValue</db:link>() for conversion restrictions and the &quot;stringification&quot; of map keys.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>For all other <db:link xlink:href="qvariant.xml">QVariant</db:link> types a conversion to a <db:link xlink:href="qstring.xml">QString</db:link> will be attempted. If the returned string is empty, a Null <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> will be stored, otherwise a String value using the returned <db:link xlink:href="qstring.xml">QString</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toVariant">toVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isArray">
<db:title>bool QJsonValue::isArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value contains an array.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toArray-1">toArray</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isBool">
<db:title>bool QJsonValue::isBool() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isBool</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isBool() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value contains a boolean.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toBool">toBool</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isDouble">
<db:title>bool QJsonValue::isDouble() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isDouble</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isDouble() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value contains a double.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toDouble">toDouble</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QJsonValue::isNull() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNull</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNull() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value is null.</db:para>
</db:section>
<db:section xml:id="isObject">
<db:title>bool QJsonValue::isObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value contains an object.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toObject-1">toObject</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isString">
<db:title>bool QJsonValue::isString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value contains a string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#toString">toString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isUndefined">
<db:title>bool QJsonValue::isUndefined() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isUndefined</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isUndefined() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value is undefined. This can happen in certain error cases as e.g. accessing a non existing key in a <db:link xlink:href="qjsonobject.xml">QJsonObject</db:link>.</db:para>
</db:section>
<db:section xml:id="swap">
<db:title>[since 5.10] void QJsonValue::swap(QJsonValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>swap</db:methodname>
<db:methodparam>
<db:type>QJsonValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void swap(QJsonValue &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Swaps the value <db:code role="parameter">other</db:code> with this. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="toArray">
<db:title>QJsonArray QJsonValue::toArray(const QJsonArray &amp;<db:emphasis>defaultValue</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonArray</db:type>
<db:methodname>toArray</db:methodname>
<db:methodparam>
<db:type>const QJsonArray &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonArray toArray(const QJsonArray &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to an array and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Array, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
</db:section>
<db:section xml:id="toArray-1">
<db:title>QJsonArray QJsonValue::toArray() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonArray</db:type>
<db:methodname>toArray</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonArray toArray() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the value to an array and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Array, a <db:link xlink:href="qjsonarray.xml#QJsonArray">QJsonArray</db:link>() will be returned.</db:para>
</db:section>
<db:section xml:id="toBool">
<db:title>bool QJsonValue::toBool(bool <db:emphasis>defaultValue</db:emphasis> = false) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>toBool</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>false</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool toBool(bool defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to a bool and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not bool, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
</db:section>
<db:section xml:id="toDouble">
<db:title>double QJsonValue::toDouble(double <db:emphasis>defaultValue</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>toDouble</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double toDouble(double defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to a double and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Double, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
</db:section>
<db:section xml:id="toInt">
<db:title>[since 5.2] int QJsonValue::toInt(int <db:emphasis>defaultValue</db:emphasis> = 0) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>toInt</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>defaultValue</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int toInt(int defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to an int and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Double or the value is not a whole number, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="toObject">
<db:title>QJsonObject QJsonValue::toObject(const QJsonObject &amp;<db:emphasis>defaultValue</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonObject</db:type>
<db:methodname>toObject</db:methodname>
<db:methodparam>
<db:type>const QJsonObject &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonObject toObject(const QJsonObject &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to an object and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Object, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
</db:section>
<db:section xml:id="toObject-1">
<db:title>QJsonObject QJsonValue::toObject() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonObject</db:type>
<db:methodname>toObject</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonObject toObject() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Converts the value to an object and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not Object, the <db:link xlink:href="qjsonobject.xml#QJsonObject">QJsonObject</db:link>() will be returned.</db:para>
</db:section>
<db:section xml:id="toString">
<db:title>QString QJsonValue::toString() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to a <db:link xlink:href="qstring.xml">QString</db:link> and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not String, a null <db:link xlink:href="qstring.xml">QString</db:link> will be returned.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qstring.xml#isNull">QString::isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="toString-1">
<db:title>QString QJsonValue::toString(const QString &amp;<db:emphasis>defaultValue</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>toString</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>defaultValue</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QString toString(const QString &amp;defaultValue) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to a <db:link xlink:href="qstring.xml">QString</db:link> and returns it.</db:para>
<db:para>If <db:link xlink:href="qjsonvalue.xml#type">type</db:link>() is not String, the <db:code role="parameter">defaultValue</db:code> will be returned.</db:para>
</db:section>
<db:section xml:id="toVariant">
<db:title>QVariant QJsonValue::toVariant() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QVariant</db:type>
<db:methodname>toVariant</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QVariant toVariant() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts the value to a <db:link xlink:href="qvariant.xml#QVariant">QVariant</db:link>().</db:para>
<db:para>The <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> types will be converted as follows:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para>Null</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Nullptr</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Bool</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Bool</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Double</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qmetatype.xml#Type-enum">QMetaType::Double</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>String</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qstring.xml">QString</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Array</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvariant.xml#QVariantList-typedef">QVariantList</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Object</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvariant.xml#QVariantMap-typedef">QVariantMap</db:link></db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para>Undefined</db:para>
</db:td>
<db:td>
<db:para><db:link xlink:href="qvariant.xml#QVariant">QVariant</db:link>()</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#fromVariant">fromVariant</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QJsonValue::Type QJsonValue::type() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QJsonValue::Type</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue::Type type() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the type of the value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Type</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QJsonValue::operator!=(const QJsonValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator!=</db:methodname>
<db:methodparam>
<db:type>const QJsonValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator!=(const QJsonValue &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value is not equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QJsonValue &amp;QJsonValue::operator=(const QJsonValue &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJsonValue &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QJsonValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue &amp; operator=(const QJsonValue &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the value stored in <db:code role="parameter">other</db:code> to this object.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>[since 5.10] QJsonValue &amp;QJsonValue::operator=(QJsonValue &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QJsonValue &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QJsonValue &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QJsonValue &amp; operator=(QJsonValue &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this value.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QJsonValue::operator==(const QJsonValue &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>operator==</db:methodname>
<db:methodparam>
<db:type>const QJsonValue &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool operator==(const QJsonValue &amp;other) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if the value is equal to <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d">
<db:title>[since 5.10] const QJsonValue QJsonValue::operator[](const QString &amp;<db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](const QString &amp;key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> representing the value for the key <db:code role="parameter">key</db:code>.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qjsonvalue.xml#toObject-1">toObject</db:link>().value(key).</db:para>
<db:para>The returned <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> is <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Undefined</db:link> if the key does not exist, or if <db:link xlink:href="qjsonvalue.xml#isObject">isObject</db:link>() is false.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:member>
<db:member><db:link xlink:href="qjsonvalue.xml#isUndefined">QJsonValue::isUndefined</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonobject.xml">QJsonObject</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-5b-5d-1">
<db:title>[since 5.10] const QJsonValue QJsonValue::operator[](QLatin1String <db:emphasis>key</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>QLatin1String</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](QLatin1String key) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
</db:section>
<db:section xml:id="operator-5b-5d-2">
<db:title>[since 5.10] const QJsonValue QJsonValue::operator[](int <db:emphasis>i</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>const QJsonValue</db:type>
<db:methodname>operator[]</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>i</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">const QJsonValue operator[](int i) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> representing the value for index <db:code role="parameter">i</db:code>.</db:para>
<db:para>Equivalent to calling <db:link xlink:href="qjsonvalue.xml#toArray-1">toArray</db:link>().at(i).</db:para>
<db:para>The returned <db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link> is <db:link xlink:href="qjsonvalue.xml#Type-enum">QJsonValue::Undefined</db:link>, if <db:code role="parameter">i</db:code> is out of bounds, or if <db:link xlink:href="qjsonvalue.xml#isArray">isArray</db:link>() is false.</db:para>
<db:para>This function was introduced in Qt 5.10.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qjsonvalue.xml">QJsonValue</db:link></db:member>
<db:member><db:link xlink:href="qjsonvalue.xml#isUndefined">QJsonValue::isUndefined</db:link>()</db:member>
<db:member><db:link xlink:href="qjsonarray.xml">QJsonArray</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
