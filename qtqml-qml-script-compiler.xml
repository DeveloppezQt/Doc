<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML script compiler</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="qtqml-qml-type-compiler.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="QML type compiler"/></db:extendedlink>
<db:abstract>
<db:para>A tool to compile functions and expressions in QML.  The QML script compiler compiles functions and expressions in QML and JavaScript files to a byte code that can be interpreted or Just-in-time compiled by the QML engine.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>In addition, it compiles some functions and expressions in QML files into C++ code, within limitations set by the nature of JavaScript. It generates C++ code for functions that can be exhaustively analyzed. The following flow chart explains the compilation workflow.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlsc-compilation-scheme.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="qmlsc-and-qmlcachegen">
<db:title>qmlsc and qmlcachegen</db:title>
<db:para>QML script compiler is available in two versions. One is <db:emphasis>qmlcachegen</db:emphasis>, which is a part of the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link>. Another one is <db:emphasis>qmlsc</db:emphasis>, which is a part of the commercial-only add-on <db:emphasis>Qt Quick Compiler Extensions</db:emphasis>.</db:para>
<db:para>The base functionality of the QML script compiler is available in both the <db:emphasis>qmlsc</db:emphasis> tool and the <db:emphasis>qmlcachegen</db:emphasis> tool. <db:emphasis>qmlsc</db:emphasis> can generate more efficient C++ code when run in <db:emphasis>direct</db:emphasis> mode. It is enabled by passing --direct-calls via QT_QMLCACHEGEN_ARGUMENTS to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>. In direct mode <db:emphasis>qmlsc</db:emphasis> expects that all C++ types used in your QML code can be made available to the generated code by simple C++ include statements. This means you have to link to private Qt APIs by passing Qt::QuickPrivate, Qt::QmlPrivate, etc to link_libraries() in CMake. <db:emphasis>qmlcachegen</db:emphasis> does not implement direct mode and ignores the <db:emphasis>–direct-calls</db:emphasis> option. Furthermore, <db:emphasis>qmlsc</db:emphasis> accepts a <db:emphasis>–static</db:emphasis> option that you can also pass via <db:emphasis>QT_QMLCACHEGEN_ARGUMENTS</db:emphasis> in <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>. In <db:emphasis>static</db:emphasis> mode, <db:emphasis>qmlsc</db:emphasis> ignores shadowing of properties. This is dangerous if your code actually shadows properties, but allows for more JavaScript code to be compiled to C++. <db:emphasis>qmlcachegen</db:emphasis> ignores the <db:emphasis>–static</db:emphasis> option.</db:para>
</db:section>
<db:section xml:id="limitations-when-compiling-javascript-to-c">
<db:title>Limitations when compiling JavaScript to C++</db:title>
<db:para>Many JavaScript constructs cannot be efficiently represented in C++. The QML script compiler skips the C++ code generation for functions that contain such constructs and only generates byte code to be interpreted or run through the Just-in-time compiler. Most common QML expressions are rather simple: value lookups on QObjects, arithmetics, simple if/else or loop constructs. Those can easily be expressed in C++, and doing so makes your application run faster.</db:para>
</db:section>
</db:article>
