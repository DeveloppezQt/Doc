<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML script compiler</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Qml Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A tool to compile functions and expressions in QML.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The QML script compiler compiles functions and expressions in QML and JavaScript files to a byte code that can be interpreted or Just-in-time compiled by the QML engine.</db:para>
<db:para>In addition, it compiles some functions and expressions in QML files into C++ code, within limitations set by the nature of JavaScript. It generates C++ code for functions that can be exhaustively analyzed. The following flow chart explains the compilation workflow.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlsc-compilation-scheme.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>QML script compiler is available in two versions. One is <db:emphasis>qmlcachegen</db:emphasis>, which is a part of the <db:link xlink:href="qtqml-qtquick-compiler-tech.xml">Qt Quick Compiler</db:link>. Another one is <db:emphasis>qmlsc</db:emphasis>, which is a part of the commercial-only add-on <db:emphasis>Qt Quick Compiler Extensions</db:emphasis>.</db:para>
<db:section xml:id="qmlcachegen">
<db:title>qmlcachegen</db:title>
<db:para><db:emphasis>qmlcachegen</db:emphasis> uses the meta-object system and generates lookups and stores them in a central place, a compilation unit. The compilation unit contains a representation of document structure, compact byte code representation for each function and expression, and native code for functions and bindings that compiler fully understands. The byte code in a compilation unit can be used by the QML engine to avoid re-compilation and to speed up execution.</db:para>
</db:section>
<db:section xml:id="qmlsc">
<db:title>qmlsc</db:title>
<db:para><db:emphasis>qmlsc</db:emphasis>, on the flip side, extends the base functionality of qmlcachegen by providing two extra modes.</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-script-compiler.xml#static-mode">static mode</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para><db:link xlink:href="qtqml-qml-script-compiler.xml#direct-mode">direct mode</db:link></db:para>
</db:listitem>
</db:itemizedlist>
<db:section xml:id="static-mode">
<db:title>static mode</db:title>
<db:para>In static mode, qmlsc assumes that no properties of any types exposed to C++ can be shadowed by derived types. It eliminates the shadow checking mechanism and allows more JavaScript code to be compiled to C++ and eventually generates faster code.</db:para>
<db:para>To enable static mode in qmlsc, you should pass --static via QT_QMLCACHEGEN_ARGUMENTS to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(someTarget
...
)

set_target_properties(someTarget PROPERTIES
    QT_QMLCACHEGEN_ARGUMENTS &quot;--static&quot;
)
</db:programlisting>
<db:warning>
<db:para>qmlsc static-mode generates invalid code if any properties are shadowed in the QML document.</db:para>
</db:warning>
</db:section>
<db:section xml:id="direct-mode">
<db:title>direct mode</db:title>
<db:para>In direct mode, qmlsc assumes that all C++ types used in your QML code are available and can be included as C++ headers to the generated code. Then the generated code accesses or modifies properties by directly calling getters, setters and invokable functions in those headers which makes the execution even faster. This means you have to link to private Qt APIs in CMake.</db:para>
<db:warning>
<db:para>Private Qt APIs change often. You will need to recompile Qt for each new version.</db:para>
</db:warning>
<db:warning>
<db:para>If a type is only defined in a plugin or has no header, you canâ€™t use it in direct mode.</db:para>
</db:warning>
<db:para>To enable direct mode, you should consider the followings:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>you should pass --direct-calls via QT_QMLCACHEGEN_ARGUMENTS to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>.</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(someTarget
...
)

set_target_properties(someTarget PROPERTIES
    QT_QMLCACHEGEN_ARGUMENTS &quot;--direct-calls&quot;
)
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Link all the relavant private Qt modules instead of their public counterparts.</db:para>
<db:programlisting language="cpp" role="bad">qt_add_qml_module(someTarget
...
)

target_link_libraries(someTarget PRIVATE
    Qt::QmlPrivate
    Qt::QuickPrivate
    ...
)
</db:programlisting>
</db:listitem>
<db:listitem>
<db:para>Do not set the PLUGIN_TARGET to be the same as the backing library target.</db:para>
<db:programlisting language="cpp" role="bad"># direct mode will not function in this setup.
qt_add_qml_module(someTarget
PLUGIN_TARGET someTarget
...
)
</db:programlisting>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="limitations-when-compiling-javascript-to-c">
<db:title>Limitations when compiling JavaScript to C++</db:title>
<db:para>Many JavaScript constructs cannot be efficiently represented in C++. The QML script compiler skips the C++ code generation for functions that contain such constructs and only generates byte code to be interpreted or run through the Just-in-time compiler. Most common QML expressions are rather simple: value lookups on QObjects, arithmetics, simple if/else or loop constructs. Those can easily be expressed in C++, and doing so makes your application run faster.</db:para>
</db:section>
<db:section xml:id="obtaining-statistics-about-the-compilation-of-functions-and-bindings">
<db:title>Obtaining statistics about the compilation of functions and bindings</db:title>
<db:para>The QML Script Compiler records statistics when compiling QML to C++. These can give insight into the compilation of functions and bindings and whether it was successful or which error has caused it to fail. In addition to showing these results per binding or function, the statistics are also summarized per file, per module, and at the project level. This can give a quick overview of how well a project is being compiled.</db:para>
<db:para>To show statistics, invoke the <db:emphasis>all_aotstats</db:emphasis> cmake target.</db:para>
<db:para>The collection of compilation statistics is enabled by default. In order to disable it, set the <db:link xlink:href="cmake-variable-qt-qml-generate-aotstats.xml">QT_QML_GENERATE_AOTSTATS</db:link> CMake variable to OFF before the first call to <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link>.</db:para>
<db:note>
<db:para>These statistics are only available for modules registered through the <db:link xlink:href="qt-add-qml-module.xml">qt_add_qml_module</db:link> cmake API</db:para>
</db:note>
</db:section>
</db:article>
