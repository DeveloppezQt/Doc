<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QDBusServiceWatcher Class</db:title>
<db:productname>QtDBus</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>QtDBus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> class allows the user to watch for a bus service change.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QDBusServiceWatcher</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Dbus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Dbus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += dbus</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object can be used to notify the application about an ownership change of a service name on the bus. It has three watch modes:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Watching for service registration only.</db:para>
</db:listitem>
<db:listitem>
<db:para>Watching for service unregistration only.</db:para>
</db:listitem>
<db:listitem>
<db:para>Watching for any kind of service ownership change (the default mode).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Besides being created or deleted, services may change owners without a unregister/register operation happening. So the <db:link xlink:href="qdbusservicewatcher.xml#serviceRegistered">serviceRegistered</db:link>() and <db:link xlink:href="qdbusservicewatcher.xml#serviceUnregistered">serviceUnregistered</db:link>() signals may not be emitted if that happens.</db:para>
<db:para>This class is more efficient than using the QDBusConnectionInterface::serviceOwnerChanged() signal because it allows one to receive only the signals for which the class is interested in.</db:para>
<db:para>Ending a service name with the character '*' will match all service names within the specified namespace.</db:para>
<db:para>For example &quot;com.example.backend1*&quot; will match</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>com.example.backend1</db:para>
</db:listitem>
<db:listitem>
<db:para>com.example.backend1.foo</db:para>
</db:listitem>
<db:listitem>
<db:para>com.example.backend1.foo.bar</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Substrings in the same domain will not be matched, i.e &quot;com.example.backend12&quot;.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusconnection.xml">QDBusConnection</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="WatchModeFlag-enum">
<db:title>enum QDBusServiceWatcher::WatchModeFlag</db:title>
<db:bridgehead renderas="sect2">flags QDBusServiceWatcher::WatchMode</db:bridgehead>
<db:enumsynopsis>
<db:enumname>WatchModeFlag</db:enumname>
<db:enumitem>
<db:enumidentifier>WatchForRegistration</db:enumidentifier>
<db:enumvalue>0x01</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WatchForUnregistration</db:enumidentifier>
<db:enumvalue>0x02</db:enumvalue>
</db:enumitem>
<db:enumitem>
<db:enumidentifier>WatchForOwnerChange</db:enumidentifier>
<db:enumvalue>0x03</db:enumvalue>
</db:enumitem>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:enumsynopsis>
<db:typedefsynopsis>
<db:typedefname>QDBusServiceWatcher::WatchMode</db:typedefname>
</db:typedefsynopsis>
<db:para><db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> supports three different watch modes, which are configured by this flag:</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link></db:emphasis>::WatchForRegistration</db:code></db:para>
</db:td>
<db:td><db:code>0x01</db:code></db:td>
<db:td>
<db:para>watch for service registration only, ignoring any signals related to other service ownership change.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link></db:emphasis>::WatchForUnregistration</db:code></db:para>
</db:td>
<db:td><db:code>0x02</db:code></db:td>
<db:td>
<db:para>watch for service unregistration only, ignoring any signals related to other service ownership change.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link></db:emphasis>::WatchForOwnerChange</db:code></db:para>
</db:td>
<db:td><db:code>0x03</db:code></db:td>
<db:td>
<db:para>watch for any kind of service ownership change.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:para>The <db:code>WatchMode</db:code> type is a typedef for <db:code><db:link xlink:href="qflags.xml">QFlags</db:link>&lt;WatchModeFlag&gt;. </db:code>It stores an OR combination of <db:code>WatchModeFlag</db:code> values.</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="watchMode-prop">
<db:title>watchMode : WatchMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>WatchMode</db:type>
<db:varname>watchMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">watchMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setWatchMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the current watch mode for this <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object.</db:para>
<db:para>The default value for this property is QDBusServiceWatcher::WatchForOwnershipChange.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qdbusservicewatcher.xml#WatchModeFlag-enum">QDBusServiceWatcher::WatchMode</db:link></db:type> <db:emphasis role="bold">watchMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setWatchMode</db:emphasis>(<db:type><db:link xlink:href="qdbusservicewatcher.xml#WatchModeFlag-enum">QDBusServiceWatcher::WatchMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="watchedServices-prop">
<db:title>watchedServices : QStringList</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QStringList</db:type>
<db:varname>watchedServices</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">watchedServices</db:synopsisinfo>
<db:synopsisinfo role="setter">setWatchedServices</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the list of services watched.</db:para>
<db:note>
<db:para>Modifying this list with setServicesWatched() is an expensive operation. If you can, prefer to change it by way of <db:link xlink:href="qdbusservicewatcher.xml#addWatchedService">addWatchedService</db:link>() and <db:link xlink:href="qdbusservicewatcher.xml#removeWatchedService">removeWatchedService</db:link>().</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> <db:emphasis role="bold"><db:link xlink:href="qdbusservicewatcher.xml#watchedServices">watchedServices</db:link></db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qdbusservicewatcher.xml#setWatchedServices">setWatchedServices</db:link></db:emphasis>(const <db:type><db:link xlink:href="qstringlist.xml">QStringList</db:link></db:type> &amp;<db:emphasis>services</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QDBusServiceWatcher">
<db:title>[explicit] QDBusServiceWatcher::QDBusServiceWatcher(QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusServiceWatcher</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusServiceWatcher(QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object. Note that until you set a connection with <db:link xlink:href="qdbusservicewatcher.xml#setConnection">setConnection</db:link>(), this object will not emit any signals.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> parameter is passed to <db:link xlink:href="qobject.xml">QObject</db:link> to set the parent of this object.</db:para>
</db:section>
<db:section xml:id="QDBusServiceWatcher-1">
<db:title>QDBusServiceWatcher::QDBusServiceWatcher(const QString &amp;<db:emphasis>service</db:emphasis>, const QDBusConnection &amp;<db:emphasis>connection</db:emphasis>, QDBusServiceWatcher::WatchMode <db:emphasis>watchMode</db:emphasis> = WatchForOwnerChange, QObject *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QDBusServiceWatcher</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QDBusConnection &amp;</db:type>
<db:parameter>connection</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDBusServiceWatcher::WatchMode</db:type>
<db:parameter>watchMode</db:parameter>
<db:initializer>WatchForOwnerChange</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusServiceWatcher(const QString &amp;service, const QDBusConnection &amp;connection, QDBusServiceWatcher::WatchMode watchMode, QObject *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object and attaches it to the <db:code role="parameter">connection</db:code> connection. Also, this function immediately starts watching for <db:code role="parameter">watchMode</db:code> changes to service <db:code role="parameter">service</db:code>.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> parameter is passed to <db:link xlink:href="qobject.xml">QObject</db:link> to set the parent of this object.</db:para>
</db:section>
<db:section xml:id="dtor.QDBusServiceWatcher">
<db:title>[virtual] QDBusServiceWatcher::~QDBusServiceWatcher()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QDBusServiceWatcher</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QDBusServiceWatcher()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object and releases any resources associated with it.</db:para>
</db:section>
<db:section xml:id="addWatchedService">
<db:title>void QDBusServiceWatcher::addWatchedService(const QString &amp;<db:emphasis>newService</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addWatchedService</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newService</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addWatchedService(const QString &amp;newService)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds <db:code role="parameter">newService</db:code> to the list of services to be watched by this object. This function is more efficient than <db:link xlink:href="qdbusservicewatcher.xml#setWatchedServices">setWatchedServices</db:link>() and should be used whenever possible to add services.</db:para>
</db:section>
<db:section xml:id="connection">
<db:title>QDBusConnection QDBusServiceWatcher::connection() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QDBusConnection</db:type>
<db:methodname>connection</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDBusConnection connection() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qdbusconnection.xml">QDBusConnection</db:link> that this object is attached to.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#setConnection">setConnection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="removeWatchedService">
<db:title>bool QDBusServiceWatcher::removeWatchedService(const QString &amp;<db:emphasis>service</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>removeWatchedService</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>service</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool removeWatchedService(const QString &amp;service)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes the <db:code role="parameter">service</db:code> from the list of services being watched by this object. Note that D-Bus notifications are asynchronous, so there may still be signals pending delivery about <db:code role="parameter">service</db:code>. Those signals will still be emitted whenever the D-Bus messages are processed.</db:para>
<db:para>This function returns true if any services were removed.</db:para>
</db:section>
<db:section xml:id="serviceOwnerChanged">
<db:title>void QDBusServiceWatcher::serviceOwnerChanged(const QString &amp;<db:emphasis>serviceName</db:emphasis>, const QString &amp;<db:emphasis>oldOwner</db:emphasis>, const QString &amp;<db:emphasis>newOwner</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>serviceOwnerChanged</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>serviceName</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>oldOwner</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>newOwner</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void serviceOwnerChanged(const QString &amp;serviceName, const QString &amp;oldOwner, const QString &amp;newOwner)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever this object detects that there was a service ownership change relating to the <db:code role="parameter">serviceName</db:code> service. The <db:code role="parameter">oldOwner</db:code> parameter contains the old owner name and <db:code role="parameter">newOwner</db:code> is the new owner. Both <db:code role="parameter">oldOwner</db:code> and <db:code role="parameter">newOwner</db:code> are unique connection names.</db:para>
<db:para>Note that this signal is also emitted whenever the <db:code role="parameter">serviceName</db:code> service was registered or unregistered. If it was registered, <db:code role="parameter">oldOwner</db:code> will contain an empty string, whereas if it was unregistered, <db:code role="parameter">newOwner</db:code> will contain an empty string.</db:para>
<db:para>If you need only to find out if the service is registered or unregistered only, without being notified that the ownership changed, consider using the specific modes for those operations. This class is more efficient if you use the more specific modes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceRegistered">serviceRegistered</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceUnregistered">serviceUnregistered</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceRegistered">
<db:title>void QDBusServiceWatcher::serviceRegistered(const QString &amp;<db:emphasis>serviceName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>serviceRegistered</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>serviceName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void serviceRegistered(const QString &amp;serviceName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever this object detects that the service <db:code role="parameter">serviceName</db:code> became available on the bus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceUnregistered">serviceUnregistered</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceOwnerChanged">serviceOwnerChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serviceUnregistered">
<db:title>void QDBusServiceWatcher::serviceUnregistered(const QString &amp;<db:emphasis>serviceName</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>serviceUnregistered</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>serviceName</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void serviceUnregistered(const QString &amp;serviceName)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted whenever this object detects that the service <db:code role="parameter">serviceName</db:code> was unregistered from the bus and is no longer available.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceRegistered">serviceRegistered</db:link>()</db:member>
<db:member><db:link xlink:href="qdbusservicewatcher.xml#serviceOwnerChanged">serviceOwnerChanged</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setConnection">
<db:title>void QDBusServiceWatcher::setConnection(const QDBusConnection &amp;<db:emphasis>connection</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setConnection</db:methodname>
<db:methodparam>
<db:type>const QDBusConnection &amp;</db:type>
<db:parameter>connection</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setConnection(const QDBusConnection &amp;connection)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the D-Bus connection that this object is attached to be <db:code role="parameter">connection</db:code>. All services watched will be transferred to this connection.</db:para>
<db:para>Note that <db:link xlink:href="qdbusconnection.xml">QDBusConnection</db:link> objects are reference counted: <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> will keep a reference for this connection while it exists. The connection is not closed until the reference count drops to zero, so this will ensure that any notifications are received while this <db:link xlink:href="qdbusservicewatcher.xml">QDBusServiceWatcher</db:link> object exists.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#connection">connection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setWatchedServices">
<db:title>void QDBusServiceWatcher::setWatchedServices(const QStringList &amp;<db:emphasis>services</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setWatchedServices</db:methodname>
<db:methodparam>
<db:type>const QStringList &amp;</db:type>
<db:parameter>services</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">watchedServices</db:synopsisinfo>
<db:synopsisinfo role="signature">void setWatchedServices(const QStringList &amp;services)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the list of D-Bus services being watched to be <db:code role="parameter">services</db:code>.</db:para>
<db:para>Note that setting the entire list means removing all previous rules for watching services and adding new ones. This is an expensive operation and should be avoided, if possible. Instead, use <db:link xlink:href="qdbusservicewatcher.xml#addWatchedService">addWatchedService</db:link>() and <db:link xlink:href="qdbusservicewatcher.xml#removeWatchedService">removeWatchedService</db:link>() if you can to manipulate entries in the list.</db:para>
<db:note>
<db:para>Setter function for property <db:link xlink:href="qdbusservicewatcher.xml#watchedServices-prop">watchedServices</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#watchedServices">watchedServices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="watchedServices">
<db:title>QStringList QDBusServiceWatcher::watchedServices() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QStringList</db:type>
<db:methodname>watchedServices</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">watchedServices</db:synopsisinfo>
<db:synopsisinfo role="signature">QStringList watchedServices() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the list of D-Bus services that are being watched.</db:para>
<db:note>
<db:para>Getter function for property <db:link xlink:href="qdbusservicewatcher.xml#watchedServices-prop">watchedServices</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdbusservicewatcher.xml#setWatchedServices">setWatchedServices</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
