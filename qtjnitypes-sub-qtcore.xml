<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QtJniTypes Namespace</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Qt Core Reference Documentation.</db:para></db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="macro-documentation">
<db:title>Macro Documentation</db:title>
<db:section xml:id="Q_DECLARE_JNI_CLASS">
<db:title>[since 6.8] Q_DECLARE_JNI_CLASS(<db:emphasis>Type</db:emphasis>, <db:emphasis>JavaSignature</db:emphasis>)</db:title>
<db:para>Declares a C++ type <db:code role="parameter">Type</db:code> in the <db:link xlink:href="qtjnitypes-sub-qtcore.xml">QtJniTypes</db:link> namespace that wraps the Java class <db:code role="parameter">JavaSignature</db:code>. The Java class name in <db:code role="parameter">JavaSignature</db:code> needs to be fully qualified, using / as the separator.</db:para>
<db:programlisting language="cpp">Q_DECLARE_JNI_CLASS(File, &quot;java/io/File&quot;)
Q_DECLARE_JNI_CLASS(FileWriter, &quot;java/io/FileWriter&quot;)
</db:programlisting>
<db:para>The C++ classes QtJniTypes::File and QtJniTypes::FileWriter are then <db:link xlink:href="qjniobject.xml">QJniObject</db:link>-like types that can be used to instantiate the corresponding Java class, to call methods, and to pass such instances through <db:link xlink:href="qjniobject.xml">QJniObject</db:link> variadic template methods with automatic, compile-time signature deduction.</db:para>
<db:programlisting language="cpp">using namespace QtJniTypes;

File file(&quot;path/to/file&quot;); // instantiates the java.io.File type in Java
if (file.callMethod&lt;bool&gt;(&quot;createNewFile&quot;)) {
    FileWriter writer(file); // instantiates a java.io.FileWriter that operates on file
    writer.callMethod(&quot;write&quot;, 42);
}
</db:programlisting>
<db:para>In addition to the <db:link xlink:href="qjniobject.xml">QJniObject</db:link> API, those C++ classes also have a static registerNativeMethods member function that can be used like this:</db:para>
<db:programlisting language="cpp">QtJniTypes::File::registerNativeMethods({
    Q_JNI_NATIVE_METHOD(freeFunction)
});
</db:programlisting>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD">Q_DECLARE_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_JNI_NATIVE_METHOD">
<db:title>[since 6.8] Q_DECLARE_JNI_NATIVE_METHOD(<db:emphasis>Method</db:emphasis>)</db:title>
<db:para>Declares the free C or C++ function <db:code role="parameter">Method</db:code> as a native method. The method can later be registered with the JNI framework using QJniEnvironment::registerNativeMethod() with the help of the <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link> macro.</db:para>
<db:programlisting language="cpp">// C++ side

Q_DECLARE_JNI_CLASS(MyJavaType, &quot;my/java/Type&quot;)

static void nativeFunction(JNIEnv *env, jobject thiz, jlong id)
{
    // ...
}
Q_DECLARE_JNI_NATIVE_METHOD(nativeFunction)

Q_DECL_EXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
{
    QJniEnvironment env;
    env.registerNativeMethods&lt;QtJniTypes::MyJavaType&gt;({
        Q_JNI_NATIVE_METHOD(nativeFunction)
    });
}

// Java side
public class MyJavaType
{
    native public nativeFunction(long id);
}
</db:programlisting>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE">Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_JNI_NATIVE_METHOD-1">
<db:title>[since 6.8] Q_DECLARE_JNI_NATIVE_METHOD(<db:emphasis>Method</db:emphasis>, <db:emphasis>JavaName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Declares the free C or C++ function <db:code role="parameter">Method</db:code> as a native method that's available in Java as <db:code role="parameter">JavaName</db:code>. The method can later be registered with the JNI framework using QJniEnvironment::registerNativeMethod() with the help of the <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link> macro.</db:para>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE">Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE">
<db:title>[since 6.8] Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE(<db:emphasis>Method</db:emphasis>)</db:title>
<db:para>Declares the C++ static class member function <db:code role="parameter">Method</db:code> as a native method. The method can later be registered with the JNI framework using QJniEnvironment::registerNativeMethod() with the help of the <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_SCOPED_METHOD">Q_JNI_NATIVE_SCOPED_METHOD</db:link> macro.</db:para>
<db:programlisting language="cpp">class NativeHandler
{
    // ...
private:
    static void handleChange(JNIEnv*, jobject, jlong id);
    Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE(handleChange)
};

\dots
QJniEnvironment env;
env.registerNativeMethods&lt;QtJniTypes::MyJavaType&gt;({
    Q_JNI_NATIVE_SCOPED_METHOD(handleChange, NativeHandler)
});
</db:programlisting>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD">Q_DECLARE_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_SCOPED_METHOD">Q_JNI_NATIVE_SCOPED_METHOD</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE-1">
<db:title>[since 6.8] Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE(<db:emphasis>Method</db:emphasis>, <db:emphasis>JavaName</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>Declares the C++ static class member function <db:code role="parameter">Method</db:code> as a native method that's available in Java as <db:code role="parameter">JavaName</db:code>. The method can later be registered with the JNI framework using QJniEnvironment::registerNativeMethod() with the help of the <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link> macro.</db:para>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD">Q_DECLARE_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_SCOPED_METHOD">Q_JNI_NATIVE_SCOPED_METHOD</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_JNI_NATIVE_METHOD">
<db:title>[since 6.8] Q_JNI_NATIVE_METHOD(<db:emphasis>Method</db:emphasis>)</db:title>
<db:para>Makes the previously <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD">declared</db:link> native method <db:code role="parameter">Method</db:code> available for registration with the JNI framework. Use this macro when registering the method with JNI using QJniEnvironment::registerNativeMethod().</db:para>
<db:programlisting language="cpp">Q_DECL_EXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved)
{
    QJniEnvironment env;
    env.registerNativeMethods&lt;QtJniTypes::MyJavaType&gt;({
        Q_JNI_NATIVE_METHOD(nativeFunction)
    });
}
</db:programlisting>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD">Q_DECLARE_JNI_NATIVE_METHOD</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="Q_JNI_NATIVE_SCOPED_METHOD">
<db:title>[since 6.8] Q_JNI_NATIVE_SCOPED_METHOD(<db:emphasis>Method</db:emphasis>, <db:emphasis>Scope</db:emphasis>)</db:title>
<db:para>Makes the previously <db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE">declared</db:link> native method <db:code role="parameter">Method</db:code> in scope <db:code role="parameter">Scope</db:code> available for registration with the JNI framework. Use this macro when registering the method with JNI using QJniEnvironment::registerNativeMethod().</db:para>
<db:para>This macro was introduced in Qt 6.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_JNI_NATIVE_METHOD">Q_JNI_NATIVE_METHOD</db:link></db:member>
<db:member><db:link xlink:href="qtjnitypes-sub-qtcore.xml#Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE">Q_DECLARE_JNI_NATIVE_METHOD_IN_CURRENT_SCOPE</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
