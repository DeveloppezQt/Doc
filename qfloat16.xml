<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>qfloat16 Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides 16-bit floating point support.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QFloat16</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>qfloat16 is part of <db:simplelist><db:member>funclists</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The qfloat16 class provides support for half-precision (16-bit) floating point data. It is fully compliant with IEEE 754 as a storage type. This implies that any arithmetic operation on a qfloat16 instance results in the value first being converted to a float. This conversion to and from float is performed by hardware when possible, but on processors that do not natively support half-precision, the conversion is performed through a sequence of lookup table operations.</db:para>
<db:para>qfloat16 should be treated as if it were a POD (plain old data) type. Consequently, none of the supported operations need any elaboration beyond stating that it supports all arithmetic operators incident to floating point types.</db:para>
<db:note>
<db:para>On x86 and x86-64 that to get hardware accelerated conversions you must compile with F16C or AVX2 enabled, or use <db:link xlink:href="qfloat16.xml#qFloatToFloat16">qFloatToFloat16</db:link>() and <db:link xlink:href="qfloat16.xml#qFloatFromFloat16">qFloatFromFloat16</db:link>() which will detect F16C at runtime.</db:para>
</db:note>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="qfloat16-1">
<db:title>[explicit, since 6.1] qfloat16::qfloat16(<db:emphasis>Qt::Initialization</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>qfloat16</db:methodname>
<db:methodparam>
<db:type>Qt::Initialization</db:type>
<db:parameter></db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">qfloat16(Qt::Initialization)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a qfloat16 without initializing the value.</db:para>
<db:para>This function was introduced in Qt 6.1.</db:para>
</db:section>
<db:section xml:id="copySign">
<db:title>qfloat16 qfloat16::copySign(qfloat16 <db:emphasis>sign</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qfloat16</db:type>
<db:methodname>copySign</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>sign</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qfloat16 copySign(qfloat16 sign) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a qfloat16 with the sign of <db:code role="parameter">sign</db:code> but the rest of its value taken from this qfloat16. Serves as qfloat16's equivalent of std::copysign().</db:para>
</db:section>
<db:section xml:id="isNormal">
<db:title>[constexpr] bool qfloat16::isNormal() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isNormal</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isNormal() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if this qfloat16 value is finite and in normal form.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qfloat16.xml#qFpClassify">qFpClassify</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="qFloatFromFloat16">
<db:title>void qFloatFromFloat16(float *<db:emphasis>out</db:emphasis>, const qfloat16 *<db:emphasis>in</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qFloatFromFloat16</db:methodname>
<db:methodparam>
<db:type>float *</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const qfloat16 *</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qFloatFromFloat16(float *out, const qfloat16 *in, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">len</db:code> qfloat16 from <db:code role="parameter">in</db:code> to floats and stores them in <db:code role="parameter">out</db:code>. Both <db:code role="parameter">in</db:code> and <db:code role="parameter">out</db:code> must have <db:code role="parameter">len</db:code> allocated entries.</db:para>
<db:para>This function is faster than converting values one by one, and will do runtime F16C detection on x86 and x86-64 hardware.</db:para>
</db:section>
<db:section xml:id="qFloatToFloat16">
<db:title>void qFloatToFloat16(qfloat16 *<db:emphasis>out</db:emphasis>, const float *<db:emphasis>in</db:emphasis>, qsizetype <db:emphasis>len</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>qFloatToFloat16</db:methodname>
<db:methodparam>
<db:type>qfloat16 *</db:type>
<db:parameter>out</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const float *</db:type>
<db:parameter>in</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qsizetype</db:type>
<db:parameter>len</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void qFloatToFloat16(qfloat16 *out, const float *in, qsizetype len)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Converts <db:code role="parameter">len</db:code> floats from <db:code role="parameter">in</db:code> to qfloat16 and stores them in <db:code role="parameter">out</db:code>. Both <db:code role="parameter">in</db:code> and <db:code role="parameter">out</db:code> must have <db:code role="parameter">len</db:code> allocated entries.</db:para>
<db:para>This function is faster than converting values one by one, and will do runtime F16C detection on x86 and x86-64 hardware.</db:para>
</db:section>
<db:section xml:id="qFpClassify">
<db:title>int qFpClassify(qfloat16 <db:emphasis>val</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qFpClassify</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>val</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qFpClassify(qfloat16 val)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtnumeric.xml#qFpClassify-1">qFpClassify</db:link>(float).</db:para>
<db:para>Returns the floating-point class of <db:code role="parameter">val</db:code>.</db:para>
</db:section>
<db:section xml:id="qFuzzyCompare">
<db:title>bool qFuzzyCompare(qfloat16 <db:emphasis>p1</db:emphasis>, qfloat16 <db:emphasis>p2</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qFuzzyCompare</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>p1</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>p2</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qFuzzyCompare(qfloat16 p1, qfloat16 p2)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtnumeric.xml#qFuzzyCompare-1">qFuzzyCompare</db:link>(float, float).</db:para>
<db:para>Compares the floating point value <db:code role="parameter">p1</db:code> and <db:code role="parameter">p2</db:code> and returns true if they are considered equal, otherwise false.</db:para>
<db:para>The two numbers are compared in a relative way, where the exactness is stronger the smaller the numbers are.</db:para>
</db:section>
<db:section xml:id="qHash">
<db:title>[since 6.5.3] size_t qHash(qfloat16 <db:emphasis>key</db:emphasis>, size_t <db:emphasis>seed</db:emphasis> = 0)</db:title>
<db:methodsynopsis>
<db:type>size_t</db:type>
<db:methodname>qHash</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>key</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>size_t</db:type>
<db:parameter>seed</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">size_t qHash(qfloat16 key, size_t seed)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the hash value for the <db:code role="parameter">key</db:code>, using <db:code role="parameter">seed</db:code> to seed the calculation.</db:para>
<db:note>
<db:para>In Qt versions before 6.5, this operation was provided by the <db:link xlink:href="qhash.xml#qhash">qHash</db:link>(float) overload. In Qt versions 6.5.0 to 6.5.2, this functionality was broken in various ways. In Qt versions 6.5.3 and 6.6 onwards, this overload restores the Qt 6.4 behavior.</db:para>
</db:note>
<db:para>This function was introduced in Qt 6.5.3.</db:para>
</db:section>
<db:section xml:id="qIsFinite">
<db:title>bool qIsFinite(qfloat16 <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qIsFinite</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qIsFinite(qfloat16 f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads qIsFinite(float).</db:para>
<db:para>Returns true if the qfloat16 <db:code role="parameter">f</db:code> is a finite number.</db:para>
</db:section>
<db:section xml:id="qIsInf">
<db:title>bool qIsInf(qfloat16 <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qIsInf</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qIsInf(qfloat16 f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads qIsInf(float).</db:para>
<db:para>Returns true if the qfloat16 <db:code role="parameter">f</db:code> is equivalent to infinity.</db:para>
</db:section>
<db:section xml:id="qIsNaN">
<db:title>bool qIsNaN(qfloat16 <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>qIsNaN</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool qIsNaN(qfloat16 f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads qIsNaN(float).</db:para>
<db:para>Returns true if the qfloat16 <db:code role="parameter">f</db:code> is not a number (NaN).</db:para>
</db:section>
<db:section xml:id="qRound64">
<db:title>qint64 qRound64(qfloat16 <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>qint64</db:type>
<db:methodname>qRound64</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qint64 qRound64(qfloat16 value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtnumeric.xml#qRound64-1">qRound64</db:link>(float).</db:para>
<db:para>Rounds <db:code role="parameter">value</db:code> to the nearest 64-bit integer.</db:para>
</db:section>
<db:section xml:id="qRound">
<db:title>int qRound(qfloat16 <db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>int</db:type>
<db:methodname>qRound</db:methodname>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int qRound(qfloat16 value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function overloads <db:link xlink:href="qtnumeric.xml#qRound-1">qRound</db:link>(float).</db:para>
<db:para>Rounds <db:code role="parameter">value</db:code> to the nearest integer.</db:para>
</db:section>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>ds</db:emphasis>, qfloat16 <db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&lt;&lt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>ds</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qfloat16</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&lt;&lt;(QDataStream &amp;ds, qfloat16 f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Writes a floating point number, <db:code role="parameter">f</db:code>, to the stream <db:code role="parameter">ds</db:code> using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.3, this was a member function on <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>ds</db:emphasis>, qfloat16 &amp;<db:emphasis>f</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QDataStream &amp;</db:type>
<db:methodname>operator&gt;&gt;</db:methodname>
<db:methodparam>
<db:type>QDataStream &amp;</db:type>
<db:parameter>ds</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>qfloat16 &amp;</db:type>
<db:parameter>f</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QDataStream &amp; operator&gt;&gt;(QDataStream &amp;ds, qfloat16 &amp;f)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reads a floating point number from the stream <db:code role="parameter">ds</db:code> into <db:code role="parameter">f</db:code>, using the standard IEEE 754 format. Returns a reference to the stream.</db:para>
<db:note>
<db:para>In Qt versions prior to 6.3, this was a member function on <db:link xlink:href="qdatastream.xml">QDataStream</db:link>.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
