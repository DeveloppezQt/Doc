<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTemporaryDir Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> class creates a unique directory for temporary use.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTemporaryDir</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTemporaryDir is part of <db:simplelist><db:member><db:link xlink:href="io.xml">Input/Output and Networking</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> is used to create unique temporary dirs safely. The dir itself is created by the constructor. The name of the temporary directory is guaranteed to be unique (i.e., you are guaranteed to not overwrite an existing dir), and the directory will subsequently be removed upon destruction of the <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> object. The directory name is either auto-generated, or created based on a template, which is passed to <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link>'s constructor.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">    // Within a function/method...

    QTemporaryDir dir;
    if (dir.isValid()) {
        // dir.path() returns the unique directory path
    }

    // The QTemporaryDir destructor removes the temporary directory
    // as it goes out of scope.
</db:programlisting>
<db:para>It is very important to test that the temporary directory could be created, using <db:link xlink:href="qtemporarydir.xml#isValid">isValid</db:link>(). Do not use <db:link xlink:href="qdir.xml#exists-1">exists</db:link>(), since a default-constructed <db:link xlink:href="qdir.xml">QDir</db:link> represents the current directory, which exists.</db:para>
<db:para>The path to the temporary dir can be found by calling <db:link xlink:href="qtemporarydir.xml#path">path</db:link>().</db:para>
<db:para>A temporary directory will have some static part of the name and some part that is calculated to be unique. The default path will be determined from <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() (otherwise qt_temp) and will be placed into the temporary path as returned by <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>(). If you specify your own path, a relative path will not be placed in the temporary directory by default, but be relative to the current working directory. In all cases, a random string will be appended to the path in order to make it unique.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
<db:member><db:link xlink:href="qdir.xml">QDir</db:link></db:member>
<db:member><db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTemporaryDir">
<db:title>QTemporaryDir::QTemporaryDir()</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> using as template the application name returned by <db:link xlink:href="qcoreapplication.xml#applicationName-prop">QCoreApplication::applicationName</db:link>() (otherwise qt_temp). The directory is stored in the system's temporary directory, <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="QTemporaryDir-1">
<db:title>[explicit] QTemporaryDir::QTemporaryDir(const QString &amp;<db:emphasis>templatePath</db:emphasis>)</db:title>
<db:para>Constructs a <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> with a template of <db:code role="parameter">templatePath</db:code>.</db:para>
<db:para>If <db:code role="parameter">templatePath</db:code> is a relative path, the path will be relative to the current working directory. You can use <db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>() to construct <db:code role="parameter">templatePath</db:code> if you want use the system's temporary directory.</db:para>
<db:para>If the <db:code role="parameter">templatePath</db:code> ends with XXXXXX it will be used as the dynamic portion of the directory name, otherwise it will be appended. Unlike <db:link xlink:href="qtemporaryfile.xml">QTemporaryFile</db:link>, XXXXXX in the middle of the template string is not supported.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qdir.xml#tempPath">QDir::tempPath</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dtor.QTemporaryDir">
<db:title>[noexcept] QTemporaryDir::~QTemporaryDir()</db:title>
<db:para>Destroys the temporary directory object. If auto remove mode was set, it will automatically delete the directory including all its contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporarydir.xml#autoRemove">autoRemove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="autoRemove">
<db:title>bool QTemporaryDir::autoRemove() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> is in auto remove mode. Auto-remove mode will automatically delete the directory from disk upon destruction. This makes it very easy to create your <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> object on the stack, fill it with files, do something with the files, and finally on function return it will automatically clean up after itself.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporarydir.xml#setAutoRemove">setAutoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporarydir.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="errorString">
<db:title>[since 5.6] QString QTemporaryDir::errorString() const</db:title>
<db:para>If <db:link xlink:href="qtemporarydir.xml#isValid">isValid</db:link>() returns false, this function returns the error string that explains why the creation of the temporary directory failed. Otherwise, this function return an empty string.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTemporaryDir::isValid() const</db:title>
<db:para>Returns true if the <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> was created successfully.</db:para>
</db:section>
<db:section xml:id="path">
<db:title>QString QTemporaryDir::path() const</db:title>
<db:para>Returns the path to the temporary directory. Empty if the <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> could not be created.</db:para>
</db:section>
<db:section xml:id="remove">
<db:title>bool QTemporaryDir::remove()</db:title>
<db:para>Removes the temporary directory, including all its contents.</db:para>
<db:para>Returns true if removing was successful.</db:para>
</db:section>
<db:section xml:id="setAutoRemove">
<db:title>void QTemporaryDir::setAutoRemove(bool <db:emphasis>b</db:emphasis>)</db:title>
<db:para>Sets the <db:link xlink:href="qtemporarydir.xml">QTemporaryDir</db:link> into auto-remove mode if <db:code role="parameter">b</db:code> is true.</db:para>
<db:para>Auto-remove is on by default.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtemporarydir.xml#autoRemove">autoRemove</db:link>()</db:member>
<db:member><db:link xlink:href="qtemporarydir.xml#remove">remove</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
