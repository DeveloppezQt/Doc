<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QT_HOST_PATH</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.8.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Location of the host Qt installation when cross-compiling.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:anchor xml:id="cmake-variable-qt-host-path"/>
<db:para>Location of the host Qt installation when cross-compiling.</db:para>
<db:para>This variable was introduced in Qt 6.0.</db:para>
<db:para>When cross-compiling, this variable must be set to the install location of Qt for the host platform. It is used to locate tools to be run on the host (moc, rcc, <db:link xlink:href="android-deploy-qt-tool.xml#androiddeployqt">androiddeployqt</db:link>, and so on). It's possible to reuse pre-installed tools when compiling Qt for host systems too, by using QT_HOST_PATH that points to a pre-installed host Qt and setting the QT_FORCE_FIND_TOOLS to ON. The Qt versions should match in this case.</db:para>
</db:article>
