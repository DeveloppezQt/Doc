<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWaitCondition Class</db:title>
<db:productname>QtCore</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> class provides a condition variable for synchronizing threads.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">thread-safe</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWaitCondition</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Core)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Core)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QWaitCondition is part of <db:simplelist><db:member>thread</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> allows a thread to tell other threads that some sort of condition has been met. One or many threads can block waiting for a <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> to set a condition with <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>(). Use <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() to wake one randomly selected thread or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>() to wake them all.</db:para>
<db:para>For example, let's suppose that we have three tasks that should be performed whenever the user presses a key. Each task could be split into a thread, each of which would have a <db:link xlink:href="qthread.xml#run">run</db:link>() body like this:</db:para>
<db:programlisting language="cpp">forever {
    mutex.lock();
    keyPressed.wait(&amp;amp;mutex);
    do_something();
    mutex.unlock();
}
</db:programlisting>
<db:para>Here, the keyPressed variable is a global variable of type <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link>.</db:para>
<db:para>A fourth thread would read key presses and wake the other three threads up every time it receives one, like this:</db:para>
<db:programlisting language="cpp">forever {
    getchar();
    keyPressed.wakeAll();
}
</db:programlisting>
<db:para>The order in which the three threads are woken up is undefined. Also, if some of the threads are still in do_something() when the key is pressed, they won't be woken up (since they're not waiting on the condition variable) and so the task will not be performed for that key press. This issue can be solved using a counter and a <db:link xlink:href="qmutex.xml">QMutex</db:link> to guard it. For example, here's the new code for the worker threads:</db:para>
<db:programlisting language="cpp">forever {
    mutex.lock();
    keyPressed.wait(&amp;amp;mutex);
    ++count;
    mutex.unlock();

    do_something();

    mutex.lock();
    --count;
    mutex.unlock();
}
</db:programlisting>
<db:para>Here's the code for the fourth thread:</db:para>
<db:programlisting language="cpp">forever {
    getchar();

    mutex.lock();
    // Sleep until there are no busy worker threads
    while (count &amp;gt; 0) {
        mutex.unlock();
        sleep(1);
        mutex.lock();
    }
    keyPressed.wakeAll();
    mutex.unlock();
}
</db:programlisting>
<db:para>The mutex is necessary because the results of two threads attempting to change the value of the same variable simultaneously are unpredictable.</db:para>
<db:para>Wait conditions are a powerful thread synchronization primitive. The <db:link xlink:href="qtcore-threads-waitconditions-example.xml">Producer and Consumer using Wait Conditions</db:link> example shows how to use <db:link xlink:href="qwaitcondition.xml">QWaitCondition</db:link> as an alternative to <db:link xlink:href="qsemaphore.xml">QSemaphore</db:link> for controlling access to a circular buffer shared by a producer thread and a consumer thread.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmutex.xml">QMutex</db:link></db:member>
<db:member><db:link xlink:href="qsemaphore.xml">QSemaphore</db:link></db:member>
<db:member><db:link xlink:href="qthread.xml">QThread</db:link></db:member>
<db:member><db:link xlink:href="qtcore-threads-waitconditions-example.xml">Producer and Consumer using Wait Conditions</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWaitCondition">
<db:title>QWaitCondition::QWaitCondition()</db:title>
<db:constructorsynopsis>
<db:methodname>QWaitCondition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWaitCondition()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new wait condition object.</db:para>
</db:section>
<db:section xml:id="dtor.QWaitCondition">
<db:title>QWaitCondition::~QWaitCondition()</db:title>
<db:destructorsynopsis>
<db:methodname>~QWaitCondition</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QWaitCondition()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the wait condition object.</db:para>
</db:section>
<db:section xml:id="notify_all">
<db:title>void QWaitCondition::notify_all()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>notify_all</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void notify_all()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility. It is equivalent to <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>().</db:para>
</db:section>
<db:section xml:id="notify_one">
<db:title>void QWaitCondition::notify_one()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>notify_one</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void notify_one()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is provided for STL compatibility. It is equivalent to <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>().</db:para>
</db:section>
<db:section xml:id="wait">
<db:title>bool QWaitCondition::wait(QMutex *<db:emphasis>lockedMutex</db:emphasis>, QDeadlineTimer <db:emphasis>deadline</db:emphasis> = QDeadlineTimer(QDeadlineTimer::Forever))</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>wait</db:methodname>
<db:methodparam>
<db:type>QMutex *</db:type>
<db:parameter>lockedMutex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>deadline</db:parameter>
<db:initializer>QDeadlineTimer(QDeadlineTimer::Forever)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool wait(QMutex *lockedMutex, QDeadlineTimer deadline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the <db:code role="parameter">lockedMutex</db:code> and waits on the wait condition. The <db:code role="parameter">lockedMutex</db:code> must be initially locked by the calling thread. If <db:code role="parameter">lockedMutex</db:code> is not in a locked state, the behavior is undefined. If <db:code role="parameter">lockedMutex</db:code> is a recursive mutex, this function returns immediately. The <db:code role="parameter">lockedMutex</db:code> will be unlocked, and the calling thread will block until either of these conditions is met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Another thread signals it using <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>(). This function will return true in this case.</db:para>
</db:listitem>
<db:listitem>
<db:para>the deadline given by <db:code role="parameter">deadline</db:code> is reached. If <db:code role="parameter">deadline</db:code> is QDeadlineTimer::Forever (the default), then the wait will never timeout (the event must be signalled). This function will return false if the wait timed out.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">lockedMutex</db:code> will be returned to the same locked state. This function is provided to allow the atomic transition from the locked state to the wait state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>()</db:member>
<db:member><db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wait-1">
<db:title>bool QWaitCondition::wait(QMutex *<db:emphasis>lockedMutex</db:emphasis>, unsigned long <db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>wait</db:methodname>
<db:methodparam>
<db:type>QMutex *</db:type>
<db:parameter>lockedMutex</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>unsigned long</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">bool wait(QMutex *lockedMutex, unsigned long time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Releases the <db:code role="parameter">lockedMutex</db:code> and waits on the wait condition for <db:code role="parameter">time</db:code> milliseconds.</db:para>
</db:section>
<db:section xml:id="wait-2">
<db:title>bool QWaitCondition::wait(QReadWriteLock *<db:emphasis>lockedReadWriteLock</db:emphasis>, QDeadlineTimer <db:emphasis>deadline</db:emphasis> = QDeadlineTimer(QDeadlineTimer::Forever))</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>wait</db:methodname>
<db:methodparam>
<db:type>QReadWriteLock *</db:type>
<db:parameter>lockedReadWriteLock</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QDeadlineTimer</db:type>
<db:parameter>deadline</db:parameter>
<db:initializer>QDeadlineTimer(QDeadlineTimer::Forever)</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">bool wait(QReadWriteLock *lockedReadWriteLock, QDeadlineTimer deadline)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Releases the <db:code role="parameter">lockedReadWriteLock</db:code> and waits on the wait condition. The <db:code role="parameter">lockedReadWriteLock</db:code> must be initially locked by the calling thread. If <db:code role="parameter">lockedReadWriteLock</db:code> is not in a locked state, this function returns immediately. The <db:code role="parameter">lockedReadWriteLock</db:code> must not be locked recursively, otherwise this function will not release the lock properly. The <db:code role="parameter">lockedReadWriteLock</db:code> will be unlocked, and the calling thread will block until either of these conditions is met:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Another thread signals it using <db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>() or <db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>(). This function will return true in this case.</db:para>
</db:listitem>
<db:listitem>
<db:para>the deadline given by <db:code role="parameter">deadline</db:code> is reached. If <db:code role="parameter">deadline</db:code> is QDeadlineTimer::Forever (the default), then the wait will never timeout (the event must be signalled). This function will return false if the wait timed out.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:code role="parameter">lockedReadWriteLock</db:code> will be returned to the same locked state. This function is provided to allow the atomic transition from the locked state to the wait state.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>()</db:member>
<db:member><db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wait-3">
<db:title>bool QWaitCondition::wait(QReadWriteLock *<db:emphasis>lockedReadWriteLock</db:emphasis>, unsigned long <db:emphasis>time</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>bool</db:type>
<db:methodname>wait</db:methodname>
<db:methodparam>
<db:type>QReadWriteLock *</db:type>
<db:parameter>lockedReadWriteLock</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>unsigned long</db:type>
<db:parameter>time</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">3</db:synopsisinfo>
<db:synopsisinfo role="signature">bool wait(QReadWriteLock *lockedReadWriteLock, unsigned long time)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Releases the <db:code role="parameter">lockedReadWriteLock</db:code> and waits on the wait condition for <db:code role="parameter">time</db:code> milliseconds.</db:para>
</db:section>
<db:section xml:id="wakeAll">
<db:title>void QWaitCondition::wakeAll()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>wakeAll</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wakeAll()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wakes all threads waiting on the wait condition. The order in which the threads are woken up depends on the operating system's scheduling policies and cannot be controlled or predicted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaitcondition.xml#wakeOne">wakeOne</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="wakeOne">
<db:title>void QWaitCondition::wakeOne()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>wakeOne</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void wakeOne()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Wakes one thread waiting on the wait condition. The thread that is woken up depends on the operating system's scheduling policies, and cannot be controlled or predicted.</db:para>
<db:para>If you want to wake up a specific thread, the solution is typically to use different wait conditions and have different threads wait on different conditions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwaitcondition.xml#wakeAll">wakeAll</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
