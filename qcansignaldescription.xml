<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QCanSignalDescription Class</db:title>
<db:productname>QtSerialBus</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Serial Bus Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> class describes the rules to extract one value out of the CAN frame and represent it in an application-defined format.</db:para>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:para>This class was introduced in Qt 6.5.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QCanSignalDescription</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 6.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS SerialBus)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::SerialBus)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += serialbus</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para><db:emphasis role="bold">This class is under development and is subject to change.</db:emphasis></db:para>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> class can be used to provide a signal description and later use it to decode a received <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> or encode the input data into a <db:link xlink:href="qcanbusframe.xml">QCanBusFrame</db:link> that can be sent to the receiver.</db:para>
<db:section xml:id="general-description">
<db:title>General Description</db:title>
<db:para>Each CAN frame can contain multiple values. The rules to extract the values from a CAN frame include the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Data source (frame ID or payload).</db:para>
</db:listitem>
<db:listitem>
<db:para>Data endianness. See <db:link xlink:href="qcansignaldescription.xml#data-endianness-processing">Data Endianness Processing</db:link> section for more details.</db:para>
</db:listitem>
<db:listitem>
<db:para>Data format.</db:para>
</db:listitem>
<db:listitem>
<db:para>Start bit position.</db:para>
</db:listitem>
<db:listitem>
<db:para>Data length in bits.</db:para>
</db:listitem>
<db:listitem>
<db:para>Multiplexing options.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>Start bit position is specified relative to the selected data source. The bits are counted starting from the LSB.</db:para>
<db:para>Once the data is extracted, it might require conversion to an application-defined format. The following parameters can be used for that:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Various parameters for converting the extracted value to a physical value (factor, offset, scale).</db:para>
</db:listitem>
<db:listitem>
<db:para>Expected data range.</db:para>
</db:listitem>
<db:listitem>
<db:para>Data units.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> class provides methods to control all those parameters.</db:para>
</db:section>
<db:section xml:id="data-endianness-processing">
<db:title>Data Endianness Processing</db:title>
<db:para>Little endian and big endian data is encoded differently. For big endian values, start bit positions are given for the most significant bit. For little endian values, the start position is that of the least significant bit.</db:para>
<db:para>Let's consider two examples. In both examples we will encode two 12-bit values in the 3-byte payload.</db:para>
<db:section xml:id="little-endian">
<db:title>Little Endian</db:title>
<db:para>For the little endian case the data layout can be represented by the following image:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/canbus_signals_le.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Here the columns represent bit numbers, and the rows represent byte numbers. <db:code>LSB</db:code> marks the first (least significant) bit of the value, and <db:code>MSB</db:code> marks the last (most significant) bit of the value. The blue color marks the first value, and the orange color marks the second value.</db:para>
<db:para>The information about these values will be encoded in <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> in the following way:</db:para>
<db:programlisting language="cpp">QCanSignalDescription signal1;
signal1.setDataEndian(QSysInfo::Endian::LittleEndian);
signal1.setStartBit(0);
signal1.setBitLength(12);
// other parameters for signal1

QCanSignalDescription signal2;
signal2.setDataEndian(QSysInfo::Endian::LittleEndian);
signal2.setStartBit(12);
signal2.setBitLength(12);
// other parameters for signal2
</db:programlisting>
</db:section>
<db:section xml:id="big-endian">
<db:title>Big Endian</db:title>
<db:para>The following image represents the value layout for the big endian case:</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/canbus_signals_be.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The values can be represented in <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> in the following way:</db:para>
<db:programlisting language="cpp">QCanSignalDescription signal1;
signal1.setDataEndian(QSysInfo::Endian::BigEndian);
signal1.setStartBit(7);
signal1.setBitLength(12);
// other parameters for signal1

QCanSignalDescription signal2;
signal2.setDataEndian(QSysInfo::Endian::BigEndian);
signal2.setStartBit(11);
signal2.setBitLength(12);
// other parameters for signal2
</db:programlisting>
<db:para>Note how the start bits are different from the little endian case. Also the values are aligned differently.</db:para>
</db:section>
</db:section>
<db:section xml:id="multiplexed-signals-explained">
<db:title>Multiplexed Signals Explained</db:title>
<db:para>There are two common ways to encode the data in the CAN payload:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Each range of bits always represents the same signal. For example, <db:code>Bytes 0-1</db:code> in a payload can represent an engine speed (in rpm), and <db:code>Bytes 2-3</db:code> can represent the vehicle speed (in km/h).</db:para>
</db:listitem>
<db:listitem>
<db:para>The same range of bits can represent different data, depending on the values of some other bits in the payload. For example, if <db:code>Byte 0</db:code> has the value <db:code>0</db:code>, the <db:code>Bytes 1-2</db:code> represent an engine speed (in rpm), and if <db:code>Byte 0</db:code> has the value <db:code>1</db:code>, the same <db:code>Bytes 1-2</db:code> represent a vehicle speed (in km/h).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>The second case uses signal multiplexing. In the provided example we will have three signals. The first signal represents the value of <db:code>Byte 0</db:code> and acts like a multiplexor signal. The other two signals represent an engine speed and a vehicle speed respectively, but only one of them can be extracted from the CAN payload at a time. Which signal should be extracted is defined by the value of the multiplexor signal.</db:para>
<db:para>In more complicated cases the payload can have multiple multiplexor signals. In such cases the signal can be extracted from the payload only when all multiplexors contain the expected values.</db:para>
</db:section>
<db:section xml:id="value-conversions">
<db:title>Value Conversions</db:title>
<db:para>In many cases the signals transferred over CAN bus cannot hold the full range of the physical values that they represent. To overcome these limitations, the physical values are converted to a smaller range before transmission, and can be restored on the receiving end.</db:para>
<db:para>The following formulas are used to convert between the physical value and the signal's value:</db:para>
<db:programlisting language="cpp" role="bad">physicalValue = scaling * (signalValue * factor + offset);
signalValue = (physicalValue / scaling - offset) / factor;
</db:programlisting>
<db:para>The factor and scaling parameters cannot be equal to <db:code>0</db:code>.</db:para>
<db:para>If any of the parameters equals to <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), it is not used during the conversion. If all of the parameters are equal to <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>() (which is the default), the conversion is not performed.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="MultiplexSignalValues-typedef">
<db:title>[alias] QCanSignalDescription::MultiplexSignalValues</db:title>
<db:typedefsynopsis>
<db:typedefname>MultiplexSignalValues</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
<db:section xml:id="MultiplexValues-typedef">
<db:title>[alias] QCanSignalDescription::MultiplexValues</db:title>
<db:typedefsynopsis>
<db:typedefname>MultiplexValues</db:typedefname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:typedefsynopsis>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QCanSignalDescription">
<db:title>QCanSignalDescription::QCanSignalDescription()</db:title>
<db:constructorsynopsis>
<db:methodname>QCanSignalDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates an empty signal description.</db:para>
</db:section>
<db:section xml:id="QCanSignalDescription-1">
<db:title>QCanSignalDescription::QCanSignalDescription(const QCanSignalDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanSignalDescription</db:methodname>
<db:methodparam>
<db:type>const QCanSignalDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription(const QCanSignalDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a signal description with the values copied from <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QCanSignalDescription-2">
<db:title>QCanSignalDescription::QCanSignalDescription(QCanSignalDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:constructorsynopsis>
<db:methodname>QCanSignalDescription</db:methodname>
<db:methodparam>
<db:type>QCanSignalDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-constructor</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">2</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription(QCanSignalDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a signal description by moving from <db:code role="parameter">other</db:code>.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QCanSignalDescription">
<db:title>QCanSignalDescription::~QCanSignalDescription()</db:title>
<db:destructorsynopsis>
<db:methodname>~QCanSignalDescription</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QCanSignalDescription()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys this signal description.</db:para>
</db:section>
<db:section xml:id="addMultiplexSignal">
<db:title>void QCanSignalDescription::addMultiplexSignal(const QString &amp;<db:emphasis>name</db:emphasis>, const QCanSignalDescription::MultiplexValues &amp;<db:emphasis>ranges</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMultiplexSignal</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QCanSignalDescription::MultiplexValues &amp;</db:type>
<db:parameter>ranges</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMultiplexSignal(const QString &amp;name, const QCanSignalDescription::MultiplexValues &amp;ranges)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Adds a new <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">multiplexor signal</db:link> for this signal. The <db:code role="parameter">name</db:code> parameter contains the name of the multiplexor signal, and the <db:code role="parameter">ranges</db:code> parameter contains the desired value ranges.</db:para>
<db:para>If this signal already has desired value ranges for the multiplexor signal <db:code role="parameter">name</db:code>, the ranges are overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexState">multiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexSignals">multiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#clearMultiplexSignals">clearMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setMultiplexSignals">setMultiplexSignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="addMultiplexSignal-1">
<db:title>void QCanSignalDescription::addMultiplexSignal(const QString &amp;<db:emphasis>name</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>addMultiplexSignal</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QVariant &amp;</db:type>
<db:parameter>value</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">void addMultiplexSignal(const QString &amp;name, const QVariant &amp;value)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>This is a convenience overload for the case when the multiplexor signal is expected to have only one specific value, not a range of values.</db:para>
<db:para>The <db:code role="parameter">name</db:code> parameter contains the name of the multiplexor signal, and the <db:code role="parameter">value</db:code> parameter contains the desired value.</db:para>
<db:para>If this signal already has desired value ranges for the multiplexor signal <db:code role="parameter">name</db:code>, the ranges are overwritten.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexState">multiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexSignals">multiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#clearMultiplexSignals">clearMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setMultiplexSignals">setMultiplexSignals</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="bitLength">
<db:title>quint16 QCanSignalDescription::bitLength() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>bitLength</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 bitLength() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the bit length of the signal's value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setBitLength">setBitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setStartBit">setStartBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearMultiplexSignals">
<db:title>void QCanSignalDescription::clearMultiplexSignals()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearMultiplexSignals</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearMultiplexSignals()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Removes all <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">multiplexor signals</db:link> for this signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexSignals">multiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setMultiplexSignals">setMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#addMultiplexSignal">addMultiplexSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="comment">
<db:title>QString QCanSignalDescription::comment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>comment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString comment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the comment for the signal.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setComment">setComment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataEndian">
<db:title>QSysInfo::Endian QCanSignalDescription::dataEndian() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSysInfo::Endian</db:type>
<db:methodname>dataEndian</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSysInfo::Endian dataEndian() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data endian of the signal's value.</db:para>
<db:para>By default, <db:link xlink:href="qsysinfo.xml#Endian-enum">BigEndian</db:link> is used.</db:para>
<db:note>
<db:para>The data endian is ignored if the <db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>() is set to <db:link xlink:href="qtcanbus.xml#DataFormat-enum">AsciiString</db:link>.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setDataEndian">setDataEndian</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#Endian-enum">QSysInfo::Endian</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataFormat">
<db:title>QtCanBus::DataFormat QCanSignalDescription::dataFormat() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtCanBus::DataFormat</db:type>
<db:methodname>dataFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtCanBus::DataFormat dataFormat() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data format of the signal's value.</db:para>
<db:para>By default, <db:link xlink:href="qtcanbus.xml#DataFormat-enum">SignedInteger</db:link> is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setDataFormat">setDataFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataFormat-enum">QtCanBus::DataFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="dataSource">
<db:title>QtCanBus::DataSource QCanSignalDescription::dataSource() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtCanBus::DataSource</db:type>
<db:methodname>dataSource</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtCanBus::DataSource dataSource() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the data source of the signal's value.</db:para>
<db:para>By default, <db:link xlink:href="qtcanbus.xml#DataSource-enum">Payload</db:link> is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setDataSource">setDataSource</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataSource-enum">QtCanBus::DataSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="factor">
<db:title>double QCanSignalDescription::factor() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>factor</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double factor() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the factor that is used to convert the signal's value to a physical value and back.</db:para>
<db:para>By default the function returns <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), which means that a factor is not used.</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setFactor">setFactor</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#offset">offset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#scaling">scaling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QCanSignalDescription::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> when the signal description is valid and <db:code>false</db:code> otherwise.</db:para>
<db:para>A valid signal description <db:emphasis>must</db:emphasis> fulfill the following conditions:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>have a non-empty <db:link xlink:href="qcansignaldescription.xml#name">name</db:link>()</db:para>
</db:listitem>
<db:listitem>
<db:para>have <db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>() <db:code>== 32</db:code> if the <db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>() is <db:link xlink:href="qtcanbus.xml#DataFormat-enum">Float</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>have <db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>() <db:code>== 64</db:code> if the <db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>() is <db:link xlink:href="qtcanbus.xml#DataFormat-enum">Double</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>the <db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>() <db:emphasis>must</db:emphasis> be a multiple of <db:code>8</db:code> if the <db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>() is <db:link xlink:href="qtcanbus.xml#DataFormat-enum">AsciiString</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>the <db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>() <db:emphasis>must</db:emphasis> be greater than <db:code>0</db:code> and less than or equal to <db:code>64</db:code>.</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="maximum">
<db:title>double QCanSignalDescription::maximum() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>maximum</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double maximum() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the maximum supported value for the signal.</db:para>
<db:para>By default the function returns <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), which means that there is no maximum value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setRange">setRange</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#minimum">minimum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="minimum">
<db:title>double QCanSignalDescription::minimum() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>minimum</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double minimum() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the minimum supported value for the signal.</db:para>
<db:para>By default the function returns <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), which means that there is no minimum value.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setRange">setRange</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#maximum">maximum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="multiplexSignals">
<db:title>QCanSignalDescription::MultiplexSignalValues QCanSignalDescription::multiplexSignals() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QCanSignalDescription::MultiplexSignalValues</db:type>
<db:methodname>multiplexSignals</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription::MultiplexSignalValues multiplexSignals() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">multiplexor signals</db:link> and their desired values that are used to properly identify this signal.</db:para>
<db:para>The returned hash contains signal names as keys and respective desired ranges of values as values.</db:para>
<db:para>This signal's value can be extracted from the payload only when all the signals from the hash have the expected values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexState">multiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#clearMultiplexSignals">clearMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setMultiplexSignals">setMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#addMultiplexSignal">addMultiplexSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="multiplexState">
<db:title>QtCanBus::MultiplexState QCanSignalDescription::multiplexState() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QtCanBus::MultiplexState</db:type>
<db:methodname>multiplexState</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QtCanBus::MultiplexState multiplexState() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the multiplex state of the signal.</db:para>
<db:para>See the <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">Multiplexed Signals Explained</db:link> section for more details on multiplexed signals.</db:para>
<db:para>By default this method returns <db:link xlink:href="qtcanbus.xml#MultiplexState-enum">None</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setMultiplexState">setMultiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#MultiplexState-enum">QtCanBus::MultiplexState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="name">
<db:title>QString QCanSignalDescription::name() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>name</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString name() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the name of the signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setName">setName</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#isValid">isValid</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="offset">
<db:title>double QCanSignalDescription::offset() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>offset</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double offset() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the offset that is used to convert the signal's value to a physical value and back.</db:para>
<db:para>By default the function returns <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), which means that an offset is not used.</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#factor">factor</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#scaling">scaling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalUnit">
<db:title>QString QCanSignalDescription::physicalUnit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>physicalUnit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString physicalUnit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the physical unit (e.g. km/h) of the signal's value or an empty string if the unit is not set.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setPhysicalUnit">setPhysicalUnit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="receiver">
<db:title>QString QCanSignalDescription::receiver() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QString</db:type>
<db:methodname>receiver</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QString receiver() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the receiver node for this signal.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setReceiver">setReceiver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="scaling">
<db:title>double QCanSignalDescription::scaling() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>double</db:type>
<db:methodname>scaling</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">double scaling() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the scaling that is used to convert the signal's value to a physical value and back.</db:para>
<db:para>By default the function returns <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>(), which means that scaling is not used.</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setScaling">setScaling</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#offset">offset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#factor">factor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBitLength">
<db:title>void QCanSignalDescription::setBitLength(quint16 <db:emphasis>length</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBitLength</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>length</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBitLength(quint16 length)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the bit length of the signal's value to <db:code role="parameter">length</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setStartBit">setStartBit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setComment">
<db:title>void QCanSignalDescription::setComment(const QString &amp;<db:emphasis>text</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setComment</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>text</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setComment(const QString &amp;text)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the comment for the signal to <db:code role="parameter">text</db:code>.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#comment">comment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDataEndian">
<db:title>void QCanSignalDescription::setDataEndian(QSysInfo::Endian <db:emphasis>endian</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDataEndian</db:methodname>
<db:methodparam>
<db:type>QSysInfo::Endian</db:type>
<db:parameter>endian</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDataEndian(QSysInfo::Endian endian)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data endian of the signal's value to <db:code role="parameter">endian</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#dataEndian">dataEndian</db:link>()</db:member>
<db:member><db:link xlink:href="qsysinfo.xml#Endian-enum">QSysInfo::Endian</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDataFormat">
<db:title>void QCanSignalDescription::setDataFormat(QtCanBus::DataFormat <db:emphasis>format</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDataFormat</db:methodname>
<db:methodparam>
<db:type>QtCanBus::DataFormat</db:type>
<db:parameter>format</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDataFormat(QtCanBus::DataFormat format)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data format of the signal's value to <db:code role="parameter">format</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#dataFormat">dataFormat</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataFormat-enum">QtCanBus::DataFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDataSource">
<db:title>void QCanSignalDescription::setDataSource(QtCanBus::DataSource <db:emphasis>source</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setDataSource</db:methodname>
<db:methodparam>
<db:type>QtCanBus::DataSource</db:type>
<db:parameter>source</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setDataSource(QtCanBus::DataSource source)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the data source of the signal's value to <db:code role="parameter">source</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#dataSource">dataSource</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#DataSource-enum">QtCanBus::DataSource</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFactor">
<db:title>void QCanSignalDescription::setFactor(double <db:emphasis>factor</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setFactor</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>factor</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setFactor(double factor)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the factor that is used to convert the signal's value to a physical value and back to <db:code role="parameter">factor</db:code>.</db:para>
<db:para>Pass <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>() to this method to skip this parameter during the conversion.</db:para>
<db:para>The factor cannot be 0. An attempt to set a zero factor is equivalent to setting it to <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>().</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#factor">factor</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setScaling">setScaling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMultiplexSignals">
<db:title>void QCanSignalDescription::setMultiplexSignals(const QCanSignalDescription::MultiplexSignalValues &amp;<db:emphasis>multiplexorSignals</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMultiplexSignals</db:methodname>
<db:methodparam>
<db:type>const QCanSignalDescription::MultiplexSignalValues &amp;</db:type>
<db:parameter>multiplexorSignals</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMultiplexSignals(const QCanSignalDescription::MultiplexSignalValues &amp;multiplexorSignals)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">multiplexor signals</db:link> for this signal to <db:code role="parameter">multiplexorSignals</db:code>.</db:para>
<db:para>The <db:code role="parameter">multiplexorSignals</db:code> hash <db:emphasis>must</db:emphasis> contain signal names as keys and respective desired value ranges as values.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexState">multiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexSignals">multiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#clearMultiplexSignals">clearMultiplexSignals</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#addMultiplexSignal">addMultiplexSignal</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setMultiplexState">
<db:title>void QCanSignalDescription::setMultiplexState(QtCanBus::MultiplexState <db:emphasis>state</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setMultiplexState</db:methodname>
<db:methodparam>
<db:type>QtCanBus::MultiplexState</db:type>
<db:parameter>state</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setMultiplexState(QtCanBus::MultiplexState state)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the multiplex state of the signal to <db:code role="parameter">state</db:code>.</db:para>
<db:para>See the <db:link xlink:href="qcansignaldescription.xml#multiplexed-signals-explained">Multiplexed Signals Explained</db:link> section for more details on multiplexed signals.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#multiplexState">multiplexState</db:link>()</db:member>
<db:member><db:link xlink:href="qtcanbus.xml#MultiplexState-enum">QtCanBus::MultiplexState</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setName">
<db:title>void QCanSignalDescription::setName(const QString &amp;<db:emphasis>name</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setName</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>name</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setName(const QString &amp;name)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the name of the signal to <db:code role="parameter">name</db:code>.</db:para>
<db:para>The signal's name must be unique within a CAN message.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#name">name</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOffset">
<db:title>void QCanSignalDescription::setOffset(double <db:emphasis>offset</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setOffset</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>offset</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setOffset(double offset)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the offset that is used to convert the signal's value to a physical value and back to <db:code role="parameter">offset</db:code>.</db:para>
<db:para>Pass <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>() to this method to skip this parameter during the conversion.</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#offset">offset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setFactor">setFactor</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setScaling">setScaling</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setPhysicalUnit">
<db:title>void QCanSignalDescription::setPhysicalUnit(const QString &amp;<db:emphasis>unit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setPhysicalUnit</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>unit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setPhysicalUnit(const QString &amp;unit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the physical <db:code role="parameter">unit</db:code> (e.g. km/h) of the signal's value.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#physicalUnit">physicalUnit</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRange">
<db:title>void QCanSignalDescription::setRange(double <db:emphasis>minimum</db:emphasis>, double <db:emphasis>maximum</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setRange</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>minimum</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>maximum</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setRange(double minimum, double maximum)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">minimum</db:code> and <db:code role="parameter">maximum</db:code> for the signal's value.</db:para>
<db:para>Setting one or both of the parameters to <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>() means that the corresponding limit will not be used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#minimum">minimum</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#maximum">maximum</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReceiver">
<db:title>void QCanSignalDescription::setReceiver(const QString &amp;<db:emphasis>receiver</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setReceiver</db:methodname>
<db:methodparam>
<db:type>const QString &amp;</db:type>
<db:parameter>receiver</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setReceiver(const QString &amp;receiver)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the <db:code role="parameter">receiver</db:code> node for this signal.</db:para>
<db:para>This parameter is introduced only for extra description. It's not used during signal processing.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#receiver">receiver</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setScaling">
<db:title>void QCanSignalDescription::setScaling(double <db:emphasis>scaling</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setScaling</db:methodname>
<db:methodparam>
<db:type>double</db:type>
<db:parameter>scaling</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setScaling(double scaling)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the scaling that is used to convert the signal's value to a physical value and back to <db:code role="parameter">scaling</db:code>.</db:para>
<db:para>Pass <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>() to this method to skip this parameter during the conversion.</db:para>
<db:para>The scaling cannot be 0. An attempt to set zero scaling is equivalent to setting it to <db:link xlink:href="qtnumeric.xml#qQNaN">qQNaN</db:link>().</db:para>
<db:para>The <db:link xlink:href="qcansignaldescription.xml#value-conversions">Value Conversions</db:link> section explains how this parameter is used.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#scaling">scaling</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setOffset">setOffset</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setFactor">setFactor</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setStartBit">
<db:title>void QCanSignalDescription::setStartBit(quint16 <db:emphasis>bit</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setStartBit</db:methodname>
<db:methodparam>
<db:type>quint16</db:type>
<db:parameter>bit</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setStartBit(quint16 bit)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the start bit of the signal's value in the <db:link xlink:href="qcansignaldescription.xml#dataSource">dataSource</db:link>() to <db:code role="parameter">bit</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#startBit">startBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setBitLength">setBitLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="startBit">
<db:title>quint16 QCanSignalDescription::startBit() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>quint16</db:type>
<db:methodname>startBit</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">quint16 startBit() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the start bit of the signal's value in the <db:link xlink:href="qcansignaldescription.xml#dataSource">dataSource</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qcansignaldescription.xml#setStartBit">setStartBit</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#bitLength">bitLength</db:link>()</db:member>
<db:member><db:link xlink:href="qcansignaldescription.xml#setBitLength">setBitLength</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq">
<db:title>QCanSignalDescription &amp;QCanSignalDescription::operator=(const QCanSignalDescription &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanSignalDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>const QCanSignalDescription &amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">copy-assign</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription &amp; operator=(const QCanSignalDescription &amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Assigns the values from <db:code role="parameter">other</db:code> to this signal description.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QCanSignalDescription &amp;QCanSignalDescription::operator=(QCanSignalDescription &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QCanSignalDescription &amp;</db:type>
<db:methodname>operator=</db:methodname>
<db:methodparam>
<db:type>QCanSignalDescription &amp;&amp;</db:type>
<db:parameter>other</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">move-assign</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QCanSignalDescription &amp; operator=(QCanSignalDescription &amp;&amp;other)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Move-assigns the values from <db:code role="parameter">other</db:code> to this signal description.</db:para>
<db:note>
<db:para>The moved-from <db:link xlink:href="qcansignaldescription.xml">QCanSignalDescription</db:link> object can only be destroyed or assigned to. The effect of calling other functions than the destructor or one of the assignment operators is undefined.</db:para>
</db:note>
</db:section>
</db:section>
</db:article>
