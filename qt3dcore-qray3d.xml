<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QRay3D Class</db:title>
<db:subtitle>Qt3DCore::QRay3D</db:subtitle>
<db:productname>Qt3D</db:productname>
<db:edition>Qt 5.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qt3dcore-qray3d.xml">QRay3D</db:link> class defines a directional line in 3D space extending through an origin point.</db:para>
<db:para>This class was introduced in Qt 5.5.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRay3D</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.5</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += 3dcore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QRay3D is part of <db:simplelist><db:member>qt3d</db:member><db:member>qt3d::math</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A ray is defined by the <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() point and the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() vector. Rays are infinite in length, extending out from <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() in both directions. If the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() is zero length, then the behavior of the class is undefined.</db:para>
<db:para>A ray can be thought of as a one-dimensional co-ordinate system. If the co-ordinate is <db:emphasis role="bold">t</db:emphasis> then the <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() point is at <db:emphasis role="bold">t</db:emphasis> = 0, the point <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() + <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() is at <db:emphasis role="bold">t</db:emphasis> = 1, and the point <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() - <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() is at <db:emphasis role="bold">t</db:emphasis> = -1. The <db:link xlink:href="qt3dcore-qray3d.xml#point">point</db:link>() method can be used to obtain the position of a point within this one-dimensional co-ordinate system. The <db:link xlink:href="qt3dcore-qray3d.xml#projectedDistance">projectedDistance</db:link>() method can be used to convert a point into a value in this one-dimensional co-ordinate system.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRay3D">
<db:title>QRay3D::QRay3D()</db:title>
<db:para>Construct a default ray with an <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() of (0, 0, 0), a <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() of (0, 0, 1) and a distance of 1.</db:para>
</db:section>
<db:section xml:id="QRay3D-1">
<db:title>[explicit] QRay3D::QRay3D(const QVector3D &amp;<db:emphasis>origin</db:emphasis>, const QVector3D &amp;<db:emphasis>direction</db:emphasis> = QVector3D(0.0f, 0.0f, 1.0f), float <db:emphasis>distance</db:emphasis> = 1.0f)</db:title>
<db:para>Construct a ray given its defining <db:code role="parameter">origin</db:code>, <db:code role="parameter">direction</db:code> and <db:code role="parameter">distance</db:code>. The <db:code role="parameter">direction</db:code> does not need to be normalized.</db:para>
<db:para>To construct a ray that passes through two points, use the following:</db:para>
<db:programlisting language="cpp">QRay3D thruAB(pointA, pointB - pointA);
</db:programlisting>
</db:section>
<db:section xml:id="contains">
<db:title>bool QRay3D::contains(const QVector3D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">point</db:code> lies on this ray; false otherwise.</db:para>
</db:section>
<db:section xml:id="contains-1">
<db:title>bool QRay3D::contains(const Qt3DCore::QRay3D &amp;<db:emphasis>ray</db:emphasis>) const</db:title>
<db:para>Returns true if <db:code role="parameter">ray</db:code> lies on this ray; false otherwise. If true, this implies that the two rays are actually the same, but with different <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() points or an inverted <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>().</db:para>
</db:section>
<db:section xml:id="direction">
<db:title>QVector3D QRay3D::direction() const</db:title>
<db:para>Returns the direction vector of this ray. The default value is (0, 0, 1).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#setDirection">setDirection</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="distance">
<db:title>float QRay3D::distance(const QVector3D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the minimum distance from this ray to <db:code role="parameter">point</db:code>, or equivalently the length of a line perpendicular to this ray which passes through <db:code role="parameter">point</db:code>. If <db:code role="parameter">point</db:code> is on the ray, then this function will return zero.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#point">point</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="origin">
<db:title>QVector3D QRay3D::origin() const</db:title>
<db:para>Returns the origin of this ray. The default value is (0, 0, 0).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#setOrigin">setOrigin</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="point">
<db:title>QVector3D QRay3D::point(float <db:emphasis>t</db:emphasis>) const</db:title>
<db:para>Returns the point on the ray defined by moving <db:code role="parameter">t</db:code> units along the ray in the direction of the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() vector. Note that <db:code role="parameter">t</db:code> may be negative in which case the point returned will lie behind the <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() point with respect to the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() vector.</db:para>
<db:para>The units for <db:code role="parameter">t</db:code> are defined by <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>(). The return value is precisely <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() + t * <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#projectedDistance">projectedDistance</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#distance">distance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="project">
<db:title>QVector3D QRay3D::project(const QVector3D &amp;<db:emphasis>vector</db:emphasis>) const</db:title>
<db:para>Returns the projection of <db:code role="parameter">vector</db:code> onto this ray. In the following diagram, the dotted line is the ray, and V is the <db:code role="parameter">vector</db:code>. The return value will be the vector V':</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qray3d-project.png"/>
</db:imageobject>
</db:mediaobject>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#projectedDistance">projectedDistance</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="projectedDistance">
<db:title>float QRay3D::projectedDistance(const QVector3D &amp;<db:emphasis>point</db:emphasis>) const</db:title>
<db:para>Returns the number of <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() units along the ray from <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() to <db:code role="parameter">point</db:code>. Essentially, this function computes the value t, where <db:code role="parameter">point</db:code> = <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() + t * <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>(). If <db:code role="parameter">point</db:code> is not on the ray, then the closest point that is on the ray will be used instead.</db:para>
<db:para>If the return value is positive, then <db:code role="parameter">point</db:code> lies in front of the <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() with respect to the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() vector. If the return value is negative, then <db:code role="parameter">point</db:code> lies behind the <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() with respect to the <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() vector.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#point">point</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#project">project</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setDirection">
<db:title>void QRay3D::setDirection(const QVector3D &amp;<db:emphasis>direction</db:emphasis>)</db:title>
<db:para>Sets the direction vector of this ray to <db:code role="parameter">direction</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#setOrigin">setOrigin</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOrigin">
<db:title>void QRay3D::setOrigin(const QVector3D &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the origin point of this ray to <db:code role="parameter">value</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>()</db:member>
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#setDirection">setDirection</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transform">
<db:title>Qt3DCore::QRay3D &amp;QRay3D::transform(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>)</db:title>
<db:para>Transforms this ray using <db:code role="parameter">matrix</db:code>, replacing <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() and <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() with the transformed versions.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#transformed">transformed</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformed">
<db:title>Qt3DCore::QRay3D QRay3D::transformed(const QMatrix4x4 &amp;<db:emphasis>matrix</db:emphasis>) const</db:title>
<db:para>Returns a new ray that is formed by transforming <db:link xlink:href="qt3dcore-qray3d.xml#origin">origin</db:link>() and <db:link xlink:href="qt3dcore-qray3d.xml#direction">direction</db:link>() using <db:code role="parameter">matrix</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#transform">transform</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QRay3D::operator!=(const Qt3DCore::QRay3D &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this ray is not the same as <db:code role="parameter">other</db:code>; <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#operator-eq-eq">operator==</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QRay3D::operator==(const Qt3DCore::QRay3D &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Returns <db:code>true</db:code> if this ray is the same as <db:code role="parameter">other</db:code>; <db:code>false</db:code> otherwise.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qt3dcore-qray3d.xml#operator-not-eq">operator!=</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, const Qt3DCore::QRay3D &amp;<db:emphasis>ray</db:emphasis>)</db:title>
<db:para>Writes the given <db:code role="parameter">ray</db:code> to the given <db:code role="parameter">stream</db:code> and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>stream</db:emphasis>, Qt3DCore::QRay3D &amp;<db:emphasis>ray</db:emphasis>)</db:title>
<db:para>Reads a 3D ray from the given <db:code role="parameter">stream</db:code> into the given <db:code role="parameter">ray</db:code> and returns a reference to the stream.</db:para>
</db:section>
</db:section>
</db:article>
