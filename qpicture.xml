<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QPicture Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.7.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qpicture.xml">QPicture</db:link> class is a paint device that records and replays <db:link xlink:href="qpainter.xml">QPainter</db:link> commands.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QPicture</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qpaintdevice.xml" xlink:role="class">QPaintDevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QPicture is part of <db:simplelist><db:member>shared</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A picture serializes painter commands to an IO device in a platform-independent format. They are sometimes referred to as meta-files.</db:para>
<db:para>Qt pictures use a proprietary binary format. Unlike native picture (meta-file) formats on many window systems, Qt pictures have no limitations regarding their contents. Everything that can be painted on a widget or pixmap (e.g., fonts, pixmaps, regions, transformed graphics, etc.) can also be stored in a picture.</db:para>
<db:para><db:link xlink:href="qpicture.xml">QPicture</db:link> is resolution independent, i.e. a <db:link xlink:href="qpicture.xml">QPicture</db:link> can be displayed on different devices (for example svg, pdf, ps, printer and screen) looking the same. This is, for instance, needed for WYSIWYG print preview. <db:link xlink:href="qpicture.xml">QPicture</db:link> runs in the default system dpi, and scales the painter to match differences in resolution depending on the window system.</db:para>
<db:para>Example of how to record a picture:</db:para>
<db:programlisting language="cpp">        QPicture picture;
        QPainter painter;
        painter.begin(&amp;picture);           // paint in picture
        painter.drawEllipse(10,20, 80,70); // draw an ellipse
        painter.end();                     // painting done
        picture.save(&quot;drawing.pic&quot;);       // save picture
</db:programlisting>
<db:para>Note that the list of painter commands is reset on each call to the <db:link xlink:href="qpainter.xml#begin">QPainter::begin</db:link>() function.</db:para>
<db:para>Example of how to replay a picture:</db:para>
<db:programlisting language="cpp">        QPicture picture;
        picture.load(&quot;drawing.pic&quot;);           // load picture
        QPainter painter;
        painter.begin(&amp;myImage);               // paint in myImage
        painter.drawPicture(0, 0, picture);    // draw the picture at (0,0)
        painter.end();                         // painting done
</db:programlisting>
<db:para>Pictures can also be drawn using <db:link xlink:href="qpicture.xml#play">play</db:link>(). Some basic data about a picture is available, for example, <db:link xlink:href="qpicture.xml#size">size</db:link>(), <db:link xlink:href="qpicture.xml#isNull">isNull</db:link>() and <db:link xlink:href="qpicture.xml#boundingRect">boundingRect</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmovie.xml">QMovie</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QPicture-1">
<db:title>[explicit] QPicture::QPicture(int <db:emphasis>formatVersion</db:emphasis> = -1)</db:title>
<db:para>Constructs an empty picture.</db:para>
<db:para>The <db:code role="parameter">formatVersion</db:code> parameter may be used to <db:emphasis>create</db:emphasis> a <db:link xlink:href="qpicture.xml">QPicture</db:link> that can be read by applications that are compiled with earlier versions of Qt.</db:para>
<db:para>Note that the default formatVersion is -1 which signifies the current release, i.e. for Qt 4.0 a formatVersion of 7 is the same as the default formatVersion of -1.</db:para>
<db:para>Reading pictures generated by earlier versions of Qt is not supported in Qt 4.0.</db:para>
</db:section>
<db:section xml:id="QPicture">
<db:title>QPicture::QPicture(const QPicture &amp;<db:emphasis>pic</db:emphasis>)</db:title>
<db:para>Constructs a copy of <db:code role="parameter">pic</db:code>.</db:para>
<db:para>This constructor is fast thanks to <db:link xlink:href="implicit-sharing.xml">implicit sharing</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QPicture">
<db:title>[virtual noexcept] QPicture::~QPicture()</db:title>
<db:para>Destroys the picture.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>QRect QPicture::boundingRect() const</db:title>
<db:para>Returns the picture's bounding rectangle or an invalid rectangle if the picture contains no data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#setBoundingRect">setBoundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="data">
<db:title>const char *QPicture::data() const</db:title>
<db:para>Returns a pointer to the picture data. The pointer is only valid until the next non-const function is called on this picture. The returned pointer is 0 if the picture contains no data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#setData">setData</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#size">size</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#isNull">isNull</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isNull">
<db:title>bool QPicture::isNull() const</db:title>
<db:para>Returns <db:code>true</db:code> if the picture contains no data; otherwise returns false.</db:para>
</db:section>
<db:section xml:id="load">
<db:title>bool QPicture::load(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Loads a picture from the file specified by <db:code role="parameter">fileName</db:code> and returns true if successful; otherwise invalidates the picture and returns <db:code>false</db:code>.</db:para>
<db:para>Please note that the <db:code role="parameter">format</db:code> parameter has been deprecated and will have no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#save">save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="load-1">
<db:title>bool QPicture::load(QIODevice *<db:emphasis>dev</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">dev</db:code> is the device to use for loading.</db:para>
</db:section>
<db:section xml:id="play">
<db:title>bool QPicture::play(QPainter *<db:emphasis>painter</db:emphasis>)</db:title>
<db:para>Replays the picture using <db:code role="parameter">painter</db:code>, and returns <db:code>true</db:code> if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>This function does exactly the same as <db:link xlink:href="qpainter.xml#drawPicture">QPainter::drawPicture</db:link>() with (x, y) = (0, 0).</db:para>
</db:section>
<db:section xml:id="save">
<db:title>bool QPicture::save(const QString &amp;<db:emphasis>fileName</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>Saves a picture to the file specified by <db:code role="parameter">fileName</db:code> and returns true if successful; otherwise returns <db:code>false</db:code>.</db:para>
<db:para>Please note that the <db:code role="parameter">format</db:code> parameter has been deprecated and will have no effect.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#load">load</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="save-1">
<db:title>bool QPicture::save(QIODevice *<db:emphasis>dev</db:emphasis>, const char *<db:emphasis>format</db:emphasis> = Q_NULLPTR)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para><db:code role="parameter">dev</db:code> is the device to use for saving.</db:para>
</db:section>
<db:section xml:id="setBoundingRect">
<db:title>void QPicture::setBoundingRect(const QRect &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:para>Sets the picture's bounding rectangle to <db:code role="parameter">r</db:code>. The automatically calculated value is overridden.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#boundingRect">boundingRect</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setData">
<db:title>[virtual] void QPicture::setData(const char *<db:emphasis>data</db:emphasis>, uint <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the picture data directly from <db:code role="parameter">data</db:code> and <db:code role="parameter">size</db:code>. This function copies the input data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#data">data</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#size">size</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="size">
<db:title>uint QPicture::size() const</db:title>
<db:para>Returns the size of the picture data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#data">data</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept, since 4.8] void QPicture::swap(QPicture &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps picture <db:code role="parameter">other</db:code> with this picture. This operation is very fast and never fails.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[default, since 5.2] QPicture &amp;QPicture::operator=(QPicture &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qpicture.xml">QPicture</db:link> instance.</db:para>
<db:para>This function was introduced in Qt 5.2.</db:para>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QPicture &amp;QPicture::operator=(const QPicture &amp;<db:emphasis>p</db:emphasis>)</db:title>
<db:para>Assigns picture <db:code role="parameter">p</db:code> to this picture and returns a reference to this picture.</db:para>
</db:section>
</db:section>
<db:section xml:id="related-non-members">
<db:title>Related Non-Members</db:title>
<db:section xml:id="operator-lt-lt-1">
<db:title>QDataStream &amp;operator&lt;&lt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, const QPicture &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:para>Writes picture <db:code role="parameter">r</db:code> to the stream <db:code role="parameter">s</db:code> and returns a reference to the stream.</db:para>
</db:section>
<db:section xml:id="operator-gt-gt-1">
<db:title>QDataStream &amp;operator&gt;&gt;(QDataStream &amp;<db:emphasis>s</db:emphasis>, QPicture &amp;<db:emphasis>r</db:emphasis>)</db:title>
<db:para>Reads a picture from the stream <db:code role="parameter">s</db:code> into picture <db:code role="parameter">r</db:code> and returns a reference to the stream.</db:para>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QPicture</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qpicture.xml">QPicture</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="inputFormatList">
<db:title>[static, deprecated] QStringList QPicture::inputFormatList()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of picture formats that are supported for picture input.</db:para>
<db:para>Note that if you want to iterate over the list, you should iterate over a copy, e.g.</db:para>
<db:programlisting language="cpp">        QStringList list = QPicture::inputFormatList();
        foreach (const QString &amp;string, list)
            myProcessing(string);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#outputFormatList">outputFormatList</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#inputFormats">inputFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml">QPictureIO</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="inputFormats">
<db:title>[static, deprecated] QList&lt;QByteArray&gt; QPicture::inputFormats()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of picture formats that are supported for picture input.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#outputFormats">outputFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#inputFormatList">inputFormatList</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml">QPictureIO</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputFormatList">
<db:title>[static, deprecated] QStringList QPicture::outputFormatList()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of picture formats that are supported for picture output.</db:para>
<db:para>Note that if you want to iterate over the list, you should iterate over a copy, e.g.</db:para>
<db:programlisting language="cpp">        QStringList list = QPicture::outputFormatList();
        foreach (const QString &amp;string, list)
            myProcessing(string);
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#inputFormatList">inputFormatList</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#outputFormats">outputFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml">QPictureIO</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="outputFormats">
<db:title>[static, deprecated] QList&lt;QByteArray&gt; QPicture::outputFormats()</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a list of picture formats that are supported for picture output.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#inputFormats">inputFormats</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#outputFormatList">outputFormatList</db:link>()</db:member>
<db:member><db:link xlink:href="qpictureio.xml">QPictureIO</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pictureFormat">
<db:title>[static, deprecated] const char *QPicture::pictureFormat(const QString &amp;<db:emphasis>fileName</db:emphasis>)</db:title>
<db:para>This function is deprecated. We strongly advise against using it in new code.</db:para>
<db:para>Returns a string that specifies the picture format of the file <db:code role="parameter">fileName</db:code>, or 0 if the file cannot be read or if the format is not recognized.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpicture.xml#load">load</db:link>()</db:member>
<db:member><db:link xlink:href="qpicture.xml#save">save</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
