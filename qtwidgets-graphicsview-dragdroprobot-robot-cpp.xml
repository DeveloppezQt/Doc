<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Drag and Drop Robot Example</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 5.5.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to drag and drop items in a graphics view.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** You may use this file under the terms of the BSD license as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &lt;QtWidgets&gt;

#include &quot;robot.h&quot;

RobotPart::RobotPart(QGraphicsItem *parent)
    : QGraphicsObject(parent), color(Qt::lightGray), dragOver(false)
{
    setAcceptDrops(true);
}

void RobotPart::dragEnterEvent(QGraphicsSceneDragDropEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasColor()) {
        event-&gt;setAccepted(true);
        dragOver = true;
        update();
    } else {
        event-&gt;setAccepted(false);
    }
}

void RobotPart::dragLeaveEvent(QGraphicsSceneDragDropEvent *event)
{
    Q_UNUSED(event);
    dragOver = false;
    update();
}

void RobotPart::dropEvent(QGraphicsSceneDragDropEvent *event)
{
    dragOver = false;
    if (event-&gt;mimeData()-&gt;hasColor())
        color = qvariant_cast&lt;QColor&gt;(event-&gt;mimeData()-&gt;colorData());
    update();
}

RobotHead::RobotHead(QGraphicsItem *parent)
    : RobotPart(parent)
{
}

QRectF RobotHead::boundingRect() const
{
    return QRectF(-15, -50, 30, 50);
}

void RobotHead::paint(QPainter *painter,
           const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option);
    Q_UNUSED(widget);
    if (pixmap.isNull()) {
        painter-&gt;setBrush(dragOver ? color.light(130) : color);
        painter-&gt;drawRoundedRect(-10, -30, 20, 30, 25, 25, Qt::RelativeSize);
        painter-&gt;setBrush(Qt::white);
        painter-&gt;drawEllipse(-7, -3 - 20, 7, 7);
        painter-&gt;drawEllipse(0, -3 - 20, 7, 7);
        painter-&gt;setBrush(Qt::black);
        painter-&gt;drawEllipse(-5, -1 - 20, 2, 2);
        painter-&gt;drawEllipse(2, -1 - 20, 2, 2);
        painter-&gt;setPen(QPen(Qt::black, 2));
        painter-&gt;setBrush(Qt::NoBrush);
        painter-&gt;drawArc(-6, -2 - 20, 12, 15, 190 * 16, 160 * 16);
    } else {
        painter-&gt;scale(.2272, .2824);
        painter-&gt;drawPixmap(QPointF(-15 * 4.4, -50 * 3.54), pixmap);
    }
}

void RobotHead::dragEnterEvent(QGraphicsSceneDragDropEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasImage()) {
        event-&gt;setAccepted(true);
        dragOver = true;
        update();
    } else {
        RobotPart::dragEnterEvent(event);
    }
}

void RobotHead::dropEvent(QGraphicsSceneDragDropEvent *event)
{
    if (event-&gt;mimeData()-&gt;hasImage()) {
        dragOver = false;
        pixmap = qvariant_cast&lt;QPixmap&gt;(event-&gt;mimeData()-&gt;imageData());
        update();
    } else {
        RobotPart::dropEvent(event);
    }
}

RobotTorso::RobotTorso(QGraphicsItem *parent)
    : RobotPart(parent)
{
}

QRectF RobotTorso::boundingRect() const
{
    return QRectF(-30, -20, 60, 60);
}

void RobotTorso::paint(QPainter *painter,
           const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option);
    Q_UNUSED(widget);

    painter-&gt;setBrush(dragOver ? color.light(130) : color);
    painter-&gt;drawRoundedRect(-20, -20, 40, 60, 25, 25, Qt::RelativeSize);
    painter-&gt;drawEllipse(-25, -20, 20, 20);
    painter-&gt;drawEllipse(5, -20, 20, 20);
    painter-&gt;drawEllipse(-20, 22, 20, 20);
    painter-&gt;drawEllipse(0, 22, 20, 20);
}

RobotLimb::RobotLimb(QGraphicsItem *parent)
    : RobotPart(parent)
{
}

QRectF RobotLimb::boundingRect() const
{
    return QRectF(-5, -5, 40, 10);
}

void RobotLimb::paint(QPainter *painter,
           const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(option);
    Q_UNUSED(widget);

    painter-&gt;setBrush(dragOver ? color.light(130) : color);
    painter-&gt;drawRoundedRect(boundingRect(), 50, 50, Qt::RelativeSize);
    painter-&gt;drawEllipse(-5, -5, 10, 10);
}

Robot::Robot(QGraphicsItem *parent)
    : RobotPart(parent)
{
    setFlag(ItemHasNoContents);

    QGraphicsObject *torsoItem = new RobotTorso(this);
    QGraphicsObject *headItem = new RobotHead(torsoItem);
    QGraphicsObject *upperLeftArmItem = new RobotLimb(torsoItem);
    QGraphicsObject *lowerLeftArmItem = new RobotLimb(upperLeftArmItem);
    QGraphicsObject *upperRightArmItem = new RobotLimb(torsoItem);
    QGraphicsObject *lowerRightArmItem = new RobotLimb(upperRightArmItem);
    QGraphicsObject *upperRightLegItem = new RobotLimb(torsoItem);
    QGraphicsObject *lowerRightLegItem = new RobotLimb(upperRightLegItem);
    QGraphicsObject *upperLeftLegItem = new RobotLimb(torsoItem);
    QGraphicsObject *lowerLeftLegItem = new RobotLimb(upperLeftLegItem);

    headItem-&gt;setPos(0, -18);
    upperLeftArmItem-&gt;setPos(-15, -10);
    lowerLeftArmItem-&gt;setPos(30, 0);
    upperRightArmItem-&gt;setPos(15, -10);
    lowerRightArmItem-&gt;setPos(30, 0);
    upperRightLegItem-&gt;setPos(10, 32);
    lowerRightLegItem-&gt;setPos(30, 0);
    upperLeftLegItem-&gt;setPos(-10, 32);
    lowerLeftLegItem-&gt;setPos(30, 0);

    QParallelAnimationGroup *animation = new QParallelAnimationGroup(this);

    QPropertyAnimation *headAnimation = new QPropertyAnimation(headItem, &quot;rotation&quot;);
    headAnimation-&gt;setStartValue(20);
    headAnimation-&gt;setEndValue(-20);
    QPropertyAnimation *headScaleAnimation = new QPropertyAnimation(headItem, &quot;scale&quot;);
    headScaleAnimation-&gt;setEndValue(1.1);
    animation-&gt;addAnimation(headAnimation);
    animation-&gt;addAnimation(headScaleAnimation);

    QPropertyAnimation *upperLeftArmAnimation = new QPropertyAnimation(upperLeftArmItem, &quot;rotation&quot;);
    upperLeftArmAnimation-&gt;setStartValue(190);
    upperLeftArmAnimation-&gt;setEndValue(180);
    animation-&gt;addAnimation(upperLeftArmAnimation);

    QPropertyAnimation *lowerLeftArmAnimation = new QPropertyAnimation(lowerLeftArmItem, &quot;rotation&quot;);
    lowerLeftArmAnimation-&gt;setStartValue(50);
    lowerLeftArmAnimation-&gt;setEndValue(10);
    animation-&gt;addAnimation(lowerLeftArmAnimation);

    QPropertyAnimation *upperRightArmAnimation = new QPropertyAnimation(upperRightArmItem, &quot;rotation&quot;);
    upperRightArmAnimation-&gt;setStartValue(300);
    upperRightArmAnimation-&gt;setEndValue(310);
    animation-&gt;addAnimation(upperRightArmAnimation);

    QPropertyAnimation *lowerRightArmAnimation = new QPropertyAnimation(lowerRightArmItem, &quot;rotation&quot;);
    lowerRightArmAnimation-&gt;setStartValue(0);
    lowerRightArmAnimation-&gt;setEndValue(-70);
    animation-&gt;addAnimation(lowerRightArmAnimation);

    QPropertyAnimation *upperLeftLegAnimation = new QPropertyAnimation(upperLeftLegItem, &quot;rotation&quot;);
    upperLeftLegAnimation-&gt;setStartValue(150);
    upperLeftLegAnimation-&gt;setEndValue(80);
    animation-&gt;addAnimation(upperLeftLegAnimation);

    QPropertyAnimation *lowerLeftLegAnimation = new QPropertyAnimation(lowerLeftLegItem, &quot;rotation&quot;);
    lowerLeftLegAnimation-&gt;setStartValue(70);
    lowerLeftLegAnimation-&gt;setEndValue(10);
    animation-&gt;addAnimation(lowerLeftLegAnimation);

    QPropertyAnimation *upperRightLegAnimation = new QPropertyAnimation(upperRightLegItem, &quot;rotation&quot;);
    upperRightLegAnimation-&gt;setStartValue(40);
    upperRightLegAnimation-&gt;setEndValue(120);
    animation-&gt;addAnimation(upperRightLegAnimation);

    QPropertyAnimation *lowerRightLegAnimation = new QPropertyAnimation(lowerRightLegItem, &quot;rotation&quot;);
    lowerRightLegAnimation-&gt;setStartValue(10);
    lowerRightLegAnimation-&gt;setEndValue(50);
    animation-&gt;addAnimation(lowerRightLegAnimation);

    QPropertyAnimation *torsoAnimation = new QPropertyAnimation(torsoItem, &quot;rotation&quot;);
    torsoAnimation-&gt;setStartValue(5);
    torsoAnimation-&gt;setEndValue(-20);
    animation-&gt;addAnimation(torsoAnimation);

    for (int i = 0; i &lt; animation-&gt;animationCount(); ++i) {
        QPropertyAnimation *anim = qobject_cast&lt;QPropertyAnimation *&gt;(animation-&gt;animationAt(i));
        anim-&gt;setEasingCurve(QEasingCurve::SineCurve);
        anim-&gt;setDuration(2000);
    }

    animation-&gt;setLoopCount(-1);
    animation-&gt;start();
}

QRectF Robot::boundingRect() const
{
    return QRectF();
}

void Robot::paint(QPainter *painter,
                  const QStyleOptionGraphicsItem *option, QWidget *widget)
{
    Q_UNUSED(painter);
    Q_UNUSED(option);
    Q_UNUSED(widget);
}

</db:programlisting>
</db:article>
