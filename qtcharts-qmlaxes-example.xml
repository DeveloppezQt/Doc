<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Axes with QML</db:title>
<db:productname>QtCharts</db:productname>
<db:edition>Qt Charts | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Charts Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates how to use axes in your QML application.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:note>
<db:para>This is part of the <db:link xlink:href="qtcharts-qmlchartsgallery-example.xml">Charts with QML Gallery</db:link> example.</db:para>
</db:note>
<db:para>We begin with a chart that has a line series and a scatter series with random data. We then have a graph with two series that share a common axis.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlaxes1.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Two Series, Common Axes&quot;
    anchors.fill: parent
    legend.visible: false
    antialiasing: true

    ValueAxis {
        id: axisX
        min: 0
        max: 10
        tickCount: 5
    }

    ValueAxis {
        id: axisY
        min: -0.5
        max: 1.5
    }

    LineSeries {
        id: series1
        axisX: axisX
        axisY: axisY
    }

    ScatterSeries {
        id: series2
        axisX: axisX
        axisY: axisY
    }

    // Add data dynamically to the series
    Component.onCompleted: {
        for (var i = 0; i &amp;lt;= 10; i++) {
            series1.append(i, Math.random());
            series2.append(i, Math.random());
        }
    }
}
</db:programlisting>
<db:para>This chart shows some accurate historical data. It is created by the following snippet that makes use of a <db:link xlink:href="qml-qtcharts-datetimeaxis.xml">DateTimeAxis</db:link>.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlaxes2.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    id: root
    title: &quot;Accurate Historical Data&quot;
    anchors.fill: parent
    legend.visible: false
    antialiasing: true

    LineSeries {
        axisX: DateTimeAxis {
            format: &quot;yyyy MMM&quot;
            tickCount: 5
        }
        axisY: ValueAxis {
            min: 0
            max: 150
        }

        // Please note that month in JavaScript months are zero based, so 2 means March
        XYPoint { x: root.toMsecsSinceEpoch(new Date(1950, 2, 15)); y: 5 }
        XYPoint { x: root.toMsecsSinceEpoch(new Date(1970, 0, 1)); y: 50 }
        XYPoint { x: root.toMsecsSinceEpoch(new Date(1987, 12, 31)); y: 102 }
        XYPoint { x: root.toMsecsSinceEpoch(new Date(1998, 7, 1)); y: 100 }
        XYPoint { x: root.toMsecsSinceEpoch(new Date(2012, 8, 2)); y: 110 }
    }

    // DateTimeAxis is based on QDateTimes so we must convert our JavaScript dates to
    // milliseconds since epoch to make them match the DateTimeAxis values
    function toMsecsSinceEpoch(date) {
        var msecs = date.getTime();
        return msecs;
    }
}
</db:programlisting>
<db:para>This following chart is created using a <db:link xlink:href="qml-qtcharts-categoryaxis.xml">CategoryAxis</db:link> to make the data easier to understand.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/examples_qmlaxes3.png"/>
</db:imageobject>
</db:mediaobject>
<db:programlisting language="qml">ChartView {
    title: &quot;Numerical Data for Dummies&quot;
    anchors.fill: parent
    legend.visible: false
    antialiasing: true

    LineSeries {
        axisY: CategoryAxis {
            min: 0
            max: 30
            CategoryRange {
                label: &quot;critical&quot;
                endValue: 2
            }
            CategoryRange {
                label: &quot;low&quot;
                endValue: 4
            }
            CategoryRange {
                label: &quot;normal&quot;
                endValue: 7
            }
            CategoryRange {
                label: &quot;high&quot;
                endValue: 15
            }
            CategoryRange {
                label: &quot;extremely high&quot;
                endValue: 30
            }
        }

        XYPoint { x: 0; y: 4.3 }
        XYPoint { x: 1; y: 4.1 }
        XYPoint { x: 2; y: 4.7 }
        XYPoint { x: 3; y: 3.9 }
        XYPoint { x: 4; y: 5.2 }
    }
}
</db:programlisting>
</db:article>
