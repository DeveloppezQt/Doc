<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QScreen Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscreen.xml">QScreen</db:link> class is used to query screen properties.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScreen</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A note on logical vs physical dots per inch: physical DPI is based on the actual physical pixel sizes when available, and is useful for print preview and other cases where it's desirable to know the exact physical dimensions of screen displayed contents.</db:para>
<db:para>Logical dots per inch are used to convert font and user interface elements from point sizes to pixel sizes, and might be different from the physical dots per inch. The logical dots per inch are sometimes user-settable in the desktop environment's settings panel, to let the user globally control UI and font sizes in different applications.</db:para>
<db:note>
<db:para>Both physical and logical DPI are expressed in device-independent dots. Multiply by <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>() to get device-dependent density.</db:para>
</db:note>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="availableGeometry-prop">
<db:title>[read-only] availableGeometry : const QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>availableGeometry</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">availableGeometry</db:synopsisinfo>
<db:synopsisinfo role="notifier">availableGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen's available geometry in pixels</db:para>
<db:para>The available geometry is the geometry excluding window manager reserved areas such as task bars and system menus.</db:para>
<db:para>Note, on X11 this will return the true available geometry only on systems with one monitor and if window manager has set _NET_WORKAREA atom. In all other cases this is equal to <db:link xlink:href="qscreen.xml#geometry-prop">geometry</db:link>(). This is a limitation in X11 window manager specification.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">availableGeometry</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#availableGeometryChanged">availableGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>geometry</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="availableSize-prop">
<db:title>[read-only] availableSize : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>availableSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">availableSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">availableGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen's available size in pixels</db:para>
<db:para>The available size is the size excluding window manager reserved areas such as task bars and system menus.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">availableSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#availableGeometryChanged">availableGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>geometry</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="availableVirtualGeometry-prop">
<db:title>[read-only] availableVirtualGeometry : const QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>availableVirtualGeometry</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">availableVirtualGeometry</db:synopsisinfo>
<db:synopsisinfo role="notifier">virtualGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the available geometry of the virtual desktop to which this screen belongs</db:para>
<db:para>Returns the available geometry of the virtual desktop corresponding to this screen.</db:para>
<db:para>This is the union of the virtual siblings' individual available geometries.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">availableVirtualGeometry</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#virtualGeometryChanged">virtualGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#availableGeometry-prop">availableGeometry</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="availableVirtualSize-prop">
<db:title>[read-only] availableVirtualSize : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>availableVirtualSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">availableVirtualSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">virtualGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the available size of the virtual desktop to which this screen belongs</db:para>
<db:para>Returns the available pixel size of the virtual desktop corresponding to this screen.</db:para>
<db:para>This is the combined size of the virtual siblings' individual available geometries.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">availableVirtualSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#virtualGeometryChanged">virtualGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#availableSize-prop">availableSize</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="depth-prop">
<db:title>[read-only] depth : const int</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>int</db:type>
<db:varname>depth</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">depth</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the color depth of the screen</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>int</db:type> <db:emphasis role="bold">depth</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="devicePixelRatio-prop">
<db:title>[read-only] devicePixelRatio : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>devicePixelRatio</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">devicePixelRatio</db:synopsisinfo>
<db:synopsisinfo role="notifier">physicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen's ratio between physical pixels and device-independent pixels</db:para>
<db:para>Returns the ratio between physical pixels and device-independent pixels for the screen.</db:para>
<db:para>Common values are 1.0 on normal displays and 2.0 on &quot;retina&quot; displays. Higher values are also possible.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">devicePixelRatio</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#physicalDotsPerInchChanged">physicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#devicePixelRatio">QGuiApplication::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="geometry-prop">
<db:title>[read-only] geometry : const QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>geometry</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">geometry</db:synopsisinfo>
<db:synopsisinfo role="notifier">geometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen's geometry in pixels</db:para>
<db:para>As an example this might return <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, 1280, 1024), or in a virtual desktop setting <db:link xlink:href="qrect.xml">QRect</db:link>(1280, 0, 1280, 1024).</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">geometry</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#geometryChanged">geometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>geometry</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="logicalDotsPerInch-prop">
<db:title>[read-only] logicalDotsPerInch : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>logicalDotsPerInch</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">logicalDotsPerInch</db:synopsisinfo>
<db:synopsisinfo role="notifier">logicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of logical dots or pixels per inch</db:para>
<db:para>This value can be used to convert font point sizes to pixel sizes.</db:para>
<db:para>This is a convenience property that's simply the average of the <db:link xlink:href="qscreen.xml#logicalDotsPerInchX-prop">logicalDotsPerInchX</db:link> and <db:link xlink:href="qscreen.xml#logicalDotsPerInchY-prop">logicalDotsPerInchY</db:link> properties.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">logicalDotsPerInch</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#logicalDotsPerInchChanged">logicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#logicalDotsPerInchX-prop">logicalDotsPerInchX</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#logicalDotsPerInchY-prop">logicalDotsPerInchY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalDotsPerInchX-prop">
<db:title>[read-only] logicalDotsPerInchX : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>logicalDotsPerInchX</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">logicalDotsPerInchX</db:synopsisinfo>
<db:synopsisinfo role="notifier">logicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of logical dots or pixels per inch in the horizontal direction</db:para>
<db:para>This value is used to convert font point sizes to pixel sizes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">logicalDotsPerInchX</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#logicalDotsPerInchChanged">logicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#logicalDotsPerInchY-prop">logicalDotsPerInchY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="logicalDotsPerInchY-prop">
<db:title>[read-only] logicalDotsPerInchY : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>logicalDotsPerInchY</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">logicalDotsPerInchY</db:synopsisinfo>
<db:synopsisinfo role="notifier">logicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of logical dots or pixels per inch in the vertical direction</db:para>
<db:para>This value is used to convert font point sizes to pixel sizes.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">logicalDotsPerInchY</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#logicalDotsPerInchChanged">logicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#logicalDotsPerInchX-prop">logicalDotsPerInchX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="manufacturer-prop">
<db:title>[read-only] manufacturer : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>manufacturer</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">manufacturer</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the manufacturer of the screen</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">manufacturer</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="model-prop">
<db:title>[read-only] model : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>model</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">model</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the model of the screen</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">model</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="name-prop">
<db:title>[read-only] name : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>name</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">name</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds a user presentable string representing the screen</db:para>
<db:para>For example, on X11 these correspond to the XRandr screen names, typically &quot;VGA1&quot;, &quot;HDMI1&quot;, etc.</db:para>
<db:note>
<db:para>The user presentable string is not guaranteed to match the result of any native APIs, and should not be used to uniquely identify a screen.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">name</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="nativeOrientation-prop">
<db:title>[read-only] nativeOrientation : const Qt::ScreenOrientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ScreenOrientation</db:type>
<db:varname>nativeOrientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">nativeOrientation</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the native screen orientation</db:para>
<db:para>The native orientation of the screen is the orientation where the logo sticker of the device appears the right way up, or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> if the platform does not support this functionality.</db:para>
<db:para>The native orientation is a property of the hardware, and does not change.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis role="bold">nativeOrientation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="orientation-prop">
<db:title>[read-only] orientation : const Qt::ScreenOrientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ScreenOrientation</db:type>
<db:varname>orientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">orientation</db:synopsisinfo>
<db:synopsisinfo role="notifier">orientationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen orientation</db:para>
<db:para>The <db:code>orientation</db:code> property tells the orientation of the screen from the window system perspective.</db:para>
<db:para>Most mobile devices and tablet computers contain accelerometer sensors. The Qt Sensors module provides the ability to read this sensor directly. However, the windowing system may rotate the entire screen automatically based on how it is being held; in that case, this <db:code>orientation</db:code> property will change.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis role="bold">orientation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#orientationChanged">orientationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis>orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>()</db:member>
<db:member><db:link xlink:href="qwindow.xml#contentOrientation-prop">QWindow::contentOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDotsPerInch-prop">
<db:title>[read-only] physicalDotsPerInch : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>physicalDotsPerInch</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">physicalDotsPerInch</db:synopsisinfo>
<db:synopsisinfo role="notifier">physicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of physical dots or pixels per inch</db:para>
<db:para>This value represents the pixel density on the screen's display. Depending on what information the underlying system provides the value might not be entirely accurate.</db:para>
<db:para>This is a convenience property that's simply the average of the <db:link xlink:href="qscreen.xml#physicalDotsPerInchX-prop">physicalDotsPerInchX</db:link> and <db:link xlink:href="qscreen.xml#physicalDotsPerInchY-prop">physicalDotsPerInchY</db:link> properties.</db:para>
<db:note>
<db:para>Physical DPI is expressed in device-independent dots. Multiply by <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>() to get device-dependent density.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">physicalDotsPerInch</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#physicalDotsPerInchChanged">physicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#physicalDotsPerInchX-prop">physicalDotsPerInchX</db:link>()</db:member>
<db:member><db:link xlink:href="qscreen.xml#physicalDotsPerInchY-prop">physicalDotsPerInchY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDotsPerInchX-prop">
<db:title>[read-only] physicalDotsPerInchX : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>physicalDotsPerInchX</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">physicalDotsPerInchX</db:synopsisinfo>
<db:synopsisinfo role="notifier">physicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of physical dots or pixels per inch in the horizontal direction</db:para>
<db:para>This value represents the actual horizontal pixel density on the screen's display. Depending on what information the underlying system provides the value might not be entirely accurate.</db:para>
<db:note>
<db:para>Physical DPI is expressed in device-independent dots. Multiply by <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>() to get device-dependent density.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">physicalDotsPerInchX</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#physicalDotsPerInchChanged">physicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#physicalDotsPerInchY-prop">physicalDotsPerInchY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalDotsPerInchY-prop">
<db:title>[read-only] physicalDotsPerInchY : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>physicalDotsPerInchY</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">physicalDotsPerInchY</db:synopsisinfo>
<db:synopsisinfo role="notifier">physicalDotsPerInchChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the number of physical dots or pixels per inch in the vertical direction</db:para>
<db:para>This value represents the actual vertical pixel density on the screen's display. Depending on what information the underlying system provides the value might not be entirely accurate.</db:para>
<db:note>
<db:para>Physical DPI is expressed in device-independent dots. Multiply by <db:link xlink:href="qscreen.xml#devicePixelRatio-prop">QScreen::devicePixelRatio</db:link>() to get device-dependent density.</db:para>
</db:note>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">physicalDotsPerInchY</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#physicalDotsPerInchChanged">physicalDotsPerInchChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>dpi</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#physicalDotsPerInchX-prop">physicalDotsPerInchX</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="physicalSize-prop">
<db:title>[read-only] physicalSize : const QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>physicalSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">physicalSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">physicalSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the screen's physical size (in millimeters)</db:para>
<db:para>The physical size represents the actual physical dimensions of the screen's display.</db:para>
<db:para>Depending on what information the underlying system provides the value might not be entirely accurate.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">physicalSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">physicalSizeChanged</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="primaryOrientation-prop">
<db:title>[read-only] primaryOrientation : const Qt::ScreenOrientation</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::ScreenOrientation</db:type>
<db:varname>primaryOrientation</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">primaryOrientation</db:synopsisinfo>
<db:synopsisinfo role="notifier">primaryOrientationChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the primary screen orientation</db:para>
<db:para>The primary screen orientation is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::LandscapeOrientation</db:link> if the screen geometry's width is greater than or equal to its height, or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PortraitOrientation</db:link> otherwise. This property might change when the screen orientation was changed (i.e. when the display is rotated). The behavior is however platform dependent and can often be specified in an application manifest file.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis role="bold">primaryOrientation</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#primaryOrientationChanged">primaryOrientationChanged</db:link></db:emphasis>(<db:type><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::ScreenOrientation</db:link></db:type> <db:emphasis>orientation</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="refreshRate-prop">
<db:title>[read-only] refreshRate : const qreal</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>qreal</db:type>
<db:varname>refreshRate</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">refreshRate</db:synopsisinfo>
<db:synopsisinfo role="notifier">refreshRateChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the approximate vertical refresh rate of the screen in Hz</db:para>
<db:warning>
<db:para>Avoid using the screen's refresh rate to drive animations via a timer such as <db:link xlink:href="qtimer.xml">QTimer</db:link>. Instead use <db:link xlink:href="qwindow.xml#requestUpdate">QWindow::requestUpdate</db:link>().</db:para>
</db:warning>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis role="bold">refreshRate</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">refreshRateChanged</db:emphasis>(<db:type><db:link xlink:href="qttypes.xml#qreal-typedef">qreal</db:link></db:type> <db:emphasis>refreshRate</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#requestUpdate">QWindow::requestUpdate</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="serialNumber-prop">
<db:title>[read-only] serialNumber : const QString</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QString</db:type>
<db:varname>serialNumber</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">serialNumber</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the serial number of the screen</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qstring.xml">QString</db:link></db:type> <db:emphasis role="bold">serialNumber</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="size-prop">
<db:title>[read-only] size : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>size</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">size</db:synopsisinfo>
<db:synopsisinfo role="notifier">geometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pixel resolution of the screen</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#geometryChanged">geometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>geometry</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="virtualGeometry-prop">
<db:title>[read-only] virtualGeometry : const QRect</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QRect</db:type>
<db:varname>virtualGeometry</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">virtualGeometry</db:synopsisinfo>
<db:synopsisinfo role="notifier">virtualGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pixel geometry of the virtual desktop to which this screen belongs</db:para>
<db:para>Returns the pixel geometry of the virtual desktop corresponding to this screen.</db:para>
<db:para>This is the union of the virtual siblings' individual geometries.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> <db:emphasis role="bold">virtualGeometry</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#virtualGeometryChanged">virtualGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="virtualSize-prop">
<db:title>[read-only] virtualSize : const QSize</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSize</db:type>
<db:varname>virtualSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">virtualSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">virtualGeometryChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the pixel size of the virtual desktop to which this screen belongs</db:para>
<db:para>Returns the pixel size of the virtual desktop corresponding to this screen.</db:para>
<db:para>This is the combined size of the virtual siblings' individual geometries.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsize.xml">QSize</db:link></db:type> <db:emphasis role="bold">virtualSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold"><db:link xlink:href="qscreen.xml#virtualGeometryChanged">virtualGeometryChanged</db:link></db:emphasis>(const <db:type><db:link xlink:href="qrect.xml">QRect</db:link></db:type> &amp;<db:emphasis>rect</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#virtualSiblings">virtualSiblings</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="angleBetween">
<db:title>int QScreen::angleBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>angleBetween</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int angleBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to compute the angle of rotation to get from rotation <db:code role="parameter">a</db:code> to rotation <db:code role="parameter">b</db:code>.</db:para>
<db:para>The result will be 0, 90, 180, or 270.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>().</db:para>
</db:section>
<db:section xml:id="grabWindow">
<db:title>QPixmap QScreen::grabWindow(WId <db:emphasis>window</db:emphasis> = 0, int <db:emphasis>x</db:emphasis> = 0, int <db:emphasis>y</db:emphasis> = 0, int <db:emphasis>width</db:emphasis> = -1, int <db:emphasis>height</db:emphasis> = -1)</db:title>
<db:methodsynopsis>
<db:type>QPixmap</db:type>
<db:methodname>grabWindow</db:methodname>
<db:methodparam>
<db:type>WId</db:type>
<db:parameter>window</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>x</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>y</db:parameter>
<db:initializer>0</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>width</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>height</db:parameter>
<db:initializer>-1</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPixmap grabWindow(WId window, int x, int y, int width, int height)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a pixmap constructed by grabbing the contents of the given <db:code role="parameter">window</db:code> restricted by <db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>). If <db:code role="parameter">window</db:code> is 0, then the entire screen will be grabbed.</db:para>
<db:para>The arguments (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) specify the offset in the window, whereas (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>) specify the area to be copied. If <db:code role="parameter">width</db:code> is negative, the function copies everything to the right border of the window. If <db:code role="parameter">height</db:code> is negative, the function copies everything to the bottom of the window.</db:para>
<db:para>The offset and size arguments are specified in device independent pixels. The returned pixmap may be larger than the requested size when grabbing from a high-DPI screen. Call <db:link xlink:href="qpixmap.xml#devicePixelRatio">QPixmap::devicePixelRatio</db:link>() to determine if this is the case.</db:para>
<db:para>The window system identifier (<db:code>WId</db:code>) can be retrieved using the <db:link xlink:href="qwidget.xml#winId">QWidget::winId</db:link>() function. The rationale for using a window identifier and not a <db:link xlink:href="qwidget.xml">QWidget</db:link>, is to enable grabbing of windows that are not part of the application, window system frames, and so on.</db:para>
<db:warning>
<db:para>Grabbing windows that are not part of the application is not supported on systems such as iOS, where sandboxing/security prevents reading pixels of windows not owned by the application.</db:para>
</db:warning>
<db:para>The grabWindow() function grabs pixels from the screen, not from the window, i.e. if there is another window partially or entirely over the one you grab, you get pixels from the overlying window, too. The mouse cursor is generally not grabbed.</db:para>
<db:para>Note on X11 that if the given <db:code role="parameter">window</db:code> doesn't have the same depth as the root window, and another window partially or entirely obscures the one you grab, you will <db:emphasis>not</db:emphasis> get pixels from the overlying window. The contents of the obscured areas in the pixmap will be undefined and uninitialized.</db:para>
<db:para>On Windows Vista and above grabbing a layered window, which is created by setting the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> attribute, will not work. Instead grabbing the desktop widget should work.</db:para>
<db:warning>
<db:para>In general, grabbing an area outside the screen is not safe. This depends on the underlying window system.</db:para>
</db:warning>
</db:section>
<db:section xml:id="handle">
<db:title>QPlatformScreen *QScreen::handle() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QPlatformScreen *</db:type>
<db:methodname>handle</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QPlatformScreen * handle() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Get the platform screen handle.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpa.xml">Qt Platform Abstraction (QPA)</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isLandscape">
<db:title>bool QScreen::isLandscape(Qt::ScreenOrientation <db:emphasis>o</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isLandscape</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isLandscape(Qt::ScreenOrientation o) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function that returns <db:code>true</db:code> if <db:code role="parameter">o</db:code> is either landscape or inverted landscape; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>().</db:para>
</db:section>
<db:section xml:id="isPortrait">
<db:title>bool QScreen::isPortrait(Qt::ScreenOrientation <db:emphasis>o</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isPortrait</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>o</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isPortrait(Qt::ScreenOrientation o) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function that returns <db:code>true</db:code> if <db:code role="parameter">o</db:code> is either portrait or inverted portrait; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>().</db:para>
</db:section>
<db:section xml:id="mapBetween">
<db:title>QRect QScreen::mapBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QRect</db:type>
<db:methodname>mapBetween</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>rect</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRect mapBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;rect) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Maps the rect between two screen orientations.</db:para>
<db:para>This will flip the x and y dimensions of the rectangle <db:code role="parameter">rect</db:code> if the orientation <db:code role="parameter">a</db:code> is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PortraitOrientation</db:link> or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::InvertedPortraitOrientation</db:link> and orientation <db:code role="parameter">b</db:code> is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::LandscapeOrientation</db:link> or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::InvertedLandscapeOrientation</db:link>, or vice versa.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>().</db:para>
</db:section>
<db:section xml:id="nativeInterface">
<db:title>QNativeInterface *QScreen::nativeInterface() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QNativeInterface *</db:type>
<db:methodname>nativeInterface</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNativeInterface * nativeInterface() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a native interface of the given type for the screen.</db:para>
<db:para>This function provides access to platform specific functionality of <db:link xlink:href="qscreen.xml">QScreen</db:link>, as defined in the <db:link xlink:href="qnativeinterface-sub-qtgui.xml">QNativeInterface</db:link> namespace:</db:para>
<db:variablelist role="native-interfaces-qscreen">
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qandroidscreen.xml" xlink:role="class">QNativeInterface::QAndroidScreen</db:link></db:term>
<db:listitem>
<db:para>Native interface to a screen.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qwaylandscreen.xml" xlink:role="class">QNativeInterface::QWaylandScreen</db:link></db:term>
<db:listitem>
<db:para>Native interface to a screen on Wayland.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qnativeinterface-qwindowsscreen.xml" xlink:role="class">QNativeInterface::QWindowsScreen</db:link></db:term>
<db:listitem>
<db:para>Native interface to a screen.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>If the requested interface is not available a <db:code>nullptr</db:code> is returned.</db:para>
</db:section>
<db:section xml:id="orientationChanged">
<db:title>void QScreen::orientationChanged(Qt::ScreenOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>orientationChanged</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">orientation</db:synopsisinfo>
<db:synopsisinfo role="signature">void orientationChanged(Qt::ScreenOrientation orientation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the orientation of the screen changes with <db:code role="parameter">orientation</db:code> as an argument.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qscreen.xml#orientation-prop">orientation</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#orientation-prop">orientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryOrientationChanged">
<db:title>void QScreen::primaryOrientationChanged(Qt::ScreenOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>primaryOrientationChanged</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>orientation</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="associated-property">primaryOrientation</db:synopsisinfo>
<db:synopsisinfo role="signature">void primaryOrientationChanged(Qt::ScreenOrientation orientation)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This signal is emitted when the primary orientation of the screen changes with <db:code role="parameter">orientation</db:code> as an argument.</db:para>
<db:note>
<db:para>Notifier signal for property <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>. </db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformBetween">
<db:title>QTransform QScreen::transformBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>, const QRect &amp;<db:emphasis>target</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QTransform</db:type>
<db:methodname>transformBetween</db:methodname>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>a</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>Qt::ScreenOrientation</db:type>
<db:parameter>b</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QRect &amp;</db:type>
<db:parameter>target</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QTransform transformBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, const QRect &amp;target) const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Convenience function to compute a transform that maps from the coordinate system defined by orientation <db:code role="parameter">a</db:code> into the coordinate system defined by orientation <db:code role="parameter">b</db:code> and target dimensions <db:code role="parameter">target</db:code>.</db:para>
<db:para>Example, <db:code role="parameter">a</db:code> is Qt::Landscape, <db:code role="parameter">b</db:code> is Qt::Portrait, and <db:code role="parameter">target</db:code> is <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, w, h) the resulting transform will be such that the point <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, 0) is mapped to <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, w), and <db:link xlink:href="qpoint.xml">QPoint</db:link>(h, w) is mapped to <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, h). Thus, the landscape coordinate system <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, h, w) is mapped (with a 90 degree rotation) into the portrait coordinate system <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, w, h).</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's <db:link xlink:href="qscreen.xml#primaryOrientation-prop">primaryOrientation</db:link>().</db:para>
</db:section>
<db:section xml:id="virtualSiblingAt">
<db:title>QScreen *QScreen::virtualSiblingAt(QPoint <db:emphasis>point</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:type>QScreen *</db:type>
<db:methodname>virtualSiblingAt</db:methodname>
<db:methodparam>
<db:type>QPoint</db:type>
<db:parameter>point</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QScreen * virtualSiblingAt(QPoint point)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the screen at <db:code role="parameter">point</db:code> within the set of <db:link xlink:href="qscreen.xml#virtualSiblings">QScreen::virtualSiblings</db:link>(), or <db:code>nullptr</db:code> if outside of any screen.</db:para>
<db:para>The <db:code role="parameter">point</db:code> is in relation to the <db:link xlink:href="qscreen.xml#virtualGeometry-prop">virtualGeometry</db:link>() of each set of virtual siblings.</db:para>
</db:section>
<db:section xml:id="virtualSiblings">
<db:title>QList&lt;QScreen *&gt; QScreen::virtualSiblings() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QScreen *&gt;</db:type>
<db:methodname>virtualSiblings</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QScreen *&gt; virtualSiblings() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Get the screen's virtual siblings.</db:para>
<db:para>The virtual siblings are the screen instances sharing the same virtual desktop. They share a common coordinate system, and windows can freely be moved or positioned across them without having to be re-created.</db:para>
</db:section>
</db:section>
</db:article>
