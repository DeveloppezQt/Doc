<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QScreen Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qscreen.xml">QScreen</db:link> class is used to query screen properties.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QScreen</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A note on logical vs physical dots per inch: physical DPI is based on the actual physical pixel sizes when available, and is useful for print preview and other cases where it's desirable to know the exact physical dimensions of screen displayed contents.</db:para>
<db:para>Logical dots per inch are used to convert font and user interface elements from point sizes to pixel sizes, and might be different from the physical dots per inch. The logical dots per inch are sometimes user-settable in the desktop environment's settings panel, to let the user globally control UI and font sizes in different applications.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="angleBetween">
<db:title>int QScreen::angleBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>) const</db:title>
<db:para>Convenience function to compute the angle of rotation to get from rotation <db:code role="parameter">a</db:code> to rotation <db:code role="parameter">b</db:code>.</db:para>
<db:para>The result will be 0, 90, 180, or 270.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's primaryOrientation().</db:para>
</db:section>
<db:section xml:id="devicePixelRatio">
<db:title>qreal QScreen::devicePixelRatio() const</db:title>
<db:para>Returns the ratio between physical pixels and device-independent pixels for the screen.</db:para>
<db:para>Common values are 1.0 on normal displays and 2.0 on Apple &quot;retina&quot; displays.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwindow.xml#devicePixelRatio">QWindow::devicePixelRatio</db:link>()</db:member>
<db:member><db:link xlink:href="qguiapplication.xml#devicePixelRatio">QGuiApplication::devicePixelRatio</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="grabWindow">
<db:title>QPixmap QScreen::grabWindow(WId <db:emphasis>window</db:emphasis>, int <db:emphasis>x</db:emphasis> = 0, int <db:emphasis>y</db:emphasis> = 0, int <db:emphasis>width</db:emphasis> = -1, int <db:emphasis>height</db:emphasis> = -1)</db:title>
<db:para>Creates and returns a pixmap constructed by grabbing the contents of the given <db:code role="parameter">window</db:code> restricted by <db:link xlink:href="qrect.xml">QRect</db:link>(<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>, <db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>).</db:para>
<db:para>The arguments (<db:code role="parameter">x</db:code>, <db:code role="parameter">y</db:code>) specify the offset in the window, whereas (<db:code role="parameter">width</db:code>, <db:code role="parameter">height</db:code>) specify the area to be copied. If <db:code role="parameter">width</db:code> is negative, the function copies everything to the right border of the window. If <db:code role="parameter">height</db:code> is negative, the function copies everything to the bottom of the window.</db:para>
<db:para>The window system identifier (<db:code>WId</db:code>) can be retrieved using the QWidget::winId() function. The rationale for using a window identifier and not a QWidget, is to enable grabbing of windows that are not part of the application, window system frames, and so on.</db:para>
<db:para>The grabWindow() function grabs pixels from the screen, not from the window, i.e. if there is another window partially or entirely over the one you grab, you get pixels from the overlying window, too. The mouse cursor is generally not grabbed.</db:para>
<db:para>Note on X11 that if the given <db:code role="parameter">window</db:code> doesn't have the same depth as the root window, and another window partially or entirely obscures the one you grab, you will <db:emphasis>not</db:emphasis> get pixels from the overlying window. The contents of the obscured areas in the pixmap will be undefined and uninitialized.</db:para>
<db:para>On Windows Vista and above grabbing a layered window, which is created by setting the <db:link xlink:href="qt.xml#WidgetAttribute-enum">Qt::WA_TranslucentBackground</db:link> attribute, will not work. Instead grabbing the desktop widget should work.</db:para>
<db:warning>
<db:para>In general, grabbing an area outside the screen is not safe. This depends on the underlying window system.</db:para>
</db:warning>
</db:section>
<db:section xml:id="handle">
<db:title>QPlatformScreen *QScreen::handle() const</db:title>
<db:para>Get the platform screen handle.</db:para>
</db:section>
<db:section xml:id="isLandscape">
<db:title>bool QScreen::isLandscape(Qt::ScreenOrientation <db:emphasis>o</db:emphasis>) const</db:title>
<db:para>Convenience function that returns <db:code>true</db:code> if <db:code role="parameter">o</db:code> is either landscape or inverted landscape; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's primaryOrientation().</db:para>
</db:section>
<db:section xml:id="isPortrait">
<db:title>bool QScreen::isPortrait(Qt::ScreenOrientation <db:emphasis>o</db:emphasis>) const</db:title>
<db:para>Convenience function that returns <db:code>true</db:code> if <db:code role="parameter">o</db:code> is either portrait or inverted portrait; otherwise returns <db:code>false</db:code>.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's primaryOrientation().</db:para>
</db:section>
<db:section xml:id="mapBetween">
<db:title>QRect QScreen::mapBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>, const QRect &amp;<db:emphasis>rect</db:emphasis>) const</db:title>
<db:para>Maps the rect between two screen orientations.</db:para>
<db:para>This will flip the x and y dimensions of the rectangle <db:code role="parameter">rect</db:code> if the orientation <db:code role="parameter">a</db:code> is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PortraitOrientation</db:link> or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::InvertedPortraitOrientation</db:link> and orientation <db:code role="parameter">b</db:code> is <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::LandscapeOrientation</db:link> or <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::InvertedLandscapeOrientation</db:link>, or vice versa.</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's primaryOrientation().</db:para>
</db:section>
<db:section xml:id="orientationChanged">
<db:title>void QScreen::orientationChanged(Qt::ScreenOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>This signal is emitted when the orientation of the screen changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">orientation()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="orientationUpdateMask">
<db:title>Qt::ScreenOrientations QScreen::orientationUpdateMask() const</db:title>
<db:para>Returns the currently set orientation update mask.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#setOrientationUpdateMask">setOrientationUpdateMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="primaryOrientationChanged">
<db:title>void QScreen::primaryOrientationChanged(Qt::ScreenOrientation <db:emphasis>orientation</db:emphasis>)</db:title>
<db:para>This signal is emitted when the primary orientation of the screen changes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="">primaryOrientation()</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOrientationUpdateMask">
<db:title>void QScreen::setOrientationUpdateMask(Qt::ScreenOrientations <db:emphasis>mask</db:emphasis>)</db:title>
<db:para>Sets the orientations that the application is interested in receiving updates for in conjunction with this screen.</db:para>
<db:para>For example, to receive orientation() updates and thus have <db:link xlink:href="qscreen.xml#orientationChanged">orientationChanged</db:link>() signals being emitted for LandscapeOrientation and InvertedLandscapeOrientation, call setOrientationUpdateMask() with <db:code role="parameter">mask</db:code> set to <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::LandscapeOrientation</db:link> | <db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::InvertedLandscapeOrientation</db:link>.</db:para>
<db:para>The default, 0, means no <db:link xlink:href="qscreen.xml#orientationChanged">orientationChanged</db:link>() signals are fired.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qscreen.xml#orientationUpdateMask">orientationUpdateMask</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="transformBetween">
<db:title>QTransform QScreen::transformBetween(Qt::ScreenOrientation <db:emphasis>a</db:emphasis>, Qt::ScreenOrientation <db:emphasis>b</db:emphasis>, const QRect &amp;<db:emphasis>target</db:emphasis>) const</db:title>
<db:para>Convenience function to compute a transform that maps from the coordinate system defined by orientation <db:code role="parameter">a</db:code> into the coordinate system defined by orientation <db:code role="parameter">b</db:code> and target dimensions <db:code role="parameter">target</db:code>.</db:para>
<db:para>Example, <db:code role="parameter">a</db:code> is Qt::Landscape, <db:code role="parameter">b</db:code> is Qt::Portrait, and <db:code role="parameter">target</db:code> is <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, w, h) the resulting transform will be such that the point <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, 0) is mapped to <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, w), and <db:link xlink:href="qpoint.xml">QPoint</db:link>(h, w) is mapped to <db:link xlink:href="qpoint.xml">QPoint</db:link>(0, h). Thus, the landscape coordinate system <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, h, w) is mapped (with a 90 degree rotation) into the portrait coordinate system <db:link xlink:href="qrect.xml">QRect</db:link>(0, 0, w, h).</db:para>
<db:para><db:link xlink:href="qt.xml#ScreenOrientation-enum">Qt::PrimaryOrientation</db:link> is interpreted as the screen's primaryOrientation().</db:para>
</db:section>
<db:section xml:id="virtualSiblings">
<db:title>QList&lt;QScreen *&gt; QScreen::virtualSiblings() const</db:title>
<db:para>Get the screen's virtual siblings.</db:para>
<db:para>The virtual siblings are the screen instances sharing the same virtual desktop. They share a common coordinate system, and windows can freely be moved or positioned across them without having to be re-created.</db:para>
</db:section>
</db:section>
</db:article>
