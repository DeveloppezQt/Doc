<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QML Video Recorder</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>Recording audio and video using Qt Quick.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qmlrecorder.jpg"/>
</db:imageobject>
</db:mediaobject>
<db:para><db:emphasis>QML Recorder</db:emphasis> demonstrates a simple application that can record audio and video separate or together, using a microphone, a camera, or with screen capturing.</db:para>
<db:section xml:id="running-the-example">
<db:title>Running the Example</db:title>
<db:para>To run the example from <db:link xlink:href="https://doc.qt.io/qtcreator/index.html">Qt Creator</db:link>, open the <db:guilabel>Welcome</db:guilabel> mode and select the example from <db:guilabel>Examples</db:guilabel>. For more information, visit <db:link xlink:href="https://doc.qt.io/qtcreator/creator-build-example-application.html">Building and Running an Example</db:link>.</db:para>
</db:section>
<db:section xml:id="overview">
<db:title>Overview</db:title>
<db:para>At its core, this is a QML application, see <db:link xlink:href="qtdoc-tutorials-alarms-example.xml">Getting Started Programming with Qt Quick</db:link>. This documentation is focused on how this example uses the <db:link xlink:href="qtmultimedia-qmlmodule.xml">Qt Multimedia QML Types</db:link>.</db:para>
<db:mediaobject>
<db:alt>&quot;Animation cycling through qml objects declared in main.qml&quot;</db:alt>
<db:imageobject>
<db:imagedata fileref="images/qml-recorder-overview.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>The example uses the QML <db:link xlink:href="qml-qtmultimedia-camera.xml">Camera</db:link> and <db:link xlink:href="qml-qtmultimedia-audioinput.xml">AudioInput</db:link> types connected to a <db:link xlink:href="qml-qtmultimedia-capturesession.xml">CaptureSession</db:link>. A <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml">MediaRecorder</db:link> object is then used to record the captured audio and video.</db:para>
<db:para>In addition to <db:link xlink:href="qtmultimedia-qmlmodule.xml">QtMultimedia</db:link>, features of Qt Quick Windows, Controls, and Layouts are used to implement the graphic user interface and functionality. Playback won't be covered here, for that see the <db:link xlink:href="qtmultimedia-video-mediaplayer-example.xml">QML Media Player Example</db:link>.</db:para>
<db:para>The example demonstrates the following:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Input devices can be selected.</db:para>
</db:listitem>
<db:listitem>
<db:para>An input type switched off.</db:para>
</db:listitem>
<db:listitem>
<db:para>Settings for capturing such as quality, codec choice, file format, and assigning metadata.</db:para>
</db:listitem>
<db:listitem>
<db:para>Captured files are stored and can be played back.</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="recording">
<db:title>Recording</db:title>
<db:para>The application implements recording.</db:para>
<db:section xml:id="capturesession">
<db:title>captureSession</db:title>
<db:para>In <db:code>main.qml</db:code>, <db:code>captureSession</db:code> is declared like so:</db:para>
<db:programlisting language="cpp">    CaptureSession {
        id: captureSession
        recorder: recorder
        audioInput: controls.audioInput
        camera: controls.camera
        screenCapture: controls.screenCapture
        windowCapture: controls.windowCapture
        videoOutput: videoOutput
    }
</db:programlisting>
</db:section>
<db:section xml:id="recorder">
<db:title>recorder</db:title>
<db:para>In <db:code>main.qml</db:code>, the <db:link xlink:href="qml-qtmultimedia-mediarecorder.xml">MediaRecorder</db:link> <db:code>recorder</db:code> handles recording media as well as capturing a thumbnail for the file and appending it to a <db:link xlink:href="qml-qtqml-models-listmodel.xml">ListModel</db:link>, <db:code>mediaList</db:code>.</db:para>
<db:programlisting language="cpp">    MediaRecorder {
        id: recorder
        onRecorderStateChanged:
            (state) =&amp;gt; {
                if (state === MediaRecorder.StoppedState) {
                    root.contentOrientation = Qt.PrimaryOrientation
                    mediaList.append()
                } else if (state === MediaRecorder.RecordingState &amp;amp;&amp;amp; captureSession.camera) {
                    // lock orientation while recording and create a preview image
                    root.contentOrientation = root.screen.orientation;
                    videoOutput.grabToImage(function(res) { mediaList.mediaThumbnail = res.url })
                }
            }
        onActualLocationChanged: (url) =&amp;gt; { mediaList.mediaUrl = url }
        onErrorOccurred: { recorderErrorText.text = recorder.errorString; recorderError.open(); }
    }
</db:programlisting>
<db:para><db:code>mediaList</db:code> is declared in the <db:link xlink:href="qml-qtquick-controls-frame.xml">Frame</db:link> <db:code>mediaListFrame</db:code></db:para>
<db:programlisting language="cpp">    Frame {
        id: mediaListFrame
        height: 150
        width: parent.width
        anchors.bottom: controlsFrame.top
        x: controls.capturesVisible ? 0 : parent.width
        background: Rectangle {
            anchors.fill: parent
            color: palette.base
            opacity: 0.8
        }

        Behavior on x { NumberAnimation { duration: 200 } }

        MediaList {
            id: mediaList
            anchors.fill: parent
            playback: playback
</db:programlisting>
</db:section>
<db:section xml:id="controls">
<db:title>controls</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-recorder-control-bar-overview.gif"/>
</db:imageobject>
</db:mediaobject>
<db:para>These are defined in <db:code>Controls.qml</db:code> and declared in main.qml.</db:para>
<db:para>Its root is a <db:link xlink:href="qml-qtquick-row.xml">Row</db:link> that contains the <db:link xlink:href="qml-qtquick-column.xml">Columns</db:link> <db:code>inputControls</db:code>, <db:code>recordButton</db:code>, <db:code>optionButtons</db:code>, each defined in their own .qml files.</db:para>
<db:section xml:id="selecting-a-video-source">
<db:title>Selecting a video source</db:title>
<db:para>Defined in <db:code>VideoSourceSelect.qml</db:code>, <db:code>VideoSourceSlect</db:code> is comprised of a <db:link xlink:href="qml-qtquick-controls-switch.xml">Switch</db:link> and a <db:link xlink:href="qml-qtquick-controls-combobox.xml">ComboBox</db:link> and enables the user to select from available cameras.</db:para>
<db:programlisting language="cpp">Row {
    id: root
    height: Style.height
    property Camera selectedCamera: cameraAvailable ? camera : null
    property ScreenCapture selectedScreenCapture: screenAvailable ? screenCapture : null
    property WindowCapture selectedWindowCapture: windowAvailable ? windowCapture : null

    property bool sourceAvailable: typeof comboBox.currentValue !== 'undefined' &amp;amp;&amp;amp;
                                   comboBox.currentValue.type !== 'toggler' &amp;amp;&amp;amp;
                                   videoSourceSwitch.checked

    property bool cameraAvailable: sourceAvailable &amp;amp;&amp;amp; comboBox.currentValue.type === 'camera'
    property bool screenAvailable: sourceAvailable &amp;amp;&amp;amp; comboBox.currentValue.type === 'screen'
    property bool windowAvailable: sourceAvailable &amp;amp;&amp;amp; comboBox.currentValue.type === 'window'

    Component.onCompleted: {
        videoSourceModel.populate()

        for (var i = 0; i &amp;lt; videoSourceModel.count; i++) {
            if (videoSourceModel.get(i).value.type !== 'toggler') {
                comboBox.currentIndex = i
                break
            }
        }
    }

    Camera {
        id: camera
        active: cameraAvailable
    }

    ScreenCapture {
        id: screenCapture
        active: screenAvailable
    }

    WindowCapture {
        id: windowCapture
        active: windowAvailable
    }

    MediaDevices { id: mediaDevices
        onVideoInputsChanged: {

            videoSourceModel.populate()

            for (var i = 0; i &amp;lt; videoSourceModel.count; i++) {
                if (videoSourceModel.get(i).value.type !== 'toggler') {
                    comboBox.currentIndex = i
                    break
                }
            }
        }
    }

    Switch {
        id: videoSourceSwitch
        anchors.verticalCenter: parent.verticalCenter
        checked: true
    }

    ListModel {
        id: videoSourceModel
        property var enabledSources: {
            'camera': true,
            'screen': true,
            'window': false
        }

        function toggleEnabledSource(type) {
            enabledSources[type] = !enabledSources[type]
            populate()
        }

        function appendItem(text, value) {
            append({ text: text, value: value})
        }

        function appendToggler(name, sourceType) {
            appendItem((enabledSources[sourceType] ? &quot;- Hide &quot; : &quot;+ Show &quot;) + name,
                       { type: 'toggler', 'sourceType': sourceType })
        }

        function populate() {
            clear()

            appendToggler('Cameras', 'camera')
            if (enabledSources['camera'])
                for (var camera of mediaDevices.videoInputs)
                    appendItem(camera.description, { type: 'camera', camera: camera })

            appendToggler('Screens', 'screen')
            if (enabledSources['screen'])
                for (var screen of Application.screens)
                    appendItem(screen.name, { type: 'screen', screen: screen })

            appendToggler('Windows', 'window')
            if (enabledSources['window'])
                for (var window of windowCapture.capturableWindows())
                    appendItem(window.description, { type: 'window', window: window })
        }
    }
</db:programlisting>
<db:para><db:code>comboBox</db:code>, declared in the above snippet, assigns the current video source.</db:para>
<db:programlisting language="cpp">    ComboBox {
        id: comboBox
        width: Style.widthLong
        height: Style.height
        background: StyleRectangle { anchors.fill: parent }
        model: videoSourceModel
        displayText: typeof currentValue === 'undefined' ||
                     currentValue.type === 'toggler' ? &quot;Unavailable&quot; : currentText
        font.pointSize: Style.fontSize
        textRole: &quot;text&quot;
        valueRole: &quot;value&quot;
        onCurrentValueChanged: {
            if (typeof currentValue === 'undefined')
                return
            if (currentValue.type === 'screen')
                screenCapture.screen = currentValue.screen
            else if (currentValue.type === 'camera')
                camera.cameraDevice = currentValue.camera
</db:programlisting>
</db:section>
<db:section xml:id="selecting-an-audio-input">
<db:title>Selecting an audio input</db:title>
<db:para>Implemented in the same way as <db:link xlink:href="qtmultimedia-video-recorder-example.xml#selecting-a-video-source">Selecting a video source</db:link> and defined in <db:code>AudioInputSelect.qml</db:code> like so:</db:para>
<db:programlisting language="cpp">Row {
    id: root
    height: Style.height
    property AudioInput selected: available ? audioInput : null
    property bool available: (typeof comboBox.currentValue !== 'undefined') &amp;amp;&amp;amp; audioSwitch.checked

    Component.onCompleted: {
        audioInputModel.populate()
        comboBox.currentIndex = 0
    }

    MediaDevices { id: mediaDevices }

    AudioInput { id: audioInput; muted: !audioSwitch.checked }

    Switch {
        id: audioSwitch;
        height: Style.height;
        checked: true
    }

    ListModel {
        id: audioInputModel
        property var audioInputs: mediaDevices.audioInputs

        function populate() {
            audioInputModel.clear()

            for (var audioDevice of audioInputs)
                audioInputModel.append({ text: audioDevice.description, value:
                                        { type: 'audioDevice', audioDevice: audioDevice } })
        }
    }
    ComboBox {
        id: comboBox
        width: Style.widthLong
        height: Style.height
        background: StyleRectangle { anchors.fill: parent }
        model: audioInputModel
        textRole: &quot;text&quot;
        font.pointSize: Style.fontSize
        displayText: typeof currentValue === 'undefined' ? &quot;unavailable&quot; : currentText
        valueRole: &quot;value&quot;
</db:programlisting>
</db:section>
</db:section>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtmultimedia.git/tree/examples/multimedia/video/recorder?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
