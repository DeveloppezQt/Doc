<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Using Custom Widgets with Qt Designer</db:title>
<db:productname>QtDesigner</db:productname>
<db:edition>Qt 6.4.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Designer Manual</db:titleabbrev>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-customizing-forms.xml" xlink:type="arc" xlink:arcrole="prev" xlink:title="Customizing Qt Designer Forms"/></db:extendedlink>
<db:extendedlink xlink:type="extended"><db:link xlink:to="designer-creating-custom-widgets.xml" xlink:type="arc" xlink:arcrole="next" xlink:title="Creating Custom Widgets for Qt Designer"/></db:extendedlink>
<db:abstract>
<db:para>Qt Designer Manual.</db:para></db:abstract>
<db:pubdate>2024-01-26</db:pubdate>
<db:date>2024-01-26</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para><db:emphasis>Qt Designer</db:emphasis> can display custom widgets through its extensible plugin mechanism, allowing the range of designable widgets to be extended by the user and third parties. Alternatively, it is possible to use existing widgets as placeholders for widget classes that provide similar APIs.</db:para>
<db:section xml:id="handling-custom-widgets">
<db:title>Handling Custom Widgets</db:title>
<db:para>Although <db:emphasis>Qt Designer</db:emphasis> supports all of the standard Qt widgets, some specialized widgets may not be available as standard for a number of reasons:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Custom widgets may not be available at the time the user interface is being designed.</db:para>
</db:listitem>
<db:listitem>
<db:para>Custom widgets may be platform-specific, and designers may be developing the user interface on a different platform to end users.</db:para>
</db:listitem>
<db:listitem>
<db:para>The source code for a custom widget is not available, or the user interface designers are unable to use the widget for non-technical reasons.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In the above situations, it is still possible to design forms with the aim of using custom widgets in the application. To achieve this, we can use the widget promotion feature of <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:para>In all other cases, where the source code to the custom widgets is available, we can adapt the custom widget for use with <db:emphasis>Qt Designer</db:emphasis>.</db:para>
<db:section xml:id="promoting-widgets">
<db:title>Promoting Widgets</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/designer-promoting-widgets.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>If some forms must be designed, but certain custom widgets are unavailble to the designer, we can substitute similar widgets to represent the missing widgets. For example, we might represent instances of a custom push button class, <db:code>MyPushButton</db:code>, with instances of <db:link xlink:href="qpushbutton.xml">QPushButton</db:link> and promote these to <db:code>MyPushButton</db:code> so that <db:link xlink:href="uic.xml">uic</db:link> generates suitable code for this missing class.</db:para>
<db:para>When choosing a widget to use as a placeholder, it is useful to compare the API of the missing widget with those of standard Qt widgets. For specialized widgets that subclass standard classes, the obvious choice of placeholder is the base class of the custom widget; for example, <db:link xlink:href="qslider.xml">QSlider</db:link> might be used for specialized <db:link xlink:href="qslider.xml">QSlider</db:link> subclasses.</db:para>
<db:para>For specialized widgets that do not share a common API with standard Qt widgets, it is worth considering adapting a custom widget for use in <db:emphasis>Qt Designer</db:emphasis>. If this is not possible then <db:link xlink:href="qwidget.xml">QWidget</db:link> is the obvious choice for a placeholder widget since it is the lowest common denominator for all widgets.</db:para>
<db:para>To add a placeholder, select an object of a suitable base class and choose <db:emphasis role="bold">Promote to ...</db:emphasis> from the form's context menu. After entering the class name and header file in the lower part of the dialog, choose <db:emphasis role="bold">Add</db:emphasis>. The placeholder class will now appear along with the base class in the upper list. Click the <db:emphasis role="bold">Promote</db:emphasis> button to accept this choice.</db:para>
<db:para>Now, when the form's context menu is opened over objects of the base class, the placeholder class will appear in the <db:emphasis role="bold">Promote to</db:emphasis> submenu, allowing for convenient promotion of objects to that class.</db:para>
<db:para>A promoted widget can be reverted to its base class by choosing <db:emphasis role="bold">Demote to</db:emphasis> from the form's context menu.</db:para>
</db:section>
<db:section xml:id="user-defined-custom-widgets">
<db:title>User Defined Custom Widgets</db:title>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/worldtimeclockplugin-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>Custom widgets can be adapted for use with <db:emphasis>Qt Designer</db:emphasis>, giving designers the opportunity to configure the user interface using the actual widgets that will be used in an application rather than placeholder widgets. The process of creating a custom widget plugin is described in the <db:link xlink:href="designer-creating-custom-widgets.xml">Creating Custom Widgets for Qt Designer</db:link> chapter of this manual.</db:para>
<db:para>To use a plugin created in this way, it is necessary to ensure that the plugin is located on a path that <db:emphasis>Qt Designer</db:emphasis> searches for plugins. Generally, plugins stored in <db:code>$QTDIR/plugins/designer</db:code> will be loaded when <db:emphasis>Qt Designer</db:emphasis> starts. Further information on building and installing plugins can be found <db:link xlink:href="designer-creating-custom-widgets.xml#buildingandinstallingtheplugin">here</db:link>. You can also refer to the <db:link xlink:href="plugins-howto.xml">Plugins HOWTO</db:link> document for information about creating plugins.</db:para>
</db:section>
</db:section>
</db:article>
