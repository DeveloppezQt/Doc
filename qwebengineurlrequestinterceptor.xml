<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QWebEngineUrlRequestInterceptor Class</db:title>
<db:productname>QtWebEngine</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt WebEngine Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link> class provides an abstract base class for URL interception.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QWebEngineUrlRequestInterceptor</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS WebEngineCore)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::WebEngineCore)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += webenginecore</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Implementing the <db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link> interface and installing the interceptor on the profile enables intercepting, blocking, and modifying URL requests before they reach the networking stack of Chromium.</db:para>
<db:para>You can install the interceptor on a profile via <db:link xlink:href="qwebengineprofile.xml#setUrlRequestInterceptor">QWebEngineProfile::setUrlRequestInterceptor</db:link>() or <db:link xlink:href="qquickwebengineprofile.xml#setUrlRequestInterceptor">QQuickWebEngineProfile::setUrlRequestInterceptor</db:link>().</db:para>
<db:para>When using the <db:link xlink:href="qtwebengine-overview.xml#qt-webengine-widgets-module">Qt WebEngine Widgets Module</db:link>, <db:link xlink:href="qwebenginepage.xml#acceptNavigationRequest">QWebEnginePage::acceptNavigationRequest</db:link>() offers further options to accept or block requests.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qwebengineurlrequestinterceptor.xml#interceptRequest">interceptRequest</db:link>()</db:member>
<db:member><db:link xlink:href="qwebengineurlrequestinfo.xml">QWebEngineUrlRequestInfo</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QWebEngineUrlRequestInterceptor">
<db:title>[explicit] QWebEngineUrlRequestInterceptor::QWebEngineUrlRequestInterceptor(QObject *<db:emphasis>p</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QWebEngineUrlRequestInterceptor</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>p</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QWebEngineUrlRequestInterceptor(QObject *p)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Creates a new <db:link xlink:href="qwebengineurlrequestinterceptor.xml">QWebEngineUrlRequestInterceptor</db:link> object with <db:code role="parameter">p</db:code> as parent.</db:para>
</db:section>
<db:section xml:id="interceptRequest">
<db:title>[pure virtual] void QWebEngineUrlRequestInterceptor::interceptRequest(QWebEngineUrlRequestInfo &amp;<db:emphasis>info</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>interceptRequest</db:methodname>
<db:methodparam>
<db:type>QWebEngineUrlRequestInfo &amp;</db:type>
<db:parameter>info</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void interceptRequest(QWebEngineUrlRequestInfo &amp;info) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplementing this virtual function makes it possible to intercept URL requests. This method will be stalling the URL request until handled.</db:para>
<db:para><db:code role="parameter">info</db:code> contains the information about the URL request and will track internally whether its members have been altered.</db:para>
<db:warning>
<db:para>All method calls to the profile on the main thread will block until execution of this function is finished.</db:para>
</db:warning>
</db:section>
</db:section>
</db:article>
