<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTabletEvent Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link> class contains parameters that describe a Tablet event.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTabletEvent</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qsinglepointevent.xml" xlink:role="class">QSinglePointEvent</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTabletEvent is part of <db:simplelist><db:member>events</db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:emphasis>Tablet events</db:emphasis> are generated from tablet peripherals such as Wacom tablets and various other brands, and electromagnetic stylus devices included with some types of tablet computers. (It is not the same as <db:link xlink:href="qtouchevent.xml">QTouchEvent</db:link> which a touchscreen generates, even when a passive stylus is used on a touchscreen.)</db:para>
<db:para>Tablet events are similar to mouse events; for example, the <db:link xlink:href="qtabletevent.xml#x" role="deprecated">x</db:link>(), <db:link xlink:href="qtabletevent.xml#y" role="deprecated">y</db:link>(), <db:link xlink:href="qtabletevent.xml#pos" role="deprecated">pos</db:link>(), <db:link xlink:href="qtabletevent.xml#globalX" role="deprecated">globalX</db:link>(), <db:link xlink:href="qtabletevent.xml#globalY" role="deprecated">globalY</db:link>(), and <db:link xlink:href="qtabletevent.xml#globalPos" role="deprecated">globalPos</db:link>() accessors provide the cursor position, and you can see which <db:link xlink:href="qsinglepointevent.xml#buttons">buttons</db:link>() are pressed (pressing the stylus tip against the tablet surface is equivalent to a left mouse button). But tablet events also pass through some extra information that the tablet device driver provides; for example, you might want to do subpixel rendering with higher resolution coordinates (<db:link xlink:href="qtabletevent.xml#globalPosF" role="deprecated">globalPosF</db:link>()), adjust color brightness based on the <db:link xlink:href="qtabletevent.xml#pressure">pressure</db:link>() of the tool against the tablet surface, use different brushes depending on the type of tool in use (<db:link xlink:href="qinputevent.xml#deviceType">deviceType</db:link>()), modulate the brush shape in some way according to the X-axis and Y-axis tilt of the tool with respect to the tablet surface (<db:link xlink:href="qtabletevent.xml#xTilt">xTilt</db:link>() and <db:link xlink:href="qtabletevent.xml#yTilt">yTilt</db:link>()), and use a virtual eraser instead of a brush if the user switches to the other end of a double-ended stylus (<db:link xlink:href="qpointerevent.xml#pointerType">pointerType</db:link>()).</db:para>
<db:para>Every event contains an accept flag that indicates whether the receiver wants the event. You should call <db:link xlink:href="qevent.xml#accept">QTabletEvent::accept</db:link>() if you handle the tablet event; otherwise it will be sent to the parent widget. The exception are TabletEnterProximity and TabletLeaveProximity events: these are only sent to QApplication and do not check whether or not they are accepted.</db:para>
<db:para>The QWidget::setEnabled() function can be used to enable or disable mouse, tablet and keyboard events for a widget.</db:para>
<db:para>The event handler QWidget::tabletEvent() receives TabletPress, TabletRelease and TabletMove events. Qt will first send a tablet event, then if it is not accepted by any widget, it will send a mouse event. This allows users of applications that are not designed for tablets to use a tablet like a mouse. However high-resolution drawing applications should handle the tablet events, because they can occur at a higher frequency, which is a benefit for smooth and accurate drawing. If the tablet events are rejected, the synthetic mouse events may be compressed for efficiency.</db:para>
<db:para>Note that pressing the stylus button while the stylus hovers over the tablet will generate a button press on some types of tablets, while on other types it will be necessary to press the stylus against the tablet surface in order to register the simultaneous stylus button press.</db:para>
<db:section xml:id="notes-for-x11-users">
<db:title>Notes for X11 Users</db:title>
<db:para>If the tablet is configured in xorg.conf to use the Wacom driver, there will be separate XInput &quot;devices&quot; for the stylus, eraser, and (optionally) cursor and touchpad. Qt recognizes these by their names. Otherwise, if the tablet is configured to use the evdev driver, there will be only one device and applications may not be able to distinguish the stylus from the eraser.</db:para>
</db:section>
<db:section xml:id="notes-for-windows-users">
<db:title>Notes for Windows Users</db:title>
<db:para>Tablet support currently requires the WACOM windows driver providing the DLL <db:code>wintab32.dll</db:code> to be installed. It is contained in older packages, for example <db:code>pentablet_5.3.5-3.exe</db:code>.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTabletEvent">
<db:title>QTabletEvent::QTabletEvent(QEvent::Type <db:emphasis>type</db:emphasis>, const QPointingDevice *<db:emphasis>dev</db:emphasis>, const QPointF &amp;<db:emphasis>pos</db:emphasis>, const QPointF &amp;<db:emphasis>globalPos</db:emphasis>, qreal <db:emphasis>pressure</db:emphasis>, float <db:emphasis>xTilt</db:emphasis>, float <db:emphasis>yTilt</db:emphasis>, float <db:emphasis>tangentialPressure</db:emphasis>, qreal <db:emphasis>rotation</db:emphasis>, float <db:emphasis>z</db:emphasis>, Qt::KeyboardModifiers <db:emphasis>keyState</db:emphasis>, Qt::MouseButton <db:emphasis>button</db:emphasis>, Qt::MouseButtons <db:emphasis>buttons</db:emphasis>)</db:title>
<db:para>Construct a tablet event of the given <db:code role="parameter">type</db:code>.</db:para>
<db:para>The <db:code role="parameter">pos</db:code> parameter indicates where the event occurred in the widget; <db:code role="parameter">globalPos</db:code> is the corresponding position in absolute coordinates.</db:para>
<db:para><db:code role="parameter">pressure</db:code> gives the pressure exerted on the device <db:code role="parameter">dev</db:code>.</db:para>
<db:para><db:code role="parameter">xTilt</db:code> and <db:code role="parameter">yTilt</db:code> give the device's degree of tilt from the x and y axes respectively.</db:para>
<db:para><db:code role="parameter">keyState</db:code> specifies which keyboard modifiers are pressed (e.g., <db:guilabel>Ctrl</db:guilabel>).</db:para>
<db:para>The <db:code role="parameter">z</db:code> parameter gives the Z coordinate of the device on the tablet; this is usually given by a wheel on a 4D mouse. If the device does not support a Z-axis (i.e. <db:link xlink:href="qinputdevice.xml#capabilities">QPointingDevice::capabilities</db:link>() does not include <db:code>ZPosition</db:code>), pass <db:code>0</db:code> here.</db:para>
<db:para>The <db:code role="parameter">tangentialPressure</db:code> parameter gives the tangential pressure thumbwheel value from an airbrush. If the device does not support tangential pressure (i.e. <db:link xlink:href="qinputdevice.xml#capabilities">QPointingDevice::capabilities</db:link>() does not include <db:code>TangentialPressure</db:code>), pass <db:code>0</db:code> here.</db:para>
<db:para><db:code role="parameter">rotation</db:code> gives the device's rotation in degrees. 4D mice, the Wacom Art Pen, and the Apple Pencil support rotation. If the device does not support rotation (i.e. <db:link xlink:href="qinputdevice.xml#capabilities">QPointingDevice::capabilities</db:link>() does not include <db:code>Rotation</db:code>), pass <db:code>0</db:code> here.</db:para>
<db:para>The <db:code role="parameter">button</db:code> that caused the event is given as a value from the <db:link xlink:href="qt.xml#MouseButton-enum">Qt::MouseButton</db:link> enum. If the event <db:code role="parameter">type</db:code> is not <db:link xlink:href="qevent.xml#Type-enum">TabletPress</db:link> or <db:link xlink:href="qevent.xml#Type-enum">TabletRelease</db:link>, the appropriate button for this event is <db:link xlink:href="qt.xml#MouseButton-enum">Qt::NoButton</db:link>.</db:para>
<db:para><db:code role="parameter">buttons</db:code> is the state of all buttons at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#pos" role="deprecated">pos</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#globalPos" role="deprecated">globalPos</db:link>()</db:member>
<db:member><db:link xlink:href="qinputevent.xml#device">device</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#pressure">pressure</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#xTilt">xTilt</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#yTilt">yTilt</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#uniqueId" role="deprecated">uniqueId</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#rotation">rotation</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#tangentialPressure">tangentialPressure</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#z">z</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pressure">
<db:title>qreal QTabletEvent::pressure() const</db:title>
<db:para>Returns the pressure for the device. 0.0 indicates that the stylus is not on the tablet, 1.0 indicates the maximum amount of pressure for the stylus.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#tangentialPressure">tangentialPressure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rotation">
<db:title>qreal QTabletEvent::rotation() const</db:title>
<db:para>Returns the rotation of the current tool in degrees, where zero means the tip of the stylus is pointing towards the top of the tablet, a positive value means it's turned to the right, and a negative value means it's turned to the left. This can be given by a 4D Mouse or a rotation-capable stylus (such as the Wacom Art Pen or the Apple Pencil). If the device does not support rotation, this value is always 0.0.</db:para>
</db:section>
<db:section xml:id="tangentialPressure">
<db:title>qreal QTabletEvent::tangentialPressure() const</db:title>
<db:para>Returns the tangential pressure for the device. This is typically given by a finger wheel on an airbrush tool. The range is from -1.0 to 1.0. 0.0 indicates a neutral position. Current airbrushes can only move in the positive direction from the neutrual position. If the device does not support tangential pressure, this value is always 0.0.</db:para>
<db:note>
<db:para>The value is stored as a single-precision float.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#pressure">pressure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="xTilt">
<db:title>qreal QTabletEvent::xTilt() const</db:title>
<db:para>Returns the angle between the device (a pen, for example) and the perpendicular in the direction of the x axis. Positive values are towards the tablet's physical right. The angle is in the range -60 to +60 degrees.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtabletevent-tilt.png"/>
</db:imageobject>
</db:mediaobject>
<db:note>
<db:para>The value is stored as a single-precision float.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#yTilt">yTilt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="yTilt">
<db:title>qreal QTabletEvent::yTilt() const</db:title>
<db:para>Returns the angle between the device (a pen, for example) and the perpendicular in the direction of the y axis. Positive values are towards the bottom of the tablet. The angle is within the range -60 to +60 degrees.</db:para>
<db:note>
<db:para>The value is stored as a single-precision float.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#xTilt">xTilt</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="z">
<db:title>qreal QTabletEvent::z() const</db:title>
<db:para>Returns the z position of the device. Typically this is represented by a wheel on a 4D Mouse. If the device does not support a Z-axis, this value is always zero. This is <db:emphasis role="bold">not</db:emphasis> the same as pressure.</db:para>
<db:note>
<db:para>The value is stored as a single-precision float.</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#pressure">pressure</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="obsolete">
<db:title>Obsolete Members for QTabletEvent</db:title>
<db:para><db:emphasis role="bold">The following members of class <db:link xlink:href="qtabletevent.xml">QTabletEvent</db:link> are deprecated.</db:emphasis> We strongly advise against using them in new code.</db:para>
<db:section xml:id="obsolete-member-function-documentation">
<db:title>Obsolete Member Function Documentation</db:title>
<db:section xml:id="globalPos">
<db:title>[deprecated in 6.0] QPoint QTabletEvent::globalPos() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().toPoint() instead.</db:para>
<db:para>Returns the global position of the device <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous windows systems like X11; whenever you move your widgets around in response to mouse events, globalPos() can differ significantly from the current position <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#globalY">globalY</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalPosF">
<db:title>[deprecated in 6.0] const QPointF QTabletEvent::globalPosF() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>() instead. Returns the global position of the device <db:emphasis>at the time of the event</db:emphasis>. This is important on asynchronous windows systems like X11; whenever you move your widgets around in response to mouse events, globalPosF() can differ significantly from the current position <db:link xlink:href="qcursor.xml#pos">QCursor::pos</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#posF">posF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalX">
<db:title>[deprecated in 6.0] int QTabletEvent::globalX() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().<db:link xlink:href="qtabletevent.xml#x">x</db:link>() instead.</db:para>
<db:para>Returns the global x position of the mouse pointer at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#globalY">globalY</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="globalY">
<db:title>[deprecated in 6.0] int QTabletEvent::globalY() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#globalPosition">globalPosition</db:link>().<db:link xlink:href="qtabletevent.xml#y">y</db:link>() instead.</db:para>
<db:para>Returns the global y position of the tablet device at the time of the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#globalX">globalX</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="pos">
<db:title>[deprecated in 6.0] QPoint QTabletEvent::pos() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>().toPoint() instead.</db:para>
<db:para>Returns the position of the device, relative to the widget that received the event.</db:para>
<db:para>If you move widgets around in response to mouse events, use <db:link xlink:href="qtabletevent.xml#globalPos">globalPos</db:link>() instead of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#globalPos">globalPos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="posF">
<db:title>[deprecated in 6.0] const QPointF QTabletEvent::posF() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>() instead.</db:para>
<db:para>Returns the position of the device, relative to the widget that received the event.</db:para>
<db:para>If you move widgets around in response to mouse events, use <db:link xlink:href="qtabletevent.xml#globalPosF">globalPosF</db:link>() instead of this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#globalPosF">globalPosF</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uniqueId">
<db:title>[deprecated in 6.0] qint64 QTabletEvent::uniqueId() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qpointerevent.xml#pointingDevice">pointingDevice</db:link>().uniqueId() instead.</db:para>
<db:para>Returns a unique ID for the current device, making it possible to differentiate between multiple devices being used at the same time on the tablet.</db:para>
<db:para>Support of this feature is dependent on the tablet.</db:para>
<db:para>Values for the same device may vary from OS to OS.</db:para>
<db:para>Later versions of the Wacom driver for Linux will now report the ID information. If you have a tablet that supports unique ID and are not getting the information on Linux, consider upgrading your driver.</db:para>
<db:para>As of Qt 4.2, the unique ID is the same regardless of the orientation of the pen. Earlier versions would report a different value when using the eraser-end versus the pen-end of the stylus on some OS's.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qpointerevent.xml#pointerType">pointerType</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="x">
<db:title>[deprecated in 6.0] int QTabletEvent::x() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>().x() instead.</db:para>
<db:para>Returns the x position of the device, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#y">y</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="y">
<db:title>[deprecated in 6.0] int QTabletEvent::y() const</db:title>
<db:para>This function is deprecated since 6.0. We strongly advise against using it in new code.</db:para>
<db:para>Use <db:link xlink:href="qsinglepointevent.xml#position">position</db:link>().y() instead.</db:para>
<db:para>Returns the y position of the device, relative to the widget that received the event.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtabletevent.xml#x">x</db:link>()</db:member>
<db:member><db:link xlink:href="qtabletevent.xml#pos">pos</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:section>
</db:article>
