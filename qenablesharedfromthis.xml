<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QEnableSharedFromThis Class</db:title>
<db:subtitle>template &lt;typename T&gt; class QEnableSharedFromThis</db:subtitle>
<db:productname>QtCore</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Core Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A base class that allows obtaining a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> for an object already managed by a shared pointer.</db:para>
<db:para>This class was introduced in Qt 5.4.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QEnableSharedFromThis</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += core</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>You can inherit this class when you need to create a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> from any instance of a class; for instance, from within the object itself. The key point is that the technique of just returning <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>&lt;T&gt;(this) cannot be used, because this winds up creating multiple distinct <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> objects with separate reference counts. For this reason you must never create more than one <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link> from the same raw pointer.</db:para>
<db:para><db:link xlink:href="qenablesharedfromthis.xml">QEnableSharedFromThis</db:link> defines two member functions called <db:link xlink:href="qenablesharedfromthis.xml#sharedFromThis">sharedFromThis</db:link>() that return a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>&lt;T&gt; and <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>&lt;const T&gt;, depending on constness, to this:</db:para>
<db:programlisting language="cpp">    class Y: public QEnableSharedFromThis&amp;lt;Y&amp;gt;
    {
    public:
        QSharedPointer&amp;lt;Y&amp;gt; f()
        {
            return sharedFromThis();
        }
    };

    int main()
    {
        QSharedPointer&amp;lt;Y&amp;gt; p(new Y());
        QSharedPointer&amp;lt;Y&amp;gt; y = p-&amp;gt;f();
        Q_ASSERT(p == y); // p and q must share ownership
    }
</db:programlisting>
<db:para>It is also possible to get a shared pointer from an object outside of the class itself. This is especially useful in code that provides an interface to scripts, where it is currently not possible to use shared pointers. For example:</db:para>
<db:programlisting language="cpp">    class ScriptInterface : public QObject
    {
        Q_OBJECT

        // ...

    public slots:
        void slotCalledByScript(Y *managedBySharedPointer)
        {
            QSharedPointer&amp;lt;Y&amp;gt; yPtr = managedBySharedPointer-&amp;gt;sharedFromThis();
            // Some other code unrelated to scripts that expects a QSharedPointer&amp;lt;Y&amp;gt; ...
        }
    };
</db:programlisting>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="sharedFromThis">
<db:title>[since 5.4] QSharedPointer&lt;T&gt; QEnableSharedFromThis::sharedFromThis()</db:title>
<db:methodsynopsis>
<db:type>QSharedPointer&lt;T&gt;</db:type>
<db:methodname>sharedFromThis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;T&gt; sharedFromThis()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>If this (that is, the subclass instance invoking this method) is being managed by a <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>, returns a shared pointer instance pointing to this; otherwise returns a null <db:link xlink:href="qsharedpointer.xml">QSharedPointer</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
<db:section xml:id="sharedFromThis-1">
<db:title>[since 5.4] QSharedPointer&lt;const T&gt; QEnableSharedFromThis::sharedFromThis() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QSharedPointer&lt;const T&gt;</db:type>
<db:methodname>sharedFromThis</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="overload">overload</db:synopsisinfo>
<db:synopsisinfo role="overload-number">1</db:synopsisinfo>
<db:synopsisinfo role="signature">QSharedPointer&lt;const T&gt; sharedFromThis() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This is an overloaded function.</db:para>
<db:para>Const overload of <db:link xlink:href="qenablesharedfromthis.xml#sharedFromThis">sharedFromThis</db:link>().</db:para>
<db:para>This function was introduced in Qt 5.4.</db:para>
</db:section>
</db:section>
</db:article>
