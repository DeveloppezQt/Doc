<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQuickTextureFactory Class</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.1.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qquicktexturefactory.xml">QQuickTextureFactory</db:link> class provides an interface for loading custom textures from QML.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQuickTextureFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Quick)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Quick)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += quick</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qobject.xml" xlink:role="class">QObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The purpose of the texture factory is to provide a placeholder for a image data that can be converted into an OpenGL texture.</db:para>
<db:para>Creating a texture directly is not possible as there is rarely an OpenGL context available in the thread that is responsible for loading the image data.</db:para>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QQuickTextureFactory">
<db:title>QQuickTextureFactory::QQuickTextureFactory()</db:title>
<db:constructorsynopsis>
<db:methodname>QQuickTextureFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickTextureFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a texture factory. Since <db:link xlink:href="qquicktexturefactory.xml">QQuickTextureFactory</db:link> is abstract, it cannot be instantiated directly.</db:para>
</db:section>
<db:section xml:id="dtor.QQuickTextureFactory">
<db:title>[override virtual] QQuickTextureFactory::~QQuickTextureFactory()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQuickTextureFactory</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQuickTextureFactory() override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the texture factory.</db:para>
</db:section>
<db:section xml:id="createTexture">
<db:title>[pure virtual] QSGTexture *QQuickTextureFactory::createTexture(QQuickWindow *<db:emphasis>window</db:emphasis>) const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSGTexture *</db:type>
<db:methodname>createTexture</db:methodname>
<db:methodparam>
<db:type>QQuickWindow *</db:type>
<db:parameter>window</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSGTexture * createTexture(QQuickWindow *window) const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>This function is called on the scene graph rendering thread to create a <db:link xlink:href="qsgtexture.xml">QSGTexture</db:link> instance from the factory. <db:code role="parameter">window</db:code> provides the context which this texture is created in.</db:para>
<db:para>QML will internally cache the returned texture as needed. Each call to this function should return a unique instance.</db:para>
<db:para>The OpenGL context used for rendering is bound when this function is called.</db:para>
</db:section>
<db:section xml:id="image">
<db:title>[virtual] QImage QQuickTextureFactory::image() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QImage</db:type>
<db:methodname>image</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QImage image() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns an image version of this texture.</db:para>
<db:para>The lifespan of the returned image is unknown, so the implementation should return a self contained <db:link xlink:href="qimage.xml">QImage</db:link>, not make use of the <db:link xlink:href="qimage.xml">QImage</db:link>(uchar *, ...) constructor.</db:para>
<db:para>This function is not commonly used and is expected to be slow.</db:para>
</db:section>
<db:section xml:id="textureByteCount">
<db:title>[pure virtual] int QQuickTextureFactory::textureByteCount() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>textureByteCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int textureByteCount() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of bytes of memory the texture consumes.</db:para>
</db:section>
<db:section xml:id="textureFactoryForImage">
<db:title>[static, since 5.6] QQuickTextureFactory *QQuickTextureFactory::textureFactoryForImage(const QImage &amp;<db:emphasis>image</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>static</db:modifier>
<db:type>QQuickTextureFactory *</db:type>
<db:methodname>textureFactoryForImage</db:methodname>
<db:methodparam>
<db:type>const QImage &amp;</db:type>
<db:parameter>image</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QQuickTextureFactory * textureFactoryForImage(const QImage &amp;image)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a <db:link xlink:href="qquicktexturefactory.xml">QQuickTextureFactory</db:link> holding the given <db:code role="parameter">image</db:code>.</db:para>
<db:para>This is typically used as a helper in <db:link xlink:href="qquickimageresponse.xml#textureFactory">QQuickImageResponse::textureFactory</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.6.</db:para>
</db:section>
<db:section xml:id="textureSize">
<db:title>[pure virtual] QSize QQuickTextureFactory::textureSize() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QSize</db:type>
<db:methodname>textureSize</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QSize textureSize() const = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the size of the texture. This function will be called from arbitrary threads and should not rely on an OpenGL context bound.</db:para>
</db:section>
</db:section>
</db:article>
