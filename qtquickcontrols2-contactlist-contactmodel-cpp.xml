<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Controls 2 - Contact List</db:title>
<db:productname>QtQuickControls2</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Controls 2 Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>A QML app using Qt Quick Controls 2 and a C++ class that implements a simple contact list.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:programlisting language="cpp">/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the examples of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:BSD$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** BSD License Usage
** Alternatively, you may use this file under the terms of the BSD license
** as follows:
**
** &quot;Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of The Qt Company Ltd nor the names of its
**     contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&quot;
**
** $QT_END_LICENSE$
**
****************************************************************************/

#include &quot;contactmodel.h&quot;

ContactModel::ContactModel(QObject *parent ) : QAbstractListModel(parent)
{
    m_contacts.append({ &quot;Angel Hogan&quot;, &quot;Chapel St. 368 &quot;, &quot;Clearwater&quot; , &quot;0311 1823993&quot; });
    m_contacts.append({ &quot;Felicia Patton&quot;, &quot;Annadale Lane 2&quot;, &quot;Knoxville&quot; , &quot;0368 1244494&quot; });
    m_contacts.append({ &quot;Grant Crawford&quot;, &quot;Windsor Drive 34&quot;, &quot;Riverdale&quot; , &quot;0351 7826892&quot; });
    m_contacts.append({ &quot;Gretchen Little&quot;, &quot;Sunset Drive 348&quot;, &quot;Virginia Beach&quot; , &quot;0343 1234991&quot; });
    m_contacts.append({ &quot;Geoffrey Richards&quot;, &quot;University Lane 54&quot;, &quot;Trussville&quot; , &quot;0423 2144944&quot; });
    m_contacts.append({ &quot;Henrietta Chavez&quot;, &quot;Via Volto San Luca 3&quot;, &quot;Piobesi Torinese&quot; , &quot;0399 2826994&quot; });
    m_contacts.append({ &quot;Harvey Chandler&quot;, &quot;North Squaw Creek 11&quot;, &quot;Madisonville&quot; , &quot;0343 1244492&quot; });
    m_contacts.append({ &quot;Miguel Gomez&quot;, &quot;Wild Rose Street 13&quot;, &quot;Trussville&quot; , &quot;0343 9826996&quot; });
    m_contacts.append({ &quot;Norma Rodriguez&quot;, &quot; Glen Eagles Street  53&quot;, &quot;Buffalo&quot; , &quot;0241 5826596&quot; });
    m_contacts.append({ &quot;Shelia Ramirez&quot;, &quot;East Miller Ave 68&quot;, &quot;Pickerington&quot; , &quot;0346 4844556&quot; });
    m_contacts.append({ &quot;Stephanie Moss&quot;, &quot;Piazza Trieste e Trento 77&quot;, &quot;Roata Chiusani&quot; , &quot;0363 0510490&quot; });
}

int ContactModel::rowCount(const QModelIndex &amp;) const
{
    return m_contacts.count();
}

QVariant ContactModel::data(const QModelIndex &amp;index, int role) const
{
    if (index.row() &lt; rowCount())
        switch (role) {
        case FullNameRole: return m_contacts.at(index.row()).fullName;
        case AddressRole: return m_contacts.at(index.row()).address;
        case CityRole: return m_contacts.at(index.row()).city;
        case NumberRole: return m_contacts.at(index.row()).number;
        default: return QVariant();
    }
    return QVariant();
}

QHash&lt;int, QByteArray&gt; ContactModel::roleNames() const
{
    static const QHash&lt;int, QByteArray&gt; roles {
        { FullNameRole, &quot;fullName&quot; },
        { AddressRole, &quot;address&quot; },
        { CityRole, &quot;city&quot; },
        { NumberRole, &quot;number&quot; }
    };
    return roles;
}

QVariantMap ContactModel::get(int row) const
{
    const Contact contact = m_contacts.value(row);
    return { {&quot;fullName&quot;, contact.fullName}, {&quot;address&quot;, contact.address}, {&quot;city&quot;, contact.city}, {&quot;number&quot;, contact.number} };
}

void ContactModel::append(const QString &amp;fullName, const QString &amp;address, const QString &amp;city, const QString &amp;number)
{
    int row = 0;
    while (row &lt; m_contacts.count() &amp;&amp; fullName &gt; m_contacts.at(row).fullName)
        ++row;
    beginInsertRows(QModelIndex(), row, row);
    m_contacts.insert(row, {fullName, address, city, number});
    endInsertRows();
}

void ContactModel::set(int row, const QString &amp;fullName, const QString &amp;address, const QString &amp;city, const QString &amp;number)
{
    if (row &lt; 0 || row &gt;= m_contacts.count())
        return;

    m_contacts.replace(row, { fullName, address, city, number });
    dataChanged(index(row, 0), index(row, 0), { FullNameRole, AddressRole, CityRole, NumberRole });
}

void ContactModel::remove(int row)
{
    if (row &lt; 0 || row &gt;= m_contacts.count())
        return;

    beginRemoveRows(QModelIndex(), row, row);
    m_contacts.removeAt(row);
    endRemoveRows();
}

</db:programlisting>
</db:article>
