<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Responding To User Input in QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 5.8.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to accept user input and respond to it in a QML application.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="supported-types-of-user-input">
<db:title>Supported Types of User Input</db:title>
<db:para>The <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module provides support for the most common types of user input, including mouse and touch events, text input and key-press events. Other modules provide support for other types of user input (for example, the <db:link xlink:href="qtsensors-index.xml">Qt Sensors</db:link> module provides support for shake-gestures in QML applications).</db:para>
<db:para>This article covers how to handle basic user input; for further information about motion-gesture support, please see the <db:link xlink:href="qtsensors-index.xml">Qt Sensors</db:link> documentation. For information about audio-visual input, please see the <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link> documentation.</db:para>
<db:section xml:id="mouse-and-touch-events">
<db:title>Mouse and Touch Events</db:title>
<db:para>The <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type allows mouse and touch events to be handled in a QML application. A <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> can be combined with either an <db:link xlink:href="09-qdoc-commands-includingimages.xml">Image</db:link> or a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> and <db:link xlink:href="whatsnew50.xml#text">Text</db:link> object to implement a simple button.</db:para>
<db:programlisting language="qml">import QtQuick 2.3

Item {
    id: root

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        id: rectangle
        x: 40
        y: 20
        width: 120
        height: 120
        color: &quot;red&quot;

        MouseArea {
            anchors.fill: parent
            onClicked: rectangle.width += 10
        }
    }
}
</db:programlisting>
<db:para>For more advanced use cases requiring multiple touch points, please read the documentation for the <db:link xlink:href="qml-qtquick-multipointtoucharea.xml">MultiPointTouchArea</db:link> type and the <db:link xlink:href="qml-qtquick-pincharea.xml">PinchArea</db:link> type.</db:para>
<db:para>Note that some types have their own built in input handling. For example, <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> responds to mouse dragging, mouse wheel scrolling, touch dragging, and touch flicking by default.</db:para>
</db:section>
<db:section xml:id="keyboard-and-button-events">
<db:title>Keyboard and Button Events</db:title>
<db:para>Button and key presses, from buttons on a device, a keypad, or a keyboard, can all be handled using the <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> attached property. This attached property is available on all <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> derived types, and works with the <db:link xlink:href="qml-qtquick-item.xml#focus-prop">Item::focus</db:link> property to determine which type receives the key event. For simple key handling, you can set the focus to true on a single <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> and do all your key handling there.</db:para>
<db:programlisting language="qml">import QtQuick 2.3

Item {
    id: root

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        id: rectangle
        x: 40
        y: 20
        width: 120
        height: 120
        color: &quot;red&quot;

        focus: true
        Keys.onUpPressed: rectangle.y -= 10
        Keys.onDownPressed: rectangle.y += 10
        Keys.onLeftPressed: rectangle.x += 10
        Keys.onRightPressed: rectangle.x -= 10
    }
}
</db:programlisting>
<db:para>For text input the <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module provides several built-in types. In particular, the <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> and <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> types allow for single-line entry and multi-line editing respectively.</db:para>
<db:para>Here is all you need to get a working <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link>:</db:para>
<db:programlisting language="cpp">import QtQuick 2.3

TextInput {
    focus: true
    text: &quot;Initial Text&quot;
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
