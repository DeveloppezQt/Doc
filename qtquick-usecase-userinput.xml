<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Use Case - Responding To User Input in QML</db:title>
<db:productname>QtDoc</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Example of how to accept user input and respond to it in a QML application.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="supported-types-of-user-input">
<db:title>Supported types of user input</db:title>
<db:para>The <db:link xlink:href="qtquick-index.xml">Qt Quick</db:link> module provides support for the most common types of user input, including mouse and touch events, text input, and key-press events. Other modules provide support for other types of user input.</db:para>
<db:para>This article covers how to handle basic user input. For information about audio-visual input, see the <db:link xlink:href="qtmultimedia-index.xml">Qt Multimedia</db:link> documentation.</db:para>
<db:section xml:id="mouse-and-touch-events">
<db:title>Mouse and touch events</db:title>
<db:para>The <db:link xlink:href="qtquickhandlers-index.xml#input-handlers">input handlers</db:link> let QML applications handle mouse and touch events. For example, you could create a button by adding a <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> to an Image, or to a <db:link xlink:href="qml-qtquick-rectangle.xml">Rectangle</db:link> with a <db:link xlink:href="qml-qtquick-text.xml">Text</db:link> object inside. The <db:link xlink:href="qml-qtquick-taphandler.xml">TapHandler</db:link> responds to taps or clicks on any type of pointing device.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        id: rectangle
        x: 40
        y: 20
        width: 120
        height: 120
        color: &quot;red&quot;

        TapHandler {
            onTapped: rectangle.width += 10
        }
    }
}
</db:programlisting>
<db:note>
<db:para>Some Item types have their own built-in input handling. For example, <db:link xlink:href="qml-qtquick-flickable.xml">Flickable</db:link> responds to mouse dragging, touch flicking, and mouse wheel scrolling.</db:para>
</db:note>
</db:section>
<db:section xml:id="keyboard-and-button-events">
<db:title>Keyboard and button events</db:title>
<db:para>Button and key presses, from buttons on a device, a keypad, or a keyboard, can all be handled using the <db:link xlink:href="qml-qtquick-keys.xml">Keys</db:link> attached property. This attached property is available on all <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> derived types, and works with the <db:link xlink:href="qml-qtquick-item.xml#focus-prop">Item::focus</db:link> property to determine which type receives the key event. For simple key handling, you can set the focus to true on a single <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> and do all your key handling there.</db:para>
<db:programlisting language="qml">import QtQuick

Item {
    id: root

    width: 320
    height: 480

    Rectangle {
        color: &quot;#272822&quot;
        width: 320
        height: 480
    }

    Rectangle {
        id: rectangle
        x: 40
        y: 20
        width: 120
        height: 120
        color: &quot;red&quot;

        focus: true
        Keys.onUpPressed: rectangle.y -= 10
        Keys.onDownPressed: rectangle.y += 10
        Keys.onLeftPressed: rectangle.x += 10
        Keys.onRightPressed: rectangle.x -= 10
    }
}
</db:programlisting>
<db:para>For text input, we have several QML types to choose from. <db:link xlink:href="qml-qtquick-textinput.xml">TextInput</db:link> provides an unstyled single-line editable text, while <db:link xlink:href="qml-qtquick-controls-textfield.xml">TextField</db:link> is more suitable for form fields in applications. <db:link xlink:href="qml-qtquick-textedit.xml">TextEdit</db:link> can handle multi-line editable text, but <db:link xlink:href="qml-qtquick-controls-textarea.xml">TextArea</db:link> is a better alternative as it adds styling.</db:para>
<db:para>The following snippet demonstrates how to use these types in your application:</db:para>
<db:programlisting language="qml">import QtQuick
import QtQuick.Controls
import QtQuick.Layouts

ApplicationWindow {
    width: 300
    height: 200
    visible: true

    ColumnLayout {
        anchors.fill: parent
        TextField {
            id: singleline
            text: &quot;Initial Text&quot;
            Layout.alignment: Qt.AlignHCenter | Qt.AlignTop
            Layout.margins: 5
            background: Rectangle {
               implicitWidth: 200
               implicitHeight: 40
               border.color: singleline.focus ? &quot;#21be2b&quot; : &quot;lightgray&quot;
               color: singleline.focus ? &quot;lightgray&quot; : &quot;transparent&quot;
            }
        }

        TextArea {
            id: multiline
            placeholderText: &quot;Initial text\n...\n...\n&quot;
            Layout.alignment: Qt.AlignLeft
            Layout.fillWidth: true
            Layout.fillHeight: true
            Layout.margins: 5
            background: Rectangle {
               implicitWidth: 200
               implicitHeight: 100
               border.color: multiline.focus ? &quot;#21be2b&quot; : &quot;lightgray&quot;
               color: multiline.focus ? &quot;lightgray&quot; : &quot;transparent&quot;
            }
        }
    }
}
</db:programlisting>
</db:section>
</db:section>
</db:article>
