<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QRegularExpressionValidator Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 5.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link> class is used to check a string against a regular expression.</db:para>
<db:para>This class was introduced in Qt 5.1.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QRegularExpressionValidator</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.1</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qvalidator.xml" xlink:role="class">QValidator</db:link></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para><db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link> uses a regular expression (regexp) to determine whether an input string is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, or <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>. The regexp can either be supplied when the <db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link> is constructed, or at a later time.</db:para>
<db:para>If the regexp partially matches against the string, the result is considered <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>. For example, &quot;&quot; and &quot;A&quot; are <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> for the regexp <db:emphasis role="bold">[A-Z][0-9]</db:emphasis> (whereas &quot;_&quot; would be <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>).</db:para>
<db:para><db:link xlink:href="qregularexpressionvalidator.xml">QRegularExpressionValidator</db:link> automatically wraps the regular expression in the <db:code>\\A</db:code> and <db:code>\\z</db:code> anchors; in other words, it always attempts to do an exact match.</db:para>
<db:para>Example of use:</db:para>
<db:programlisting language="cpp">// regexp: optional '-' followed by between 1 and 3 digits
QRegularExpression rx(&quot;-?\\d{1,3}&quot;);
QValidator *validator = new QRegularExpressionValidator(rx, this);

QLineEdit *edit = new QLineEdit(this);
edit-&gt;setValidator(validator);
</db:programlisting>
<db:para>Below we present some examples of validators. In practice they would normally be associated with a widget as in the example above.</db:para>
<db:programlisting language="cpp">// integers 1 to 9999
QRegularExpression re(&quot;[1-9]\\d{0,3}&quot;);
// the validator treats the regexp as &quot;^[1-9]\\d{0,3}$&quot;
QRegularExpressionValidator v(re, 0);
QString s;
int pos = 0;

s = &quot;0&quot;;     v.validate(s, pos);    // returns Invalid
s = &quot;12345&quot;; v.validate(s, pos);    // returns Invalid
s = &quot;1&quot;;     v.validate(s, pos);    // returns Acceptable

re.setPattern(&quot;\\S+&quot;);            // one or more non-whitespace characters
v.setRegularExpression(re);
s = &quot;myfile.txt&quot;;  v.validate(s, pos); // Returns Acceptable
s = &quot;my file.txt&quot;; v.validate(s, pos); // Returns Invalid

// A, B or C followed by exactly five digits followed by W, X, Y or Z
re.setPattern(&quot;[A-C]\\d{5}[W-Z]&quot;);
v.setRegularExpression(re);
s = &quot;a12345Z&quot;; v.validate(s, pos);        // Returns Invalid
s = &quot;A12345Z&quot;; v.validate(s, pos);        // Returns Acceptable
s = &quot;B12&quot;;     v.validate(s, pos);        // Returns Intermediate

// match most 'readme' files
re.setPattern(&quot;read\\S?me(\.(txt|asc|1st))?&quot;);
re.setPatternOptions(QRegularExpression::CaseInsensitiveOption);
v.setRegularExpression(re);
s = &quot;readme&quot;;      v.validate(s, pos); // Returns Acceptable
s = &quot;README.1ST&quot;;  v.validate(s, pos); // Returns Acceptable
s = &quot;read me.txt&quot;; v.validate(s, pos); // Returns Invalid
s = &quot;readm&quot;;       v.validate(s, pos); // Returns Intermediate
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml">QRegularExpression</db:link></db:member>
<db:member><db:link xlink:href="qintvalidator.xml">QIntValidator</db:link></db:member>
<db:member><db:link xlink:href="qdoublevalidator.xml">QDoubleValidator</db:link></db:member>
<db:member><db:link xlink:href="qregexpvalidator.xml">QRegExpValidator</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QRegularExpressionValidator">
<db:title>[explicit] QRegularExpressionValidator::QRegularExpressionValidator(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code> object that accepts any string (including an empty one) as valid.</db:para>
</db:section>
<db:section xml:id="QRegularExpressionValidator-1">
<db:title>[explicit] QRegularExpressionValidator::QRegularExpressionValidator(const QRegularExpression &amp;<db:emphasis>re</db:emphasis>, QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Constructs a validator with a <db:code role="parameter">parent</db:code> object that accepts all strings that match the regular expression <db:code role="parameter">re</db:code>.</db:para>
</db:section>
<db:section xml:id="dtor.QRegularExpressionValidator">
<db:title>[virtual noexcept] QRegularExpressionValidator::~QRegularExpressionValidator()</db:title>
<db:para>Destroys the validator.</db:para>
</db:section>
<db:section xml:id="validate">
<db:title>[override virtual] QValidator::State QRegularExpressionValidator::validate(QString &amp;<db:emphasis>input</db:emphasis>, int &amp;<db:emphasis>pos</db:emphasis>) const</db:title>
<db:para>Reimplements: <db:link xlink:href="qvalidator.xml#validate" role="function">QValidator::validate(QString &amp;input, int &amp;pos) const</db:link>.</db:para>
<db:para>Returns <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link> if <db:code role="parameter">input</db:code> is matched by the regular expression for this validator, <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link> if it has matched partially (i.e. could be a valid match if additional valid characters are added), and <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link> if <db:code role="parameter">input</db:code> is not matched.</db:para>
<db:para>In case the <db:code role="parameter">input</db:code> is not matched, the <db:code role="parameter">pos</db:code> parameter is set to the length of the <db:code role="parameter">input</db:code> parameter; otherwise, it is not modified.</db:para>
<db:para>For example, if the regular expression is <db:emphasis role="bold">\w\d\d</db:emphasis> (word-character, digit, digit) then &quot;A57&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Acceptable</db:link>, &quot;E5&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Intermediate</db:link>, and &quot;+9&quot; is <db:link xlink:href="qvalidator.xml#State-enum">Invalid</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qregularexpression.xml#match">QRegularExpression::match</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
