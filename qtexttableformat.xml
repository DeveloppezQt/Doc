<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QTextTableFormat Class</db:title>
<db:productname>QtGui</db:productname>
<db:edition>Qt 6.3.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt GUI Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qtexttableformat.xml">QTextTableFormat</db:link> class provides formatting information for tables in a <db:link xlink:href="qtextdocument.xml">QTextDocument</db:link>.</db:para>
<db:note>
<db:para>All functions in this class are reentrant.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QTextTableFormat</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Gui)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Gui)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += gui</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qtextframeformat.xml" xlink:role="class">QTextFrameFormat</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QTextTableFormat is part of <db:simplelist><db:member><db:link xlink:href="richtext-processing.xml">Rich Text Processing APIs</db:link></db:member><db:member>shared</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A table is a group of cells ordered into rows and columns. Each table contains at least one row and one column. Each cell contains a block. Tables in rich text documents are formatted using the properties defined in this class.</db:para>
<db:para>Tables are horizontally justified within their parent frame according to the table's alignment. This can be read with the <db:link xlink:href="qtexttableformat.xml#alignment">alignment</db:link>() function and set with <db:link xlink:href="qtexttableformat.xml#setAlignment">setAlignment</db:link>().</db:para>
<db:para>Cells within the table are separated by cell spacing. The number of pixels between cells is set with <db:link xlink:href="qtexttableformat.xml#setCellSpacing">setCellSpacing</db:link>() and read with <db:link xlink:href="qtexttableformat.xml#cellSpacing">cellSpacing</db:link>(). The contents of each cell is surrounded by cell padding. The number of pixels between each cell edge and its contents is set with <db:link xlink:href="qtexttableformat.xml#setCellPadding">setCellPadding</db:link>() and read with <db:link xlink:href="qtexttableformat.xml#cellPadding">cellPadding</db:link>().</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qtexttableformat-cell.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>The table's background color can be read with the <db:link xlink:href="qtextformat.xml#background">background</db:link>() function, and can be specified with <db:link xlink:href="qtextformat.xml#setBackground">setBackground</db:link>(). The background color of each cell can be set independently, and will control the color of the cell within the padded area.</db:para>
<db:para>The table format also provides a way to constrain the widths of the columns in the table. Columns can be assigned a fixed width, a variable width, or a percentage of the available width (see <db:link xlink:href="qtextlength.xml">QTextLength</db:link>). The <db:link xlink:href="qtexttableformat.xml#columns">columns</db:link>() function returns the number of columns with constraints, and the <db:link xlink:href="qtexttableformat.xml#columnWidthConstraints">columnWidthConstraints</db:link>() function returns the constraints defined for the table. These quantities can also be set by calling <db:link xlink:href="qtexttableformat.xml#setColumnWidthConstraints">setColumnWidthConstraints</db:link>() with a list containing new constraints. If no constraints are required, <db:link xlink:href="qtexttableformat.xml#clearColumnWidthConstraints">clearColumnWidthConstraints</db:link>() can be used to remove them.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttable.xml">QTextTable</db:link></db:member>
<db:member><db:link xlink:href="qtexttablecell.xml">QTextTableCell</db:link></db:member>
<db:member><db:link xlink:href="qtextlength.xml">QTextLength</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QTextTableFormat">
<db:title>QTextTableFormat::QTextTableFormat()</db:title>
<db:constructorsynopsis>
<db:methodname>QTextTableFormat</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QTextTableFormat()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a new table format object.</db:para>
</db:section>
<db:section xml:id="alignment">
<db:title>Qt::Alignment QTextTableFormat::alignment() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>Qt::Alignment</db:type>
<db:methodname>alignment</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">Qt::Alignment alignment() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the table's alignment.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setAlignment">setAlignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="borderCollapse">
<db:title>[since 5.14] bool QTextTableFormat::borderCollapse() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>borderCollapse</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool borderCollapse() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns true if borderCollapse is enabled.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setBorderCollapse">setBorderCollapse</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cellPadding">
<db:title>qreal QTextTableFormat::cellPadding() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>cellPadding</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal cellPadding() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the table's cell padding. This describes the distance between the border of a cell and its contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setCellPadding">setCellPadding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="cellSpacing">
<db:title>qreal QTextTableFormat::cellSpacing() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>qreal</db:type>
<db:methodname>cellSpacing</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">qreal cellSpacing() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the table's cell spacing. This describes the distance between adjacent cells.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setCellSpacing">setCellSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="clearColumnWidthConstraints">
<db:title>void QTextTableFormat::clearColumnWidthConstraints()</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>clearColumnWidthConstraints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void clearColumnWidthConstraints()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Clears the column width constraints for the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#columnWidthConstraints">columnWidthConstraints</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttableformat.xml#setColumnWidthConstraints">setColumnWidthConstraints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columnWidthConstraints">
<db:title>QList&lt;QTextLength&gt; QTextTableFormat::columnWidthConstraints() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>QList&lt;QTextLength&gt;</db:type>
<db:methodname>columnWidthConstraints</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QList&lt;QTextLength&gt; columnWidthConstraints() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns a list of constraints used by this table format to control the appearance of columns in a table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setColumnWidthConstraints">setColumnWidthConstraints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="columns">
<db:title>int QTextTableFormat::columns() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>columns</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int columns() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of columns specified by the table format.</db:para>
</db:section>
<db:section xml:id="headerRowCount">
<db:title>int QTextTableFormat::headerRowCount() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>headerRowCount</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int headerRowCount() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns the number of rows in the table that define the header.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#setHeaderRowCount">setHeaderRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QTextTableFormat::isValid() const</db:title>
<db:methodsynopsis>
<db:modifier>const</db:modifier>
<db:type>bool</db:type>
<db:methodname>isValid</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">bool isValid() const</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Returns <db:code>true</db:code> if this table format is valid; otherwise returns <db:code>false</db:code>.</db:para>
</db:section>
<db:section xml:id="setAlignment">
<db:title>void QTextTableFormat::setAlignment(Qt::Alignment <db:emphasis>alignment</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setAlignment</db:methodname>
<db:methodparam>
<db:type>Qt::Alignment</db:type>
<db:parameter>alignment</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setAlignment(Qt::Alignment alignment)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the table's <db:code role="parameter">alignment</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#alignment">alignment</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setBorderCollapse">
<db:title>[since 5.14] void QTextTableFormat::setBorderCollapse(bool <db:emphasis>borderCollapse</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setBorderCollapse</db:methodname>
<db:methodparam>
<db:type>bool</db:type>
<db:parameter>borderCollapse</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setBorderCollapse(bool borderCollapse)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Enabling <db:code role="parameter">borderCollapse</db:code> will have the following implications:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The borders and grid of the table will be rendered following the CSS table <db:code>border-collapse</db:code>: <db:code>collapse</db:code> rules</db:para>
</db:listitem>
<db:listitem>
<db:para>Setting the <db:code>border</db:code> property to a minimum value of <db:code>1</db:code> will render a one pixel solid inner table grid using the <db:link xlink:href="qtextframeformat.xml#borderBrush">borderBrush</db:link> property and an outer border as specified</db:para>
</db:listitem>
<db:listitem>
<db:para>The various border style properties of <db:link xlink:href="qtexttablecellformat.xml">QTextTableCellFormat</db:link> can be used to customize the grid and have precedence over the border and grid of the table</db:para>
</db:listitem>
<db:listitem>
<db:para>The <db:link xlink:href="qtexttableformat.xml#cellSpacing">cellSpacing</db:link> property will be ignored</db:para>
</db:listitem>
<db:listitem>
<db:para>For print pagination:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Columns continued on a page will not have their top cell border rendered</db:para>
</db:listitem>
<db:listitem>
<db:para>Repeated header rows will always have their bottom cell border rendered</db:para>
</db:listitem>
</db:itemizedlist>
</db:listitem>
</db:itemizedlist>
<db:para>With <db:link xlink:href="qtexttableformat.xml#borderCollapse">borderCollapse</db:link> disabled, cell borders can still be styled using <db:link xlink:href="qtexttablecellformat.xml">QTextTableCellFormat</db:link> but styling will be applied only within the cell's frame, which is probably not very useful in practice.</db:para>
<db:para>This function was introduced in Qt 5.14.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#borderCollapse">borderCollapse</db:link>()</db:member>
<db:member><db:link xlink:href="qtextframeformat.xml#setBorder">setBorder</db:link>()</db:member>
<db:member><db:link xlink:href="qtextframeformat.xml#setBorderBrush">setBorderBrush</db:link>()</db:member>
<db:member><db:link xlink:href="qtextframeformat.xml#setBorderStyle">setBorderStyle</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttablecellformat.xml">QTextTableCellFormat</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCellPadding">
<db:title>void QTextTableFormat::setCellPadding(qreal <db:emphasis>padding</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCellPadding</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>padding</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCellPadding(qreal padding)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cell <db:code role="parameter">padding</db:code> for the table. This determines the distance between the border of a cell and its contents.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#cellPadding">cellPadding</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setCellSpacing">
<db:title>void QTextTableFormat::setCellSpacing(qreal <db:emphasis>spacing</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setCellSpacing</db:methodname>
<db:methodparam>
<db:type>qreal</db:type>
<db:parameter>spacing</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setCellSpacing(qreal spacing)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the cell <db:code role="parameter">spacing</db:code> for the table. This determines the distance between adjacent cells.</db:para>
<db:para>This property will be ignored if <db:link xlink:href="qtexttableformat.xml#borderCollapse">borderCollapse</db:link> is enabled.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#cellSpacing">cellSpacing</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setColumnWidthConstraints">
<db:title>void QTextTableFormat::setColumnWidthConstraints(const QList&lt;QTextLength&gt; &amp;<db:emphasis>constraints</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setColumnWidthConstraints</db:methodname>
<db:methodparam>
<db:type>const QList&lt;QTextLength&gt; &amp;</db:type>
<db:parameter>constraints</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setColumnWidthConstraints(const QList&lt;QTextLength&gt; &amp;constraints)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Sets the column width <db:code role="parameter">constraints</db:code> for the table.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#columnWidthConstraints">columnWidthConstraints</db:link>()</db:member>
<db:member><db:link xlink:href="qtexttableformat.xml#clearColumnWidthConstraints">clearColumnWidthConstraints</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeaderRowCount">
<db:title>void QTextTableFormat::setHeaderRowCount(int <db:emphasis>count</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:void/>
<db:methodname>setHeaderRowCount</db:methodname>
<db:methodparam>
<db:type>int</db:type>
<db:parameter>count</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void setHeaderRowCount(int count)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Declares the first <db:code role="parameter">count</db:code> rows of the table as table header. The table header rows get repeated when a table is broken across a page boundary.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtexttableformat.xml#headerRowCount">headerRowCount</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
