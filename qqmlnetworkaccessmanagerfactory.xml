<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QQmlNetworkAccessManagerFactory Class</db:title>
<db:productname>QtQml</db:productname>
<db:edition>Qt 5.15.0 Reference Documentation</db:edition>
<db:titleabbrev>Qt QML Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml">QQmlNetworkAccessManagerFactory</db:link> class creates <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instances for a QML engine.</db:para>
<db:para>This class was introduced in Qt 5.0.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QQmlNetworkAccessManagerFactory</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 5.0</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += qml</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A QML engine uses <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> for all network access. By implementing a factory, it is possible to provide the QML engine with custom <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instances with specialized caching, proxy and cookies support.</db:para>
<db:para>To implement a factory, subclass <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml">QQmlNetworkAccessManagerFactory</db:link> and implement the virtual <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml#create">create</db:link>() method, then assign it to the relevant QML engine using <db:link xlink:href="qqmlengine.xml#setNetworkAccessManagerFactory">QQmlEngine::setNetworkAccessManagerFactory</db:link>().</db:para>
<db:para>Note the QML engine may create <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instances from multiple threads. Because of this, the implementation of the <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml#create">create</db:link>() method must be <db:link xlink:href="qrandomgenerator.xml#reentrancy-and-thread-safety">reentrant</db:link>. In addition, the developer should be careful if the signals of the object to be returned from <db:link xlink:href="qqmlnetworkaccessmanagerfactory.xml#create">create</db:link>() are connected to the slots of an object that may be created in a different thread:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The QML engine internally handles all requests, and cleans up any <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> objects it creates. Receiving the <db:link xlink:href="qnetworkaccessmanager.xml#finished">QNetworkAccessManager::finished</db:link>() signal in another thread may not provide the receiver with a valid reply object if it has already been deleted.</db:para>
</db:listitem>
<db:listitem>
<db:para>Authentication details provided to <db:link xlink:href="qnetworkaccessmanager.xml#authenticationRequired">QNetworkAccessManager::authenticationRequired</db:link>() must be provided immediately, so this signal cannot be connected as a <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::QueuedConnection</db:link> (or as the default <db:link xlink:href="qt.xml#ConnectionType-enum">Qt::AutoConnection</db:link> from another thread).</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>For more information about signals and threads, see <db:link xlink:href="threads-qobject.xml">Threads and QObjects</db:link> and <db:link xlink:href="threads-qobject.xml#signals-and-slots-across-threads">Signals and Slots Across Threads</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qtqml-networkaccessmanagerfactory-example.xml">Network Access Manager Factory Example</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="dtor.QQmlNetworkAccessManagerFactory">
<db:title>[virtual] QQmlNetworkAccessManagerFactory::~QQmlNetworkAccessManagerFactory()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QQmlNetworkAccessManagerFactory</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QQmlNetworkAccessManagerFactory()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys the factory. The default implementation does nothing.</db:para>
</db:section>
<db:section xml:id="create">
<db:title>[pure virtual] QNetworkAccessManager *QQmlNetworkAccessManagerFactory::create(QObject *<db:emphasis>parent</db:emphasis>)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:type>QNetworkAccessManager *</db:type>
<db:methodname>create</db:methodname>
<db:methodparam>
<db:type>QObject *</db:type>
<db:parameter>parent</db:parameter>
</db:methodparam>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QNetworkAccessManager * create(QObject *parent) = 0</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Creates and returns a network access manager with the specified <db:code role="parameter">parent</db:code>. This method must return a new <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> instance each time it is called.</db:para>
<db:para>Note: this method may be called by multiple threads, so ensure the implementation of this method is reentrant.</db:para>
</db:section>
</db:section>
</db:article>
