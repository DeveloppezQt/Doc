<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en_US">
<db:info>
<db:title>QNetworkReply Class</db:title>
<db:productname>QtNetwork</db:productname>
<db:titleabbrev>Qt Network Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> class contains the data and headers for a request sent with <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:para>This class was introduced in Qt 4.4.</db:para>
<db:note>
<db:para>All functions in this class are <db:link xlink:href="threads-reentrancy.xml">reentrant</db:link>.</db:para>
</db:note>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QNetworkReply</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Since</db:term>
<db:listitem>
<db:para>Qt 4.4</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qiodevice.xml" xlink:role="class">QIODevice</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherited By</db:term>
<db:listitem>
<db:para/>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QNetworkReply is part of <db:simplelist><db:member><db:link xlink:href="network.xml">Network Programming API</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>The <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> class contains the data and meta data related to a request posted with <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>. Like <db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link>, it contains a URL and headers (both in parsed and raw form), some information about the reply's state and the contents of the reply itself.</db:para>
<db:para><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> is a sequential-access <db:link xlink:href="qiodevice.xml">QIODevice</db:link>, which means that once data is read from the object, it no longer kept by the device. It is therefore the application's responsibility to keep this data if it needs to. Whenever more data is received from the network and processed, the <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>() signal is emitted.</db:para>
<db:para>The <db:link xlink:href="qnetworkreply.xml#downloadProgress">downloadProgress</db:link>() signal is also emitted when data is received, but the number of bytes contained in it may not represent the actual bytes received, if any transformation is done to the contents (for example, decompressing and removing the protocol overhead).</db:para>
<db:para>Even though <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> is a <db:link xlink:href="qiodevice.xml">QIODevice</db:link> connected to the contents of the reply, it also emits the <db:link xlink:href="qnetworkreply.xml#uploadProgress">uploadProgress</db:link>() signal, which indicates the progress of the upload for operations that have such content.</db:para>
<db:note>
<db:para>Do not delete the object in the slot connected to the <db:link xlink:href="qnetworkreply.xml#error">error</db:link>() or <db:link xlink:href="qnetworkreply.xml#finished">finished</db:link>() signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml">QNetworkRequest</db:link></db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="NetworkError-enum">
<db:title>enum QNetworkReply::NetworkError</db:title>
<db:para>Indicates all possible error conditions found during the processing of the request.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>no error condition.</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:note>
<db:para>When the HTTP protocol returns a redirect no error will be reported. You can check if there is a redirect with the <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::RedirectionTargetAttribute</db:link> attribute.</db:para>
</db:note>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ConnectionRefusedError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>the remote server refused the connection (the server is not accepting requests)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::RemoteHostClosedError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>the remote server closed the connection prematurely, before the entire reply was received and processed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::HostNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>the remote host name was not found (invalid hostname)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::TimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>the connection to the remote server timed out</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::OperationCanceledError</db:code></db:para>
</db:td>
<db:td><db:code>5</db:code></db:td>
<db:td>
<db:para>the operation was canceled via calls to <db:link xlink:href="qnetworkreply.xml#abort">abort</db:link>() or <db:link xlink:href="qnetworkreply.xml#close">close</db:link>() before it was finished.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::SslHandshakeFailedError</db:code></db:para>
</db:td>
<db:td><db:code>6</db:code></db:td>
<db:td>
<db:para>the SSL/TLS handshake failed and the encrypted channel could not be established. The <db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>() signal should have been emitted.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::TemporaryNetworkFailureError</db:code></db:para>
</db:td>
<db:td><db:code>7</db:code></db:td>
<db:td>
<db:para>the connection was broken due to disconnection from the network, however the system has initiated roaming to another access point. The request should be resubmitted and will be processed as soon as the connection is re-established.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::NetworkSessionFailedError</db:code></db:para>
</db:td>
<db:td><db:code>8</db:code></db:td>
<db:td>
<db:para>the connection was broken due to disconnection from the network or failure to start the network.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::BackgroundRequestNotAllowedError</db:code></db:para>
</db:td>
<db:td><db:code>9</db:code></db:td>
<db:td>
<db:para>the background request is not currently allowed due to platform policy.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProxyConnectionRefusedError</db:code></db:para>
</db:td>
<db:td><db:code>101</db:code></db:td>
<db:td>
<db:para>the connection to the proxy server was refused (the proxy server is not accepting requests)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProxyConnectionClosedError</db:code></db:para>
</db:td>
<db:td><db:code>102</db:code></db:td>
<db:td>
<db:para>the proxy server closed the connection prematurely, before the entire reply was received and processed</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProxyNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>103</db:code></db:td>
<db:td>
<db:para>the proxy host name was not found (invalid proxy hostname)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProxyTimeoutError</db:code></db:para>
</db:td>
<db:td><db:code>104</db:code></db:td>
<db:td>
<db:para>the connection to the proxy timed out or the proxy did not reply in time to the request sent</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProxyAuthenticationRequiredError</db:code></db:para>
</db:td>
<db:td><db:code>105</db:code></db:td>
<db:td>
<db:para>the proxy requires authentication in order to honour the request but did not accept any credentials offered (if any)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ContentAccessDenied</db:code></db:para>
</db:td>
<db:td><db:code>201</db:code></db:td>
<db:td>
<db:para>the access to the remote content was denied (similar to HTTP error 401)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ContentOperationNotPermittedError</db:code></db:para>
</db:td>
<db:td><db:code>202</db:code></db:td>
<db:td>
<db:para>the operation requested on the remote content is not permitted</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ContentNotFoundError</db:code></db:para>
</db:td>
<db:td><db:code>203</db:code></db:td>
<db:td>
<db:para>the remote content was not found at the server (similar to HTTP error 404)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::AuthenticationRequiredError</db:code></db:para>
</db:td>
<db:td><db:code>204</db:code></db:td>
<db:td>
<db:para>the remote server requires authentication to serve the content but the credentials provided were not accepted (if any)</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ContentReSendError</db:code></db:para>
</db:td>
<db:td><db:code>205</db:code></db:td>
<db:td>
<db:para>the request needed to be sent again, but this failed for example because the upload data could not be read a second time.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProtocolUnknownError</db:code></db:para>
</db:td>
<db:td><db:code>301</db:code></db:td>
<db:td>
<db:para>the Network Access API cannot honor the request because the protocol is not known</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProtocolInvalidOperationError</db:code></db:para>
</db:td>
<db:td><db:code>302</db:code></db:td>
<db:td>
<db:para>the requested operation is invalid for this protocol</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::UnknownNetworkError</db:code></db:para>
</db:td>
<db:td><db:code>99</db:code></db:td>
<db:td>
<db:para>an unknown network-related error was detected</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::UnknownProxyError</db:code></db:para>
</db:td>
<db:td><db:code>199</db:code></db:td>
<db:td>
<db:para>an unknown proxy-related error was detected</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::UnknownContentError</db:code></db:para>
</db:td>
<db:td><db:code>299</db:code></db:td>
<db:td>
<db:para>an unknown error related to the remote content was detected</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link></db:emphasis>::ProtocolFailure</db:code></db:para>
</db:td>
<db:td><db:code>399</db:code></db:td>
<db:td>
<db:para>a breakdown in protocol was detected (parsing error, invalid or unexpected responses, etc.)</db:para>
</db:td>
</db:tr>
</db:informaltable>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#error">error</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="RawHeaderPair-typedef">
<db:title>QNetworkReply::RawHeaderPair</db:title>
<db:para>RawHeaderPair is a <db:link xlink:href="qpair.xml">QPair</db:link>&lt;<db:link xlink:href="qbytearray.xml">QByteArray</db:link>, <db:link xlink:href="qbytearray.xml">QByteArray</db:link>&gt; where the first <db:link xlink:href="qbytearray.xml">QByteArray</db:link> is the header name and the second is the header.</db:para>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QNetworkReply">
<db:title>[explicit protected] QNetworkReply::QNetworkReply(QObject *<db:emphasis>parent</db:emphasis> = 0)</db:title>
<db:para>Creates a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object with parent <db:code role="parameter">parent</db:code>.</db:para>
<db:para>You cannot directly instantiate <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> objects. Use <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> functions to do that.</db:para>
</db:section>
<db:section xml:id="dtor.QNetworkReply">
<db:title>[virtual noexcept] QNetworkReply::~QNetworkReply()</db:title>
<db:para>Disposes of this reply and frees any resources associated with it. If any network connections are still open, they will be closed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#abort">abort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="abort">
<db:title>[pure virtual] void QNetworkReply::abort()</db:title>
<db:para>Aborts the operation immediately and close down any network connections still open. Uploads still in progress are also aborted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#close">close</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="attribute">
<db:title>QVariant QNetworkReply::attribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>) const</db:title>
<db:para>Returns the attribute associated with the code <db:code role="parameter">code</db:code>. If the attribute has not been set, it returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link> (type QMetaType::Unknown).</db:para>
<db:para>You can expect the default values listed in <db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link> to be applied to the values returned by this function.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setAttribute">setAttribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#Attribute-enum">QNetworkRequest::Attribute</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="close">
<db:title>[override virtual] void QNetworkReply::close()</db:title>
<db:para>Reimplements: <db:link xlink:href="qiodevice.xml#close" role="function">QIODevice::close()</db:link>.</db:para>
<db:para>Closes this device for reading. Unread data is discarded, but the network resources are not discarded until they are finished. In particular, if any upload is in progress, it will continue until it is done.</db:para>
<db:para>The <db:link xlink:href="qnetworkreply.xml#finished">finished</db:link>() signal is emitted when all operations are over and the network resources are freed.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#abort">abort</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#finished">finished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="downloadProgress">
<db:title>void QNetworkReply::downloadProgress(qint64 <db:emphasis>bytesReceived</db:emphasis>, qint64 <db:emphasis>bytesTotal</db:emphasis>)</db:title>
<db:para>This signal is emitted to indicate the progress of the download part of this network request, if there's any. If there's no download associated with this request, this signal will be emitted once with 0 as the value of both <db:code role="parameter">bytesReceived</db:code> and <db:code role="parameter">bytesTotal</db:code>.</db:para>
<db:para>The <db:code role="parameter">bytesReceived</db:code> parameter indicates the number of bytes received, while <db:code role="parameter">bytesTotal</db:code> indicates the total number of bytes expected to be downloaded. If the number of bytes to be downloaded is not known, <db:code role="parameter">bytesTotal</db:code> will be -1.</db:para>
<db:para>The download is finished when <db:code role="parameter">bytesReceived</db:code> is equal to <db:code role="parameter">bytesTotal</db:code>. At that time, <db:code role="parameter">bytesTotal</db:code> will not be -1.</db:para>
<db:para>Note that the values of both <db:code role="parameter">bytesReceived</db:code> and <db:code role="parameter">bytesTotal</db:code> may be different from <db:link xlink:href="qiodevice.xml#size">size</db:link>(), the total number of bytes obtained through <db:link xlink:href="qiodevice.xml#read">read</db:link>() or <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(), or the value of the header(ContentLengthHeader). The reason for that is that there may be protocol overhead or the data may be compressed during the download.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#uploadProgress">uploadProgress</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#bytesAvailable">bytesAvailable</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="encrypted">
<db:title>[since 5.1] void QNetworkReply::encrypted()</db:title>
<db:para>This signal is emitted when an SSL/TLS session has successfully completed the initial handshake. At this point, no user data has been transmitted. The signal can be used to perform additional checks on the certificate chain, for example to notify users when the certificate for a website has changed. If the reply does not match the expected criteria then it should be aborted by calling <db:link xlink:href="qnetworkreply.xml#abort">QNetworkReply::abort</db:link>() by a slot connected to this signal. The SSL configuration in use can be inspected using the <db:link xlink:href="qnetworkreply.xml#sslConfiguration">QNetworkReply::sslConfiguration</db:link>() method.</db:para>
<db:para>Internally, <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> may open multiple connections to a server, in order to allow it process requests in parallel. These connections may be reused, which means that the encrypted() signal would not be emitted. This means that you are only guaranteed to receive this signal for the first connection to a site in the lifespan of the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link>.</db:para>
<db:para>This function was introduced in Qt 5.1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml#encrypted">QSslSocket::encrypted</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#encrypted">QNetworkAccessManager::encrypted</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error">
<db:title>QNetworkReply::NetworkError QNetworkReply::error() const</db:title>
<db:para>Returns the error that was found during the processing of this request. If no error was found, returns <db:link xlink:href="qnetworkreply.xml#NetworkError-enum">NoError</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setError">setError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="error-1">
<db:title>void QNetworkReply::error(QNetworkReply::NetworkError <db:emphasis>code</db:emphasis>)</db:title>
<db:para>This signal is emitted when the reply detects an error in processing. The <db:link xlink:href="qnetworkreply.xml#finished">finished</db:link>() signal will probably follow, indicating that the connection is over.</db:para>
<db:para>The <db:code role="parameter">code</db:code> parameter contains the code of the error that was detected. Call <db:link xlink:href="qiodevice.xml#errorString">errorString</db:link>() to obtain a textual representation of the error condition.</db:para>
<db:note>
<db:para>Do not delete the object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:note>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="finished">
<db:title>void QNetworkReply::finished()</db:title>
<db:para>This signal is emitted when the reply has finished processing. After this signal is emitted, there will be no more updates to the reply's data or metadata.</db:para>
<db:para>Unless <db:link xlink:href="qnetworkreply.xml#close">close</db:link>() has been called, the reply will be still be opened for reading, so the data can be retrieved by calls to <db:link xlink:href="qiodevice.xml#read">read</db:link>() or <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>(). In particular, if no calls to <db:link xlink:href="qiodevice.xml#read">read</db:link>() were made as a result of <db:link xlink:href="qiodevice.xml#readyRead">readyRead</db:link>(), a call to <db:link xlink:href="qiodevice.xml#readAll">readAll</db:link>() will retrieve the full contents in a <db:link xlink:href="qbytearray.xml">QByteArray</db:link>.</db:para>
<db:para>This signal is emitted in tandem with <db:link xlink:href="qnetworkaccessmanager.xml#finished">QNetworkAccessManager::finished</db:link>() where that signal's reply parameter is this object.</db:para>
<db:note>
<db:para>Do not delete the object in the slot connected to this signal. Use <db:link xlink:href="qobject.xml#deleteLater">deleteLater</db:link>().</db:para>
</db:note>
<db:para>You can also use <db:link xlink:href="qnetworkreply.xml#isFinished">isFinished</db:link>() to check if a <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> has finished even before you receive the finished() signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setFinished">setFinished</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#finished">QNetworkAccessManager::finished</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#isFinished">isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="hasRawHeader">
<db:title>bool QNetworkReply::hasRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:para>Returns true if the raw header of name <db:code role="parameter">headerName</db:code> was sent by the remote server</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#rawHeader">rawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="header">
<db:title>QVariant QNetworkReply::header(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>) const</db:title>
<db:para>Returns the value of the known header <db:code role="parameter">header</db:code>, if that header was sent by the remote server. If the header was not sent, returns an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#header">QNetworkRequest::header</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignoreSslErrors">
<db:title>[virtual] void QNetworkReply::ignoreSslErrors()</db:title>
<db:para>If this function is called, SSL errors related to network connection will be ignored, including certificate validation errors.</db:para>
<db:warning>
<db:para>Be sure to always let the user inspect the errors reported by the <db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>() signal, and only call this method upon confirmation from the user that proceeding is ok. If there are unexpected errors, the reply should be aborted. Calling this method without inspecting the actual errors will most likely pose a security risk for your application. Use it with great care!</db:para>
</db:warning>
<db:para>This function can be called from the slot connected to the <db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>() signal, which indicates which errors were found.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#ignoreSslErrors">QSslSocket::ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignoreSslErrors-1">
<db:title>[since 4.6] void QNetworkReply::ignoreSslErrors(const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para>This is an overloaded function.</db:para>
<db:para>If this function is called, the SSL errors given in <db:code role="parameter">errors</db:code> will be ignored.</db:para>
<db:para>Note that you can set the expected certificate in the SSL error: If, for instance, you want to issue a request to a server that uses a self-signed certificate, consider the following snippet:</db:para>
<db:programlisting language="cpp">QList&lt;QSslCertificate&gt; cert = QSslCertificate::fromPath(QLatin1String(&quot;server-certificate.pem&quot;));
QSslError error(QSslError::SelfSignedCertificate, cert.at(0));
QList&lt;QSslError&gt; expectedSslErrors;
expectedSslErrors.append(error);

QNetworkReply *reply = manager.get(QNetworkRequest(QUrl(&quot;https://server.tld/index.html&quot;)));
reply-&gt;ignoreSslErrors(expectedSslErrors);
// here connect signals etc.
</db:programlisting>
<db:para>Multiple calls to this function will replace the list of errors that were passed in previous calls. You can clear the list of errors you want to ignore by calling this function with an empty list.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qsslsocket.xml#ignoreSslErrors">QSslSocket::ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="ignoreSslErrorsImplementation">
<db:title>[virtual protected, since 5.0] void QNetworkReply::ignoreSslErrorsImplementation(const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para>This virtual method is provided to enable overriding the behavior of <db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>(). <db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>() is a public wrapper for this method. <db:code role="parameter">errors</db:code> contains the errors the user wishes ignored.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isFinished">
<db:title>[since 4.6] bool QNetworkReply::isFinished() const</db:title>
<db:para>Returns true when the reply has finished or was aborted.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#isRunning">isRunning</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isRunning">
<db:title>[since 4.6] bool QNetworkReply::isRunning() const</db:title>
<db:para>Returns true when the request is still processing and the reply has not finished or was aborted yet.</db:para>
<db:para>This function was introduced in Qt 4.6.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#isFinished">isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="manager">
<db:title>QNetworkAccessManager *QNetworkReply::manager() const</db:title>
<db:para>Returns the <db:link xlink:href="qnetworkaccessmanager.xml">QNetworkAccessManager</db:link> that was used to create this <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> object. Initially, it is also the parent object.</db:para>
</db:section>
<db:section xml:id="metaDataChanged">
<db:title>void QNetworkReply::metaDataChanged()</db:title>
<db:para>This signal is emitted whenever the metadata in this reply changes. metadata is any information that is not the content (data) itself, including the network headers. In the majority of cases, the metadata will be known fully by the time the first byte of data is received. However, it is possible to receive updates of headers or other metadata during the processing of the data.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#rawHeaderList">rawHeaderList</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="operation">
<db:title>QNetworkAccessManager::Operation QNetworkReply::operation() const</db:title>
<db:para>Returns the operation that was posted for this reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setOperation">setOperation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeader">
<db:title>QByteArray QNetworkReply::rawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>) const</db:title>
<db:para>Returns the raw contents of the header <db:code role="parameter">headerName</db:code> as sent by the remote server. If there is no such header, returns an empty byte array, which may be indistinguishable from an empty header. Use <db:link xlink:href="qnetworkreply.xml#hasRawHeader">hasRawHeader</db:link>() to verify if the server sent such header field.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setRawHeader">setRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#hasRawHeader">hasRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#header">header</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="rawHeaderList">
<db:title>QList&lt;QByteArray&gt; QNetworkReply::rawHeaderList() const</db:title>
<db:para>Returns a list of headers fields that were sent by the remote server, in the order that they were sent. Duplicate headers are merged together and take place of the latter duplicate.</db:para>
</db:section>
<db:section xml:id="rawHeaderPairs">
<db:title>const QList&lt;QNetworkReply::RawHeaderPair&gt; &amp;QNetworkReply::rawHeaderPairs() const</db:title>
<db:para>Returns a list of raw header pairs.</db:para>
</db:section>
<db:section xml:id="readBufferSize">
<db:title>qint64 QNetworkReply::readBufferSize() const</db:title>
<db:para>Returns the size of the read buffer, in bytes.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setReadBufferSize">setReadBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="request">
<db:title>QNetworkRequest QNetworkReply::request() const</db:title>
<db:para>Returns the request that was posted for this reply. In special, note that the URL for the request may be different than that of the reply.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkrequest.xml#url">QNetworkRequest::url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setRequest">setRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setAttribute">
<db:title>[protected] void QNetworkReply::setAttribute(QNetworkRequest::Attribute <db:emphasis>code</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the attribute <db:code role="parameter">code</db:code> to have value <db:code role="parameter">value</db:code>. If <db:code role="parameter">code</db:code> was previously set, it will be overridden. If <db:code role="parameter">value</db:code> is an invalid <db:link xlink:href="qvariant.xml">QVariant</db:link>, the attribute will be unset.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#attribute">attribute</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setAttribute">QNetworkRequest::setAttribute</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setError">
<db:title>[protected] void QNetworkReply::setError(QNetworkReply::NetworkError <db:emphasis>errorCode</db:emphasis>, const QString &amp;<db:emphasis>errorString</db:emphasis>)</db:title>
<db:para>Sets the error condition to be <db:code role="parameter">errorCode</db:code>. The human-readable message is set with <db:code role="parameter">errorString</db:code>.</db:para>
<db:para>Calling setError() does not emit the error(<db:link xlink:href="qnetworkreply.xml#NetworkError-enum">QNetworkReply::NetworkError</db:link>) signal.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#error">error</db:link>()</db:member>
<db:member><db:link xlink:href="qiodevice.xml#errorString">errorString</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setFinished">
<db:title>[protected, since 4.8] void QNetworkReply::setFinished(bool <db:emphasis>finished</db:emphasis>)</db:title>
<db:para>Sets the reply as <db:code role="parameter">finished</db:code>.</db:para>
<db:para>After having this set the replies data must not change.</db:para>
<db:para>This function was introduced in Qt 4.8.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#finished">finished</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#isFinished">isFinished</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setHeader">
<db:title>[protected] void QNetworkReply::setHeader(QNetworkRequest::KnownHeaders <db:emphasis>header</db:emphasis>, const QVariant &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the known header <db:code role="parameter">header</db:code> to be of value <db:code role="parameter">value</db:code>. The corresponding raw form of the header will be set as well.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setRawHeader">setRawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setHeader">QNetworkRequest::setHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setOperation">
<db:title>[protected] void QNetworkReply::setOperation(QNetworkAccessManager::Operation <db:emphasis>operation</db:emphasis>)</db:title>
<db:para>Sets the associated operation for this object to be <db:code role="parameter">operation</db:code>. This value will be returned by <db:link xlink:href="qnetworkreply.xml#operation">operation</db:link>().</db:para>
<db:para>Note: the operation should be set when this object is created and not changed again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#operation">operation</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setRequest">setRequest</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRawHeader">
<db:title>[protected] void QNetworkReply::setRawHeader(const QByteArray &amp;<db:emphasis>headerName</db:emphasis>, const QByteArray &amp;<db:emphasis>value</db:emphasis>)</db:title>
<db:para>Sets the raw header <db:code role="parameter">headerName</db:code> to be of value <db:code role="parameter">value</db:code>. If <db:code role="parameter">headerName</db:code> was previously set, it is overridden. Multiple HTTP headers of the same name are functionally equivalent to one single header with the values concatenated, separated by commas.</db:para>
<db:para>If <db:code role="parameter">headerName</db:code> matches a known header, the value <db:code role="parameter">value</db:code> will be parsed and the corresponding parsed form will also be set.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#rawHeader">rawHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#header">header</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setHeader">setHeader</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#setRawHeader">QNetworkRequest::setRawHeader</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setReadBufferSize">
<db:title>[virtual] void QNetworkReply::setReadBufferSize(qint64 <db:emphasis>size</db:emphasis>)</db:title>
<db:para>Sets the size of the read buffer to be <db:code role="parameter">size</db:code> bytes. The read buffer is the buffer that holds data that is being downloaded off the network, before it is read with <db:link xlink:href="qiodevice.xml#read">QIODevice::read</db:link>(). Setting the buffer size to 0 will make the buffer unlimited in size.</db:para>
<db:para><db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> will try to stop reading from the network once this buffer is full (i.e., <db:link xlink:href="qiodevice.xml#bytesAvailable">bytesAvailable</db:link>() returns <db:code role="parameter">size</db:code> or more), thus causing the download to throttle down as well. If the buffer is not limited in size, <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> will try to download as fast as possible from the network.</db:para>
<db:para>Unlike <db:link xlink:href="qabstractsocket.xml#setReadBufferSize">QAbstractSocket::setReadBufferSize</db:link>(), <db:link xlink:href="qnetworkreply.xml">QNetworkReply</db:link> cannot guarantee precision in the read buffer size. That is, <db:link xlink:href="qiodevice.xml#bytesAvailable">bytesAvailable</db:link>() can return more than <db:code role="parameter">size</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#readBufferSize">readBufferSize</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setRequest">
<db:title>[protected] void QNetworkReply::setRequest(const QNetworkRequest &amp;<db:emphasis>request</db:emphasis>)</db:title>
<db:para>Sets the associated request for this object to be <db:code role="parameter">request</db:code>. This value will be returned by <db:link xlink:href="qnetworkreply.xml#request">request</db:link>().</db:para>
<db:para>Note: the request should be set when this object is created and not changed again.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#request">request</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setOperation">setOperation</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfiguration">
<db:title>void QNetworkReply::setSslConfiguration(const QSslConfiguration &amp;<db:emphasis>config</db:emphasis>)</db:title>
<db:para>Sets the SSL configuration for the network connection associated with this request, if possible, to be that of <db:code role="parameter">config</db:code>.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setSslConfigurationImplementation">
<db:title>[virtual protected, since 5.0] void QNetworkReply::setSslConfigurationImplementation(const QSslConfiguration &amp;<db:emphasis>configuration</db:emphasis>)</db:title>
<db:para>This virtual method is provided to enable overriding the behavior of <db:link xlink:href="qnetworkreply.xml#setSslConfiguration">setSslConfiguration</db:link>(). <db:link xlink:href="qnetworkreply.xml#setSslConfiguration">setSslConfiguration</db:link>() is a public wrapper for this method. If you override this method use <db:code role="parameter">configuration</db:code> to set the SSL configuration.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfigurationImplementation">sslConfigurationImplementation</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="setUrl">
<db:title>[protected] void QNetworkReply::setUrl(const QUrl &amp;<db:emphasis>url</db:emphasis>)</db:title>
<db:para>Sets the URL being processed to be <db:code role="parameter">url</db:code>. Normally, the URL matches that of the request that was posted, but for a variety of reasons it can be different (for example, a file path being made absolute or canonical).</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#url">url</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#request">request</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#url">QNetworkRequest::url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfiguration">
<db:title>QSslConfiguration QNetworkReply::sslConfiguration() const</db:title>
<db:para>Returns the SSL configuration and state associated with this reply, if SSL was used. It will contain the remote server's certificate, its certificate chain leading to the Certificate Authority as well as the encryption ciphers in use.</db:para>
<db:para>The peer's certificate and its certificate chain will be known by the time <db:link xlink:href="qnetworkreply.xml#sslErrors">sslErrors</db:link>() is emitted, if it's emitted.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setSslConfiguration">setSslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslConfigurationImplementation">
<db:title>[virtual protected, since 5.0] void QNetworkReply::sslConfigurationImplementation(QSslConfiguration &amp;<db:emphasis>configuration</db:emphasis>) const</db:title>
<db:para>This virtual method is provided to enable overriding the behavior of <db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>(). <db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>() is a public wrapper for this method. The configuration will be returned in <db:code role="parameter">configuration</db:code>.</db:para>
<db:para>This function was introduced in Qt 5.0.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#setSslConfigurationImplementation">setSslConfigurationImplementation</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="sslErrors">
<db:title>void QNetworkReply::sslErrors(const QList&lt;QSslError&gt; &amp;<db:emphasis>errors</db:emphasis>)</db:title>
<db:para>This signal is emitted if the SSL/TLS session encountered errors during the set up, including certificate verification errors. The <db:code role="parameter">errors</db:code> parameter contains the list of errors.</db:para>
<db:para>To indicate that the errors are not fatal and that the connection should proceed, the <db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>() function should be called from the slot connected to this signal. If it is not called, the SSL session will be torn down before any data is exchanged (including the URL).</db:para>
<db:para>This signal can be used to display an error message to the user indicating that security may be compromised and display the SSL settings (see <db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>() to obtain it). If the user decides to proceed after analyzing the remote certificate, the slot should call <db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsslsocket.xml#sslErrors">QSslSocket::sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkaccessmanager.xml#sslErrors">QNetworkAccessManager::sslErrors</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#sslConfiguration">sslConfiguration</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#ignoreSslErrors">ignoreSslErrors</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="uploadProgress">
<db:title>void QNetworkReply::uploadProgress(qint64 <db:emphasis>bytesSent</db:emphasis>, qint64 <db:emphasis>bytesTotal</db:emphasis>)</db:title>
<db:para>This signal is emitted to indicate the progress of the upload part of this network request, if there's any. If there's no upload associated with this request, this signal will not be emitted.</db:para>
<db:para>The <db:code role="parameter">bytesSent</db:code> parameter indicates the number of bytes uploaded, while <db:code role="parameter">bytesTotal</db:code> indicates the total number of bytes to be uploaded. If the number of bytes to be uploaded could not be determined, <db:code role="parameter">bytesTotal</db:code> will be -1.</db:para>
<db:para>The upload is finished when <db:code role="parameter">bytesSent</db:code> is equal to <db:code role="parameter">bytesTotal</db:code>. At that time, <db:code role="parameter">bytesTotal</db:code> will not be -1.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#downloadProgress">downloadProgress</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="url">
<db:title>QUrl QNetworkReply::url() const</db:title>
<db:para>Returns the URL of the content downloaded or uploaded. Note that the URL may be different from that of the original request.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qnetworkreply.xml#request">request</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkreply.xml#setUrl">setUrl</db:link>()</db:member>
<db:member><db:link xlink:href="qnetworkrequest.xml#url">QNetworkRequest::url</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
</db:article>
