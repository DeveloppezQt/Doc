<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Taking a Screenshot</db:title>
<db:productname>QtWidgets</db:productname>
<db:edition>Qt 6.7.2 Reference Documentation</db:edition>
<db:titleabbrev>Qt Widgets Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The Screenshot example shows how to take a screenshot of the desktop.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/screenshot-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>With the application the users can take a screenshot of their desktop. They are provided with a couple of options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Delaying the screenshot, giving them time to rearrange their desktop.</db:para>
</db:listitem>
<db:listitem>
<db:para>Hiding the application's window while the screenshot is taken.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>In addition the application allows the users to save their screenshot if they want to.</db:para>
<db:section xml:id="screenshot-class-definition">
<db:title>Screenshot Class Definition</db:title>
<db:programlisting language="cpp">class Screenshot : public QWidget
{
    Q_OBJECT

public:
    Screenshot();

protected:
    void resizeEvent(QResizeEvent *event) override;

private slots:
    void newScreenshot();
    void saveScreenshot();
    void shootScreen();
    void updateCheckBox();

private:
    void updateScreenshotLabel();

    QPixmap originalPixmap;

    QLabel *screenshotLabel;
    QSpinBox *delaySpinBox;
    QCheckBox *hideThisWindowCheckBox;
    QPushButton *newScreenshotButton;
};
</db:programlisting>
<db:para>The Screenshot class inherits <db:link xlink:href="qwidget.xml">QWidget</db:link> and is the application's main widget. It displays the application options and a preview of the screenshot.</db:para>
<db:para>We reimplement the <db:link xlink:href="qwidget.xml#resizeEvent">QWidget::resizeEvent</db:link>() function to make sure that the preview of the screenshot scales properly when the user resizes the application widget. We also need several private slots to facilitate the options:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>The newScreenshot() slot prepares a new screenshot.</db:para>
</db:listitem>
<db:listitem>
<db:para>The saveScreenshot() slot saves the last screenshot.</db:para>
</db:listitem>
<db:listitem>
<db:para>The shootScreen() slot takes the screenshot.</db:para>
</db:listitem>
<db:listitem>
<db:para>The updateCheckBox() slot enables or disables the <db:guilabel>Hide This Window</db:guilabel> option.</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>We also declare the private function updateScreenshotLabel() which is called whenever a new screenshot is taken or when a resize event changes the size of the screenshot preview label.</db:para>
<db:para>In addition we need to store the screenshot's original pixmap. The reason is that when we display the preview of the screenshot, we need to scale its pixmap, storing the original we make sure that no data are lost in that process.</db:para>
</db:section>
<db:section xml:id="screenshot-class-implementation">
<db:title>Screenshot Class Implementation</db:title>
<db:programlisting language="cpp">Screenshot::Screenshot()
    :  screenshotLabel(new QLabel(this))
{
    screenshotLabel-&amp;gt;setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
    screenshotLabel-&amp;gt;setAlignment(Qt::AlignCenter);

    const QRect screenGeometry = screen()-&amp;gt;geometry();
    screenshotLabel-&amp;gt;setMinimumSize(screenGeometry.width() / 8, screenGeometry.height() / 8);

    QVBoxLayout *mainLayout = new QVBoxLayout(this);
    mainLayout-&amp;gt;addWidget(screenshotLabel);

    QGroupBox *optionsGroupBox = new QGroupBox(tr(&quot;Options&quot;), this);
    delaySpinBox = new QSpinBox(optionsGroupBox);
    delaySpinBox-&amp;gt;setSuffix(tr(&quot; s&quot;));
    delaySpinBox-&amp;gt;setMaximum(60);

    connect(delaySpinBox, &amp;amp;QSpinBox::valueChanged,
            this, &amp;amp;Screenshot::updateCheckBox);

    hideThisWindowCheckBox = new QCheckBox(tr(&quot;Hide This Window&quot;), optionsGroupBox);

    QGridLayout *optionsGroupBoxLayout = new QGridLayout(optionsGroupBox);
    optionsGroupBoxLayout-&amp;gt;addWidget(new QLabel(tr(&quot;Screenshot Delay:&quot;), this), 0, 0);
    optionsGroupBoxLayout-&amp;gt;addWidget(delaySpinBox, 0, 1);
    optionsGroupBoxLayout-&amp;gt;addWidget(hideThisWindowCheckBox, 1, 0, 1, 2);

    mainLayout-&amp;gt;addWidget(optionsGroupBox);

    QHBoxLayout *buttonsLayout = new QHBoxLayout;
    newScreenshotButton = new QPushButton(tr(&quot;New Screenshot&quot;), this);
    connect(newScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Screenshot::newScreenshot);
    buttonsLayout-&amp;gt;addWidget(newScreenshotButton);
    QPushButton *saveScreenshotButton = new QPushButton(tr(&quot;Save Screenshot&quot;), this);
    connect(saveScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;Screenshot::saveScreenshot);
    buttonsLayout-&amp;gt;addWidget(saveScreenshotButton);
    QPushButton *quitScreenshotButton = new QPushButton(tr(&quot;Quit&quot;), this);
    quitScreenshotButton-&amp;gt;setShortcut(Qt::CTRL | Qt::Key_Q);
    connect(quitScreenshotButton, &amp;amp;QPushButton::clicked, this, &amp;amp;QWidget::close);
    buttonsLayout-&amp;gt;addWidget(quitScreenshotButton);
    buttonsLayout-&amp;gt;addStretch();
    mainLayout-&amp;gt;addLayout(buttonsLayout);

    shootScreen();
    delaySpinBox-&amp;gt;setValue(5);

    setWindowTitle(tr(&quot;Screenshot&quot;));
    resize(300, 200);
}
</db:programlisting>
<db:para>In the constructor we first create the <db:link xlink:href="qlabel.xml">QLabel</db:link> displaying the screenshot preview.</db:para>
<db:para>We set the <db:link xlink:href="qlabel.xml">QLabel</db:link>'s size policy to be <db:link xlink:href="qsizepolicy.xml#Policy-enum">QSizePolicy::Expanding</db:link> both horizontally and vertically. This means that the <db:link xlink:href="qlabel.xml">QLabel</db:link>'s size hint is a sensible size, but the widget can be shrunk and still be useful. Also, the widget can make use of extra space, so it should get as much space as possible. Then we make sure the <db:link xlink:href="qlabel.xml">QLabel</db:link> is aligned in the center of the Screenshot widget, and set its minimum size.</db:para>
<db:para>Next, we create a group box that will contain all of the options' widgets. Then we create a <db:link xlink:href="qspinbox.xml">QSpinBox</db:link> and a <db:link xlink:href="qlabel.xml">QLabel</db:link> for the <db:guilabel>Screenshot Delay</db:guilabel> option, and connect the spinbox to the updateCheckBox() slot. Finally, we create a <db:link xlink:href="qcheckbox.xml">QCheckBox</db:link> for the <db:guilabel>Hide This Window</db:guilabel> option, add all the options' widgets to a <db:link xlink:href="qgridlayout.xml">QGridLayout</db:link> installed on the group box.</db:para>
<db:para>We create the applications's buttons and the group box containing the application's options, and put it all into a main layout. Finally we take the initial screenshot, and set the initial delay and the window title, before we resize the widget to a suitable size depending on the screen geometry.</db:para>
<db:programlisting language="cpp">void Screenshot::resizeEvent(QResizeEvent * /* event */)
{
    QSize scaledSize = originalPixmap.size();
    scaledSize.scale(screenshotLabel-&amp;gt;size(), Qt::KeepAspectRatio);
    if (scaledSize != screenshotLabel-&amp;gt;pixmap().size())
        updateScreenshotLabel();
}
</db:programlisting>
<db:para>The resizeEvent() function is reimplemented to receive the resize events dispatched to the widget. The purpose is to scale the preview screenshot pixmap without deformation of its content, and also make sure that the application can be resized smoothly.</db:para>
<db:para>To achieve the first goal, we scale the screenshot pixmap using <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::KeepAspectRatio</db:link>. We scale the pixmap to a rectangle as large as possible inside the current size of the screenshot preview label, preserving the aspect ratio. This means that if the user resizes the application window in only one direction, the preview screenshot keeps the same size.</db:para>
<db:para>To reach our second goal, we make sure that the preview screenshot only is repainted (using the private updateScreenshotLabel() function) when it actually changes its size.</db:para>
<db:programlisting language="cpp">void Screenshot::newScreenshot()
{
    if (hideThisWindowCheckBox-&amp;gt;isChecked())
        hide();
    newScreenshotButton-&amp;gt;setDisabled(true);

    QTimer::singleShot(delaySpinBox-&amp;gt;value() * 1000, this, &amp;amp;Screenshot::shootScreen);
}
</db:programlisting>
<db:para>The private newScreenshot() slot is called when the user requests a new screenshot; but the slot only prepares a new screenshot.</db:para>
<db:para>First we see if the <db:guilabel>Hide This Window</db:guilabel> option is checked, if it is we hide the Screenshot widget. Then we disable the <db:guilabel>New Screenshot</db:guilabel> button, to make sure the user only can request one screenshot at a time.</db:para>
<db:para>We create a timer using the <db:link xlink:href="qtimer.xml">QTimer</db:link> class which provides repetitive and single-shot timers. We set the timer to time out only once, using the static <db:link xlink:href="qtimer.xml#singleShot">QTimer::singleShot</db:link>() function. This function calls the private shootScreen() slot after the time interval specified by the <db:guilabel>Screenshot Delay</db:guilabel> option. It is shootScreen() that actually performs the screenshot.</db:para>
<db:programlisting language="cpp">void Screenshot::saveScreenshot()
{
    const QString format = &quot;png&quot;;
    QString initialPath = QStandardPaths::writableLocation(QStandardPaths::PicturesLocation);
    if (initialPath.isEmpty())
        initialPath = QDir::currentPath();
    initialPath += tr(&quot;/untitled.&quot;) + format;

    QFileDialog fileDialog(this, tr(&quot;Save As&quot;), initialPath);
    fileDialog.setAcceptMode(QFileDialog::AcceptSave);
    fileDialog.setFileMode(QFileDialog::AnyFile);
    fileDialog.setDirectory(initialPath);
    QStringList mimeTypes;
    const QList&amp;lt;QByteArray&amp;gt; baMimeTypes = QImageWriter::supportedMimeTypes();
    for (const QByteArray &amp;amp;bf : baMimeTypes)
        mimeTypes.append(QLatin1String(bf));
    fileDialog.setMimeTypeFilters(mimeTypes);
    fileDialog.selectMimeTypeFilter(&quot;image/&quot; + format);
    fileDialog.setDefaultSuffix(format);
    if (fileDialog.exec() != QDialog::Accepted)
        return;
    const QString fileName = fileDialog.selectedFiles().first();
    if (!originalPixmap.save(fileName)) {
        QMessageBox::warning(this, tr(&quot;Save Error&quot;), tr(&quot;The image could not be saved to \&quot;%1\&quot;.&quot;)
                             .arg(QDir::toNativeSeparators(fileName)));
    }
}
</db:programlisting>
<db:para>The saveScreenshot() slot is called when the user push the <db:guilabel>Save</db:guilabel> button, and it presents a file dialog using the <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> class.</db:para>
<db:para><db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> enables a user to traverse the file system in order to select one or many files or a directory. The easiest way to create a <db:link xlink:href="qfiledialog.xml">QFileDialog</db:link> is to use the convenience static functions. Here, we instantiate the dialog on the stack in order to be able to set up the supported mime types of <db:link xlink:href="qimagewriter.xml">QImageWriter</db:link>, allowing the user to save in a variety of formats.</db:para>
<db:para>We define the default file format to be png, and we make the file dialog's initial path the location of pictures as obtained from <db:link xlink:href="qstandardpaths.xml">QStandardPaths</db:link>, defaulting to the path the application is run from.</db:para>
<db:para>We run the dialog by invoking <db:link xlink:href="qdialog.xml#exec">QDialog::exec</db:link>() and return if the user canceled the dialog. If the dialog has been accepted, we obtain a file name by calling <db:link xlink:href="qfiledialog.xml#selectedFiles">QFileDialog::selectedFiles</db:link>(). The file does not have to exist. If the file name is valid, we use the <db:link xlink:href="qpixmap.xml#save">QPixmap::save</db:link>() function to save the screenshot's original pixmap in that file.</db:para>
<db:programlisting language="cpp">void Screenshot::shootScreen()
{
    QScreen *screen = QGuiApplication::primaryScreen();
    if (const QWindow *window = windowHandle())
        screen = window-&amp;gt;screen();
    if (!screen)
        return;

    if (delaySpinBox-&amp;gt;value() != 0)
        QApplication::beep();

    originalPixmap = screen-&amp;gt;grabWindow(0);
    updateScreenshotLabel();

    newScreenshotButton-&amp;gt;setDisabled(false);
    if (hideThisWindowCheckBox-&amp;gt;isChecked())
        show();
}
</db:programlisting>
<db:para>The shootScreen() slot is called to take the screenshot.</db:para>
<db:para>First, we find the instance of <db:link xlink:href="qscreen.xml">QScreen</db:link> the window is located by retrieving the <db:link xlink:href="qwindow.xml">QWindow</db:link> and its <db:link xlink:href="qscreen.xml">QScreen</db:link>, defaulting to the primary screen. If no screen can be found, we return. Although this is unlikely to happen, applications should check for null pointers since there might be situations in which no screen is connected.</db:para>
<db:para>If the user has chosen to delay the screenshot, we make the application beep when the screenshot is taken using the static <db:link xlink:href="qapplication.xml#beep">QApplication::beep</db:link>() function.</db:para>
<db:para>We then take the screenshot using the <db:link xlink:href="qscreen.xml#grabWindow">QScreen::grabWindow</db:link>() function. The function grabs the contents of the window passed as an argument, makes a pixmap out of it and returns that pixmap. The window id can be obtained with <db:link xlink:href="qwidget.xml#winId">QWidget::winId</db:link>() or <db:link xlink:href="qwindow.xml#winId">QWindow::winId</db:link>(). Here, however, we just pass 0 as the window id, indicating that we want to grab the entire screen.</db:para>
<db:para>We update the screenshot preview label using the private updateScreenshotLabel() function. Then we enable the <db:guilabel>New Screenshot</db:guilabel> button, and finally we make the Screenshot widget visible if it was hidden during the screenshot.</db:para>
<db:programlisting language="cpp">void Screenshot::updateCheckBox()
{
    if (delaySpinBox-&amp;gt;value() == 0) {
        hideThisWindowCheckBox-&amp;gt;setDisabled(true);
        hideThisWindowCheckBox-&amp;gt;setChecked(false);
    } else {
        hideThisWindowCheckBox-&amp;gt;setDisabled(false);
    }
}
</db:programlisting>
<db:para>The <db:guilabel>Hide This Window</db:guilabel> option is enabled or disabled depending on the delay of the screenshot. If there is no delay, the application window cannot be hidden and the option's checkbox is disabled.</db:para>
<db:para>The updateCheckBox() slot is called whenever the user changes the delay using the <db:guilabel>Screenshot Delay</db:guilabel> option.</db:para>
<db:programlisting language="cpp">void Screenshot::updateScreenshotLabel()
{
    screenshotLabel-&amp;gt;setPixmap(originalPixmap.scaled(screenshotLabel-&amp;gt;size(),
                                                     Qt::KeepAspectRatio,
                                                     Qt::SmoothTransformation));
}
</db:programlisting>
<db:para>The private updateScreenshotLabel() function is called whenever the screenshot changes, or when a resize event changes the size of the screenshot preview label. It updates the screenshot preview's label using the <db:link xlink:href="qlabel.xml#pixmap-prop">QLabel::setPixmap</db:link>() and <db:link xlink:href="qpixmap.xml#scaled">QPixmap::scaled</db:link>() functions.</db:para>
<db:para><db:link xlink:href="qpixmap.xml#scaled">QPixmap::scaled</db:link>() returns a copy of the given pixmap scaled to a rectangle of the given size according to the given <db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link> and <db:link xlink:href="qt.xml#TransformationMode-enum">Qt::TransformationMode</db:link>.</db:para>
<db:para>We scale the original pixmap to fit the current screenshot label's size, preserving the aspect ratio and giving the resulting pixmap smoothed edges.</db:para>
</db:section>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtbase.git/tree/examples/widgets/desktop/screenshot?h=6.7">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
