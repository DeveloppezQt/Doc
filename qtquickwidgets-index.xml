<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Widgets</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Provides a C++ widget class for displaying a Qt Quick user interface.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>The Qt Quick Widgets module is a convenience wrapper for <db:link xlink:href="qquickwindow.xml">QQuickWindow</db:link>. It will automatically load and display a QML scene when given the URL of the main qml file. Alternatively, you can instantiate QML objects using <db:link xlink:href="qqmlcomponent.xml">QQmlComponent</db:link> and place them in a manually set-up <db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link>.</db:para>
<db:para>Typical usage:</db:para>
<db:programlisting language="cpp">QQuickWidget *view = new QQuickWidget;
view-&gt;setSource(QUrl::fromLocalFile(&quot;myqmlfile.qml&quot;));
view-&gt;show();
</db:programlisting>
<db:para><db:link xlink:href="qquickwidget.xml">QQuickWidget</db:link> also manages resizing the view and the root item. By default, the <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> is set to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link>, which will load the component and resize it to fit the view. Alternatively, you can set <db:link xlink:href="qquickwidget.xml#resizeMode-prop">resizeMode</db:link> to <db:link xlink:href="qquickwidget.xml#ResizeMode-enum">SizeViewToRootObject</db:link>, which will resize the view to the root item.</db:para>
<db:section xml:id="using-the-module">
<db:title>Using the Module</db:title>
<db:para>Using a Qt module's C++ API requires linking against the module library, either directly or through other dependencies. Several build tools have dedicated support for this, including <db:link xlink:href="https://cmake.org/cmake/help/latest/">CMake</db:link> and <db:link xlink:href="qmake-manual.xml">qmake</db:link>.</db:para>
<db:section xml:id="building-with-cmake">
<db:title>Building with CMake</db:title>
<db:para>Use the find_package() command to locate the needed module component in the Qt6 package:</db:para>
<db:programlisting language="cpp">find_package(Qt6 REQUIRED COMPONENTS QuickWidgets)
target_link_libraries(mytarget PRIVATE Qt6::QuickWidgets)
</db:programlisting>
<db:para>For more details, see the <db:link xlink:href="">Build with CMake</db:link> overview.</db:para>
</db:section>
<db:section xml:id="building-with-qmake-quickwidgets">
<db:title>Building with qmake quickwidgets</db:title>
<db:para>To configure the module for building with qmake, add the module as a value of the QT variable in the project's .pro file:</db:para>
<db:programlisting language="cpp">QT += quickwidgets
</db:programlisting>
</db:section>
</db:section>
<db:section xml:id="reference">
<db:title>Reference</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="qtquickwidgets-module.xml">Qt Quick Widgets C++ Classes</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="licenses-and-attributions">
<db:title>Licenses and Attributions</db:title>
<db:para>Qt Quick Widget is available under commercial licenses from <db:link xlink:href="http://www.qt.io/about-us/">The Qt Company</db:link>. In addition, it is available under free software licenses. Since Qt 5.4, these free software licenses are <db:link xlink:href="">GNU Lesser General Public License, version 3</db:link>, or the <db:link xlink:href="">GNU General Public License, version 2</db:link>. See <db:link xlink:href="">Qt Licensing</db:link> for more details.</db:para>
</db:section>
</db:article>
