<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick Particles Examples - Image Particles</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 6.6.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>This is a collection of examples using Affectors in the QML particle system.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/qml-imageparticle-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:para>This is a collection of small QML examples relating to using Affectors in the particle system. Each example is a small QML file emphasizing a particular type or feature.</db:para>
<db:para>All at once shows off several of the features of <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> at the same time.</db:para>
<db:programlisting language="qml">sprites: [
    Sprite {
        name: &quot;bear&quot;
        source: &quot;images/bear_tiles.png&quot;
        frameCount: 13
        frameDuration: 120
    }
]
colorVariation: 0.5
rotationVelocityVariation: 360
colorTable: &quot;images/colortable.png&quot;
</db:programlisting>
<db:para>Colored shows a simple <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> with some color variation.</db:para>
<db:programlisting language="qml">ImageParticle {
    anchors.fill: parent
    source: &quot;qrc:///particleresources/star.png&quot;
    alpha: 0
    alphaVariation: 0.2
    colorVariation: 1.0
}
</db:programlisting>
<db:para>Color Table sets the color over life on the particles to provide a fixed rainbow effect.</db:para>
<db:programlisting language="qml">source: &quot;qrc:///particleresources/glowdot.png&quot;
colorTable: &quot;images/colortable.png&quot;
sizeTable: &quot;images/colortable.png&quot;
</db:programlisting>
<db:para>Deformation spins and squishes a starfish particle.</db:para>
<db:programlisting language="qml">ImageParticle {
    system: sys
    groups: [&quot;goingLeft&quot;, &quot;goingRight&quot;]
    source: &quot;images/starfish_4.png&quot;
    rotation: 90
    rotationVelocity: 90
    autoRotation: true
}
ImageParticle {
    system: sys
    groups: [&quot;goingDown&quot;]
    source: &quot;images/starfish_0.png&quot;
    rotation: 180
    yVector: PointDirection { y: 0.5; yVariation: 0.25; xVariation: 0.25; }
}
</db:programlisting>
<db:para>Rotation demonstrates the autoRotate property, so that particles rotate in the direction that they travel.</db:para>
<db:para>Sharing demonstrates what happens when multiple ImageParticles try to render the same particle. The following <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> renders the particles inside the <db:link xlink:href="qml-qtquick-listview.xml">ListView</db:link>:</db:para>
<db:programlisting language="qml">ImageParticle {
    anchors.fill: parent
    system: particles
    source: &quot;images/flower.png&quot;
    alpha: 0.1
    color: &quot;white&quot;
    rotationVariation: 180
    z: -1
}
</db:programlisting>
<db:para>The following <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> is placed inside the list highlight, and renders the particles above the other <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link>.</db:para>
<db:programlisting language="qml">ImageParticle {
    anchors.fill: parent
    system: particles
    source: &quot;images/flower.png&quot;
    color: &quot;red&quot;
    clip: true
    alpha: 1.0
}
</db:programlisting>
<db:para>Note that because it sets the color and alpha in this <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link>, it renders the particles in a different color. Since it doesn't specify anything about the rotation, it shares the rotation with the other <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link> so that the flowers are rotated the same way in both. Note that you can undo rotation in another <db:link xlink:href="qml-qtquick-particles-imageparticle.xml">ImageParticle</db:link>, you just need to explicitly set rotationVariation to 0.</db:para>
<db:para>Sprites demonstrates using an image particle to render animated sprites instead of static images for each particle.</db:para>
<db:section>
<db:title>Example project</db:title>
<db:para><db:link xlink:href="https://code.qt.io/cgit/qt/qtdeclarative.git/tree/examples/quick/particles/imageparticle?h=6.6">Example project @ code.qt.io</db:link></db:para>
</db:section>
</db:article>
