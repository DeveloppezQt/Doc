<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick 3D - Picking example</db:title>
<db:productname>QtQuick3D</db:productname>
<db:edition>Qt Quick 3D | Commercial or GPLv3</db:edition>
<db:titleabbrev>Qt Quick 3D Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Demonstrates picking of models.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:para>This example demonstrates picking. There are 3 different animated models which can be picked. When a model is picked, the animation is stopped and the model color changed to make it clear which model got picked. Detailed information of the pick result is displayed on the top of the application window.</db:para>
<db:mediaobject>
<db:imageobject>
<db:imagedata fileref="images/picking-example.png"/>
</db:imageobject>
</db:mediaobject>
<db:section xml:id="making-model-pickable">
<db:title>Making Model Pickable</db:title>
<db:para>To make a model pickable, the <db:link xlink:href="qml-qtquick3d-model.xml#pickable-prop">pickable</db:link> property needs to be set to <db:code>true</db:code>. We also add <db:code>objectName</db:code> for the model to be able to display the name of the picked model.</db:para>
<db:programlisting language="qml">Model {
    id: cubeModel
    objectName: &quot;Cube&quot;
    source: &quot;#Cube&quot;
    pickable: true
    property bool isPicked: false
</db:programlisting>
<db:para>The <db:code>isPicked</db:code> property was added to be used to toggle the animation and color.</db:para>
<db:programlisting language="qml">materials: DefaultMaterial {
    diffuseColor: cubeModel.isPicked ? &quot;#41cd52&quot; : &quot;#09102b&quot;
    ...
SequentialAnimation on eulerRotation {
    running: !cubeModel.isPicked
</db:programlisting>
</db:section>
<db:section xml:id="getting-pick-results">
<db:title>Getting Pick Results</db:title>
<db:para>To do the actual picking we need to add a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> to cover the entire <db:link xlink:href="qml-qtquick3d-view3d.xml">View3D</db:link>.</db:para>
<db:programlisting language="qml">MouseArea {
    anchors.fill: view
</db:programlisting>
<db:para>In the <db:code>onClicked</db:code> handler of the mouse area, we use the <db:link xlink:href="qml-qtquick3d-view3d.xml#pick-method">pick</db:link> method to get the actual result of the pick.</db:para>
<db:programlisting language="qml">var result = view.pick(mouse.x, mouse.y);
</db:programlisting>
<db:para>If the result has a <db:link xlink:href="qml-qtquick3d-pickresult.xml#objectHit-prop">target object</db:link>, we go through the specifics of the result, and display them in the text field at the top of the application view.</db:para>
<db:programlisting language="qml">if (result.objectHit) {
    var pickedObject = result.objectHit;
    // Toggle the isPicked property for the model
    pickedObject.isPicked = !pickedObject.isPicked;
    // Get picked model name
    pickName.text = pickedObject.objectName;
    // Get other pick specifics
    uvPosition.text = &quot;(&quot;
            + result.uvPosition.x.toFixed(2) + &quot;, &quot;
            + result.uvPosition.y.toFixed(2) + &quot;)&quot;;
    distance.text = result.distance.toFixed(2);
    scenePosition.text = &quot;(&quot;
            + result.scenePosition.x.toFixed(2) + &quot;, &quot;
            + result.scenePosition.y.toFixed(2) + &quot;, &quot;
            + result.scenePosition.z.toFixed(2) + &quot;)&quot;;
    localPosition.text = &quot;(&quot;
            + result.position.x.toFixed(2) + &quot;, &quot;
            + result.position.y.toFixed(2) + &quot;, &quot;
            + result.position.z.toFixed(2) + &quot;)&quot;;
    worldNormal.text = &quot;(&quot;
            + result.sceneNormal.x.toFixed(2) + &quot;, &quot;
            + result.sceneNormal.y.toFixed(2) + &quot;, &quot;
            + result.sceneNormal.z.toFixed(2) + &quot;)&quot;;
    localNormal.text = &quot;(&quot;
            + result.normal.x.toFixed(2) + &quot;, &quot;
            + result.normal.y.toFixed(2) + &quot;, &quot;
            + result.normal.z.toFixed(2) + &quot;)&quot;;
</db:programlisting>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Files:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="picking/CMakeLists.txt">picking/CMakeLists.txt</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="picking/main.cpp">picking/main.cpp</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="picking/main.qml">picking/main.qml</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="picking/materials.qrc">picking/materials.qrc</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="picking/picking.pro">picking/picking.pro</db:link></db:para></db:listitem>
<db:listitem>
<db:para><db:link xlink:href="picking/qml.qrc">picking/qml.qrc</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
<db:section>
<db:title>List of Files</db:title>
<db:para>Images:</db:para>
<db:section>
<db:title>List of Files</db:title>
<db:itemizedlist>
<db:listitem>
<db:para><db:link xlink:href="picking/maps/roughness.jpg">picking/maps/roughness.jpg</db:link></db:para></db:listitem>
</db:itemizedlist>
</db:section>
</db:section></db:section></db:article>
