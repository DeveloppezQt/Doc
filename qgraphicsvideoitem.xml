<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QGraphicsVideoItem Class</db:title>
<db:productname>QtMultimedia</db:productname>
<db:edition>Qt 6.5.3 Reference Documentation</db:edition>
<db:titleabbrev>Qt Multimedia Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> class provides a graphics item which display video produced by a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> or <db:link xlink:href="qcamera.xml">QCamera</db:link>.</db:para>
</db:abstract>
<db:pubdate>2024-02-14</db:pubdate>
<db:date>2024-02-14</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QGraphicsVideoItem</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS MultimediaWidgets)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::MultimediaWidgets)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += multimediawidgets</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Inherits</db:term>
<db:listitem>
<db:para><db:link xlink:href="qgraphicsobject.xml" xlink:role="class">QGraphicsObject</db:link></db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QGraphicsVideoItem is part of <db:simplelist><db:member>multimedia</db:member></db:simplelist></db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>Attaching a <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> to a <db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link> or <db:link xlink:href="qcamera.xml">QCamera</db:link> allows it to display the video or image output of that media object.</db:para>
<db:programlisting language="cpp">player = new QMediaPlayer(this);

QGraphicsVideoItem *item = new QGraphicsVideoItem;
player-&amp;gt;setVideoOutput(item);
graphicsView-&amp;gt;scene()-&amp;gt;addItem(item);
graphicsView-&amp;gt;show();

player-&amp;gt;setSource(QUrl(&quot;http://example.com/myclip4.ogv&quot;));
player-&amp;gt;play();
</db:programlisting>
<db:para><db:emphasis role="bold">Note</db:emphasis>: Only a single display output can be attached to a media object at one time.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml">QMediaPlayer</db:link></db:member>
<db:member><db:link xlink:href="qvideowidget.xml">QVideoWidget</db:link></db:member>
<db:member><db:link xlink:href="qcamera.xml">QCamera</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="property-documentation">
<db:title>Property Documentation</db:title>
<db:section xml:id="aspectRatioMode-prop">
<db:title>aspectRatioMode : Qt::AspectRatioMode</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>Qt::AspectRatioMode</db:type>
<db:varname>aspectRatioMode</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">aspectRatioMode</db:synopsisinfo>
<db:synopsisinfo role="setter">setAspectRatioMode</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>how a video is scaled to fit the graphics item's size.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis role="bold">aspectRatioMode</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setAspectRatioMode</db:emphasis>(<db:type><db:link xlink:href="qt.xml#AspectRatioMode-enum">Qt::AspectRatioMode</db:link></db:type> <db:emphasis>mode</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="nativeSize-prop">
<db:title>[read-only] nativeSize : const QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>nativeSize</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">nativeSize</db:synopsisinfo>
<db:synopsisinfo role="notifier">nativeSizeChanged</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the native size of the video.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">nativeSize</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>
<db:emphasis role="bold">Notifier signal:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">nativeSizeChanged</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="offset-prop">
<db:title>offset : QPointF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QPointF</db:type>
<db:varname>offset</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">offset</db:synopsisinfo>
<db:synopsisinfo role="setter">setOffset</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video item's offset.</db:para>
<db:para><db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> will draw video using the offset for its top left corner.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> <db:emphasis role="bold">offset</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setOffset</db:emphasis>(const <db:type><db:link xlink:href="qpointf.xml">QPointF</db:link></db:type> &amp;<db:emphasis>offset</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="size-prop">
<db:title>size : QSizeF</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QSizeF</db:type>
<db:varname>size</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">size</db:synopsisinfo>
<db:synopsisinfo role="setter">setSize</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>This property holds the video item's size.</db:para>
<db:para><db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link> will draw video scaled to fit size according to its fillMode.</db:para>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> <db:emphasis role="bold">size</db:emphasis>() const</db:para>
</db:listitem>
<db:listitem>
<db:para><db:type>void</db:type> <db:emphasis role="bold">setSize</db:emphasis>(const <db:type><db:link xlink:href="qsizef.xml">QSizeF</db:link></db:type> &amp;<db:emphasis>size</db:emphasis>)</db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="videoSink-prop">
<db:title>[read-only] videoSink : QVideoSink* const</db:title>
<db:fieldsynopsis>
<db:modifier>(Qt property)</db:modifier>
<db:type>QVideoSink*</db:type>
<db:varname>videoSink</db:varname>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
<db:synopsisinfo role="getter">videoSink</db:synopsisinfo>
</db:fieldsynopsis>
<db:para>Returns the underlying video sink that can render video frames to the current item. This property is never <db:code>nullptr</db:code>. Example of how to render video frames to <db:link xlink:href="qgraphicsvideoitem.xml">QGraphicsVideoItem</db:link>:</db:para>
<db:programlisting language="cpp">QGraphicsVideoItem *item = new QGraphicsVideoItem;
graphicsView-&amp;gt;scene()-&amp;gt;addItem(item);
graphicsView-&amp;gt;show();
QImage img = QImage(&quot;images/qt-logo.png&quot;).convertToFormat(QImage::Format_ARGB32);
item-&amp;gt;videoSink()-&amp;gt;setVideoFrame(QVideoFrame(img));
</db:programlisting>
<db:para>
<db:emphasis role="bold">Access functions:
</db:emphasis>
</db:para>
<db:itemizedlist>
<db:listitem>
<db:para><db:type><db:link xlink:href="qvideosink.xml">QVideoSink</db:link></db:type> *<db:emphasis role="bold">videoSink</db:emphasis>() const</db:para>
</db:listitem>
</db:itemizedlist>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qmediaplayer.xml#videoOutput-prop">QMediaPlayer::setVideoOutput</db:link></db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QGraphicsVideoItem">
<db:title>[explicit] QGraphicsVideoItem::QGraphicsVideoItem(QGraphicsItem *<db:emphasis>parent</db:emphasis> = nullptr)</db:title>
<db:constructorsynopsis>
<db:methodname>QGraphicsVideoItem</db:methodname>
<db:methodparam>
<db:type>QGraphicsItem *</db:type>
<db:parameter>parent</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:synopsisinfo role="meta">constructor</db:synopsisinfo>
<db:synopsisinfo role="signature">QGraphicsVideoItem(QGraphicsItem *parent)</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:constructorsynopsis>
<db:para>Constructs a graphics item that displays video.</db:para>
<db:para>The <db:code role="parameter">parent</db:code> is passed to <db:link xlink:href="qgraphicsitem.xml">QGraphicsItem</db:link>.</db:para>
</db:section>
<db:section xml:id="dtor.QGraphicsVideoItem">
<db:title>[virtual] QGraphicsVideoItem::~QGraphicsVideoItem()</db:title>
<db:destructorsynopsis>
<db:modifier>virtual</db:modifier>
<db:methodname>~QGraphicsVideoItem</db:methodname>
<db:void/>
<db:synopsisinfo role="meta">destructor</db:synopsisinfo>
<db:synopsisinfo role="signature">~QGraphicsVideoItem()</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:destructorsynopsis>
<db:para>Destroys a video graphics item.</db:para>
</db:section>
<db:section xml:id="boundingRect">
<db:title>[override virtual] QRectF QGraphicsVideoItem::boundingRect() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>QRectF</db:type>
<db:methodname>boundingRect</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">QRectF boundingRect() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#boundingRect" role="function">QGraphicsItem::boundingRect() const</db:link>.</db:para>
</db:section>
<db:section xml:id="paint">
<db:title>[override virtual] void QGraphicsVideoItem::paint(QPainter *<db:emphasis>painter</db:emphasis>, const QStyleOptionGraphicsItem *<db:emphasis>option</db:emphasis>, QWidget *<db:emphasis>widget</db:emphasis> = nullptr)</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:void/>
<db:methodname>paint</db:methodname>
<db:methodparam>
<db:type>QPainter *</db:type>
<db:parameter>painter</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>const QStyleOptionGraphicsItem *</db:type>
<db:parameter>option</db:parameter>
</db:methodparam>
<db:methodparam>
<db:type>QWidget *</db:type>
<db:parameter>widget</db:parameter>
<db:initializer>nullptr</db:initializer>
</db:methodparam>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#paint" role="function">QGraphicsItem::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)</db:link>.</db:para>
</db:section>
<db:section xml:id="type">
<db:title>[override virtual] int QGraphicsVideoItem::type() const</db:title>
<db:methodsynopsis>
<db:modifier>virtual</db:modifier>
<db:modifier>const</db:modifier>
<db:type>int</db:type>
<db:methodname>type</db:methodname>
<db:void/>
<db:modifier>override</db:modifier>
<db:synopsisinfo role="meta">plain</db:synopsisinfo>
<db:synopsisinfo role="signature">int type() const override</db:synopsisinfo>
<db:synopsisinfo role="access">public</db:synopsisinfo>
<db:synopsisinfo role="status">active</db:synopsisinfo>
<db:synopsisinfo role="threadsafeness">unspecified</db:synopsisinfo>
</db:methodsynopsis>
<db:para>Reimplements: <db:link xlink:href="qgraphicsitem.xml#type" role="function">QGraphicsItem::type() const</db:link>.</db:para>
<db:para>Returns an int representing the type of the video item.</db:para>
</db:section>
</db:section>
</db:article>
