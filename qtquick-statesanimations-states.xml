<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>Qt Quick States</db:title>
<db:productname>QtQuick</db:productname>
<db:edition>Qt 5.12.12 Reference Documentation</db:edition>
<db:titleabbrev>Qt Quick Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>Creating and setting states.</db:para>
</db:abstract>
<db:pubdate>2024-12-27</db:pubdate>
<db:date>2024-12-27</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:section xml:id="related-types">
<db:title>Related Types</db:title>
<db:variablelist role="qtquick-states">
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-anchorchanges.xml" xlink:role="">AnchorChanges</db:link></db:term>
<db:listitem>
<db:para>Specifies how to change the anchors of an item in a state.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-parentchange.xml" xlink:role="">ParentChange</db:link></db:term>
<db:listitem>
<db:para>Specifies how to reparent an Item in a state change.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-propertychanges.xml" xlink:role="">PropertyChanges</db:link></db:term>
<db:listitem>
<db:para>Describes new property bindings or values for a state.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-state.xml" xlink:role="">State</db:link></db:term>
<db:listitem>
<db:para>Defines configurations of objects and properties.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-statechangescript.xml" xlink:role="">StateChangeScript</db:link></db:term>
<db:listitem>
<db:para>Specifies how to run a script in a state.</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term><db:link xlink:href="qml-qtquick-stategroup.xml" xlink:role="">StateGroup</db:link></db:term>
<db:listitem>
<db:para>Provides built-in state support for non-Item types.</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:para>Many user interface designs are <db:emphasis>state driven</db:emphasis>; interfaces have configurations that differ depending on the current state. For example, a traffic signal will configure its flags or lights depending on its state. While in the signal's <db:code>stop</db:code> state, a red light will turn on while the yellow and the green lights will turn off. In the <db:code>caution</db:code> state, the yellow light is on while the other lights are turned off.</db:para>
<db:para>In QML, <db:emphasis>states</db:emphasis> are a set of property configurations defined in a <db:link xlink:href="qml-qtquick-state.xml">State</db:link> type. Different configurations could, for example:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Show some UI components and hide others</db:para>
</db:listitem>
<db:listitem>
<db:para>Present different available actions to the user</db:para>
</db:listitem>
<db:listitem>
<db:para>Start, stop, or pause animations</db:para>
</db:listitem>
<db:listitem>
<db:para>Execute some script required in the new state</db:para>
</db:listitem>
<db:listitem>
<db:para>Change a property value for a particular item</db:para>
</db:listitem>
<db:listitem>
<db:para>Show a different view or screen</db:para>
</db:listitem>
</db:itemizedlist>
<db:para>All <db:link xlink:href="qml-qtquick-item.xml">Item</db:link>-based objects have a <db:code>state</db:code> property, and can specify additional states by adding new <db:code>State</db:code> objects to the item's <db:link xlink:href="qml-qtquick-item.xml#states-prop">states</db:link> property. Each state within a component has a unique <db:code>name</db:code>, an empty string being the default. To change the current state of an item, set the <db:link xlink:href="qml-qtquick-item.xml#state-prop">state</db:link> property to the name of the state.</db:para>
<db:para>Non-Item objects may use states through the <db:link xlink:href="qml-qtquick-stategroup.xml">StateGroup</db:link> type.</db:para>
</db:section>
<db:section xml:id="creating-states">
<db:title>Creating States</db:title>
<db:para>To create a state, add a <db:link xlink:href="qml-qtquick-state.xml">State</db:link> object to the item's <db:link xlink:href="qml-qtquick-item.xml#states-prop">states</db:link> property, which holds a list of states for that item.</db:para>
<db:para>A warning <db:code>signal</db:code> component may have two states, the <db:code>NORMAL</db:code> and the <db:code>CRITICAL</db:code> state. Suppose that in the <db:code>NORMAL</db:code> state, the <db:code>color</db:code> of the signal should be <db:code>green</db:code> and the warning <db:code>flag</db:code> is down. Meanwhile, in the <db:code>CRITICAL</db:code> state, the <db:code>color</db:code> should be <db:code>red</db:code> and the flag is <db:code>up</db:code>. We may model the states using the <db:code>State</db:code> type and the color and flag configurations with the <db:code>PropertyChanges</db:code> type.</db:para>
<db:programlisting language="qml">Rectangle {
    id: signal
    width: 200; height: 200
    state: &quot;NORMAL&quot;

    states: [
        State {
            name: &quot;NORMAL&quot;
            PropertyChanges { target: signal; color: &quot;green&quot;}
            PropertyChanges { target: flag; state: &quot;FLAG_DOWN&quot;}
        },
        State {
            name: &quot;CRITICAL&quot;
            PropertyChanges { target: signal; color: &quot;red&quot;}
            PropertyChanges { target: flag; state: &quot;FLAG_UP&quot;}
        }
    ]
}
</db:programlisting>
<db:para>The <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link> type will change the values of object properties. Objects are referenced through their <db:link xlink:href="qtqml-syntax-objectattributes.xml#the-id-attribute">id</db:link>. Objects outside the component are also referenced using the <db:code>id</db:code> property, exemplified by the property change to the external <db:code>flag</db:code> object.</db:para>
<db:para>Further, the state may change by assigning the <db:code>state</db:code> property with the appropriate signal state. A state switch could be in a <db:link xlink:href="qml-qtquick-mousearea.xml">MouseArea</db:link> type, assigning a different state whenever the signal receives a mouse click.</db:para>
<db:programlisting language="qml">Rectangle {
    id: signalswitch
    width: 75; height: 75
    color: &quot;blue&quot;

    MouseArea {
        anchors.fill: parent
        onClicked: {
            if (signal.state == &quot;NORMAL&quot;)
                signal.state = &quot;CRITICAL&quot;
            else
                signal.state = &quot;NORMAL&quot;
        }
    }
}
</db:programlisting>
<db:para>The State type is not limited to performing modifications on property values. It can also:</db:para>
<db:itemizedlist>
<db:listitem>
<db:para>Run some script using <db:link xlink:href="qml-qtquick-statechangescript.xml">StateChangeScript</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Override an existing signal handler for an object using <db:link xlink:href="qml-qtquick-propertychanges.xml">PropertyChanges</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Re-parent an <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> using <db:link xlink:href="qml-qtquick-parentchange.xml">ParentChange</db:link></db:para>
</db:listitem>
<db:listitem>
<db:para>Modify anchor values using <db:link xlink:href="qml-qtquick-anchorchanges.xml">AnchorChanges</db:link></db:para>
</db:listitem>
</db:itemizedlist>
</db:section>
<db:section xml:id="the-default-state">
<db:title>The Default State</db:title>
<db:para>Every <db:link xlink:href="qml-qtquick-item.xml">Item</db:link> based component has a <db:code>state</db:code> property and a <db:emphasis>default state</db:emphasis>. The default state is the empty string (<db:code>&quot;&quot;</db:code>) and contains all of an item's initial property values. The default state is useful for managing property values before state changes. Setting the <db:code>state</db:code> property to an empty string will load the default state.</db:para>
</db:section>
<db:section xml:id="the-when-property">
<db:title>The <db:code>when</db:code> Property</db:title>
<db:para>For convenience, the <db:link xlink:href="qml-qtquick-state.xml">State</db:link> type has a <db:code>when</db:code> property that can bind to expressions to change the state whenever the bound expression evaluates to <db:code>true</db:code>. The <db:code>when</db:code> property will revert the state back to the <db:link xlink:href="qtquick-statesanimations-states.xml#the-default-state">default state</db:link> when the expression evaluates to false.</db:para>
<db:programlisting language="qml">Rectangle {
    id: bell
    width: 75; height: 75
    color: &quot;yellow&quot;

    states: State {
                name: &quot;RINGING&quot;
                when: (signal.state == &quot;CRITICAL&quot;)
                PropertyChanges {target: speaker; play: &quot;RING!&quot;}
            }
}
</db:programlisting>
<db:para>The <db:code>bell</db:code> component will change to the <db:code>RINGING</db:code> state whenever the <db:code>signal.state</db:code> is <db:code>CRITICAL</db:code>.</db:para>
</db:section>
<db:section xml:id="animating-state-changes">
<db:title>Animating State Changes</db:title>
<db:para>State changes induce abrupt value changes. The <db:link xlink:href="qml-qtquick-transition.xml">Transition</db:link> type allow smoother changes during state changes. In transitions, animations and interpolation behaviors are definable. The <db:link xlink:href="qtquick-statesanimations-animations.xml">Animation and Transitions</db:link> article has more information about creating state animations.</db:para>
<db:para>The <db:link xlink:href="qtquick-animation-example.xml">Animation</db:link> example demonstrates how to declare a basic set of states and apply animated transitions between them.</db:para>
<db:para><db:link xlink:href="qtquick-statesanimations-behaviors.xml">Using Qt Quick Behaviors with States</db:link> explains a common problem when using Behaviors to animate state changes.</db:para>
</db:section>
<db:section xml:id="state-fast-forwarding">
<db:title>State Fast Forwarding</db:title>
<db:para>In order for Transition to correctly animate state changes, it is sometimes necessary for the engine to fast forward and rewind a state (that is, internally set and unset the state) before it is finally applied. The process is as follows:</db:para>
<db:orderedlist numeration="arabic">
<db:listitem>
<db:para>The state is fast forwarded to determine the complete set of end values.</db:para>
</db:listitem>
<db:listitem>
<db:para>The state is rewound.</db:para>
</db:listitem>
<db:listitem>
<db:para>The state is fully applied, with transitions.</db:para>
</db:listitem>
</db:orderedlist>
<db:para>In some cases this may cause unintended behavior. For example, a state that changes a view's <db:emphasis>model</db:emphasis> or a Loader's <db:emphasis>sourceComponent</db:emphasis> will set these properties multiple times (to apply, rewind, and then reapply), which can be relatively expensive.</db:para>
<db:para>State fast forwarding should be considered an implementation detail, and may change in later versions.</db:para>
</db:section>
</db:article>
