<?xml version="1.0" encoding="UTF-8"?>
<db:article xmlns:db="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.2" xml:lang="en">
<db:info>
<db:title>QSqlError Class</db:title>
<db:productname>QtSql</db:productname>
<db:edition>Qt 6.9.1 Reference Documentation</db:edition>
<db:titleabbrev>Qt SQL Reference Documentation</db:titleabbrev>
<db:abstract>
<db:para>The <db:link xlink:href="qsqlerror.xml">QSqlError</db:link> class provides SQL database error information.</db:para>
</db:abstract>
<db:pubdate>2025-06-29</db:pubdate>
<db:date>2025-06-29</db:date>
<db:authorgroup>
<db:author>
<db:orgname class="corporation">The Qt Company Ltd.</db:orgname>
</db:author>
</db:authorgroup>
</db:info>
<db:variablelist>
<db:varlistentry>
<db:term>Header</db:term>
<db:listitem>
<db:para>QSqlError</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>CMake</db:term>
<db:listitem>
<db:para>find_package(Qt6 REQUIRED COMPONENTS Sql)</db:para>
<db:para>target_link_libraries(mytarget PRIVATE Qt6::Sql)</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>qmake</db:term>
<db:listitem>
<db:para>QT += sql</db:para>
</db:listitem>
</db:varlistentry>
<db:varlistentry>
<db:term>Group</db:term>
<db:listitem>
<db:para>QSqlError is part of <db:simplelist><db:member><db:link xlink:href="database.xml">Database Classes</db:link></db:member></db:simplelist>
</db:para>
</db:listitem>
</db:varlistentry>
</db:variablelist>
<db:section xml:id="details">
<db:title>Detailed Description</db:title>
<db:para>A <db:link xlink:href="qsqlerror.xml">QSqlError</db:link> object can provide database-specific error data, including the <db:link xlink:href="qsqlerror.xml#driverText">driverText</db:link>() and <db:link xlink:href="qsqlerror.xml#databaseText">databaseText</db:link>() messages (or both concatenated together as <db:link xlink:href="qsqlerror.xml#text">text</db:link>()), and the <db:link xlink:href="qsqlerror.xml#nativeErrorCode">nativeErrorCode</db:link>() and <db:link xlink:href="qsqlerror.xml#type">type</db:link>().</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqldatabase.xml#lastError">QSqlDatabase::lastError</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlquery.xml#lastError">QSqlQuery::lastError</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="member-type-documentation">
<db:title>Member Type Documentation</db:title>
<db:section xml:id="ErrorType-enum">
<db:title>enum QSqlError::ErrorType</db:title>
<db:para>This enum type describes the context in which the error occurred, e.g., a connection error, a statement error, etc.</db:para>
<db:informaltable>
<db:thead>
<db:tr>
<db:th>Constant</db:th>
<db:th>Value</db:th>
<db:th>Description</db:th>
</db:tr>
</db:thead>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:emphasis>::NoError</db:code></db:para>
</db:td>
<db:td><db:code>0</db:code></db:td>
<db:td>
<db:para>No error occurred.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:emphasis>::ConnectionError</db:code></db:para>
</db:td>
<db:td><db:code>1</db:code></db:td>
<db:td>
<db:para>Connection error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:emphasis>::StatementError</db:code></db:para>
</db:td>
<db:td><db:code>2</db:code></db:td>
<db:td>
<db:para>SQL statement syntax error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:emphasis>::TransactionError</db:code></db:para>
</db:td>
<db:td><db:code>3</db:code></db:td>
<db:td>
<db:para>Transaction failed error.</db:para>
</db:td>
</db:tr>
<db:tr>
<db:td>
<db:para><db:code><db:emphasis role="bold"><db:link xlink:href="qsqlerror.xml">QSqlError</db:link></db:emphasis>::UnknownError</db:code></db:para>
</db:td>
<db:td><db:code>4</db:code></db:td>
<db:td>
<db:para>Unknown error.</db:para>
</db:td>
</db:tr>
</db:informaltable>
</db:section>
</db:section>
<db:section xml:id="member-function-documentation">
<db:title>Member Function Documentation</db:title>
<db:section xml:id="QSqlError-2">
<db:title>QSqlError::QSqlError(const QString &amp;<db:emphasis>driverText</db:emphasis> = QString(), const QString &amp;<db:emphasis>databaseText</db:emphasis> = QString(), QSqlError::ErrorType <db:emphasis>type</db:emphasis> = NoError, const QString &amp;<db:emphasis>nativeErrorCode</db:emphasis> = QString())</db:title>
<db:para>Constructs an error containing the driver error text <db:code role="parameter">driverText</db:code>, the database-specific error text <db:code role="parameter">databaseText</db:code>, the type <db:code role="parameter">type</db:code> and the native error code <db:code role="parameter">nativeErrorCode</db:code>.</db:para>
</db:section>
<db:section xml:id="QSqlError-1">
<db:title>QSqlError::QSqlError(const QSqlError &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Creates a copy of <db:code role="parameter">other</db:code>.</db:para>
</db:section>
<db:section xml:id="QSqlError">
<db:title>[noexcept] QSqlError::QSqlError(QSqlError &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-constructs a <db:link xlink:href="qsqlerror.xml">QSqlError</db:link> instance, making it point at the same object that <db:code role="parameter">other</db:code> was pointing to.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="dtor.QSqlError">
<db:title>[noexcept] QSqlError::~QSqlError()</db:title>
<db:para>Destroys the object and frees any allocated resources.</db:para>
</db:section>
<db:section xml:id="databaseText">
<db:title>QString QSqlError::databaseText() const</db:title>
<db:para>Returns the text of the error as reported by the database. This may contain database-specific descriptions; it may be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlerror.xml#driverText">driverText</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlerror.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="driverText">
<db:title>QString QSqlError::driverText() const</db:title>
<db:para>Returns the text of the error as reported by the driver. This may contain database-specific descriptions. It may also be empty.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlerror.xml#databaseText">databaseText</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlerror.xml#text">text</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="isValid">
<db:title>bool QSqlError::isValid() const</db:title>
<db:para>Returns <db:code>true</db:code> if an error is set, otherwise false.</db:para>
<db:para>Example:</db:para>
<db:programlisting language="cpp">QSqlQueryModel model;
model.setQuery(&quot;select * from myTable&quot;);
if (model.lastError().isValid())
    qDebug() &lt;&lt; model.lastError();
</db:programlisting>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlerror.xml#type">type</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="nativeErrorCode">
<db:title>QString QSqlError::nativeErrorCode() const</db:title>
<db:para>Returns the database-specific (native) error code, or an empty string if it cannot be determined.</db:para>
<db:note>
<db:para>Some drivers (like DB2 or ODBC) may return more than one error code. When this happens, <db:code>;</db:code> is used as separator between the error codes.</db:para>
</db:note>
</db:section>
<db:section xml:id="swap">
<db:title>[noexcept] void QSqlError::swap(QSqlError &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Swaps this error with <db:code role="parameter">other</db:code>. This operation is very fast and never fails.</db:para>
</db:section>
<db:section xml:id="text">
<db:title>QString QSqlError::text() const</db:title>
<db:para>This is a convenience function that returns <db:link xlink:href="qsqlerror.xml#databaseText">databaseText</db:link>() and <db:link xlink:href="qsqlerror.xml#driverText">driverText</db:link>() concatenated into a single string.</db:para>
<db:section>
<db:title>See Also</db:title>
<db:para><db:emphasis>See also </db:emphasis>
<db:simplelist type="vert" role="see-also">
<db:member><db:link xlink:href="qsqlerror.xml#driverText">driverText</db:link>()</db:member>
<db:member><db:link xlink:href="qsqlerror.xml#databaseText">databaseText</db:link>()</db:member>
</db:simplelist>
</db:para>
</db:section>
</db:section>
<db:section xml:id="type">
<db:title>QSqlError::ErrorType QSqlError::type() const</db:title>
<db:para>Returns the error type, or -1 if the type cannot be determined.</db:para>
</db:section>
<db:section xml:id="operator-not-eq">
<db:title>bool QSqlError::operator!=(const QSqlError &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compare the <db:code role="parameter">other</db:code> error's <db:link xlink:href="qsqlerror.xml#type">type</db:link>() and <db:link xlink:href="qsqlerror.xml#nativeErrorCode">nativeErrorCode</db:link>() to this error and returns <db:code>true</db:code> if it is not equal.</db:para>
</db:section>
<db:section xml:id="operator-eq">
<db:title>[noexcept] QSqlError &amp;QSqlError::operator=(QSqlError &amp;&amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Move-assigns <db:code role="parameter">other</db:code> to this <db:link xlink:href="qsqlerror.xml">QSqlError</db:link> instance.</db:para>
<db:note>
<db:para>The moved-from object <db:code role="parameter">other</db:code> is placed in a partially-formed state, in which the only valid operations are destruction and assignment of a new value.</db:para>
</db:note>
</db:section>
<db:section xml:id="operator-eq-1">
<db:title>QSqlError &amp;QSqlError::operator=(const QSqlError &amp;<db:emphasis>other</db:emphasis>)</db:title>
<db:para>Assigns the <db:code role="parameter">other</db:code> error's values to this error.</db:para>
</db:section>
<db:section xml:id="operator-eq-eq">
<db:title>bool QSqlError::operator==(const QSqlError &amp;<db:emphasis>other</db:emphasis>) const</db:title>
<db:para>Compare the <db:code role="parameter">other</db:code> error's <db:link xlink:href="qsqlerror.xml#type">type</db:link>() and <db:link xlink:href="qsqlerror.xml#nativeErrorCode">nativeErrorCode</db:link>() to this error and returns <db:code>true</db:code>, if it equal.</db:para>
</db:section>
</db:section>
</db:article>
